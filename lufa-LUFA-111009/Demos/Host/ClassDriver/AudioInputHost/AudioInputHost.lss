
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000193c  000019d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000193c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011e  0080011e  000019ee  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005267  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020c6  00000000  00000000  00006f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002708  00000000  00000000  00009005  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f0  00000000  00000000  0000b710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002501  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025c0  00000000  00000000  0000e301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  000108c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	37 c1       	rjmp	.+622    	; 0x270 <__ctors_end>
       2:	00 00       	nop
       4:	53 c1       	rjmp	.+678    	; 0x2ac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c1       	rjmp	.+674    	; 0x2ac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c1       	rjmp	.+670    	; 0x2ac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c1       	rjmp	.+666    	; 0x2ac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c1       	rjmp	.+662    	; 0x2ac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c1       	rjmp	.+658    	; 0x2ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c1       	rjmp	.+654    	; 0x2ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c1       	rjmp	.+650    	; 0x2ac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c1       	rjmp	.+646    	; 0x2ac <__bad_interrupt>
      26:	00 00       	nop
      28:	71 c5       	rjmp	.+2786   	; 0xb0c <__vector_10>
      2a:	00 00       	nop
      2c:	3f c1       	rjmp	.+638    	; 0x2ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c1       	rjmp	.+634    	; 0x2ac <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c1       	rjmp	.+630    	; 0x2ac <__bad_interrupt>
      36:	00 00       	nop
      38:	39 c1       	rjmp	.+626    	; 0x2ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	37 c1       	rjmp	.+622    	; 0x2ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c1       	rjmp	.+618    	; 0x2ac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c1       	rjmp	.+614    	; 0x2ac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c1       	rjmp	.+610    	; 0x2ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c1       	rjmp	.+606    	; 0x2ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c1       	rjmp	.+602    	; 0x2ac <__bad_interrupt>
      52:	00 00       	nop
      54:	31 c1       	rjmp	.+610    	; 0x2b8 <__vector_21>
      56:	00 00       	nop
      58:	29 c1       	rjmp	.+594    	; 0x2ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	27 c1       	rjmp	.+590    	; 0x2ac <__bad_interrupt>
      5e:	00 00       	nop
      60:	25 c1       	rjmp	.+586    	; 0x2ac <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c1       	rjmp	.+582    	; 0x2ac <__bad_interrupt>
      66:	00 00       	nop
      68:	21 c1       	rjmp	.+578    	; 0x2ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1f c1       	rjmp	.+574    	; 0x2ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	1d c1       	rjmp	.+570    	; 0x2ac <__bad_interrupt>
      72:	00 00       	nop
      74:	1b c1       	rjmp	.+566    	; 0x2ac <__bad_interrupt>
      76:	00 00       	nop
      78:	19 c1       	rjmp	.+562    	; 0x2ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	17 c1       	rjmp	.+558    	; 0x2ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	15 c1       	rjmp	.+554    	; 0x2ac <__bad_interrupt>
      82:	00 00       	nop
      84:	13 c1       	rjmp	.+550    	; 0x2ac <__bad_interrupt>
      86:	00 00       	nop
      88:	11 c1       	rjmp	.+546    	; 0x2ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0f c1       	rjmp	.+542    	; 0x2ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	0d c1       	rjmp	.+538    	; 0x2ac <__bad_interrupt>
      92:	00 00       	nop
      94:	0b c1       	rjmp	.+534    	; 0x2ac <__bad_interrupt>
      96:	00 00       	nop
      98:	9b 03       	fmulsu	r17, r19
      9a:	8c 04       	cpc	r8, r12
      9c:	b9 03       	fmulsu	r19, r17
      9e:	c3 03       	fmuls	r20, r19
      a0:	ee 03       	fmulsu	r22, r22
      a2:	16 04       	cpc	r1, r6
      a4:	21 04       	cpc	r2, r1
      a6:	32 04       	cpc	r3, r2
      a8:	4e 04       	cpc	r4, r14
      aa:	75 04       	cpc	r7, r5

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4511>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4506>:
     131:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     141:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

0000014c <__c.4504>:
     14c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     15c:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     16c:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000176 <__c.4501>:
     176:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     186:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000195 <__c.4499>:
     195:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1a5:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1b5:	6f 6e 2e 0d 0a 00                                   on....

000001bb <__c.4497>:
     1bb:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1cb:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1db:	6f 20 49 6e 70 75 74 20 44 65 76 69 63 65 2e 0d     o Input Device..
     1eb:	0a 00                                               ..

000001ed <__c.4495>:
     1ed:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1fd:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     20d:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000021a <__c.4488>:
     21a:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     22a:	68 65 64 2e 0d 0a 00                                hed....

00000231 <__c.4483>:
     231:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     241:	0d 0a 00                                            ...

00000244 <__c.4466>:
     244:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
     254:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     264:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000270 <__ctors_end>:
     270:	11 24       	eor	r1, r1
     272:	1f be       	out	0x3f, r1	; 63
     274:	cf ef       	ldi	r28, 0xFF	; 255
     276:	d0 e2       	ldi	r29, 0x20	; 32
     278:	de bf       	out	0x3e, r29	; 62
     27a:	cd bf       	out	0x3d, r28	; 61

0000027c <__do_copy_data>:
     27c:	11 e0       	ldi	r17, 0x01	; 1
     27e:	a0 e0       	ldi	r26, 0x00	; 0
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	ec e3       	ldi	r30, 0x3C	; 60
     284:	f9 e1       	ldi	r31, 0x19	; 25
     286:	00 e0       	ldi	r16, 0x00	; 0
     288:	0b bf       	out	0x3b, r16	; 59
     28a:	02 c0       	rjmp	.+4      	; 0x290 <__do_copy_data+0x14>
     28c:	07 90       	elpm	r0, Z+
     28e:	0d 92       	st	X+, r0
     290:	ae 31       	cpi	r26, 0x1E	; 30
     292:	b1 07       	cpc	r27, r17
     294:	d9 f7       	brne	.-10     	; 0x28c <__do_copy_data+0x10>

00000296 <__do_clear_bss>:
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	ae e1       	ldi	r26, 0x1E	; 30
     29a:	b1 e0       	ldi	r27, 0x01	; 1
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <.do_clear_bss_start>

0000029e <.do_clear_bss_loop>:
     29e:	1d 92       	st	X+, r1

000002a0 <.do_clear_bss_start>:
     2a0:	a0 34       	cpi	r26, 0x40	; 64
     2a2:	b2 07       	cpc	r27, r18
     2a4:	e1 f7       	brne	.-8      	; 0x29e <.do_clear_bss_loop>
     2a6:	ce d0       	rcall	.+412    	; 0x444 <main>
     2a8:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <_exit>

000002ac <__bad_interrupt>:
     2ac:	a9 ce       	rjmp	.-686    	; 0x0 <__vectors>

000002ae <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ae:	9b b1       	in	r25, 0x0b	; 11
     2b0:	9f 70       	andi	r25, 0x0F	; 15
     2b2:	89 2b       	or	r24, r25
     2b4:	8b b9       	out	0x0b, r24	; 11
     2b6:	08 95       	ret

000002b8 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	0b b6       	in	r0, 0x3b	; 59
     2c4:	0f 92       	push	r0
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	cf 93       	push	r28
     2dc:	ef 93       	push	r30
     2de:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     2e0:	c0 91 a7 00 	lds	r28, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     2e4:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                               ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     2e6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_HostState>
     2ea:	8b 30       	cpi	r24, 0x0B	; 11
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <__vector_21+0x38>
     2ee:	4b c0       	rjmp	.+150    	; 0x386 <__vector_21+0xce>
     2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2f4:	88 23       	and	r24, r24
     2f6:	09 f4       	brne	.+2      	; 0x2fa <__vector_21+0x42>
     2f8:	46 c0       	rjmp	.+140    	; 0x386 <__vector_21+0xce>
				  return false;

				bool SampleReceived = false;

				Pipe_SelectPipe(AudioInterfaceInfo->Config.DataINPipeNumber);
     2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2fe:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     302:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     306:	8f 7b       	andi	r24, 0xBF	; 191
     308:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     30c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     310:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Host_IsSampleReceived(&Microphone_Audio_Interface))
     31a:	90 ff       	sbrs	r25, 0
     31c:	34 c0       	rjmp	.+104    	; 0x386 <__vector_21+0xce>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     31e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				Data.Bytes[1] = UPDATX;
     322:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     326:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     32a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Pipe_Read_16_LE();

				if (!(Pipe_BytesInPipe()))
     32e:	89 2b       	or	r24, r25
     330:	79 f4       	brne	.+30     	; 0x350 <__vector_21+0x98>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     332:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     336:	8f 7b       	andi	r24, 0xBF	; 191
     338:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     33c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     340:	8e 77       	andi	r24, 0x7E	; 126
     342:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     346:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     34a:	80 64       	ori	r24, 0x40	; 64
     34c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);
     350:	82 2f       	mov	r24, r18
     352:	92 2f       	mov	r25, r18
     354:	99 0f       	add	r25, r25
     356:	99 0b       	sbc	r25, r25

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     358:	80 58       	subi	r24, 0x80	; 128
     35a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     35e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     362:	21 31       	cpi	r18, 0x11	; 17
     364:	44 f4       	brge	.+16     	; 0x376 <__vector_21+0xbe>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     366:	29 30       	cpi	r18, 0x09	; 9
     368:	44 f4       	brge	.+16     	; 0x37a <__vector_21+0xc2>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     36a:	25 30       	cpi	r18, 0x05	; 5
     36c:	44 f4       	brge	.+16     	; 0x37e <__vector_21+0xc6>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     36e:	23 30       	cpi	r18, 0x03	; 3
     370:	44 f0       	brlt	.+16     	; 0x382 <__vector_21+0xca>
		  LEDMask = (LEDS_LED1);
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	07 c0       	rjmp	.+14     	; 0x384 <__vector_21+0xcc>

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     376:	80 ef       	ldi	r24, 0xF0	; 240
     378:	05 c0       	rjmp	.+10     	; 0x384 <__vector_21+0xcc>
		else if (Sample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     37a:	80 eb       	ldi	r24, 0xB0	; 176
     37c:	03 c0       	rjmp	.+6      	; 0x384 <__vector_21+0xcc>
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     37e:	80 e3       	ldi	r24, 0x30	; 48
     380:	01 c0       	rjmp	.+2      	; 0x384 <__vector_21+0xcc>
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));

		uint8_t LEDMask = LEDS_NO_LEDS;
     382:	80 e0       	ldi	r24, 0x00	; 0
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
		  LEDMask = (LEDS_LED1);

		LEDs_SetAllLEDs(LEDMask);
     384:	94 df       	rcall	.-216    	; 0x2ae <LEDs_SetAllLEDs>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     386:	c0 93 a7 00 	sts	0x00A7, r28	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
	
	Pipe_SelectPipe(PrevPipe);
}
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	cf 91       	pop	r28
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	0f 90       	pop	r0
     3a6:	0b be       	out	0x3b, r0	; 59
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3b2:	84 b7       	in	r24, 0x34	; 52
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	a8 95       	wdr
     3be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3c2:	88 61       	ori	r24, 0x18	; 24
     3c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3c8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3cc:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3de:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3e0:	83 e3       	ldi	r24, 0x33	; 51
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     3e8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3f2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3f6:	88 e1       	ldi	r24, 0x18	; 24
     3f8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     3fc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3fe:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     400:	8a b1       	in	r24, 0x0a	; 10
     402:	80 6f       	ori	r24, 0xF0	; 240
     404:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     406:	8b b1       	in	r24, 0x0b	; 11
     408:	8f 70       	andi	r24, 0x0F	; 15
     40a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     40c:	69 d3       	rcall	.+1746   	; 0xae0 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     40e:	aa e3       	ldi	r26, 0x3A	; 58
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	ec e2       	ldi	r30, 0x2C	; 44
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	11 96       	adiw	r26, 0x01	; 1
     418:	fc 93       	st	X, r31
     41a:	ee 93       	st	-X, r30
					stdout = Stream;
     41c:	13 96       	adiw	r26, 0x03	; 3
     41e:	fc 93       	st	X, r31
     420:	ee 93       	st	-X, r30
     422:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     424:	8e e0       	ldi	r24, 0x0E	; 14
     426:	df 01       	movw	r26, r30
     428:	1d 92       	st	X+, r1
     42a:	8a 95       	dec	r24
     42c:	e9 f7       	brne	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	83 83       	std	Z+3, r24	; 0x03
     432:	83 e7       	ldi	r24, 0x73	; 115
     434:	99 e0       	ldi	r25, 0x09	; 9
     436:	91 87       	std	Z+9, r25	; 0x09
     438:	80 87       	std	Z+8, r24	; 0x08
     43a:	8c e7       	ldi	r24, 0x7C	; 124
     43c:	99 e0       	ldi	r25, 0x09	; 9
     43e:	93 87       	std	Z+11, r25	; 0x0b
     440:	82 87       	std	Z+10, r24	; 0x0a
     442:	08 95       	ret

00000444 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     444:	b6 df       	rcall	.-148    	; 0x3b2 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     446:	84 e4       	ldi	r24, 0x44	; 68
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	98 d7       	rcall	.+3888   	; 0x137c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     44c:	80 e1       	ldi	r24, 0x10	; 16
     44e:	2f df       	rcall	.-418    	; 0x2ae <LEDs_SetAllLEDs>
	sei();
     450:	78 94       	sei

	for (;;)
	{
		Audio_Host_USBTask(&Microphone_Audio_Interface);
		USB_USBTask();
     452:	ef d5       	rcall	.+3038   	; 0x1032 <USB_USBTask>
     454:	fe cf       	rjmp	.-4      	; 0x452 <main+0xe>

00000456 <EVENT_USB_Host_DeviceAttached>:
     456:	81 e3       	ldi	r24, 0x31	; 49
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	90 d7       	rcall	.+3872   	; 0x137c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	27 cf       	rjmp	.-434    	; 0x2ae <LEDs_SetAllLEDs>

00000460 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     460:	8a e1       	ldi	r24, 0x1A	; 26
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	8b d7       	rcall	.+3862   	; 0x137c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     466:	80 e1       	ldi	r24, 0x10	; 16
     468:	22 cf       	rjmp	.-444    	; 0x2ae <LEDs_SetAllLEDs>

0000046a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	c5 50       	subi	r28, 0x05	; 5
     47c:	d2 40       	sbci	r29, 0x02	; 2
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     488:	80 ea       	ldi	r24, 0xA0	; 160
     48a:	11 df       	rcall	.-478    	; 0x2ae <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	32 e0       	ldi	r19, 0x02	; 2
     490:	ae 01       	movw	r20, r28
     492:	4f 5f       	subi	r20, 0xFF	; 255
     494:	5f 4f       	sbci	r21, 0xFF	; 255
     496:	be 01       	movw	r22, r28
     498:	6c 5f       	subi	r22, 0xFC	; 252
     49a:	7d 4f       	sbci	r23, 0xFD	; 253
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	e7 d3       	rcall	.+1998   	; 0xc6e <USB_Host_GetDeviceConfigDescriptor>
     4a0:	88 23       	and	r24, r24
     4a2:	19 f0       	breq	.+6      	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4a4:	8d ee       	ldi	r24, 0xED	; 237
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Microphone_Audio_Interface,
     4aa:	cc 5f       	subi	r28, 0xFC	; 252
     4ac:	dd 4f       	sbci	r29, 0xFD	; 253
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	c4 50       	subi	r28, 0x04	; 4
     4b4:	d2 40       	sbci	r29, 0x02	; 2
     4b6:	ae 01       	movw	r20, r28
     4b8:	4f 5f       	subi	r20, 0xFF	; 255
     4ba:	5f 4f       	sbci	r21, 0xFF	; 255
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	f7 d5       	rcall	.+3054   	; 0x10b0 <Audio_Host_ConfigurePipes>
     4c2:	88 23       	and	r24, r24
     4c4:	19 f0       	breq	.+6      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Input Device.\r\n"));
     4c6:	8b eb       	ldi	r24, 0xBB	; 187
     4c8:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	77 d5       	rcall	.+2798   	; 0xfbe <USB_Host_SetDeviceConfiguration>
     4d0:	88 23       	and	r24, r24
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4d2:	29 f0       	breq	.+10     	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4d4:	85 e9       	ldi	r24, 0x95	; 149
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	51 d7       	rcall	.+3746   	; 0x137c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4da:	80 e9       	ldi	r24, 0x90	; 144
		return;
	}

	if (Audio_Host_StartStopStreaming(&Microphone_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     4dc:	3f c0       	rjmp	.+126    	; 0x55c <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	b7 d6       	rcall	.+3438   	; 0x1254 <Audio_Host_StartStopStreaming>
     4e6:	88 23       	and	r24, r24
     4e8:	19 f0       	breq	.+6      	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     4ea:	86 e7       	ldi	r24, 0x76	; 118
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	1e c0       	rjmp	.+60     	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0xc2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     4f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Host_ControlPipeSize+0x1>
     4f4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <USB_Host_ControlPipeSize+0x2>
     4f8:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <USB_Host_ControlPipeSize+0x3>
     4fc:	cf 5f       	subi	r28, 0xFF	; 255
     4fe:	dd 4f       	sbci	r29, 0xFD	; 253
     500:	88 83       	st	Y, r24
     502:	99 83       	std	Y+1, r25	; 0x01
     504:	aa 83       	std	Y+2, r26	; 0x02
     506:	c1 50       	subi	r28, 0x01	; 1
     508:	d2 40       	sbci	r29, 0x02	; 2
	if (Audio_Host_GetSetEndpointProperty(&Microphone_Audio_Interface, Microphone_Audio_Interface.Config.DataINPipeNumber,
     50a:	ce 01       	movw	r24, r28
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	9d 4f       	sbci	r25, 0xFD	; 253
     510:	7c 01       	movw	r14, r24
     512:	03 e0       	ldi	r16, 0x03	; 3
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	a5 d6       	rcall	.+3402   	; 0x126e <Audio_Host_GetSetEndpointProperty>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     524:	88 23       	and	r24, r24
     526:	41 f0       	breq	.+16     	; 0x538 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     528:	8c e4       	ldi	r24, 0x4C	; 76
     52a:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     52c:	27 d7       	rcall	.+3662   	; 0x137c <puts_P>
     52e:	80 e9       	ldi	r24, 0x90	; 144
     530:	be de       	rcall	.-644    	; 0x2ae <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	44 d5       	rcall	.+2696   	; 0xfbe <USB_Host_SetDeviceConfiguration>
     536:	13 c0       	rjmp	.+38     	; 0x55e <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>
		return;
     538:	82 e0       	ldi	r24, 0x02	; 2
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     53a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     53e:	93 e1       	ldi	r25, 0x13	; 19
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     540:	97 bd       	out	0x27, r25	; 39
     542:	84 bd       	out	0x24, r24	; 36
	TCCR0A  = (1 << WGM01);  // CTC mode
     544:	85 bd       	out	0x25, r24	; 37
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed	

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     546:	3e 9a       	sbi	0x07, 6	; 7

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     548:	81 ec       	ldi	r24, 0xC1	; 193
     54a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     54e:	89 e0       	ldi	r24, 0x09	; 9
     550:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     554:	81 e3       	ldi	r24, 0x31	; 49
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	11 d7       	rcall	.+3618   	; 0x137c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     55a:	80 e6       	ldi	r24, 0x60	; 96
     55c:	a8 de       	rcall	.-688    	; 0x2ae <LEDs_SetAllLEDs>
     55e:	cb 5f       	subi	r28, 0xFB	; 251
}
     560:	dd 4f       	sbci	r29, 0xFD	; 253
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <EVENT_USB_Host_HostError>:
     57a:	c8 2f       	mov	r28, r24

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     57c:	49 d2       	rcall	.+1170   	; 0xa10 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     57e:	1f 92       	push	r1
     580:	cf 93       	push	r28
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	d1 d6       	rcall	.+3490   	; 0x132e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58c:	80 e9       	ldi	r24, 0x90	; 144
     58e:	8f de       	rcall	.-738    	; 0x2ae <LEDs_SetAllLEDs>
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	ff cf       	rjmp	.-2      	; 0x598 <EVENT_USB_Host_HostError+0x1e>

0000059a <EVENT_USB_Host_DeviceEnumerationFailed>:
     59a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     59e:	1f 92       	push	r1
     5a0:	9f 93       	push	r25
     5a2:	1f 92       	push	r1
     5a4:	6f 93       	push	r22
     5a6:	1f 92       	push	r1
     5a8:	8f 93       	push	r24
     5aa:	8c ea       	ldi	r24, 0xAC	; 172
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	bd d6       	rcall	.+3450   	; 0x132e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5b4:	8d b7       	in	r24, 0x3d	; 61
     5b6:	9e b7       	in	r25, 0x3e	; 62
     5b8:	08 96       	adiw	r24, 0x08	; 8
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	9e bf       	out	0x3e, r25	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	8d bf       	out	0x3d, r24	; 61
     5c4:	80 e9       	ldi	r24, 0x90	; 144
     5c6:	73 ce       	rjmp	.-794    	; 0x2ae <LEDs_SetAllLEDs>

000005c8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5c8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5cc:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5ce:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5d2:	9d 7f       	andi	r25, 0xFD	; 253
     5d4:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5d8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5dc:	92 60       	ori	r25, 0x02	; 2
     5de:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5e2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5e6:	91 fd       	sbrc	r25, 1
     5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5ea:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5ee:	91 60       	ori	r25, 0x01	; 1
     5f0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     5f4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5f8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5fc:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5fe:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     602:	2f 7d       	andi	r18, 0xDF	; 223
     604:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     608:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     60c:	2f 7d       	andi	r18, 0xDF	; 223
     60e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     612:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     614:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     618:	35 ff       	sbrs	r19, 5
     61a:	0b c0       	rjmp	.+22     	; 0x632 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     61c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     620:	2f 7d       	andi	r18, 0xDF	; 223
     622:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     626:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     62a:	2d 7f       	andi	r18, 0xFD	; 253
     62c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     630:	08 c0       	rjmp	.+16     	; 0x642 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     632:	ef ec       	ldi	r30, 0xCF	; 207
     634:	f7 e0       	ldi	r31, 0x07	; 7
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <USB_Host_ResetDevice+0x6e>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <USB_Host_ResetDevice+0x74>
     63c:	00 00       	nop
     63e:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     640:	49 f7       	brne	.-46     	; 0x614 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     642:	99 23       	and	r25, r25
     644:	29 f0       	breq	.+10     	; 0x650 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     646:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     64a:	90 62       	ori	r25, 0x20	; 32
     64c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     650:	81 11       	cpse	r24, r1
     652:	05 c0       	rjmp	.+10     	; 0x65e <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     654:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     658:	8e 7f       	andi	r24, 0xFE	; 254
     65a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     65e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     662:	82 60       	ori	r24, 0x02	; 2
     664:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     668:	08 95       	ret

0000066a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     66a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     66e:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     670:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     674:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     676:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     67a:	3f 7d       	andi	r19, 0xDF	; 223
     67c:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     680:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     684:	3f 7d       	andi	r19, 0xDF	; 223
     686:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     68a:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     68e:	31 60       	ori	r19, 0x01	; 1
     690:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     694:	88 23       	and	r24, r24
     696:	39 f1       	breq	.+78     	; 0x6e6 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     698:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     69c:	35 ff       	sbrs	r19, 5
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6a0:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6a4:	3f 7d       	andi	r19, 0xDF	; 223
     6a6:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6aa:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6ac:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <USB_HostState>
     6b0:	31 30       	cpi	r19, 0x01	; 1
     6b2:	c1 f0       	breq	.+48     	; 0x6e4 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6b4:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     6b8:	34 ff       	sbrs	r19, 4
     6ba:	09 c0       	rjmp	.+18     	; 0x6ce <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6bc:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     6c0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6c4:	8f 7e       	andi	r24, 0xEF	; 239
     6c6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6ca:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6ce:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     6d2:	31 ff       	sbrs	r19, 1
     6d4:	df cf       	rjmp	.-66     	; 0x694 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6d6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6da:	8d 7f       	andi	r24, 0xFD	; 253
     6dc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6e0:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     6e4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     6e6:	21 11       	cpse	r18, r1
     6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ea:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6ee:	2e 7f       	andi	r18, 0xFE	; 254
     6f0:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6f4:	99 23       	and	r25, r25
     6f6:	29 f0       	breq	.+10     	; 0x702 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6f8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6fc:	90 62       	ori	r25, 0x20	; 32
     6fe:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     702:	08 95       	ret

00000704 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     704:	ef 92       	push	r14
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	28 97       	sbiw	r28, 0x08	; 8
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     71e:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <USB_HostState>
     722:	8e 2f       	mov	r24, r30
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	8a 30       	cpi	r24, 0x0A	; 10
     728:	91 05       	cpc	r25, r1
     72a:	08 f0       	brcs	.+2      	; 0x72e <USB_Host_ProcessNextHostState+0x2a>
     72c:	f5 c0       	rjmp	.+490    	; 0x918 <USB_Host_ProcessNextHostState+0x214>
     72e:	fc 01       	movw	r30, r24
     730:	e4 5b       	subi	r30, 0xB4	; 180
     732:	ff 4f       	sbci	r31, 0xFF	; 255
     734:	f3 c5       	rjmp	.+3046   	; 0x131c <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     736:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <WaitMSRemaining.2935>
     73a:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <WaitMSRemaining.2935+0x1>
     73e:	01 15       	cp	r16, r1
     740:	11 05       	cpc	r17, r1
     742:	09 f4       	brne	.+2      	; 0x746 <USB_Host_ProcessNextHostState+0x42>
     744:	e9 c0       	rjmp	.+466    	; 0x918 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 df       	rcall	.-224    	; 0x66a <USB_Host_WaitMS>
     74a:	88 23       	and	r24, r24
     74c:	31 f0       	breq	.+12     	; 0x75a <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     74e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
     752:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     756:	91 e0       	ldi	r25, 0x01	; 1
					break;
     758:	d1 c0       	rjmp	.+418    	; 0x8fc <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     75a:	01 50       	subi	r16, 0x01	; 1
     75c:	11 09       	sbc	r17, r1
     75e:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <WaitMSRemaining.2935+0x1>
     762:	00 93 1f 01 	sts	0x011F, r16	; 0x80011f <WaitMSRemaining.2935>
     766:	01 2b       	or	r16, r17
     768:	09 f0       	breq	.+2      	; 0x76c <USB_Host_ProcessNextHostState+0x68>
     76a:	d6 c0       	rjmp	.+428    	; 0x918 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     76c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     770:	07 c0       	rjmp	.+14     	; 0x780 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     772:	88 ee       	ldi	r24, 0xE8	; 232
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <WaitMSRemaining.2935+0x1>
     77a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_HostState>
			break;
     784:	c9 c0       	rjmp	.+402    	; 0x918 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     786:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <WaitMSRemaining.2935>
     78a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <WaitMSRemaining.2935+0x1>
     78e:	9c 01       	movw	r18, r24
     790:	21 50       	subi	r18, 0x01	; 1
     792:	31 09       	sbc	r19, r1
     794:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <WaitMSRemaining.2935+0x1>
     798:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <WaitMSRemaining.2935>
     79c:	89 2b       	or	r24, r25
     79e:	39 f0       	breq	.+14     	; 0x7ae <USB_Host_ProcessNextHostState+0xaa>
     7a0:	8f ec       	ldi	r24, 0xCF	; 207
     7a2:	97 e0       	ldi	r25, 0x07	; 7
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <USB_Host_ProcessNextHostState+0xa0>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <USB_Host_ProcessNextHostState+0xa6>
     7aa:	00 00       	nop
     7ac:	b5 c0       	rjmp	.+362    	; 0x918 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7ae:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7b0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     7b4:	80 61       	ori	r24, 0x10	; 16
     7b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7ba:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     7be:	8b 7f       	andi	r24, 0xFB	; 251
     7c0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     7c4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     7c8:	80 61       	ori	r24, 0x10	; 16
     7ca:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7ce:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     7d2:	82 60       	ori	r24, 0x02	; 2
     7d4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	d2 cf       	rjmp	.-92     	; 0x780 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7dc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7e0:	80 ff       	sbrs	r24, 0
     7e2:	9a c0       	rjmp	.+308    	; 0x918 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7e4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7e8:	8e 7f       	andi	r24, 0xFE	; 254
     7ea:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ee:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7f2:	8d 7f       	andi	r24, 0xFD	; 253
     7f4:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7f8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     802:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     806:	82 60       	ori	r24, 0x02	; 2
     808:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     80c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     810:	81 60       	ori	r24, 0x01	; 1
     812:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     816:	e8 d0       	rcall	.+464    	; 0x9e8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     818:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_HostState>
     81c:	84 e6       	ldi	r24, 0x64	; 100
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <WaitMSRemaining.2935+0x1>
     824:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <WaitMSRemaining.2935>
     828:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     82a:	5c c0       	rjmp	.+184    	; 0x8e4 <USB_Host_ProcessNextHostState+0x1e0>
     82c:	cd de       	rcall	.-614    	; 0x5c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     82e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_HostState>
     832:	88 ec       	ldi	r24, 0xC8	; 200
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <WaitMSRemaining.2935+0x1>
     83a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <WaitMSRemaining.2935>
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	51 c0       	rjmp	.+162    	; 0x8e4 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     842:	e1 2c       	mov	r14, r1
     844:	00 e4       	ldi	r16, 0x40	; 64
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	6f d0       	rcall	.+222    	; 0x930 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     852:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     856:	87 fd       	sbrc	r24, 7
     858:	03 c0       	rjmp	.+6      	; 0x860 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     85a:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     85c:	94 e0       	ldi	r25, 0x04	; 4
     85e:	4e c0       	rjmp	.+156    	; 0x8fc <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     860:	87 e0       	ldi	r24, 0x07	; 7
     862:	8e cf       	rjmp	.-228    	; 0x780 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     864:	88 e0       	ldi	r24, 0x08	; 8
     866:	ee e0       	ldi	r30, 0x0E	; 14
     868:	f1 e0       	ldi	r31, 0x01	; 1
     86a:	a3 e2       	ldi	r26, 0x23	; 35
     86c:	b1 e0       	ldi	r27, 0x01	; 1
     86e:	01 90       	ld	r0, Z+
     870:	0d 92       	st	X+, r0
     872:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     874:	e1 f7       	brne	.-8      	; 0x86e <USB_Host_ProcessNextHostState+0x16a>
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	ab d2       	rcall	.+1366   	; 0xdd2 <USB_Host_SendControlRequest>
     87c:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     87e:	3d c0       	rjmp	.+122    	; 0x8fa <USB_Host_ProcessNextHostState+0x1f6>
     880:	88 85       	ldd	r24, Y+8	; 0x08
     882:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     886:	a0 de       	rcall	.-704    	; 0x5c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     888:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_HostState>
     88c:	88 ec       	ldi	r24, 0xC8	; 200
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <WaitMSRemaining.2935+0x1>
     894:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <WaitMSRemaining.2935>
     898:	88 e0       	ldi	r24, 0x08	; 8
     89a:	24 c0       	rjmp	.+72     	; 0x8e4 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     89c:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <USB_Host_ControlPipeSize>
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	e1 2c       	mov	r14, r1
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	41 d0       	rcall	.+130    	; 0x930 <Pipe_ConfigurePipe>
     8ae:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8b2:	87 ff       	sbrs	r24, 7
     8b4:	d2 cf       	rjmp	.-92     	; 0x85a <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	e6 e1       	ldi	r30, 0x16	; 22
     8ba:	f1 e0       	ldi	r31, 0x01	; 1
     8bc:	a3 e2       	ldi	r26, 0x23	; 35
     8be:	b1 e0       	ldi	r27, 0x01	; 1
     8c0:	01 90       	ld	r0, Z+
     8c2:	0d 92       	st	X+, r0
     8c4:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <USB_Host_ProcessNextHostState+0x1bc>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	82 d2       	rcall	.+1284   	; 0xdd2 <USB_Host_SendControlRequest>
     8ce:	81 11       	cpse	r24, r1
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8d2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_HostState>
     8d6:	84 e6       	ldi	r24, 0x64	; 100
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <WaitMSRemaining.2935+0x1>
     8de:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <WaitMSRemaining.2935>
     8e2:	89 e0       	ldi	r24, 0x09	; 9
     8e4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8e8:	17 c0       	rjmp	.+46     	; 0x918 <USB_Host_ProcessNextHostState+0x214>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     8f6:	b9 dd       	rcall	.-1166   	; 0x46a <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     900:	21 30       	cpi	r18, 0x01	; 1
     902:	51 f0       	breq	.+20     	; 0x918 <USB_Host_ProcessNextHostState+0x214>
     904:	68 2f       	mov	r22, r24
     906:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     908:	48 de       	rcall	.-880    	; 0x59a <EVENT_USB_Host_DeviceEnumerationFailed>
     90a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     90e:	81 60       	ori	r24, 0x01	; 1
     910:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     914:	a5 dd       	rcall	.-1206   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     916:	94 d0       	rcall	.+296    	; 0xa40 <USB_ResetInterface>
     918:	28 96       	adiw	r28, 0x08	; 8
	}
}
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ef 90       	pop	r14
     92e:	08 95       	ret

00000930 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     930:	ef 92       	push	r14
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     936:	2f 70       	andi	r18, 0x0F	; 15
     938:	42 2b       	or	r20, r18
     93a:	90 e4       	ldi	r25, 0x40	; 64
     93c:	69 9f       	mul	r22, r25
     93e:	b0 01       	movw	r22, r0
     940:	11 24       	eor	r1, r1
     942:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     944:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     946:	2e 2d       	mov	r18, r14
     948:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     94a:	37 30       	cpi	r19, 0x07	; 7
     94c:	08 f0       	brcs	.+2      	; 0x950 <Pipe_ConfigurePipe+0x20>
     94e:	45 c0       	rjmp	.+138    	; 0x9da <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     950:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     954:	38 13       	cpse	r19, r24
     956:	13 c0       	rjmp	.+38     	; 0x97e <Pipe_ConfigurePipe+0x4e>
     958:	48 e0       	ldi	r20, 0x08	; 8
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     95e:	40 17       	cp	r20, r16
     960:	51 07       	cpc	r21, r17
     962:	38 f0       	brcs	.+14     	; 0x972 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     964:	92 95       	swap	r25
     966:	90 7f       	andi	r25, 0xF0	; 240
     968:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     96a:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     96c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	0e c0       	rjmp	.+28     	; 0x98e <Pipe_ConfigurePipe+0x5e>
     972:	95 30       	cpi	r25, 0x05	; 5
     974:	b9 f3       	breq	.-18     	; 0x964 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     976:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     978:	44 0f       	add	r20, r20
     97a:	55 1f       	adc	r21, r21
     97c:	f0 cf       	rjmp	.-32     	; 0x95e <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     97e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     982:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     986:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     98a:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     98e:	91 fd       	sbrc	r25, 1
     990:	02 c0       	rjmp	.+4      	; 0x996 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     992:	3f 5f       	subi	r19, 0xFF	; 255
     994:	da cf       	rjmp	.-76     	; 0x94a <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     996:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     99a:	4e 7f       	andi	r20, 0xFE	; 254
     99c:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9a0:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     9a4:	4d 7f       	andi	r20, 0xFD	; 253
     9a6:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9aa:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9ae:	41 60       	ori	r20, 0x01	; 1
     9b0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     9b4:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     9b8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     9bc:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     9c0:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9c4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9c8:	90 62       	ori	r25, 0x20	; 32
     9ca:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9ce:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     9d2:	97 fd       	sbrc	r25, 7
     9d4:	de cf       	rjmp	.-68     	; 0x992 <Pipe_ConfigurePipe+0x62>
		  return false;		
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9da:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     9de:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9e8:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9f2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     9f6:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     9fa:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9fe:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a02:	9e 7f       	andi	r25, 0xFE	; 254
     a04:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	87 30       	cpi	r24, 0x07	; 7
     a0c:	81 f7       	brne	.-32     	; 0x9ee <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a0e:	08 95       	ret

00000a10 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a10:	70 d0       	rcall	.+224    	; 0xaf2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a12:	77 d0       	rcall	.+238    	; 0xb02 <USB_INT_ClearAllInterrupts>
     a14:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	80 83       	st	Z, r24
     a1e:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	80 83       	st	Z, r24
     a28:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a2a:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	8c 91       	ld	r24, X
     a30:	8e 7f       	andi	r24, 0xFE	; 254
     a32:	8c 93       	st	X, r24
     a34:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a36:	8f 7e       	andi	r24, 0xEF	; 239
     a38:	80 83       	st	Z, r24
     a3a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a3e:	08 95       	ret

00000a40 <USB_ResetInterface>:
     a40:	58 d0       	rcall	.+176    	; 0xaf2 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     a42:	5f d0       	rcall	.+190    	; 0xb02 <USB_INT_ClearAllInterrupts>
     a44:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a4e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     a52:	80 68       	ori	r24, 0x80	; 128
     a54:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a58:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a5c:	8f 7d       	andi	r24, 0xDF	; 223
     a5e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a62:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     a6c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a6e:	89 bd       	out	0x29, r24	; 41
     a70:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a72:	89 bd       	out	0x29, r24	; 41
     a74:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     a76:	00 fe       	sbrs	r0, 0
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <USB_ResetInterface+0x34>
     a7a:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a7c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_HostState>
     a80:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     a84:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a86:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <USB_Host_ControlPipeSize>
     a8a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a8e:	80 64       	ori	r24, 0x40	; 64
     a90:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a94:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a98:	81 60       	ori	r24, 0x01	; 1
     a9a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a9e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     aa8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     aac:	8f 7e       	andi	r24, 0xEF	; 239
     aae:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     ab2:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     ab4:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ab6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     aba:	81 60       	ori	r24, 0x01	; 1
     abc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ac0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ac4:	84 60       	ori	r24, 0x04	; 4
     ac6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     aca:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ace:	8e 7f       	andi	r24, 0xFE	; 254
     ad0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     ad4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ad8:	80 61       	ori	r24, 0x10	; 16
     ada:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ade:	08 95       	ret

00000ae0 <USB_Init>:
     ae0:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <USB_IsInitialized>

	USB_ResetInterface();
     af0:	a7 cf       	rjmp	.-178    	; 0xa40 <USB_ResetInterface>

00000af2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     af2:	e8 ed       	ldi	r30, 0xD8	; 216
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	8c 7f       	andi	r24, 0xFC	; 252
     afa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     afc:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b00:	08 95       	ret

00000b02 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b02:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b06:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b0a:	08 95       	ret

00000b0c <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b0c:	1f 92       	push	r1
     b0e:	0f 92       	push	r0
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	0f 92       	push	r0
     b14:	11 24       	eor	r1, r1
     b16:	0b b6       	in	r0, 0x3b	; 59
     b18:	0f 92       	push	r0
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b32:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b36:	85 ff       	sbrs	r24, 5
     b38:	0a c0       	rjmp	.+20     	; 0xb4e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b3a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b3e:	85 ff       	sbrs	r24, 5
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b42:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b46:	8f 7d       	andi	r24, 0xDF	; 223
     b48:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b4c:	1b d1       	rcall	.+566    	; 0xd84 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b4e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b52:	81 ff       	sbrs	r24, 1
     b54:	15 c0       	rjmp	.+42     	; 0xb80 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b56:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b5a:	81 ff       	sbrs	r24, 1
     b5c:	11 c0       	rjmp	.+34     	; 0xb80 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b5e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b62:	8d 7f       	andi	r24, 0xFD	; 253
     b64:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b68:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b72:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b76:	8d 7f       	andi	r24, 0xFD	; 253
     b78:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     b7c:	71 dc       	rcall	.-1822   	; 0x460 <EVENT_USB_Host_DeviceUnattached>
     b7e:	60 df       	rcall	.-320    	; 0xa40 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     b80:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     b84:	81 ff       	sbrs	r24, 1
     b86:	15 c0       	rjmp	.+42     	; 0xbb2 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     b88:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b8c:	81 ff       	sbrs	r24, 1
     b8e:	11 c0       	rjmp	.+34     	; 0xbb2 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b90:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b94:	8d 7f       	andi	r24, 0xFD	; 253
     b96:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b9a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b9c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ba0:	81 60       	ori	r24, 0x01	; 1
     ba2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	e8 dc       	rcall	.-1584   	; 0x57a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     baa:	5a dc       	rcall	.-1868   	; 0x460 <EVENT_USB_Host_DeviceUnattached>
     bac:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     bae:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_HostState>
     bb2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     bb6:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     bb8:	17 c0       	rjmp	.+46     	; 0xbe8 <__vector_10+0xdc>
     bba:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     bbe:	80 ff       	sbrs	r24, 0
     bc0:	13 c0       	rjmp	.+38     	; 0xbe8 <__vector_10+0xdc>
     bc2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     bc6:	8e 7f       	andi	r24, 0xFE	; 254
     bc8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     bcc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     bd0:	8e 7f       	andi	r24, 0xFE	; 254
     bd2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     bd6:	3f dc       	rcall	.-1922   	; 0x456 <EVENT_USB_Host_DeviceAttached>
     bd8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     be2:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     be4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_HostState>
     be8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     bec:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     bee:	0e c0       	rjmp	.+28     	; 0xc0c <__vector_10+0x100>
     bf0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     bf4:	82 ff       	sbrs	r24, 2
     bf6:	0a c0       	rjmp	.+20     	; 0xc0c <__vector_10+0x100>
     bf8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     bfc:	8b 7f       	andi	r24, 0xFB	; 251
     bfe:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	c9 dc       	rcall	.-1646   	; 0x59a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c08:	2b dc       	rcall	.-1962   	; 0x460 <EVENT_USB_Host_DeviceUnattached>
     c0a:	1a df       	rcall	.-460    	; 0xa40 <USB_ResetInterface>

		USB_ResetInterface();
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	0f 90       	pop	r0
     c26:	0b be       	out	0x3b, r0	; 59
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <USB_GetNextDescriptor>:
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     c36:	dc 01       	movw	r26, r24
     c38:	eb 01       	movw	r28, r22
     c3a:	e8 81       	ld	r30, Y
     c3c:	f9 81       	ldd	r31, Y+1	; 0x01
     c3e:	20 81       	ld	r18, Z
     c40:	8d 91       	ld	r24, X+
     c42:	9c 91       	ld	r25, X
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	82 17       	cp	r24, r18
     c4a:	93 07       	cpc	r25, r19
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <USB_GetNextDescriptor+0x1e>
     c4e:	9c 01       	movw	r18, r24
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	eb 01       	movw	r28, r22
     c56:	f9 83       	std	Y+1, r31	; 0x01
     c58:	e8 83       	st	Y, r30
     c5a:	8d 91       	ld	r24, X+
     c5c:	9c 91       	ld	r25, X
     c5e:	11 97       	sbiw	r26, 0x01	; 1
     c60:	82 1b       	sub	r24, r18
     c62:	93 0b       	sbc	r25, r19
     c64:	8d 93       	st	X+, r24
     c66:	9c 93       	st	X, r25
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <USB_Host_GetDeviceConfigDescriptor>:
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	29 97       	sbiw	r28, 0x09	; 9
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	6b 01       	movw	r12, r22
     c90:	8a 01       	movw	r16, r20
     c92:	79 01       	movw	r14, r18
     c94:	90 e8       	ldi	r25, 0x80	; 128
     c96:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <USB_ControlRequest>
     c9a:	96 e0       	ldi	r25, 0x06	; 6
     c9c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <USB_ControlRequest+0x1>
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	92 60       	ori	r25, 0x02	; 2
     ca6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <USB_ControlRequest+0x3>
     caa:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <USB_ControlRequest+0x2>
     cae:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_ControlRequest+0x5>
     cb2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_ControlRequest+0x4>
     cb6:	89 e0       	ldi	r24, 0x09	; 9
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x7>
     cbe:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x6>
     cc2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	83 d0       	rcall	.+262    	; 0xdd2 <USB_Host_SendControlRequest>
     ccc:	81 11       	cpse	r24, r1
     cce:	19 c0       	rjmp	.+50     	; 0xd02 <USB_Host_GetDeviceConfigDescriptor+0x94>
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	f6 01       	movw	r30, r12
     cd6:	91 83       	std	Z+1, r25	; 0x01
     cd8:	80 83       	st	Z, r24
     cda:	e8 16       	cp	r14, r24
     cdc:	f9 06       	cpc	r15, r25
     cde:	70 f0       	brcs	.+28     	; 0xcfc <USB_Host_GetDeviceConfigDescriptor+0x8e>
     ce0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x7>
     ce4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x6>
     ce8:	c8 01       	movw	r24, r16
     cea:	73 d0       	rcall	.+230    	; 0xdd2 <USB_Host_SendControlRequest>
     cec:	81 11       	cpse	r24, r1
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <USB_Host_GetDeviceConfigDescriptor+0x94>
     cf0:	f8 01       	movw	r30, r16
     cf2:	81 81       	ldd	r24, Z+1	; 0x01
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	21 f4       	brne	.+8      	; 0xd00 <USB_Host_GetDeviceConfigDescriptor+0x92>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <USB_Host_GetDeviceConfigDescriptor+0x94>
     cfc:	85 e0       	ldi	r24, 0x05	; 5
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	29 96       	adiw	r28, 0x09	; 9
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	08 95       	ret

00000d20 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	8c 01       	movw	r16, r24
     d36:	eb 01       	movw	r28, r22
     d38:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d3a:	f8 01       	movw	r30, r16
     d3c:	e0 80       	ld	r14, Z
     d3e:	f1 80       	ldd	r15, Z+1	; 0x01
     d40:	e1 14       	cp	r14, r1
     d42:	f1 04       	cpc	r15, r1
     d44:	99 f0       	breq	.+38     	; 0xd6c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d46:	a8 80       	ld	r10, Y
     d48:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     d4a:	be 01       	movw	r22, r28
     d4c:	c8 01       	movw	r24, r16
     d4e:	71 df       	rcall	.-286    	; 0xc32 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d50:	88 81       	ld	r24, Y
     d52:	99 81       	ldd	r25, Y+1	; 0x01
     d54:	f6 01       	movw	r30, r12
     d56:	09 95       	icall
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	79 f3       	breq	.-34     	; 0xd3a <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	39 f4       	brne	.+14     	; 0xd6e <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     d60:	b9 82       	std	Y+1, r11	; 0x01
     d62:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     d64:	f8 01       	movw	r30, r16
     d66:	f1 82       	std	Z+1, r15	; 0x01
     d68:	e0 82       	st	Z, r14
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	bf 90       	pop	r11
     d80:	af 90       	pop	r10
     d82:	08 95       	ret

00000d84 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     d84:	08 95       	ret

00000d86 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	18 2f       	mov	r17, r24
     d8e:	c9 ee       	ldi	r28, 0xE9	; 233
     d90:	d3 e0       	ldi	r29, 0x03	; 3
     d92:	11 11       	cpse	r17, r1
     d94:	0c c0       	rjmp	.+24     	; 0xdae <USB_Host_WaitForIOS+0x28>
     d96:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d9a:	83 fd       	sbrc	r24, 3
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <USB_Host_WaitForIOS+0x42>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	64 dc       	rcall	.-1848   	; 0x66a <USB_Host_WaitMS>
     da2:	81 11       	cpse	r24, r1
     da4:	12 c0       	rjmp	.+36     	; 0xdca <USB_Host_WaitForIOS+0x44>
     da6:	21 97       	sbiw	r28, 0x01	; 1
     da8:	a1 f7       	brne	.-24     	; 0xd92 <USB_Host_WaitForIOS+0xc>
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	0e c0       	rjmp	.+28     	; 0xdca <USB_Host_WaitForIOS+0x44>
     dae:	11 30       	cpi	r17, 0x01	; 1
     db0:	29 f4       	brne	.+10     	; 0xdbc <USB_Host_WaitForIOS+0x36>
     db2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     db6:	80 ff       	sbrs	r24, 0
     db8:	f2 cf       	rjmp	.-28     	; 0xd9e <USB_Host_WaitForIOS+0x18>
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <USB_Host_WaitForIOS+0x42>
     dbc:	12 30       	cpi	r17, 0x02	; 2
     dbe:	79 f7       	brne	.-34     	; 0xd9e <USB_Host_WaitForIOS+0x18>
     dc0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     dc4:	82 ff       	sbrs	r24, 2
     dc6:	eb cf       	rjmp	.-42     	; 0xd9e <USB_Host_WaitForIOS+0x18>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	08 95       	ret

00000dd2 <USB_Host_SendControlRequest>:
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	8c 01       	movw	r16, r24
     dde:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     de2:	81 70       	andi	r24, 0x01	; 1
     de4:	f8 2e       	mov	r15, r24
     de6:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <USB_ControlRequest+0x6>
     dea:	d0 91 2a 01 	lds	r29, 0x012A	; 0x80012a <USB_ControlRequest+0x7>
     dee:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	37 dc       	rcall	.-1938   	; 0x66a <USB_Host_WaitMS>
     dfc:	81 11       	cpse	r24, r1
     dfe:	c8 c0       	rjmp	.+400    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     e00:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e04:	8f 7c       	andi	r24, 0xCF	; 207
     e06:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e0a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
     e0e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e18:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e1c:	8f 7b       	andi	r24, 0xBF	; 191
     e1e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e22:	e3 e2       	ldi	r30, 0x23	; 35
     e24:	f1 e0       	ldi	r31, 0x01	; 1
     e26:	8b e2       	ldi	r24, 0x2B	; 43
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	21 91       	ld	r18, Z+
     e2c:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     e30:	8e 17       	cp	r24, r30
     e32:	9f 07       	cpc	r25, r31
     e34:	d1 f7       	brne	.-12     	; 0xe2a <USB_Host_SendControlRequest+0x58>
     e36:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e3a:	87 77       	andi	r24, 0x77	; 119
     e3c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	a1 df       	rcall	.-190    	; 0xd86 <USB_Host_WaitForIOS>
     e44:	81 11       	cpse	r24, r1
     e46:	a4 c0       	rjmp	.+328    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     e48:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0a dc       	rcall	.-2028   	; 0x66a <USB_Host_WaitMS>
     e56:	81 11       	cpse	r24, r1
     e58:	9b c0       	rjmp	.+310    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     e5a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest>
     e5e:	87 ff       	sbrs	r24, 7
     e60:	4e c0       	rjmp	.+156    	; 0xefe <USB_Host_SendControlRequest+0x12c>
     e62:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e66:	8f 7c       	andi	r24, 0xCF	; 207
     e68:	80 61       	ori	r24, 0x10	; 16
     e6a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e6e:	01 15       	cp	r16, r1
     e70:	11 05       	cpc	r17, r1
     e72:	09 f0       	breq	.+2      	; 0xe76 <USB_Host_SendControlRequest+0xa4>
     e74:	3a c0       	rjmp	.+116    	; 0xeea <USB_Host_SendControlRequest+0x118>
     e76:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e7a:	8f 7c       	andi	r24, 0xCF	; 207
     e7c:	80 62       	ori	r24, 0x20	; 32
     e7e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e82:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e86:	8f 7b       	andi	r24, 0xBF	; 191
     e88:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	7b df       	rcall	.-266    	; 0xd86 <USB_Host_WaitForIOS>
     e90:	81 11       	cpse	r24, r1
     e92:	7e c0       	rjmp	.+252    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     e94:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e98:	8b 77       	andi	r24, 0x7B	; 123
     e9a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	72 df       	rcall	.-284    	; 0xd86 <USB_Host_WaitForIOS>
     ea2:	76 c0       	rjmp	.+236    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     ea4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ea8:	8f 7b       	andi	r24, 0xBF	; 191
     eaa:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	6a df       	rcall	.-300    	; 0xd86 <USB_Host_WaitForIOS>
     eb2:	81 11       	cpse	r24, r1
     eb4:	6d c0       	rjmp	.+218    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     eb6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     eba:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     ebe:	89 2b       	or	r24, r25
     ec0:	11 f4       	brne	.+4      	; 0xec6 <USB_Host_SendControlRequest+0xf4>
     ec2:	c0 e0       	ldi	r28, 0x00	; 0
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
     ec6:	f8 01       	movw	r30, r16
     ec8:	8f 01       	movw	r16, r30
     eca:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     ece:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     ed2:	89 2b       	or	r24, r25
     ed4:	69 f4       	brne	.+26     	; 0xef0 <USB_Host_SendControlRequest+0x11e>
     ed6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ee0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ee4:	8e 77       	andi	r24, 0x7E	; 126
     ee6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     eea:	20 97       	sbiw	r28, 0x00	; 0
     eec:	d9 f6       	brne	.-74     	; 0xea4 <USB_Host_SendControlRequest+0xd2>
     eee:	c3 cf       	rjmp	.-122    	; 0xe76 <USB_Host_SendControlRequest+0xa4>
     ef0:	20 97       	sbiw	r28, 0x00	; 0
     ef2:	89 f3       	breq	.-30     	; 0xed6 <USB_Host_SendControlRequest+0x104>
     ef4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     ef8:	81 93       	st	Z+, r24
     efa:	21 97       	sbiw	r28, 0x01	; 1
     efc:	e5 cf       	rjmp	.-54     	; 0xec8 <USB_Host_SendControlRequest+0xf6>
     efe:	01 15       	cp	r16, r1
     f00:	11 05       	cpc	r17, r1
     f02:	91 f1       	breq	.+100    	; 0xf68 <USB_Host_SendControlRequest+0x196>
     f04:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f08:	8f 7c       	andi	r24, 0xCF	; 207
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f10:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f14:	8f 7b       	andi	r24, 0xBF	; 191
     f16:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	20 97       	sbiw	r28, 0x00	; 0
     f1e:	e1 f0       	breq	.+56     	; 0xf58 <USB_Host_SendControlRequest+0x186>
     f20:	32 df       	rcall	.-412    	; 0xd86 <USB_Host_WaitForIOS>
     f22:	81 11       	cpse	r24, r1
     f24:	35 c0       	rjmp	.+106    	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     f26:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f2a:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     f2e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_Host_ControlPipeSize>
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	48 f4       	brcc	.+18     	; 0xf4c <USB_Host_SendControlRequest+0x17a>
     f3a:	0f 5f       	subi	r16, 0xFF	; 255
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	f8 01       	movw	r30, r16
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	80 81       	ld	r24, Z
     f44:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     f48:	21 97       	sbiw	r28, 0x01	; 1
     f4a:	69 f7       	brne	.-38     	; 0xf26 <USB_Host_SendControlRequest+0x154>
     f4c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f50:	8b 77       	andi	r24, 0x7B	; 123
     f52:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f56:	e1 cf       	rjmp	.-62     	; 0xf1a <USB_Host_SendControlRequest+0x148>
     f58:	16 df       	rcall	.-468    	; 0xd86 <USB_Host_WaitForIOS>
     f5a:	81 11       	cpse	r24, r1
     f5c:	19 c0       	rjmp	.+50     	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     f5e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f62:	80 64       	ori	r24, 0x40	; 64
     f64:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f68:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f6c:	8f 7c       	andi	r24, 0xCF	; 207
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f74:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f78:	8f 7b       	andi	r24, 0xBF	; 191
     f7a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	02 df       	rcall	.-508    	; 0xd86 <USB_Host_WaitForIOS>
     f82:	81 11       	cpse	r24, r1
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <USB_Host_SendControlRequest+0x1be>
     f86:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f8a:	9e 77       	andi	r25, 0x7E	; 126
     f8c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f90:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f94:	90 64       	ori	r25, 0x40	; 64
     f96:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f9a:	f1 10       	cpse	r15, r1
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <USB_Host_SendControlRequest+0x1d6>
     f9e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fa2:	9e 7f       	andi	r25, 0xFE	; 254
     fa4:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
     fae:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	08 95       	ret

00000fbe <USB_Host_SetDeviceConfiguration>:
     fbe:	cf 93       	push	r28
     fc0:	c8 2f       	mov	r28, r24
     fc2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <USB_ControlRequest>
     fc6:	89 e0       	ldi	r24, 0x09	; 9
     fc8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_ControlRequest+0x1>
     fcc:	8c 2f       	mov	r24, r28
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <USB_ControlRequest+0x3>
     fd4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <USB_ControlRequest+0x2>
     fd8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_ControlRequest+0x5>
     fdc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_ControlRequest+0x4>
     fe0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_ControlRequest+0x7>
     fe4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_ControlRequest+0x6>
     fe8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	f0 de       	rcall	.-544    	; 0xdd2 <USB_Host_SendControlRequest>
     ff2:	81 11       	cpse	r24, r1
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     ff6:	c0 93 21 01 	sts	0x0121, r28	; 0x800121 <USB_Host_ConfigurationNumber>
     ffa:	c1 11       	cpse	r28, r1
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ffe:	9a e0       	ldi	r25, 0x0A	; 10
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1002:	9b e0       	ldi	r25, 0x0B	; 11
    1004:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <USB_HostState>
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    100c:	e3 e2       	ldi	r30, 0x23	; 35
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	90 83       	st	Z, r25
    1014:	9b e0       	ldi	r25, 0x0B	; 11
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	73 83       	std	Z+3, r23	; 0x03
    101c:	62 83       	std	Z+2, r22	; 0x02
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	95 83       	std	Z+5, r25	; 0x05
    1022:	84 83       	std	Z+4, r24	; 0x04
    1024:	17 82       	std	Z+7, r1	; 0x07
    1026:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1028:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	d0 ce       	rjmp	.-608    	; 0xdd2 <USB_Host_SendControlRequest>

00001032 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1038:	c7 ea       	ldi	r28, 0xA7	; 167
    103a:	d0 e0       	ldi	r29, 0x00	; 0
    103c:	18 81       	ld	r17, Y
    103e:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1040:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1042:	60 db       	rcall	.-2368   	; 0x704 <USB_Host_ProcessNextHostState>
    1044:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	08 95       	ret

0000104e <DCOMP_Audio_Host_NextAudioControlInterface>:
	
	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    104e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1050:	81 81       	ldd	r24, Z+1	; 0x01
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	51 f4       	brne	.+20     	; 0x106a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    1056:	85 81       	ldd	r24, Z+5	; 0x05
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	39 f4       	brne	.+14     	; 0x106a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
    105c:	86 81       	ldd	r24, Z+6	; 0x06
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	21 f4       	brne	.+8      	; 0x106a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
    1062:	87 81       	ldd	r24, Z+7	; 0x07
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    1064:	81 11       	cpse	r24, r1
    1066:	01 c0       	rjmp	.+2      	; 0x106a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
    1068:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    106a:	82 e0       	ldi	r24, 0x02	; 2
}
    106c:	08 95       	ret

0000106e <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    106e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	84 30       	cpi	r24, 0x04	; 4
    1074:	59 f4       	brne	.+22     	; 0x108c <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    1076:	85 81       	ldd	r24, Z+5	; 0x05
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	41 f4       	brne	.+16     	; 0x108c <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    107c:	86 81       	ldd	r24, Z+6	; 0x06

	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	29 f4       	brne	.+10     	; 0x108c <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
    1082:	97 81       	ldd	r25, Z+7	; 0x07
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    1084:	91 11       	cpse	r25, r1
    1086:	03 c0       	rjmp	.+6      	; 0x108e <DCOMP_Audio_Host_NextAudioStreamInterface+0x20>
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    108c:	82 e0       	ldi	r24, 0x02	; 2
}
    108e:	08 95       	ret

00001090 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    1090:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	95 30       	cpi	r25, 0x05	; 5
    1096:	31 f4       	brne	.+12     	; 0x10a4 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    1098:	83 81       	ldd	r24, Z+3	; 0x03
    109a:	83 70       	andi	r24, 0x03	; 3
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	31 f4       	brne	.+12     	; 0x10ac <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
    10a4:	94 30       	cpi	r25, 0x04	; 4
    10a6:	11 f4       	brne	.+4      	; 0x10ac <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
	{
		return DESCRIPTOR_SEARCH_Fail;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
}
    10ae:	08 95       	ret

000010b0 <Audio_Host_ConfigurePipes>:
#include "Audio.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    10b0:	4f 92       	push	r4
    10b2:	5f 92       	push	r5
    10b4:	6f 92       	push	r6
    10b6:	7f 92       	push	r7
    10b8:	8f 92       	push	r8
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <Audio_Host_ConfigurePipes+0x22>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <Audio_Host_ConfigurePipes+0x24>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	7a 83       	std	Y+2, r23	; 0x02
    10da:	69 83       	std	Y+1, r22	; 0x01
    10dc:	5c 83       	std	Y+4, r21	; 0x04
    10de:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    10e0:	fc 01       	movw	r30, r24
    10e2:	32 96       	adiw	r30, 0x02	; 2
    10e4:	28 e0       	ldi	r18, 0x08	; 8
    10e6:	df 01       	movw	r26, r30
    10e8:	1d 92       	st	X+, r1
    10ea:	2a 95       	dec	r18
    10ec:	e9 f7       	brne	.-6      	; 0x10e8 <Audio_Host_ConfigurePipes+0x38>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    10ee:	eb 81       	ldd	r30, Y+3	; 0x03
    10f0:	fc 81       	ldd	r31, Y+4	; 0x04
    10f2:	11 81       	ldd	r17, Z+1	; 0x01
    10f4:	12 30       	cpi	r17, 0x02	; 2
    10f6:	09 f0       	breq	.+2      	; 0x10fa <Audio_Host_ConfigurePipes+0x4a>
    10f8:	96 c0       	rjmp	.+300    	; 0x1226 <Audio_Host_ConfigurePipes+0x176>
    10fa:	6c 01       	movw	r12, r24
    10fc:	41 2c       	mov	r4, r1
    10fe:	51 2c       	mov	r5, r1
    1100:	61 2c       	mov	r6, r1
    1102:	71 2c       	mov	r7, r1
    1104:	81 2c       	mov	r8, r1
    1106:	91 2c       	mov	r9, r1
    1108:	a1 2c       	mov	r10, r1
    110a:	b1 2c       	mov	r11, r1
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
    110c:	f6 01       	movw	r30, r12
    110e:	80 81       	ld	r24, Z
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <Audio_Host_ConfigurePipes+0x66>
    1114:	41 c0       	rjmp	.+130    	; 0x1198 <Audio_Host_ConfigurePipes+0xe8>
    1116:	a1 14       	cp	r10, r1
    1118:	b1 04       	cpc	r11, r1
    111a:	09 f0       	breq	.+2      	; 0x111e <Audio_Host_ConfigurePipes+0x6e>
    111c:	3d c0       	rjmp	.+122    	; 0x1198 <Audio_Host_ConfigurePipes+0xe8>
	       (AudioInterfaceInfo->Config.DataOUTPipeNumber && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    111e:	61 14       	cp	r6, r1
    1120:	71 04       	cpc	r7, r1
    1122:	a1 f0       	breq	.+40     	; 0x114c <Audio_Host_ConfigurePipes+0x9c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1124:	48 e4       	ldi	r20, 0x48	; 72
    1126:	58 e0       	ldi	r21, 0x08	; 8
    1128:	be 01       	movw	r22, r28
    112a:	6d 5f       	subi	r22, 0xFD	; 253
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	f6 dd       	rcall	.-1044   	; 0xd20 <USB_GetNextDescriptorComp>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipeNumber && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1134:	88 23       	and	r24, r24
    1136:	39 f1       	breq	.+78     	; 0x1186 <Audio_Host_ConfigurePipes+0xd6>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1138:	47 e3       	ldi	r20, 0x37	; 55
    113a:	58 e0       	ldi	r21, 0x08	; 8
    113c:	be 01       	movw	r22, r28
    113e:	6d 5f       	subi	r22, 0xFD	; 253
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	ec dd       	rcall	.-1064   	; 0xd20 <USB_GetNextDescriptorComp>
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    1148:	88 23       	and	r24, r24
    114a:	b1 f0       	breq	.+44     	; 0x1178 <Audio_Host_ConfigurePipes+0xc8>
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    114c:	47 e2       	ldi	r20, 0x27	; 39
    114e:	58 e0       	ldi	r21, 0x08	; 8
    1150:	be 01       	movw	r22, r28
    1152:	6d 5f       	subi	r22, 0xFD	; 253
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	e2 dd       	rcall	.-1084   	; 0xd20 <USB_GetNextDescriptorComp>
    115c:	81 11       	cpse	r24, r1
    115e:	64 c0       	rjmp	.+200    	; 0x1228 <Audio_Host_ConfigurePipes+0x178>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    1160:	6b 80       	ldd	r6, Y+3	; 0x03
    1162:	7c 80       	ldd	r7, Y+4	; 0x04

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1164:	47 e3       	ldi	r20, 0x37	; 55
    1166:	58 e0       	ldi	r21, 0x08	; 8
    1168:	be 01       	movw	r22, r28
    116a:	6d 5f       	subi	r22, 0xFD	; 253
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	d6 dd       	rcall	.-1108   	; 0xd20 <USB_GetNextDescriptorComp>
    1174:	81 11       	cpse	r24, r1
    1176:	58 c0       	rjmp	.+176    	; 0x1228 <Audio_Host_ConfigurePipes+0x178>
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1178:	4b 80       	ldd	r4, Y+3	; 0x03
    117a:	5c 80       	ldd	r5, Y+4	; 0x04
			
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    117c:	e0 e0       	ldi	r30, 0x00	; 0
    117e:	f0 e0       	ldi	r31, 0x00	; 0
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			
			DataINEndpoint  = NULL;
    1180:	a1 2c       	mov	r10, r1
    1182:	b1 2c       	mov	r11, r1
			DataOUTEndpoint = NULL;

			continue;
    1184:	07 c0       	rjmp	.+14     	; 0x1194 <Audio_Host_ConfigurePipes+0xe4>
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1186:	eb 81       	ldd	r30, Y+3	; 0x03
    1188:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	87 ff       	sbrs	r24, 7
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <Audio_Host_ConfigurePipes+0xe4>
		  DataINEndpoint  = EndpointData;
    1190:	5f 01       	movw	r10, r30
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1192:	f4 01       	movw	r30, r8
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			
			DataINEndpoint  = NULL;
    1194:	4f 01       	movw	r8, r30
    1196:	ba cf       	rjmp	.-140    	; 0x110c <Audio_Host_ConfigurePipes+0x5c>
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
    1198:	d6 01       	movw	r26, r12
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	8c 91       	ld	r24, X
    119e:	88 23       	and	r24, r24
    11a0:	21 f0       	breq	.+8      	; 0x11aa <Audio_Host_ConfigurePipes+0xfa>
	       (AudioInterfaceInfo->Config.DataOUTPipeNumber && !(DataOUTEndpoint)))
    11a2:	81 14       	cp	r8, r1
    11a4:	91 04       	cpc	r9, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <Audio_Host_ConfigurePipes+0xfa>
    11a8:	ba cf       	rjmp	.-140    	; 0x111e <Audio_Host_ConfigurePipes+0x6e>
    11aa:	ff 24       	eor	r15, r15
    11ac:	f3 94       	inc	r15
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == AudioInterfaceInfo->Config.DataINPipeNumber)
    11ae:	f6 01       	movw	r30, r12
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 11       	cpse	r24, r15
    11b4:	0b c0       	rjmp	.+22     	; 0x11cc <Audio_Host_ConfigurePipes+0x11c>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    11b6:	d5 01       	movw	r26, r10
    11b8:	14 96       	adiw	r26, 0x04	; 4
    11ba:	0d 91       	ld	r16, X+
    11bc:	1c 91       	ld	r17, X
    11be:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    11c4:	17 83       	std	Z+7, r17	; 0x07
    11c6:	06 83       	std	Z+6, r16	; 0x06

		if (PipeNum == AudioInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    11c8:	40 e1       	ldi	r20, 0x10	; 16
    11ca:	24 c0       	rjmp	.+72     	; 0x1214 <Audio_Host_ConfigurePipes+0x164>
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == AudioInterfaceInfo->Config.DataOUTPipeNumber)
    11cc:	f6 01       	movw	r30, r12
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
    11d0:	8f 15       	cp	r24, r15
    11d2:	a9 f0       	breq	.+42     	; 0x11fe <Audio_Host_ConfigurePipes+0x14e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    11d4:	f3 94       	inc	r15
    11d6:	f7 e0       	ldi	r31, 0x07	; 7
    11d8:	ff 12       	cpse	r15, r31
    11da:	e9 cf       	rjmp	.-46     	; 0x11ae <Audio_Host_ConfigurePipes+0xfe>
		{
			return AUDIO_ENUMERROR_PipeConfigurationFailed;
		}
	}

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    11dc:	d3 01       	movw	r26, r6
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	8c 91       	ld	r24, X
    11e2:	f6 01       	movw	r30, r12
    11e4:	83 83       	std	Z+3, r24	; 0x03
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    11e6:	d2 01       	movw	r26, r4
    11e8:	12 96       	adiw	r26, 0x02	; 2
    11ea:	8c 91       	ld	r24, X
    11ec:	12 97       	sbiw	r26, 0x02	; 2
    11ee:	84 83       	std	Z+4, r24	; 0x04
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    11f0:	13 96       	adiw	r26, 0x03	; 3
    11f2:	8c 91       	ld	r24, X
    11f4:	85 83       	std	Z+5, r24	; 0x05
	AudioInterfaceInfo->State.IsActive = true;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	82 83       	std	Z+2, r24	; 0x02
	
	return AUDIO_ENUMERROR_NoError;
    11fa:	10 e0       	ldi	r17, 0x00	; 0
    11fc:	15 c0       	rjmp	.+42     	; 0x1228 <Audio_Host_ConfigurePipes+0x178>

			AudioInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == AudioInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    11fe:	d4 01       	movw	r26, r8
    1200:	14 96       	adiw	r26, 0x04	; 4
    1202:	0d 91       	ld	r16, X+
    1204:	1c 91       	ld	r17, X
    1206:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1208:	12 96       	adiw	r26, 0x02	; 2
    120a:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    120c:	f6 01       	movw	r30, r12
    120e:	11 87       	std	Z+9, r17	; 0x09
    1210:	00 87       	std	Z+8, r16	; 0x08
		}
		else if (PipeNum == AudioInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1212:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	e8 2e       	mov	r14, r24
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	8f 2d       	mov	r24, r15
    121c:	89 db       	rcall	.-2286   	; 0x930 <Pipe_ConfigurePipe>
    121e:	81 11       	cpse	r24, r1
    1220:	d9 cf       	rjmp	.-78     	; 0x11d4 <Audio_Host_ConfigurePipes+0x124>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return AUDIO_ENUMERROR_PipeConfigurationFailed;
    1222:	13 e0       	ldi	r17, 0x03	; 3
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <Audio_Host_ConfigurePipes+0x178>
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    1226:	11 e0       	ldi	r17, 0x01	; 1
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;
	
	return AUDIO_ENUMERROR_NoError;
}
    1228:	81 2f       	mov	r24, r17
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	08 95       	ret

00001254 <Audio_Host_StartStopStreaming>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
    1254:	fc 01       	movw	r30, r24
	if (!(AudioInterfaceInfo->State.IsActive))
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	88 23       	and	r24, r24
    125a:	39 f0       	breq	.+14     	; 0x126a <Audio_Host_StartStopStreaming+0x16>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    125c:	66 23       	and	r22, r22
    125e:	11 f0       	breq	.+4      	; 0x1264 <Audio_Host_StartStopStreaming+0x10>
    1260:	65 81       	ldd	r22, Z+5	; 0x05
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <Audio_Host_StartStopStreaming+0x12>
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	84 81       	ldd	r24, Z+4	; 0x04
    1268:	d1 ce       	rjmp	.-606    	; 0x100c <USB_Host_SetInterfaceAltSetting>
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	08 95       	ret

0000126e <Audio_Host_GetSetEndpointProperty>:
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    1276:	fc 01       	movw	r30, r24
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	88 23       	and	r24, r24
    127c:	71 f1       	breq	.+92     	; 0x12da <Audio_Host_GetSetEndpointProperty+0x6c>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    127e:	47 fd       	sbrc	r20, 7
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    1282:	32 e2       	ldi	r19, 0x22	; 34
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <Audio_Host_GetSetEndpointProperty+0x1a>

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    1286:	32 ea       	ldi	r19, 0xA2	; 162
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1288:	60 93 a7 00 	sts	0x00A7, r22	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    128c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1290:	89 2f       	mov	r24, r25
    1292:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1294:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1298:	90 73       	andi	r25, 0x30	; 48
    129a:	90 31       	cpi	r25, 0x10	; 16
    129c:	11 f0       	breq	.+4      	; 0x12a2 <Audio_Host_GetSetEndpointProperty+0x34>
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <Audio_Host_GetSetEndpointProperty+0x36>
    12a2:	90 e8       	ldi	r25, 0x80	; 128
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
	  
	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    12a4:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <USB_ControlRequest>
    12a8:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <USB_ControlRequest+0x1>
    12ac:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_ControlRequest+0x2>
    12b0:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <USB_ControlRequest+0x3>
    12b4:	98 2b       	or	r25, r24
    12b6:	89 2f       	mov	r24, r25
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <USB_ControlRequest+0x5>
    12be:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <USB_ControlRequest+0x4>
    12c2:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <USB_ControlRequest+0x7>
    12c6:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12ca:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    12ce:	c7 01       	movw	r24, r14
}
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    12d8:	7c cd       	rjmp	.-1288   	; 0xdd2 <USB_Host_SendControlRequest>
}
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12e6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    12ea:	95 ff       	sbrs	r25, 5
    12ec:	fc cf       	rjmp	.-8      	; 0x12e6 <Serial_putchar>
				UDR1 = DataByte;
    12ee:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	08 95       	ret

000012f8 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12f8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12fc:	87 ff       	sbrs	r24, 7
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <Serial_getchar+0x18>
    1300:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1304:	87 ff       	sbrs	r24, 7
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1308:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	08 95       	ret
	  return _FDEV_EOF;
    1310:	8e ef       	ldi	r24, 0xFE	; 254
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    131a:	08 95       	ret

0000131c <__tablejump2__>:
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	00 24       	eor	r0, r0
    1322:	00 1c       	adc	r0, r0
    1324:	0b be       	out	0x3b, r0	; 59
    1326:	07 90       	elpm	r0, Z+
    1328:	f6 91       	elpm	r31, Z
    132a:	e0 2d       	mov	r30, r0
    132c:	09 94       	ijmp

0000132e <printf_P>:
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	ae 01       	movw	r20, r28
    133c:	49 5f       	subi	r20, 0xF9	; 249
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	da 01       	movw	r26, r20
    1342:	6d 91       	ld	r22, X+
    1344:	7d 91       	ld	r23, X+
    1346:	ad 01       	movw	r20, r26
    1348:	0a e3       	ldi	r16, 0x3A	; 58
    134a:	11 e0       	ldi	r17, 0x01	; 1
    134c:	f8 01       	movw	r30, r16
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	dc 01       	movw	r26, r24
    1354:	13 96       	adiw	r26, 0x03	; 3
    1356:	2c 91       	ld	r18, X
    1358:	13 97       	sbiw	r26, 0x03	; 3
    135a:	28 60       	ori	r18, 0x08	; 8
    135c:	13 96       	adiw	r26, 0x03	; 3
    135e:	2c 93       	st	X, r18
    1360:	3e d0       	rcall	.+124    	; 0x13de <vfprintf>
    1362:	d8 01       	movw	r26, r16
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	13 97       	sbiw	r26, 0x03	; 3
    136c:	23 81       	ldd	r18, Z+3	; 0x03
    136e:	27 7f       	andi	r18, 0xF7	; 247
    1370:	23 83       	std	Z+3, r18	; 0x03
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <puts_P>:
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	8c 01       	movw	r16, r24
    1386:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__iob+0x2>
    138a:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__iob+0x3>
    138e:	83 81       	ldd	r24, Z+3	; 0x03
    1390:	81 ff       	sbrs	r24, 1
    1392:	1b c0       	rjmp	.+54     	; 0x13ca <puts_P+0x4e>
    1394:	d0 e0       	ldi	r29, 0x00	; 0
    1396:	c0 e0       	ldi	r28, 0x00	; 0
    1398:	f8 01       	movw	r30, r16
    139a:	84 91       	lpm	r24, Z
    139c:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <__iob+0x2>
    13a0:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <__iob+0x3>
    13a4:	db 01       	movw	r26, r22
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	19 97       	sbiw	r26, 0x09	; 9
    13ae:	88 23       	and	r24, r24
    13b0:	41 f0       	breq	.+16     	; 0x13c2 <puts_P+0x46>
    13b2:	09 95       	icall
    13b4:	89 2b       	or	r24, r25
    13b6:	11 f0       	breq	.+4      	; 0x13bc <puts_P+0x40>
    13b8:	df ef       	ldi	r29, 0xFF	; 255
    13ba:	cf ef       	ldi	r28, 0xFF	; 255
    13bc:	0f 5f       	subi	r16, 0xFF	; 255
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	eb cf       	rjmp	.-42     	; 0x1398 <puts_P+0x1c>
    13c2:	8a e0       	ldi	r24, 0x0A	; 10
    13c4:	09 95       	icall
    13c6:	89 2b       	or	r24, r25
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <puts_P+0x54>
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	9f ef       	ldi	r25, 0xFF	; 255
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <puts_P+0x58>
    13d0:	8d 2f       	mov	r24, r29
    13d2:	9c 2f       	mov	r25, r28
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	08 95       	ret

000013de <vfprintf>:
    13de:	2f 92       	push	r2
    13e0:	3f 92       	push	r3
    13e2:	4f 92       	push	r4
    13e4:	5f 92       	push	r5
    13e6:	6f 92       	push	r6
    13e8:	7f 92       	push	r7
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	2b 97       	sbiw	r28, 0x0b	; 11
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	6c 01       	movw	r12, r24
    1414:	7b 01       	movw	r14, r22
    1416:	8a 01       	movw	r16, r20
    1418:	fc 01       	movw	r30, r24
    141a:	17 82       	std	Z+7, r1	; 0x07
    141c:	16 82       	std	Z+6, r1	; 0x06
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	81 ff       	sbrs	r24, 1
    1422:	bf c1       	rjmp	.+894    	; 0x17a2 <vfprintf+0x3c4>
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	3c 01       	movw	r6, r24
    142a:	f6 01       	movw	r30, r12
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	f7 01       	movw	r30, r14
    1430:	93 fd       	sbrc	r25, 3
    1432:	85 91       	lpm	r24, Z+
    1434:	93 ff       	sbrs	r25, 3
    1436:	81 91       	ld	r24, Z+
    1438:	7f 01       	movw	r14, r30
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <vfprintf+0x62>
    143e:	ad c1       	rjmp	.+858    	; 0x179a <vfprintf+0x3bc>
    1440:	85 32       	cpi	r24, 0x25	; 37
    1442:	39 f4       	brne	.+14     	; 0x1452 <vfprintf+0x74>
    1444:	93 fd       	sbrc	r25, 3
    1446:	85 91       	lpm	r24, Z+
    1448:	93 ff       	sbrs	r25, 3
    144a:	81 91       	ld	r24, Z+
    144c:	7f 01       	movw	r14, r30
    144e:	85 32       	cpi	r24, 0x25	; 37
    1450:	21 f4       	brne	.+8      	; 0x145a <vfprintf+0x7c>
    1452:	b6 01       	movw	r22, r12
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	d6 d1       	rcall	.+940    	; 0x1804 <fputc>
    1458:	e8 cf       	rjmp	.-48     	; 0x142a <vfprintf+0x4c>
    145a:	91 2c       	mov	r9, r1
    145c:	21 2c       	mov	r2, r1
    145e:	31 2c       	mov	r3, r1
    1460:	ff e1       	ldi	r31, 0x1F	; 31
    1462:	f3 15       	cp	r31, r3
    1464:	d8 f0       	brcs	.+54     	; 0x149c <vfprintf+0xbe>
    1466:	8b 32       	cpi	r24, 0x2B	; 43
    1468:	79 f0       	breq	.+30     	; 0x1488 <vfprintf+0xaa>
    146a:	38 f4       	brcc	.+14     	; 0x147a <vfprintf+0x9c>
    146c:	80 32       	cpi	r24, 0x20	; 32
    146e:	79 f0       	breq	.+30     	; 0x148e <vfprintf+0xb0>
    1470:	83 32       	cpi	r24, 0x23	; 35
    1472:	a1 f4       	brne	.+40     	; 0x149c <vfprintf+0xbe>
    1474:	23 2d       	mov	r18, r3
    1476:	20 61       	ori	r18, 0x10	; 16
    1478:	1d c0       	rjmp	.+58     	; 0x14b4 <vfprintf+0xd6>
    147a:	8d 32       	cpi	r24, 0x2D	; 45
    147c:	61 f0       	breq	.+24     	; 0x1496 <vfprintf+0xb8>
    147e:	80 33       	cpi	r24, 0x30	; 48
    1480:	69 f4       	brne	.+26     	; 0x149c <vfprintf+0xbe>
    1482:	23 2d       	mov	r18, r3
    1484:	21 60       	ori	r18, 0x01	; 1
    1486:	16 c0       	rjmp	.+44     	; 0x14b4 <vfprintf+0xd6>
    1488:	83 2d       	mov	r24, r3
    148a:	82 60       	ori	r24, 0x02	; 2
    148c:	38 2e       	mov	r3, r24
    148e:	e3 2d       	mov	r30, r3
    1490:	e4 60       	ori	r30, 0x04	; 4
    1492:	3e 2e       	mov	r3, r30
    1494:	2a c0       	rjmp	.+84     	; 0x14ea <vfprintf+0x10c>
    1496:	f3 2d       	mov	r31, r3
    1498:	f8 60       	ori	r31, 0x08	; 8
    149a:	1d c0       	rjmp	.+58     	; 0x14d6 <vfprintf+0xf8>
    149c:	37 fc       	sbrc	r3, 7
    149e:	2d c0       	rjmp	.+90     	; 0x14fa <vfprintf+0x11c>
    14a0:	20 ed       	ldi	r18, 0xD0	; 208
    14a2:	28 0f       	add	r18, r24
    14a4:	2a 30       	cpi	r18, 0x0A	; 10
    14a6:	40 f0       	brcs	.+16     	; 0x14b8 <vfprintf+0xda>
    14a8:	8e 32       	cpi	r24, 0x2E	; 46
    14aa:	b9 f4       	brne	.+46     	; 0x14da <vfprintf+0xfc>
    14ac:	36 fc       	sbrc	r3, 6
    14ae:	75 c1       	rjmp	.+746    	; 0x179a <vfprintf+0x3bc>
    14b0:	23 2d       	mov	r18, r3
    14b2:	20 64       	ori	r18, 0x40	; 64
    14b4:	32 2e       	mov	r3, r18
    14b6:	19 c0       	rjmp	.+50     	; 0x14ea <vfprintf+0x10c>
    14b8:	36 fe       	sbrs	r3, 6
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <vfprintf+0xea>
    14bc:	8a e0       	ldi	r24, 0x0A	; 10
    14be:	98 9e       	mul	r9, r24
    14c0:	20 0d       	add	r18, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	92 2e       	mov	r9, r18
    14c6:	11 c0       	rjmp	.+34     	; 0x14ea <vfprintf+0x10c>
    14c8:	ea e0       	ldi	r30, 0x0A	; 10
    14ca:	2e 9e       	mul	r2, r30
    14cc:	20 0d       	add	r18, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	22 2e       	mov	r2, r18
    14d2:	f3 2d       	mov	r31, r3
    14d4:	f0 62       	ori	r31, 0x20	; 32
    14d6:	3f 2e       	mov	r3, r31
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <vfprintf+0x10c>
    14da:	8c 36       	cpi	r24, 0x6C	; 108
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <vfprintf+0x108>
    14de:	83 2d       	mov	r24, r3
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	38 2e       	mov	r3, r24
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <vfprintf+0x10c>
    14e6:	88 36       	cpi	r24, 0x68	; 104
    14e8:	41 f4       	brne	.+16     	; 0x14fa <vfprintf+0x11c>
    14ea:	f7 01       	movw	r30, r14
    14ec:	93 fd       	sbrc	r25, 3
    14ee:	85 91       	lpm	r24, Z+
    14f0:	93 ff       	sbrs	r25, 3
    14f2:	81 91       	ld	r24, Z+
    14f4:	7f 01       	movw	r14, r30
    14f6:	81 11       	cpse	r24, r1
    14f8:	b3 cf       	rjmp	.-154    	; 0x1460 <vfprintf+0x82>
    14fa:	98 2f       	mov	r25, r24
    14fc:	9f 7d       	andi	r25, 0xDF	; 223
    14fe:	95 54       	subi	r25, 0x45	; 69
    1500:	93 30       	cpi	r25, 0x03	; 3
    1502:	28 f4       	brcc	.+10     	; 0x150e <vfprintf+0x130>
    1504:	0c 5f       	subi	r16, 0xFC	; 252
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	9f e3       	ldi	r25, 0x3F	; 63
    150a:	99 83       	std	Y+1, r25	; 0x01
    150c:	0d c0       	rjmp	.+26     	; 0x1528 <vfprintf+0x14a>
    150e:	83 36       	cpi	r24, 0x63	; 99
    1510:	31 f0       	breq	.+12     	; 0x151e <vfprintf+0x140>
    1512:	83 37       	cpi	r24, 0x73	; 115
    1514:	71 f0       	breq	.+28     	; 0x1532 <vfprintf+0x154>
    1516:	83 35       	cpi	r24, 0x53	; 83
    1518:	09 f0       	breq	.+2      	; 0x151c <vfprintf+0x13e>
    151a:	55 c0       	rjmp	.+170    	; 0x15c6 <vfprintf+0x1e8>
    151c:	20 c0       	rjmp	.+64     	; 0x155e <vfprintf+0x180>
    151e:	f8 01       	movw	r30, r16
    1520:	80 81       	ld	r24, Z
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	0e 5f       	subi	r16, 0xFE	; 254
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	88 24       	eor	r8, r8
    152a:	83 94       	inc	r8
    152c:	91 2c       	mov	r9, r1
    152e:	53 01       	movw	r10, r6
    1530:	12 c0       	rjmp	.+36     	; 0x1556 <vfprintf+0x178>
    1532:	28 01       	movw	r4, r16
    1534:	f2 e0       	ldi	r31, 0x02	; 2
    1536:	4f 0e       	add	r4, r31
    1538:	51 1c       	adc	r5, r1
    153a:	f8 01       	movw	r30, r16
    153c:	a0 80       	ld	r10, Z
    153e:	b1 80       	ldd	r11, Z+1	; 0x01
    1540:	36 fe       	sbrs	r3, 6
    1542:	03 c0       	rjmp	.+6      	; 0x154a <vfprintf+0x16c>
    1544:	69 2d       	mov	r22, r9
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x170>
    154a:	6f ef       	ldi	r22, 0xFF	; 255
    154c:	7f ef       	ldi	r23, 0xFF	; 255
    154e:	c5 01       	movw	r24, r10
    1550:	4e d1       	rcall	.+668    	; 0x17ee <strnlen>
    1552:	4c 01       	movw	r8, r24
    1554:	82 01       	movw	r16, r4
    1556:	f3 2d       	mov	r31, r3
    1558:	ff 77       	andi	r31, 0x7F	; 127
    155a:	3f 2e       	mov	r3, r31
    155c:	15 c0       	rjmp	.+42     	; 0x1588 <vfprintf+0x1aa>
    155e:	28 01       	movw	r4, r16
    1560:	22 e0       	ldi	r18, 0x02	; 2
    1562:	42 0e       	add	r4, r18
    1564:	51 1c       	adc	r5, r1
    1566:	f8 01       	movw	r30, r16
    1568:	a0 80       	ld	r10, Z
    156a:	b1 80       	ldd	r11, Z+1	; 0x01
    156c:	36 fe       	sbrs	r3, 6
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <vfprintf+0x198>
    1570:	69 2d       	mov	r22, r9
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <vfprintf+0x19c>
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	7f ef       	ldi	r23, 0xFF	; 255
    157a:	c5 01       	movw	r24, r10
    157c:	2d d1       	rcall	.+602    	; 0x17d8 <strnlen_P>
    157e:	4c 01       	movw	r8, r24
    1580:	f3 2d       	mov	r31, r3
    1582:	f0 68       	ori	r31, 0x80	; 128
    1584:	3f 2e       	mov	r3, r31
    1586:	82 01       	movw	r16, r4
    1588:	33 fc       	sbrc	r3, 3
    158a:	19 c0       	rjmp	.+50     	; 0x15be <vfprintf+0x1e0>
    158c:	82 2d       	mov	r24, r2
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	88 16       	cp	r8, r24
    1592:	99 06       	cpc	r9, r25
    1594:	a0 f4       	brcc	.+40     	; 0x15be <vfprintf+0x1e0>
    1596:	b6 01       	movw	r22, r12
    1598:	80 e2       	ldi	r24, 0x20	; 32
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	33 d1       	rcall	.+614    	; 0x1804 <fputc>
    159e:	2a 94       	dec	r2
    15a0:	f5 cf       	rjmp	.-22     	; 0x158c <vfprintf+0x1ae>
    15a2:	f5 01       	movw	r30, r10
    15a4:	37 fc       	sbrc	r3, 7
    15a6:	85 91       	lpm	r24, Z+
    15a8:	37 fe       	sbrs	r3, 7
    15aa:	81 91       	ld	r24, Z+
    15ac:	5f 01       	movw	r10, r30
    15ae:	b6 01       	movw	r22, r12
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	28 d1       	rcall	.+592    	; 0x1804 <fputc>
    15b4:	21 10       	cpse	r2, r1
    15b6:	2a 94       	dec	r2
    15b8:	21 e0       	ldi	r18, 0x01	; 1
    15ba:	82 1a       	sub	r8, r18
    15bc:	91 08       	sbc	r9, r1
    15be:	81 14       	cp	r8, r1
    15c0:	91 04       	cpc	r9, r1
    15c2:	79 f7       	brne	.-34     	; 0x15a2 <vfprintf+0x1c4>
    15c4:	e1 c0       	rjmp	.+450    	; 0x1788 <vfprintf+0x3aa>
    15c6:	84 36       	cpi	r24, 0x64	; 100
    15c8:	11 f0       	breq	.+4      	; 0x15ce <vfprintf+0x1f0>
    15ca:	89 36       	cpi	r24, 0x69	; 105
    15cc:	39 f5       	brne	.+78     	; 0x161c <vfprintf+0x23e>
    15ce:	f8 01       	movw	r30, r16
    15d0:	37 fe       	sbrs	r3, 7
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <vfprintf+0x204>
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0c 5f       	subi	r16, 0xFC	; 252
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <vfprintf+0x214>
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	07 2e       	mov	r0, r23
    15e8:	00 0c       	add	r0, r0
    15ea:	88 0b       	sbc	r24, r24
    15ec:	99 0b       	sbc	r25, r25
    15ee:	0e 5f       	subi	r16, 0xFE	; 254
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	f3 2d       	mov	r31, r3
    15f4:	ff 76       	andi	r31, 0x6F	; 111
    15f6:	3f 2e       	mov	r3, r31
    15f8:	97 ff       	sbrs	r25, 7
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <vfprintf+0x230>
    15fc:	90 95       	com	r25
    15fe:	80 95       	com	r24
    1600:	70 95       	com	r23
    1602:	61 95       	neg	r22
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	f0 68       	ori	r31, 0x80	; 128
    160c:	3f 2e       	mov	r3, r31
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	a3 01       	movw	r20, r6
    1614:	33 d1       	rcall	.+614    	; 0x187c <__ultoa_invert>
    1616:	88 2e       	mov	r8, r24
    1618:	86 18       	sub	r8, r6
    161a:	44 c0       	rjmp	.+136    	; 0x16a4 <vfprintf+0x2c6>
    161c:	85 37       	cpi	r24, 0x75	; 117
    161e:	31 f4       	brne	.+12     	; 0x162c <vfprintf+0x24e>
    1620:	23 2d       	mov	r18, r3
    1622:	2f 7e       	andi	r18, 0xEF	; 239
    1624:	b2 2e       	mov	r11, r18
    1626:	2a e0       	ldi	r18, 0x0A	; 10
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	25 c0       	rjmp	.+74     	; 0x1676 <vfprintf+0x298>
    162c:	93 2d       	mov	r25, r3
    162e:	99 7f       	andi	r25, 0xF9	; 249
    1630:	b9 2e       	mov	r11, r25
    1632:	8f 36       	cpi	r24, 0x6F	; 111
    1634:	c1 f0       	breq	.+48     	; 0x1666 <vfprintf+0x288>
    1636:	18 f4       	brcc	.+6      	; 0x163e <vfprintf+0x260>
    1638:	88 35       	cpi	r24, 0x58	; 88
    163a:	79 f0       	breq	.+30     	; 0x165a <vfprintf+0x27c>
    163c:	ae c0       	rjmp	.+348    	; 0x179a <vfprintf+0x3bc>
    163e:	80 37       	cpi	r24, 0x70	; 112
    1640:	19 f0       	breq	.+6      	; 0x1648 <vfprintf+0x26a>
    1642:	88 37       	cpi	r24, 0x78	; 120
    1644:	21 f0       	breq	.+8      	; 0x164e <vfprintf+0x270>
    1646:	a9 c0       	rjmp	.+338    	; 0x179a <vfprintf+0x3bc>
    1648:	e9 2f       	mov	r30, r25
    164a:	e0 61       	ori	r30, 0x10	; 16
    164c:	be 2e       	mov	r11, r30
    164e:	b4 fe       	sbrs	r11, 4
    1650:	0d c0       	rjmp	.+26     	; 0x166c <vfprintf+0x28e>
    1652:	fb 2d       	mov	r31, r11
    1654:	f4 60       	ori	r31, 0x04	; 4
    1656:	bf 2e       	mov	r11, r31
    1658:	09 c0       	rjmp	.+18     	; 0x166c <vfprintf+0x28e>
    165a:	34 fe       	sbrs	r3, 4
    165c:	0a c0       	rjmp	.+20     	; 0x1672 <vfprintf+0x294>
    165e:	29 2f       	mov	r18, r25
    1660:	26 60       	ori	r18, 0x06	; 6
    1662:	b2 2e       	mov	r11, r18
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <vfprintf+0x294>
    1666:	28 e0       	ldi	r18, 0x08	; 8
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <vfprintf+0x298>
    166c:	20 e1       	ldi	r18, 0x10	; 16
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x298>
    1672:	20 e1       	ldi	r18, 0x10	; 16
    1674:	32 e0       	ldi	r19, 0x02	; 2
    1676:	f8 01       	movw	r30, r16
    1678:	b7 fe       	sbrs	r11, 7
    167a:	07 c0       	rjmp	.+14     	; 0x168a <vfprintf+0x2ac>
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	0c 5f       	subi	r16, 0xFC	; 252
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <vfprintf+0x2b8>
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 5f       	subi	r16, 0xFE	; 254
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	a3 01       	movw	r20, r6
    1698:	f1 d0       	rcall	.+482    	; 0x187c <__ultoa_invert>
    169a:	88 2e       	mov	r8, r24
    169c:	86 18       	sub	r8, r6
    169e:	fb 2d       	mov	r31, r11
    16a0:	ff 77       	andi	r31, 0x7F	; 127
    16a2:	3f 2e       	mov	r3, r31
    16a4:	36 fe       	sbrs	r3, 6
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <vfprintf+0x2e4>
    16a8:	23 2d       	mov	r18, r3
    16aa:	2e 7f       	andi	r18, 0xFE	; 254
    16ac:	a2 2e       	mov	r10, r18
    16ae:	89 14       	cp	r8, r9
    16b0:	58 f4       	brcc	.+22     	; 0x16c8 <vfprintf+0x2ea>
    16b2:	34 fe       	sbrs	r3, 4
    16b4:	0b c0       	rjmp	.+22     	; 0x16cc <vfprintf+0x2ee>
    16b6:	32 fc       	sbrc	r3, 2
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <vfprintf+0x2ee>
    16ba:	83 2d       	mov	r24, r3
    16bc:	8e 7e       	andi	r24, 0xEE	; 238
    16be:	a8 2e       	mov	r10, r24
    16c0:	05 c0       	rjmp	.+10     	; 0x16cc <vfprintf+0x2ee>
    16c2:	b8 2c       	mov	r11, r8
    16c4:	a3 2c       	mov	r10, r3
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <vfprintf+0x2f0>
    16c8:	b8 2c       	mov	r11, r8
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <vfprintf+0x2f0>
    16cc:	b9 2c       	mov	r11, r9
    16ce:	a4 fe       	sbrs	r10, 4
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <vfprintf+0x312>
    16d2:	fe 01       	movw	r30, r28
    16d4:	e8 0d       	add	r30, r8
    16d6:	f1 1d       	adc	r31, r1
    16d8:	80 81       	ld	r24, Z
    16da:	80 33       	cpi	r24, 0x30	; 48
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <vfprintf+0x308>
    16de:	9a 2d       	mov	r25, r10
    16e0:	99 7e       	andi	r25, 0xE9	; 233
    16e2:	a9 2e       	mov	r10, r25
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <vfprintf+0x31a>
    16e6:	a2 fe       	sbrs	r10, 2
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <vfprintf+0x318>
    16ea:	b3 94       	inc	r11
    16ec:	b3 94       	inc	r11
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <vfprintf+0x31a>
    16f0:	8a 2d       	mov	r24, r10
    16f2:	86 78       	andi	r24, 0x86	; 134
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <vfprintf+0x31a>
    16f6:	b3 94       	inc	r11
    16f8:	a3 fc       	sbrc	r10, 3
    16fa:	10 c0       	rjmp	.+32     	; 0x171c <vfprintf+0x33e>
    16fc:	a0 fe       	sbrs	r10, 0
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x32e>
    1700:	b2 14       	cp	r11, r2
    1702:	80 f4       	brcc	.+32     	; 0x1724 <vfprintf+0x346>
    1704:	28 0c       	add	r2, r8
    1706:	92 2c       	mov	r9, r2
    1708:	9b 18       	sub	r9, r11
    170a:	0d c0       	rjmp	.+26     	; 0x1726 <vfprintf+0x348>
    170c:	b2 14       	cp	r11, r2
    170e:	58 f4       	brcc	.+22     	; 0x1726 <vfprintf+0x348>
    1710:	b6 01       	movw	r22, r12
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	76 d0       	rcall	.+236    	; 0x1804 <fputc>
    1718:	b3 94       	inc	r11
    171a:	f8 cf       	rjmp	.-16     	; 0x170c <vfprintf+0x32e>
    171c:	b2 14       	cp	r11, r2
    171e:	18 f4       	brcc	.+6      	; 0x1726 <vfprintf+0x348>
    1720:	2b 18       	sub	r2, r11
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <vfprintf+0x34a>
    1724:	98 2c       	mov	r9, r8
    1726:	21 2c       	mov	r2, r1
    1728:	a4 fe       	sbrs	r10, 4
    172a:	0f c0       	rjmp	.+30     	; 0x174a <vfprintf+0x36c>
    172c:	b6 01       	movw	r22, r12
    172e:	80 e3       	ldi	r24, 0x30	; 48
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	68 d0       	rcall	.+208    	; 0x1804 <fputc>
    1734:	a2 fe       	sbrs	r10, 2
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <vfprintf+0x386>
    1738:	a1 fc       	sbrc	r10, 1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <vfprintf+0x364>
    173c:	88 e7       	ldi	r24, 0x78	; 120
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <vfprintf+0x368>
    1742:	88 e5       	ldi	r24, 0x58	; 88
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	b6 01       	movw	r22, r12
    1748:	0c c0       	rjmp	.+24     	; 0x1762 <vfprintf+0x384>
    174a:	8a 2d       	mov	r24, r10
    174c:	86 78       	andi	r24, 0x86	; 134
    174e:	51 f0       	breq	.+20     	; 0x1764 <vfprintf+0x386>
    1750:	a1 fe       	sbrs	r10, 1
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x37a>
    1754:	8b e2       	ldi	r24, 0x2B	; 43
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vfprintf+0x37c>
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	a7 fc       	sbrc	r10, 7
    175c:	8d e2       	ldi	r24, 0x2D	; 45
    175e:	b6 01       	movw	r22, r12
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	50 d0       	rcall	.+160    	; 0x1804 <fputc>
    1764:	89 14       	cp	r8, r9
    1766:	30 f4       	brcc	.+12     	; 0x1774 <vfprintf+0x396>
    1768:	b6 01       	movw	r22, r12
    176a:	80 e3       	ldi	r24, 0x30	; 48
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	4a d0       	rcall	.+148    	; 0x1804 <fputc>
    1770:	9a 94       	dec	r9
    1772:	f8 cf       	rjmp	.-16     	; 0x1764 <vfprintf+0x386>
    1774:	8a 94       	dec	r8
    1776:	f3 01       	movw	r30, r6
    1778:	e8 0d       	add	r30, r8
    177a:	f1 1d       	adc	r31, r1
    177c:	80 81       	ld	r24, Z
    177e:	b6 01       	movw	r22, r12
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	40 d0       	rcall	.+128    	; 0x1804 <fputc>
    1784:	81 10       	cpse	r8, r1
    1786:	f6 cf       	rjmp	.-20     	; 0x1774 <vfprintf+0x396>
    1788:	22 20       	and	r2, r2
    178a:	09 f4       	brne	.+2      	; 0x178e <vfprintf+0x3b0>
    178c:	4e ce       	rjmp	.-868    	; 0x142a <vfprintf+0x4c>
    178e:	b6 01       	movw	r22, r12
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	37 d0       	rcall	.+110    	; 0x1804 <fputc>
    1796:	2a 94       	dec	r2
    1798:	f7 cf       	rjmp	.-18     	; 0x1788 <vfprintf+0x3aa>
    179a:	f6 01       	movw	r30, r12
    179c:	86 81       	ldd	r24, Z+6	; 0x06
    179e:	97 81       	ldd	r25, Z+7	; 0x07
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x3c8>
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	2b 96       	adiw	r28, 0x0b	; 11
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	7f 90       	pop	r7
    17cc:	6f 90       	pop	r6
    17ce:	5f 90       	pop	r5
    17d0:	4f 90       	pop	r4
    17d2:	3f 90       	pop	r3
    17d4:	2f 90       	pop	r2
    17d6:	08 95       	ret

000017d8 <strnlen_P>:
    17d8:	fc 01       	movw	r30, r24
    17da:	05 90       	lpm	r0, Z+
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	70 40       	sbci	r23, 0x00	; 0
    17e0:	01 10       	cpse	r0, r1
    17e2:	d8 f7       	brcc	.-10     	; 0x17da <strnlen_P+0x2>
    17e4:	80 95       	com	r24
    17e6:	90 95       	com	r25
    17e8:	8e 0f       	add	r24, r30
    17ea:	9f 1f       	adc	r25, r31
    17ec:	08 95       	ret

000017ee <strnlen>:
    17ee:	fc 01       	movw	r30, r24
    17f0:	61 50       	subi	r22, 0x01	; 1
    17f2:	70 40       	sbci	r23, 0x00	; 0
    17f4:	01 90       	ld	r0, Z+
    17f6:	01 10       	cpse	r0, r1
    17f8:	d8 f7       	brcc	.-10     	; 0x17f0 <strnlen+0x2>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	8e 0f       	add	r24, r30
    1800:	9f 1f       	adc	r25, r31
    1802:	08 95       	ret

00001804 <fputc>:
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	fb 01       	movw	r30, r22
    180e:	23 81       	ldd	r18, Z+3	; 0x03
    1810:	21 fd       	sbrc	r18, 1
    1812:	03 c0       	rjmp	.+6      	; 0x181a <fputc+0x16>
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	9f ef       	ldi	r25, 0xFF	; 255
    1818:	2c c0       	rjmp	.+88     	; 0x1872 <fputc+0x6e>
    181a:	22 ff       	sbrs	r18, 2
    181c:	16 c0       	rjmp	.+44     	; 0x184a <fputc+0x46>
    181e:	46 81       	ldd	r20, Z+6	; 0x06
    1820:	57 81       	ldd	r21, Z+7	; 0x07
    1822:	24 81       	ldd	r18, Z+4	; 0x04
    1824:	35 81       	ldd	r19, Z+5	; 0x05
    1826:	42 17       	cp	r20, r18
    1828:	53 07       	cpc	r21, r19
    182a:	44 f4       	brge	.+16     	; 0x183c <fputc+0x38>
    182c:	a0 81       	ld	r26, Z
    182e:	b1 81       	ldd	r27, Z+1	; 0x01
    1830:	9d 01       	movw	r18, r26
    1832:	2f 5f       	subi	r18, 0xFF	; 255
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	31 83       	std	Z+1, r19	; 0x01
    1838:	20 83       	st	Z, r18
    183a:	8c 93       	st	X, r24
    183c:	26 81       	ldd	r18, Z+6	; 0x06
    183e:	37 81       	ldd	r19, Z+7	; 0x07
    1840:	2f 5f       	subi	r18, 0xFF	; 255
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	37 83       	std	Z+7, r19	; 0x07
    1846:	26 83       	std	Z+6, r18	; 0x06
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <fputc+0x6e>
    184a:	8b 01       	movw	r16, r22
    184c:	ec 01       	movw	r28, r24
    184e:	fb 01       	movw	r30, r22
    1850:	00 84       	ldd	r0, Z+8	; 0x08
    1852:	f1 85       	ldd	r31, Z+9	; 0x09
    1854:	e0 2d       	mov	r30, r0
    1856:	09 95       	icall
    1858:	89 2b       	or	r24, r25
    185a:	e1 f6       	brne	.-72     	; 0x1814 <fputc+0x10>
    185c:	d8 01       	movw	r26, r16
    185e:	16 96       	adiw	r26, 0x06	; 6
    1860:	8d 91       	ld	r24, X+
    1862:	9c 91       	ld	r25, X
    1864:	17 97       	sbiw	r26, 0x07	; 7
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	17 96       	adiw	r26, 0x07	; 7
    186a:	9c 93       	st	X, r25
    186c:	8e 93       	st	-X, r24
    186e:	16 97       	sbiw	r26, 0x06	; 6
    1870:	ce 01       	movw	r24, r28
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <__ultoa_invert>:
    187c:	fa 01       	movw	r30, r20
    187e:	aa 27       	eor	r26, r26
    1880:	28 30       	cpi	r18, 0x08	; 8
    1882:	51 f1       	breq	.+84     	; 0x18d8 <__ultoa_invert+0x5c>
    1884:	20 31       	cpi	r18, 0x10	; 16
    1886:	81 f1       	breq	.+96     	; 0x18e8 <__ultoa_invert+0x6c>
    1888:	e8 94       	clt
    188a:	6f 93       	push	r22
    188c:	6e 7f       	andi	r22, 0xFE	; 254
    188e:	6e 5f       	subi	r22, 0xFE	; 254
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	af 4f       	sbci	r26, 0xFF	; 255
    1898:	b1 e0       	ldi	r27, 0x01	; 1
    189a:	3e d0       	rcall	.+124    	; 0x1918 <__ultoa_invert+0x9c>
    189c:	b4 e0       	ldi	r27, 0x04	; 4
    189e:	3c d0       	rcall	.+120    	; 0x1918 <__ultoa_invert+0x9c>
    18a0:	67 0f       	add	r22, r23
    18a2:	78 1f       	adc	r23, r24
    18a4:	89 1f       	adc	r24, r25
    18a6:	9a 1f       	adc	r25, r26
    18a8:	a1 1d       	adc	r26, r1
    18aa:	68 0f       	add	r22, r24
    18ac:	79 1f       	adc	r23, r25
    18ae:	8a 1f       	adc	r24, r26
    18b0:	91 1d       	adc	r25, r1
    18b2:	a1 1d       	adc	r26, r1
    18b4:	6a 0f       	add	r22, r26
    18b6:	71 1d       	adc	r23, r1
    18b8:	81 1d       	adc	r24, r1
    18ba:	91 1d       	adc	r25, r1
    18bc:	a1 1d       	adc	r26, r1
    18be:	20 d0       	rcall	.+64     	; 0x1900 <__ultoa_invert+0x84>
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <__ultoa_invert+0x48>
    18c2:	68 94       	set
    18c4:	3f 91       	pop	r19
    18c6:	2a e0       	ldi	r18, 0x0A	; 10
    18c8:	26 9f       	mul	r18, r22
    18ca:	11 24       	eor	r1, r1
    18cc:	30 19       	sub	r19, r0
    18ce:	30 5d       	subi	r19, 0xD0	; 208
    18d0:	31 93       	st	Z+, r19
    18d2:	de f6       	brtc	.-74     	; 0x188a <__ultoa_invert+0xe>
    18d4:	cf 01       	movw	r24, r30
    18d6:	08 95       	ret
    18d8:	46 2f       	mov	r20, r22
    18da:	47 70       	andi	r20, 0x07	; 7
    18dc:	40 5d       	subi	r20, 0xD0	; 208
    18de:	41 93       	st	Z+, r20
    18e0:	b3 e0       	ldi	r27, 0x03	; 3
    18e2:	0f d0       	rcall	.+30     	; 0x1902 <__ultoa_invert+0x86>
    18e4:	c9 f7       	brne	.-14     	; 0x18d8 <__ultoa_invert+0x5c>
    18e6:	f6 cf       	rjmp	.-20     	; 0x18d4 <__ultoa_invert+0x58>
    18e8:	46 2f       	mov	r20, r22
    18ea:	4f 70       	andi	r20, 0x0F	; 15
    18ec:	40 5d       	subi	r20, 0xD0	; 208
    18ee:	4a 33       	cpi	r20, 0x3A	; 58
    18f0:	18 f0       	brcs	.+6      	; 0x18f8 <__ultoa_invert+0x7c>
    18f2:	49 5d       	subi	r20, 0xD9	; 217
    18f4:	31 fd       	sbrc	r19, 1
    18f6:	40 52       	subi	r20, 0x20	; 32
    18f8:	41 93       	st	Z+, r20
    18fa:	02 d0       	rcall	.+4      	; 0x1900 <__ultoa_invert+0x84>
    18fc:	a9 f7       	brne	.-22     	; 0x18e8 <__ultoa_invert+0x6c>
    18fe:	ea cf       	rjmp	.-44     	; 0x18d4 <__ultoa_invert+0x58>
    1900:	b4 e0       	ldi	r27, 0x04	; 4
    1902:	a6 95       	lsr	r26
    1904:	97 95       	ror	r25
    1906:	87 95       	ror	r24
    1908:	77 95       	ror	r23
    190a:	67 95       	ror	r22
    190c:	ba 95       	dec	r27
    190e:	c9 f7       	brne	.-14     	; 0x1902 <__ultoa_invert+0x86>
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	61 05       	cpc	r22, r1
    1914:	71 05       	cpc	r23, r1
    1916:	08 95       	ret
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	0a 2e       	mov	r0, r26
    191e:	06 94       	lsr	r0
    1920:	57 95       	ror	r21
    1922:	47 95       	ror	r20
    1924:	37 95       	ror	r19
    1926:	27 95       	ror	r18
    1928:	ba 95       	dec	r27
    192a:	c9 f7       	brne	.-14     	; 0x191e <__ultoa_invert+0xa2>
    192c:	62 0f       	add	r22, r18
    192e:	73 1f       	adc	r23, r19
    1930:	84 1f       	adc	r24, r20
    1932:	95 1f       	adc	r25, r21
    1934:	a0 1d       	adc	r26, r0
    1936:	08 95       	ret

00001938 <_exit>:
    1938:	f8 94       	cli

0000193a <__stop_program>:
    193a:	ff cf       	rjmp	.-2      	; 0x193a <__stop_program>
