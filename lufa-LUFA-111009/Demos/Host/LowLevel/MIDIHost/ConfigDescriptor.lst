   1               		.file	"ConfigDescriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.DComp_NextMIDIStreamingInterface,"ax",@progbits
  12               	.global	DComp_NextMIDIStreamingInterface
  14               	DComp_NextMIDIStreamingInterface:
  15               	.LFB152:
  16               		.file 1 "ConfigDescriptor.c"
   1:ConfigDescriptor.c **** /*
   2:ConfigDescriptor.c ****              LUFA Library
   3:ConfigDescriptor.c ****      Copyright (C) Dean Camera, 2011.
   4:ConfigDescriptor.c **** 
   5:ConfigDescriptor.c ****   dean [at] fourwalledcubicle [dot] com
   6:ConfigDescriptor.c ****            www.lufa-lib.org
   7:ConfigDescriptor.c **** */
   8:ConfigDescriptor.c **** 
   9:ConfigDescriptor.c **** /*
  10:ConfigDescriptor.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:ConfigDescriptor.c **** 
  12:ConfigDescriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  13:ConfigDescriptor.c ****   software and its documentation for any purpose is hereby granted
  14:ConfigDescriptor.c ****   without fee, provided that the above copyright notice appear in
  15:ConfigDescriptor.c ****   all copies and that both that the copyright notice and this
  16:ConfigDescriptor.c ****   permission notice and warranty disclaimer appear in supporting
  17:ConfigDescriptor.c ****   documentation, and that the name of the author not be used in
  18:ConfigDescriptor.c ****   advertising or publicity pertaining to distribution of the
  19:ConfigDescriptor.c ****   software without specific, written prior permission.
  20:ConfigDescriptor.c **** 
  21:ConfigDescriptor.c ****   The author disclaim all warranties with regard to this
  22:ConfigDescriptor.c ****   software, including all implied warranties of merchantability
  23:ConfigDescriptor.c ****   and fitness.  In no event shall the author be liable for any
  24:ConfigDescriptor.c ****   special, indirect or consequential damages or any damages
  25:ConfigDescriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:ConfigDescriptor.c ****   in an action of contract, negligence or other tortious action,
  27:ConfigDescriptor.c ****   arising out of or in connection with the use or performance of
  28:ConfigDescriptor.c ****   this software.
  29:ConfigDescriptor.c **** */
  30:ConfigDescriptor.c **** 
  31:ConfigDescriptor.c **** /** \file
  32:ConfigDescriptor.c ****  *
  33:ConfigDescriptor.c ****  *  USB Device Configuration Descriptor processing routines, to determine the correct pipe configur
  34:ConfigDescriptor.c ****  *  needed to communication with an attached USB device. Descriptors are special  computer-readable
  35:ConfigDescriptor.c ****  *  which the host requests upon device enumeration, to determine the device's capabilities and fun
  36:ConfigDescriptor.c ****  */
  37:ConfigDescriptor.c **** 
  38:ConfigDescriptor.c **** #include "ConfigDescriptor.h"
  39:ConfigDescriptor.c **** 
  40:ConfigDescriptor.c **** /** Reads and processes an attached device's descriptors, to determine compatibility and pipe confi
  41:ConfigDescriptor.c ****  *  routine will read in the entire configuration descriptor, and configure the hosts pipes to corr
  42:ConfigDescriptor.c ****  *  with compatible devices.
  43:ConfigDescriptor.c ****  *
  44:ConfigDescriptor.c ****  *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endp
  45:ConfigDescriptor.c ****  *
  46:ConfigDescriptor.c ****  *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
  47:ConfigDescriptor.c ****  */
  48:ConfigDescriptor.c **** uint8_t ProcessConfigurationDescriptor(void)
  49:ConfigDescriptor.c **** {
  50:ConfigDescriptor.c **** 	uint8_t  ConfigDescriptorData[512];
  51:ConfigDescriptor.c **** 	void*    CurrConfigLocation = ConfigDescriptorData;
  52:ConfigDescriptor.c **** 	uint16_t CurrConfigBytesRem;
  53:ConfigDescriptor.c **** 
  54:ConfigDescriptor.c **** 	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
  55:ConfigDescriptor.c **** 	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
  56:ConfigDescriptor.c **** 	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
  57:ConfigDescriptor.c **** 
  58:ConfigDescriptor.c **** 	/* Retrieve the entire configuration descriptor into the allocated buffer */
  59:ConfigDescriptor.c **** 	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(Co
  60:ConfigDescriptor.c **** 	{
  61:ConfigDescriptor.c **** 		case HOST_GETCONFIG_Successful:
  62:ConfigDescriptor.c **** 			break;
  63:ConfigDescriptor.c **** 		case HOST_GETCONFIG_InvalidData:
  64:ConfigDescriptor.c **** 			return InvalidConfigDataReturned;
  65:ConfigDescriptor.c **** 		case HOST_GETCONFIG_BuffOverflow:
  66:ConfigDescriptor.c **** 			return DescriptorTooLarge;
  67:ConfigDescriptor.c **** 		default:
  68:ConfigDescriptor.c **** 			return ControlError;
  69:ConfigDescriptor.c **** 	}
  70:ConfigDescriptor.c **** 
  71:ConfigDescriptor.c **** 	while (!(DataINEndpoint) || !(DataOUTEndpoint))
  72:ConfigDescriptor.c **** 	{
  73:ConfigDescriptor.c **** 		/* See if we've found a likely compatible interface, and if there is an endpoint within that inte
  74:ConfigDescriptor.c **** 		if (!(MIDIInterface) ||
  75:ConfigDescriptor.c **** 		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
  76:ConfigDescriptor.c **** 		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Foun
  77:ConfigDescriptor.c **** 		{
  78:ConfigDescriptor.c **** 			/* Get the next Mass Storage interface from the configuration descriptor */
  79:ConfigDescriptor.c **** 			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
  80:ConfigDescriptor.c **** 										  DComp_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
  81:ConfigDescriptor.c **** 			{
  82:ConfigDescriptor.c **** 				/* Descriptor not found, error out */
  83:ConfigDescriptor.c **** 				return NoCompatibleInterfaceFound;
  84:ConfigDescriptor.c **** 			}
  85:ConfigDescriptor.c **** 
  86:ConfigDescriptor.c **** 			/* Save the interface in case we need to refer back to it later */
  87:ConfigDescriptor.c **** 			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
  88:ConfigDescriptor.c **** 
  89:ConfigDescriptor.c **** 			/* Clear any found endpoints */
  90:ConfigDescriptor.c **** 			DataINEndpoint  = NULL;
  91:ConfigDescriptor.c **** 			DataOUTEndpoint = NULL;
  92:ConfigDescriptor.c **** 
  93:ConfigDescriptor.c **** 			/* Skip the remainder of the loop as we have not found an endpoint yet */
  94:ConfigDescriptor.c **** 			continue;
  95:ConfigDescriptor.c **** 		}
  96:ConfigDescriptor.c **** 
  97:ConfigDescriptor.c **** 		/* Retrieve the endpoint address from the endpoint descriptor */
  98:ConfigDescriptor.c **** 		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_End
  99:ConfigDescriptor.c **** 
 100:ConfigDescriptor.c **** 		/* If the endpoint is a IN type endpoint */
 101:ConfigDescriptor.c **** 		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
 102:ConfigDescriptor.c **** 		  DataINEndpoint  = EndpointData;
 103:ConfigDescriptor.c **** 		else
 104:ConfigDescriptor.c **** 		  DataOUTEndpoint = EndpointData;
 105:ConfigDescriptor.c **** 	}
 106:ConfigDescriptor.c **** 
 107:ConfigDescriptor.c **** 	/* Configure the MIDI data IN pipe */
 108:ConfigDescriptor.c **** 	Pipe_ConfigurePipe(MIDI_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
 109:ConfigDescriptor.c **** 	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE
 110:ConfigDescriptor.c **** 
 111:ConfigDescriptor.c **** 	/* Configure the MIDI data OUT pipe */
 112:ConfigDescriptor.c **** 	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
 113:ConfigDescriptor.c **** 					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);
 114:ConfigDescriptor.c **** 
 115:ConfigDescriptor.c **** 	/* Valid data found, return success */
 116:ConfigDescriptor.c **** 	return SuccessfulConfigRead;
 117:ConfigDescriptor.c **** }
 118:ConfigDescriptor.c **** 
 119:ConfigDescriptor.c **** /** Descriptor comparator function. This comparator function is can be called while processing an a
 120:ConfigDescriptor.c ****  *  configuration descriptor, to search for a specific sub descriptor. It can also be used to abort
 121:ConfigDescriptor.c ****  *  descriptor processing if an incompatible descriptor configuration is found.
 122:ConfigDescriptor.c ****  *
 123:ConfigDescriptor.c ****  *  This comparator searches for the next Interface descriptor of the correct MIDI Streaming Class,
 124:ConfigDescriptor.c ****  *
 125:ConfigDescriptor.c ****  *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 126:ConfigDescriptor.c ****  */
 127:ConfigDescriptor.c **** uint8_t DComp_NextMIDIStreamingInterface(void* CurrentDescriptor)
 128:ConfigDescriptor.c **** {
  17               		.loc 1 128 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24 0000 FC01      		movw r30,r24
  25               	.LVL1:
 129:ConfigDescriptor.c **** 	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);
 130:ConfigDescriptor.c **** 
 131:ConfigDescriptor.c **** 	if (Header->Type == DTYPE_Interface)
  26               		.loc 1 131 0
  27 0002 8181      		ldd r24,Z+1
  28               	.LVL2:
  29 0004 8430      		cpi r24,lo8(4)
  30 0006 01F4      		brne .L6
  31               	.LVL3:
  32               	.LBB2:
 132:ConfigDescriptor.c **** 	{
 133:ConfigDescriptor.c **** 		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interf
 134:ConfigDescriptor.c **** 
 135:ConfigDescriptor.c **** 		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface fo
 136:ConfigDescriptor.c **** 		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
  33               		.loc 1 136 0
  34 0008 8581      		ldd r24,Z+5
  35 000a 8130      		cpi r24,lo8(1)
  36 000c 01F4      		brne .L6
  37               		.loc 1 136 0 is_stmt 0 discriminator 1
  38 000e 8681      		ldd r24,Z+6
  39 0010 8330      		cpi r24,lo8(3)
  40 0012 01F4      		brne .L6
 137:ConfigDescriptor.c **** 		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
 138:ConfigDescriptor.c **** 		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
  41               		.loc 1 138 0 is_stmt 1
  42 0014 8781      		ldd r24,Z+7
 137:ConfigDescriptor.c **** 		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
  43               		.loc 1 137 0
  44 0016 8111      		cpse r24,__zero_reg__
  45 0018 00C0      		rjmp .L6
  46 001a 0895      		ret
  47               	.LVL4:
  48               	.L6:
  49               	.LBE2:
 139:ConfigDescriptor.c **** 		{
 140:ConfigDescriptor.c **** 			return DESCRIPTOR_SEARCH_Found;
 141:ConfigDescriptor.c **** 		}
 142:ConfigDescriptor.c **** 	}
 143:ConfigDescriptor.c **** 
 144:ConfigDescriptor.c **** 	return DESCRIPTOR_SEARCH_NotFound;
  50               		.loc 1 144 0
  51 001c 82E0      		ldi r24,lo8(2)
 145:ConfigDescriptor.c **** }
  52               		.loc 1 145 0
  53 001e 0895      		ret
  54               		.cfi_endproc
  55               	.LFE152:
  57               		.section	.text.DComp_NextMIDIStreamingDataEndpoint,"ax",@progbits
  58               	.global	DComp_NextMIDIStreamingDataEndpoint
  60               	DComp_NextMIDIStreamingDataEndpoint:
  61               	.LFB153:
 146:ConfigDescriptor.c **** 
 147:ConfigDescriptor.c **** /** Descriptor comparator function. This comparator function is can be called while processing an a
 148:ConfigDescriptor.c ****  *  configuration descriptor, to search for a specific sub descriptor. It can also be used to abort
 149:ConfigDescriptor.c ****  *  descriptor processing if an incompatible descriptor configuration is found.
 150:ConfigDescriptor.c ****  *
 151:ConfigDescriptor.c ****  *  This comparator searches for the next bulk IN or OUT endpoint within the current interface, abo
 152:ConfigDescriptor.c ****  *  another interface descriptor is found before the required endpoint.
 153:ConfigDescriptor.c ****  *
 154:ConfigDescriptor.c ****  *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 155:ConfigDescriptor.c ****  */
 156:ConfigDescriptor.c **** uint8_t DComp_NextMIDIStreamingDataEndpoint(void* CurrentDescriptor)
 157:ConfigDescriptor.c **** {
  62               		.loc 1 157 0
  63               		.cfi_startproc
  64               	.LVL5:
  65               	/* prologue: function */
  66               	/* frame size = 0 */
  67               	/* stack size = 0 */
  68               	.L__stack_usage = 0
  69 0000 FC01      		movw r30,r24
  70               	.LVL6:
 158:ConfigDescriptor.c **** 	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);
 159:ConfigDescriptor.c **** 
 160:ConfigDescriptor.c **** 	if (Header->Type == DTYPE_Endpoint)
  71               		.loc 1 160 0
  72 0002 9181      		ldd r25,Z+1
  73 0004 9530      		cpi r25,lo8(5)
  74 0006 01F4      		brne .L9
  75               	.LVL7:
  76               	.LBB3:
 161:ConfigDescriptor.c **** 	{
 162:ConfigDescriptor.c **** 		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint
 163:ConfigDescriptor.c **** 
 164:ConfigDescriptor.c **** 		/* Check the endpoint type, break out if correct BULK type endpoint found */
 165:ConfigDescriptor.c **** 		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
  77               		.loc 1 165 0
  78 0008 8381      		ldd r24,Z+3
  79               	.LVL8:
  80 000a 8370      		andi r24,lo8(3)
  81 000c 8230      		cpi r24,lo8(2)
  82 000e 01F4      		brne .L12
 166:ConfigDescriptor.c **** 		  return DESCRIPTOR_SEARCH_Found;
  83               		.loc 1 166 0
  84 0010 80E0      		ldi r24,0
  85 0012 0895      		ret
  86               	.LVL9:
  87               	.L9:
  88               	.LBE3:
 167:ConfigDescriptor.c **** 	}
 168:ConfigDescriptor.c **** 	else if (Header->Type == DTYPE_Interface)
  89               		.loc 1 168 0
  90 0014 9430      		cpi r25,lo8(4)
  91 0016 01F4      		brne .L12
 169:ConfigDescriptor.c **** 	{
 170:ConfigDescriptor.c **** 		return DESCRIPTOR_SEARCH_Fail;
  92               		.loc 1 170 0
  93 0018 81E0      		ldi r24,lo8(1)
  94               	.LVL10:
  95 001a 0895      		ret
  96               	.L12:
 171:ConfigDescriptor.c **** 	}
 172:ConfigDescriptor.c **** 
 173:ConfigDescriptor.c **** 	return DESCRIPTOR_SEARCH_NotFound;
  97               		.loc 1 173 0
  98 001c 82E0      		ldi r24,lo8(2)
 174:ConfigDescriptor.c **** }
  99               		.loc 1 174 0
 100 001e 0895      		ret
 101               		.cfi_endproc
 102               	.LFE153:
 104               		.section	.text.ProcessConfigurationDescriptor,"ax",@progbits
 105               	.global	ProcessConfigurationDescriptor
 107               	ProcessConfigurationDescriptor:
 108               	.LFB151:
  49:ConfigDescriptor.c **** 	uint8_t  ConfigDescriptorData[512];
 109               		.loc 1 49 0
 110               		.cfi_startproc
 111 0000 AF92      		push r10
 112               	.LCFI0:
 113               		.cfi_def_cfa_offset 3
 114               		.cfi_offset 10, -2
 115 0002 BF92      		push r11
 116               	.LCFI1:
 117               		.cfi_def_cfa_offset 4
 118               		.cfi_offset 11, -3
 119 0004 CF92      		push r12
 120               	.LCFI2:
 121               		.cfi_def_cfa_offset 5
 122               		.cfi_offset 12, -4
 123 0006 DF92      		push r13
 124               	.LCFI3:
 125               		.cfi_def_cfa_offset 6
 126               		.cfi_offset 13, -5
 127 0008 EF92      		push r14
 128               	.LCFI4:
 129               		.cfi_def_cfa_offset 7
 130               		.cfi_offset 14, -6
 131 000a FF92      		push r15
 132               	.LCFI5:
 133               		.cfi_def_cfa_offset 8
 134               		.cfi_offset 15, -7
 135 000c 0F93      		push r16
 136               	.LCFI6:
 137               		.cfi_def_cfa_offset 9
 138               		.cfi_offset 16, -8
 139 000e 1F93      		push r17
 140               	.LCFI7:
 141               		.cfi_def_cfa_offset 10
 142               		.cfi_offset 17, -9
 143 0010 CF93      		push r28
 144               	.LCFI8:
 145               		.cfi_def_cfa_offset 11
 146               		.cfi_offset 28, -10
 147 0012 DF93      		push r29
 148               	.LCFI9:
 149               		.cfi_def_cfa_offset 12
 150               		.cfi_offset 29, -11
 151 0014 CDB7      		in r28,__SP_L__
 152 0016 DEB7      		in r29,__SP_H__
 153               	.LCFI10:
 154               		.cfi_def_cfa_register 28
 155 0018 C450      		subi r28,4
 156 001a D240      		sbci r29,2
 157               	.LCFI11:
 158               		.cfi_def_cfa_offset 528
 159 001c 0FB6      		in __tmp_reg__,__SREG__
 160 001e F894      		cli
 161 0020 DEBF      		out __SP_H__,r29
 162 0022 0FBE      		out __SREG__,__tmp_reg__
 163 0024 CDBF      		out __SP_L__,r28
 164               	/* prologue: function */
 165               	/* frame size = 516 */
 166               	/* stack size = 526 */
 167               	.L__stack_usage = 526
  51:ConfigDescriptor.c **** 	uint16_t CurrConfigBytesRem;
 168               		.loc 1 51 0
 169 0026 AE01      		movw r20,r28
 170 0028 4F5F      		subi r20,-1
 171 002a 5F4F      		sbci r21,-1
 172 002c CD5F      		subi r28,lo8(-515)
 173 002e DD4F      		sbci r29,hi8(-515)
 174 0030 5983      		std Y+1,r21
 175 0032 4883      		st Y,r20
 176 0034 C350      		subi r28,lo8(515)
 177 0036 D240      		sbci r29,hi8(515)
 178               	.LVL11:
  59:ConfigDescriptor.c **** 	{
 179               		.loc 1 59 0
 180 0038 20E0      		ldi r18,0
 181 003a 32E0      		ldi r19,lo8(2)
 182 003c BE01      		movw r22,r28
 183 003e 6F5F      		subi r22,-1
 184 0040 7D4F      		sbci r23,-3
 185 0042 81E0      		ldi r24,lo8(1)
 186 0044 0E94 0000 		call USB_Host_GetDeviceConfigDescriptor
 187               	.LVL12:
 188 0048 8530      		cpi r24,lo8(5)
 189 004a 01F0      		breq .L15
 190 004c 8630      		cpi r24,lo8(6)
 191 004e 01F4      		brne .+2
 192 0050 00C0      		rjmp .L24
 193 0052 8823      		tst r24
 194 0054 01F0      		breq .L17
  68:ConfigDescriptor.c **** 	}
 195               		.loc 1 68 0
 196 0056 FF24      		clr r15
 197 0058 F394      		inc r15
 198 005a 00C0      		rjmp .L16
 199               	.L15:
  66:ConfigDescriptor.c **** 		default:
 200               		.loc 1 66 0
 201 005c 22E0      		ldi r18,lo8(2)
 202 005e F22E      		mov r15,r18
 203 0060 00C0      		rjmp .L16
 204               	.LVL13:
 205               	.L36:
 206               	.LBB4:
  75:ConfigDescriptor.c **** 		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Foun
 207               		.loc 1 75 0 discriminator 1
 208 0062 40E0      		ldi r20,lo8(gs(DComp_NextMIDIStreamingDataEndpoint))
 209 0064 50E0      		ldi r21,hi8(gs(DComp_NextMIDIStreamingDataEndpoint))
 210 0066 BE01      		movw r22,r28
 211 0068 6D5F      		subi r22,-3
 212 006a 7D4F      		sbci r23,-3
 213 006c CE01      		movw r24,r28
 214 006e 8F5F      		subi r24,-1
 215 0070 9D4F      		sbci r25,-3
 216 0072 0E94 0000 		call USB_GetNextDescriptorComp
 217               	.LVL14:
 218 0076 F82E      		mov r15,r24
  74:ConfigDescriptor.c **** 		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
 219               		.loc 1 74 0 discriminator 1
 220 0078 8111      		cpse r24,__zero_reg__
 221 007a 00C0      		rjmp .L17
  98:ConfigDescriptor.c **** 
 222               		.loc 1 98 0
 223 007c CD5F      		subi r28,lo8(-515)
 224 007e DD4F      		sbci r29,hi8(-515)
 225 0080 E881      		ld r30,Y
 226 0082 F981      		ldd r31,Y+1
 227 0084 C350      		subi r28,lo8(515)
 228 0086 D240      		sbci r29,hi8(515)
 229               	.LVL15:
 101:ConfigDescriptor.c **** 		  DataINEndpoint  = EndpointData;
 230               		.loc 1 101 0
 231 0088 8281      		ldd r24,Z+2
 232 008a 87FD      		sbrc r24,7
 233 008c 00C0      		rjmp .L22
 104:ConfigDescriptor.c **** 	}
 234               		.loc 1 104 0
 235 008e 6F01      		movw r12,r30
 101:ConfigDescriptor.c **** 		  DataINEndpoint  = EndpointData;
 236               		.loc 1 101 0
 237 0090 F801      		movw r30,r16
 238               	.LVL16:
 239               	.L22:
 240               	.LBE4:
  71:ConfigDescriptor.c **** 	{
 241               		.loc 1 71 0
 242 0092 3097      		sbiw r30,0
 243 0094 01F4      		brne .L35
 244               	.L23:
  49:ConfigDescriptor.c **** 	uint8_t  ConfigDescriptorData[512];
 245               		.loc 1 49 0
 246 0096 8F01      		movw r16,r30
 247               	.LVL17:
 248               	.L21:
 249               	.LBB5:
  74:ConfigDescriptor.c **** 		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
 250               		.loc 1 74 0
 251 0098 A114      		cp r10,__zero_reg__
 252 009a B104      		cpc r11,__zero_reg__
 253 009c 01F4      		brne .L36
 254               	.LVL18:
 255               	.L17:
  79:ConfigDescriptor.c **** 										  DComp_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
 256               		.loc 1 79 0
 257 009e 40E0      		ldi r20,lo8(gs(DComp_NextMIDIStreamingInterface))
 258 00a0 50E0      		ldi r21,hi8(gs(DComp_NextMIDIStreamingInterface))
 259 00a2 BE01      		movw r22,r28
 260 00a4 6D5F      		subi r22,-3
 261 00a6 7D4F      		sbci r23,-3
 262 00a8 CE01      		movw r24,r28
 263 00aa 8F5F      		subi r24,-1
 264 00ac 9D4F      		sbci r25,-3
 265 00ae 0E94 0000 		call USB_GetNextDescriptorComp
 266               	.LVL19:
 267 00b2 8111      		cpse r24,__zero_reg__
 268 00b4 00C0      		rjmp .L25
  87:ConfigDescriptor.c **** 
 269               		.loc 1 87 0
 270 00b6 CD5F      		subi r28,lo8(-515)
 271 00b8 DD4F      		sbci r29,hi8(-515)
 272 00ba A880      		ld r10,Y
 273 00bc B980      		ldd r11,Y+1
 274 00be C350      		subi r28,lo8(515)
 275 00c0 D240      		sbci r29,hi8(515)
 276               	.LVL20:
  90:ConfigDescriptor.c **** 			DataOUTEndpoint = NULL;
 277               		.loc 1 90 0
 278 00c2 00E0      		ldi r16,0
 279 00c4 10E0      		ldi r17,0
  91:ConfigDescriptor.c **** 
 280               		.loc 1 91 0
 281 00c6 C12C      		mov r12,__zero_reg__
 282 00c8 D12C      		mov r13,__zero_reg__
 283 00ca 00C0      		rjmp .L21
 284               	.LVL21:
 285               	.L35:
 286               	.LBE5:
  71:ConfigDescriptor.c **** 	{
 287               		.loc 1 71 0 discriminator 1
 288 00cc C114      		cp r12,__zero_reg__
 289 00ce D104      		cpc r13,__zero_reg__
 290 00d0 01F0      		breq .L23
 108:ConfigDescriptor.c **** 	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE
 291               		.loc 1 108 0
 292 00d2 0481      		ldd r16,Z+4
 293 00d4 1581      		ldd r17,Z+5
 294 00d6 E12C      		mov r14,__zero_reg__
 295 00d8 2281      		ldd r18,Z+2
 296 00da 40E1      		ldi r20,lo8(16)
 297 00dc 62E0      		ldi r22,lo8(2)
 298 00de 81E0      		ldi r24,lo8(1)
 299 00e0 0E94 0000 		call Pipe_ConfigurePipe
 300               	.LVL22:
 112:ConfigDescriptor.c **** 					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);
 301               		.loc 1 112 0
 302 00e4 F601      		movw r30,r12
 303 00e6 0481      		ldd r16,Z+4
 304 00e8 1581      		ldd r17,Z+5
 305 00ea 2281      		ldd r18,Z+2
 306 00ec 40E2      		ldi r20,lo8(32)
 307 00ee 62E0      		ldi r22,lo8(2)
 308 00f0 82E0      		ldi r24,lo8(2)
 309 00f2 0E94 0000 		call Pipe_ConfigurePipe
 310               	.LVL23:
 116:ConfigDescriptor.c **** }
 311               		.loc 1 116 0
 312 00f6 00C0      		rjmp .L16
 313               	.LVL24:
 314               	.L24:
  64:ConfigDescriptor.c **** 		case HOST_GETCONFIG_BuffOverflow:
 315               		.loc 1 64 0
 316 00f8 93E0      		ldi r25,lo8(3)
 317 00fa F92E      		mov r15,r25
 318 00fc 00C0      		rjmp .L16
 319               	.LVL25:
 320               	.L25:
 321               	.LBB6:
  83:ConfigDescriptor.c **** 			}
 322               		.loc 1 83 0
 323 00fe 84E0      		ldi r24,lo8(4)
 324 0100 F82E      		mov r15,r24
 325               	.L16:
 326               	.LBE6:
 117:ConfigDescriptor.c **** 
 327               		.loc 1 117 0
 328 0102 8F2D      		mov r24,r15
 329               	/* epilogue start */
 330 0104 CC5F      		subi r28,-4
 331 0106 DD4F      		sbci r29,-3
 332 0108 0FB6      		in __tmp_reg__,__SREG__
 333 010a F894      		cli
 334 010c DEBF      		out __SP_H__,r29
 335 010e 0FBE      		out __SREG__,__tmp_reg__
 336 0110 CDBF      		out __SP_L__,r28
 337 0112 DF91      		pop r29
 338 0114 CF91      		pop r28
 339 0116 1F91      		pop r17
 340 0118 0F91      		pop r16
 341 011a FF90      		pop r15
 342 011c EF90      		pop r14
 343 011e DF90      		pop r13
 344 0120 CF90      		pop r12
 345 0122 BF90      		pop r11
 346 0124 AF90      		pop r10
 347 0126 0895      		ret
 348               		.cfi_endproc
 349               	.LFE151:
 351               		.text
 352               	.Letext0:
 353               		.file 2 "/usr/lib/avr/include/stdint.h"
 354               		.file 3 "../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/../StdDescriptors.h"
 355               		.file 4 "../../../../LUFA/Drivers/USB/Core/ConfigDescriptor.h"
 356               		.file 5 "../../../../LUFA/Drivers/USB/Class/Host/../Common/Audio.h"
 357               		.file 6 "/usr/lib/avr/include/stdio.h"
 358               		.file 7 "ConfigDescriptor.h"
 359               		.file 8 "../../../../LUFA/Drivers/USB/Core/USBTask.h"
 360               		.file 9 "../../../../LUFA/Drivers/Peripheral/AVR8/Serial_AVR8.h"
 361               		.file 10 "../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/../AVR8/Pipe_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ConfigDescriptor.c
     /tmp/cchCM47Q.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cchCM47Q.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cchCM47Q.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cchCM47Q.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cchCM47Q.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cchCM47Q.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cchCM47Q.s:14     .text.DComp_NextMIDIStreamingInterface:0000000000000000 DComp_NextMIDIStreamingInterface
     /tmp/cchCM47Q.s:60     .text.DComp_NextMIDIStreamingDataEndpoint:0000000000000000 DComp_NextMIDIStreamingDataEndpoint
     /tmp/cchCM47Q.s:107    .text.ProcessConfigurationDescriptor:0000000000000000 ProcessConfigurationDescriptor

UNDEFINED SYMBOLS
USB_Host_GetDeviceConfigDescriptor
USB_GetNextDescriptorComp
Pipe_ConfigurePipe
