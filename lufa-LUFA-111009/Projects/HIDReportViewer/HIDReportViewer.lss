
HIDReportViewer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002608  0000269c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800134  00800134  000026d0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006510  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023b9  00000000  00000000  00008f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e30  00000000  00000000  0000b305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  0000e138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a7b  00000000  00000000  0000eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038d9  00000000  00000000  000115c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00014ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a0 c2       	rjmp	.+1344   	; 0x542 <__ctors_end>
       2:	00 00       	nop
       4:	bc c2       	rjmp	.+1400   	; 0x57e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c2       	rjmp	.+1396   	; 0x57e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c2       	rjmp	.+1392   	; 0x57e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c2       	rjmp	.+1388   	; 0x57e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c2       	rjmp	.+1384   	; 0x57e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c2       	rjmp	.+1380   	; 0x57e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c2       	rjmp	.+1376   	; 0x57e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c2       	rjmp	.+1372   	; 0x57e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c2       	rjmp	.+1368   	; 0x57e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__vector_10>
      2c:	a8 c2       	rjmp	.+1360   	; 0x57e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c2       	rjmp	.+1356   	; 0x57e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c2       	rjmp	.+1352   	; 0x57e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c2       	rjmp	.+1348   	; 0x57e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c2       	rjmp	.+1344   	; 0x57e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c2       	rjmp	.+1340   	; 0x57e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c2       	rjmp	.+1336   	; 0x57e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c2       	rjmp	.+1332   	; 0x57e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c2       	rjmp	.+1328   	; 0x57e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c2       	rjmp	.+1324   	; 0x57e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c2       	rjmp	.+1320   	; 0x57e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c2       	rjmp	.+1316   	; 0x57e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c2       	rjmp	.+1312   	; 0x57e <__bad_interrupt>
      5e:	00 00       	nop
      60:	8e c2       	rjmp	.+1308   	; 0x57e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c2       	rjmp	.+1304   	; 0x57e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c2       	rjmp	.+1300   	; 0x57e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c2       	rjmp	.+1296   	; 0x57e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c2       	rjmp	.+1292   	; 0x57e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c2       	rjmp	.+1288   	; 0x57e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c2       	rjmp	.+1284   	; 0x57e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c2       	rjmp	.+1280   	; 0x57e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c2       	rjmp	.+1276   	; 0x57e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c2       	rjmp	.+1272   	; 0x57e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c2       	rjmp	.+1268   	; 0x57e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c2       	rjmp	.+1264   	; 0x57e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c2       	rjmp	.+1260   	; 0x57e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c2       	rjmp	.+1256   	; 0x57e <__bad_interrupt>
      96:	00 00       	nop
      98:	23 06       	cpc	r2, r19
      9a:	14 07       	cpc	r17, r20
      9c:	41 06       	cpc	r4, r17
      9e:	4b 06       	cpc	r4, r27
      a0:	76 06       	cpc	r7, r22
      a2:	9e 06       	cpc	r9, r30
      a4:	a9 06       	cpc	r10, r25
      a6:	ba 06       	cpc	r11, r26
      a8:	d6 06       	cpc	r13, r22
      aa:	fd 06       	cpc	r15, r29

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4552>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4547>:
     131:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
     141:	72 61 74 65 64 2e 0d 0a 00                          rated....

0000014a <__c.4545>:
     14a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     15a:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     16a:	64 65 2e 0d 0a 00                                   de....

00000170 <__c.4543>:
     170:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     180:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     190:	6f 6e 2e 0d 0a 00                                   on....

00000196 <__c.4541>:
     196:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a6:	4e 6f 74 20 61 20 56 61 6c 69 64 20 48 49 44 20     Not a Valid HID 
     1b6:	44 65 76 69 63 65 2e 0d 0a 00                       Device....

000001c0 <__c.4539>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4532>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4527>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4519>:
     217:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 45           |..      E
     227:	4e 44 0d 0a 00                                      ND...

0000022c <__c.4514>:
     22c:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 2d           |..      -
     23c:	20 54 79 70 65 3a 20 20 30 78 25 30 32 58 0d 0a      Type:  0x%02X..
     24c:	20 20 20 20 20 20 2d 20 55 73 61 67 65 3a 20 30           - Usage: 0
     25c:	78 25 30 32 58 0d 0a 00                             x%02X...

00000264 <__c.4505>:
     264:	20 20 2b 20 49 74 65 6d 20 25 64 3a 0d 0a 20 20       + Item %d:..  
     274:	20 20 2d 20 52 65 70 6f 72 74 20 49 44 3a 20 20       - Report ID:  
     284:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     294:	20 20 20 20 2d 20 44 61 74 61 20 44 69 72 65 63         - Data Direc
     2a4:	74 69 6f 6e 3a 20 20 20 20 20 25 73 0d 0a 20 20     tion:     %s..  
     2b4:	20 20 2d 20 49 74 65 6d 20 46 6c 61 67 73 3a 20       - Item Flags: 
     2c4:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     2d4:	20 20 20 20 2d 20 49 74 65 6d 20 4f 66 66 73 65         - Item Offse
     2e4:	74 20 28 42 69 74 73 29 3a 20 30 78 25 30 32 58     t (Bits): 0x%02X
     2f4:	0d 0a 20 20 20 20 2d 20 49 74 65 6d 20 53 69 7a     ..    - Item Siz
     304:	65 20 28 42 69 74 73 29 3a 20 20 20 30 78 25 30     e (Bits):   0x%0
     314:	32 58 0d 0a 20 20 20 20 2d 20 55 73 61 67 65 20     2X..    - Usage 
     324:	50 61 67 65 3a 20 20 20 20 20 20 20 20 20 30 78     Page:         0x
     334:	25 30 34 58 0d 0a 20 20 20 20 2d 20 55 73 61 67     %04X..    - Usag
     344:	65 3a 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e:              
     354:	30 78 25 30 34 58 0d 0a 20 20 20 20 2d 20 55 6e     0x%04X..    - Un
     364:	69 74 20 54 79 70 65 3a 20 20 20 20 20 20 20 20     it Type:        
     374:	20 20 30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d       0x%08lX..    -
     384:	20 55 6e 69 74 20 45 78 70 6f 6e 65 6e 74 3a 20      Unit Exponent: 
     394:	20 20 20 20 20 30 78 25 30 32 58 0d 0a 20 20 20          0x%02X..   
     3a4:	20 2d 20 4c 6f 67 69 63 61 6c 20 4d 69 6e 69 6d      - Logical Minim
     3b4:	75 6d 3a 20 20 20 20 30 78 25 30 38 6c 58 0d 0a     um:    0x%08lX..
     3c4:	20 20 20 20 2d 20 4c 6f 67 69 63 61 6c 20 4d 61         - Logical Ma
     3d4:	78 69 6d 75 6d 3a 20 20 20 20 30 78 25 30 38 6c     ximum:    0x%08l
     3e4:	58 0d 0a 20 20 20 20 2d 20 50 68 79 73 69 63 61     X..    - Physica
     3f4:	6c 20 4d 69 6e 69 6d 75 6d 3a 20 20 20 30 78 25     l Minimum:   0x%
     404:	30 38 6c 58 0d 0a 20 20 20 20 2d 20 50 68 79 73     08lX..    - Phys
     414:	69 63 61 6c 20 4d 61 78 69 6d 75 6d 3a 20 20 20     ical Maximum:   
     424:	30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d 20 43     0x%08lX..    - C
     434:	6f 6c 6c 65 63 74 69 6f 6e 20 50 61 74 68 3a 0d     ollection Path:.
     444:	0a 00                                               ..

00000446 <__c.4501>:
     446:	0d 0a 52 65 70 6f 72 74 20 49 74 65 6d 73 20 28     ..Report Items (
     456:	25 64 20 69 6e 20 54 61 62 6c 65 29 3a 0d 0a 00     %d in Table):...

00000466 <__c.4493>:
     466:	20 20 2b 20 52 65 70 6f 72 74 20 49 44 20 30 78       + Report ID 0x
     476:	25 30 32 58 0d 0a 20 20 20 20 2d 20 49 6e 70 75     %02X..    - Inpu
     486:	74 20 44 61 74 61 3a 20 20 20 25 64 20 62 69 74     t Data:   %d bit
     496:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 20 20     s (%d bytes)..  
     4a6:	20 20 2d 20 4f 75 74 70 75 74 20 44 61 74 61 3a       - Output Data:
     4b6:	20 20 25 64 20 62 69 74 73 20 28 25 64 20 62 79       %d bits (%d by
     4c6:	74 65 73 29 0d 0a 20 20 20 20 2d 20 46 65 61 74     tes)..    - Feat
     4d6:	75 72 65 20 44 61 74 61 3a 20 25 64 20 62 69 74     ure Data: %d bit
     4e6:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 00        s (%d bytes)...

000004f5 <__c.4486>:
     4f5:	0d 0a 0d 0a 54 6f 74 61 6c 20 44 65 76 69 63 65     ....Total Device
     505:	20 52 65 70 6f 72 74 73 3a 20 25 64 0d 0a 00         Reports: %d...

00000514 <__c.4477>:
     514:	1b 5b 33 36 6d 48 49 44 20 44 65 76 69 63 65 20     .[36mHID Device 
     524:	52 65 70 6f 72 74 20 56 69 65 77 65 72 20 52 75     Report Viewer Ru
     534:	6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00           nning....[37m.

00000542 <__ctors_end>:
     542:	11 24       	eor	r1, r1
     544:	1f be       	out	0x3f, r1	; 63
     546:	cf ef       	ldi	r28, 0xFF	; 255
     548:	d0 e2       	ldi	r29, 0x20	; 32
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	cd bf       	out	0x3d, r28	; 61

0000054e <__do_copy_data>:
     54e:	11 e0       	ldi	r17, 0x01	; 1
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b1 e0       	ldi	r27, 0x01	; 1
     554:	e8 e0       	ldi	r30, 0x08	; 8
     556:	f6 e2       	ldi	r31, 0x26	; 38
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	0b bf       	out	0x3b, r16	; 59
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__do_copy_data+0x14>
     55e:	07 90       	elpm	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	a4 33       	cpi	r26, 0x34	; 52
     564:	b1 07       	cpc	r27, r17
     566:	d9 f7       	brne	.-10     	; 0x55e <__do_copy_data+0x10>

00000568 <__do_clear_bss>:
     568:	25 e0       	ldi	r18, 0x05	; 5
     56a:	a4 e3       	ldi	r26, 0x34	; 52
     56c:	b1 e0       	ldi	r27, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <.do_clear_bss_start>

00000570 <.do_clear_bss_loop>:
     570:	1d 92       	st	X+, r1

00000572 <.do_clear_bss_start>:
     572:	af 32       	cpi	r26, 0x2F	; 47
     574:	b2 07       	cpc	r27, r18
     576:	e1 f7       	brne	.-8      	; 0x570 <.do_clear_bss_loop>
     578:	15 d2       	rcall	.+1066   	; 0x9a4 <main>
     57a:	0c 94 02 13 	jmp	0x2604	; 0x2604 <_exit>

0000057e <__bad_interrupt>:
     57e:	40 cd       	rjmp	.-1408   	; 0x0 <__vectors>

00000580 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     580:	9b b1       	in	r25, 0x0b	; 11
     582:	9f 70       	andi	r25, 0x0F	; 15
     584:	89 2b       	or	r24, r25
     586:	8b b9       	out	0x0b, r24	; 11
     588:	08 95       	ret

0000058a <OutputReportSizes>:

/** Prints a summary of the device's HID report sizes from the HID parser output to the serial port
 *  for display to the user.
 */
void OutputReportSizes(void)
{
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);
     59e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__data_end+0x38f>
     5a2:	1f 92       	push	r1
     5a4:	8f 93       	push	r24
     5a6:	85 ef       	ldi	r24, 0xF5	; 245
     5a8:	94 e0       	ldi	r25, 0x04	; 4
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	c0 e0       	ldi	r28, 0x00	; 0
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];

		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     5bc:	d7 e0       	ldi	r29, 0x07	; 7
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     5be:	86 e6       	ldi	r24, 0x66	; 102
     5c0:	a8 2e       	mov	r10, r24
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	b8 2e       	mov	r11, r24
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5c6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__data_end+0x38f>
     5ca:	c8 17       	cp	r28, r24
     5cc:	08 f0       	brcs	.+2      	; 0x5d0 <OutputReportSizes+0x46>
     5ce:	69 c0       	rjmp	.+210    	; 0x6a2 <OutputReportSizes+0x118>
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     5d0:	0c 2f       	mov	r16, r28
     5d2:	10 e0       	ldi	r17, 0x00	; 0

		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     5d4:	d0 9f       	mul	r29, r16
     5d6:	c0 01       	movw	r24, r0
     5d8:	d1 9f       	mul	r29, r17
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	8c 5c       	subi	r24, 0xCC	; 204
     5e0:	9e 4f       	sbci	r25, 0xFE	; 254
     5e2:	fc 01       	movw	r30, r24
     5e4:	ef 56       	subi	r30, 0x6F	; 111
     5e6:	fc 4f       	sbci	r31, 0xFC	; 252
     5e8:	40 81       	ld	r20, Z
     5ea:	51 81       	ldd	r21, Z+1	; 0x01
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
     5ec:	32 96       	adiw	r30, 0x02	; 2
     5ee:	60 81       	ld	r22, Z
     5f0:	71 81       	ldd	r23, Z+1	; 0x01
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];
     5f2:	32 96       	adiw	r30, 0x02	; 2
     5f4:	20 81       	ld	r18, Z
     5f6:	31 81       	ldd	r19, Z+1	; 0x01
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
     5f8:	79 01       	movw	r14, r18
     5fa:	ff 24       	eor	r15, r15
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
     5fc:	db 01       	movw	r26, r22
     5fe:	bb 27       	eor	r27, r27
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
     600:	fa 01       	movw	r30, r20
     602:	ff 27       	eor	r31, r31
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     604:	69 01       	movw	r12, r18
     606:	87 e0       	ldi	r24, 0x07	; 7
     608:	c8 22       	and	r12, r24
     60a:	dd 24       	eor	r13, r13
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	cd 28       	or	r12, r13
     612:	11 f4       	brne	.+4      	; 0x618 <OutputReportSizes+0x8e>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	26 95       	lsr	r18
     61a:	26 95       	lsr	r18
     61c:	26 95       	lsr	r18
     61e:	82 0f       	add	r24, r18
     620:	91 1d       	adc	r25, r1
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	ff 92       	push	r15
     628:	ef 92       	push	r14
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	9d 01       	movw	r18, r26
     630:	27 70       	andi	r18, 0x07	; 7
     632:	33 27       	eor	r19, r19
     634:	23 2b       	or	r18, r19
     636:	11 f4       	brne	.+4      	; 0x63c <OutputReportSizes+0xb2>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	66 95       	lsr	r22
     63e:	66 95       	lsr	r22
     640:	66 95       	lsr	r22
     642:	86 0f       	add	r24, r22
     644:	91 1d       	adc	r25, r1
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	bf 93       	push	r27
     64c:	af 93       	push	r26
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9f 01       	movw	r18, r30
     654:	27 70       	andi	r18, 0x07	; 7
     656:	33 27       	eor	r19, r19
     658:	23 2b       	or	r18, r19
     65a:	11 f4       	brne	.+4      	; 0x660 <OutputReportSizes+0xd6>
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	46 95       	lsr	r20
     662:	46 95       	lsr	r20
     664:	46 95       	lsr	r20
     666:	84 0f       	add	r24, r20
     668:	91 1d       	adc	r25, r1
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	ff 93       	push	r31
     670:	ef 93       	push	r30
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
     672:	d0 9f       	mul	r29, r16
     674:	f0 01       	movw	r30, r0
     676:	d1 9f       	mul	r29, r17
     678:	f0 0d       	add	r31, r0
     67a:	11 24       	eor	r1, r1
     67c:	ec 53       	subi	r30, 0x3C	; 60
     67e:	fb 4f       	sbci	r31, 0xFB	; 251
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     680:	80 81       	ld	r24, Z
     682:	1f 92       	push	r1
     684:	8f 93       	push	r24
     686:	bf 92       	push	r11
     688:	af 92       	push	r10
     68a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     68e:	cf 5f       	subi	r28, 0xFF	; 255
     690:	8d b7       	in	r24, 0x3d	; 61
     692:	9e b7       	in	r25, 0x3e	; 62
     694:	40 96       	adiw	r24, 0x10	; 16
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	9e bf       	out	0x3e, r25	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	8d bf       	out	0x3d, r24	; 61
     6a0:	92 cf       	rjmp	.-220    	; 0x5c6 <OutputReportSizes+0x3c>
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
	}
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	08 95       	ret

000006b8 <OutputCollectionPath>:
 *  for display to the user, from the given starting node to the root node.
 *
 *  \param[in] CollectionPath  Starting HID Collection node to print
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
	{
		printf_P(PSTR("      |\r\n"
     6c2:	0c e2       	ldi	r16, 0x2C	; 44
     6c4:	12 e0       	ldi	r17, 0x02	; 2
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     6c6:	20 97       	sbiw	r28, 0x00	; 0
     6c8:	d9 f0       	breq	.+54     	; 0x700 <OutputCollectionPath+0x48>
	{
		printf_P(PSTR("      |\r\n"
     6ca:	8c 81       	ldd	r24, Y+4	; 0x04
     6cc:	8f 93       	push	r24
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	8f 93       	push	r24
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	8f 93       	push	r24
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	8f 93       	push	r24
     6da:	88 81       	ld	r24, Y
     6dc:	1f 92       	push	r1
     6de:	8f 93       	push	r24
     6e0:	1f 93       	push	r17
     6e2:	0f 93       	push	r16
     6e4:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>
					  "      - Type:  0x%02" PRIX8 "\r\n"
					  "      - Usage: 0x%02" PRIX8 "\r\n"),
					  CurrentNode->Type, CurrentNode->Usage);
		
		CurrentNode = CurrentNode->Parent;
     6e8:	0d 80       	ldd	r0, Y+5	; 0x05
     6ea:	de 81       	ldd	r29, Y+6	; 0x06
     6ec:	c0 2d       	mov	r28, r0
     6ee:	8d b7       	in	r24, 0x3d	; 61
     6f0:	9e b7       	in	r25, 0x3e	; 62
     6f2:	08 96       	adiw	r24, 0x08	; 8
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	9e bf       	out	0x3e, r25	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	8d bf       	out	0x3d, r24	; 61
     6fe:	e3 cf       	rjmp	.-58     	; 0x6c6 <OutputCollectionPath+0xe>
	}
	
	printf_P(PSTR("      |\r\n"
     700:	87 e1       	ldi	r24, 0x17	; 23
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>
				  "      END\r\n"));
}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <OutputParsedReportItems>:

/** Prints a summary of the device's parsed and stored report items along with their attributes
 *  to the serial port for display to the user.
 */
void OutputParsedReportItems(void)
{
     71a:	2f 92       	push	r2
     71c:	3f 92       	push	r3
     71e:	4f 92       	push	r4
     720:	5f 92       	push	r5
     722:	6f 92       	push	r6
     724:	7f 92       	push	r7
     726:	8f 92       	push	r8
     728:	9f 92       	push	r9
     72a:	af 92       	push	r10
     72c:	bf 92       	push	r11
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	29 97       	sbiw	r28, 0x09	; 9
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);
     74e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     752:	1f 92       	push	r1
     754:	8f 93       	push	r24
     756:	86 e4       	ldi	r24, 0x46	; 70
     758:	94 e0       	ldi	r25, 0x04	; 4
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	19 86       	std	Y+9, r1	; 0x09
     76c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     770:	29 85       	ldd	r18, Y+9	; 0x09
     772:	28 17       	cp	r18, r24
     774:	08 f0       	brcs	.+2      	; 0x778 <OutputParsedReportItems+0x5e>
     776:	ac c0       	rjmp	.+344    	; 0x8d0 <OutputParsedReportItems+0x1b6>
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     778:	29 85       	ldd	r18, Y+9	; 0x09
     77a:	82 2f       	mov	r24, r18
     77c:	90 e0       	ldi	r25, 0x00	; 0

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     77e:	2a e2       	ldi	r18, 0x2A	; 42
     780:	28 9f       	mul	r18, r24
     782:	f0 01       	movw	r30, r0
     784:	29 9f       	mul	r18, r25
     786:	f0 0d       	add	r31, r0
     788:	11 24       	eor	r1, r1
     78a:	ec 5c       	subi	r30, 0xCC	; 204
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	df 01       	movw	r26, r30
     790:	5f 96       	adiw	r26, 0x1f	; 31
     792:	97 8c       	ldd	r9, Z+31	; 0x1f
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	8c 90       	ld	r8, X
     798:	11 97       	sbiw	r26, 0x01	; 1
     79a:	12 96       	adiw	r26, 0x02	; 2
     79c:	7c 90       	ld	r7, X
     79e:	12 97       	sbiw	r26, 0x02	; 2
     7a0:	13 96       	adiw	r26, 0x03	; 3
     7a2:	6c 90       	ld	r6, X
     7a4:	13 97       	sbiw	r26, 0x03	; 3
     7a6:	14 97       	sbiw	r26, 0x04	; 4
     7a8:	d3 8c       	ldd	r13, Z+27	; 0x1b
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	cc 90       	ld	r12, X
     7ae:	11 97       	sbiw	r26, 0x01	; 1
     7b0:	12 96       	adiw	r26, 0x02	; 2
     7b2:	bc 90       	ld	r11, X
     7b4:	12 97       	sbiw	r26, 0x02	; 2
     7b6:	13 96       	adiw	r26, 0x03	; 3
     7b8:	ac 90       	ld	r10, X
     7ba:	13 97       	sbiw	r26, 0x03	; 3
     7bc:	14 97       	sbiw	r26, 0x04	; 4
     7be:	07 89       	ldd	r16, Z+23	; 0x17
     7c0:	11 96       	adiw	r26, 0x01	; 1
     7c2:	fc 90       	ld	r15, X
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	ec 90       	ld	r14, X
     7ca:	12 97       	sbiw	r26, 0x02	; 2
     7cc:	13 96       	adiw	r26, 0x03	; 3
     7ce:	4c 90       	ld	r4, X
     7d0:	13 97       	sbiw	r26, 0x03	; 3
     7d2:	14 97       	sbiw	r26, 0x04	; 4
     7d4:	23 89       	ldd	r18, Z+19	; 0x13
     7d6:	2a 83       	std	Y+2, r18	; 0x02
     7d8:	11 96       	adiw	r26, 0x01	; 1
     7da:	1c 91       	ld	r17, X
     7dc:	11 97       	sbiw	r26, 0x01	; 1
     7de:	12 96       	adiw	r26, 0x02	; 2
     7e0:	5c 90       	ld	r5, X
     7e2:	12 97       	sbiw	r26, 0x02	; 2
     7e4:	13 96       	adiw	r26, 0x03	; 3
     7e6:	3c 90       	ld	r3, X
     7e8:	13 97       	sbiw	r26, 0x03	; 3
     7ea:	22 89       	ldd	r18, Z+18	; 0x12
     7ec:	29 83       	std	Y+1, r18	; 0x01
     7ee:	15 97       	sbiw	r26, 0x05	; 5
     7f0:	26 85       	ldd	r18, Z+14	; 0x0e
     7f2:	2b 83       	std	Y+3, r18	; 0x03
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	2c 91       	ld	r18, X
     7f8:	11 97       	sbiw	r26, 0x01	; 1
     7fa:	2c 83       	std	Y+4, r18	; 0x04
     7fc:	12 96       	adiw	r26, 0x02	; 2
     7fe:	2c 91       	ld	r18, X
     800:	12 97       	sbiw	r26, 0x02	; 2
     802:	2d 83       	std	Y+5, r18	; 0x05
     804:	13 96       	adiw	r26, 0x03	; 3
     806:	2c 91       	ld	r18, X
     808:	2e 83       	std	Y+6, r18	; 0x06
     80a:	24 85       	ldd	r18, Z+12	; 0x0c
     80c:	2f 83       	std	Y+7, r18	; 0x07
     80e:	25 85       	ldd	r18, Z+13	; 0x0d
     810:	28 87       	std	Y+8, r18	; 0x08
     812:	b2 85       	ldd	r27, Z+10	; 0x0a
     814:	23 84       	ldd	r2, Z+11	; 0x0b
     816:	a1 85       	ldd	r26, Z+9	; 0x09
     818:	61 81       	ldd	r22, Z+1	; 0x01
     81a:	72 81       	ldd	r23, Z+2	; 0x02
     81c:	44 81       	ldd	r20, Z+4	; 0x04
     81e:	55 81       	ldd	r21, Z+5	; 0x05
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     820:	23 81       	ldd	r18, Z+3	; 0x03

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     822:	22 23       	and	r18, r18
     824:	29 f0       	breq	.+10     	; 0x830 <OutputParsedReportItems+0x116>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     826:	21 30       	cpi	r18, 0x01	; 1
     828:	31 f0       	breq	.+12     	; 0x836 <OutputParsedReportItems+0x11c>
     82a:	24 e2       	ldi	r18, 0x24	; 36
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	05 c0       	rjmp	.+10     	; 0x83a <OutputParsedReportItems+0x120>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     830:	2c e2       	ldi	r18, 0x2C	; 44
     832:	31 e0       	ldi	r19, 0x01	; 1
     834:	02 c0       	rjmp	.+4      	; 0x83a <OutputParsedReportItems+0x120>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     836:	2f e2       	ldi	r18, 0x2F	; 47
     838:	31 e0       	ldi	r19, 0x01	; 1

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     83a:	6f 92       	push	r6
     83c:	7f 92       	push	r7
     83e:	8f 92       	push	r8
     840:	9f 92       	push	r9
     842:	af 92       	push	r10
     844:	bf 92       	push	r11
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	4f 92       	push	r4
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	3f 92       	push	r3
     854:	5f 92       	push	r5
     856:	1f 93       	push	r17
     858:	ea 81       	ldd	r30, Y+2	; 0x02
     85a:	ef 93       	push	r30
     85c:	1f 92       	push	r1
     85e:	f9 81       	ldd	r31, Y+1	; 0x01
     860:	ff 93       	push	r31
     862:	ee 81       	ldd	r30, Y+6	; 0x06
     864:	ef 93       	push	r30
     866:	fd 81       	ldd	r31, Y+5	; 0x05
     868:	ff 93       	push	r31
     86a:	ec 81       	ldd	r30, Y+4	; 0x04
     86c:	ef 93       	push	r30
     86e:	fb 81       	ldd	r31, Y+3	; 0x03
     870:	ff 93       	push	r31
     872:	e8 85       	ldd	r30, Y+8	; 0x08
     874:	ef 93       	push	r30
     876:	ff 81       	ldd	r31, Y+7	; 0x07
     878:	ff 93       	push	r31
     87a:	2f 92       	push	r2
     87c:	bf 93       	push	r27
     87e:	1f 92       	push	r1
     880:	af 93       	push	r26
     882:	7f 93       	push	r23
     884:	6f 93       	push	r22
     886:	5f 93       	push	r21
     888:	4f 93       	push	r20
     88a:	3f 93       	push	r19
     88c:	2f 93       	push	r18
					  "    - Logical Maximum:    0x%08" PRIX32 "\r\n"
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
     88e:	2a e2       	ldi	r18, 0x2A	; 42
     890:	28 9f       	mul	r18, r24
     892:	80 01       	movw	r16, r0
     894:	29 9f       	mul	r18, r25
     896:	10 0d       	add	r17, r0
     898:	11 24       	eor	r1, r1
     89a:	0c 5c       	subi	r16, 0xCC	; 204
     89c:	1e 4f       	sbci	r17, 0xFE	; 254

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     89e:	f8 01       	movw	r30, r16
     8a0:	26 81       	ldd	r18, Z+6	; 0x06
     8a2:	1f 92       	push	r1
     8a4:	2f 93       	push	r18
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	84 e6       	ldi	r24, 0x64	; 100
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>
				 RItem->Attributes.Logical.Minimum,
				 RItem->Attributes.Logical.Maximum,
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);
		
		OutputCollectionPath(RItem->CollectionPath);
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	f8 01       	movw	r30, r16
     8c2:	87 81       	ldd	r24, Z+7	; 0x07
     8c4:	90 85       	ldd	r25, Z+8	; 0x08
     8c6:	f8 de       	rcall	.-528    	; 0x6b8 <OutputCollectionPath>
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     8c8:	f9 85       	ldd	r31, Y+9	; 0x09
     8ca:	ff 5f       	subi	r31, 0xFF	; 255
     8cc:	f9 87       	std	Y+9, r31	; 0x09
     8ce:	4e cf       	rjmp	.-356    	; 0x76c <OutputParsedReportItems+0x52>
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);
		
		OutputCollectionPath(RItem->CollectionPath);
	}
}
     8d0:	29 96       	adiw	r28, 0x09	; 9
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	7f 90       	pop	r7
     8f6:	6f 90       	pop	r6
     8f8:	5f 90       	pop	r5
     8fa:	4f 90       	pop	r4
     8fc:	3f 90       	pop	r3
     8fe:	2f 90       	pop	r2
     900:	08 95       	ret

00000902 <RetrieveDeviceData>:
void RetrieveDeviceData(void)
{
	if (USB_CurrentMode != USB_MODE_Host)
	  return;
	
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     902:	80 ed       	ldi	r24, 0xD0	; 208
     904:	3d de       	rcall	.-902    	; 0x580 <LEDs_SetAllLEDs>
	
	OutputReportSizes();
     906:	41 de       	rcall	.-894    	; 0x58a <OutputReportSizes>
	OutputParsedReportItems();
     908:	08 df       	rcall	.-496    	; 0x71a <OutputParsedReportItems>
	
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     90a:	80 e6       	ldi	r24, 0x60	; 96
     90c:	39 de       	rcall	.-910    	; 0x580 <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	00 c6       	rjmp	.+3072   	; 0x1512 <USB_Host_SetDeviceConfiguration>

00000912 <SetupHardware>:
     912:	84 b7       	in	r24, 0x34	; 52

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     914:	87 7f       	andi	r24, 0xF7	; 247
     916:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	a8 95       	wdr
     91e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     922:	88 61       	ori	r24, 0x18	; 24
     924:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     928:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     92c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	80 e8       	ldi	r24, 0x80	; 128
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     93a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     93e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     940:	83 e3       	ldi	r24, 0x33	; 51
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     948:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     94c:	86 e0       	ldi	r24, 0x06	; 6
     94e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     952:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     956:	88 e1       	ldi	r24, 0x18	; 24
     958:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     95c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     95e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     960:	8a b1       	in	r24, 0x0a	; 10
     962:	80 6f       	ori	r24, 0xF0	; 240
     964:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     966:	8b b1       	in	r24, 0x0b	; 11
     968:	8f 70       	andi	r24, 0x0F	; 15
     96a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     96c:	63 d3       	rcall	.+1734   	; 0x1034 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     96e:	a9 e2       	ldi	r26, 0x29	; 41
     970:	b5 e0       	ldi	r27, 0x05	; 5
     972:	eb e1       	ldi	r30, 0x1B	; 27
     974:	f5 e0       	ldi	r31, 0x05	; 5
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	fc 93       	st	X, r31
     97a:	ee 93       	st	-X, r30
					stdout = Stream;
     97c:	13 96       	adiw	r26, 0x03	; 3
     97e:	fc 93       	st	X, r31
     980:	ee 93       	st	-X, r30
     982:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     984:	8e e0       	ldi	r24, 0x0E	; 14
     986:	df 01       	movw	r26, r30
     988:	1d 92       	st	X+, r1
     98a:	8a 95       	dec	r24
     98c:	e9 f7       	brne	.-6      	; 0x988 <SetupHardware+0x76>
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	83 83       	std	Z+3, r24	; 0x03
     992:	89 ed       	ldi	r24, 0xD9	; 217
     994:	9f e0       	ldi	r25, 0x0F	; 15
     996:	91 87       	std	Z+9, r25	; 0x09
     998:	80 87       	std	Z+8, r24	; 0x08
     99a:	82 ee       	ldi	r24, 0xE2	; 226
     99c:	9f e0       	ldi	r25, 0x0F	; 15
     99e:	93 87       	std	Z+11, r25	; 0x0b
     9a0:	82 87       	std	Z+10, r24	; 0x0a
     9a2:	08 95       	ret

000009a4 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     9a4:	b6 df       	rcall	.-148    	; 0x912 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "HID Device Report Viewer Running.\r\n" ESC_FG_WHITE));
     9a6:	84 e1       	ldi	r24, 0x14	; 20
     9a8:	95 e0       	ldi	r25, 0x05	; 5
     9aa:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	e7 dd       	rcall	.-1074   	; 0x580 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		RetrieveDeviceData();
     9b2:	78 94       	sei
     9b4:	a6 df       	rcall	.-180    	; 0x902 <RetrieveDeviceData>
		
		HID_Host_USBTask(&Device_HID_Interface);
		USB_USBTask();
     9b6:	d4 d5       	rcall	.+2984   	; 0x1560 <USB_USBTask>
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <main+0x10>

000009ba <EVENT_USB_Host_DeviceAttached>:
     9ba:	84 e0       	ldi	r24, 0x04	; 4
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     9c2:	80 ea       	ldi	r24, 0xA0	; 160
     9c4:	dd cd       	rjmp	.-1094   	; 0x580 <LEDs_SetAllLEDs>

000009c6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     9c6:	8d ee       	ldi	r24, 0xED	; 237
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     9ce:	80 e1       	ldi	r24, 0x10	; 16
     9d0:	d7 cd       	rjmp	.-1106   	; 0x580 <LEDs_SetAllLEDs>

000009d2 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	c2 50       	subi	r28, 0x02	; 2
     9dc:	d2 40       	sbci	r29, 0x02	; 2
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     9e8:	80 ea       	ldi	r24, 0xA0	; 160
     9ea:	ca dd       	rcall	.-1132   	; 0x580 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	32 e0       	ldi	r19, 0x02	; 2
     9f0:	ae 01       	movw	r20, r28
     9f2:	4f 5f       	subi	r20, 0xFF	; 255
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	be 01       	movw	r22, r28
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	7d 4f       	sbci	r23, 0xFD	; 253
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	e1 d3       	rcall	.+1986   	; 0x11c2 <USB_Host_GetDeviceConfigDescriptor>
     a00:	88 23       	and	r24, r24
     a02:	19 f0       	breq	.+6      	; 0xa0a <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     a04:	80 ec       	ldi	r24, 0xC0	; 192
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	18 c0       	rjmp	.+48     	; 0xa3a <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Device_HID_Interface,
     a0a:	cf 5f       	subi	r28, 0xFF	; 255
     a0c:	dd 4f       	sbci	r29, 0xFD	; 253
     a0e:	68 81       	ld	r22, Y
     a10:	79 81       	ldd	r23, Y+1	; 0x01
     a12:	c1 50       	subi	r28, 0x01	; 1
     a14:	d2 40       	sbci	r29, 0x02	; 2
     a16:	ae 01       	movw	r20, r28
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <HID_Host_ConfigurePipes>
     a24:	88 23       	and	r24, r24
     a26:	19 f0       	breq	.+6      	; 0xa2e <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid HID Device.\r\n"));
     a28:	86 e9       	ldi	r24, 0x96	; 150
     a2a:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     a2c:	06 c0       	rjmp	.+12     	; 0xa3a <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	70 d5       	rcall	.+2784   	; 0x1512 <USB_Host_SetDeviceConfiguration>
     a32:	88 23       	and	r24, r24
     a34:	31 f0       	breq	.+12     	; 0xa42 <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     a36:	80 e7       	ldi	r24, 0x70	; 112
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a3e:	80 e9       	ldi	r24, 0x90	; 144
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Device_HID_Interface) != 0)
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <HID_Host_SetReportProtocol>
     a4a:	88 23       	and	r24, r24
     a4c:	49 f0       	breq	.+18     	; 0xa60 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode.\r\n"));
     a4e:	8a e4       	ldi	r24, 0x4A	; 74
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a56:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     a58:	93 dd       	rcall	.-1242   	; 0x580 <LEDs_SetAllLEDs>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	5a d5       	rcall	.+2740   	; 0x1512 <USB_Host_SetDeviceConfiguration>
		return;
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     a60:	81 e3       	ldi	r24, 0x31	; 49
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     a68:	80 e6       	ldi	r24, 0x60	; 96
     a6a:	8a dd       	rcall	.-1260   	; 0x580 <LEDs_SetAllLEDs>
}
     a6c:	ce 5f       	subi	r28, 0xFE	; 254
     a6e:	dd 4f       	sbci	r29, 0xFD	; 253
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     a80:	c8 2f       	mov	r28, r24
	USB_Disable();
     a82:	70 d2       	rcall	.+1248   	; 0xf64 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     a84:	1f 92       	push	r1
     a86:	cf 93       	push	r28
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a94:	80 e9       	ldi	r24, 0x90	; 144
     a96:	74 dd       	rcall	.-1304   	; 0x580 <LEDs_SetAllLEDs>
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	ff cf       	rjmp	.-2      	; 0xaa0 <EVENT_USB_Host_HostError+0x20>

00000aa2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     aa2:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <USB_HostState>
     aa6:	1f 92       	push	r1
     aa8:	9f 93       	push	r25
     aaa:	1f 92       	push	r1
     aac:	6f 93       	push	r22
     aae:	1f 92       	push	r1
     ab0:	8f 93       	push	r24
     ab2:	8c ea       	ldi	r24, 0xAC	; 172
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     abe:	8d b7       	in	r24, 0x3d	; 61
     ac0:	9e b7       	in	r25, 0x3e	; 62
     ac2:	08 96       	adiw	r24, 0x08	; 8
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	9e bf       	out	0x3e, r25	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	8d bf       	out	0x3d, r24	; 61
     ace:	80 e9       	ldi	r24, 0x90	; 144
     ad0:	57 cd       	rjmp	.-1362   	; 0x580 <LEDs_SetAllLEDs>

00000ad2 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
	return true;
}
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	08 95       	ret

00000ad6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ad6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ada:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     adc:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ae0:	9d 7f       	andi	r25, 0xFD	; 253
     ae2:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     ae6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     aea:	92 60       	ori	r25, 0x02	; 2
     aec:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     af0:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     af4:	91 fd       	sbrc	r25, 1
     af6:	fc cf       	rjmp	.-8      	; 0xaf0 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     af8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     afc:	91 60       	ori	r25, 0x01	; 1
     afe:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     b02:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b06:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b0a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     b0c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b10:	2f 7d       	andi	r18, 0xDF	; 223
     b12:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b16:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b1a:	2f 7d       	andi	r18, 0xDF	; 223
     b1c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b20:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b22:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     b26:	35 ff       	sbrs	r19, 5
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b2a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b2e:	2f 7d       	andi	r18, 0xDF	; 223
     b30:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b34:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b38:	2d 7f       	andi	r18, 0xFD	; 253
     b3a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b40:	ef ec       	ldi	r30, 0xCF	; 207
     b42:	f7 e0       	ldi	r31, 0x07	; 7
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <USB_Host_ResetDevice+0x6e>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <USB_Host_ResetDevice+0x74>
     b4a:	00 00       	nop
     b4c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     b4e:	49 f7       	brne	.-46     	; 0xb22 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     b50:	99 23       	and	r25, r25
     b52:	29 f0       	breq	.+10     	; 0xb5e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     b54:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b58:	90 62       	ori	r25, 0x20	; 32
     b5a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     b5e:	81 11       	cpse	r24, r1
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     b62:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b6c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b76:	08 95       	ret

00000b78 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b78:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b7c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b7e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b82:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     b84:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b88:	3f 7d       	andi	r19, 0xDF	; 223
     b8a:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b8e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b92:	3f 7d       	andi	r19, 0xDF	; 223
     b94:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b98:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b9c:	31 60       	ori	r19, 0x01	; 1
     b9e:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     ba2:	88 23       	and	r24, r24
     ba4:	39 f1       	breq	.+78     	; 0xbf4 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ba6:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     baa:	35 ff       	sbrs	r19, 5
     bac:	06 c0       	rjmp	.+12     	; 0xbba <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bae:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bb2:	3f 7d       	andi	r19, 0xDF	; 223
     bb4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     bb8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     bba:	30 91 1a 05 	lds	r19, 0x051A	; 0x80051a <USB_HostState>
     bbe:	31 30       	cpi	r19, 0x01	; 1
     bc0:	c1 f0       	breq	.+48     	; 0xbf2 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     bc2:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     bc6:	34 ff       	sbrs	r19, 4
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     bca:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     bce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     bd2:	8f 7e       	andi	r24, 0xEF	; 239
     bd4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     bd8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     bda:	0c c0       	rjmp	.+24     	; 0xbf4 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bdc:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     be0:	31 ff       	sbrs	r19, 1
     be2:	df cf       	rjmp	.-66     	; 0xba2 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     be4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     be8:	8d 7f       	andi	r24, 0xFD	; 253
     bea:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     bee:	83 e0       	ldi	r24, 0x03	; 3

			break;
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     bf2:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     bf4:	21 11       	cpse	r18, r1
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     bf8:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     bfc:	2e 7f       	andi	r18, 0xFE	; 254
     bfe:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     c02:	99 23       	and	r25, r25
     c04:	29 f0       	breq	.+10     	; 0xc10 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     c06:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c0a:	90 62       	ori	r25, 0x20	; 32
     c0c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     c10:	08 95       	ret

00000c12 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     c12:	ef 92       	push	r14
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	28 97       	sbiw	r28, 0x08	; 8
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     c2c:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <USB_HostState>
     c30:	8e 2f       	mov	r24, r30
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	8a 30       	cpi	r24, 0x0A	; 10
     c36:	91 05       	cpc	r25, r1
     c38:	08 f0       	brcs	.+2      	; 0xc3c <USB_Host_ProcessNextHostState+0x2a>
     c3a:	f6 c0       	rjmp	.+492    	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
     c3c:	fc 01       	movw	r30, r24
     c3e:	e4 5b       	subi	r30, 0xB4	; 180
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     c46:	00 91 0e 05 	lds	r16, 0x050E	; 0x80050e <WaitMSRemaining.2935>
     c4a:	10 91 0f 05 	lds	r17, 0x050F	; 0x80050f <WaitMSRemaining.2935+0x1>
     c4e:	01 15       	cp	r16, r1
     c50:	11 05       	cpc	r17, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <USB_Host_ProcessNextHostState+0x44>
     c54:	e9 c0       	rjmp	.+466    	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	8f df       	rcall	.-226    	; 0xb78 <USB_Host_WaitMS>
     c5a:	88 23       	and	r24, r24
     c5c:	31 f0       	breq	.+12     	; 0xc6a <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     c5e:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <PostWaitState.2936>
     c62:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     c66:	91 e0       	ldi	r25, 0x01	; 1
					break;
     c68:	d1 c0       	rjmp	.+418    	; 0xe0c <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     c6a:	01 50       	subi	r16, 0x01	; 1
     c6c:	11 09       	sbc	r17, r1
     c6e:	10 93 0f 05 	sts	0x050F, r17	; 0x80050f <WaitMSRemaining.2935+0x1>
     c72:	00 93 0e 05 	sts	0x050E, r16	; 0x80050e <WaitMSRemaining.2935>
     c76:	01 2b       	or	r16, r17
     c78:	09 f0       	breq	.+2      	; 0xc7c <USB_Host_ProcessNextHostState+0x6a>
     c7a:	d6 c0       	rjmp	.+428    	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     c7c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <PostWaitState.2936>
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     c82:	88 ee       	ldi	r24, 0xE8	; 232
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <WaitMSRemaining.2935+0x1>
     c8a:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <USB_HostState>
			break;
     c94:	c9 c0       	rjmp	.+402    	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     c96:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <WaitMSRemaining.2935>
     c9a:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <WaitMSRemaining.2935+0x1>
     c9e:	9c 01       	movw	r18, r24
     ca0:	21 50       	subi	r18, 0x01	; 1
     ca2:	31 09       	sbc	r19, r1
     ca4:	30 93 0f 05 	sts	0x050F, r19	; 0x80050f <WaitMSRemaining.2935+0x1>
     ca8:	20 93 0e 05 	sts	0x050E, r18	; 0x80050e <WaitMSRemaining.2935>
     cac:	89 2b       	or	r24, r25
     cae:	39 f0       	breq	.+14     	; 0xcbe <USB_Host_ProcessNextHostState+0xac>
     cb0:	8f ec       	ldi	r24, 0xCF	; 207
     cb2:	97 e0       	ldi	r25, 0x07	; 7
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <USB_Host_ProcessNextHostState+0xa2>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <USB_Host_ProcessNextHostState+0xa8>
     cba:	00 00       	nop
     cbc:	b5 c0       	rjmp	.+362    	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cbe:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cc0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     cca:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     cce:	8b 7f       	andi	r24, 0xFB	; 251
     cd0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     cd4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     cde:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	d2 cf       	rjmp	.-92     	; 0xc90 <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     cec:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     cf0:	80 ff       	sbrs	r24, 0
     cf2:	9a c0       	rjmp	.+308    	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cf4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cfe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d02:	8d 7f       	andi	r24, 0xFD	; 253
     d04:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d08:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d0c:	8d 7f       	andi	r24, 0xFD	; 253
     d0e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     d12:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d1c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     d26:	e8 d0       	rcall	.+464    	; 0xef8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     d28:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <USB_HostState>
     d2c:	84 e6       	ldi	r24, 0x64	; 100
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <WaitMSRemaining.2935+0x1>
     d34:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <WaitMSRemaining.2935>
     d38:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     d3a:	5c c0       	rjmp	.+184    	; 0xdf4 <USB_Host_ProcessNextHostState+0x1e2>
     d3c:	cc de       	rcall	.-616    	; 0xad6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     d3e:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <USB_HostState>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <WaitMSRemaining.2935+0x1>
     d4a:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <WaitMSRemaining.2935>
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	51 c0       	rjmp	.+162    	; 0xdf4 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     d52:	e1 2c       	mov	r14, r1
     d54:	00 e4       	ldi	r16, 0x40	; 64
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	6f d0       	rcall	.+222    	; 0xe40 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d62:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     d66:	87 fd       	sbrc	r24, 7
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     d6c:	94 e0       	ldi	r25, 0x04	; 4
     d6e:	4e c0       	rjmp	.+156    	; 0xe0c <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     d70:	87 e0       	ldi	r24, 0x07	; 7
     d72:	8e cf       	rjmp	.-228    	; 0xc90 <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     d74:	88 e0       	ldi	r24, 0x08	; 8
     d76:	e4 e1       	ldi	r30, 0x14	; 20
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	a2 e1       	ldi	r26, 0x12	; 18
     d7c:	b5 e0       	ldi	r27, 0x05	; 5
     d7e:	01 90       	ld	r0, Z+
     d80:	0d 92       	st	X+, r0
     d82:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     d84:	e1 f7       	brne	.-8      	; 0xd7e <USB_Host_ProcessNextHostState+0x16c>
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	cd d2       	rcall	.+1434   	; 0x1326 <USB_Host_SendControlRequest>
     d8c:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     d8e:	3d c0       	rjmp	.+122    	; 0xe0a <USB_Host_ProcessNextHostState+0x1f8>
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     d96:	9f de       	rcall	.-706    	; 0xad6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     d98:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <USB_HostState>
     d9c:	88 ec       	ldi	r24, 0xC8	; 200
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <WaitMSRemaining.2935+0x1>
     da4:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <WaitMSRemaining.2935>
     da8:	88 e0       	ldi	r24, 0x08	; 8
     daa:	24 c0       	rjmp	.+72     	; 0xdf4 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     dac:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	e1 2c       	mov	r14, r1
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	41 d0       	rcall	.+130    	; 0xe40 <Pipe_ConfigurePipe>
     dbe:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     dc2:	87 ff       	sbrs	r24, 7
     dc4:	d2 cf       	rjmp	.-92     	; 0xd6a <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     dc6:	88 e0       	ldi	r24, 0x08	; 8
     dc8:	ec e1       	ldi	r30, 0x1C	; 28
     dca:	f1 e0       	ldi	r31, 0x01	; 1
     dcc:	a2 e1       	ldi	r26, 0x12	; 18
     dce:	b5 e0       	ldi	r27, 0x05	; 5
     dd0:	01 90       	ld	r0, Z+
     dd2:	0d 92       	st	X+, r0
     dd4:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <USB_Host_ProcessNextHostState+0x1be>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a4 d2       	rcall	.+1352   	; 0x1326 <USB_Host_SendControlRequest>
     dde:	81 11       	cpse	r24, r1
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     de2:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <USB_HostState>
     de6:	84 e6       	ldi	r24, 0x64	; 100
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <WaitMSRemaining.2935+0x1>
     dee:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <WaitMSRemaining.2935>
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     df8:	17 c0       	rjmp	.+46     	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     e00:	8a e0       	ldi	r24, 0x0A	; 10
     e02:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     e06:	e5 dd       	rcall	.-1078   	; 0x9d2 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     e10:	21 30       	cpi	r18, 0x01	; 1
     e12:	51 f0       	breq	.+20     	; 0xe28 <USB_Host_ProcessNextHostState+0x216>
     e14:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e16:	89 2f       	mov	r24, r25
     e18:	44 de       	rcall	.-888    	; 0xaa2 <EVENT_USB_Host_DeviceEnumerationFailed>
     e1a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e1e:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     e20:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     e24:	d0 dd       	rcall	.-1120   	; 0x9c6 <EVENT_USB_Host_DeviceUnattached>
     e26:	b6 d0       	rcall	.+364    	; 0xf94 <USB_ResetInterface>
	}
}
     e28:	28 96       	adiw	r28, 0x08	; 8
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ef 90       	pop	r14
     e3e:	08 95       	ret

00000e40 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     e40:	ef 92       	push	r14
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     e46:	2f 70       	andi	r18, 0x0F	; 15
     e48:	42 2b       	or	r20, r18
     e4a:	90 e4       	ldi	r25, 0x40	; 64
     e4c:	69 9f       	mul	r22, r25
     e4e:	b0 01       	movw	r22, r0
     e50:	11 24       	eor	r1, r1
     e52:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e54:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     e56:	2e 2d       	mov	r18, r14
     e58:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e5a:	37 30       	cpi	r19, 0x07	; 7
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <Pipe_ConfigurePipe+0x20>
     e5e:	45 c0       	rjmp	.+138    	; 0xeea <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e60:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     e64:	38 13       	cpse	r19, r24
     e66:	13 c0       	rjmp	.+38     	; 0xe8e <Pipe_ConfigurePipe+0x4e>
     e68:	48 e0       	ldi	r20, 0x08	; 8
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     e6e:	40 17       	cp	r20, r16
     e70:	51 07       	cpc	r21, r17
     e72:	38 f0       	brcs	.+14     	; 0xe82 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     e74:	92 95       	swap	r25
     e76:	90 7f       	andi	r25, 0xF0	; 240
     e78:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     e7a:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     e7c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <Pipe_ConfigurePipe+0x5e>
     e82:	95 30       	cpi	r25, 0x05	; 5
     e84:	b9 f3       	breq	.-18     	; 0xe74 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     e86:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     e88:	44 0f       	add	r20, r20
     e8a:	55 1f       	adc	r21, r21
     e8c:	f0 cf       	rjmp	.-32     	; 0xe6e <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     e8e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     e92:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     e96:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     e9a:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     e9e:	91 fd       	sbrc	r25, 1
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     ea2:	3f 5f       	subi	r19, 0xFF	; 255
     ea4:	da cf       	rjmp	.-76     	; 0xe5a <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ea6:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     eaa:	4e 7f       	andi	r20, 0xFE	; 254
     eac:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     eb0:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     eb4:	4d 7f       	andi	r20, 0xFD	; 253
     eb6:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     eba:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ebe:	41 60       	ori	r20, 0x01	; 1
     ec0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ec4:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     ec8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     ecc:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     ed0:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ed4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ed8:	90 62       	ori	r25, 0x20	; 32
     eda:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ede:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     ee2:	97 fd       	sbrc	r25, 7
     ee4:	de cf       	rjmp	.-68     	; 0xea2 <Pipe_ConfigurePipe+0x62>
		  return false;		
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     eea:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     eee:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ef 90       	pop	r14
     ef6:	08 95       	ret

00000ef8 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ef8:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     f02:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     f06:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     f0a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f0e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f12:	9e 7f       	andi	r25, 0xFE	; 254
     f14:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	87 30       	cpi	r24, 0x07	; 7
     f1c:	81 f7       	brne	.-32     	; 0xefe <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     f1e:	08 95       	ret

00000f20 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     f20:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     f24:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f26:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f28:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f2c:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     f30:	27 ff       	sbrs	r18, 7
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     f34:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f38:	42 2f       	mov	r20, r18
     f3a:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     f3c:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     f40:	20 73       	andi	r18, 0x30	; 48
     f42:	20 31       	cpi	r18, 0x10	; 16
     f44:	11 f0       	breq	.+4      	; 0xf4a <Pipe_IsEndpointBound+0x2a>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <Pipe_IsEndpointBound+0x2c>
     f4a:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     f4c:	24 2b       	or	r18, r20
     f4e:	82 17       	cp	r24, r18
     f50:	39 f0       	breq	.+14     	; 0xf60 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	97 30       	cpi	r25, 0x07	; 7
     f56:	41 f7       	brne	.-48     	; 0xf28 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f58:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     f60:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     f62:	08 95       	ret

00000f64 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     f64:	70 d0       	rcall	.+224    	; 0x1046 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f66:	77 d0       	rcall	.+238    	; 0x1056 <USB_INT_ClearAllInterrupts>
     f68:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	81 60       	ori	r24, 0x01	; 1
     f70:	80 83       	st	Z, r24
     f72:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	80 83       	st	Z, r24
     f7c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f7e:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	8c 91       	ld	r24, X
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	8c 93       	st	X, r24
     f88:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     f8a:	8f 7e       	andi	r24, 0xEF	; 239
     f8c:	80 83       	st	Z, r24
     f8e:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f92:	08 95       	ret

00000f94 <USB_ResetInterface>:
     f94:	58 d0       	rcall	.+176    	; 0x1046 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     f96:	5f d0       	rcall	.+190    	; 0x1056 <USB_INT_ClearAllInterrupts>
     f98:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f9c:	8f 77       	andi	r24, 0x7F	; 127
     f9e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     fa2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     fa6:	80 68       	ori	r24, 0x80	; 128
     fa8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     fac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     fb0:	8f 7d       	andi	r24, 0xDF	; 223
     fb2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     fb6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     fc0:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     fc2:	89 bd       	out	0x29, r24	; 41
     fc4:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     fc6:	89 bd       	out	0x29, r24	; 41
     fc8:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     fca:	00 fe       	sbrs	r0, 0
     fcc:	fd cf       	rjmp	.-6      	; 0xfc8 <USB_ResetInterface+0x34>
     fce:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     fd0:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <USB_HostState>
     fd4:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     fd8:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     fda:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     fde:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     fe8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ff2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ff6:	84 60       	ori	r24, 0x04	; 4
     ff8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ffc:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
    1000:	8f 7e       	andi	r24, 0xEF	; 239
    1002:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1006:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
    1008:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    100a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1014:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    101e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1028:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    102c:	80 61       	ori	r24, 0x10	; 16
    102e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1032:	08 95       	ret

00001034 <USB_Init>:
    1034:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <USB_IsInitialized>

	USB_ResetInterface();
    1044:	a7 cf       	rjmp	.-178    	; 0xf94 <USB_ResetInterface>

00001046 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1046:	e8 ed       	ldi	r30, 0xD8	; 216
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8c 7f       	andi	r24, 0xFC	; 252
    104e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1050:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1054:	08 95       	ret

00001056 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1056:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    105a:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    105e:	08 95       	ret

00001060 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	0b b6       	in	r0, 0x3b	; 59
    106c:	0f 92       	push	r0
    106e:	2f 93       	push	r18
    1070:	3f 93       	push	r19
    1072:	4f 93       	push	r20
    1074:	5f 93       	push	r21
    1076:	6f 93       	push	r22
    1078:	7f 93       	push	r23
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	af 93       	push	r26
    1080:	bf 93       	push	r27
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1086:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    108a:	85 ff       	sbrs	r24, 5
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    108e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1092:	85 ff       	sbrs	r24, 5
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1096:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    109a:	8f 7d       	andi	r24, 0xDF	; 223
    109c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    10a0:	1b d1       	rcall	.+566    	; 0x12d8 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    10a2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    10a6:	81 ff       	sbrs	r24, 1
    10a8:	15 c0       	rjmp	.+42     	; 0x10d4 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    10aa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    10ae:	81 ff       	sbrs	r24, 1
    10b0:	11 c0       	rjmp	.+34     	; 0x10d4 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10b2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    10b6:	8d 7f       	andi	r24, 0xFD	; 253
    10b8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10bc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    10c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
    10d0:	7a dc       	rcall	.-1804   	; 0x9c6 <EVENT_USB_Host_DeviceUnattached>
    10d2:	60 df       	rcall	.-320    	; 0xf94 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    10d4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    10d8:	81 ff       	sbrs	r24, 1
    10da:	15 c0       	rjmp	.+42     	; 0x1106 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    10dc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    10e0:	81 ff       	sbrs	r24, 1
    10e2:	11 c0       	rjmp	.+34     	; 0x1106 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    10e4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    10ee:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    10f0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	c1 dc       	rcall	.-1662   	; 0xa80 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    10fe:	63 dc       	rcall	.-1850   	; 0x9c6 <EVENT_USB_Host_DeviceUnattached>
    1100:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
    1102:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <USB_HostState>
    1106:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    110a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    110c:	17 c0       	rjmp	.+46     	; 0x113c <__vector_10+0xdc>
    110e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1112:	80 ff       	sbrs	r24, 0
    1114:	13 c0       	rjmp	.+38     	; 0x113c <__vector_10+0xdc>
    1116:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    1120:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1124:	8e 7f       	andi	r24, 0xFE	; 254
    1126:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    112a:	47 dc       	rcall	.-1906   	; 0x9ba <EVENT_USB_Host_DeviceAttached>
    112c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1136:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1138:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <USB_HostState>
    113c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1140:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <__vector_10+0x100>
    1144:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1148:	82 ff       	sbrs	r24, 2
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <__vector_10+0x100>
    114c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1150:	8b 7f       	andi	r24, 0xFB	; 251
    1152:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	a3 dc       	rcall	.-1722   	; 0xaa2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    115c:	34 dc       	rcall	.-1944   	; 0x9c6 <EVENT_USB_Host_DeviceUnattached>
    115e:	1a df       	rcall	.-460    	; 0xf94 <USB_ResetInterface>

		USB_ResetInterface();
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <USB_GetNextDescriptor>:
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    118a:	dc 01       	movw	r26, r24
    118c:	eb 01       	movw	r28, r22
    118e:	e8 81       	ld	r30, Y
    1190:	f9 81       	ldd	r31, Y+1	; 0x01
    1192:	20 81       	ld	r18, Z
    1194:	8d 91       	ld	r24, X+
    1196:	9c 91       	ld	r25, X
    1198:	11 97       	sbiw	r26, 0x01	; 1
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	82 17       	cp	r24, r18
    119e:	93 07       	cpc	r25, r19
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <USB_GetNextDescriptor+0x1e>
    11a2:	9c 01       	movw	r18, r24
    11a4:	e2 0f       	add	r30, r18
    11a6:	f3 1f       	adc	r31, r19
    11a8:	eb 01       	movw	r28, r22
    11aa:	f9 83       	std	Y+1, r31	; 0x01
    11ac:	e8 83       	st	Y, r30
    11ae:	8d 91       	ld	r24, X+
    11b0:	9c 91       	ld	r25, X
    11b2:	11 97       	sbiw	r26, 0x01	; 1
    11b4:	82 1b       	sub	r24, r18
    11b6:	93 0b       	sbc	r25, r19
    11b8:	8d 93       	st	X+, r24
    11ba:	9c 93       	st	X, r25
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <USB_Host_GetDeviceConfigDescriptor>:
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	29 97       	sbiw	r28, 0x09	; 9
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	6b 01       	movw	r12, r22
    11e4:	8a 01       	movw	r16, r20
    11e6:	79 01       	movw	r14, r18
    11e8:	90 e8       	ldi	r25, 0x80	; 128
    11ea:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <USB_ControlRequest>
    11ee:	96 e0       	ldi	r25, 0x06	; 6
    11f0:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <USB_ControlRequest+0x1>
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	92 60       	ori	r25, 0x02	; 2
    11fa:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <USB_ControlRequest+0x3>
    11fe:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <USB_ControlRequest+0x2>
    1202:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <USB_ControlRequest+0x5>
    1206:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <USB_ControlRequest+0x4>
    120a:	89 e0       	ldi	r24, 0x09	; 9
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <USB_ControlRequest+0x7>
    1212:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <USB_ControlRequest+0x6>
    1216:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    121a:	ce 01       	movw	r24, r28
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	83 d0       	rcall	.+262    	; 0x1326 <USB_Host_SendControlRequest>
    1220:	81 11       	cpse	r24, r1
    1222:	19 c0       	rjmp	.+50     	; 0x1256 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	f6 01       	movw	r30, r12
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    122e:	e8 16       	cp	r14, r24
    1230:	f9 06       	cpc	r15, r25
    1232:	70 f0       	brcs	.+28     	; 0x1250 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1234:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <USB_ControlRequest+0x7>
    1238:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <USB_ControlRequest+0x6>
    123c:	c8 01       	movw	r24, r16
    123e:	73 d0       	rcall	.+230    	; 0x1326 <USB_Host_SendControlRequest>
    1240:	81 11       	cpse	r24, r1
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1244:	f8 01       	movw	r30, r16
    1246:	81 81       	ldd	r24, Z+1	; 0x01
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	21 f4       	brne	.+8      	; 0x1254 <USB_Host_GetDeviceConfigDescriptor+0x92>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	29 96       	adiw	r28, 0x09	; 9
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	8c 01       	movw	r16, r24
    128a:	eb 01       	movw	r28, r22
    128c:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    128e:	f8 01       	movw	r30, r16
    1290:	e0 80       	ld	r14, Z
    1292:	f1 80       	ldd	r15, Z+1	; 0x01
    1294:	e1 14       	cp	r14, r1
    1296:	f1 04       	cpc	r15, r1
    1298:	99 f0       	breq	.+38     	; 0x12c0 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    129a:	a8 80       	ld	r10, Y
    129c:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    129e:	be 01       	movw	r22, r28
    12a0:	c8 01       	movw	r24, r16
    12a2:	71 df       	rcall	.-286    	; 0x1186 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    12a4:	88 81       	ld	r24, Y
    12a6:	99 81       	ldd	r25, Y+1	; 0x01
    12a8:	f6 01       	movw	r30, r12
    12aa:	09 95       	icall
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	79 f3       	breq	.-34     	; 0x128e <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	39 f4       	brne	.+14     	; 0x12c2 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    12b4:	b9 82       	std	Y+1, r11	; 0x01
    12b6:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    12b8:	f8 01       	movw	r30, r16
    12ba:	f1 82       	std	Z+1, r15	; 0x01
    12bc:	e0 82       	st	Z, r14
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	08 95       	ret

000012d8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    12d8:	08 95       	ret

000012da <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    12e2:	c9 ee       	ldi	r28, 0xE9	; 233
    12e4:	d3 e0       	ldi	r29, 0x03	; 3
    12e6:	11 11       	cpse	r17, r1
    12e8:	0c c0       	rjmp	.+24     	; 0x1302 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    12ea:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12ee:	83 fd       	sbrc	r24, 3
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	41 dc       	rcall	.-1918   	; 0xb78 <USB_Host_WaitMS>
    12f6:	81 11       	cpse	r24, r1
    12f8:	12 c0       	rjmp	.+36     	; 0x131e <USB_Host_WaitForIOS+0x44>
    12fa:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    12fc:	a1 f7       	brne	.-24     	; 0x12e6 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	0e c0       	rjmp	.+28     	; 0x131e <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1302:	11 30       	cpi	r17, 0x01	; 1
    1304:	29 f4       	brne	.+10     	; 0x1310 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1306:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    130a:	80 ff       	sbrs	r24, 0
    130c:	f2 cf       	rjmp	.-28     	; 0x12f2 <USB_Host_WaitForIOS+0x18>
    130e:	06 c0       	rjmp	.+12     	; 0x131c <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1310:	12 30       	cpi	r17, 0x02	; 2
    1312:	79 f7       	brne	.-34     	; 0x12f2 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1314:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1318:	82 ff       	sbrs	r24, 2
    131a:	eb cf       	rjmp	.-42     	; 0x12f2 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    131c:	80 e0       	ldi	r24, 0x00	; 0
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	08 95       	ret

00001326 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1332:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    133a:	c0 91 18 05 	lds	r28, 0x0518	; 0x800518 <USB_ControlRequest+0x6>
    133e:	d0 91 19 05 	lds	r29, 0x0519	; 0x800519 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1342:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1346:	81 60       	ori	r24, 0x01	; 1
    1348:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	14 dc       	rcall	.-2008   	; 0xb78 <USB_Host_WaitMS>
    1350:	81 11       	cpse	r24, r1
    1352:	c8 c0       	rjmp	.+400    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1354:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1358:	8f 7c       	andi	r24, 0xCF	; 207
    135a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    135e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    1362:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1366:	8f 7e       	andi	r24, 0xEF	; 239
    1368:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    136c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1370:	8f 7b       	andi	r24, 0xBF	; 191
    1372:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1376:	e2 e1       	ldi	r30, 0x12	; 18
    1378:	f5 e0       	ldi	r31, 0x05	; 5
    137a:	8a e1       	ldi	r24, 0x1A	; 26
    137c:	95 e0       	ldi	r25, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    137e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1380:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1384:	8e 17       	cp	r24, r30
    1386:	9f 07       	cpc	r25, r31
    1388:	d1 f7       	brne	.-12     	; 0x137e <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    138a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    138e:	87 77       	andi	r24, 0x77	; 119
    1390:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	a1 df       	rcall	.-190    	; 0x12da <USB_Host_WaitForIOS>
    1398:	81 11       	cpse	r24, r1
    139a:	a4 c0       	rjmp	.+328    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    139c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	e7 db       	rcall	.-2098   	; 0xb78 <USB_Host_WaitMS>
    13aa:	81 11       	cpse	r24, r1
    13ac:	9b c0       	rjmp	.+310    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    13ae:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <USB_ControlRequest>
    13b2:	87 ff       	sbrs	r24, 7
    13b4:	4e c0       	rjmp	.+156    	; 0x1452 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13b6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    13ba:	8f 7c       	andi	r24, 0xCF	; 207
    13bc:	80 61       	ori	r24, 0x10	; 16
    13be:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    13c2:	01 15       	cp	r16, r1
    13c4:	11 05       	cpc	r17, r1
    13c6:	09 f0       	breq	.+2      	; 0x13ca <USB_Host_SendControlRequest+0xa4>
    13c8:	3a c0       	rjmp	.+116    	; 0x143e <USB_Host_SendControlRequest+0x118>
    13ca:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    13ce:	8f 7c       	andi	r24, 0xCF	; 207
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13d6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13da:	8f 7b       	andi	r24, 0xBF	; 191
    13dc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	7b df       	rcall	.-266    	; 0x12da <USB_Host_WaitForIOS>
    13e4:	81 11       	cpse	r24, r1
    13e6:	7e c0       	rjmp	.+252    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13e8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13ec:	8b 77       	andi	r24, 0x7B	; 123
    13ee:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	72 df       	rcall	.-284    	; 0x12da <USB_Host_WaitForIOS>
    13f6:	76 c0       	rjmp	.+236    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13f8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13fc:	8f 7b       	andi	r24, 0xBF	; 191
    13fe:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	6a df       	rcall	.-300    	; 0x12da <USB_Host_WaitForIOS>
    1406:	81 11       	cpse	r24, r1
    1408:	6d c0       	rjmp	.+218    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    140a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    140e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1412:	89 2b       	or	r24, r25
    1414:	11 f4       	brne	.+4      	; 0x141a <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    1416:	c0 e0       	ldi	r28, 0x00	; 0
    1418:	d0 e0       	ldi	r29, 0x00	; 0
    141a:	f8 01       	movw	r30, r16
    141c:	8f 01       	movw	r16, r30
    141e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1422:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    1426:	89 2b       	or	r24, r25
    1428:	69 f4       	brne	.+26     	; 0x1444 <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    142a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    142e:	80 64       	ori	r24, 0x40	; 64
    1430:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1434:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1438:	8e 77       	andi	r24, 0x7E	; 126
    143a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    143e:	20 97       	sbiw	r28, 0x00	; 0
    1440:	d9 f6       	brne	.-74     	; 0x13f8 <USB_Host_SendControlRequest+0xd2>
    1442:	c3 cf       	rjmp	.-122    	; 0x13ca <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1444:	20 97       	sbiw	r28, 0x00	; 0
    1446:	89 f3       	breq	.-30     	; 0x142a <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1448:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    144c:	81 93       	st	Z+, r24
					DataLen--;
    144e:	21 97       	sbiw	r28, 0x01	; 1
    1450:	e5 cf       	rjmp	.-54     	; 0x141c <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1452:	01 15       	cp	r16, r1
    1454:	11 05       	cpc	r17, r1
    1456:	91 f1       	breq	.+100    	; 0x14bc <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1458:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    145c:	8f 7c       	andi	r24, 0xCF	; 207
    145e:	80 62       	ori	r24, 0x20	; 32
    1460:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1464:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1468:	8f 7b       	andi	r24, 0xBF	; 191
    146a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1472:	e1 f0       	breq	.+56     	; 0x14ac <USB_Host_SendControlRequest+0x186>
    1474:	32 df       	rcall	.-412    	; 0x12da <USB_Host_WaitForIOS>
    1476:	81 11       	cpse	r24, r1
    1478:	35 c0       	rjmp	.+106    	; 0x14e4 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    147a:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    147e:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1482:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	28 17       	cp	r18, r24
    148a:	39 07       	cpc	r19, r25
    148c:	48 f4       	brcc	.+18     	; 0x14a0 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    148e:	0f 5f       	subi	r16, 0xFF	; 255
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	f8 01       	movw	r30, r16
    1494:	31 97       	sbiw	r30, 0x01	; 1
    1496:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1498:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    149c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    149e:	69 f7       	brne	.-38     	; 0x147a <USB_Host_SendControlRequest+0x154>
    14a0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    14a4:	8b 77       	andi	r24, 0x7B	; 123
    14a6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14aa:	e1 cf       	rjmp	.-62     	; 0x146e <USB_Host_SendControlRequest+0x148>
    14ac:	16 df       	rcall	.-468    	; 0x12da <USB_Host_WaitForIOS>
    14ae:	81 11       	cpse	r24, r1
    14b0:	19 c0       	rjmp	.+50     	; 0x14e4 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14b2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14bc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    14c0:	8f 7c       	andi	r24, 0xCF	; 207
    14c2:	80 61       	ori	r24, 0x10	; 16
    14c4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14c8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14cc:	8f 7b       	andi	r24, 0xBF	; 191
    14ce:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	02 df       	rcall	.-508    	; 0x12da <USB_Host_WaitForIOS>
    14d6:	81 11       	cpse	r24, r1
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14da:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    14de:	9e 77       	andi	r25, 0x7E	; 126
    14e0:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14e4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14e8:	90 64       	ori	r25, 0x40	; 64
    14ea:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    14ee:	f1 10       	cpse	r15, r1
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    14f2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    14f6:	9e 7f       	andi	r25, 0xFE	; 254
    14f8:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    1502:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	08 95       	ret

00001512 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1512:	cf 93       	push	r28
    1514:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1516:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <USB_ControlRequest>
    151a:	89 e0       	ldi	r24, 0x09	; 9
    151c:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <USB_ControlRequest+0x1>
    1520:	8c 2f       	mov	r24, r28
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <USB_ControlRequest+0x3>
    1528:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <USB_ControlRequest+0x2>
    152c:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <USB_ControlRequest+0x5>
    1530:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <USB_ControlRequest+0x4>
    1534:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <USB_ControlRequest+0x7>
    1538:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    153c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	f0 de       	rcall	.-544    	; 0x1326 <USB_Host_SendControlRequest>
    1546:	81 11       	cpse	r24, r1
    1548:	09 c0       	rjmp	.+18     	; 0x155c <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    154a:	c0 93 10 05 	sts	0x0510, r28	; 0x800510 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    154e:	c1 11       	cpse	r28, r1
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <USB_Host_SetDeviceConfiguration+0x44>
    1552:	9a e0       	ldi	r25, 0x0A	; 10
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <USB_Host_SetDeviceConfiguration+0x46>
    1556:	9b e0       	ldi	r25, 0x0B	; 11
    1558:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <USB_HostState>
	}

	return ErrorCode;
}
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1566:	c7 ea       	ldi	r28, 0xA7	; 167
    1568:	d0 e0       	ldi	r29, 0x00	; 0
    156a:	18 81       	ld	r17, Y
    156c:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    156e:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1570:	50 db       	rcall	.-2400   	; 0xc12 <USB_Host_ProcessNextHostState>
    1572:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	08 95       	ret

0000157c <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    157c:	2f 92       	push	r2
    157e:	3f 92       	push	r3
    1580:	4f 92       	push	r4
    1582:	5f 92       	push	r5
    1584:	6f 92       	push	r6
    1586:	7f 92       	push	r7
    1588:	8f 92       	push	r8
    158a:	9f 92       	push	r9
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	cc 58       	subi	r28, 0x8C	; 140
    15a6:	d1 09       	sbc	r29, r1
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	6c 01       	movw	r12, r24
    15b4:	e7 96       	adiw	r28, 0x37	; 55
    15b6:	7f af       	std	Y+63, r23	; 0x3f
    15b8:	6e af       	std	Y+62, r22	; 0x3e
    15ba:	e7 97       	sbiw	r28, 0x37	; 55
    15bc:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    15be:	9a 01       	movw	r18, r20
    15c0:	20 57       	subi	r18, 0x70	; 112
    15c2:	3c 4f       	sbci	r19, 0xFC	; 252
    15c4:	e9 96       	adiw	r28, 0x39	; 57
    15c6:	3f af       	std	Y+63, r19	; 0x3f
    15c8:	2e af       	std	Y+62, r18	; 0x3e
    15ca:	e9 97       	sbiw	r28, 0x39	; 57
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    15cc:	89 ed       	ldi	r24, 0xD9	; 217
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	da 01       	movw	r26, r20
    15d2:	fc 01       	movw	r30, r24
    15d4:	1d 92       	st	X+, r1
    15d6:	31 97       	sbiw	r30, 0x01	; 1
    15d8:	e9 f7       	brne	.-6      	; 0x15d4 <USB_ProcessHIDReport+0x58>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    15da:	fe 01       	movw	r30, r28
    15dc:	31 96       	adiw	r30, 0x01	; 1
    15de:	8c e1       	ldi	r24, 0x1C	; 28
    15e0:	df 01       	movw	r26, r30
    15e2:	1d 92       	st	X+, r1
    15e4:	8a 95       	dec	r24
    15e6:	e9 f7       	brne	.-6      	; 0x15e2 <USB_ProcessHIDReport+0x66>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    15e8:	87 e0       	ldi	r24, 0x07	; 7
    15ea:	d9 01       	movw	r26, r18
    15ec:	1d 92       	st	X+, r1
    15ee:	8a 95       	dec	r24
    15f0:	e9 f7       	brne	.-6      	; 0x15ec <USB_ProcessHIDReport+0x70>

	ParserData->TotalDeviceReports = 1;
    15f2:	21 50       	subi	r18, 0x01	; 1
    15f4:	31 09       	sbc	r19, r1
    15f6:	c1 58       	subi	r28, 0x81	; 129
    15f8:	df 4f       	sbci	r29, 0xFF	; 255
    15fa:	39 83       	std	Y+1, r19	; 0x01
    15fc:	28 83       	st	Y, r18
    15fe:	cf 57       	subi	r28, 0x7F	; 127
    1600:	d0 40       	sbci	r29, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	d9 01       	movw	r26, r18
    1606:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
    1608:	ed 96       	adiw	r28, 0x3d	; 61
    160a:	1c ae       	std	Y+60, r1	; 0x3c
    160c:	1d ae       	std	Y+61, r1	; 0x3d
    160e:	1e ae       	std	Y+62, r1	; 0x3e
    1610:	1f ae       	std	Y+63, r1	; 0x3f
    1612:	ed 97       	sbiw	r28, 0x3d	; 61
    1614:	41 2c       	mov	r4, r1
    1616:	51 2c       	mov	r5, r1
    1618:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
    161a:	00 e0       	ldi	r16, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
    161c:	e5 96       	adiw	r28, 0x35	; 53
    161e:	1f ae       	std	Y+63, r1	; 0x3f
    1620:	1e ae       	std	Y+62, r1	; 0x3e
    1622:	e5 97       	sbiw	r28, 0x35	; 53
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
    1624:	7f 01       	movw	r14, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1626:	fa 01       	movw	r30, r20
    1628:	ea 52       	subi	r30, 0x2A	; 42
    162a:	fc 4f       	sbci	r31, 0xFC	; 252
    162c:	cf 57       	subi	r28, 0x7F	; 127
    162e:	df 4f       	sbci	r29, 0xFF	; 255
    1630:	f9 83       	std	Y+1, r31	; 0x01
    1632:	e8 83       	st	Y, r30
    1634:	c1 58       	subi	r28, 0x81	; 129
    1636:	d0 40       	sbci	r29, 0x00	; 0

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1638:	27 50       	subi	r18, 0x07	; 7
    163a:	31 09       	sbc	r19, r1
    163c:	c7 57       	subi	r28, 0x77	; 119
    163e:	df 4f       	sbci	r29, 0xFF	; 255
    1640:	39 83       	std	Y+1, r19	; 0x01
    1642:	28 83       	st	Y, r18
    1644:	c9 58       	subi	r28, 0x89	; 137
    1646:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    1648:	48 52       	subi	r20, 0x28	; 40
    164a:	5c 4f       	sbci	r21, 0xFC	; 252
    164c:	cd 57       	subi	r28, 0x7D	; 125
    164e:	df 4f       	sbci	r29, 0xFF	; 255
    1650:	59 83       	std	Y+1, r21	; 0x01
    1652:	48 83       	st	Y, r20
    1654:	c3 58       	subi	r28, 0x83	; 131
    1656:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1658:	c5 57       	subi	r28, 0x75	; 117
    165a:	df 4f       	sbci	r29, 0xFF	; 255
    165c:	b9 83       	std	Y+1, r27	; 0x01
    165e:	a8 83       	st	Y, r26
    1660:	cb 58       	subi	r28, 0x8B	; 139
    1662:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1664:	e7 96       	adiw	r28, 0x37	; 55
    1666:	2e ad       	ldd	r18, Y+62	; 0x3e
    1668:	3f ad       	ldd	r19, Y+63	; 0x3f
    166a:	e7 97       	sbiw	r28, 0x37	; 55
    166c:	23 2b       	or	r18, r19
    166e:	09 f4       	brne	.+2      	; 0x1672 <USB_ProcessHIDReport+0xf6>
    1670:	b9 c2       	rjmp	.+1394   	; 0x1be4 <USB_ProcessHIDReport+0x668>
	{
		uint8_t  HIDReportItem  = *ReportData;
    1672:	d6 01       	movw	r26, r12
    1674:	bc 91       	ld	r27, X
    1676:	ef 96       	adiw	r28, 0x3f	; 63
    1678:	bf af       	std	Y+63, r27	; 0x3f
    167a:	ef 97       	sbiw	r28, 0x3f	; 63
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    167c:	8b 2f       	mov	r24, r27
    167e:	83 70       	andi	r24, 0x03	; 3
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	49 f1       	breq	.+82     	; 0x16d6 <USB_ProcessHIDReport+0x15a>
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	99 f0       	breq	.+38     	; 0x16ae <USB_ProcessHIDReport+0x132>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	c9 f1       	breq	.+114    	; 0x16fe <USB_ProcessHIDReport+0x182>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
    168c:	ef ef       	ldi	r30, 0xFF	; 255
    168e:	ce 1a       	sub	r12, r30
    1690:	de 0a       	sbc	r13, r30
		ReportSize--;
    1692:	e7 96       	adiw	r28, 0x37	; 55
    1694:	2e ad       	ldd	r18, Y+62	; 0x3e
    1696:	3f ad       	ldd	r19, Y+63	; 0x3f
    1698:	e7 97       	sbiw	r28, 0x37	; 55
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	31 09       	sbc	r19, r1
    169e:	e7 96       	adiw	r28, 0x37	; 55
    16a0:	3f af       	std	Y+63, r19	; 0x3f
    16a2:	2e af       	std	Y+62, r18	; 0x3e
    16a4:	e7 97       	sbiw	r28, 0x37	; 55
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
    16a6:	81 2c       	mov	r8, r1
    16a8:	91 2c       	mov	r9, r1
    16aa:	54 01       	movw	r10, r8
    16ac:	3a c0       	rjmp	.+116    	; 0x1722 <USB_ProcessHIDReport+0x1a6>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    16ae:	d6 01       	movw	r26, r12
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	8d 90       	ld	r8, X+
    16b4:	9d 90       	ld	r9, X+
    16b6:	ad 90       	ld	r10, X+
    16b8:	bc 90       	ld	r11, X
    16ba:	14 97       	sbiw	r26, 0x04	; 4
				ReportSize     -= 4;
    16bc:	e7 96       	adiw	r28, 0x37	; 55
    16be:	ee ad       	ldd	r30, Y+62	; 0x3e
    16c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    16c2:	e7 97       	sbiw	r28, 0x37	; 55
    16c4:	35 97       	sbiw	r30, 0x05	; 5
    16c6:	e7 96       	adiw	r28, 0x37	; 55
    16c8:	ff af       	std	Y+63, r31	; 0x3f
    16ca:	ee af       	std	Y+62, r30	; 0x3e
    16cc:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
    16ce:	f5 e0       	ldi	r31, 0x05	; 5
    16d0:	cf 0e       	add	r12, r31
    16d2:	d1 1c       	adc	r13, r1
				break;
    16d4:	26 c0       	rjmp	.+76     	; 0x1722 <USB_ProcessHIDReport+0x1a6>
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    16d6:	d6 01       	movw	r26, r12
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	8d 90       	ld	r8, X+
    16dc:	9c 90       	ld	r9, X
    16de:	12 97       	sbiw	r26, 0x02	; 2
    16e0:	a1 2c       	mov	r10, r1
    16e2:	b1 2c       	mov	r11, r1
				ReportSize     -= 2;
    16e4:	e7 96       	adiw	r28, 0x37	; 55
    16e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    16e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    16ea:	e7 97       	sbiw	r28, 0x37	; 55
    16ec:	33 97       	sbiw	r30, 0x03	; 3
    16ee:	e7 96       	adiw	r28, 0x37	; 55
    16f0:	ff af       	std	Y+63, r31	; 0x3f
    16f2:	ee af       	std	Y+62, r30	; 0x3e
    16f4:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
    16f6:	f3 e0       	ldi	r31, 0x03	; 3
    16f8:	cf 0e       	add	r12, r31
    16fa:	d1 1c       	adc	r13, r1
				break;
    16fc:	12 c0       	rjmp	.+36     	; 0x1722 <USB_ProcessHIDReport+0x1a6>
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    16fe:	d6 01       	movw	r26, r12
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	8c 90       	ld	r8, X
    1704:	91 2c       	mov	r9, r1
    1706:	a1 2c       	mov	r10, r1
    1708:	b1 2c       	mov	r11, r1
				ReportSize     -= 1;
    170a:	e7 96       	adiw	r28, 0x37	; 55
    170c:	ee ad       	ldd	r30, Y+62	; 0x3e
    170e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1710:	e7 97       	sbiw	r28, 0x37	; 55
    1712:	32 97       	sbiw	r30, 0x02	; 2
    1714:	e7 96       	adiw	r28, 0x37	; 55
    1716:	ff af       	std	Y+63, r31	; 0x3f
    1718:	ee af       	std	Y+62, r30	; 0x3e
    171a:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
    171c:	f2 e0       	ldi	r31, 0x02	; 2
    171e:	cf 0e       	add	r12, r31
    1720:	d1 1c       	adc	r13, r1
    1722:	ef 96       	adiw	r28, 0x3f	; 63
    1724:	1f ad       	ldd	r17, Y+63	; 0x3f
    1726:	ef 97       	sbiw	r28, 0x3f	; 63
    1728:	1c 7f       	andi	r17, 0xFC	; 252
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    172a:	14 36       	cpi	r17, 0x64	; 100
    172c:	09 f4       	brne	.+2      	; 0x1730 <USB_ProcessHIDReport+0x1b4>
    172e:	9d c0       	rjmp	.+314    	; 0x186a <USB_ProcessHIDReport+0x2ee>
    1730:	88 f5       	brcc	.+98     	; 0x1794 <USB_ProcessHIDReport+0x218>
    1732:	14 32       	cpi	r17, 0x24	; 36
    1734:	09 f4       	brne	.+2      	; 0x1738 <USB_ProcessHIDReport+0x1bc>
    1736:	83 c0       	rjmp	.+262    	; 0x183e <USB_ProcessHIDReport+0x2c2>
    1738:	b0 f4       	brcc	.+44     	; 0x1766 <USB_ProcessHIDReport+0x1ea>
    173a:	18 30       	cpi	r17, 0x08	; 8
    173c:	09 f4       	brne	.+2      	; 0x1740 <USB_ProcessHIDReport+0x1c4>
    173e:	ff c0       	rjmp	.+510    	; 0x193e <USB_ProcessHIDReport+0x3c2>
    1740:	48 f4       	brcc	.+18     	; 0x1754 <USB_ProcessHIDReport+0x1d8>
    1742:	14 30       	cpi	r17, 0x04	; 4
    1744:	09 f0       	breq	.+2      	; 0x1748 <USB_ProcessHIDReport+0x1cc>
    1746:	3d c2       	rjmp	.+1146   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1748:	d7 01       	movw	r26, r14
    174a:	12 96       	adiw	r26, 0x02	; 2
    174c:	9c 92       	st	X, r9
    174e:	8e 92       	st	-X, r8
    1750:	11 97       	sbiw	r26, 0x01	; 1
				break;
    1752:	37 c2       	rjmp	.+1134   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1754:	14 31       	cpi	r17, 0x14	; 20
    1756:	09 f4       	brne	.+2      	; 0x175a <USB_ProcessHIDReport+0x1de>
    1758:	6c c0       	rjmp	.+216    	; 0x1832 <USB_ProcessHIDReport+0x2b6>
    175a:	18 31       	cpi	r17, 0x18	; 24
    175c:	09 f0       	breq	.+2      	; 0x1760 <USB_ProcessHIDReport+0x1e4>
    175e:	31 c2       	rjmp	.+1122   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
				break;
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
    1760:	24 01       	movw	r4, r8
    1762:	35 01       	movw	r6, r10
    1764:	2e c2       	rjmp	.+1116   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1766:	14 33       	cpi	r17, 0x34	; 52
    1768:	09 f4       	brne	.+2      	; 0x176c <USB_ProcessHIDReport+0x1f0>
    176a:	71 c0       	rjmp	.+226    	; 0x184e <USB_ProcessHIDReport+0x2d2>
    176c:	50 f4       	brcc	.+20     	; 0x1782 <USB_ProcessHIDReport+0x206>
    176e:	18 32       	cpi	r17, 0x28	; 40
    1770:	09 f0       	breq	.+2      	; 0x1774 <USB_ProcessHIDReport+0x1f8>
    1772:	27 c2       	rjmp	.+1102   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
    1774:	ed 96       	adiw	r28, 0x3d	; 61
    1776:	8c ae       	std	Y+60, r8	; 0x3c
    1778:	9d ae       	std	Y+61, r9	; 0x3d
    177a:	ae ae       	std	Y+62, r10	; 0x3e
    177c:	bf ae       	std	Y+63, r11	; 0x3f
    177e:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
    1780:	20 c2       	rjmp	.+1088   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1782:	14 34       	cpi	r17, 0x44	; 68
    1784:	09 f4       	brne	.+2      	; 0x1788 <USB_ProcessHIDReport+0x20c>
    1786:	69 c0       	rjmp	.+210    	; 0x185a <USB_ProcessHIDReport+0x2de>
    1788:	14 35       	cpi	r17, 0x54	; 84
    178a:	09 f0       	breq	.+2      	; 0x178e <USB_ProcessHIDReport+0x212>
    178c:	1a c2       	rjmp	.+1076   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    178e:	f7 01       	movw	r30, r14
    1790:	81 86       	std	Z+9, r8	; 0x09
				break;
    1792:	17 c2       	rjmp	.+1070   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1794:	14 39       	cpi	r17, 0x94	; 148
    1796:	09 f4       	brne	.+2      	; 0x179a <USB_ProcessHIDReport+0x21e>
    1798:	70 c0       	rjmp	.+224    	; 0x187a <USB_ProcessHIDReport+0x2fe>
    179a:	78 f4       	brcc	.+30     	; 0x17ba <USB_ProcessHIDReport+0x23e>
    179c:	10 38       	cpi	r17, 0x80	; 128
    179e:	e1 f0       	breq	.+56     	; 0x17d8 <USB_ProcessHIDReport+0x25c>
    17a0:	30 f4       	brcc	.+12     	; 0x17ae <USB_ProcessHIDReport+0x232>
    17a2:	14 37       	cpi	r17, 0x74	; 116
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <USB_ProcessHIDReport+0x22c>
    17a6:	0d c2       	rjmp	.+1050   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    17a8:	f7 01       	movw	r30, r14
    17aa:	80 82       	st	Z, r8
				break;
    17ac:	0a c2       	rjmp	.+1044   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    17ae:	14 38       	cpi	r17, 0x84	; 132
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <USB_ProcessHIDReport+0x238>
    17b2:	67 c0       	rjmp	.+206    	; 0x1882 <USB_ProcessHIDReport+0x306>
    17b4:	10 39       	cpi	r17, 0x90	; 144
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <USB_ProcessHIDReport+0x25c>
    17b8:	04 c2       	rjmp	.+1032   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
    17ba:	10 3b       	cpi	r17, 0xB0	; 176
    17bc:	69 f0       	breq	.+26     	; 0x17d8 <USB_ProcessHIDReport+0x25c>
    17be:	30 f4       	brcc	.+12     	; 0x17cc <USB_ProcessHIDReport+0x250>
    17c0:	10 3a       	cpi	r17, 0xA0	; 160
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <USB_ProcessHIDReport+0x24a>
    17c4:	ca c0       	rjmp	.+404    	; 0x195a <USB_ProcessHIDReport+0x3de>
    17c6:	14 3a       	cpi	r17, 0xA4	; 164
    17c8:	c9 f0       	breq	.+50     	; 0x17fc <USB_ProcessHIDReport+0x280>
    17ca:	fb c1       	rjmp	.+1014   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
    17cc:	14 3b       	cpi	r17, 0xB4	; 180
    17ce:	39 f1       	breq	.+78     	; 0x181e <USB_ProcessHIDReport+0x2a2>
    17d0:	10 3c       	cpi	r17, 0xC0	; 192
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <USB_ProcessHIDReport+0x25a>
    17d4:	2a c1       	rjmp	.+596    	; 0x1a2a <USB_ProcessHIDReport+0x4ae>
    17d6:	f5 c1       	rjmp	.+1002   	; 0x1bc2 <USB_ProcessHIDReport+0x646>
    17d8:	ee 96       	adiw	r28, 0x3e	; 62
    17da:	1f ae       	std	Y+63, r1	; 0x3f
    17dc:	ee 97       	sbiw	r28, 0x3e	; 62
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    17de:	a5 01       	movw	r20, r10
    17e0:	94 01       	movw	r18, r8
    17e2:	21 70       	andi	r18, 0x01	; 1
    17e4:	33 27       	eor	r19, r19
    17e6:	44 27       	eor	r20, r20
    17e8:	55 27       	eor	r21, r21
    17ea:	cb 57       	subi	r28, 0x7B	; 123
    17ec:	df 4f       	sbci	r29, 0xFF	; 255
    17ee:	28 83       	st	Y, r18
    17f0:	39 83       	std	Y+1, r19	; 0x01
    17f2:	4a 83       	std	Y+2, r20	; 0x02
    17f4:	5b 83       	std	Y+3, r21	; 0x03
    17f6:	c5 58       	subi	r28, 0x85	; 133
    17f8:	d0 40       	sbci	r29, 0x00	; 0
    17fa:	47 c1       	rjmp	.+654    	; 0x1a8a <USB_ProcessHIDReport+0x50e>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    17fc:	ce 01       	movw	r24, r28
    17fe:	4d 96       	adiw	r24, 0x1d	; 29
    1800:	e8 16       	cp	r14, r24
    1802:	f9 06       	cpc	r15, r25
    1804:	09 f4       	brne	.+2      	; 0x1808 <USB_ProcessHIDReport+0x28c>
    1806:	f4 c1       	rjmp	.+1000   	; 0x1bf0 <USB_ProcessHIDReport+0x674>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    1808:	c7 01       	movw	r24, r14
    180a:	4c 96       	adiw	r24, 0x1c	; 28
    180c:	2a e2       	ldi	r18, 0x2A	; 42
    180e:	f7 01       	movw	r30, r14
    1810:	dc 01       	movw	r26, r24
    1812:	01 90       	ld	r0, Z+
    1814:	0d 92       	st	X+, r0
    1816:	2a 95       	dec	r18
    1818:	e1 f7       	brne	.-8      	; 0x1812 <USB_ProcessHIDReport+0x296>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    181a:	7c 01       	movw	r14, r24
				break;
    181c:	d2 c1       	rjmp	.+932    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    181e:	ce 01       	movw	r24, r28
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	8e 15       	cp	r24, r14
    1824:	9f 05       	cpc	r25, r15
    1826:	09 f4       	brne	.+2      	; 0x182a <USB_ProcessHIDReport+0x2ae>
    1828:	e5 c1       	rjmp	.+970    	; 0x1bf4 <USB_ProcessHIDReport+0x678>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    182a:	3c e1       	ldi	r19, 0x1C	; 28
    182c:	e3 1a       	sub	r14, r19
    182e:	f1 08       	sbc	r15, r1
				break;
    1830:	c8 c1       	rjmp	.+912    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1832:	f7 01       	movw	r30, r14
    1834:	82 86       	std	Z+10, r8	; 0x0a
    1836:	93 86       	std	Z+11, r9	; 0x0b
    1838:	a4 86       	std	Z+12, r10	; 0x0c
    183a:	b5 86       	std	Z+13, r11	; 0x0d
				break;
    183c:	c2 c1       	rjmp	.+900    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    183e:	d7 01       	movw	r26, r14
    1840:	1e 96       	adiw	r26, 0x0e	; 14
    1842:	8d 92       	st	X+, r8
    1844:	9d 92       	st	X+, r9
    1846:	ad 92       	st	X+, r10
    1848:	bc 92       	st	X, r11
    184a:	51 97       	sbiw	r26, 0x11	; 17
				break;
    184c:	ba c1       	rjmp	.+884    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    184e:	f7 01       	movw	r30, r14
    1850:	82 8a       	std	Z+18, r8	; 0x12
    1852:	93 8a       	std	Z+19, r9	; 0x13
    1854:	a4 8a       	std	Z+20, r10	; 0x14
    1856:	b5 8a       	std	Z+21, r11	; 0x15
				break;
    1858:	b4 c1       	rjmp	.+872    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    185a:	d7 01       	movw	r26, r14
    185c:	56 96       	adiw	r26, 0x16	; 22
    185e:	8d 92       	st	X+, r8
    1860:	9d 92       	st	X+, r9
    1862:	ad 92       	st	X+, r10
    1864:	bc 92       	st	X, r11
    1866:	59 97       	sbiw	r26, 0x19	; 25
				break;
    1868:	ac c1       	rjmp	.+856    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    186a:	d7 01       	movw	r26, r14
    186c:	15 96       	adiw	r26, 0x05	; 5
    186e:	8d 92       	st	X+, r8
    1870:	9d 92       	st	X+, r9
    1872:	ad 92       	st	X+, r10
    1874:	bc 92       	st	X, r11
    1876:	18 97       	sbiw	r26, 0x08	; 8
				break;
    1878:	a4 c1       	rjmp	.+840    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    187a:	d7 01       	movw	r26, r14
    187c:	5a 96       	adiw	r26, 0x1a	; 26
    187e:	8c 92       	st	X, r8
				break;
    1880:	a0 c1       	rjmp	.+832    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    1882:	98 2d       	mov	r25, r8
    1884:	f7 01       	movw	r30, r14
    1886:	83 8e       	std	Z+27, r8	; 0x1b

				if (ParserData->UsingReportIDs)
    1888:	cd 57       	subi	r28, 0x7D	; 125
    188a:	df 4f       	sbci	r29, 0xFF	; 255
    188c:	a8 81       	ld	r26, Y
    188e:	b9 81       	ldd	r27, Y+1	; 0x01
    1890:	c3 58       	subi	r28, 0x83	; 131
    1892:	d0 40       	sbci	r29, 0x00	; 0
    1894:	8c 91       	ld	r24, X
    1896:	88 23       	and	r24, r24
    1898:	09 f4       	brne	.+2      	; 0x189c <USB_ProcessHIDReport+0x320>
    189a:	41 c0       	rjmp	.+130    	; 0x191e <USB_ProcessHIDReport+0x3a2>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    189c:	c5 57       	subi	r28, 0x75	; 117
    189e:	df 4f       	sbci	r29, 0xFF	; 255
    18a0:	e8 81       	ld	r30, Y
    18a2:	f9 81       	ldd	r31, Y+1	; 0x01
    18a4:	cb 58       	subi	r28, 0x8B	; 139
    18a6:	d0 40       	sbci	r29, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	f1 01       	movw	r30, r2
    18ac:	e0 57       	subi	r30, 0x70	; 112
    18ae:	fc 4f       	sbci	r31, 0xFC	; 252
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	28 17       	cp	r18, r24
    18b6:	b8 f4       	brcc	.+46     	; 0x18e6 <USB_ProcessHIDReport+0x36a>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    18b8:	a9 01       	movw	r20, r18
    18ba:	60 81       	ld	r22, Z
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	37 96       	adiw	r30, 0x07	; 7
    18c2:	96 13       	cpse	r25, r22
    18c4:	f7 cf       	rjmp	.-18     	; 0x18b4 <USB_ProcessHIDReport+0x338>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    18c6:	27 e0       	ldi	r18, 0x07	; 7
    18c8:	24 9f       	mul	r18, r20
    18ca:	c0 01       	movw	r24, r0
    18cc:	25 9f       	mul	r18, r21
    18ce:	90 0d       	add	r25, r0
    18d0:	11 24       	eor	r1, r1
    18d2:	80 57       	subi	r24, 0x70	; 112
    18d4:	9c 4f       	sbci	r25, 0xFC	; 252
    18d6:	91 01       	movw	r18, r2
    18d8:	28 0f       	add	r18, r24
    18da:	39 1f       	adc	r19, r25
    18dc:	e9 96       	adiw	r28, 0x39	; 57
    18de:	3f af       	std	Y+63, r19	; 0x3f
    18e0:	2e af       	std	Y+62, r18	; 0x3e
    18e2:	e9 97       	sbiw	r28, 0x39	; 57
    18e4:	1c c0       	rjmp	.+56     	; 0x191e <USB_ProcessHIDReport+0x3a2>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    18e6:	8a 30       	cpi	r24, 0x0A	; 10
    18e8:	09 f4       	brne	.+2      	; 0x18ec <USB_ProcessHIDReport+0x370>
    18ea:	8e c1       	rjmp	.+796    	; 0x1c08 <USB_ProcessHIDReport+0x68c>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	98 0f       	add	r25, r24
    18f0:	c1 58       	subi	r28, 0x81	; 129
    18f2:	df 4f       	sbci	r29, 0xFF	; 255
    18f4:	a8 81       	ld	r26, Y
    18f6:	b9 81       	ldd	r27, Y+1	; 0x01
    18f8:	cf 57       	subi	r28, 0x7F	; 127
    18fa:	d0 40       	sbci	r29, 0x00	; 0
    18fc:	9c 93       	st	X, r25
    18fe:	97 e0       	ldi	r25, 0x07	; 7
    1900:	91 01       	movw	r18, r2
    1902:	98 9f       	mul	r25, r24
    1904:	20 0d       	add	r18, r0
    1906:	31 1d       	adc	r19, r1
    1908:	11 24       	eor	r1, r1
    190a:	f9 01       	movw	r30, r18
    190c:	e0 57       	subi	r30, 0x70	; 112
    190e:	fc 4f       	sbci	r31, 0xFC	; 252
    1910:	e9 96       	adiw	r28, 0x39	; 57
    1912:	ff af       	std	Y+63, r31	; 0x3f
    1914:	ee af       	std	Y+62, r30	; 0x3e
    1916:	e9 97       	sbiw	r28, 0x39	; 57
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1918:	11 92       	st	Z+, r1
    191a:	9a 95       	dec	r25
    191c:	e9 f7       	brne	.-6      	; 0x1918 <USB_ProcessHIDReport+0x39c>
					}
				}

				ParserData->UsingReportIDs = true;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	cd 57       	subi	r28, 0x7D	; 125
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	a8 81       	ld	r26, Y
    1926:	b9 81       	ldd	r27, Y+1	; 0x01
    1928:	c3 58       	subi	r28, 0x83	; 131
    192a:	d0 40       	sbci	r29, 0x00	; 0
    192c:	8c 93       	st	X, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    192e:	f7 01       	movw	r30, r14
    1930:	83 8d       	ldd	r24, Z+27	; 0x1b
    1932:	e9 96       	adiw	r28, 0x39	; 57
    1934:	ae ad       	ldd	r26, Y+62	; 0x3e
    1936:	bf ad       	ldd	r27, Y+63	; 0x3f
    1938:	e9 97       	sbiw	r28, 0x39	; 57
    193a:	8c 93       	st	X, r24
				break;
    193c:	42 c1       	rjmp	.+644    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    193e:	08 30       	cpi	r16, 0x08	; 8
    1940:	09 f4       	brne	.+2      	; 0x1944 <USB_ProcessHIDReport+0x3c8>
    1942:	5a c1       	rjmp	.+692    	; 0x1bf8 <USB_ProcessHIDReport+0x67c>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1944:	fe 01       	movw	r30, r28
    1946:	ed 59       	subi	r30, 0x9D	; 157
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	e0 0f       	add	r30, r16
    194c:	f1 1d       	adc	r31, r1
    194e:	e0 0f       	add	r30, r16
    1950:	f1 1d       	adc	r31, r1
    1952:	91 82       	std	Z+1, r9	; 0x01
    1954:	80 82       	st	Z, r8
    1956:	0f 5f       	subi	r16, 0xFF	; 255
				break;
    1958:	34 c1       	rjmp	.+616    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    195a:	e5 96       	adiw	r28, 0x35	; 53
    195c:	ee ad       	ldd	r30, Y+62	; 0x3e
    195e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1960:	e5 97       	sbiw	r28, 0x35	; 53
    1962:	ef 2b       	or	r30, r31
    1964:	41 f4       	brne	.+16     	; 0x1976 <USB_ProcessHIDReport+0x3fa>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    1966:	91 01       	movw	r18, r2
    1968:	27 5b       	subi	r18, 0xB7	; 183
    196a:	3c 4f       	sbci	r19, 0xFC	; 252
    196c:	e5 96       	adiw	r28, 0x35	; 53
    196e:	3f af       	std	Y+63, r19	; 0x3f
    1970:	2e af       	std	Y+62, r18	; 0x3e
    1972:	e5 97       	sbiw	r28, 0x35	; 53
    1974:	1d c0       	rjmp	.+58     	; 0x19b0 <USB_ProcessHIDReport+0x434>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    1976:	f1 01       	movw	r30, r2
    1978:	e0 5b       	subi	r30, 0xB0	; 176
    197a:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
    197c:	85 81       	ldd	r24, Z+5	; 0x05
    197e:	96 81       	ldd	r25, Z+6	; 0x06
    1980:	89 2b       	or	r24, r25
    1982:	61 f0       	breq	.+24     	; 0x199c <USB_ProcessHIDReport+0x420>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1984:	c7 57       	subi	r28, 0x77	; 119
    1986:	df 4f       	sbci	r29, 0xFF	; 255
    1988:	48 81       	ld	r20, Y
    198a:	59 81       	ldd	r21, Y+1	; 0x01
    198c:	c9 58       	subi	r28, 0x89	; 137
    198e:	d0 40       	sbci	r29, 0x00	; 0
    1990:	e4 17       	cp	r30, r20
    1992:	f5 07       	cpc	r31, r21
    1994:	09 f4       	brne	.+2      	; 0x1998 <USB_ProcessHIDReport+0x41c>
    1996:	32 c1       	rjmp	.+612    	; 0x1bfc <USB_ProcessHIDReport+0x680>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1998:	37 96       	adiw	r30, 0x07	; 7
    199a:	f0 cf       	rjmp	.-32     	; 0x197c <USB_ProcessHIDReport+0x400>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    199c:	e5 96       	adiw	r28, 0x35	; 53
    199e:	8e ad       	ldd	r24, Y+62	; 0x3e
    19a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19a2:	e5 97       	sbiw	r28, 0x35	; 53
    19a4:	96 83       	std	Z+6, r25	; 0x06
    19a6:	85 83       	std	Z+5, r24	; 0x05
    19a8:	e5 96       	adiw	r28, 0x35	; 53
    19aa:	ff af       	std	Y+63, r31	; 0x3f
    19ac:	ee af       	std	Y+62, r30	; 0x3e
    19ae:	e5 97       	sbiw	r28, 0x35	; 53
				}

				CurrCollectionPath->Type       = ReportItemData;
    19b0:	e5 96       	adiw	r28, 0x35	; 53
    19b2:	ae ad       	ldd	r26, Y+62	; 0x3e
    19b4:	bf ad       	ldd	r27, Y+63	; 0x3f
    19b6:	e5 97       	sbiw	r28, 0x35	; 53
    19b8:	8c 92       	st	X, r8
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    19ba:	f7 01       	movw	r30, r14
    19bc:	81 81       	ldd	r24, Z+1	; 0x01
    19be:	92 81       	ldd	r25, Z+2	; 0x02
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	9c 93       	st	X, r25
    19c4:	8e 93       	st	-X, r24
    19c6:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
    19c8:	00 23       	and	r16, r16
    19ca:	a9 f0       	breq	.+42     	; 0x19f6 <USB_ProcessHIDReport+0x47a>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    19cc:	a5 96       	adiw	r28, 0x25	; 37
    19ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    19d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d2:	a5 97       	sbiw	r28, 0x25	; 37
    19d4:	14 96       	adiw	r26, 0x04	; 4
    19d6:	9c 93       	st	X, r25
    19d8:	8e 93       	st	-X, r24
    19da:	13 97       	sbiw	r26, 0x03	; 3
    19dc:	fe 01       	movw	r30, r28
    19de:	ed 59       	subi	r30, 0x9D	; 157
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 0; i < UsageListSize; i++)
    19e2:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
    19e4:	22 81       	ldd	r18, Z+2	; 0x02
    19e6:	33 81       	ldd	r19, Z+3	; 0x03
    19e8:	21 93       	st	Z+, r18
    19ea:	31 93       	st	Z+, r19

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	08 13       	cpse	r16, r24
    19f0:	f9 cf       	rjmp	.-14     	; 0x19e4 <USB_ProcessHIDReport+0x468>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    19f2:	01 50       	subi	r16, 0x01	; 1
    19f4:	e6 c0       	rjmp	.+460    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    19f6:	ed 96       	adiw	r28, 0x3d	; 61
    19f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    19fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a00:	ed 97       	sbiw	r28, 0x3d	; 61
    1a02:	24 15       	cp	r18, r4
    1a04:	35 05       	cpc	r19, r5
    1a06:	46 05       	cpc	r20, r6
    1a08:	57 05       	cpc	r21, r7
    1a0a:	08 f4       	brcc	.+2      	; 0x1a0e <USB_ProcessHIDReport+0x492>
    1a0c:	da c0       	rjmp	.+436    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1a0e:	e5 96       	adiw	r28, 0x35	; 53
    1a10:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a12:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a14:	e5 97       	sbiw	r28, 0x35	; 53
    1a16:	14 96       	adiw	r26, 0x04	; 4
    1a18:	5c 92       	st	X, r5
    1a1a:	4e 92       	st	-X, r4
    1a1c:	13 97       	sbiw	r26, 0x03	; 3
    1a1e:	bf ef       	ldi	r27, 0xFF	; 255
    1a20:	4b 1a       	sub	r4, r27
    1a22:	5b 0a       	sbc	r5, r27
    1a24:	6b 0a       	sbc	r6, r27
    1a26:	7b 0a       	sbc	r7, r27
    1a28:	cc c0       	rjmp	.+408    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1a2a:	e5 96       	adiw	r28, 0x35	; 53
    1a2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a30:	e5 97       	sbiw	r28, 0x35	; 53
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <USB_ProcessHIDReport+0x4bc>
    1a36:	e4 c0       	rjmp	.+456    	; 0x1c00 <USB_ProcessHIDReport+0x684>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1a38:	25 81       	ldd	r18, Z+5	; 0x05
    1a3a:	36 81       	ldd	r19, Z+6	; 0x06
    1a3c:	e5 96       	adiw	r28, 0x35	; 53
    1a3e:	3f af       	std	Y+63, r19	; 0x3f
    1a40:	2e af       	std	Y+62, r18	; 0x3e
    1a42:	e5 97       	sbiw	r28, 0x35	; 53
				break;
    1a44:	be c0       	rjmp	.+380    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1a46:	d1 01       	movw	r26, r2
    1a48:	ea e2       	ldi	r30, 0x2A	; 42
    1a4a:	e8 9f       	mul	r30, r24
    1a4c:	a0 0d       	add	r26, r0
    1a4e:	b1 1d       	adc	r27, r1
    1a50:	11 24       	eor	r1, r1
    1a52:	11 96       	adiw	r26, 0x01	; 1
    1a54:	fe 01       	movw	r30, r28
    1a56:	f9 96       	adiw	r30, 0x39	; 57
    1a58:	8a e2       	ldi	r24, 0x2A	; 42
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	0d 92       	st	X+, r0
    1a5e:	8a 95       	dec	r24
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <USB_ProcessHIDReport+0x4de>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1a62:	cb 57       	subi	r28, 0x7B	; 123
    1a64:	df 4f       	sbci	r29, 0xFF	; 255
    1a66:	28 81       	ld	r18, Y
    1a68:	39 81       	ldd	r19, Y+1	; 0x01
    1a6a:	4a 81       	ldd	r20, Y+2	; 0x02
    1a6c:	5b 81       	ldd	r21, Y+3	; 0x03
    1a6e:	c5 58       	subi	r28, 0x85	; 133
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	23 2b       	or	r18, r19
    1a74:	24 2b       	or	r18, r20
    1a76:	25 2b       	or	r18, r21
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <USB_ProcessHIDReport+0x500>
    1a7a:	97 c0       	rjmp	.+302    	; 0x1baa <USB_ProcessHIDReport+0x62e>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1a7c:	ee 96       	adiw	r28, 0x3e	; 62
    1a7e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a80:	ee 97       	sbiw	r28, 0x3e	; 62
    1a82:	bf 5f       	subi	r27, 0xFF	; 255
    1a84:	ee 96       	adiw	r28, 0x3e	; 62
    1a86:	bf af       	std	Y+63, r27	; 0x3f
    1a88:	ee 97       	sbiw	r28, 0x3e	; 62
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a8e:	ee 96       	adiw	r28, 0x3e	; 62
    1a90:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a92:	ee 97       	sbiw	r28, 0x3e	; 62
    1a94:	f8 17       	cp	r31, r24
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <USB_ProcessHIDReport+0x51e>
    1a98:	94 c0       	rjmp	.+296    	; 0x1bc2 <USB_ProcessHIDReport+0x646>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1a9a:	8a e1       	ldi	r24, 0x1A	; 26
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	de 01       	movw	r26, r28
    1aa0:	af 5b       	subi	r26, 0xBF	; 191
    1aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa4:	01 90       	ld	r0, Z+
    1aa6:	0d 92       	st	X+, r0
    1aa8:	8a 95       	dec	r24
    1aaa:	e1 f7       	brne	.-8      	; 0x1aa4 <USB_ProcessHIDReport+0x528>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1aac:	9d ae       	std	Y+61, r9	; 0x3d
    1aae:	8c ae       	std	Y+60, r8	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
    1ab0:	e5 96       	adiw	r28, 0x35	; 53
    1ab2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ab4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ab6:	e5 97       	sbiw	r28, 0x35	; 53
    1ab8:	21 96       	adiw	r28, 0x01	; 1
    1aba:	5f af       	std	Y+63, r21	; 0x3f
    1abc:	4e af       	std	Y+62, r20	; 0x3e
    1abe:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1ac0:	d7 01       	movw	r26, r14
    1ac2:	5b 96       	adiw	r26, 0x1b	; 27
    1ac4:	8c 91       	ld	r24, X
    1ac6:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
    1ac8:	00 23       	and	r16, r16
    1aca:	a9 f0       	breq	.+42     	; 0x1af6 <USB_ProcessHIDReport+0x57a>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1acc:	a5 96       	adiw	r28, 0x25	; 37
    1ace:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ad0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ad2:	a5 97       	sbiw	r28, 0x25	; 37
    1ad4:	26 96       	adiw	r28, 0x06	; 6
    1ad6:	9f af       	std	Y+63, r25	; 0x3f
    1ad8:	8e af       	std	Y+62, r24	; 0x3e
    1ada:	26 97       	sbiw	r28, 0x06	; 6
    1adc:	fe 01       	movw	r30, r28
    1ade:	ed 59       	subi	r30, 0x9D	; 157
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 0; i < UsageListSize; i++)
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
    1ae4:	22 81       	ldd	r18, Z+2	; 0x02
    1ae6:	33 81       	ldd	r19, Z+3	; 0x03
    1ae8:	21 93       	st	Z+, r18
    1aea:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	08 13       	cpse	r16, r24
    1af0:	f9 cf       	rjmp	.-14     	; 0x1ae4 <USB_ProcessHIDReport+0x568>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1af2:	01 50       	subi	r16, 0x01	; 1
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <USB_ProcessHIDReport+0x5a2>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1af6:	ed 96       	adiw	r28, 0x3d	; 61
    1af8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1afa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1afc:	4e ad       	ldd	r20, Y+62	; 0x3e
    1afe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b00:	ed 97       	sbiw	r28, 0x3d	; 61
    1b02:	24 15       	cp	r18, r4
    1b04:	35 05       	cpc	r19, r5
    1b06:	46 05       	cpc	r20, r6
    1b08:	57 05       	cpc	r21, r7
    1b0a:	48 f0       	brcs	.+18     	; 0x1b1e <USB_ProcessHIDReport+0x5a2>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1b0c:	26 96       	adiw	r28, 0x06	; 6
    1b0e:	5f ae       	std	Y+63, r5	; 0x3f
    1b10:	4e ae       	std	Y+62, r4	; 0x3e
    1b12:	26 97       	sbiw	r28, 0x06	; 6
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	43 1a       	sub	r4, r19
    1b18:	53 0a       	sbc	r5, r19
    1b1a:	63 0a       	sbc	r6, r19
    1b1c:	73 0a       	sbc	r7, r19
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1b1e:	10 38       	cpi	r17, 0x80	; 128
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <USB_ProcessHIDReport+0x5aa>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1b22:	1b ae       	std	Y+59, r1	; 0x3b
    1b24:	07 c0       	rjmp	.+14     	; 0x1b34 <USB_ProcessHIDReport+0x5b8>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1b26:	10 39       	cpi	r17, 0x90	; 144
    1b28:	19 f4       	brne	.+6      	; 0x1b30 <USB_ProcessHIDReport+0x5b4>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	4b af       	std	Y+59, r20	; 0x3b
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <USB_ProcessHIDReport+0x5b8>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1b30:	52 e0       	ldi	r21, 0x02	; 2
    1b32:	5b af       	std	Y+59, r21	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1b34:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b36:	e9 96       	adiw	r28, 0x39	; 57
    1b38:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b3c:	e9 97       	sbiw	r28, 0x39	; 57
    1b3e:	e8 0f       	add	r30, r24
    1b40:	f1 1d       	adc	r31, r1
    1b42:	e8 0f       	add	r30, r24
    1b44:	f1 1d       	adc	r31, r1
    1b46:	81 81       	ldd	r24, Z+1	; 0x01
    1b48:	92 81       	ldd	r25, Z+2	; 0x02
    1b4a:	9a af       	std	Y+58, r25	; 0x3a
    1b4c:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1b4e:	d7 01       	movw	r26, r14
    1b50:	2c 91       	ld	r18, X
    1b52:	81 81       	ldd	r24, Z+1	; 0x01
    1b54:	92 81       	ldd	r25, Z+2	; 0x02
    1b56:	82 0f       	add	r24, r18
    1b58:	91 1d       	adc	r25, r1
    1b5a:	92 83       	std	Z+2, r25	; 0x02
    1b5c:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1b5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b60:	e9 96       	adiw	r28, 0x39	; 57
    1b62:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b64:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b66:	e9 97       	sbiw	r28, 0x39	; 57
    1b68:	e8 0f       	add	r30, r24
    1b6a:	f1 1d       	adc	r31, r1
    1b6c:	e8 0f       	add	r30, r24
    1b6e:	f1 1d       	adc	r31, r1
    1b70:	cf 57       	subi	r28, 0x7F	; 127
    1b72:	df 4f       	sbci	r29, 0xFF	; 255
    1b74:	a8 81       	ld	r26, Y
    1b76:	b9 81       	ldd	r27, Y+1	; 0x01
    1b78:	c1 58       	subi	r28, 0x81	; 129
    1b7a:	d0 40       	sbci	r29, 0x00	; 0
    1b7c:	2d 91       	ld	r18, X+
    1b7e:	3c 91       	ld	r19, X
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	92 81       	ldd	r25, Z+2	; 0x02
    1b84:	82 17       	cp	r24, r18
    1b86:	93 07       	cpc	r25, r19
    1b88:	08 f4       	brcc	.+2      	; 0x1b8c <USB_ProcessHIDReport+0x610>
    1b8a:	c9 01       	movw	r24, r18
    1b8c:	cf 57       	subi	r28, 0x7F	; 127
    1b8e:	df 4f       	sbci	r29, 0xFF	; 255
    1b90:	e8 81       	ld	r30, Y
    1b92:	f9 81       	ldd	r31, Y+1	; 0x01
    1b94:	c1 58       	subi	r28, 0x81	; 129
    1b96:	d0 40       	sbci	r29, 0x00	; 0
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1b9c:	d1 01       	movw	r26, r2
    1b9e:	8c 91       	ld	r24, X
    1ba0:	84 31       	cpi	r24, 0x14	; 20
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <USB_ProcessHIDReport+0x62a>
    1ba4:	50 cf       	rjmp	.-352    	; 0x1a46 <USB_ProcessHIDReport+0x4ca>
					  return HID_PARSE_InsufficientReportItems;
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	30 c0       	rjmp	.+96     	; 0x1c0a <USB_ProcessHIDReport+0x68e>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1baa:	ce 01       	movw	r24, r28
    1bac:	c9 96       	adiw	r24, 0x39	; 57
    1bae:	0e 94 69 05 	call	0xad2	; 0xad2 <CALLBACK_HIDParser_FilterHIDReportItem>
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <USB_ProcessHIDReport+0x63c>
    1bb6:	62 cf       	rjmp	.-316    	; 0x1a7c <USB_ProcessHIDReport+0x500>
					  ParserData->TotalReportItems++;
    1bb8:	d1 01       	movw	r26, r2
    1bba:	8c 91       	ld	r24, X
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	8c 93       	st	X, r24
    1bc0:	5d cf       	rjmp	.-326    	; 0x1a7c <USB_ProcessHIDReport+0x500>
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1bc2:	ef 96       	adiw	r28, 0x3f	; 63
    1bc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bc6:	ef 97       	sbiw	r28, 0x3f	; 63
    1bc8:	8c 70       	andi	r24, 0x0C	; 12
    1bca:	09 f0       	breq	.+2      	; 0x1bce <USB_ProcessHIDReport+0x652>
    1bcc:	4b cd       	rjmp	.-1386   	; 0x1664 <USB_ProcessHIDReport+0xe8>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    1bce:	ed 96       	adiw	r28, 0x3d	; 61
    1bd0:	1c ae       	std	Y+60, r1	; 0x3c
    1bd2:	1d ae       	std	Y+61, r1	; 0x3d
    1bd4:	1e ae       	std	Y+62, r1	; 0x3e
    1bd6:	1f ae       	std	Y+63, r1	; 0x3f
    1bd8:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    1bda:	41 2c       	mov	r4, r1
    1bdc:	51 2c       	mov	r5, r1
    1bde:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    1be0:	00 e0       	ldi	r16, 0x00	; 0
    1be2:	40 cd       	rjmp	.-1408   	; 0x1664 <USB_ProcessHIDReport+0xe8>
		}
	}

	if (!(ParserData->TotalReportItems))
    1be4:	d1 01       	movw	r26, r2
    1be6:	8c 91       	ld	r24, X
    1be8:	88 23       	and	r24, r24
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <USB_ProcessHIDReport+0x688>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	0d c0       	rjmp	.+26     	; 0x1c0a <USB_ProcessHIDReport+0x68e>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0b c0       	rjmp	.+22     	; 0x1c0a <USB_ProcessHIDReport+0x68e>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <USB_ProcessHIDReport+0x68e>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    1bf8:	86 e0       	ldi	r24, 0x06	; 6
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <USB_ProcessHIDReport+0x68e>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1bfc:	85 e0       	ldi	r24, 0x05	; 5
    1bfe:	05 c0       	rjmp	.+10     	; 0x1c0a <USB_ProcessHIDReport+0x68e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1c00:	84 e0       	ldi	r24, 0x04	; 4
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <USB_ProcessHIDReport+0x68e>
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;
    1c04:	88 e0       	ldi	r24, 0x08	; 8
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <USB_ProcessHIDReport+0x68e>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    1c08:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1c0a:	c4 57       	subi	r28, 0x74	; 116
    1c0c:	df 4f       	sbci	r29, 0xFF	; 255
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	bf 90       	pop	r11
    1c2a:	af 90       	pop	r10
    1c2c:	9f 90       	pop	r9
    1c2e:	8f 90       	pop	r8
    1c30:	7f 90       	pop	r7
    1c32:	6f 90       	pop	r6
    1c34:	5f 90       	pop	r5
    1c36:	4f 90       	pop	r4
    1c38:	3f 90       	pop	r3
    1c3a:	2f 90       	pop	r2
    1c3c:	08 95       	ret

00001c3e <DCOMP_HID_Host_NextHIDInterface>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1c3e:	fc 01       	movw	r30, r24
    1c40:	21 81       	ldd	r18, Z+1	; 0x01
    1c42:	24 30       	cpi	r18, 0x04	; 4
    1c44:	29 f4       	brne	.+10     	; 0x1c50 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1c46:	85 81       	ldd	r24, Z+5	; 0x05
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	08 95       	ret
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	08 95       	ret

00001c54 <DCOMP_HID_Host_NextHIDDescriptor>:
    1c54:	fc 01       	movw	r30, r24
    1c56:	81 81       	ldd	r24, Z+1	; 0x01
    1c58:	81 32       	cpi	r24, 0x21	; 33
    1c5a:	21 f0       	breq	.+8      	; 0x1c64 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    1c5c:	84 30       	cpi	r24, 0x04	; 4
    1c5e:	21 f0       	breq	.+8      	; 0x1c68 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	08 95       	ret
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	08 95       	ret
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	08 95       	ret

00001c6c <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	21 81       	ldd	r18, Z+1	; 0x01
    1c70:	25 30       	cpi	r18, 0x05	; 5
    1c72:	31 f4       	brne	.+12     	; 0x1c80 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	54 d9       	rcall	.-3416   	; 0xf20 <Pipe_IsEndpointBound>
    1c78:	88 23       	and	r24, r24
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	08 95       	ret
    1c80:	24 30       	cpi	r18, 0x04	; 4
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	08 95       	ret
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	08 95       	ret

00001c8c <HID_Host_ConfigurePipes>:
    1c8c:	2f 92       	push	r2
    1c8e:	3f 92       	push	r3
    1c90:	4f 92       	push	r4
    1c92:	5f 92       	push	r5
    1c94:	6f 92       	push	r6
    1c96:	7f 92       	push	r7
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <HID_Host_ConfigurePipes+0x26>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <HID_Host_ConfigurePipes+0x28>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	7a 83       	std	Y+2, r23	; 0x02
    1cba:	69 83       	std	Y+1, r22	; 0x01
    1cbc:	5c 83       	std	Y+4, r21	; 0x04
    1cbe:	4b 83       	std	Y+3, r20	; 0x03
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	37 96       	adiw	r30, 0x07	; 7
    1cc4:	2c e0       	ldi	r18, 0x0C	; 12
    1cc6:	df 01       	movw	r26, r30
    1cc8:	1d 92       	st	X+, r1
    1cca:	2a 95       	dec	r18
    1ccc:	e9 f7       	brne	.-6      	; 0x1cc8 <HID_Host_ConfigurePipes+0x3c>
    1cce:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd2:	11 81       	ldd	r17, Z+1	; 0x01
    1cd4:	12 30       	cpi	r17, 0x02	; 2
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <HID_Host_ConfigurePipes+0x4e>
    1cd8:	7d c0       	rjmp	.+250    	; 0x1dd4 <HID_Host_ConfigurePipes+0x148>
    1cda:	6c 01       	movw	r12, r24
    1cdc:	41 2c       	mov	r4, r1
    1cde:	51 2c       	mov	r5, r1
    1ce0:	61 2c       	mov	r6, r1
    1ce2:	71 2c       	mov	r7, r1
    1ce4:	81 2c       	mov	r8, r1
    1ce6:	91 2c       	mov	r9, r1
    1ce8:	a1 2c       	mov	r10, r1
    1cea:	b1 2c       	mov	r11, r1
    1cec:	a1 14       	cp	r10, r1
    1cee:	b1 04       	cpc	r11, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <HID_Host_ConfigurePipes+0x68>
    1cf2:	74 c0       	rjmp	.+232    	; 0x1ddc <HID_Host_ConfigurePipes+0x150>
    1cf4:	81 14       	cp	r8, r1
    1cf6:	91 04       	cpc	r9, r1
    1cf8:	91 f4       	brne	.+36     	; 0x1d1e <HID_Host_ConfigurePipes+0x92>
    1cfa:	61 14       	cp	r6, r1
    1cfc:	71 04       	cpc	r7, r1
    1cfe:	79 f0       	breq	.+30     	; 0x1d1e <HID_Host_ConfigurePipes+0x92>
    1d00:	46 e3       	ldi	r20, 0x36	; 54
    1d02:	5e e0       	ldi	r21, 0x0E	; 14
    1d04:	be 01       	movw	r22, r28
    1d06:	6d 5f       	subi	r22, 0xFD	; 253
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	b2 da       	rcall	.-2716   	; 0x1274 <USB_GetNextDescriptorComp>
    1d10:	88 23       	and	r24, r24
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <HID_Host_ConfigurePipes+0x8a>
    1d14:	8f c0       	rjmp	.+286    	; 0x1e34 <HID_Host_ConfigurePipes+0x1a8>
    1d16:	a1 14       	cp	r10, r1
    1d18:	b1 04       	cpc	r11, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <HID_Host_ConfigurePipes+0x92>
    1d1c:	63 c0       	rjmp	.+198    	; 0x1de4 <HID_Host_ConfigurePipes+0x158>
    1d1e:	ff 24       	eor	r15, r15
    1d20:	f3 94       	inc	r15
    1d22:	22 24       	eor	r2, r2
    1d24:	23 94       	inc	r2
    1d26:	f6 01       	movw	r30, r12
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 11       	cpse	r24, r15
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <HID_Host_ConfigurePipes+0xc0>
    1d2e:	d5 01       	movw	r26, r10
    1d30:	14 96       	adiw	r26, 0x04	; 4
    1d32:	0d 91       	ld	r16, X+
    1d34:	1c 91       	ld	r17, X
    1d36:	15 97       	sbiw	r26, 0x05	; 5
    1d38:	12 96       	adiw	r26, 0x02	; 2
    1d3a:	2c 91       	ld	r18, X
    1d3c:	12 97       	sbiw	r26, 0x02	; 2
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	16 96       	adiw	r26, 0x06	; 6
    1d42:	3c 90       	ld	r3, X
    1d44:	12 87       	std	Z+10, r17	; 0x0a
    1d46:	01 87       	std	Z+9, r16	; 0x09
    1d48:	40 e1       	ldi	r20, 0x10	; 16
    1d4a:	16 c0       	rjmp	.+44     	; 0x1d78 <HID_Host_ConfigurePipes+0xec>
    1d4c:	f6 01       	movw	r30, r12
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	8f 11       	cpse	r24, r15
    1d52:	20 c0       	rjmp	.+64     	; 0x1d94 <HID_Host_ConfigurePipes+0x108>
    1d54:	81 14       	cp	r8, r1
    1d56:	91 04       	cpc	r9, r1
    1d58:	e9 f0       	breq	.+58     	; 0x1d94 <HID_Host_ConfigurePipes+0x108>
    1d5a:	d4 01       	movw	r26, r8
    1d5c:	14 96       	adiw	r26, 0x04	; 4
    1d5e:	0d 91       	ld	r16, X+
    1d60:	1c 91       	ld	r17, X
    1d62:	15 97       	sbiw	r26, 0x05	; 5
    1d64:	12 96       	adiw	r26, 0x02	; 2
    1d66:	2c 91       	ld	r18, X
    1d68:	12 97       	sbiw	r26, 0x02	; 2
    1d6a:	83 81       	ldd	r24, Z+3	; 0x03
    1d6c:	16 96       	adiw	r26, 0x06	; 6
    1d6e:	3c 90       	ld	r3, X
    1d70:	14 87       	std	Z+12, r17	; 0x0c
    1d72:	03 87       	std	Z+11, r16	; 0x0b
    1d74:	26 86       	std	Z+14, r2	; 0x0e
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	81 11       	cpse	r24, r1
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <HID_Host_ConfigurePipes+0xf4>
    1d7c:	e1 2c       	mov	r14, r1
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <HID_Host_ConfigurePipes+0xf8>
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	e8 2e       	mov	r14, r24
    1d84:	63 e0       	ldi	r22, 0x03	; 3
    1d86:	8f 2d       	mov	r24, r15
    1d88:	5b d8       	rcall	.-3914   	; 0xe40 <Pipe_ConfigurePipe>
    1d8a:	88 23       	and	r24, r24
    1d8c:	29 f1       	breq	.+74     	; 0x1dd8 <HID_Host_ConfigurePipes+0x14c>
    1d8e:	31 10       	cpse	r3, r1
    1d90:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1d94:	f3 94       	inc	r15
    1d96:	b7 e0       	ldi	r27, 0x07	; 7
    1d98:	fb 12       	cpse	r15, r27
    1d9a:	c5 cf       	rjmp	.-118    	; 0x1d26 <HID_Host_ConfigurePipes+0x9a>
    1d9c:	f3 01       	movw	r30, r6
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	d6 01       	movw	r26, r12
    1da2:	18 96       	adiw	r26, 0x08	; 8
    1da4:	8c 93       	st	X, r24
    1da6:	18 97       	sbiw	r26, 0x08	; 8
    1da8:	f2 01       	movw	r30, r4
    1daa:	87 81       	ldd	r24, Z+7	; 0x07
    1dac:	90 85       	ldd	r25, Z+8	; 0x08
    1dae:	51 96       	adiw	r26, 0x11	; 17
    1db0:	9c 93       	st	X, r25
    1db2:	8e 93       	st	-X, r24
    1db4:	50 97       	sbiw	r26, 0x10	; 16
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	d3 01       	movw	r26, r6
    1dba:	16 96       	adiw	r26, 0x06	; 6
    1dbc:	9c 91       	ld	r25, X
    1dbe:	91 11       	cpse	r25, r1
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <HID_Host_ConfigurePipes+0x138>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	f6 01       	movw	r30, r12
    1dc6:	85 87       	std	Z+13, r24	; 0x0d
    1dc8:	88 e0       	ldi	r24, 0x08	; 8
    1dca:	82 8b       	std	Z+18, r24	; 0x12
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	87 83       	std	Z+7, r24	; 0x07
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	3c c0       	rjmp	.+120    	; 0x1e4c <HID_Host_ConfigurePipes+0x1c0>
    1dd4:	11 e0       	ldi	r17, 0x01	; 1
    1dd6:	3a c0       	rjmp	.+116    	; 0x1e4c <HID_Host_ConfigurePipes+0x1c0>
    1dd8:	13 e0       	ldi	r17, 0x03	; 3
    1dda:	38 c0       	rjmp	.+112    	; 0x1e4c <HID_Host_ConfigurePipes+0x1c0>
    1ddc:	61 14       	cp	r6, r1
    1dde:	71 04       	cpc	r7, r1
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <HID_Host_ConfigurePipes+0x158>
    1de2:	8e cf       	rjmp	.-228    	; 0x1d00 <HID_Host_ConfigurePipes+0x74>
    1de4:	81 14       	cp	r8, r1
    1de6:	91 04       	cpc	r9, r1
    1de8:	71 f5       	brne	.+92     	; 0x1e46 <HID_Host_ConfigurePipes+0x1ba>
    1dea:	4f e1       	ldi	r20, 0x1F	; 31
    1dec:	5e e0       	ldi	r21, 0x0E	; 14
    1dee:	be 01       	movw	r22, r28
    1df0:	6d 5f       	subi	r22, 0xFD	; 253
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	ce 01       	movw	r24, r28
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	3d da       	rcall	.-2950   	; 0x1274 <USB_GetNextDescriptorComp>
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	27 c0       	rjmp	.+78     	; 0x1e4c <HID_Host_ConfigurePipes+0x1c0>
    1dfe:	6b 80       	ldd	r6, Y+3	; 0x03
    1e00:	7c 80       	ldd	r7, Y+4	; 0x04
    1e02:	f6 01       	movw	r30, r12
    1e04:	84 81       	ldd	r24, Z+4	; 0x04
    1e06:	81 11       	cpse	r24, r1
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <HID_Host_ConfigurePipes+0x19c>
    1e0a:	4a e2       	ldi	r20, 0x2A	; 42
    1e0c:	5e e0       	ldi	r21, 0x0E	; 14
    1e0e:	be 01       	movw	r22, r28
    1e10:	6d 5f       	subi	r22, 0xFD	; 253
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	ce 01       	movw	r24, r28
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	2d da       	rcall	.-2982   	; 0x1274 <USB_GetNextDescriptorComp>
    1e1a:	81 11       	cpse	r24, r1
    1e1c:	17 c0       	rjmp	.+46     	; 0x1e4c <HID_Host_ConfigurePipes+0x1c0>
    1e1e:	4b 80       	ldd	r4, Y+3	; 0x03
    1e20:	5c 80       	ldd	r5, Y+4	; 0x04
    1e22:	e0 e0       	ldi	r30, 0x00	; 0
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <HID_Host_ConfigurePipes+0x1b6>
    1e28:	d3 01       	movw	r26, r6
    1e2a:	17 96       	adiw	r26, 0x07	; 7
    1e2c:	9c 91       	ld	r25, X
    1e2e:	89 13       	cpse	r24, r25
    1e30:	dc cf       	rjmp	.-72     	; 0x1dea <HID_Host_ConfigurePipes+0x15e>
    1e32:	eb cf       	rjmp	.-42     	; 0x1e0a <HID_Host_ConfigurePipes+0x17e>
    1e34:	eb 81       	ldd	r30, Y+3	; 0x03
    1e36:	fc 81       	ldd	r31, Y+4	; 0x04
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	87 fd       	sbrc	r24, 7
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <HID_Host_ConfigurePipes+0x1b6>
    1e3e:	4f 01       	movw	r8, r30
    1e40:	f5 01       	movw	r30, r10
    1e42:	5f 01       	movw	r10, r30
    1e44:	53 cf       	rjmp	.-346    	; 0x1cec <HID_Host_ConfigurePipes+0x60>
    1e46:	a1 2c       	mov	r10, r1
    1e48:	b1 2c       	mov	r11, r1
    1e4a:	69 cf       	rjmp	.-302    	; 0x1d1e <HID_Host_ConfigurePipes+0x92>
    1e4c:	81 2f       	mov	r24, r17
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	9f 90       	pop	r9
    1e6c:	8f 90       	pop	r8
    1e6e:	7f 90       	pop	r7
    1e70:	6f 90       	pop	r6
    1e72:	5f 90       	pop	r5
    1e74:	4f 90       	pop	r4
    1e76:	3f 90       	pop	r3
    1e78:	2f 90       	pop	r2
    1e7a:	08 95       	ret

00001e7c <HID_Host_SetReportProtocol>:
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1e92:	ed b6       	in	r14, 0x3d	; 61
    1e94:	fe b6       	in	r15, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1e96:	dc 01       	movw	r26, r24
    1e98:	50 96       	adiw	r26, 0x10	; 16
    1e9a:	2d 91       	ld	r18, X+
    1e9c:	3c 91       	ld	r19, X
    1e9e:	51 97       	sbiw	r26, 0x11	; 17
    1ea0:	ed b7       	in	r30, 0x3d	; 61
    1ea2:	fe b7       	in	r31, 0x3e	; 62
    1ea4:	e2 1b       	sub	r30, r18
    1ea6:	f3 0b       	sbc	r31, r19
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	fe bf       	out	0x3e, r31	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	ed bf       	out	0x3d, r30	; 61
    1eb2:	8d b7       	in	r24, 0x3d	; 61
    1eb4:	9e b7       	in	r25, 0x3e	; 62
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	6c 01       	movw	r12, r24

	USB_ControlRequest = (USB_Request_Header_t)
    1eba:	18 96       	adiw	r26, 0x08	; 8
    1ebc:	8c 91       	ld	r24, X
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	41 e8       	ldi	r20, 0x81	; 129
    1ec2:	40 93 12 05 	sts	0x0512, r20	; 0x800512 <USB_ControlRequest>
    1ec6:	46 e0       	ldi	r20, 0x06	; 6
    1ec8:	40 93 13 05 	sts	0x0513, r20	; 0x800513 <USB_ControlRequest+0x1>
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	52 e2       	ldi	r21, 0x22	; 34
    1ed0:	50 93 15 05 	sts	0x0515, r21	; 0x800515 <USB_ControlRequest+0x3>
    1ed4:	40 93 14 05 	sts	0x0514, r20	; 0x800514 <USB_ControlRequest+0x2>
    1ed8:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <USB_ControlRequest+0x5>
    1edc:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <USB_ControlRequest+0x4>
    1ee0:	30 93 19 05 	sts	0x0519, r19	; 0x800519 <USB_ControlRequest+0x7>
    1ee4:	20 93 18 05 	sts	0x0518, r18	; 0x800518 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1ee8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1eec:	c6 01       	movw	r24, r12
    1eee:	1b da       	rcall	.-3018   	; 0x1326 <USB_Host_SendControlRequest>
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	51 c0       	rjmp	.+162    	; 0x1f96 <HID_Host_SetReportProtocol+0x11a>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1ef4:	d8 01       	movw	r26, r16
    1ef6:	1f 96       	adiw	r26, 0x0f	; 15
    1ef8:	8c 91       	ld	r24, X
    1efa:	1f 97       	sbiw	r26, 0x0f	; 15
    1efc:	88 23       	and	r24, r24
    1efe:	f1 f0       	breq	.+60     	; 0x1f3c <HID_Host_SetReportProtocol+0xc0>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1f00:	18 96       	adiw	r26, 0x08	; 8
    1f02:	8c 91       	ld	r24, X
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	21 e2       	ldi	r18, 0x21	; 33
    1f08:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <USB_ControlRequest>
    1f0c:	2b e0       	ldi	r18, 0x0B	; 11
    1f0e:	20 93 13 05 	sts	0x0513, r18	; 0x800513 <USB_ControlRequest+0x1>
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <USB_ControlRequest+0x3>
    1f1a:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <USB_ControlRequest+0x2>
    1f1e:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <USB_ControlRequest+0x5>
    1f22:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <USB_ControlRequest+0x4>
    1f26:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <USB_ControlRequest+0x7>
    1f2a:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <USB_ControlRequest+0x6>
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	f9 d9       	rcall	.-3086   	; 0x1326 <USB_Host_SendControlRequest>
    1f34:	81 11       	cpse	r24, r1
    1f36:	2f c0       	rjmp	.+94     	; 0x1f96 <HID_Host_SetReportProtocol+0x11a>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1f38:	f8 01       	movw	r30, r16
    1f3a:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	15 96       	adiw	r26, 0x05	; 5
    1f40:	4d 91       	ld	r20, X+
    1f42:	5c 91       	ld	r21, X
    1f44:	16 97       	sbiw	r26, 0x06	; 6
    1f46:	41 15       	cp	r20, r1
    1f48:	51 05       	cpc	r21, r1
    1f4a:	21 f1       	breq	.+72     	; 0x1f94 <HID_Host_SetReportProtocol+0x118>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1f4c:	50 96       	adiw	r26, 0x10	; 16
    1f4e:	6d 91       	ld	r22, X+
    1f50:	7c 91       	ld	r23, X
    1f52:	51 97       	sbiw	r26, 0x11	; 17
    1f54:	c6 01       	movw	r24, r12
    1f56:	12 db       	rcall	.-2524   	; 0x157c <USB_ProcessHIDReport>
    1f58:	88 23       	and	r24, r24
    1f5a:	11 f0       	breq	.+4      	; 0x1f60 <HID_Host_SetReportProtocol+0xe4>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1f5c:	80 68       	ori	r24, 0x80	; 128
    1f5e:	1b c0       	rjmp	.+54     	; 0x1f96 <HID_Host_SetReportProtocol+0x11a>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1f60:	d8 01       	movw	r26, r16
    1f62:	15 96       	adiw	r26, 0x05	; 5
    1f64:	ed 91       	ld	r30, X+
    1f66:	fc 91       	ld	r31, X
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	ea 52       	subi	r30, 0x2A	; 42
    1f6c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1f72:	ac 01       	movw	r20, r24
    1f74:	47 70       	andi	r20, 0x07	; 7
    1f76:	55 27       	eor	r21, r21
    1f78:	21 e0       	ldi	r18, 0x01	; 1
    1f7a:	45 2b       	or	r20, r21
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <HID_Host_SetReportProtocol+0x104>
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	33 e0       	ldi	r19, 0x03	; 3
    1f82:	96 95       	lsr	r25
    1f84:	87 95       	ror	r24
    1f86:	3a 95       	dec	r19
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <HID_Host_SetReportProtocol+0x106>
    1f8a:	82 0f       	add	r24, r18
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <HID_Host_SetReportProtocol+0x11a>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1f94:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	fe be       	out	0x3e, r15	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	ed be       	out	0x3d, r14	; 61
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	08 95       	ret

00001fb2 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1fb2:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1fb6:	95 ff       	sbrs	r25, 5
    1fb8:	fc cf       	rjmp	.-8      	; 0x1fb2 <Serial_putchar>
				UDR1 = DataByte;
    1fba:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	08 95       	ret

00001fc4 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1fc4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1fc8:	87 ff       	sbrs	r24, 7
    1fca:	08 c0       	rjmp	.+16     	; 0x1fdc <Serial_getchar+0x18>
    1fcc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1fd0:	87 ff       	sbrs	r24, 7
    1fd2:	07 c0       	rjmp	.+14     	; 0x1fe2 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1fd4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	08 95       	ret
	  return _FDEV_EOF;
    1fdc:	8e ef       	ldi	r24, 0xFE	; 254
    1fde:	9f ef       	ldi	r25, 0xFF	; 255
    1fe0:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1fe6:	08 95       	ret

00001fe8 <__tablejump2__>:
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	00 24       	eor	r0, r0
    1fee:	00 1c       	adc	r0, r0
    1ff0:	0b be       	out	0x3b, r0	; 59
    1ff2:	07 90       	elpm	r0, Z+
    1ff4:	f6 91       	elpm	r31, Z
    1ff6:	e0 2d       	mov	r30, r0
    1ff8:	09 94       	ijmp

00001ffa <printf_P>:
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	ae 01       	movw	r20, r28
    2008:	49 5f       	subi	r20, 0xF9	; 249
    200a:	5f 4f       	sbci	r21, 0xFF	; 255
    200c:	da 01       	movw	r26, r20
    200e:	6d 91       	ld	r22, X+
    2010:	7d 91       	ld	r23, X+
    2012:	ad 01       	movw	r20, r26
    2014:	09 e2       	ldi	r16, 0x29	; 41
    2016:	15 e0       	ldi	r17, 0x05	; 5
    2018:	f8 01       	movw	r30, r16
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	dc 01       	movw	r26, r24
    2020:	13 96       	adiw	r26, 0x03	; 3
    2022:	2c 91       	ld	r18, X
    2024:	13 97       	sbiw	r26, 0x03	; 3
    2026:	28 60       	ori	r18, 0x08	; 8
    2028:	13 96       	adiw	r26, 0x03	; 3
    202a:	2c 93       	st	X, r18
    202c:	3e d0       	rcall	.+124    	; 0x20aa <vfprintf>
    202e:	d8 01       	movw	r26, r16
    2030:	12 96       	adiw	r26, 0x02	; 2
    2032:	ed 91       	ld	r30, X+
    2034:	fc 91       	ld	r31, X
    2036:	13 97       	sbiw	r26, 0x03	; 3
    2038:	23 81       	ldd	r18, Z+3	; 0x03
    203a:	27 7f       	andi	r18, 0xF7	; 247
    203c:	23 83       	std	Z+3, r18	; 0x03
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <puts_P>:
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	8c 01       	movw	r16, r24
    2052:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <__iob+0x2>
    2056:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <__iob+0x3>
    205a:	83 81       	ldd	r24, Z+3	; 0x03
    205c:	81 ff       	sbrs	r24, 1
    205e:	1b c0       	rjmp	.+54     	; 0x2096 <puts_P+0x4e>
    2060:	d0 e0       	ldi	r29, 0x00	; 0
    2062:	c0 e0       	ldi	r28, 0x00	; 0
    2064:	f8 01       	movw	r30, r16
    2066:	84 91       	lpm	r24, Z
    2068:	60 91 2b 05 	lds	r22, 0x052B	; 0x80052b <__iob+0x2>
    206c:	70 91 2c 05 	lds	r23, 0x052C	; 0x80052c <__iob+0x3>
    2070:	db 01       	movw	r26, r22
    2072:	18 96       	adiw	r26, 0x08	; 8
    2074:	ed 91       	ld	r30, X+
    2076:	fc 91       	ld	r31, X
    2078:	19 97       	sbiw	r26, 0x09	; 9
    207a:	88 23       	and	r24, r24
    207c:	41 f0       	breq	.+16     	; 0x208e <puts_P+0x46>
    207e:	09 95       	icall
    2080:	89 2b       	or	r24, r25
    2082:	11 f0       	breq	.+4      	; 0x2088 <puts_P+0x40>
    2084:	df ef       	ldi	r29, 0xFF	; 255
    2086:	cf ef       	ldi	r28, 0xFF	; 255
    2088:	0f 5f       	subi	r16, 0xFF	; 255
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	eb cf       	rjmp	.-42     	; 0x2064 <puts_P+0x1c>
    208e:	8a e0       	ldi	r24, 0x0A	; 10
    2090:	09 95       	icall
    2092:	89 2b       	or	r24, r25
    2094:	19 f0       	breq	.+6      	; 0x209c <puts_P+0x54>
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <puts_P+0x58>
    209c:	8d 2f       	mov	r24, r29
    209e:	9c 2f       	mov	r25, r28
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <vfprintf>:
    20aa:	2f 92       	push	r2
    20ac:	3f 92       	push	r3
    20ae:	4f 92       	push	r4
    20b0:	5f 92       	push	r5
    20b2:	6f 92       	push	r6
    20b4:	7f 92       	push	r7
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	2b 97       	sbiw	r28, 0x0b	; 11
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	6c 01       	movw	r12, r24
    20e0:	7b 01       	movw	r14, r22
    20e2:	8a 01       	movw	r16, r20
    20e4:	fc 01       	movw	r30, r24
    20e6:	17 82       	std	Z+7, r1	; 0x07
    20e8:	16 82       	std	Z+6, r1	; 0x06
    20ea:	83 81       	ldd	r24, Z+3	; 0x03
    20ec:	81 ff       	sbrs	r24, 1
    20ee:	bf c1       	rjmp	.+894    	; 0x246e <__stack+0x36f>
    20f0:	ce 01       	movw	r24, r28
    20f2:	01 96       	adiw	r24, 0x01	; 1
    20f4:	3c 01       	movw	r6, r24
    20f6:	f6 01       	movw	r30, r12
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	f7 01       	movw	r30, r14
    20fc:	93 fd       	sbrc	r25, 3
    20fe:	85 91       	lpm	r24, Z+
    2100:	93 ff       	sbrs	r25, 3
    2102:	81 91       	ld	r24, Z+
    2104:	7f 01       	movw	r14, r30
    2106:	88 23       	and	r24, r24
    2108:	09 f4       	brne	.+2      	; 0x210c <__stack+0xd>
    210a:	ad c1       	rjmp	.+858    	; 0x2466 <__stack+0x367>
    210c:	85 32       	cpi	r24, 0x25	; 37
    210e:	39 f4       	brne	.+14     	; 0x211e <__stack+0x1f>
    2110:	93 fd       	sbrc	r25, 3
    2112:	85 91       	lpm	r24, Z+
    2114:	93 ff       	sbrs	r25, 3
    2116:	81 91       	ld	r24, Z+
    2118:	7f 01       	movw	r14, r30
    211a:	85 32       	cpi	r24, 0x25	; 37
    211c:	21 f4       	brne	.+8      	; 0x2126 <__stack+0x27>
    211e:	b6 01       	movw	r22, r12
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	d6 d1       	rcall	.+940    	; 0x24d0 <fputc>
    2124:	e8 cf       	rjmp	.-48     	; 0x20f6 <vfprintf+0x4c>
    2126:	91 2c       	mov	r9, r1
    2128:	21 2c       	mov	r2, r1
    212a:	31 2c       	mov	r3, r1
    212c:	ff e1       	ldi	r31, 0x1F	; 31
    212e:	f3 15       	cp	r31, r3
    2130:	d8 f0       	brcs	.+54     	; 0x2168 <__stack+0x69>
    2132:	8b 32       	cpi	r24, 0x2B	; 43
    2134:	79 f0       	breq	.+30     	; 0x2154 <__stack+0x55>
    2136:	38 f4       	brcc	.+14     	; 0x2146 <__stack+0x47>
    2138:	80 32       	cpi	r24, 0x20	; 32
    213a:	79 f0       	breq	.+30     	; 0x215a <__stack+0x5b>
    213c:	83 32       	cpi	r24, 0x23	; 35
    213e:	a1 f4       	brne	.+40     	; 0x2168 <__stack+0x69>
    2140:	23 2d       	mov	r18, r3
    2142:	20 61       	ori	r18, 0x10	; 16
    2144:	1d c0       	rjmp	.+58     	; 0x2180 <__stack+0x81>
    2146:	8d 32       	cpi	r24, 0x2D	; 45
    2148:	61 f0       	breq	.+24     	; 0x2162 <__stack+0x63>
    214a:	80 33       	cpi	r24, 0x30	; 48
    214c:	69 f4       	brne	.+26     	; 0x2168 <__stack+0x69>
    214e:	23 2d       	mov	r18, r3
    2150:	21 60       	ori	r18, 0x01	; 1
    2152:	16 c0       	rjmp	.+44     	; 0x2180 <__stack+0x81>
    2154:	83 2d       	mov	r24, r3
    2156:	82 60       	ori	r24, 0x02	; 2
    2158:	38 2e       	mov	r3, r24
    215a:	e3 2d       	mov	r30, r3
    215c:	e4 60       	ori	r30, 0x04	; 4
    215e:	3e 2e       	mov	r3, r30
    2160:	2a c0       	rjmp	.+84     	; 0x21b6 <__stack+0xb7>
    2162:	f3 2d       	mov	r31, r3
    2164:	f8 60       	ori	r31, 0x08	; 8
    2166:	1d c0       	rjmp	.+58     	; 0x21a2 <__stack+0xa3>
    2168:	37 fc       	sbrc	r3, 7
    216a:	2d c0       	rjmp	.+90     	; 0x21c6 <__stack+0xc7>
    216c:	20 ed       	ldi	r18, 0xD0	; 208
    216e:	28 0f       	add	r18, r24
    2170:	2a 30       	cpi	r18, 0x0A	; 10
    2172:	40 f0       	brcs	.+16     	; 0x2184 <__stack+0x85>
    2174:	8e 32       	cpi	r24, 0x2E	; 46
    2176:	b9 f4       	brne	.+46     	; 0x21a6 <__stack+0xa7>
    2178:	36 fc       	sbrc	r3, 6
    217a:	75 c1       	rjmp	.+746    	; 0x2466 <__stack+0x367>
    217c:	23 2d       	mov	r18, r3
    217e:	20 64       	ori	r18, 0x40	; 64
    2180:	32 2e       	mov	r3, r18
    2182:	19 c0       	rjmp	.+50     	; 0x21b6 <__stack+0xb7>
    2184:	36 fe       	sbrs	r3, 6
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <__stack+0x95>
    2188:	8a e0       	ldi	r24, 0x0A	; 10
    218a:	98 9e       	mul	r9, r24
    218c:	20 0d       	add	r18, r0
    218e:	11 24       	eor	r1, r1
    2190:	92 2e       	mov	r9, r18
    2192:	11 c0       	rjmp	.+34     	; 0x21b6 <__stack+0xb7>
    2194:	ea e0       	ldi	r30, 0x0A	; 10
    2196:	2e 9e       	mul	r2, r30
    2198:	20 0d       	add	r18, r0
    219a:	11 24       	eor	r1, r1
    219c:	22 2e       	mov	r2, r18
    219e:	f3 2d       	mov	r31, r3
    21a0:	f0 62       	ori	r31, 0x20	; 32
    21a2:	3f 2e       	mov	r3, r31
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <__stack+0xb7>
    21a6:	8c 36       	cpi	r24, 0x6C	; 108
    21a8:	21 f4       	brne	.+8      	; 0x21b2 <__stack+0xb3>
    21aa:	83 2d       	mov	r24, r3
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	38 2e       	mov	r3, r24
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <__stack+0xb7>
    21b2:	88 36       	cpi	r24, 0x68	; 104
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <__stack+0xc7>
    21b6:	f7 01       	movw	r30, r14
    21b8:	93 fd       	sbrc	r25, 3
    21ba:	85 91       	lpm	r24, Z+
    21bc:	93 ff       	sbrs	r25, 3
    21be:	81 91       	ld	r24, Z+
    21c0:	7f 01       	movw	r14, r30
    21c2:	81 11       	cpse	r24, r1
    21c4:	b3 cf       	rjmp	.-154    	; 0x212c <__stack+0x2d>
    21c6:	98 2f       	mov	r25, r24
    21c8:	9f 7d       	andi	r25, 0xDF	; 223
    21ca:	95 54       	subi	r25, 0x45	; 69
    21cc:	93 30       	cpi	r25, 0x03	; 3
    21ce:	28 f4       	brcc	.+10     	; 0x21da <__stack+0xdb>
    21d0:	0c 5f       	subi	r16, 0xFC	; 252
    21d2:	1f 4f       	sbci	r17, 0xFF	; 255
    21d4:	9f e3       	ldi	r25, 0x3F	; 63
    21d6:	99 83       	std	Y+1, r25	; 0x01
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <__stack+0xf5>
    21da:	83 36       	cpi	r24, 0x63	; 99
    21dc:	31 f0       	breq	.+12     	; 0x21ea <__stack+0xeb>
    21de:	83 37       	cpi	r24, 0x73	; 115
    21e0:	71 f0       	breq	.+28     	; 0x21fe <__stack+0xff>
    21e2:	83 35       	cpi	r24, 0x53	; 83
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <__stack+0xe9>
    21e6:	55 c0       	rjmp	.+170    	; 0x2292 <__stack+0x193>
    21e8:	20 c0       	rjmp	.+64     	; 0x222a <__stack+0x12b>
    21ea:	f8 01       	movw	r30, r16
    21ec:	80 81       	ld	r24, Z
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	0e 5f       	subi	r16, 0xFE	; 254
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	88 24       	eor	r8, r8
    21f6:	83 94       	inc	r8
    21f8:	91 2c       	mov	r9, r1
    21fa:	53 01       	movw	r10, r6
    21fc:	12 c0       	rjmp	.+36     	; 0x2222 <__stack+0x123>
    21fe:	28 01       	movw	r4, r16
    2200:	f2 e0       	ldi	r31, 0x02	; 2
    2202:	4f 0e       	add	r4, r31
    2204:	51 1c       	adc	r5, r1
    2206:	f8 01       	movw	r30, r16
    2208:	a0 80       	ld	r10, Z
    220a:	b1 80       	ldd	r11, Z+1	; 0x01
    220c:	36 fe       	sbrs	r3, 6
    220e:	03 c0       	rjmp	.+6      	; 0x2216 <__stack+0x117>
    2210:	69 2d       	mov	r22, r9
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	02 c0       	rjmp	.+4      	; 0x221a <__stack+0x11b>
    2216:	6f ef       	ldi	r22, 0xFF	; 255
    2218:	7f ef       	ldi	r23, 0xFF	; 255
    221a:	c5 01       	movw	r24, r10
    221c:	4e d1       	rcall	.+668    	; 0x24ba <strnlen>
    221e:	4c 01       	movw	r8, r24
    2220:	82 01       	movw	r16, r4
    2222:	f3 2d       	mov	r31, r3
    2224:	ff 77       	andi	r31, 0x7F	; 127
    2226:	3f 2e       	mov	r3, r31
    2228:	15 c0       	rjmp	.+42     	; 0x2254 <__stack+0x155>
    222a:	28 01       	movw	r4, r16
    222c:	22 e0       	ldi	r18, 0x02	; 2
    222e:	42 0e       	add	r4, r18
    2230:	51 1c       	adc	r5, r1
    2232:	f8 01       	movw	r30, r16
    2234:	a0 80       	ld	r10, Z
    2236:	b1 80       	ldd	r11, Z+1	; 0x01
    2238:	36 fe       	sbrs	r3, 6
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <__stack+0x143>
    223c:	69 2d       	mov	r22, r9
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <__stack+0x147>
    2242:	6f ef       	ldi	r22, 0xFF	; 255
    2244:	7f ef       	ldi	r23, 0xFF	; 255
    2246:	c5 01       	movw	r24, r10
    2248:	2d d1       	rcall	.+602    	; 0x24a4 <strnlen_P>
    224a:	4c 01       	movw	r8, r24
    224c:	f3 2d       	mov	r31, r3
    224e:	f0 68       	ori	r31, 0x80	; 128
    2250:	3f 2e       	mov	r3, r31
    2252:	82 01       	movw	r16, r4
    2254:	33 fc       	sbrc	r3, 3
    2256:	19 c0       	rjmp	.+50     	; 0x228a <__stack+0x18b>
    2258:	82 2d       	mov	r24, r2
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	88 16       	cp	r8, r24
    225e:	99 06       	cpc	r9, r25
    2260:	a0 f4       	brcc	.+40     	; 0x228a <__stack+0x18b>
    2262:	b6 01       	movw	r22, r12
    2264:	80 e2       	ldi	r24, 0x20	; 32
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	33 d1       	rcall	.+614    	; 0x24d0 <fputc>
    226a:	2a 94       	dec	r2
    226c:	f5 cf       	rjmp	.-22     	; 0x2258 <__stack+0x159>
    226e:	f5 01       	movw	r30, r10
    2270:	37 fc       	sbrc	r3, 7
    2272:	85 91       	lpm	r24, Z+
    2274:	37 fe       	sbrs	r3, 7
    2276:	81 91       	ld	r24, Z+
    2278:	5f 01       	movw	r10, r30
    227a:	b6 01       	movw	r22, r12
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	28 d1       	rcall	.+592    	; 0x24d0 <fputc>
    2280:	21 10       	cpse	r2, r1
    2282:	2a 94       	dec	r2
    2284:	21 e0       	ldi	r18, 0x01	; 1
    2286:	82 1a       	sub	r8, r18
    2288:	91 08       	sbc	r9, r1
    228a:	81 14       	cp	r8, r1
    228c:	91 04       	cpc	r9, r1
    228e:	79 f7       	brne	.-34     	; 0x226e <__stack+0x16f>
    2290:	e1 c0       	rjmp	.+450    	; 0x2454 <__stack+0x355>
    2292:	84 36       	cpi	r24, 0x64	; 100
    2294:	11 f0       	breq	.+4      	; 0x229a <__stack+0x19b>
    2296:	89 36       	cpi	r24, 0x69	; 105
    2298:	39 f5       	brne	.+78     	; 0x22e8 <__stack+0x1e9>
    229a:	f8 01       	movw	r30, r16
    229c:	37 fe       	sbrs	r3, 7
    229e:	07 c0       	rjmp	.+14     	; 0x22ae <__stack+0x1af>
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0c 5f       	subi	r16, 0xFC	; 252
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	08 c0       	rjmp	.+16     	; 0x22be <__stack+0x1bf>
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	07 2e       	mov	r0, r23
    22b4:	00 0c       	add	r0, r0
    22b6:	88 0b       	sbc	r24, r24
    22b8:	99 0b       	sbc	r25, r25
    22ba:	0e 5f       	subi	r16, 0xFE	; 254
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	f3 2d       	mov	r31, r3
    22c0:	ff 76       	andi	r31, 0x6F	; 111
    22c2:	3f 2e       	mov	r3, r31
    22c4:	97 ff       	sbrs	r25, 7
    22c6:	09 c0       	rjmp	.+18     	; 0x22da <__stack+0x1db>
    22c8:	90 95       	com	r25
    22ca:	80 95       	com	r24
    22cc:	70 95       	com	r23
    22ce:	61 95       	neg	r22
    22d0:	7f 4f       	sbci	r23, 0xFF	; 255
    22d2:	8f 4f       	sbci	r24, 0xFF	; 255
    22d4:	9f 4f       	sbci	r25, 0xFF	; 255
    22d6:	f0 68       	ori	r31, 0x80	; 128
    22d8:	3f 2e       	mov	r3, r31
    22da:	2a e0       	ldi	r18, 0x0A	; 10
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	a3 01       	movw	r20, r6
    22e0:	33 d1       	rcall	.+614    	; 0x2548 <__ultoa_invert>
    22e2:	88 2e       	mov	r8, r24
    22e4:	86 18       	sub	r8, r6
    22e6:	44 c0       	rjmp	.+136    	; 0x2370 <__stack+0x271>
    22e8:	85 37       	cpi	r24, 0x75	; 117
    22ea:	31 f4       	brne	.+12     	; 0x22f8 <__stack+0x1f9>
    22ec:	23 2d       	mov	r18, r3
    22ee:	2f 7e       	andi	r18, 0xEF	; 239
    22f0:	b2 2e       	mov	r11, r18
    22f2:	2a e0       	ldi	r18, 0x0A	; 10
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	25 c0       	rjmp	.+74     	; 0x2342 <__stack+0x243>
    22f8:	93 2d       	mov	r25, r3
    22fa:	99 7f       	andi	r25, 0xF9	; 249
    22fc:	b9 2e       	mov	r11, r25
    22fe:	8f 36       	cpi	r24, 0x6F	; 111
    2300:	c1 f0       	breq	.+48     	; 0x2332 <__stack+0x233>
    2302:	18 f4       	brcc	.+6      	; 0x230a <__stack+0x20b>
    2304:	88 35       	cpi	r24, 0x58	; 88
    2306:	79 f0       	breq	.+30     	; 0x2326 <__stack+0x227>
    2308:	ae c0       	rjmp	.+348    	; 0x2466 <__stack+0x367>
    230a:	80 37       	cpi	r24, 0x70	; 112
    230c:	19 f0       	breq	.+6      	; 0x2314 <__stack+0x215>
    230e:	88 37       	cpi	r24, 0x78	; 120
    2310:	21 f0       	breq	.+8      	; 0x231a <__stack+0x21b>
    2312:	a9 c0       	rjmp	.+338    	; 0x2466 <__stack+0x367>
    2314:	e9 2f       	mov	r30, r25
    2316:	e0 61       	ori	r30, 0x10	; 16
    2318:	be 2e       	mov	r11, r30
    231a:	b4 fe       	sbrs	r11, 4
    231c:	0d c0       	rjmp	.+26     	; 0x2338 <__stack+0x239>
    231e:	fb 2d       	mov	r31, r11
    2320:	f4 60       	ori	r31, 0x04	; 4
    2322:	bf 2e       	mov	r11, r31
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <__stack+0x239>
    2326:	34 fe       	sbrs	r3, 4
    2328:	0a c0       	rjmp	.+20     	; 0x233e <__stack+0x23f>
    232a:	29 2f       	mov	r18, r25
    232c:	26 60       	ori	r18, 0x06	; 6
    232e:	b2 2e       	mov	r11, r18
    2330:	06 c0       	rjmp	.+12     	; 0x233e <__stack+0x23f>
    2332:	28 e0       	ldi	r18, 0x08	; 8
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <__stack+0x243>
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <__stack+0x243>
    233e:	20 e1       	ldi	r18, 0x10	; 16
    2340:	32 e0       	ldi	r19, 0x02	; 2
    2342:	f8 01       	movw	r30, r16
    2344:	b7 fe       	sbrs	r11, 7
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <__stack+0x257>
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	0c 5f       	subi	r16, 0xFC	; 252
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <__stack+0x263>
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 5f       	subi	r16, 0xFE	; 254
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	a3 01       	movw	r20, r6
    2364:	f1 d0       	rcall	.+482    	; 0x2548 <__ultoa_invert>
    2366:	88 2e       	mov	r8, r24
    2368:	86 18       	sub	r8, r6
    236a:	fb 2d       	mov	r31, r11
    236c:	ff 77       	andi	r31, 0x7F	; 127
    236e:	3f 2e       	mov	r3, r31
    2370:	36 fe       	sbrs	r3, 6
    2372:	0d c0       	rjmp	.+26     	; 0x238e <__stack+0x28f>
    2374:	23 2d       	mov	r18, r3
    2376:	2e 7f       	andi	r18, 0xFE	; 254
    2378:	a2 2e       	mov	r10, r18
    237a:	89 14       	cp	r8, r9
    237c:	58 f4       	brcc	.+22     	; 0x2394 <__stack+0x295>
    237e:	34 fe       	sbrs	r3, 4
    2380:	0b c0       	rjmp	.+22     	; 0x2398 <__stack+0x299>
    2382:	32 fc       	sbrc	r3, 2
    2384:	09 c0       	rjmp	.+18     	; 0x2398 <__stack+0x299>
    2386:	83 2d       	mov	r24, r3
    2388:	8e 7e       	andi	r24, 0xEE	; 238
    238a:	a8 2e       	mov	r10, r24
    238c:	05 c0       	rjmp	.+10     	; 0x2398 <__stack+0x299>
    238e:	b8 2c       	mov	r11, r8
    2390:	a3 2c       	mov	r10, r3
    2392:	03 c0       	rjmp	.+6      	; 0x239a <__stack+0x29b>
    2394:	b8 2c       	mov	r11, r8
    2396:	01 c0       	rjmp	.+2      	; 0x239a <__stack+0x29b>
    2398:	b9 2c       	mov	r11, r9
    239a:	a4 fe       	sbrs	r10, 4
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <__stack+0x2bd>
    239e:	fe 01       	movw	r30, r28
    23a0:	e8 0d       	add	r30, r8
    23a2:	f1 1d       	adc	r31, r1
    23a4:	80 81       	ld	r24, Z
    23a6:	80 33       	cpi	r24, 0x30	; 48
    23a8:	21 f4       	brne	.+8      	; 0x23b2 <__stack+0x2b3>
    23aa:	9a 2d       	mov	r25, r10
    23ac:	99 7e       	andi	r25, 0xE9	; 233
    23ae:	a9 2e       	mov	r10, r25
    23b0:	09 c0       	rjmp	.+18     	; 0x23c4 <__stack+0x2c5>
    23b2:	a2 fe       	sbrs	r10, 2
    23b4:	06 c0       	rjmp	.+12     	; 0x23c2 <__stack+0x2c3>
    23b6:	b3 94       	inc	r11
    23b8:	b3 94       	inc	r11
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <__stack+0x2c5>
    23bc:	8a 2d       	mov	r24, r10
    23be:	86 78       	andi	r24, 0x86	; 134
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <__stack+0x2c5>
    23c2:	b3 94       	inc	r11
    23c4:	a3 fc       	sbrc	r10, 3
    23c6:	10 c0       	rjmp	.+32     	; 0x23e8 <__stack+0x2e9>
    23c8:	a0 fe       	sbrs	r10, 0
    23ca:	06 c0       	rjmp	.+12     	; 0x23d8 <__stack+0x2d9>
    23cc:	b2 14       	cp	r11, r2
    23ce:	80 f4       	brcc	.+32     	; 0x23f0 <__stack+0x2f1>
    23d0:	28 0c       	add	r2, r8
    23d2:	92 2c       	mov	r9, r2
    23d4:	9b 18       	sub	r9, r11
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <__stack+0x2f3>
    23d8:	b2 14       	cp	r11, r2
    23da:	58 f4       	brcc	.+22     	; 0x23f2 <__stack+0x2f3>
    23dc:	b6 01       	movw	r22, r12
    23de:	80 e2       	ldi	r24, 0x20	; 32
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	76 d0       	rcall	.+236    	; 0x24d0 <fputc>
    23e4:	b3 94       	inc	r11
    23e6:	f8 cf       	rjmp	.-16     	; 0x23d8 <__stack+0x2d9>
    23e8:	b2 14       	cp	r11, r2
    23ea:	18 f4       	brcc	.+6      	; 0x23f2 <__stack+0x2f3>
    23ec:	2b 18       	sub	r2, r11
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <__stack+0x2f5>
    23f0:	98 2c       	mov	r9, r8
    23f2:	21 2c       	mov	r2, r1
    23f4:	a4 fe       	sbrs	r10, 4
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <__stack+0x317>
    23f8:	b6 01       	movw	r22, r12
    23fa:	80 e3       	ldi	r24, 0x30	; 48
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	68 d0       	rcall	.+208    	; 0x24d0 <fputc>
    2400:	a2 fe       	sbrs	r10, 2
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <__stack+0x331>
    2404:	a1 fc       	sbrc	r10, 1
    2406:	03 c0       	rjmp	.+6      	; 0x240e <__stack+0x30f>
    2408:	88 e7       	ldi	r24, 0x78	; 120
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <__stack+0x313>
    240e:	88 e5       	ldi	r24, 0x58	; 88
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	b6 01       	movw	r22, r12
    2414:	0c c0       	rjmp	.+24     	; 0x242e <__stack+0x32f>
    2416:	8a 2d       	mov	r24, r10
    2418:	86 78       	andi	r24, 0x86	; 134
    241a:	51 f0       	breq	.+20     	; 0x2430 <__stack+0x331>
    241c:	a1 fe       	sbrs	r10, 1
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <__stack+0x325>
    2420:	8b e2       	ldi	r24, 0x2B	; 43
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <__stack+0x327>
    2424:	80 e2       	ldi	r24, 0x20	; 32
    2426:	a7 fc       	sbrc	r10, 7
    2428:	8d e2       	ldi	r24, 0x2D	; 45
    242a:	b6 01       	movw	r22, r12
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	50 d0       	rcall	.+160    	; 0x24d0 <fputc>
    2430:	89 14       	cp	r8, r9
    2432:	30 f4       	brcc	.+12     	; 0x2440 <__stack+0x341>
    2434:	b6 01       	movw	r22, r12
    2436:	80 e3       	ldi	r24, 0x30	; 48
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	4a d0       	rcall	.+148    	; 0x24d0 <fputc>
    243c:	9a 94       	dec	r9
    243e:	f8 cf       	rjmp	.-16     	; 0x2430 <__stack+0x331>
    2440:	8a 94       	dec	r8
    2442:	f3 01       	movw	r30, r6
    2444:	e8 0d       	add	r30, r8
    2446:	f1 1d       	adc	r31, r1
    2448:	80 81       	ld	r24, Z
    244a:	b6 01       	movw	r22, r12
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	40 d0       	rcall	.+128    	; 0x24d0 <fputc>
    2450:	81 10       	cpse	r8, r1
    2452:	f6 cf       	rjmp	.-20     	; 0x2440 <__stack+0x341>
    2454:	22 20       	and	r2, r2
    2456:	09 f4       	brne	.+2      	; 0x245a <__stack+0x35b>
    2458:	4e ce       	rjmp	.-868    	; 0x20f6 <vfprintf+0x4c>
    245a:	b6 01       	movw	r22, r12
    245c:	80 e2       	ldi	r24, 0x20	; 32
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	37 d0       	rcall	.+110    	; 0x24d0 <fputc>
    2462:	2a 94       	dec	r2
    2464:	f7 cf       	rjmp	.-18     	; 0x2454 <__stack+0x355>
    2466:	f6 01       	movw	r30, r12
    2468:	86 81       	ldd	r24, Z+6	; 0x06
    246a:	97 81       	ldd	r25, Z+7	; 0x07
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <__stack+0x373>
    246e:	8f ef       	ldi	r24, 0xFF	; 255
    2470:	9f ef       	ldi	r25, 0xFF	; 255
    2472:	2b 96       	adiw	r28, 0x0b	; 11
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	bf 90       	pop	r11
    2490:	af 90       	pop	r10
    2492:	9f 90       	pop	r9
    2494:	8f 90       	pop	r8
    2496:	7f 90       	pop	r7
    2498:	6f 90       	pop	r6
    249a:	5f 90       	pop	r5
    249c:	4f 90       	pop	r4
    249e:	3f 90       	pop	r3
    24a0:	2f 90       	pop	r2
    24a2:	08 95       	ret

000024a4 <strnlen_P>:
    24a4:	fc 01       	movw	r30, r24
    24a6:	05 90       	lpm	r0, Z+
    24a8:	61 50       	subi	r22, 0x01	; 1
    24aa:	70 40       	sbci	r23, 0x00	; 0
    24ac:	01 10       	cpse	r0, r1
    24ae:	d8 f7       	brcc	.-10     	; 0x24a6 <strnlen_P+0x2>
    24b0:	80 95       	com	r24
    24b2:	90 95       	com	r25
    24b4:	8e 0f       	add	r24, r30
    24b6:	9f 1f       	adc	r25, r31
    24b8:	08 95       	ret

000024ba <strnlen>:
    24ba:	fc 01       	movw	r30, r24
    24bc:	61 50       	subi	r22, 0x01	; 1
    24be:	70 40       	sbci	r23, 0x00	; 0
    24c0:	01 90       	ld	r0, Z+
    24c2:	01 10       	cpse	r0, r1
    24c4:	d8 f7       	brcc	.-10     	; 0x24bc <strnlen+0x2>
    24c6:	80 95       	com	r24
    24c8:	90 95       	com	r25
    24ca:	8e 0f       	add	r24, r30
    24cc:	9f 1f       	adc	r25, r31
    24ce:	08 95       	ret

000024d0 <fputc>:
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	fb 01       	movw	r30, r22
    24da:	23 81       	ldd	r18, Z+3	; 0x03
    24dc:	21 fd       	sbrc	r18, 1
    24de:	03 c0       	rjmp	.+6      	; 0x24e6 <fputc+0x16>
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	9f ef       	ldi	r25, 0xFF	; 255
    24e4:	2c c0       	rjmp	.+88     	; 0x253e <fputc+0x6e>
    24e6:	22 ff       	sbrs	r18, 2
    24e8:	16 c0       	rjmp	.+44     	; 0x2516 <fputc+0x46>
    24ea:	46 81       	ldd	r20, Z+6	; 0x06
    24ec:	57 81       	ldd	r21, Z+7	; 0x07
    24ee:	24 81       	ldd	r18, Z+4	; 0x04
    24f0:	35 81       	ldd	r19, Z+5	; 0x05
    24f2:	42 17       	cp	r20, r18
    24f4:	53 07       	cpc	r21, r19
    24f6:	44 f4       	brge	.+16     	; 0x2508 <fputc+0x38>
    24f8:	a0 81       	ld	r26, Z
    24fa:	b1 81       	ldd	r27, Z+1	; 0x01
    24fc:	9d 01       	movw	r18, r26
    24fe:	2f 5f       	subi	r18, 0xFF	; 255
    2500:	3f 4f       	sbci	r19, 0xFF	; 255
    2502:	31 83       	std	Z+1, r19	; 0x01
    2504:	20 83       	st	Z, r18
    2506:	8c 93       	st	X, r24
    2508:	26 81       	ldd	r18, Z+6	; 0x06
    250a:	37 81       	ldd	r19, Z+7	; 0x07
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	37 83       	std	Z+7, r19	; 0x07
    2512:	26 83       	std	Z+6, r18	; 0x06
    2514:	14 c0       	rjmp	.+40     	; 0x253e <fputc+0x6e>
    2516:	8b 01       	movw	r16, r22
    2518:	ec 01       	movw	r28, r24
    251a:	fb 01       	movw	r30, r22
    251c:	00 84       	ldd	r0, Z+8	; 0x08
    251e:	f1 85       	ldd	r31, Z+9	; 0x09
    2520:	e0 2d       	mov	r30, r0
    2522:	09 95       	icall
    2524:	89 2b       	or	r24, r25
    2526:	e1 f6       	brne	.-72     	; 0x24e0 <fputc+0x10>
    2528:	d8 01       	movw	r26, r16
    252a:	16 96       	adiw	r26, 0x06	; 6
    252c:	8d 91       	ld	r24, X+
    252e:	9c 91       	ld	r25, X
    2530:	17 97       	sbiw	r26, 0x07	; 7
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	17 96       	adiw	r26, 0x07	; 7
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
    253a:	16 97       	sbiw	r26, 0x06	; 6
    253c:	ce 01       	movw	r24, r28
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	08 95       	ret

00002548 <__ultoa_invert>:
    2548:	fa 01       	movw	r30, r20
    254a:	aa 27       	eor	r26, r26
    254c:	28 30       	cpi	r18, 0x08	; 8
    254e:	51 f1       	breq	.+84     	; 0x25a4 <__ultoa_invert+0x5c>
    2550:	20 31       	cpi	r18, 0x10	; 16
    2552:	81 f1       	breq	.+96     	; 0x25b4 <__ultoa_invert+0x6c>
    2554:	e8 94       	clt
    2556:	6f 93       	push	r22
    2558:	6e 7f       	andi	r22, 0xFE	; 254
    255a:	6e 5f       	subi	r22, 0xFE	; 254
    255c:	7f 4f       	sbci	r23, 0xFF	; 255
    255e:	8f 4f       	sbci	r24, 0xFF	; 255
    2560:	9f 4f       	sbci	r25, 0xFF	; 255
    2562:	af 4f       	sbci	r26, 0xFF	; 255
    2564:	b1 e0       	ldi	r27, 0x01	; 1
    2566:	3e d0       	rcall	.+124    	; 0x25e4 <__ultoa_invert+0x9c>
    2568:	b4 e0       	ldi	r27, 0x04	; 4
    256a:	3c d0       	rcall	.+120    	; 0x25e4 <__ultoa_invert+0x9c>
    256c:	67 0f       	add	r22, r23
    256e:	78 1f       	adc	r23, r24
    2570:	89 1f       	adc	r24, r25
    2572:	9a 1f       	adc	r25, r26
    2574:	a1 1d       	adc	r26, r1
    2576:	68 0f       	add	r22, r24
    2578:	79 1f       	adc	r23, r25
    257a:	8a 1f       	adc	r24, r26
    257c:	91 1d       	adc	r25, r1
    257e:	a1 1d       	adc	r26, r1
    2580:	6a 0f       	add	r22, r26
    2582:	71 1d       	adc	r23, r1
    2584:	81 1d       	adc	r24, r1
    2586:	91 1d       	adc	r25, r1
    2588:	a1 1d       	adc	r26, r1
    258a:	20 d0       	rcall	.+64     	; 0x25cc <__ultoa_invert+0x84>
    258c:	09 f4       	brne	.+2      	; 0x2590 <__ultoa_invert+0x48>
    258e:	68 94       	set
    2590:	3f 91       	pop	r19
    2592:	2a e0       	ldi	r18, 0x0A	; 10
    2594:	26 9f       	mul	r18, r22
    2596:	11 24       	eor	r1, r1
    2598:	30 19       	sub	r19, r0
    259a:	30 5d       	subi	r19, 0xD0	; 208
    259c:	31 93       	st	Z+, r19
    259e:	de f6       	brtc	.-74     	; 0x2556 <__ultoa_invert+0xe>
    25a0:	cf 01       	movw	r24, r30
    25a2:	08 95       	ret
    25a4:	46 2f       	mov	r20, r22
    25a6:	47 70       	andi	r20, 0x07	; 7
    25a8:	40 5d       	subi	r20, 0xD0	; 208
    25aa:	41 93       	st	Z+, r20
    25ac:	b3 e0       	ldi	r27, 0x03	; 3
    25ae:	0f d0       	rcall	.+30     	; 0x25ce <__ultoa_invert+0x86>
    25b0:	c9 f7       	brne	.-14     	; 0x25a4 <__ultoa_invert+0x5c>
    25b2:	f6 cf       	rjmp	.-20     	; 0x25a0 <__ultoa_invert+0x58>
    25b4:	46 2f       	mov	r20, r22
    25b6:	4f 70       	andi	r20, 0x0F	; 15
    25b8:	40 5d       	subi	r20, 0xD0	; 208
    25ba:	4a 33       	cpi	r20, 0x3A	; 58
    25bc:	18 f0       	brcs	.+6      	; 0x25c4 <__ultoa_invert+0x7c>
    25be:	49 5d       	subi	r20, 0xD9	; 217
    25c0:	31 fd       	sbrc	r19, 1
    25c2:	40 52       	subi	r20, 0x20	; 32
    25c4:	41 93       	st	Z+, r20
    25c6:	02 d0       	rcall	.+4      	; 0x25cc <__ultoa_invert+0x84>
    25c8:	a9 f7       	brne	.-22     	; 0x25b4 <__ultoa_invert+0x6c>
    25ca:	ea cf       	rjmp	.-44     	; 0x25a0 <__ultoa_invert+0x58>
    25cc:	b4 e0       	ldi	r27, 0x04	; 4
    25ce:	a6 95       	lsr	r26
    25d0:	97 95       	ror	r25
    25d2:	87 95       	ror	r24
    25d4:	77 95       	ror	r23
    25d6:	67 95       	ror	r22
    25d8:	ba 95       	dec	r27
    25da:	c9 f7       	brne	.-14     	; 0x25ce <__ultoa_invert+0x86>
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	61 05       	cpc	r22, r1
    25e0:	71 05       	cpc	r23, r1
    25e2:	08 95       	ret
    25e4:	9b 01       	movw	r18, r22
    25e6:	ac 01       	movw	r20, r24
    25e8:	0a 2e       	mov	r0, r26
    25ea:	06 94       	lsr	r0
    25ec:	57 95       	ror	r21
    25ee:	47 95       	ror	r20
    25f0:	37 95       	ror	r19
    25f2:	27 95       	ror	r18
    25f4:	ba 95       	dec	r27
    25f6:	c9 f7       	brne	.-14     	; 0x25ea <__ultoa_invert+0xa2>
    25f8:	62 0f       	add	r22, r18
    25fa:	73 1f       	adc	r23, r19
    25fc:	84 1f       	adc	r24, r20
    25fe:	95 1f       	adc	r25, r21
    2600:	a0 1d       	adc	r26, r0
    2602:	08 95       	ret

00002604 <_exit>:
    2604:	f8 94       	cli

00002606 <__stop_program>:
    2606:	ff cf       	rjmp	.-2      	; 0x2606 <__stop_program>
