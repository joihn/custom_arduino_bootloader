
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002078  0000210c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002078  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  00800134  00800134  00002140  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ad9  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002250  00000000  00000000  00008fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033a6  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b80  00000000  00000000  0000e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b02  00000000  00000000  0000f12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000043b7  00000000  00000000  00011c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  00015fe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6f c1       	rjmp	.+734    	; 0x2e0 <__ctors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c1       	rjmp	.+778    	; 0x31c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c1       	rjmp	.+766    	; 0x31c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c1       	rjmp	.+762    	; 0x31c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c6       	rjmp	.+3142   	; 0xc70 <__vector_10>
      2a:	00 00       	nop
      2c:	77 c1       	rjmp	.+750    	; 0x31c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c1       	rjmp	.+730    	; 0x31c <__bad_interrupt>
      42:	00 00       	nop
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	69 c1       	rjmp	.+722    	; 0x31c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c1       	rjmp	.+718    	; 0x31c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	59 c1       	rjmp	.+690    	; 0x31c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c1       	rjmp	.+678    	; 0x31c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c1       	rjmp	.+654    	; 0x31c <__bad_interrupt>
      8e:	00 00       	nop
      90:	45 c1       	rjmp	.+650    	; 0x31c <__bad_interrupt>
      92:	00 00       	nop
      94:	43 c1       	rjmp	.+646    	; 0x31c <__bad_interrupt>
      96:	00 00       	nop
      98:	fd 03       	fmulsu	r23, r21
      9a:	ee 04       	cpc	r14, r14
      9c:	1b 04       	cpc	r1, r11
      9e:	25 04       	cpc	r2, r5
      a0:	50 04       	cpc	r5, r0
      a2:	78 04       	cpc	r7, r8
      a4:	83 04       	cpc	r8, r3
      a6:	94 04       	cpc	r9, r4
      a8:	b0 04       	cpc	r11, r0
      aa:	d7 04       	cpc	r13, r7

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4525>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4520>:
     131:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     141:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

0000014c <__c.4518>:
     14c:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     15c:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

00000168 <__c.4516>:
     168:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
     178:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

00000183 <__c.4513>:
     183:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     193:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
     1a3:	65 72 2e 0d 0a 00                                   er....

000001a9 <__c.4510>:
     1a9:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1b9:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     1c9:	74 65 73 2e 0d 0a 00                                tes....

000001d0 <__c.4508>:
     1d0:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     1e0:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

000001ed <__c.4506>:
     1ed:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1fd:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     20d:	6f 6e 2e 0d 0a 00                                   on....

00000213 <__c.4504>:
     213:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     223:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     233:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     243:	0a 00                                               ..

00000245 <__c.4502>:
     245:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     255:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     265:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000272 <__c.4495>:
     272:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     282:	68 65 64 2e 0d 0a 00                                hed....

00000289 <__c.4490>:
     289:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     299:	0d 0a 00                                            ...

0000029c <__c.4482>:
     29c:	0d 0a 0d 0a 00                                      .....

000002a1 <__c.4476>:
     2a1:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     2b1:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000002ba <__c.4469>:
     2ba:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     2ca:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     2da:	5b 33 37 6d 00 00                                   [37m..

000002e0 <__ctors_end>:
     2e0:	11 24       	eor	r1, r1
     2e2:	1f be       	out	0x3f, r1	; 63
     2e4:	cf ef       	ldi	r28, 0xFF	; 255
     2e6:	d0 e2       	ldi	r29, 0x20	; 32
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	cd bf       	out	0x3d, r28	; 61

000002ec <__do_copy_data>:
     2ec:	11 e0       	ldi	r17, 0x01	; 1
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b1 e0       	ldi	r27, 0x01	; 1
     2f2:	e8 e7       	ldi	r30, 0x78	; 120
     2f4:	f0 e2       	ldi	r31, 0x20	; 32
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0b bf       	out	0x3b, r16	; 59
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <__do_copy_data+0x14>
     2fc:	07 90       	elpm	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	a4 33       	cpi	r26, 0x34	; 52
     302:	b1 07       	cpc	r27, r17
     304:	d9 f7       	brne	.-10     	; 0x2fc <__do_copy_data+0x10>

00000306 <__do_clear_bss>:
     306:	25 e0       	ldi	r18, 0x05	; 5
     308:	a4 e3       	ldi	r26, 0x34	; 52
     30a:	b1 e0       	ldi	r27, 0x01	; 1
     30c:	01 c0       	rjmp	.+2      	; 0x310 <.do_clear_bss_start>

0000030e <.do_clear_bss_loop>:
     30e:	1d 92       	st	X+, r1

00000310 <.do_clear_bss_start>:
     310:	a6 35       	cpi	r26, 0x56	; 86
     312:	b2 07       	cpc	r27, r18
     314:	e1 f7       	brne	.-8      	; 0x30e <.do_clear_bss_loop>
     316:	b2 d0       	rcall	.+356    	; 0x47c <main>
     318:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <_exit>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     31e:	9b b1       	in	r25, 0x0b	; 11
     320:	9f 70       	andi	r25, 0x0F	; 15
     322:	89 2b       	or	r24, r25
     324:	8b b9       	out	0x0b, r24	; 11
     326:	08 95       	ret

00000328 <RNDISHost_Task>:

/** Task to manage an enumerated USB RNDIS device once connected, to display device
 *  received data packets.
 */
void RNDISHost_Task(void)
{
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <RNDISHost_Task+0xe>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     33a:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <USB_HostState>
     33e:	8b 30       	cpi	r24, 0x0B	; 11
     340:	09 f0       	breq	.+2      	; 0x344 <RNDISHost_Task+0x1c>
     342:	4a c0       	rjmp	.+148    	; 0x3d8 <RNDISHost_Task+0xb0>
	  return;

	if (RNDIS_Host_IsPacketReceived(&Ethernet_RNDIS_Interface))
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 65 0c 	call	0x18ca	; 0x18ca <RNDIS_Host_IsPacketReceived>
     34c:	88 23       	and	r24, r24
     34e:	09 f4       	brne	.+2      	; 0x352 <RNDISHost_Task+0x2a>
     350:	43 c0       	rjmp	.+134    	; 0x3d8 <RNDISHost_Task+0xb0>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	e4 df       	rcall	.-56     	; 0x31e <LEDs_SetAllLEDs>

		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);
     356:	ae 01       	movw	r20, r28
     358:	4f 5f       	subi	r20, 0xFF	; 255
     35a:	5f 4f       	sbci	r21, 0xFF	; 255
     35c:	64 e3       	ldi	r22, 0x34	; 52
     35e:	71 e0       	ldi	r23, 0x01	; 1
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 80 0c 	call	0x1900	; 0x1900 <RNDIS_Host_ReadPacket>

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	8f 93       	push	r24
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	8f 93       	push	r24
     370:	81 ea       	ldi	r24, 0xA1	; 161
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printf_P>

		for (uint16_t i = 0; i < PacketLength; i++)
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	04 e3       	ldi	r16, 0x34	; 52
     386:	11 e0       	ldi	r17, 0x01	; 1
		  printf("0x%02x ", PacketBuffer[i]);
     388:	8b e2       	ldi	r24, 0x2B	; 43
     38a:	e8 2e       	mov	r14, r24
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	f8 2e       	mov	r15, r24
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     390:	29 81       	ldd	r18, Y+1	; 0x01
     392:	3a 81       	ldd	r19, Y+2	; 0x02
     394:	c8 01       	movw	r24, r16
     396:	84 53       	subi	r24, 0x34	; 52
     398:	91 40       	sbci	r25, 0x01	; 1
     39a:	82 17       	cp	r24, r18
     39c:	93 07       	cpc	r25, r19
     39e:	90 f4       	brcc	.+36     	; 0x3c4 <RNDISHost_Task+0x9c>
		  printf("0x%02x ", PacketBuffer[i]);
     3a0:	f8 01       	movw	r30, r16
     3a2:	81 91       	ld	r24, Z+
     3a4:	8f 01       	movw	r16, r30
     3a6:	28 2f       	mov	r18, r24
     3a8:	08 2e       	mov	r0, r24
     3aa:	00 0c       	add	r0, r0
     3ac:	33 0b       	sbc	r19, r19
     3ae:	3f 93       	push	r19
     3b0:	8f 93       	push	r24
     3b2:	ff 92       	push	r15
     3b4:	ef 92       	push	r14
     3b6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <printf>
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	e6 cf       	rjmp	.-52     	; 0x390 <RNDISHost_Task+0x68>

		printf_P(PSTR("\r\n\r\n"));
     3c4:	8c e9       	ldi	r24, 0x9C	; 156
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3d0:	80 e6       	ldi	r24, 0x60	; 96
     3d2:	a5 df       	rcall	.-182    	; 0x31e <LEDs_SetAllLEDs>
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
	}
}
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3ea:	84 b7       	in	r24, 0x34	; 52
     3ec:	87 7f       	andi	r24, 0xF7	; 247
     3ee:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	a8 95       	wdr
     3f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3fa:	88 61       	ori	r24, 0x18	; 24
     3fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     400:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     404:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     412:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     416:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     418:	83 e3       	ldi	r24, 0x33	; 51
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     420:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     424:	86 e0       	ldi	r24, 0x06	; 6
     426:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     42a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     434:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     436:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     438:	8a b1       	in	r24, 0x0a	; 10
     43a:	80 6f       	ori	r24, 0xF0	; 240
     43c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	8f 70       	andi	r24, 0x0F	; 15
     442:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     444:	ff d3       	rcall	.+2046   	; 0xc44 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     446:	a0 e5       	ldi	r26, 0x50	; 80
     448:	b5 e0       	ldi	r27, 0x05	; 5
     44a:	e2 e4       	ldi	r30, 0x42	; 66
     44c:	f5 e0       	ldi	r31, 0x05	; 5
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	fc 93       	st	X, r31
     452:	ee 93       	st	-X, r30
					stdout = Stream;
     454:	13 96       	adiw	r26, 0x03	; 3
     456:	fc 93       	st	X, r31
     458:	ee 93       	st	-X, r30
     45a:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	df 01       	movw	r26, r30
     460:	1d 92       	st	X+, r1
     462:	8a 95       	dec	r24
     464:	e9 f7       	brne	.-6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	83 83       	std	Z+3, r24	; 0x03
     46a:	85 ef       	ldi	r24, 0xF5	; 245
     46c:	9c e0       	ldi	r25, 0x0C	; 12
     46e:	91 87       	std	Z+9, r25	; 0x09
     470:	80 87       	std	Z+8, r24	; 0x08
     472:	8e ef       	ldi	r24, 0xFE	; 254
     474:	9c e0       	ldi	r25, 0x0C	; 12
     476:	93 87       	std	Z+11, r25	; 0x0b
     478:	82 87       	std	Z+10, r24	; 0x0a
     47a:	08 95       	ret

0000047c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     47c:	b6 df       	rcall	.-148    	; 0x3ea <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     47e:	8a eb       	ldi	r24, 0xBA	; 186
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     486:	80 e1       	ldi	r24, 0x10	; 16
     488:	4a df       	rcall	.-364    	; 0x31e <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		RNDISHost_Task();
     48a:	78 94       	sei
     48c:	4d df       	rcall	.-358    	; 0x328 <RNDISHost_Task>

		RNDIS_Host_USBTask(&Ethernet_RNDIS_Interface);
		USB_USBTask();
     48e:	04 d7       	rcall	.+3592   	; 0x1298 <USB_USBTask>
     490:	fd cf       	rjmp	.-6      	; 0x48c <main+0x10>

00000492 <EVENT_USB_Host_DeviceAttached>:
     492:	89 e8       	ldi	r24, 0x89	; 137
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     49a:	80 ea       	ldi	r24, 0xA0	; 160
     49c:	40 cf       	rjmp	.-384    	; 0x31e <LEDs_SetAllLEDs>

0000049e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     49e:	82 e7       	ldi	r24, 0x72	; 114
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4a6:	80 e1       	ldi	r24, 0x10	; 16
     4a8:	3a cf       	rjmp	.-396    	; 0x31e <LEDs_SetAllLEDs>

000004aa <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	ca 50       	subi	r28, 0x0A	; 10
     4b8:	d2 40       	sbci	r29, 0x02	; 2
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4c4:	80 ea       	ldi	r24, 0xA0	; 160
     4c6:	2b df       	rcall	.-426    	; 0x31e <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	ae 01       	movw	r20, r28
     4ce:	4f 5f       	subi	r20, 0xFF	; 255
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	be 01       	movw	r22, r28
     4d4:	67 5f       	subi	r22, 0xF7	; 247
     4d6:	7d 4f       	sbci	r23, 0xFD	; 253
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	0f d5       	rcall	.+2590   	; 0xefa <USB_Host_GetDeviceConfigDescriptor>
     4dc:	88 23       	and	r24, r24
     4de:	19 f0       	breq	.+6      	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4e0:	85 e4       	ldi	r24, 0x45	; 69
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	10 c0       	rjmp	.+32     	; 0x506 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_ConfigurePipes(&Ethernet_RNDIS_Interface,
     4e6:	c7 5f       	subi	r28, 0xF7	; 247
     4e8:	dd 4f       	sbci	r29, 0xFD	; 253
     4ea:	68 81       	ld	r22, Y
     4ec:	79 81       	ldd	r23, Y+1	; 0x01
     4ee:	c9 50       	subi	r28, 0x09	; 9
     4f0:	d2 40       	sbci	r29, 0x02	; 2
     4f2:	ae 01       	movw	r20, r28
     4f4:	4f 5f       	subi	r20, 0xFF	; 255
     4f6:	5f 4f       	sbci	r21, 0xFF	; 255
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	36 d7       	rcall	.+3692   	; 0x136a <RNDIS_Host_ConfigurePipes>
     4fe:	88 23       	and	r24, r24
     500:	39 f0       	breq	.+14     	; 0x510 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
	                              ConfigDescriptorSize, ConfigDescriptorData) != RNDIS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid RNDIS Class Device.\r\n"));
     502:	83 e1       	ldi	r24, 0x13	; 19
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     50a:	80 e9       	ldi	r24, 0x90	; 144
		return;
     50c:	08 df       	rcall	.-496    	; 0x31e <LEDs_SetAllLEDs>
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     50e:	88 c0       	rjmp	.+272    	; 0x620 <EVENT_USB_Host_DeviceEnumerationComplete+0x176>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	9b d6       	rcall	.+3382   	; 0x124a <USB_Host_SetDeviceConfiguration>
     514:	88 23       	and	r24, r24
     516:	19 f0       	breq	.+6      	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     518:	8d ee       	ldi	r24, 0xED	; 237
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	f4 cf       	rjmp	.-24     	; 0x506 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_InitializeDevice(&Ethernet_RNDIS_Interface) != HOST_SENDCONTROL_Successful)
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 9e 0a 	call	0x153c	; 0x153c <RNDIS_Host_InitializeDevice>
     526:	88 23       	and	r24, r24
     528:	19 f0       	breq	.+6      	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		puts_P(PSTR("Error Initializing Device.\r\n"));
     52a:	80 ed       	ldi	r24, 0xD0	; 208
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	47 c0       	rjmp	.+142    	; 0x5be <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     530:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__DATA_REGION_ORIGIN__+0x15>
     534:	8f 93       	push	r24
     536:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__DATA_REGION_ORIGIN__+0x14>
     53a:	8f 93       	push	r24
     53c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__DATA_REGION_ORIGIN__+0x13>
     540:	8f 93       	push	r24
     542:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__DATA_REGION_ORIGIN__+0x12>
     546:	8f 93       	push	r24
     548:	89 ea       	ldi	r24, 0xA9	; 169
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printf_P>

	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     554:	8d e0       	ldi	r24, 0x0D	; 13
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	a0 e0       	ldi	r26, 0x00	; 0
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	cb 5f       	subi	r28, 0xFB	; 251
     55e:	dd 4f       	sbci	r29, 0xFD	; 253
     560:	88 83       	st	Y, r24
     562:	99 83       	std	Y+1, r25	; 0x01
     564:	aa 83       	std	Y+2, r26	; 0x02
     566:	bb 83       	std	Y+3, r27	; 0x03
     568:	c5 50       	subi	r28, 0x05	; 5
     56a:	d2 40       	sbci	r29, 0x02	; 2
	if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     56c:	04 e0       	ldi	r16, 0x04	; 4
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	9e 01       	movw	r18, r28
     572:	2b 5f       	subi	r18, 0xFB	; 251
     574:	3d 4f       	sbci	r19, 0xFD	; 253
     576:	4e e0       	ldi	r20, 0x0E	; 14
     578:	51 e0       	ldi	r21, 0x01	; 1
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 1d 0b 	call	0x163a	; 0x163a <RNDIS_Host_SetRNDISProperty>
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	88 23       	and	r24, r24
     594:	19 f0       	breq	.+6      	; 0x59c <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
	                                &PacketFilter, sizeof(PacketFilter)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Device Packet Filter.\r\n"));
     596:	83 e8       	ldi	r24, 0x83	; 131
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	11 c0       	rjmp	.+34     	; 0x5be <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     59c:	04 e0       	ldi	r16, 0x04	; 4
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	9e 01       	movw	r18, r28
     5a2:	2f 5f       	subi	r18, 0xFF	; 255
     5a4:	3d 4f       	sbci	r19, 0xFD	; 253
     5a6:	4c e0       	ldi	r20, 0x0C	; 12
     5a8:	51 e0       	ldi	r21, 0x01	; 1
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 c2 0b 	call	0x1784	; 0x1784 <RNDIS_Host_QueryRNDISProperty>
     5b6:	88 23       	and	r24, r24
     5b8:	49 f0       	breq	.+18     	; 0x5cc <EVENT_USB_Host_DeviceEnumerationComplete+0x122>
	                                  &VendorID, sizeof(VendorID)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Vendor ID.\r\n"));
     5ba:	88 e6       	ldi	r24, 0x68	; 104
     5bc:	91 e0       	ldi	r25, 0x01	; 1

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5be:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <puts_P>
     5c2:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     5c4:	ac de       	rcall	.-680    	; 0x31e <LEDs_SetAllLEDs>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	40 d6       	rcall	.+3200   	; 0x124a <USB_Host_SetDeviceConfiguration>
		return;
     5ca:	2a c0       	rjmp	.+84     	; 0x620 <EVENT_USB_Host_DeviceEnumerationComplete+0x176>
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     5cc:	cc 5f       	subi	r28, 0xFC	; 252
     5ce:	dd 4f       	sbci	r29, 0xFD	; 253
     5d0:	88 81       	ld	r24, Y
     5d2:	c4 50       	subi	r28, 0x04	; 4
     5d4:	d2 40       	sbci	r29, 0x02	; 2
     5d6:	8f 93       	push	r24
     5d8:	cd 5f       	subi	r28, 0xFD	; 253
     5da:	dd 4f       	sbci	r29, 0xFD	; 253
     5dc:	88 81       	ld	r24, Y
     5de:	c3 50       	subi	r28, 0x03	; 3
     5e0:	d2 40       	sbci	r29, 0x02	; 2
     5e2:	8f 93       	push	r24
     5e4:	ce 5f       	subi	r28, 0xFE	; 254
     5e6:	dd 4f       	sbci	r29, 0xFD	; 253
     5e8:	88 81       	ld	r24, Y
     5ea:	c2 50       	subi	r28, 0x02	; 2
     5ec:	d2 40       	sbci	r29, 0x02	; 2
     5ee:	8f 93       	push	r24
     5f0:	cf 5f       	subi	r28, 0xFF	; 255
     5f2:	dd 4f       	sbci	r29, 0xFD	; 253
     5f4:	88 81       	ld	r24, Y
     5f6:	c1 50       	subi	r28, 0x01	; 1
     5f8:	d2 40       	sbci	r29, 0x02	; 2
     5fa:	8f 93       	push	r24
     5fc:	8c e4       	ldi	r24, 0x4C	; 76
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     608:	81 e3       	ldi	r24, 0x31	; 49
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     610:	80 e6       	ldi	r24, 0x60	; 96
     612:	85 de       	rcall	.-758    	; 0x31e <LEDs_SetAllLEDs>
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
}
     620:	c6 5f       	subi	r28, 0xF6	; 246
     622:	dd 4f       	sbci	r29, 0xFD	; 253
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	08 95       	ret

00000638 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     638:	c8 2f       	mov	r28, r24
	USB_Disable();
     63a:	9c d2       	rcall	.+1336   	; 0xb74 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     63c:	1f 92       	push	r1
     63e:	cf 93       	push	r28
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     64c:	80 e9       	ldi	r24, 0x90	; 144
     64e:	67 de       	rcall	.-818    	; 0x31e <LEDs_SetAllLEDs>
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	ff cf       	rjmp	.-2      	; 0x658 <EVENT_USB_Host_HostError+0x20>

0000065a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     65a:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <USB_HostState>
     65e:	1f 92       	push	r1
     660:	9f 93       	push	r25
     662:	1f 92       	push	r1
     664:	6f 93       	push	r22
     666:	1f 92       	push	r1
     668:	8f 93       	push	r24
     66a:	8c ea       	ldi	r24, 0xAC	; 172
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     676:	8d b7       	in	r24, 0x3d	; 61
     678:	9e b7       	in	r25, 0x3e	; 62
     67a:	08 96       	adiw	r24, 0x08	; 8
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	9e bf       	out	0x3e, r25	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	8d bf       	out	0x3d, r24	; 61
     686:	80 e9       	ldi	r24, 0x90	; 144
     688:	4a ce       	rjmp	.-876    	; 0x31e <LEDs_SetAllLEDs>

0000068a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     68e:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     690:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     694:	9d 7f       	andi	r25, 0xFD	; 253
     696:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     69a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     69e:	92 60       	ori	r25, 0x02	; 2
     6a0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a4:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6a8:	91 fd       	sbrc	r25, 1
     6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ac:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6b0:	91 60       	ori	r25, 0x01	; 1
     6b2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6b6:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6ba:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6be:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6c0:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6c4:	2f 7d       	andi	r18, 0xDF	; 223
     6c6:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ca:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6ce:	2f 7d       	andi	r18, 0xDF	; 223
     6d0:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6d4:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6d6:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6da:	35 ff       	sbrs	r19, 5
     6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6de:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6e2:	2f 7d       	andi	r18, 0xDF	; 223
     6e4:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6e8:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6ec:	2d 7f       	andi	r18, 0xFD	; 253
     6ee:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f4:	ef ec       	ldi	r30, 0xCF	; 207
     6f6:	f7 e0       	ldi	r31, 0x07	; 7
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <USB_Host_ResetDevice+0x6e>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <USB_Host_ResetDevice+0x74>
     6fe:	00 00       	nop
     700:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     702:	49 f7       	brne	.-46     	; 0x6d6 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     704:	99 23       	and	r25, r25
     706:	29 f0       	breq	.+10     	; 0x712 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     708:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     70c:	90 62       	ori	r25, 0x20	; 32
     70e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     712:	81 11       	cpse	r24, r1
     714:	05 c0       	rjmp	.+10     	; 0x720 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     716:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     71a:	8e 7f       	andi	r24, 0xFE	; 254
     71c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     720:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     724:	82 60       	ori	r24, 0x02	; 2
     726:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     72a:	08 95       	ret

0000072c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     72c:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     730:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     732:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     736:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     738:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     73c:	3f 7d       	andi	r19, 0xDF	; 223
     73e:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     742:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     746:	3f 7d       	andi	r19, 0xDF	; 223
     748:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     74c:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     750:	31 60       	ori	r19, 0x01	; 1
     752:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     756:	88 23       	and	r24, r24
     758:	39 f1       	breq	.+78     	; 0x7a8 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     75a:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     75e:	35 ff       	sbrs	r19, 5
     760:	06 c0       	rjmp	.+12     	; 0x76e <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     762:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     766:	3f 7d       	andi	r19, 0xDF	; 223
     768:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     76c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     76e:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <USB_HostState>
     772:	31 30       	cpi	r19, 0x01	; 1
     774:	c1 f0       	breq	.+48     	; 0x7a6 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     776:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     77a:	34 ff       	sbrs	r19, 4
     77c:	09 c0       	rjmp	.+18     	; 0x790 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     77e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     782:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     786:	8f 7e       	andi	r24, 0xEF	; 239
     788:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     78c:	82 e0       	ldi	r24, 0x02	; 2

			break;
     78e:	0c c0       	rjmp	.+24     	; 0x7a8 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     790:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     794:	31 ff       	sbrs	r19, 1
     796:	df cf       	rjmp	.-66     	; 0x756 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     798:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     7a2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     7a6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     7a8:	21 11       	cpse	r18, r1
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7ac:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7b0:	2e 7f       	andi	r18, 0xFE	; 254
     7b2:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7b6:	99 23       	and	r25, r25
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7ba:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7be:	90 62       	ori	r25, 0x20	; 32
     7c0:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7c4:	08 95       	ret

000007c6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     7c6:	ef 92       	push	r14
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	28 97       	sbiw	r28, 0x08	; 8
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7e0:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <USB_HostState>
     7e4:	8e 2f       	mov	r24, r30
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	8a 30       	cpi	r24, 0x0A	; 10
     7ea:	91 05       	cpc	r25, r1
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <USB_Host_ProcessNextHostState+0x2a>
     7ee:	f6 c0       	rjmp	.+492    	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
     7f0:	fc 01       	movw	r30, r24
     7f2:	e4 5b       	subi	r30, 0xB4	; 180
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7fa:	00 91 35 05 	lds	r16, 0x0535	; 0x800535 <WaitMSRemaining.2935>
     7fe:	10 91 36 05 	lds	r17, 0x0536	; 0x800536 <WaitMSRemaining.2935+0x1>
     802:	01 15       	cp	r16, r1
     804:	11 05       	cpc	r17, r1
     806:	09 f4       	brne	.+2      	; 0x80a <USB_Host_ProcessNextHostState+0x44>
     808:	e9 c0       	rjmp	.+466    	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	8f df       	rcall	.-226    	; 0x72c <USB_Host_WaitMS>
     80e:	88 23       	and	r24, r24
     810:	31 f0       	breq	.+12     	; 0x81e <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     812:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <PostWaitState.2936>
     816:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     81a:	91 e0       	ldi	r25, 0x01	; 1
					break;
     81c:	d1 c0       	rjmp	.+418    	; 0x9c0 <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     81e:	01 50       	subi	r16, 0x01	; 1
     820:	11 09       	sbc	r17, r1
     822:	10 93 36 05 	sts	0x0536, r17	; 0x800536 <WaitMSRemaining.2935+0x1>
     826:	00 93 35 05 	sts	0x0535, r16	; 0x800535 <WaitMSRemaining.2935>
     82a:	01 2b       	or	r16, r17
     82c:	09 f0       	breq	.+2      	; 0x830 <USB_Host_ProcessNextHostState+0x6a>
     82e:	d6 c0       	rjmp	.+428    	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     830:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <PostWaitState.2936>
     834:	07 c0       	rjmp	.+14     	; 0x844 <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     836:	88 ee       	ldi	r24, 0xE8	; 232
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <WaitMSRemaining.2935+0x1>
     83e:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <USB_HostState>
			break;
     848:	c9 c0       	rjmp	.+402    	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     84a:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <WaitMSRemaining.2935>
     84e:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <WaitMSRemaining.2935+0x1>
     852:	9c 01       	movw	r18, r24
     854:	21 50       	subi	r18, 0x01	; 1
     856:	31 09       	sbc	r19, r1
     858:	30 93 36 05 	sts	0x0536, r19	; 0x800536 <WaitMSRemaining.2935+0x1>
     85c:	20 93 35 05 	sts	0x0535, r18	; 0x800535 <WaitMSRemaining.2935>
     860:	89 2b       	or	r24, r25
     862:	39 f0       	breq	.+14     	; 0x872 <USB_Host_ProcessNextHostState+0xac>
     864:	8f ec       	ldi	r24, 0xCF	; 207
     866:	97 e0       	ldi	r25, 0x07	; 7
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <USB_Host_ProcessNextHostState+0xa2>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <USB_Host_ProcessNextHostState+0xa8>
     86e:	00 00       	nop
     870:	b5 c0       	rjmp	.+362    	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     872:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     874:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     878:	80 61       	ori	r24, 0x10	; 16
     87a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     87e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     882:	8b 7f       	andi	r24, 0xFB	; 251
     884:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     888:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     88c:	80 61       	ori	r24, 0x10	; 16
     88e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     892:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     896:	82 60       	ori	r24, 0x02	; 2
     898:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	d2 cf       	rjmp	.-92     	; 0x844 <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     8a0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     8a4:	80 ff       	sbrs	r24, 0
     8a6:	9a c0       	rjmp	.+308    	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     8a8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     8ac:	8e 7f       	andi	r24, 0xFE	; 254
     8ae:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8b2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     8b6:	8d 7f       	andi	r24, 0xFD	; 253
     8b8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     8bc:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     8c0:	8d 7f       	andi	r24, 0xFD	; 253
     8c2:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     8c6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     8ca:	82 60       	ori	r24, 0x02	; 2
     8cc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8d0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8d4:	81 60       	ori	r24, 0x01	; 1
     8d6:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8da:	e8 d0       	rcall	.+464    	; 0xaac <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8dc:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <USB_HostState>
     8e0:	84 e6       	ldi	r24, 0x64	; 100
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <WaitMSRemaining.2935+0x1>
     8e8:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <WaitMSRemaining.2935>
     8ec:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8ee:	5c c0       	rjmp	.+184    	; 0x9a8 <USB_Host_ProcessNextHostState+0x1e2>
     8f0:	cc de       	rcall	.-616    	; 0x68a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8f2:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <USB_HostState>
     8f6:	88 ec       	ldi	r24, 0xC8	; 200
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <WaitMSRemaining.2935+0x1>
     8fe:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <WaitMSRemaining.2935>
     902:	86 e0       	ldi	r24, 0x06	; 6
     904:	51 c0       	rjmp	.+162    	; 0x9a8 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     906:	e1 2c       	mov	r14, r1
     908:	00 e4       	ldi	r16, 0x40	; 64
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	6f d0       	rcall	.+222    	; 0x9f4 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     916:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     91a:	87 fd       	sbrc	r24, 7
     91c:	03 c0       	rjmp	.+6      	; 0x924 <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     91e:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	4e c0       	rjmp	.+156    	; 0x9c0 <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     924:	87 e0       	ldi	r24, 0x07	; 7
     926:	8e cf       	rjmp	.-228    	; 0x844 <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	eb e1       	ldi	r30, 0x1B	; 27
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	a9 e3       	ldi	r26, 0x39	; 57
     930:	b5 e0       	ldi	r27, 0x05	; 5
     932:	01 90       	ld	r0, Z+
     934:	0d 92       	st	X+, r0
     936:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     938:	e1 f7       	brne	.-8      	; 0x932 <USB_Host_ProcessNextHostState+0x16c>
     93a:	ce 01       	movw	r24, r28
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	8f d3       	rcall	.+1822   	; 0x105e <USB_Host_SendControlRequest>
     940:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     942:	3d c0       	rjmp	.+122    	; 0x9be <USB_Host_ProcessNextHostState+0x1f8>
     944:	88 85       	ldd	r24, Y+8	; 0x08
     946:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     94a:	9f de       	rcall	.-706    	; 0x68a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     94c:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <USB_HostState>
     950:	88 ec       	ldi	r24, 0xC8	; 200
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <WaitMSRemaining.2935+0x1>
     958:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <WaitMSRemaining.2935>
     95c:	88 e0       	ldi	r24, 0x08	; 8
     95e:	24 c0       	rjmp	.+72     	; 0x9a8 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     960:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <USB_Host_ControlPipeSize>
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	e1 2c       	mov	r14, r1
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	41 d0       	rcall	.+130    	; 0x9f4 <Pipe_ConfigurePipe>
     972:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     976:	87 ff       	sbrs	r24, 7
     978:	d2 cf       	rjmp	.-92     	; 0x91e <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	e3 e2       	ldi	r30, 0x23	; 35
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	a9 e3       	ldi	r26, 0x39	; 57
     982:	b5 e0       	ldi	r27, 0x05	; 5
     984:	01 90       	ld	r0, Z+
     986:	0d 92       	st	X+, r0
     988:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     98a:	e1 f7       	brne	.-8      	; 0x984 <USB_Host_ProcessNextHostState+0x1be>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	66 d3       	rcall	.+1740   	; 0x105e <USB_Host_SendControlRequest>
     992:	81 11       	cpse	r24, r1
     994:	14 c0       	rjmp	.+40     	; 0x9be <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     996:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <USB_HostState>
     99a:	84 e6       	ldi	r24, 0x64	; 100
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <WaitMSRemaining.2935+0x1>
     9a2:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <WaitMSRemaining.2935>
     9a6:	89 e0       	ldi	r24, 0x09	; 9
     9a8:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     9ac:	17 c0       	rjmp	.+46     	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     9ba:	77 dd       	rcall	.-1298   	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     9bc:	0f c0       	rjmp	.+30     	; 0x9dc <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9c4:	21 30       	cpi	r18, 0x01	; 1
     9c6:	51 f0       	breq	.+20     	; 0x9dc <USB_Host_ProcessNextHostState+0x216>
     9c8:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9ca:	89 2f       	mov	r24, r25
     9cc:	46 de       	rcall	.-884    	; 0x65a <EVENT_USB_Host_DeviceEnumerationFailed>
     9ce:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9d2:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9d4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     9d8:	62 dd       	rcall	.-1340   	; 0x49e <EVENT_USB_Host_DeviceUnattached>
     9da:	e4 d0       	rcall	.+456    	; 0xba4 <USB_ResetInterface>
	}
}
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9f4:	ef 92       	push	r14
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9fa:	2f 70       	andi	r18, 0x0F	; 15
     9fc:	42 2b       	or	r20, r18
     9fe:	90 e4       	ldi	r25, 0x40	; 64
     a00:	69 9f       	mul	r22, r25
     a02:	b0 01       	movw	r22, r0
     a04:	11 24       	eor	r1, r1
     a06:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a08:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a0a:	2e 2d       	mov	r18, r14
     a0c:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a0e:	37 30       	cpi	r19, 0x07	; 7
     a10:	08 f0       	brcs	.+2      	; 0xa14 <Pipe_ConfigurePipe+0x20>
     a12:	45 c0       	rjmp	.+138    	; 0xa9e <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a14:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     a18:	38 13       	cpse	r19, r24
     a1a:	13 c0       	rjmp	.+38     	; 0xa42 <Pipe_ConfigurePipe+0x4e>
     a1c:	48 e0       	ldi	r20, 0x08	; 8
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a22:	40 17       	cp	r20, r16
     a24:	51 07       	cpc	r21, r17
     a26:	38 f0       	brcs	.+14     	; 0xa36 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a28:	92 95       	swap	r25
     a2a:	90 7f       	andi	r25, 0xF0	; 240
     a2c:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a2e:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a30:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <Pipe_ConfigurePipe+0x5e>
     a36:	95 30       	cpi	r25, 0x05	; 5
     a38:	b9 f3       	breq	.-18     	; 0xa28 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     a3a:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     a3c:	44 0f       	add	r20, r20
     a3e:	55 1f       	adc	r21, r21
     a40:	f0 cf       	rjmp	.-32     	; 0xa22 <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a42:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     a46:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     a4a:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     a4e:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a52:	91 fd       	sbrc	r25, 1
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a56:	3f 5f       	subi	r19, 0xFF	; 255
     a58:	da cf       	rjmp	.-76     	; 0xa0e <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a5a:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a5e:	4e 7f       	andi	r20, 0xFE	; 254
     a60:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a64:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a68:	4d 7f       	andi	r20, 0xFD	; 253
     a6a:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a6e:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a72:	41 60       	ori	r20, 0x01	; 1
     a74:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a78:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     a7c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     a80:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     a84:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a88:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a8c:	90 62       	ori	r25, 0x20	; 32
     a8e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a92:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a96:	97 fd       	sbrc	r25, 7
     a98:	de cf       	rjmp	.-68     	; 0xa56 <Pipe_ConfigurePipe+0x62>
		  return false;		
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a9e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     aac:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ab6:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     aba:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     abe:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ac2:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ac6:	9e 7f       	andi	r25, 0xFE	; 254
     ac8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	87 30       	cpi	r24, 0x07	; 7
     ad0:	81 f7       	brne	.-32     	; 0xab2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     ad2:	08 95       	ret

00000ad4 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     ad4:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     ad8:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ada:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     adc:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ae0:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     ae4:	27 ff       	sbrs	r18, 7
     ae6:	0f c0       	rjmp	.+30     	; 0xb06 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     ae8:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     aec:	42 2f       	mov	r20, r18
     aee:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     af0:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     af4:	20 73       	andi	r18, 0x30	; 48
     af6:	20 31       	cpi	r18, 0x10	; 16
     af8:	11 f0       	breq	.+4      	; 0xafe <Pipe_IsEndpointBound+0x2a>
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <Pipe_IsEndpointBound+0x2c>
     afe:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b00:	24 2b       	or	r18, r20
     b02:	82 17       	cp	r24, r18
     b04:	39 f0       	breq	.+14     	; 0xb14 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b06:	9f 5f       	subi	r25, 0xFF	; 255
     b08:	97 30       	cpi	r25, 0x07	; 7
     b0a:	41 f7       	brne	.-48     	; 0xadc <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b0c:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     b14:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b16:	08 95       	ret

00000b18 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b18:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b1c:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     b20:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b22:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b26:	90 73       	andi	r25, 0x30	; 48
     b28:	90 31       	cpi	r25, 0x10	; 16
     b2a:	29 f4       	brne	.+10     	; 0xb36 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b2c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     b30:	90 ff       	sbrs	r25, 0
     b32:	05 c0       	rjmp	.+10     	; 0xb3e <Pipe_WaitUntilReady+0x26>
     b34:	19 c0       	rjmp	.+50     	; 0xb68 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b36:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b3a:	92 fd       	sbrc	r25, 2
     b3c:	15 c0       	rjmp	.+42     	; 0xb68 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b3e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b42:	91 fd       	sbrc	r25, 1
     b44:	13 c0       	rjmp	.+38     	; 0xb6c <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b46:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <USB_HostState>
     b4a:	91 30       	cpi	r25, 0x01	; 1
     b4c:	89 f0       	breq	.+34     	; 0xb70 <Pipe_WaitUntilReady+0x58>
     b4e:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b52:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b56:	42 17       	cp	r20, r18
     b58:	53 07       	cpc	r21, r19
     b5a:	19 f3       	breq	.-58     	; 0xb22 <Pipe_WaitUntilReady+0xa>
     b5c:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b5e:	11 f0       	breq	.+4      	; 0xb64 <Pipe_WaitUntilReady+0x4c>
     b60:	a9 01       	movw	r20, r18
     b62:	df cf       	rjmp	.-66     	; 0xb22 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b70:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b72:	08 95       	ret

00000b74 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b74:	70 d0       	rcall	.+224    	; 0xc56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b76:	77 d0       	rcall	.+238    	; 0xc66 <USB_INT_ClearAllInterrupts>
     b78:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	81 60       	ori	r24, 0x01	; 1
     b80:	80 83       	st	Z, r24
     b82:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8f 77       	andi	r24, 0x7F	; 127
     b8a:	80 83       	st	Z, r24
     b8c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b8e:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	8c 91       	ld	r24, X
     b94:	8e 7f       	andi	r24, 0xFE	; 254
     b96:	8c 93       	st	X, r24
     b98:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	80 83       	st	Z, r24
     b9e:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ba2:	08 95       	ret

00000ba4 <USB_ResetInterface>:
     ba4:	58 d0       	rcall	.+176    	; 0xc56 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     ba6:	5f d0       	rcall	.+190    	; 0xc66 <USB_INT_ClearAllInterrupts>
     ba8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bb2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bbc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bc0:	8f 7d       	andi	r24, 0xDF	; 223
     bc2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bc6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     bd0:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bd2:	89 bd       	out	0x29, r24	; 41
     bd4:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bd6:	89 bd       	out	0x29, r24	; 41
     bd8:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     bda:	00 fe       	sbrs	r0, 0
     bdc:	fd cf       	rjmp	.-6      	; 0xbd8 <USB_ResetInterface+0x34>
     bde:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     be0:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <USB_HostState>
     be4:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     be8:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bea:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_Host_ControlPipeSize>
     bee:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bf8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c02:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c06:	84 60       	ori	r24, 0x04	; 4
     c08:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c0c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c16:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     c18:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c1a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c24:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c2e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     c38:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c3c:	80 61       	ori	r24, 0x10	; 16
     c3e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c42:	08 95       	ret

00000c44 <USB_Init>:
     c44:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <USB_IsInitialized>

	USB_ResetInterface();
     c54:	a7 cf       	rjmp	.-178    	; 0xba4 <USB_ResetInterface>

00000c56 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c56:	e8 ed       	ldi	r30, 0xD8	; 216
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8c 7f       	andi	r24, 0xFC	; 252
     c5e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c60:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c64:	08 95       	ret

00000c66 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c66:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c6a:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c6e:	08 95       	ret

00000c70 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	0b b6       	in	r0, 0x3b	; 59
     c7c:	0f 92       	push	r0
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c96:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c9a:	85 ff       	sbrs	r24, 5
     c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c9e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ca2:	85 ff       	sbrs	r24, 5
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ca6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     caa:	8f 7d       	andi	r24, 0xDF	; 223
     cac:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cb0:	af d1       	rcall	.+862    	; 0x1010 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cb2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cb6:	81 ff       	sbrs	r24, 1
     cb8:	15 c0       	rjmp	.+42     	; 0xce4 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     cba:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cbe:	81 ff       	sbrs	r24, 1
     cc0:	11 c0       	rjmp	.+34     	; 0xce4 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cc2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cc6:	8d 7f       	andi	r24, 0xFD	; 253
     cc8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ccc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     cd6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cda:	8d 7f       	andi	r24, 0xFD	; 253
     cdc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     ce0:	de db       	rcall	.-2116   	; 0x49e <EVENT_USB_Host_DeviceUnattached>
     ce2:	60 df       	rcall	.-320    	; 0xba4 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ce4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ce8:	81 ff       	sbrs	r24, 1
     cea:	15 c0       	rjmp	.+42     	; 0xd16 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     cec:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     cf0:	81 ff       	sbrs	r24, 1
     cf2:	11 c0       	rjmp	.+34     	; 0xd16 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cf4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     cf8:	8d 7f       	andi	r24, 0xFD	; 253
     cfa:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cfe:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d00:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	95 dc       	rcall	.-1750   	; 0x638 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d0e:	c7 db       	rcall	.-2162   	; 0x49e <EVENT_USB_Host_DeviceUnattached>
     d10:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     d12:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <USB_HostState>
     d16:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d1a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d1c:	17 c0       	rjmp	.+46     	; 0xd4c <__vector_10+0xdc>
     d1e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d22:	80 ff       	sbrs	r24, 0
     d24:	13 c0       	rjmp	.+38     	; 0xd4c <__vector_10+0xdc>
     d26:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d2a:	8e 7f       	andi	r24, 0xFE	; 254
     d2c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d30:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d3a:	ab db       	rcall	.-2218   	; 0x492 <EVENT_USB_Host_DeviceAttached>
     d3c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d46:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d48:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <USB_HostState>
     d4c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d50:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <__vector_10+0x100>
     d54:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d58:	82 ff       	sbrs	r24, 2
     d5a:	0a c0       	rjmp	.+20     	; 0xd70 <__vector_10+0x100>
     d5c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d60:	8b 7f       	andi	r24, 0xFB	; 251
     d62:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	77 dc       	rcall	.-1810   	; 0x65a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d6c:	98 db       	rcall	.-2256   	; 0x49e <EVENT_USB_Host_DeviceUnattached>
     d6e:	1a df       	rcall	.-460    	; 0xba4 <USB_ResetInterface>

		USB_ResetInterface();
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0b be       	out	0x3b, r0	; 59
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <Pipe_Discard_Stream>:
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
     da4:	8b 01       	movw	r16, r22
     da6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     daa:	8f 7c       	andi	r24, 0xCF	; 207
     dac:	80 61       	ori	r24, 0x10	; 16
     dae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     db2:	b2 de       	rcall	.-668    	; 0xb18 <Pipe_WaitUntilReady>
     db4:	81 11       	cpse	r24, r1
     db6:	2d c0       	rjmp	.+90     	; 0xe12 <Pipe_Discard_Stream+0x7c>
     db8:	01 15       	cp	r16, r1
     dba:	11 05       	cpc	r17, r1
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <Pipe_Discard_Stream+0x32>
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	c8 1b       	sub	r28, r24
     dc6:	d9 0b       	sbc	r29, r25
     dc8:	e1 2c       	mov	r14, r1
     dca:	f1 2c       	mov	r15, r1
     dcc:	20 97       	sbiw	r28, 0x00	; 0
     dce:	01 f1       	breq	.+64     	; 0xe10 <Pipe_Discard_Stream+0x7a>
     dd0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     dd4:	85 fd       	sbrc	r24, 5
     dd6:	15 c0       	rjmp	.+42     	; 0xe02 <Pipe_Discard_Stream+0x6c>
     dd8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ddc:	8e 77       	andi	r24, 0x7E	; 126
     dde:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     de2:	01 15       	cp	r16, r1
     de4:	11 05       	cpc	r17, r1
     de6:	49 f0       	breq	.+18     	; 0xdfa <Pipe_Discard_Stream+0x64>
     de8:	f8 01       	movw	r30, r16
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	e8 0e       	add	r14, r24
     df0:	f9 1e       	adc	r15, r25
     df2:	f1 82       	std	Z+1, r15	; 0x01
     df4:	e0 82       	st	Z, r14
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	0c c0       	rjmp	.+24     	; 0xe12 <Pipe_Discard_Stream+0x7c>
     dfa:	8e de       	rcall	.-740    	; 0xb18 <Pipe_WaitUntilReady>
     dfc:	88 23       	and	r24, r24
     dfe:	31 f3       	breq	.-52     	; 0xdcc <Pipe_Discard_Stream+0x36>
     e00:	08 c0       	rjmp	.+16     	; 0xe12 <Pipe_Discard_Stream+0x7c>
     e02:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     e06:	21 97       	sbiw	r28, 0x01	; 1
     e08:	ff ef       	ldi	r31, 0xFF	; 255
     e0a:	ef 1a       	sub	r14, r31
     e0c:	ff 0a       	sbc	r15, r31
     e0e:	de cf       	rjmp	.-68     	; 0xdcc <Pipe_Discard_Stream+0x36>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	08 95       	ret

00000e20 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	8b 01       	movw	r16, r22
     e34:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e36:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e3a:	8f 7c       	andi	r24, 0xCF	; 207
     e3c:	80 61       	ori	r24, 0x10	; 16
     e3e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e42:	6a de       	rcall	.-812    	; 0xb18 <Pipe_WaitUntilReady>
     e44:	81 11       	cpse	r24, r1
     e46:	32 c0       	rjmp	.+100    	; 0xeac <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e48:	e1 14       	cp	r14, r1
     e4a:	f1 04       	cpc	r15, r1
     e4c:	39 f0       	breq	.+14     	; 0xe5c <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     e4e:	f7 01       	movw	r30, r14
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	08 1b       	sub	r16, r24
     e56:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e58:	c8 0f       	add	r28, r24
     e5a:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e5c:	c1 2c       	mov	r12, r1
     e5e:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e60:	01 15       	cp	r16, r1
     e62:	11 05       	cpc	r17, r1
     e64:	11 f1       	breq	.+68     	; 0xeaa <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e66:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e6a:	85 fd       	sbrc	r24, 5
     e6c:	15 c0       	rjmp	.+42     	; 0xe98 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e6e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e72:	8e 77       	andi	r24, 0x7E	; 126
     e74:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e78:	e1 14       	cp	r14, r1
     e7a:	f1 04       	cpc	r15, r1
     e7c:	49 f0       	breq	.+18     	; 0xe90 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     e7e:	f7 01       	movw	r30, r14
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	c8 0e       	add	r12, r24
     e86:	d9 1e       	adc	r13, r25
     e88:	d1 82       	std	Z+1, r13	; 0x01
     e8a:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     e8c:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <Pipe_Read_Stream_LE+0x8c>
     e90:	43 de       	rcall	.-890    	; 0xb18 <Pipe_WaitUntilReady>
     e92:	88 23       	and	r24, r24
     e94:	29 f3       	breq	.-54     	; 0xe60 <Pipe_Read_Stream_LE+0x40>
     e96:	0a c0       	rjmp	.+20     	; 0xeac <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e98:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e9c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e9e:	01 50       	subi	r16, 0x01	; 1
     ea0:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     ea2:	ff ef       	ldi	r31, 0xFF	; 255
     ea4:	cf 1a       	sub	r12, r31
     ea6:	df 0a       	sbc	r13, r31
     ea8:	db cf       	rjmp	.-74     	; 0xe60 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	08 95       	ret

00000ebe <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	dc 01       	movw	r26, r24
     ec4:	eb 01       	movw	r28, r22
     ec6:	e8 81       	ld	r30, Y
     ec8:	f9 81       	ldd	r31, Y+1	; 0x01
     eca:	20 81       	ld	r18, Z
     ecc:	8d 91       	ld	r24, X+
     ece:	9c 91       	ld	r25, X
     ed0:	11 97       	sbiw	r26, 0x01	; 1
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	08 f4       	brcc	.+2      	; 0xedc <USB_GetNextDescriptor+0x1e>
     eda:	9c 01       	movw	r18, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	eb 01       	movw	r28, r22
     ee2:	f9 83       	std	Y+1, r31	; 0x01
     ee4:	e8 83       	st	Y, r30
     ee6:	8d 91       	ld	r24, X+
     ee8:	9c 91       	ld	r25, X
     eea:	11 97       	sbiw	r26, 0x01	; 1
     eec:	82 1b       	sub	r24, r18
     eee:	93 0b       	sbc	r25, r19
     ef0:	8d 93       	st	X+, r24
     ef2:	9c 93       	st	X, r25
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <USB_Host_GetDeviceConfigDescriptor>:
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	29 97       	sbiw	r28, 0x09	; 9
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	6b 01       	movw	r12, r22
     f1c:	8a 01       	movw	r16, r20
     f1e:	79 01       	movw	r14, r18
     f20:	90 e8       	ldi	r25, 0x80	; 128
     f22:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <USB_ControlRequest>
     f26:	96 e0       	ldi	r25, 0x06	; 6
     f28:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <USB_ControlRequest+0x1>
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	92 60       	ori	r25, 0x02	; 2
     f32:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <USB_ControlRequest+0x3>
     f36:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <USB_ControlRequest+0x2>
     f3a:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <USB_ControlRequest+0x5>
     f3e:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <USB_ControlRequest+0x4>
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <USB_ControlRequest+0x7>
     f4a:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <USB_ControlRequest+0x6>
     f4e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	83 d0       	rcall	.+262    	; 0x105e <USB_Host_SendControlRequest>
     f58:	81 11       	cpse	r24, r1
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	f6 01       	movw	r30, r12
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	e8 16       	cp	r14, r24
     f68:	f9 06       	cpc	r15, r25
     f6a:	70 f0       	brcs	.+28     	; 0xf88 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     f6c:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <USB_ControlRequest+0x7>
     f70:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <USB_ControlRequest+0x6>
     f74:	c8 01       	movw	r24, r16
     f76:	73 d0       	rcall	.+230    	; 0x105e <USB_Host_SendControlRequest>
     f78:	81 11       	cpse	r24, r1
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
     f7c:	f8 01       	movw	r30, r16
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	21 f4       	brne	.+8      	; 0xf8c <USB_Host_GetDeviceConfigDescriptor+0x92>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
     f8c:	86 e0       	ldi	r24, 0x06	; 6
     f8e:	29 96       	adiw	r28, 0x09	; 9
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	08 95       	ret

00000fac <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     fac:	af 92       	push	r10
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	8c 01       	movw	r16, r24
     fc2:	eb 01       	movw	r28, r22
     fc4:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     fc6:	f8 01       	movw	r30, r16
     fc8:	e0 80       	ld	r14, Z
     fca:	f1 80       	ldd	r15, Z+1	; 0x01
     fcc:	e1 14       	cp	r14, r1
     fce:	f1 04       	cpc	r15, r1
     fd0:	99 f0       	breq	.+38     	; 0xff8 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     fd2:	a8 80       	ld	r10, Y
     fd4:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     fd6:	be 01       	movw	r22, r28
     fd8:	c8 01       	movw	r24, r16
     fda:	71 df       	rcall	.-286    	; 0xebe <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     fdc:	88 81       	ld	r24, Y
     fde:	99 81       	ldd	r25, Y+1	; 0x01
     fe0:	f6 01       	movw	r30, r12
     fe2:	09 95       	icall
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	79 f3       	breq	.-34     	; 0xfc6 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	39 f4       	brne	.+14     	; 0xffa <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     fec:	b9 82       	std	Y+1, r11	; 0x01
     fee:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     ff0:	f8 01       	movw	r30, r16
     ff2:	f1 82       	std	Z+1, r15	; 0x01
     ff4:	e0 82       	st	Z, r14
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ff8:	82 e0       	ldi	r24, 0x02	; 2
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	08 95       	ret

00001010 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1010:	08 95       	ret

00001012 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    101a:	c9 ee       	ldi	r28, 0xE9	; 233
    101c:	d3 e0       	ldi	r29, 0x03	; 3
    101e:	11 11       	cpse	r17, r1
    1020:	0c c0       	rjmp	.+24     	; 0x103a <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1022:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1026:	83 fd       	sbrc	r24, 3
    1028:	15 c0       	rjmp	.+42     	; 0x1054 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	7f db       	rcall	.-2306   	; 0x72c <USB_Host_WaitMS>
    102e:	81 11       	cpse	r24, r1
    1030:	12 c0       	rjmp	.+36     	; 0x1056 <USB_Host_WaitForIOS+0x44>
    1032:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1034:	a1 f7       	brne	.-24     	; 0x101e <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1036:	84 e0       	ldi	r24, 0x04	; 4
    1038:	0e c0       	rjmp	.+28     	; 0x1056 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    103a:	11 30       	cpi	r17, 0x01	; 1
    103c:	29 f4       	brne	.+10     	; 0x1048 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    103e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1042:	80 ff       	sbrs	r24, 0
    1044:	f2 cf       	rjmp	.-28     	; 0x102a <USB_Host_WaitForIOS+0x18>
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1048:	12 30       	cpi	r17, 0x02	; 2
    104a:	79 f7       	brne	.-34     	; 0x102a <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    104c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1050:	82 ff       	sbrs	r24, 2
    1052:	eb cf       	rjmp	.-42     	; 0x102a <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1054:	80 e0       	ldi	r24, 0x00	; 0
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	08 95       	ret

0000105e <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    106a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    106e:	81 70       	andi	r24, 0x01	; 1
    1070:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1072:	c0 91 3f 05 	lds	r28, 0x053F	; 0x80053f <USB_ControlRequest+0x6>
    1076:	d0 91 40 05 	lds	r29, 0x0540	; 0x800540 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    107a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	52 db       	rcall	.-2396   	; 0x72c <USB_Host_WaitMS>
    1088:	81 11       	cpse	r24, r1
    108a:	c8 c0       	rjmp	.+400    	; 0x121c <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    108c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1090:	8f 7c       	andi	r24, 0xCF	; 207
    1092:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1096:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    109a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    109e:	8f 7e       	andi	r24, 0xEF	; 239
    10a0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10a4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10a8:	8f 7b       	andi	r24, 0xBF	; 191
    10aa:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10ae:	e9 e3       	ldi	r30, 0x39	; 57
    10b0:	f5 e0       	ldi	r31, 0x05	; 5
    10b2:	81 e4       	ldi	r24, 0x41	; 65
    10b4:	95 e0       	ldi	r25, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    10b6:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10b8:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10bc:	8e 17       	cp	r24, r30
    10be:	9f 07       	cpc	r25, r31
    10c0:	d1 f7       	brne	.-12     	; 0x10b6 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10c2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10c6:	87 77       	andi	r24, 0x77	; 119
    10c8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	a1 df       	rcall	.-190    	; 0x1012 <USB_Host_WaitForIOS>
    10d0:	81 11       	cpse	r24, r1
    10d2:	a4 c0       	rjmp	.+328    	; 0x121c <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10d4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	25 db       	rcall	.-2486   	; 0x72c <USB_Host_WaitMS>
    10e2:	81 11       	cpse	r24, r1
    10e4:	9b c0       	rjmp	.+310    	; 0x121c <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10e6:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <USB_ControlRequest>
    10ea:	87 ff       	sbrs	r24, 7
    10ec:	4e c0       	rjmp	.+156    	; 0x118a <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ee:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10f2:	8f 7c       	andi	r24, 0xCF	; 207
    10f4:	80 61       	ori	r24, 0x10	; 16
    10f6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10fa:	01 15       	cp	r16, r1
    10fc:	11 05       	cpc	r17, r1
    10fe:	09 f0       	breq	.+2      	; 0x1102 <USB_Host_SendControlRequest+0xa4>
    1100:	3a c0       	rjmp	.+116    	; 0x1176 <USB_Host_SendControlRequest+0x118>
    1102:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1106:	8f 7c       	andi	r24, 0xCF	; 207
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    110e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1112:	8f 7b       	andi	r24, 0xBF	; 191
    1114:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	7b df       	rcall	.-266    	; 0x1012 <USB_Host_WaitForIOS>
    111c:	81 11       	cpse	r24, r1
    111e:	7e c0       	rjmp	.+252    	; 0x121c <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1120:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1124:	8b 77       	andi	r24, 0x7B	; 123
    1126:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	72 df       	rcall	.-284    	; 0x1012 <USB_Host_WaitForIOS>
    112e:	76 c0       	rjmp	.+236    	; 0x121c <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1130:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1134:	8f 7b       	andi	r24, 0xBF	; 191
    1136:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	6a df       	rcall	.-300    	; 0x1012 <USB_Host_WaitForIOS>
    113e:	81 11       	cpse	r24, r1
    1140:	6d c0       	rjmp	.+218    	; 0x121c <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1142:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1146:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    114a:	89 2b       	or	r24, r25
    114c:	11 f4       	brne	.+4      	; 0x1152 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
    1152:	f8 01       	movw	r30, r16
    1154:	8f 01       	movw	r16, r30
    1156:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    115a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    115e:	89 2b       	or	r24, r25
    1160:	69 f4       	brne	.+26     	; 0x117c <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1162:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    116c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1170:	8e 77       	andi	r24, 0x7E	; 126
    1172:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1176:	20 97       	sbiw	r28, 0x00	; 0
    1178:	d9 f6       	brne	.-74     	; 0x1130 <USB_Host_SendControlRequest+0xd2>
    117a:	c3 cf       	rjmp	.-122    	; 0x1102 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    117c:	20 97       	sbiw	r28, 0x00	; 0
    117e:	89 f3       	breq	.-30     	; 0x1162 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1180:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    1184:	81 93       	st	Z+, r24
					DataLen--;
    1186:	21 97       	sbiw	r28, 0x01	; 1
    1188:	e5 cf       	rjmp	.-54     	; 0x1154 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    118a:	01 15       	cp	r16, r1
    118c:	11 05       	cpc	r17, r1
    118e:	91 f1       	breq	.+100    	; 0x11f4 <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1190:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1194:	8f 7c       	andi	r24, 0xCF	; 207
    1196:	80 62       	ori	r24, 0x20	; 32
    1198:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    119c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11a0:	8f 7b       	andi	r24, 0xBF	; 191
    11a2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11aa:	e1 f0       	breq	.+56     	; 0x11e4 <USB_Host_SendControlRequest+0x186>
    11ac:	32 df       	rcall	.-412    	; 0x1012 <USB_Host_WaitForIOS>
    11ae:	81 11       	cpse	r24, r1
    11b0:	35 c0       	rjmp	.+106    	; 0x121c <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11b2:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    11b6:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_Host_ControlPipeSize>
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	48 f4       	brcc	.+18     	; 0x11d8 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    11c6:	0f 5f       	subi	r16, 0xFF	; 255
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ca:	f8 01       	movw	r30, r16
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11d0:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    11d4:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11d6:	69 f7       	brne	.-38     	; 0x11b2 <USB_Host_SendControlRequest+0x154>
    11d8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11dc:	8b 77       	andi	r24, 0x7B	; 123
    11de:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11e2:	e1 cf       	rjmp	.-62     	; 0x11a6 <USB_Host_SendControlRequest+0x148>
    11e4:	16 df       	rcall	.-468    	; 0x1012 <USB_Host_WaitForIOS>
    11e6:	81 11       	cpse	r24, r1
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ea:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11f4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    11f8:	8f 7c       	andi	r24, 0xCF	; 207
    11fa:	80 61       	ori	r24, 0x10	; 16
    11fc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1200:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1204:	8f 7b       	andi	r24, 0xBF	; 191
    1206:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	02 df       	rcall	.-508    	; 0x1012 <USB_Host_WaitForIOS>
    120e:	81 11       	cpse	r24, r1
    1210:	05 c0       	rjmp	.+10     	; 0x121c <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1212:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1216:	9e 77       	andi	r25, 0x7E	; 126
    1218:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    121c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1220:	90 64       	ori	r25, 0x40	; 64
    1222:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1226:	f1 10       	cpse	r15, r1
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    122a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    122e:	9e 7f       	andi	r25, 0xFE	; 254
    1230:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    123a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	08 95       	ret

0000124a <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    124a:	cf 93       	push	r28
    124c:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    124e:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <USB_ControlRequest>
    1252:	89 e0       	ldi	r24, 0x09	; 9
    1254:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <USB_ControlRequest+0x1>
    1258:	8c 2f       	mov	r24, r28
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <USB_ControlRequest+0x3>
    1260:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <USB_ControlRequest+0x2>
    1264:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <USB_ControlRequest+0x5>
    1268:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <USB_ControlRequest+0x4>
    126c:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <USB_ControlRequest+0x7>
    1270:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1274:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	f0 de       	rcall	.-544    	; 0x105e <USB_Host_SendControlRequest>
    127e:	81 11       	cpse	r24, r1
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1282:	c0 93 37 05 	sts	0x0537, r28	; 0x800537 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1286:	c1 11       	cpse	r28, r1
    1288:	02 c0       	rjmp	.+4      	; 0x128e <USB_Host_SetDeviceConfiguration+0x44>
    128a:	9a e0       	ldi	r25, 0x0A	; 10
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <USB_Host_SetDeviceConfiguration+0x46>
    128e:	9b e0       	ldi	r25, 0x0B	; 11
    1290:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <USB_HostState>
	}

	return ErrorCode;
}
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    129e:	c7 ea       	ldi	r28, 0xA7	; 167
    12a0:	d0 e0       	ldi	r29, 0x00	; 0
    12a2:	18 81       	ld	r17, Y
    12a4:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12a6:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12a8:	8e da       	rcall	.-2788   	; 0x7c6 <USB_Host_ProcessNextHostState>
    12aa:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	08 95       	ret

000012b4 <DCOMP_RNDIS_Host_NextRNDISControlInterface>:
	{
		return ErrorCode;
	}

	return HOST_SENDCONTROL_Successful;
}
    12b4:	fc 01       	movw	r30, r24
    12b6:	81 81       	ldd	r24, Z+1	; 0x01
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	59 f4       	brne	.+22     	; 0x12d2 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    12bc:	85 81       	ldd	r24, Z+5	; 0x05
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    12c2:	86 81       	ldd	r24, Z+6	; 0x06
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    12c8:	97 81       	ldd	r25, Z+7	; 0x07
    12ca:	9f 3f       	cpi	r25, 0xFF	; 255
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x20>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	08 95       	ret
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	08 95       	ret

000012d6 <DCOMP_RNDIS_Host_NextRNDISDataInterface>:
    12d6:	fc 01       	movw	r30, r24
    12d8:	81 81       	ldd	r24, Z+1	; 0x01
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	51 f4       	brne	.+20     	; 0x12f2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
    12de:	85 81       	ldd	r24, Z+5	; 0x05
    12e0:	8a 30       	cpi	r24, 0x0A	; 10
    12e2:	39 f4       	brne	.+14     	; 0x12f2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
    12e4:	86 81       	ldd	r24, Z+6	; 0x06
    12e6:	81 11       	cpse	r24, r1
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
    12ea:	87 81       	ldd	r24, Z+7	; 0x07
    12ec:	81 11       	cpse	r24, r1
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
    12f0:	08 95       	ret
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	08 95       	ret

000012f6 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:
    12f6:	fc 01       	movw	r30, r24
    12f8:	21 81       	ldd	r18, Z+1	; 0x01
    12fa:	25 30       	cpi	r18, 0x05	; 5
    12fc:	59 f4       	brne	.+22     	; 0x1314 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1e>
    12fe:	23 81       	ldd	r18, Z+3	; 0x03
    1300:	23 70       	andi	r18, 0x03	; 3
    1302:	22 50       	subi	r18, 0x02	; 2
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	20 f4       	brcc	.+8      	; 0x1310 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1a>
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	e4 db       	rcall	.-2104   	; 0xad4 <Pipe_IsEndpointBound>
    130c:	88 23       	and	r24, r24
    130e:	31 f0       	breq	.+12     	; 0x131c <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x26>
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	08 95       	ret
    1314:	24 30       	cpi	r18, 0x04	; 4
    1316:	e1 f7       	brne	.-8      	; 0x1310 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1a>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	08 95       	ret
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	08 95       	ret

00001320 <RNDIS_SendEncapsulatedCommand>:
    1320:	fc 01       	movw	r30, r24
    1322:	83 85       	ldd	r24, Z+11	; 0x0b
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	e9 e3       	ldi	r30, 0x39	; 57
    1328:	f5 e0       	ldi	r31, 0x05	; 5
    132a:	21 e2       	ldi	r18, 0x21	; 33
    132c:	20 83       	st	Z, r18
    132e:	11 82       	std	Z+1, r1	; 0x01
    1330:	13 82       	std	Z+3, r1	; 0x03
    1332:	12 82       	std	Z+2, r1	; 0x02
    1334:	95 83       	std	Z+5, r25	; 0x05
    1336:	84 83       	std	Z+4, r24	; 0x04
    1338:	57 83       	std	Z+7, r21	; 0x07
    133a:	46 83       	std	Z+6, r20	; 0x06
    133c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1340:	cb 01       	movw	r24, r22
    1342:	8d ce       	rjmp	.-742    	; 0x105e <USB_Host_SendControlRequest>

00001344 <RNDIS_GetEncapsulatedResponse>:
    1344:	fc 01       	movw	r30, r24
    1346:	83 85       	ldd	r24, Z+11	; 0x0b
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	e9 e3       	ldi	r30, 0x39	; 57
    134c:	f5 e0       	ldi	r31, 0x05	; 5
    134e:	21 ea       	ldi	r18, 0xA1	; 161
    1350:	20 83       	st	Z, r18
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	21 83       	std	Z+1, r18	; 0x01
    1356:	13 82       	std	Z+3, r1	; 0x03
    1358:	12 82       	std	Z+2, r1	; 0x02
    135a:	95 83       	std	Z+5, r25	; 0x05
    135c:	84 83       	std	Z+4, r24	; 0x04
    135e:	57 83       	std	Z+7, r21	; 0x07
    1360:	46 83       	std	Z+6, r20	; 0x06
    1362:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1366:	cb 01       	movw	r24, r22
    1368:	7a ce       	rjmp	.-780    	; 0x105e <USB_Host_SendControlRequest>

0000136a <RNDIS_Host_ConfigurePipes>:
    136a:	3f 92       	push	r3
    136c:	4f 92       	push	r4
    136e:	5f 92       	push	r5
    1370:	6f 92       	push	r6
    1372:	7f 92       	push	r7
    1374:	8f 92       	push	r8
    1376:	9f 92       	push	r9
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	00 d0       	rcall	.+0      	; 0x138e <RNDIS_Host_ConfigurePipes+0x24>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <RNDIS_Host_ConfigurePipes+0x26>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	7a 83       	std	Y+2, r23	; 0x02
    1396:	69 83       	std	Y+1, r22	; 0x01
    1398:	5c 83       	std	Y+4, r21	; 0x04
    139a:	4b 83       	std	Y+3, r20	; 0x03
    139c:	fc 01       	movw	r30, r24
    139e:	3a 96       	adiw	r30, 0x0a	; 10
    13a0:	20 e1       	ldi	r18, 0x10	; 16
    13a2:	df 01       	movw	r26, r30
    13a4:	1d 92       	st	X+, r1
    13a6:	2a 95       	dec	r18
    13a8:	e9 f7       	brne	.-6      	; 0x13a4 <RNDIS_Host_ConfigurePipes+0x3a>
    13aa:	6b 80       	ldd	r6, Y+3	; 0x03
    13ac:	7c 80       	ldd	r7, Y+4	; 0x04
    13ae:	f3 01       	movw	r30, r6
    13b0:	11 81       	ldd	r17, Z+1	; 0x01
    13b2:	12 30       	cpi	r17, 0x02	; 2
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <RNDIS_Host_ConfigurePipes+0x4e>
    13b6:	a8 c0       	rjmp	.+336    	; 0x1508 <RNDIS_Host_ConfigurePipes+0x19e>
    13b8:	6c 01       	movw	r12, r24
    13ba:	a1 2c       	mov	r10, r1
    13bc:	b1 2c       	mov	r11, r1
    13be:	81 2c       	mov	r8, r1
    13c0:	91 2c       	mov	r9, r1
    13c2:	41 2c       	mov	r4, r1
    13c4:	51 2c       	mov	r5, r1
    13c6:	41 14       	cp	r4, r1
    13c8:	51 04       	cpc	r5, r1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <RNDIS_Host_ConfigurePipes+0x64>
    13cc:	3e c0       	rjmp	.+124    	; 0x144a <RNDIS_Host_ConfigurePipes+0xe0>
    13ce:	61 14       	cp	r6, r1
    13d0:	71 04       	cpc	r7, r1
    13d2:	39 f4       	brne	.+14     	; 0x13e2 <RNDIS_Host_ConfigurePipes+0x78>
    13d4:	a1 14       	cp	r10, r1
    13d6:	b1 04       	cpc	r11, r1
    13d8:	79 f4       	brne	.+30     	; 0x13f8 <RNDIS_Host_ConfigurePipes+0x8e>
    13da:	19 c0       	rjmp	.+50     	; 0x140e <RNDIS_Host_ConfigurePipes+0xa4>
    13dc:	61 14       	cp	r6, r1
    13de:	71 04       	cpc	r7, r1
    13e0:	b1 f0       	breq	.+44     	; 0x140e <RNDIS_Host_ConfigurePipes+0xa4>
    13e2:	4b e7       	ldi	r20, 0x7B	; 123
    13e4:	59 e0       	ldi	r21, 0x09	; 9
    13e6:	be 01       	movw	r22, r28
    13e8:	6d 5f       	subi	r22, 0xFD	; 253
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	dd dd       	rcall	.-1094   	; 0xfac <USB_GetNextDescriptorComp>
    13f2:	81 11       	cpse	r24, r1
    13f4:	ef cf       	rjmp	.-34     	; 0x13d4 <RNDIS_Host_ConfigurePipes+0x6a>
    13f6:	1a c0       	rjmp	.+52     	; 0x142c <RNDIS_Host_ConfigurePipes+0xc2>
    13f8:	4b e6       	ldi	r20, 0x6B	; 107
    13fa:	59 e0       	ldi	r21, 0x09	; 9
    13fc:	be 01       	movw	r22, r28
    13fe:	6d 5f       	subi	r22, 0xFD	; 253
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	d2 dd       	rcall	.-1116   	; 0xfac <USB_GetNextDescriptorComp>
    1408:	81 11       	cpse	r24, r1
    140a:	81 c0       	rjmp	.+258    	; 0x150e <RNDIS_Host_ConfigurePipes+0x1a4>
    140c:	d8 cf       	rjmp	.-80     	; 0x13be <RNDIS_Host_ConfigurePipes+0x54>
    140e:	4a e5       	ldi	r20, 0x5A	; 90
    1410:	59 e0       	ldi	r21, 0x09	; 9
    1412:	be 01       	movw	r22, r28
    1414:	6d 5f       	subi	r22, 0xFD	; 253
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	c7 dd       	rcall	.-1138   	; 0xfac <USB_GetNextDescriptorComp>
    141e:	81 11       	cpse	r24, r1
    1420:	76 c0       	rjmp	.+236    	; 0x150e <RNDIS_Host_ConfigurePipes+0x1a4>
    1422:	6b 80       	ldd	r6, Y+3	; 0x03
    1424:	7c 80       	ldd	r7, Y+4	; 0x04
    1426:	a1 2c       	mov	r10, r1
    1428:	b1 2c       	mov	r11, r1
    142a:	cd cf       	rjmp	.-102    	; 0x13c6 <RNDIS_Host_ConfigurePipes+0x5c>
    142c:	eb 81       	ldd	r30, Y+3	; 0x03
    142e:	fc 81       	ldd	r31, Y+4	; 0x04
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	87 ff       	sbrs	r24, 7
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <RNDIS_Host_ConfigurePipes+0xd8>
    1436:	83 81       	ldd	r24, Z+3	; 0x03
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	21 f0       	breq	.+8      	; 0x1446 <RNDIS_Host_ConfigurePipes+0xdc>
    143e:	2f 01       	movw	r4, r30
    1440:	c2 cf       	rjmp	.-124    	; 0x13c6 <RNDIS_Host_ConfigurePipes+0x5c>
    1442:	4f 01       	movw	r8, r30
    1444:	c0 cf       	rjmp	.-128    	; 0x13c6 <RNDIS_Host_ConfigurePipes+0x5c>
    1446:	5f 01       	movw	r10, r30
    1448:	be cf       	rjmp	.-132    	; 0x13c6 <RNDIS_Host_ConfigurePipes+0x5c>
    144a:	81 14       	cp	r8, r1
    144c:	91 04       	cpc	r9, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <RNDIS_Host_ConfigurePipes+0xe8>
    1450:	be cf       	rjmp	.-132    	; 0x13ce <RNDIS_Host_ConfigurePipes+0x64>
    1452:	a1 14       	cp	r10, r1
    1454:	b1 04       	cpc	r11, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <RNDIS_Host_ConfigurePipes+0xf0>
    1458:	c1 cf       	rjmp	.-126    	; 0x13dc <RNDIS_Host_ConfigurePipes+0x72>
    145a:	ff 24       	eor	r15, r15
    145c:	f3 94       	inc	r15
    145e:	d6 01       	movw	r26, r12
    1460:	8c 91       	ld	r24, X
    1462:	8f 11       	cpse	r24, r15
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <RNDIS_Host_ConfigurePipes+0x118>
    1466:	f2 01       	movw	r30, r4
    1468:	04 81       	ldd	r16, Z+4	; 0x04
    146a:	15 81       	ldd	r17, Z+5	; 0x05
    146c:	22 81       	ldd	r18, Z+2	; 0x02
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	8c 91       	ld	r24, X
    1472:	11 97       	sbiw	r26, 0x01	; 1
    1474:	1d 96       	adiw	r26, 0x0d	; 13
    1476:	1c 93       	st	X, r17
    1478:	0e 93       	st	-X, r16
    147a:	1c 97       	sbiw	r26, 0x0c	; 12
    147c:	31 2c       	mov	r3, r1
    147e:	40 e1       	ldi	r20, 0x10	; 16
    1480:	13 c0       	rjmp	.+38     	; 0x14a8 <RNDIS_Host_ConfigurePipes+0x13e>
    1482:	d6 01       	movw	r26, r12
    1484:	12 96       	adiw	r26, 0x02	; 2
    1486:	8c 91       	ld	r24, X
    1488:	12 97       	sbiw	r26, 0x02	; 2
    148a:	8f 11       	cpse	r24, r15
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <RNDIS_Host_ConfigurePipes+0x142>
    148e:	f4 01       	movw	r30, r8
    1490:	04 81       	ldd	r16, Z+4	; 0x04
    1492:	15 81       	ldd	r17, Z+5	; 0x05
    1494:	22 81       	ldd	r18, Z+2	; 0x02
    1496:	13 96       	adiw	r26, 0x03	; 3
    1498:	8c 91       	ld	r24, X
    149a:	13 97       	sbiw	r26, 0x03	; 3
    149c:	1f 96       	adiw	r26, 0x0f	; 15
    149e:	1c 93       	st	X, r17
    14a0:	0e 93       	st	-X, r16
    14a2:	1e 97       	sbiw	r26, 0x0e	; 14
    14a4:	31 2c       	mov	r3, r1
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <RNDIS_Host_ConfigurePipes+0x16a>
    14ac:	d6 01       	movw	r26, r12
    14ae:	14 96       	adiw	r26, 0x04	; 4
    14b0:	8c 91       	ld	r24, X
    14b2:	14 97       	sbiw	r26, 0x04	; 4
    14b4:	8f 11       	cpse	r24, r15
    14b6:	1b c0       	rjmp	.+54     	; 0x14ee <RNDIS_Host_ConfigurePipes+0x184>
    14b8:	f5 01       	movw	r30, r10
    14ba:	04 81       	ldd	r16, Z+4	; 0x04
    14bc:	15 81       	ldd	r17, Z+5	; 0x05
    14be:	22 81       	ldd	r18, Z+2	; 0x02
    14c0:	15 96       	adiw	r26, 0x05	; 5
    14c2:	8c 91       	ld	r24, X
    14c4:	15 97       	sbiw	r26, 0x05	; 5
    14c6:	36 80       	ldd	r3, Z+6	; 0x06
    14c8:	51 96       	adiw	r26, 0x11	; 17
    14ca:	1c 93       	st	X, r17
    14cc:	0e 93       	st	-X, r16
    14ce:	50 97       	sbiw	r26, 0x10	; 16
    14d0:	40 e1       	ldi	r20, 0x10	; 16
    14d2:	63 e0       	ldi	r22, 0x03	; 3
    14d4:	81 11       	cpse	r24, r1
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <RNDIS_Host_ConfigurePipes+0x172>
    14d8:	e1 2c       	mov	r14, r1
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <RNDIS_Host_ConfigurePipes+0x176>
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	e8 2e       	mov	r14, r24
    14e0:	8f 2d       	mov	r24, r15
    14e2:	88 da       	rcall	.-2800   	; 0x9f4 <Pipe_ConfigurePipe>
    14e4:	88 23       	and	r24, r24
    14e6:	91 f0       	breq	.+36     	; 0x150c <RNDIS_Host_ConfigurePipes+0x1a2>
    14e8:	31 10       	cpse	r3, r1
    14ea:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    14ee:	f3 94       	inc	r15
    14f0:	f7 e0       	ldi	r31, 0x07	; 7
    14f2:	ff 12       	cpse	r15, r31
    14f4:	b4 cf       	rjmp	.-152    	; 0x145e <RNDIS_Host_ConfigurePipes+0xf4>
    14f6:	d3 01       	movw	r26, r6
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	8c 91       	ld	r24, X
    14fc:	f6 01       	movw	r30, r12
    14fe:	83 87       	std	Z+11, r24	; 0x0b
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	82 87       	std	Z+10, r24	; 0x0a
    1504:	10 e0       	ldi	r17, 0x00	; 0
    1506:	03 c0       	rjmp	.+6      	; 0x150e <RNDIS_Host_ConfigurePipes+0x1a4>
    1508:	11 e0       	ldi	r17, 0x01	; 1
    150a:	01 c0       	rjmp	.+2      	; 0x150e <RNDIS_Host_ConfigurePipes+0x1a4>
    150c:	13 e0       	ldi	r17, 0x03	; 3
    150e:	81 2f       	mov	r24, r17
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	8f 90       	pop	r8
    1530:	7f 90       	pop	r7
    1532:	6f 90       	pop	r6
    1534:	5f 90       	pop	r5
    1536:	4f 90       	pop	r4
    1538:	3f 90       	pop	r3
    153a:	08 95       	ret

0000153c <RNDIS_Host_InitializeDevice>:

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	cc 54       	subi	r28, 0x4C	; 76
    154a:	d1 09       	sbc	r29, r1
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_MSG);
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	8d ab       	std	Y+53, r24	; 0x35
    1562:	9e ab       	std	Y+54, r25	; 0x36
    1564:	af ab       	std	Y+55, r26	; 0x37
    1566:	b8 af       	std	Y+56, r27	; 0x38
	InitMessage.MessageLength   = CPU_TO_LE32(sizeof(RNDIS_Initialize_Message_t));
    1568:	88 e1       	ldi	r24, 0x18	; 24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a0 e0       	ldi	r26, 0x00	; 0
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	89 af       	std	Y+57, r24	; 0x39
    1572:	9a af       	std	Y+58, r25	; 0x3a
    1574:	ab af       	std	Y+59, r26	; 0x3b
    1576:	bc af       	std	Y+60, r27	; 0x3c
	InitMessage.RequestId       = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1578:	f8 01       	movw	r30, r16
    157a:	86 89       	ldd	r24, Z+22	; 0x16
    157c:	97 89       	ldd	r25, Z+23	; 0x17
    157e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1580:	b1 8d       	ldd	r27, Z+25	; 0x19
    1582:	ac 01       	movw	r20, r24
    1584:	bd 01       	movw	r22, r26
    1586:	4f 5f       	subi	r20, 0xFF	; 255
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	6f 4f       	sbci	r22, 0xFF	; 255
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	46 8b       	std	Z+22, r20	; 0x16
    1590:	57 8b       	std	Z+23, r21	; 0x17
    1592:	60 8f       	std	Z+24, r22	; 0x18
    1594:	71 8f       	std	Z+25, r23	; 0x19
    1596:	21 96       	adiw	r28, 0x01	; 1
    1598:	8c af       	std	Y+60, r24	; 0x3c
    159a:	9d af       	std	Y+61, r25	; 0x3d
    159c:	ae af       	std	Y+62, r26	; 0x3e
    159e:	bf af       	std	Y+63, r27	; 0x3f
    15a0:	21 97       	sbiw	r28, 0x01	; 1

	InitMessage.MajorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	25 96       	adiw	r28, 0x05	; 5
    15ac:	8c af       	std	Y+60, r24	; 0x3c
    15ae:	9d af       	std	Y+61, r25	; 0x3d
    15b0:	ae af       	std	Y+62, r26	; 0x3e
    15b2:	bf af       	std	Y+63, r27	; 0x3f
    15b4:	25 97       	sbiw	r28, 0x05	; 5
	InitMessage.MinorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
    15b6:	29 96       	adiw	r28, 0x09	; 9
    15b8:	1c ae       	std	Y+60, r1	; 0x3c
    15ba:	1d ae       	std	Y+61, r1	; 0x3d
    15bc:	1e ae       	std	Y+62, r1	; 0x3e
    15be:	1f ae       	std	Y+63, r1	; 0x3f
    15c0:	29 97       	sbiw	r28, 0x09	; 9
	InitMessage.MaxTransferSize = cpu_to_le32(RNDISInterfaceInfo->Config.HostMaxPacketSize);
    15c2:	86 81       	ldd	r24, Z+6	; 0x06
    15c4:	97 81       	ldd	r25, Z+7	; 0x07
    15c6:	a0 85       	ldd	r26, Z+8	; 0x08
    15c8:	b1 85       	ldd	r27, Z+9	; 0x09
    15ca:	2d 96       	adiw	r28, 0x0d	; 13
    15cc:	8c af       	std	Y+60, r24	; 0x3c
    15ce:	9d af       	std	Y+61, r25	; 0x3d
    15d0:	ae af       	std	Y+62, r26	; 0x3e
    15d2:	bf af       	std	Y+63, r27	; 0x3f
    15d4:	2d 97       	sbiw	r28, 0x0d	; 13

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    15d6:	48 e1       	ldi	r20, 0x18	; 24
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	be 01       	movw	r22, r28
    15dc:	6b 5c       	subi	r22, 0xCB	; 203
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	c8 01       	movw	r24, r16
    15e2:	9e de       	rcall	.-708    	; 0x1320 <RNDIS_SendEncapsulatedCommand>
    15e4:	81 11       	cpse	r24, r1
    15e6:	1d c0       	rjmp	.+58     	; 0x1622 <RNDIS_Host_InitializeDevice+0xe6>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    15e8:	44 e3       	ldi	r20, 0x34	; 52
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	be 01       	movw	r22, r28
    15ee:	6f 5f       	subi	r22, 0xFF	; 255
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	c8 01       	movw	r24, r16
    15f4:	a7 de       	rcall	.-690    	; 0x1344 <RNDIS_GetEncapsulatedResponse>
    15f6:	81 11       	cpse	r24, r1
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <RNDIS_Host_InitializeDevice+0xe6>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	af 85       	ldd	r26, Y+15	; 0x0f
    1600:	b8 89       	ldd	r27, Y+16	; 0x10
    1602:	89 2b       	or	r24, r25
    1604:	8a 2b       	or	r24, r26
    1606:	8b 2b       	or	r24, r27
    1608:	59 f4       	brne	.+22     	; 0x1620 <RNDIS_Host_InitializeDevice+0xe4>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);
    160a:	8d a1       	ldd	r24, Y+37	; 0x25
    160c:	9e a1       	ldd	r25, Y+38	; 0x26
    160e:	af a1       	ldd	r26, Y+39	; 0x27
    1610:	b8 a5       	ldd	r27, Y+40	; 0x28
    1612:	f8 01       	movw	r30, r16
    1614:	82 8b       	std	Z+18, r24	; 0x12
    1616:	93 8b       	std	Z+19, r25	; 0x13
    1618:	a4 8b       	std	Z+20, r26	; 0x14
    161a:	b5 8b       	std	Z+21, r27	; 0x15

	return HOST_SENDCONTROL_Successful;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <RNDIS_Host_InitializeDevice+0xe6>
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    1620:	80 e8       	ldi	r24, 0x80	; 128

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);

	return HOST_SENDCONTROL_Successful;
}
    1622:	c4 5b       	subi	r28, 0xB4	; 180
    1624:	df 4f       	sbci	r29, 0xFF	; 255
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <RNDIS_Host_SetRNDISProperty>:

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	60 97       	sbiw	r28, 0x10	; 16
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	6c 01       	movw	r12, r24

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    166c:	ad b6       	in	r10, 0x3d	; 61
    166e:	be b6       	in	r11, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    1670:	48 01       	movw	r8, r16
    1672:	8c e1       	ldi	r24, 0x1C	; 28
    1674:	88 0e       	add	r8, r24
    1676:	91 1c       	adc	r9, r1
    1678:	ed b7       	in	r30, 0x3d	; 61
    167a:	fe b7       	in	r31, 0x3e	; 62
    167c:	e8 19       	sub	r30, r8
    167e:	f9 09       	sbc	r31, r9
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	fe bf       	out	0x3e, r31	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	ed bf       	out	0x3d, r30	; 61
    168a:	8d b7       	in	r24, 0x3d	; 61
    168c:	9e b7       	in	r25, 0x3e	; 62
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	7c 01       	movw	r14, r24

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_SET_MSG);
    1692:	85 e0       	ldi	r24, 0x05	; 5
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	81 83       	std	Z+1, r24	; 0x01
    169c:	92 83       	std	Z+2, r25	; 0x02
    169e:	a3 83       	std	Z+3, r26	; 0x03
    16a0:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = cpu_to_le32(sizeof(RNDIS_Set_Message_t) + Length);
    16a2:	c4 01       	movw	r24, r8
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	f7 01       	movw	r30, r14
    16aa:	84 83       	std	Z+4, r24	; 0x04
    16ac:	95 83       	std	Z+5, r25	; 0x05
    16ae:	a6 83       	std	Z+6, r26	; 0x06
    16b0:	b7 83       	std	Z+7, r27	; 0x07
	SetMessageData.SetMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    16b2:	f6 01       	movw	r30, r12
    16b4:	86 89       	ldd	r24, Z+22	; 0x16
    16b6:	97 89       	ldd	r25, Z+23	; 0x17
    16b8:	a0 8d       	ldd	r26, Z+24	; 0x18
    16ba:	b1 8d       	ldd	r27, Z+25	; 0x19
    16bc:	2c 01       	movw	r4, r24
    16be:	3d 01       	movw	r6, r26
    16c0:	ff ef       	ldi	r31, 0xFF	; 255
    16c2:	4f 1a       	sub	r4, r31
    16c4:	5f 0a       	sbc	r5, r31
    16c6:	6f 0a       	sbc	r6, r31
    16c8:	7f 0a       	sbc	r7, r31
    16ca:	f6 01       	movw	r30, r12
    16cc:	46 8a       	std	Z+22, r4	; 0x16
    16ce:	57 8a       	std	Z+23, r5	; 0x17
    16d0:	60 8e       	std	Z+24, r6	; 0x18
    16d2:	71 8e       	std	Z+25, r7	; 0x19
    16d4:	f7 01       	movw	r30, r14
    16d6:	80 87       	std	Z+8, r24	; 0x08
    16d8:	91 87       	std	Z+9, r25	; 0x09
    16da:	a2 87       	std	Z+10, r26	; 0x0a
    16dc:	b3 87       	std	Z+11, r27	; 0x0b

	SetMessageData.SetMessage.Oid            = cpu_to_le32(Oid);
    16de:	44 87       	std	Z+12, r20	; 0x0c
    16e0:	55 87       	std	Z+13, r21	; 0x0d
    16e2:	66 87       	std	Z+14, r22	; 0x0e
    16e4:	77 87       	std	Z+15, r23	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = cpu_to_le32(Length);
    16e6:	c8 01       	movw	r24, r16
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	80 8b       	std	Z+16, r24	; 0x10
    16ee:	91 8b       	std	Z+17, r25	; 0x11
    16f0:	a2 8b       	std	Z+18, r26	; 0x12
    16f2:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    16f4:	84 e1       	ldi	r24, 0x14	; 20
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	84 8b       	std	Z+20, r24	; 0x14
    16fe:	95 8b       	std	Z+21, r25	; 0x15
    1700:	a6 8b       	std	Z+22, r26	; 0x16
    1702:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1704:	10 8e       	std	Z+24, r1	; 0x18
    1706:	11 8e       	std	Z+25, r1	; 0x19
    1708:	12 8e       	std	Z+26, r1	; 0x1a
    170a:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    170c:	8d b7       	in	r24, 0x3d	; 61
    170e:	9e b7       	in	r25, 0x3e	; 62
    1710:	4d 96       	adiw	r24, 0x1d	; 29
    1712:	a8 01       	movw	r20, r16
    1714:	b9 01       	movw	r22, r18
    1716:	8d d1       	rcall	.+794    	; 0x1a32 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    1718:	a4 01       	movw	r20, r8
    171a:	b7 01       	movw	r22, r14
    171c:	c6 01       	movw	r24, r12
    171e:	00 de       	rcall	.-1024   	; 0x1320 <RNDIS_SendEncapsulatedCommand>
    1720:	81 11       	cpse	r24, r1
    1722:	14 c0       	rjmp	.+40     	; 0x174c <RNDIS_Host_SetRNDISProperty+0x112>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    1724:	40 e1       	ldi	r20, 0x10	; 16
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	be 01       	movw	r22, r28
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	c6 01       	movw	r24, r12
    1730:	09 de       	rcall	.-1006   	; 0x1344 <RNDIS_GetEncapsulatedResponse>
    1732:	81 11       	cpse	r24, r1
    1734:	0b c0       	rjmp	.+22     	; 0x174c <RNDIS_Host_SetRNDISProperty+0x112>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	9e 85       	ldd	r25, Y+14	; 0x0e
    173a:	af 85       	ldd	r26, Y+15	; 0x0f
    173c:	b8 89       	ldd	r27, Y+16	; 0x10
    173e:	89 2b       	or	r24, r25
    1740:	8a 2b       	or	r24, r26
    1742:	8b 2b       	or	r24, r27
    1744:	11 f4       	brne	.+4      	; 0x174a <RNDIS_Host_SetRNDISProperty+0x110>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	01 c0       	rjmp	.+2      	; 0x174c <RNDIS_Host_SetRNDISProperty+0x112>
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    174a:	80 e8       	ldi	r24, 0x80	; 128

	return HOST_SENDCONTROL_Successful;
}
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	be be       	out	0x3e, r11	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	ad be       	out	0x3d, r10	; 61
    1756:	60 96       	adiw	r28, 0x10	; 16
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	7f 90       	pop	r7
    177c:	6f 90       	pop	r6
    177e:	5f 90       	pop	r5
    1780:	4f 90       	pop	r4
    1782:	08 95       	ret

00001784 <RNDIS_Host_QueryRNDISProperty>:

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    1784:	2f 92       	push	r2
    1786:	3f 92       	push	r3
    1788:	4f 92       	push	r4
    178a:	5f 92       	push	r5
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	6c 97       	sbiw	r28, 0x1c	; 28
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	6c 01       	movw	r12, r24
    17ba:	49 01       	movw	r8, r18
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    17bc:	6d b6       	in	r6, 0x3d	; 61
    17be:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    17c0:	58 01       	movw	r10, r16
    17c2:	28 e1       	ldi	r18, 0x18	; 24
    17c4:	a2 0e       	add	r10, r18
    17c6:	b1 1c       	adc	r11, r1
    17c8:	8d b7       	in	r24, 0x3d	; 61
    17ca:	9e b7       	in	r25, 0x3e	; 62
    17cc:	8a 19       	sub	r24, r10
    17ce:	9b 09       	sbc	r25, r11
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	9e bf       	out	0x3e, r25	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	8d bf       	out	0x3d, r24	; 61
    17da:	ed b7       	in	r30, 0x3d	; 61
    17dc:	fe b7       	in	r31, 0x3e	; 62
    17de:	31 96       	adiw	r30, 0x01	; 1
    17e0:	7f 01       	movw	r14, r30

	QueryMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_QUERY_MSG);
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	ab 83       	std	Y+3, r26	; 0x03
    17f0:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = CPU_TO_LE32(sizeof(RNDIS_Query_Message_t));
    17f2:	8c e1       	ldi	r24, 0x1C	; 28
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	af 83       	std	Y+7, r26	; 0x07
    1800:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1802:	f6 01       	movw	r30, r12
    1804:	86 89       	ldd	r24, Z+22	; 0x16
    1806:	97 89       	ldd	r25, Z+23	; 0x17
    1808:	a0 8d       	ldd	r26, Z+24	; 0x18
    180a:	b1 8d       	ldd	r27, Z+25	; 0x19
    180c:	1c 01       	movw	r2, r24
    180e:	2d 01       	movw	r4, r26
    1810:	ff ef       	ldi	r31, 0xFF	; 255
    1812:	2f 1a       	sub	r2, r31
    1814:	3f 0a       	sbc	r3, r31
    1816:	4f 0a       	sbc	r4, r31
    1818:	5f 0a       	sbc	r5, r31
    181a:	f6 01       	movw	r30, r12
    181c:	26 8a       	std	Z+22, r2	; 0x16
    181e:	37 8a       	std	Z+23, r3	; 0x17
    1820:	40 8e       	std	Z+24, r4	; 0x18
    1822:	51 8e       	std	Z+25, r5	; 0x19
    1824:	89 87       	std	Y+9, r24	; 0x09
    1826:	9a 87       	std	Y+10, r25	; 0x0a
    1828:	ab 87       	std	Y+11, r26	; 0x0b
    182a:	bc 87       	std	Y+12, r27	; 0x0c

	QueryMessage.Oid            = cpu_to_le32(Oid);
    182c:	4d 87       	std	Y+13, r20	; 0x0d
    182e:	5e 87       	std	Y+14, r21	; 0x0e
    1830:	6f 87       	std	Y+15, r22	; 0x0f
    1832:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = CPU_TO_LE32(0);
    1834:	19 8a       	std	Y+17, r1	; 0x11
    1836:	1a 8a       	std	Y+18, r1	; 0x12
    1838:	1b 8a       	std	Y+19, r1	; 0x13
    183a:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = CPU_TO_LE32(0);
    183c:	1d 8a       	std	Y+21, r1	; 0x15
    183e:	1e 8a       	std	Y+22, r1	; 0x16
    1840:	1f 8a       	std	Y+23, r1	; 0x17
    1842:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1844:	19 8e       	std	Y+25, r1	; 0x19
    1846:	1a 8e       	std	Y+26, r1	; 0x1a
    1848:	1b 8e       	std	Y+27, r1	; 0x1b
    184a:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    184c:	4c e1       	ldi	r20, 0x1C	; 28
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	be 01       	movw	r22, r28
    1852:	6f 5f       	subi	r22, 0xFF	; 255
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	c6 01       	movw	r24, r12
    1858:	63 dd       	rcall	.-1338   	; 0x1320 <RNDIS_SendEncapsulatedCommand>
    185a:	81 11       	cpse	r24, r1
    185c:	18 c0       	rjmp	.+48     	; 0x188e <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    185e:	a5 01       	movw	r20, r10
    1860:	b7 01       	movw	r22, r14
    1862:	c6 01       	movw	r24, r12
    1864:	6f dd       	rcall	.-1314   	; 0x1344 <RNDIS_GetEncapsulatedResponse>
    1866:	81 11       	cpse	r24, r1
    1868:	12 c0       	rjmp	.+36     	; 0x188e <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    186a:	f7 01       	movw	r30, r14
    186c:	84 85       	ldd	r24, Z+12	; 0x0c
    186e:	95 85       	ldd	r25, Z+13	; 0x0d
    1870:	a6 85       	ldd	r26, Z+14	; 0x0e
    1872:	b7 85       	ldd	r27, Z+15	; 0x0f
    1874:	89 2b       	or	r24, r25
    1876:	8a 2b       	or	r24, r26
    1878:	8b 2b       	or	r24, r27
    187a:	41 f4       	brne	.+16     	; 0x188c <RNDIS_Host_QueryRNDISProperty+0x108>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    187c:	b7 01       	movw	r22, r14
    187e:	68 5e       	subi	r22, 0xE8	; 232
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	a8 01       	movw	r20, r16
    1884:	c4 01       	movw	r24, r8
    1886:	d5 d0       	rcall	.+426    	; 0x1a32 <memcpy>

	return HOST_SENDCONTROL_Successful;
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	01 c0       	rjmp	.+2      	; 0x188e <RNDIS_Host_QueryRNDISProperty+0x10a>
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    188c:	80 e8       	ldi	r24, 0x80	; 128

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	7e be       	out	0x3e, r7	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	6d be       	out	0x3d, r6	; 61
    1898:	6c 96       	adiw	r28, 0x1c	; 28
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	9f 90       	pop	r9
    18ba:	8f 90       	pop	r8
    18bc:	7f 90       	pop	r7
    18be:	6f 90       	pop	r6
    18c0:	5f 90       	pop	r5
    18c2:	4f 90       	pop	r4
    18c4:	3f 90       	pop	r3
    18c6:	2f 90       	pop	r2
    18c8:	08 95       	ret

000018ca <RNDIS_Host_IsPacketReceived>:

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    18ca:	fc 01       	movw	r30, r24
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    18cc:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <USB_HostState>
    18d0:	8b 30       	cpi	r24, 0x0B	; 11
    18d2:	a1 f4       	brne	.+40     	; 0x18fc <RNDIS_Host_IsPacketReceived+0x32>
    18d4:	82 85       	ldd	r24, Z+10	; 0x0a
    18d6:	88 23       	and	r24, r24
    18d8:	91 f0       	breq	.+36     	; 0x18fe <RNDIS_Host_IsPacketReceived+0x34>
	  return false;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    18da:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    18dc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18e0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    18e4:	8f 7b       	andi	r24, 0xBF	; 191
    18e6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    18ea:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    18ee:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18f0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    18f4:	90 64       	ori	r25, 0x40	; 64
    18f6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    18fa:	08 95       	ret
bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return false;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
}
    18fe:	08 95       	ret

00001900 <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	ac 97       	sbiw	r28, 0x2c	; 44
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    191c:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <USB_HostState>
    1920:	2b 30       	cpi	r18, 0x0B	; 11
    1922:	09 f0       	breq	.+2      	; 0x1926 <RNDIS_Host_ReadPacket+0x26>
    1924:	54 c0       	rjmp	.+168    	; 0x19ce <RNDIS_Host_ReadPacket+0xce>
    1926:	fc 01       	movw	r30, r24
    1928:	22 85       	ldd	r18, Z+10	; 0x0a
    192a:	22 23       	and	r18, r18
    192c:	09 f4       	brne	.+2      	; 0x1930 <RNDIS_Host_ReadPacket+0x30>
    192e:	4f c0       	rjmp	.+158    	; 0x19ce <RNDIS_Host_ReadPacket+0xce>
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    1930:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1932:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1936:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    193a:	9f 7b       	andi	r25, 0xBF	; 191
    193c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1940:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    1944:	89 2f       	mov	r24, r25
    1946:	80 72       	andi	r24, 0x20	; 32
    1948:	95 fd       	sbrc	r25, 5
    194a:	12 c0       	rjmp	.+36     	; 0x1970 <RNDIS_Host_ReadPacket+0x70>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    194c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (Pipe_IsINReceived())
    1950:	90 ff       	sbrs	r25, 0
    1952:	05 c0       	rjmp	.+10     	; 0x195e <RNDIS_Host_ReadPacket+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1954:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1958:	9e 77       	andi	r25, 0x7E	; 126
    195a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  Pipe_ClearIN();

		*PacketLength = 0;
    195e:	fa 01       	movw	r30, r20
    1960:	11 82       	std	Z+1, r1	; 0x01
    1962:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1964:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1968:	90 64       	ori	r25, 0x40	; 64
    196a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_Freeze();
		return PIPE_RWSTREAM_NoError;
    196e:	30 c0       	rjmp	.+96     	; 0x19d0 <RNDIS_Host_ReadPacket+0xd0>
    1970:	8a 01       	movw	r16, r20
    1972:	7b 01       	movw	r14, r22
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	6c e2       	ldi	r22, 0x2C	; 44
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	4f da       	rcall	.-2914   	; 0xe20 <Pipe_Read_Stream_LE>
    1982:	81 11       	cpse	r24, r1
    1984:	25 c0       	rjmp	.+74     	; 0x19d0 <RNDIS_Host_ReadPacket+0xd0>
	                                     NULL)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)le32_to_cpu(DeviceMessage.DataLength);
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	f8 01       	movw	r30, r16
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset -
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	84 97       	sbiw	r24, 0x24	; 36
    199a:	fd d9       	rcall	.-3078   	; 0xd96 <Pipe_Discard_Stream>
	                    (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
	                    NULL);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NULL);
    199c:	f8 01       	movw	r30, r16
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	c7 01       	movw	r24, r14
    19a8:	3b da       	rcall	.-2954   	; 0xe20 <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19aa:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    19ae:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	if (!(Pipe_BytesInPipe()))
    19b2:	89 2b       	or	r24, r25
    19b4:	29 f4       	brne	.+10     	; 0x19c0 <RNDIS_Host_ReadPacket+0xc0>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19b6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    19ba:	8e 77       	andi	r24, 0x7E	; 126
    19bc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19c0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    19c4:	80 64       	ori	r24, 0x40	; 64
    19c6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <RNDIS_Host_ReadPacket+0xd0>
                              uint16_t* const PacketLength)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    19ce:	82 e0       	ldi	r24, 0x02	; 2
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    19d0:	ac 96       	adiw	r28, 0x2c	; 44
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	08 95       	ret

000019ea <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    19ea:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    19ee:	95 ff       	sbrs	r25, 5
    19f0:	fc cf       	rjmp	.-8      	; 0x19ea <Serial_putchar>
				UDR1 = DataByte;
    19f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	08 95       	ret

000019fc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    19fc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a00:	87 ff       	sbrs	r24, 7
    1a02:	08 c0       	rjmp	.+16     	; 0x1a14 <Serial_getchar+0x18>
    1a04:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1a08:	87 ff       	sbrs	r24, 7
    1a0a:	07 c0       	rjmp	.+14     	; 0x1a1a <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1a0c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	08 95       	ret
	  return _FDEV_EOF;
    1a14:	8e ef       	ldi	r24, 0xFE	; 254
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1a1e:	08 95       	ret

00001a20 <__tablejump2__>:
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	00 24       	eor	r0, r0
    1a26:	00 1c       	adc	r0, r0
    1a28:	0b be       	out	0x3b, r0	; 59
    1a2a:	07 90       	elpm	r0, Z+
    1a2c:	f6 91       	elpm	r31, Z
    1a2e:	e0 2d       	mov	r30, r0
    1a30:	09 94       	ijmp

00001a32 <memcpy>:
    1a32:	fb 01       	movw	r30, r22
    1a34:	dc 01       	movw	r26, r24
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <memcpy+0xa>
    1a38:	01 90       	ld	r0, Z+
    1a3a:	0d 92       	st	X+, r0
    1a3c:	41 50       	subi	r20, 0x01	; 1
    1a3e:	50 40       	sbci	r21, 0x00	; 0
    1a40:	d8 f7       	brcc	.-10     	; 0x1a38 <memcpy+0x6>
    1a42:	08 95       	ret

00001a44 <printf>:
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	ae 01       	movw	r20, r28
    1a4e:	4b 5f       	subi	r20, 0xFB	; 251
    1a50:	5f 4f       	sbci	r21, 0xFF	; 255
    1a52:	fa 01       	movw	r30, r20
    1a54:	61 91       	ld	r22, Z+
    1a56:	71 91       	ld	r23, Z+
    1a58:	af 01       	movw	r20, r30
    1a5a:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <__iob+0x2>
    1a5e:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <__iob+0x3>
    1a62:	5b d0       	rcall	.+182    	; 0x1b1a <vfprintf>
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <printf_P>:
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	ae 01       	movw	r20, r28
    1a78:	49 5f       	subi	r20, 0xF9	; 249
    1a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7c:	da 01       	movw	r26, r20
    1a7e:	6d 91       	ld	r22, X+
    1a80:	7d 91       	ld	r23, X+
    1a82:	ad 01       	movw	r20, r26
    1a84:	00 e5       	ldi	r16, 0x50	; 80
    1a86:	15 e0       	ldi	r17, 0x05	; 5
    1a88:	f8 01       	movw	r30, r16
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	dc 01       	movw	r26, r24
    1a90:	13 96       	adiw	r26, 0x03	; 3
    1a92:	2c 91       	ld	r18, X
    1a94:	13 97       	sbiw	r26, 0x03	; 3
    1a96:	28 60       	ori	r18, 0x08	; 8
    1a98:	13 96       	adiw	r26, 0x03	; 3
    1a9a:	2c 93       	st	X, r18
    1a9c:	3e d0       	rcall	.+124    	; 0x1b1a <vfprintf>
    1a9e:	d8 01       	movw	r26, r16
    1aa0:	12 96       	adiw	r26, 0x02	; 2
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	13 97       	sbiw	r26, 0x03	; 3
    1aa8:	23 81       	ldd	r18, Z+3	; 0x03
    1aaa:	27 7f       	andi	r18, 0xF7	; 247
    1aac:	23 83       	std	Z+3, r18	; 0x03
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <puts_P>:
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	e0 91 52 05 	lds	r30, 0x0552	; 0x800552 <__iob+0x2>
    1ac6:	f0 91 53 05 	lds	r31, 0x0553	; 0x800553 <__iob+0x3>
    1aca:	83 81       	ldd	r24, Z+3	; 0x03
    1acc:	81 ff       	sbrs	r24, 1
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <puts_P+0x4e>
    1ad0:	d0 e0       	ldi	r29, 0x00	; 0
    1ad2:	c0 e0       	ldi	r28, 0x00	; 0
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	84 91       	lpm	r24, Z
    1ad8:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <__iob+0x2>
    1adc:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <__iob+0x3>
    1ae0:	db 01       	movw	r26, r22
    1ae2:	18 96       	adiw	r26, 0x08	; 8
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	19 97       	sbiw	r26, 0x09	; 9
    1aea:	88 23       	and	r24, r24
    1aec:	41 f0       	breq	.+16     	; 0x1afe <puts_P+0x46>
    1aee:	09 95       	icall
    1af0:	89 2b       	or	r24, r25
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <puts_P+0x40>
    1af4:	df ef       	ldi	r29, 0xFF	; 255
    1af6:	cf ef       	ldi	r28, 0xFF	; 255
    1af8:	0f 5f       	subi	r16, 0xFF	; 255
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	eb cf       	rjmp	.-42     	; 0x1ad4 <puts_P+0x1c>
    1afe:	8a e0       	ldi	r24, 0x0A	; 10
    1b00:	09 95       	icall
    1b02:	89 2b       	or	r24, r25
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <puts_P+0x54>
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <puts_P+0x58>
    1b0c:	8d 2f       	mov	r24, r29
    1b0e:	9c 2f       	mov	r25, r28
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <vfprintf>:
    1b1a:	2f 92       	push	r2
    1b1c:	3f 92       	push	r3
    1b1e:	4f 92       	push	r4
    1b20:	5f 92       	push	r5
    1b22:	6f 92       	push	r6
    1b24:	7f 92       	push	r7
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	2b 97       	sbiw	r28, 0x0b	; 11
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	6c 01       	movw	r12, r24
    1b50:	7b 01       	movw	r14, r22
    1b52:	8a 01       	movw	r16, r20
    1b54:	fc 01       	movw	r30, r24
    1b56:	17 82       	std	Z+7, r1	; 0x07
    1b58:	16 82       	std	Z+6, r1	; 0x06
    1b5a:	83 81       	ldd	r24, Z+3	; 0x03
    1b5c:	81 ff       	sbrs	r24, 1
    1b5e:	bf c1       	rjmp	.+894    	; 0x1ede <vfprintf+0x3c4>
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	3c 01       	movw	r6, r24
    1b66:	f6 01       	movw	r30, r12
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	93 fd       	sbrc	r25, 3
    1b6e:	85 91       	lpm	r24, Z+
    1b70:	93 ff       	sbrs	r25, 3
    1b72:	81 91       	ld	r24, Z+
    1b74:	7f 01       	movw	r14, r30
    1b76:	88 23       	and	r24, r24
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <vfprintf+0x62>
    1b7a:	ad c1       	rjmp	.+858    	; 0x1ed6 <vfprintf+0x3bc>
    1b7c:	85 32       	cpi	r24, 0x25	; 37
    1b7e:	39 f4       	brne	.+14     	; 0x1b8e <vfprintf+0x74>
    1b80:	93 fd       	sbrc	r25, 3
    1b82:	85 91       	lpm	r24, Z+
    1b84:	93 ff       	sbrs	r25, 3
    1b86:	81 91       	ld	r24, Z+
    1b88:	7f 01       	movw	r14, r30
    1b8a:	85 32       	cpi	r24, 0x25	; 37
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <vfprintf+0x7c>
    1b8e:	b6 01       	movw	r22, r12
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	d6 d1       	rcall	.+940    	; 0x1f40 <fputc>
    1b94:	e8 cf       	rjmp	.-48     	; 0x1b66 <vfprintf+0x4c>
    1b96:	91 2c       	mov	r9, r1
    1b98:	21 2c       	mov	r2, r1
    1b9a:	31 2c       	mov	r3, r1
    1b9c:	ff e1       	ldi	r31, 0x1F	; 31
    1b9e:	f3 15       	cp	r31, r3
    1ba0:	d8 f0       	brcs	.+54     	; 0x1bd8 <vfprintf+0xbe>
    1ba2:	8b 32       	cpi	r24, 0x2B	; 43
    1ba4:	79 f0       	breq	.+30     	; 0x1bc4 <vfprintf+0xaa>
    1ba6:	38 f4       	brcc	.+14     	; 0x1bb6 <vfprintf+0x9c>
    1ba8:	80 32       	cpi	r24, 0x20	; 32
    1baa:	79 f0       	breq	.+30     	; 0x1bca <vfprintf+0xb0>
    1bac:	83 32       	cpi	r24, 0x23	; 35
    1bae:	a1 f4       	brne	.+40     	; 0x1bd8 <vfprintf+0xbe>
    1bb0:	23 2d       	mov	r18, r3
    1bb2:	20 61       	ori	r18, 0x10	; 16
    1bb4:	1d c0       	rjmp	.+58     	; 0x1bf0 <vfprintf+0xd6>
    1bb6:	8d 32       	cpi	r24, 0x2D	; 45
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <vfprintf+0xb8>
    1bba:	80 33       	cpi	r24, 0x30	; 48
    1bbc:	69 f4       	brne	.+26     	; 0x1bd8 <vfprintf+0xbe>
    1bbe:	23 2d       	mov	r18, r3
    1bc0:	21 60       	ori	r18, 0x01	; 1
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <vfprintf+0xd6>
    1bc4:	83 2d       	mov	r24, r3
    1bc6:	82 60       	ori	r24, 0x02	; 2
    1bc8:	38 2e       	mov	r3, r24
    1bca:	e3 2d       	mov	r30, r3
    1bcc:	e4 60       	ori	r30, 0x04	; 4
    1bce:	3e 2e       	mov	r3, r30
    1bd0:	2a c0       	rjmp	.+84     	; 0x1c26 <vfprintf+0x10c>
    1bd2:	f3 2d       	mov	r31, r3
    1bd4:	f8 60       	ori	r31, 0x08	; 8
    1bd6:	1d c0       	rjmp	.+58     	; 0x1c12 <vfprintf+0xf8>
    1bd8:	37 fc       	sbrc	r3, 7
    1bda:	2d c0       	rjmp	.+90     	; 0x1c36 <vfprintf+0x11c>
    1bdc:	20 ed       	ldi	r18, 0xD0	; 208
    1bde:	28 0f       	add	r18, r24
    1be0:	2a 30       	cpi	r18, 0x0A	; 10
    1be2:	40 f0       	brcs	.+16     	; 0x1bf4 <vfprintf+0xda>
    1be4:	8e 32       	cpi	r24, 0x2E	; 46
    1be6:	b9 f4       	brne	.+46     	; 0x1c16 <vfprintf+0xfc>
    1be8:	36 fc       	sbrc	r3, 6
    1bea:	75 c1       	rjmp	.+746    	; 0x1ed6 <vfprintf+0x3bc>
    1bec:	23 2d       	mov	r18, r3
    1bee:	20 64       	ori	r18, 0x40	; 64
    1bf0:	32 2e       	mov	r3, r18
    1bf2:	19 c0       	rjmp	.+50     	; 0x1c26 <vfprintf+0x10c>
    1bf4:	36 fe       	sbrs	r3, 6
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <vfprintf+0xea>
    1bf8:	8a e0       	ldi	r24, 0x0A	; 10
    1bfa:	98 9e       	mul	r9, r24
    1bfc:	20 0d       	add	r18, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	92 2e       	mov	r9, r18
    1c02:	11 c0       	rjmp	.+34     	; 0x1c26 <vfprintf+0x10c>
    1c04:	ea e0       	ldi	r30, 0x0A	; 10
    1c06:	2e 9e       	mul	r2, r30
    1c08:	20 0d       	add	r18, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	22 2e       	mov	r2, r18
    1c0e:	f3 2d       	mov	r31, r3
    1c10:	f0 62       	ori	r31, 0x20	; 32
    1c12:	3f 2e       	mov	r3, r31
    1c14:	08 c0       	rjmp	.+16     	; 0x1c26 <vfprintf+0x10c>
    1c16:	8c 36       	cpi	r24, 0x6C	; 108
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <vfprintf+0x108>
    1c1a:	83 2d       	mov	r24, r3
    1c1c:	80 68       	ori	r24, 0x80	; 128
    1c1e:	38 2e       	mov	r3, r24
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x10c>
    1c22:	88 36       	cpi	r24, 0x68	; 104
    1c24:	41 f4       	brne	.+16     	; 0x1c36 <vfprintf+0x11c>
    1c26:	f7 01       	movw	r30, r14
    1c28:	93 fd       	sbrc	r25, 3
    1c2a:	85 91       	lpm	r24, Z+
    1c2c:	93 ff       	sbrs	r25, 3
    1c2e:	81 91       	ld	r24, Z+
    1c30:	7f 01       	movw	r14, r30
    1c32:	81 11       	cpse	r24, r1
    1c34:	b3 cf       	rjmp	.-154    	; 0x1b9c <vfprintf+0x82>
    1c36:	98 2f       	mov	r25, r24
    1c38:	9f 7d       	andi	r25, 0xDF	; 223
    1c3a:	95 54       	subi	r25, 0x45	; 69
    1c3c:	93 30       	cpi	r25, 0x03	; 3
    1c3e:	28 f4       	brcc	.+10     	; 0x1c4a <vfprintf+0x130>
    1c40:	0c 5f       	subi	r16, 0xFC	; 252
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	9f e3       	ldi	r25, 0x3F	; 63
    1c46:	99 83       	std	Y+1, r25	; 0x01
    1c48:	0d c0       	rjmp	.+26     	; 0x1c64 <vfprintf+0x14a>
    1c4a:	83 36       	cpi	r24, 0x63	; 99
    1c4c:	31 f0       	breq	.+12     	; 0x1c5a <vfprintf+0x140>
    1c4e:	83 37       	cpi	r24, 0x73	; 115
    1c50:	71 f0       	breq	.+28     	; 0x1c6e <vfprintf+0x154>
    1c52:	83 35       	cpi	r24, 0x53	; 83
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <vfprintf+0x13e>
    1c56:	55 c0       	rjmp	.+170    	; 0x1d02 <vfprintf+0x1e8>
    1c58:	20 c0       	rjmp	.+64     	; 0x1c9a <vfprintf+0x180>
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	80 81       	ld	r24, Z
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	0e 5f       	subi	r16, 0xFE	; 254
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	88 24       	eor	r8, r8
    1c66:	83 94       	inc	r8
    1c68:	91 2c       	mov	r9, r1
    1c6a:	53 01       	movw	r10, r6
    1c6c:	12 c0       	rjmp	.+36     	; 0x1c92 <vfprintf+0x178>
    1c6e:	28 01       	movw	r4, r16
    1c70:	f2 e0       	ldi	r31, 0x02	; 2
    1c72:	4f 0e       	add	r4, r31
    1c74:	51 1c       	adc	r5, r1
    1c76:	f8 01       	movw	r30, r16
    1c78:	a0 80       	ld	r10, Z
    1c7a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c7c:	36 fe       	sbrs	r3, 6
    1c7e:	03 c0       	rjmp	.+6      	; 0x1c86 <vfprintf+0x16c>
    1c80:	69 2d       	mov	r22, r9
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <vfprintf+0x170>
    1c86:	6f ef       	ldi	r22, 0xFF	; 255
    1c88:	7f ef       	ldi	r23, 0xFF	; 255
    1c8a:	c5 01       	movw	r24, r10
    1c8c:	4e d1       	rcall	.+668    	; 0x1f2a <strnlen>
    1c8e:	4c 01       	movw	r8, r24
    1c90:	82 01       	movw	r16, r4
    1c92:	f3 2d       	mov	r31, r3
    1c94:	ff 77       	andi	r31, 0x7F	; 127
    1c96:	3f 2e       	mov	r3, r31
    1c98:	15 c0       	rjmp	.+42     	; 0x1cc4 <vfprintf+0x1aa>
    1c9a:	28 01       	movw	r4, r16
    1c9c:	22 e0       	ldi	r18, 0x02	; 2
    1c9e:	42 0e       	add	r4, r18
    1ca0:	51 1c       	adc	r5, r1
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	a0 80       	ld	r10, Z
    1ca6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca8:	36 fe       	sbrs	r3, 6
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <vfprintf+0x198>
    1cac:	69 2d       	mov	r22, r9
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <vfprintf+0x19c>
    1cb2:	6f ef       	ldi	r22, 0xFF	; 255
    1cb4:	7f ef       	ldi	r23, 0xFF	; 255
    1cb6:	c5 01       	movw	r24, r10
    1cb8:	2d d1       	rcall	.+602    	; 0x1f14 <strnlen_P>
    1cba:	4c 01       	movw	r8, r24
    1cbc:	f3 2d       	mov	r31, r3
    1cbe:	f0 68       	ori	r31, 0x80	; 128
    1cc0:	3f 2e       	mov	r3, r31
    1cc2:	82 01       	movw	r16, r4
    1cc4:	33 fc       	sbrc	r3, 3
    1cc6:	19 c0       	rjmp	.+50     	; 0x1cfa <vfprintf+0x1e0>
    1cc8:	82 2d       	mov	r24, r2
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	88 16       	cp	r8, r24
    1cce:	99 06       	cpc	r9, r25
    1cd0:	a0 f4       	brcc	.+40     	; 0x1cfa <vfprintf+0x1e0>
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	33 d1       	rcall	.+614    	; 0x1f40 <fputc>
    1cda:	2a 94       	dec	r2
    1cdc:	f5 cf       	rjmp	.-22     	; 0x1cc8 <vfprintf+0x1ae>
    1cde:	f5 01       	movw	r30, r10
    1ce0:	37 fc       	sbrc	r3, 7
    1ce2:	85 91       	lpm	r24, Z+
    1ce4:	37 fe       	sbrs	r3, 7
    1ce6:	81 91       	ld	r24, Z+
    1ce8:	5f 01       	movw	r10, r30
    1cea:	b6 01       	movw	r22, r12
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	28 d1       	rcall	.+592    	; 0x1f40 <fputc>
    1cf0:	21 10       	cpse	r2, r1
    1cf2:	2a 94       	dec	r2
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	82 1a       	sub	r8, r18
    1cf8:	91 08       	sbc	r9, r1
    1cfa:	81 14       	cp	r8, r1
    1cfc:	91 04       	cpc	r9, r1
    1cfe:	79 f7       	brne	.-34     	; 0x1cde <vfprintf+0x1c4>
    1d00:	e1 c0       	rjmp	.+450    	; 0x1ec4 <vfprintf+0x3aa>
    1d02:	84 36       	cpi	r24, 0x64	; 100
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <vfprintf+0x1f0>
    1d06:	89 36       	cpi	r24, 0x69	; 105
    1d08:	39 f5       	brne	.+78     	; 0x1d58 <vfprintf+0x23e>
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	37 fe       	sbrs	r3, 7
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <vfprintf+0x204>
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0c 5f       	subi	r16, 0xFC	; 252
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	08 c0       	rjmp	.+16     	; 0x1d2e <vfprintf+0x214>
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	07 2e       	mov	r0, r23
    1d24:	00 0c       	add	r0, r0
    1d26:	88 0b       	sbc	r24, r24
    1d28:	99 0b       	sbc	r25, r25
    1d2a:	0e 5f       	subi	r16, 0xFE	; 254
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	f3 2d       	mov	r31, r3
    1d30:	ff 76       	andi	r31, 0x6F	; 111
    1d32:	3f 2e       	mov	r3, r31
    1d34:	97 ff       	sbrs	r25, 7
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <vfprintf+0x230>
    1d38:	90 95       	com	r25
    1d3a:	80 95       	com	r24
    1d3c:	70 95       	com	r23
    1d3e:	61 95       	neg	r22
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	8f 4f       	sbci	r24, 0xFF	; 255
    1d44:	9f 4f       	sbci	r25, 0xFF	; 255
    1d46:	f0 68       	ori	r31, 0x80	; 128
    1d48:	3f 2e       	mov	r3, r31
    1d4a:	2a e0       	ldi	r18, 0x0A	; 10
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	a3 01       	movw	r20, r6
    1d50:	33 d1       	rcall	.+614    	; 0x1fb8 <__ultoa_invert>
    1d52:	88 2e       	mov	r8, r24
    1d54:	86 18       	sub	r8, r6
    1d56:	44 c0       	rjmp	.+136    	; 0x1de0 <vfprintf+0x2c6>
    1d58:	85 37       	cpi	r24, 0x75	; 117
    1d5a:	31 f4       	brne	.+12     	; 0x1d68 <vfprintf+0x24e>
    1d5c:	23 2d       	mov	r18, r3
    1d5e:	2f 7e       	andi	r18, 0xEF	; 239
    1d60:	b2 2e       	mov	r11, r18
    1d62:	2a e0       	ldi	r18, 0x0A	; 10
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	25 c0       	rjmp	.+74     	; 0x1db2 <vfprintf+0x298>
    1d68:	93 2d       	mov	r25, r3
    1d6a:	99 7f       	andi	r25, 0xF9	; 249
    1d6c:	b9 2e       	mov	r11, r25
    1d6e:	8f 36       	cpi	r24, 0x6F	; 111
    1d70:	c1 f0       	breq	.+48     	; 0x1da2 <vfprintf+0x288>
    1d72:	18 f4       	brcc	.+6      	; 0x1d7a <vfprintf+0x260>
    1d74:	88 35       	cpi	r24, 0x58	; 88
    1d76:	79 f0       	breq	.+30     	; 0x1d96 <vfprintf+0x27c>
    1d78:	ae c0       	rjmp	.+348    	; 0x1ed6 <vfprintf+0x3bc>
    1d7a:	80 37       	cpi	r24, 0x70	; 112
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <vfprintf+0x26a>
    1d7e:	88 37       	cpi	r24, 0x78	; 120
    1d80:	21 f0       	breq	.+8      	; 0x1d8a <vfprintf+0x270>
    1d82:	a9 c0       	rjmp	.+338    	; 0x1ed6 <vfprintf+0x3bc>
    1d84:	e9 2f       	mov	r30, r25
    1d86:	e0 61       	ori	r30, 0x10	; 16
    1d88:	be 2e       	mov	r11, r30
    1d8a:	b4 fe       	sbrs	r11, 4
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <vfprintf+0x28e>
    1d8e:	fb 2d       	mov	r31, r11
    1d90:	f4 60       	ori	r31, 0x04	; 4
    1d92:	bf 2e       	mov	r11, r31
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <vfprintf+0x28e>
    1d96:	34 fe       	sbrs	r3, 4
    1d98:	0a c0       	rjmp	.+20     	; 0x1dae <vfprintf+0x294>
    1d9a:	29 2f       	mov	r18, r25
    1d9c:	26 60       	ori	r18, 0x06	; 6
    1d9e:	b2 2e       	mov	r11, r18
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <vfprintf+0x294>
    1da2:	28 e0       	ldi	r18, 0x08	; 8
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <vfprintf+0x298>
    1da8:	20 e1       	ldi	r18, 0x10	; 16
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <vfprintf+0x298>
    1dae:	20 e1       	ldi	r18, 0x10	; 16
    1db0:	32 e0       	ldi	r19, 0x02	; 2
    1db2:	f8 01       	movw	r30, r16
    1db4:	b7 fe       	sbrs	r11, 7
    1db6:	07 c0       	rjmp	.+14     	; 0x1dc6 <vfprintf+0x2ac>
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0c 5f       	subi	r16, 0xFC	; 252
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	06 c0       	rjmp	.+12     	; 0x1dd2 <vfprintf+0x2b8>
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 5f       	subi	r16, 0xFE	; 254
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	a3 01       	movw	r20, r6
    1dd4:	f1 d0       	rcall	.+482    	; 0x1fb8 <__ultoa_invert>
    1dd6:	88 2e       	mov	r8, r24
    1dd8:	86 18       	sub	r8, r6
    1dda:	fb 2d       	mov	r31, r11
    1ddc:	ff 77       	andi	r31, 0x7F	; 127
    1dde:	3f 2e       	mov	r3, r31
    1de0:	36 fe       	sbrs	r3, 6
    1de2:	0d c0       	rjmp	.+26     	; 0x1dfe <vfprintf+0x2e4>
    1de4:	23 2d       	mov	r18, r3
    1de6:	2e 7f       	andi	r18, 0xFE	; 254
    1de8:	a2 2e       	mov	r10, r18
    1dea:	89 14       	cp	r8, r9
    1dec:	58 f4       	brcc	.+22     	; 0x1e04 <vfprintf+0x2ea>
    1dee:	34 fe       	sbrs	r3, 4
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <vfprintf+0x2ee>
    1df2:	32 fc       	sbrc	r3, 2
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <vfprintf+0x2ee>
    1df6:	83 2d       	mov	r24, r3
    1df8:	8e 7e       	andi	r24, 0xEE	; 238
    1dfa:	a8 2e       	mov	r10, r24
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <vfprintf+0x2ee>
    1dfe:	b8 2c       	mov	r11, r8
    1e00:	a3 2c       	mov	r10, r3
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <vfprintf+0x2f0>
    1e04:	b8 2c       	mov	r11, r8
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <vfprintf+0x2f0>
    1e08:	b9 2c       	mov	r11, r9
    1e0a:	a4 fe       	sbrs	r10, 4
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <vfprintf+0x312>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e8 0d       	add	r30, r8
    1e12:	f1 1d       	adc	r31, r1
    1e14:	80 81       	ld	r24, Z
    1e16:	80 33       	cpi	r24, 0x30	; 48
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <vfprintf+0x308>
    1e1a:	9a 2d       	mov	r25, r10
    1e1c:	99 7e       	andi	r25, 0xE9	; 233
    1e1e:	a9 2e       	mov	r10, r25
    1e20:	09 c0       	rjmp	.+18     	; 0x1e34 <vfprintf+0x31a>
    1e22:	a2 fe       	sbrs	r10, 2
    1e24:	06 c0       	rjmp	.+12     	; 0x1e32 <vfprintf+0x318>
    1e26:	b3 94       	inc	r11
    1e28:	b3 94       	inc	r11
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <vfprintf+0x31a>
    1e2c:	8a 2d       	mov	r24, r10
    1e2e:	86 78       	andi	r24, 0x86	; 134
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <vfprintf+0x31a>
    1e32:	b3 94       	inc	r11
    1e34:	a3 fc       	sbrc	r10, 3
    1e36:	10 c0       	rjmp	.+32     	; 0x1e58 <vfprintf+0x33e>
    1e38:	a0 fe       	sbrs	r10, 0
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <vfprintf+0x32e>
    1e3c:	b2 14       	cp	r11, r2
    1e3e:	80 f4       	brcc	.+32     	; 0x1e60 <vfprintf+0x346>
    1e40:	28 0c       	add	r2, r8
    1e42:	92 2c       	mov	r9, r2
    1e44:	9b 18       	sub	r9, r11
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <vfprintf+0x348>
    1e48:	b2 14       	cp	r11, r2
    1e4a:	58 f4       	brcc	.+22     	; 0x1e62 <vfprintf+0x348>
    1e4c:	b6 01       	movw	r22, r12
    1e4e:	80 e2       	ldi	r24, 0x20	; 32
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	76 d0       	rcall	.+236    	; 0x1f40 <fputc>
    1e54:	b3 94       	inc	r11
    1e56:	f8 cf       	rjmp	.-16     	; 0x1e48 <vfprintf+0x32e>
    1e58:	b2 14       	cp	r11, r2
    1e5a:	18 f4       	brcc	.+6      	; 0x1e62 <vfprintf+0x348>
    1e5c:	2b 18       	sub	r2, r11
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <vfprintf+0x34a>
    1e60:	98 2c       	mov	r9, r8
    1e62:	21 2c       	mov	r2, r1
    1e64:	a4 fe       	sbrs	r10, 4
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <vfprintf+0x36c>
    1e68:	b6 01       	movw	r22, r12
    1e6a:	80 e3       	ldi	r24, 0x30	; 48
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	68 d0       	rcall	.+208    	; 0x1f40 <fputc>
    1e70:	a2 fe       	sbrs	r10, 2
    1e72:	16 c0       	rjmp	.+44     	; 0x1ea0 <vfprintf+0x386>
    1e74:	a1 fc       	sbrc	r10, 1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <vfprintf+0x364>
    1e78:	88 e7       	ldi	r24, 0x78	; 120
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <vfprintf+0x368>
    1e7e:	88 e5       	ldi	r24, 0x58	; 88
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	b6 01       	movw	r22, r12
    1e84:	0c c0       	rjmp	.+24     	; 0x1e9e <vfprintf+0x384>
    1e86:	8a 2d       	mov	r24, r10
    1e88:	86 78       	andi	r24, 0x86	; 134
    1e8a:	51 f0       	breq	.+20     	; 0x1ea0 <vfprintf+0x386>
    1e8c:	a1 fe       	sbrs	r10, 1
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0x37a>
    1e90:	8b e2       	ldi	r24, 0x2B	; 43
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <vfprintf+0x37c>
    1e94:	80 e2       	ldi	r24, 0x20	; 32
    1e96:	a7 fc       	sbrc	r10, 7
    1e98:	8d e2       	ldi	r24, 0x2D	; 45
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	50 d0       	rcall	.+160    	; 0x1f40 <fputc>
    1ea0:	89 14       	cp	r8, r9
    1ea2:	30 f4       	brcc	.+12     	; 0x1eb0 <vfprintf+0x396>
    1ea4:	b6 01       	movw	r22, r12
    1ea6:	80 e3       	ldi	r24, 0x30	; 48
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	4a d0       	rcall	.+148    	; 0x1f40 <fputc>
    1eac:	9a 94       	dec	r9
    1eae:	f8 cf       	rjmp	.-16     	; 0x1ea0 <vfprintf+0x386>
    1eb0:	8a 94       	dec	r8
    1eb2:	f3 01       	movw	r30, r6
    1eb4:	e8 0d       	add	r30, r8
    1eb6:	f1 1d       	adc	r31, r1
    1eb8:	80 81       	ld	r24, Z
    1eba:	b6 01       	movw	r22, r12
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	40 d0       	rcall	.+128    	; 0x1f40 <fputc>
    1ec0:	81 10       	cpse	r8, r1
    1ec2:	f6 cf       	rjmp	.-20     	; 0x1eb0 <vfprintf+0x396>
    1ec4:	22 20       	and	r2, r2
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <vfprintf+0x3b0>
    1ec8:	4e ce       	rjmp	.-868    	; 0x1b66 <vfprintf+0x4c>
    1eca:	b6 01       	movw	r22, r12
    1ecc:	80 e2       	ldi	r24, 0x20	; 32
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	37 d0       	rcall	.+110    	; 0x1f40 <fputc>
    1ed2:	2a 94       	dec	r2
    1ed4:	f7 cf       	rjmp	.-18     	; 0x1ec4 <vfprintf+0x3aa>
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	86 81       	ldd	r24, Z+6	; 0x06
    1eda:	97 81       	ldd	r25, Z+7	; 0x07
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <vfprintf+0x3c8>
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	2b 96       	adiw	r28, 0x0b	; 11
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	af 90       	pop	r10
    1f02:	9f 90       	pop	r9
    1f04:	8f 90       	pop	r8
    1f06:	7f 90       	pop	r7
    1f08:	6f 90       	pop	r6
    1f0a:	5f 90       	pop	r5
    1f0c:	4f 90       	pop	r4
    1f0e:	3f 90       	pop	r3
    1f10:	2f 90       	pop	r2
    1f12:	08 95       	ret

00001f14 <strnlen_P>:
    1f14:	fc 01       	movw	r30, r24
    1f16:	05 90       	lpm	r0, Z+
    1f18:	61 50       	subi	r22, 0x01	; 1
    1f1a:	70 40       	sbci	r23, 0x00	; 0
    1f1c:	01 10       	cpse	r0, r1
    1f1e:	d8 f7       	brcc	.-10     	; 0x1f16 <strnlen_P+0x2>
    1f20:	80 95       	com	r24
    1f22:	90 95       	com	r25
    1f24:	8e 0f       	add	r24, r30
    1f26:	9f 1f       	adc	r25, r31
    1f28:	08 95       	ret

00001f2a <strnlen>:
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	61 50       	subi	r22, 0x01	; 1
    1f2e:	70 40       	sbci	r23, 0x00	; 0
    1f30:	01 90       	ld	r0, Z+
    1f32:	01 10       	cpse	r0, r1
    1f34:	d8 f7       	brcc	.-10     	; 0x1f2c <strnlen+0x2>
    1f36:	80 95       	com	r24
    1f38:	90 95       	com	r25
    1f3a:	8e 0f       	add	r24, r30
    1f3c:	9f 1f       	adc	r25, r31
    1f3e:	08 95       	ret

00001f40 <fputc>:
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	fb 01       	movw	r30, r22
    1f4a:	23 81       	ldd	r18, Z+3	; 0x03
    1f4c:	21 fd       	sbrc	r18, 1
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <fputc+0x16>
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	9f ef       	ldi	r25, 0xFF	; 255
    1f54:	2c c0       	rjmp	.+88     	; 0x1fae <fputc+0x6e>
    1f56:	22 ff       	sbrs	r18, 2
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <fputc+0x46>
    1f5a:	46 81       	ldd	r20, Z+6	; 0x06
    1f5c:	57 81       	ldd	r21, Z+7	; 0x07
    1f5e:	24 81       	ldd	r18, Z+4	; 0x04
    1f60:	35 81       	ldd	r19, Z+5	; 0x05
    1f62:	42 17       	cp	r20, r18
    1f64:	53 07       	cpc	r21, r19
    1f66:	44 f4       	brge	.+16     	; 0x1f78 <fputc+0x38>
    1f68:	a0 81       	ld	r26, Z
    1f6a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f6c:	9d 01       	movw	r18, r26
    1f6e:	2f 5f       	subi	r18, 0xFF	; 255
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	31 83       	std	Z+1, r19	; 0x01
    1f74:	20 83       	st	Z, r18
    1f76:	8c 93       	st	X, r24
    1f78:	26 81       	ldd	r18, Z+6	; 0x06
    1f7a:	37 81       	ldd	r19, Z+7	; 0x07
    1f7c:	2f 5f       	subi	r18, 0xFF	; 255
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	37 83       	std	Z+7, r19	; 0x07
    1f82:	26 83       	std	Z+6, r18	; 0x06
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <fputc+0x6e>
    1f86:	8b 01       	movw	r16, r22
    1f88:	ec 01       	movw	r28, r24
    1f8a:	fb 01       	movw	r30, r22
    1f8c:	00 84       	ldd	r0, Z+8	; 0x08
    1f8e:	f1 85       	ldd	r31, Z+9	; 0x09
    1f90:	e0 2d       	mov	r30, r0
    1f92:	09 95       	icall
    1f94:	89 2b       	or	r24, r25
    1f96:	e1 f6       	brne	.-72     	; 0x1f50 <fputc+0x10>
    1f98:	d8 01       	movw	r26, r16
    1f9a:	16 96       	adiw	r26, 0x06	; 6
    1f9c:	8d 91       	ld	r24, X+
    1f9e:	9c 91       	ld	r25, X
    1fa0:	17 97       	sbiw	r26, 0x07	; 7
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	17 96       	adiw	r26, 0x07	; 7
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
    1faa:	16 97       	sbiw	r26, 0x06	; 6
    1fac:	ce 01       	movw	r24, r28
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	08 95       	ret

00001fb8 <__ultoa_invert>:
    1fb8:	fa 01       	movw	r30, r20
    1fba:	aa 27       	eor	r26, r26
    1fbc:	28 30       	cpi	r18, 0x08	; 8
    1fbe:	51 f1       	breq	.+84     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fc0:	20 31       	cpi	r18, 0x10	; 16
    1fc2:	81 f1       	breq	.+96     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    1fc4:	e8 94       	clt
    1fc6:	6f 93       	push	r22
    1fc8:	6e 7f       	andi	r22, 0xFE	; 254
    1fca:	6e 5f       	subi	r22, 0xFE	; 254
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	af 4f       	sbci	r26, 0xFF	; 255
    1fd4:	b1 e0       	ldi	r27, 0x01	; 1
    1fd6:	3e d0       	rcall	.+124    	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    1fd8:	b4 e0       	ldi	r27, 0x04	; 4
    1fda:	3c d0       	rcall	.+120    	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    1fdc:	67 0f       	add	r22, r23
    1fde:	78 1f       	adc	r23, r24
    1fe0:	89 1f       	adc	r24, r25
    1fe2:	9a 1f       	adc	r25, r26
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	68 0f       	add	r22, r24
    1fe8:	79 1f       	adc	r23, r25
    1fea:	8a 1f       	adc	r24, r26
    1fec:	91 1d       	adc	r25, r1
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	6a 0f       	add	r22, r26
    1ff2:	71 1d       	adc	r23, r1
    1ff4:	81 1d       	adc	r24, r1
    1ff6:	91 1d       	adc	r25, r1
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	20 d0       	rcall	.+64     	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <__DATA_REGION_LENGTH__>
    1ffe:	68 94       	set
    2000:	3f 91       	pop	r19
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	26 9f       	mul	r18, r22
    2006:	11 24       	eor	r1, r1
    2008:	30 19       	sub	r19, r0
    200a:	30 5d       	subi	r19, 0xD0	; 208
    200c:	31 93       	st	Z+, r19
    200e:	de f6       	brtc	.-74     	; 0x1fc6 <__ultoa_invert+0xe>
    2010:	cf 01       	movw	r24, r30
    2012:	08 95       	ret
    2014:	46 2f       	mov	r20, r22
    2016:	47 70       	andi	r20, 0x07	; 7
    2018:	40 5d       	subi	r20, 0xD0	; 208
    201a:	41 93       	st	Z+, r20
    201c:	b3 e0       	ldi	r27, 0x03	; 3
    201e:	0f d0       	rcall	.+30     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    2020:	c9 f7       	brne	.-14     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2022:	f6 cf       	rjmp	.-20     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    2024:	46 2f       	mov	r20, r22
    2026:	4f 70       	andi	r20, 0x0F	; 15
    2028:	40 5d       	subi	r20, 0xD0	; 208
    202a:	4a 33       	cpi	r20, 0x3A	; 58
    202c:	18 f0       	brcs	.+6      	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    202e:	49 5d       	subi	r20, 0xD9	; 217
    2030:	31 fd       	sbrc	r19, 1
    2032:	40 52       	subi	r20, 0x20	; 32
    2034:	41 93       	st	Z+, r20
    2036:	02 d0       	rcall	.+4      	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    2038:	a9 f7       	brne	.-22     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    203a:	ea cf       	rjmp	.-44     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    203c:	b4 e0       	ldi	r27, 0x04	; 4
    203e:	a6 95       	lsr	r26
    2040:	97 95       	ror	r25
    2042:	87 95       	ror	r24
    2044:	77 95       	ror	r23
    2046:	67 95       	ror	r22
    2048:	ba 95       	dec	r27
    204a:	c9 f7       	brne	.-14     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	61 05       	cpc	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	08 95       	ret
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	0a 2e       	mov	r0, r26
    205a:	06 94       	lsr	r0
    205c:	57 95       	ror	r21
    205e:	47 95       	ror	r20
    2060:	37 95       	ror	r19
    2062:	27 95       	ror	r18
    2064:	ba 95       	dec	r27
    2066:	c9 f7       	brne	.-14     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2068:	62 0f       	add	r22, r18
    206a:	73 1f       	adc	r23, r19
    206c:	84 1f       	adc	r24, r20
    206e:	95 1f       	adc	r25, r21
    2070:	a0 1d       	adc	r26, r0
    2072:	08 95       	ret

00002074 <_exit>:
    2074:	f8 94       	cli

00002076 <__stop_program>:
    2076:	ff cf       	rjmp	.-2      	; 0x2076 <__stop_program>
