
Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ffa  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080010e  0080010e  0000109c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005725  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cbb  00000000  00000000  00006a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f53  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  0000b69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002349  00000000  00000000  0000be94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000308b  00000000  00000000  0000e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
   2:	00 00       	nop
   4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
   6:	00 00       	nop
   8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
   a:	00 00       	nop
   c:	c3 c0       	rjmp	.+390    	; 0x194 <__bad_interrupt>
   e:	00 00       	nop
  10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
  12:	00 00       	nop
  14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
  16:	00 00       	nop
  18:	bd c0       	rjmp	.+378    	; 0x194 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
  22:	00 00       	nop
  24:	b7 c0       	rjmp	.+366    	; 0x194 <__bad_interrupt>
  26:	00 00       	nop
  28:	64 c2       	rjmp	.+1224   	; 0x4f2 <__vector_10>
  2a:	00 00       	nop
  2c:	b3 c0       	rjmp	.+358    	; 0x194 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
  32:	00 00       	nop
  34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
  36:	00 00       	nop
  38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ab c0       	rjmp	.+342    	; 0x194 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
  42:	00 00       	nop
  44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
  46:	00 00       	nop
  48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
  52:	00 00       	nop
  54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
  56:	00 00       	nop
  58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9b c0       	rjmp	.+310    	; 0x194 <__bad_interrupt>
  5e:	00 00       	nop
  60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
  62:	00 00       	nop
  64:	97 c0       	rjmp	.+302    	; 0x194 <__bad_interrupt>
  66:	00 00       	nop
  68:	95 c0       	rjmp	.+298    	; 0x194 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
  6e:	00 00       	nop
  70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
  72:	00 00       	nop
  74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
  76:	00 00       	nop
  78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
  7e:	00 00       	nop
  80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
  82:	00 00       	nop
  84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
  86:	00 00       	nop
  88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
  8e:	00 00       	nop
  90:	81 c0       	rjmp	.+258    	; 0x194 <__bad_interrupt>
  92:	00 00       	nop
  94:	7f c0       	rjmp	.+254    	; 0x194 <__bad_interrupt>
  96:	00 00       	nop
  98:	a2 04       	cpc	r10, r2
  9a:	c4 04       	cpc	r12, r4
  9c:	b1 05       	cpc	r27, r1
  9e:	c4 04       	cpc	r12, r4
  a0:	b1 05       	cpc	r27, r1
  a2:	09 05       	cpc	r16, r9
  a4:	2c 05       	cpc	r18, r12
  a6:	b1 05       	cpc	r27, r1
  a8:	7e 05       	cpc	r23, r14
  aa:	90 05       	cpc	r25, r0

000000ac <ProductString>:
  ac:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
  bc:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
  cc:	00 00                                               ..

000000ce <ManufacturerString>:
  ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ConfigurationDescriptor>:
  ec:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  fc:	02 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
 10c:	00 01                                               ..

0000010e <DeviceDescriptor>:
 10e:	12 01 10 01 00 00 00 08 eb 03 41 20 01 00 01 02     ..........A ....
 11e:	00 01                                               ..

00000120 <MouseReport>:
 120:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 130:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 140:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
 150:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

0000015a <__ctors_end>:
 15a:	11 24       	eor	r1, r1
 15c:	1f be       	out	0x3f, r1	; 63
 15e:	cf ef       	ldi	r28, 0xFF	; 255
 160:	d0 e2       	ldi	r29, 0x20	; 32
 162:	de bf       	out	0x3e, r29	; 62
 164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
 166:	11 e0       	ldi	r17, 0x01	; 1
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	ea ef       	ldi	r30, 0xFA	; 250
 16e:	ff e0       	ldi	r31, 0x0F	; 15
 170:	00 e0       	ldi	r16, 0x00	; 0
 172:	0b bf       	out	0x3b, r16	; 59
 174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x14>
 176:	07 90       	elpm	r0, Z+
 178:	0d 92       	st	X+, r0
 17a:	ae 30       	cpi	r26, 0x0E	; 14
 17c:	b1 07       	cpc	r27, r17
 17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0x10>

00000180 <__do_clear_bss>:
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	ae e0       	ldi	r26, 0x0E	; 14
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
 188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
 18a:	ae 31       	cpi	r26, 0x1E	; 30
 18c:	b2 07       	cpc	r27, r18
 18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
 190:	33 d0       	rcall	.+102    	; 0x1f8 <main>
 192:	31 c7       	rjmp	.+3682   	; 0xff6 <_exit>

00000194 <__bad_interrupt>:
 194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 196:	9b b1       	in	r25, 0x0b	; 11
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	89 2b       	or	r24, r25
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	08 95       	ret

000001a0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1a0:	84 b7       	in	r24, 0x34	; 52
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	a8 95       	wdr
 1ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1b0:	88 61       	ori	r24, 0x18	; 24
 1b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ba:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1c8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1cc:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1ce:	84 b1       	in	r24, 0x04	; 4
 1d0:	8f 71       	andi	r24, 0x1F	; 31
 1d2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1d4:	8d b1       	in	r24, 0x0d	; 13
 1d6:	8f 7c       	andi	r24, 0xCF	; 207
 1d8:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	80 6e       	ori	r24, 0xE0	; 224
 1de:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1e0:	8e b1       	in	r24, 0x0e	; 14
 1e2:	80 63       	ori	r24, 0x30	; 48
 1e4:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1e6:	8a b1       	in	r24, 0x0a	; 10
 1e8:	80 6f       	ori	r24, 0xF0	; 240
 1ea:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1f2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1f4:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1f6:	67 c1       	rjmp	.+718    	; 0x4c6 <USB_Init>

000001f8 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 1f8:	d3 df       	rcall	.-90     	; 0x1a0 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	cc df       	rcall	.-104    	; 0x196 <LEDs_SetAllLEDs>
	sei();
 1fe:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Mouse_HID_Interface);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 204:	2c d6       	rcall	.+3160   	; 0xe5e <HID_Device_USBTask>
 206:	c7 d4       	rcall	.+2446   	; 0xb96 <USB_USBTask>
 208:	fb cf       	rjmp	.-10     	; 0x200 <main+0x8>

0000020a <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 20a:	80 ea       	ldi	r24, 0xA0	; 160
 20c:	c4 cf       	rjmp	.-120    	; 0x196 <LEDs_SetAllLEDs>

0000020e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 20e:	80 e1       	ldi	r24, 0x10	; 16
 210:	c2 cf       	rjmp	.-124    	; 0x196 <LEDs_SetAllLEDs>

00000212 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	f8 d5       	rcall	.+3056   	; 0xe08 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 218:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 21c:	94 60       	ori	r25, 0x04	; 4
 21e:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 222:	81 11       	cpse	r24, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <EVENT_USB_Device_ConfigurationChanged+0x18>
 226:	80 e9       	ldi	r24, 0x90	; 144
 228:	01 c0       	rjmp	.+2      	; 0x22c <EVENT_USB_Device_ConfigurationChanged+0x1a>
 22a:	80 e6       	ldi	r24, 0x60	; 96
 22c:	b4 cf       	rjmp	.-152    	; 0x196 <LEDs_SetAllLEDs>

0000022e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	c3 c4       	rjmp	.+2438   	; 0xbba <HID_Device_ProcessControlRequest>

00000234 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 234:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 238:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	29 f0       	breq	.+10     	; 0x24a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 246:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 24a:	08 95       	ret

0000024c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 252:	83 b1       	in	r24, 0x03	; 3
 254:	9c b1       	in	r25, 0x0c	; 12
 256:	90 95       	com	r25
 258:	90 73       	andi	r25, 0x30	; 48
 25a:	96 95       	lsr	r25
 25c:	80 95       	com	r24
 25e:	80 7e       	andi	r24, 0xE0	; 224
 260:	89 2b       	or	r24, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 262:	9c b1       	in	r25, 0x0c	; 12
 264:	90 95       	com	r25
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
 266:	87 ff       	sbrs	r24, 7
 268:	02 c0       	rjmp	.+4      	; 0x26e <CALLBACK_HID_Device_CreateHIDReport+0x22>
	  MouseReport->Y = -1;
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	03 c0       	rjmp	.+6      	; 0x274 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	else if (JoyStatus_LCL & JOY_DOWN)
 26e:	84 ff       	sbrs	r24, 4
 270:	02 c0       	rjmp	.+4      	; 0x276 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
	  MouseReport->Y =  1;
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
 276:	86 ff       	sbrs	r24, 6
 278:	02 c0       	rjmp	.+4      	; 0x27e <CALLBACK_HID_Device_CreateHIDReport+0x32>
	  MouseReport->X = -1;
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	03 c0       	rjmp	.+6      	; 0x284 <CALLBACK_HID_Device_CreateHIDReport+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
 27e:	83 ff       	sbrs	r24, 3
 280:	02 c0       	rjmp	.+4      	; 0x286 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->X =  1;
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	21 83       	std	Z+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
 286:	85 ff       	sbrs	r24, 5
 288:	03 c0       	rjmp	.+6      	; 0x290 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  MouseReport->Button |= (1 << 0);
 28a:	80 81       	ld	r24, Z
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 290:	92 ff       	sbrs	r25, 2
 292:	03 c0       	rjmp	.+6      	; 0x29a <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  MouseReport->Button |= (1 << 1);
 294:	80 81       	ld	r24, Z
 296:	82 60       	ori	r24, 0x02	; 2
 298:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	f8 01       	movw	r30, r16
 2a0:	91 83       	std	Z+1, r25	; 0x01
 2a2:	80 83       	st	Z, r24
	return true;
}
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 2ac:	08 95       	ret

000002ae <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2ae:	29 2f       	mov	r18, r25
 2b0:	33 27       	eor	r19, r19
 2b2:	23 30       	cpi	r18, 0x03	; 3
 2b4:	31 05       	cpc	r19, r1
 2b6:	e1 f0       	breq	.+56     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x42>
 2b8:	58 f4       	brcc	.+22     	; 0x2d0 <CALLBACK_USB_GetDescriptor+0x22>
 2ba:	21 30       	cpi	r18, 0x01	; 1
 2bc:	31 05       	cpc	r19, r1
 2be:	99 f0       	breq	.+38     	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x38>
 2c0:	22 30       	cpi	r18, 0x02	; 2
 2c2:	31 05       	cpc	r19, r1
 2c4:	69 f5       	brne	.+90     	; 0x320 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2c6:	82 e2       	ldi	r24, 0x22	; 34
 2c8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 2ca:	2c ee       	ldi	r18, 0xEC	; 236
 2cc:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 2ce:	2c c0       	rjmp	.+88     	; 0x328 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2d0:	21 32       	cpi	r18, 0x21	; 33
 2d2:	31 05       	cpc	r19, r1
 2d4:	01 f1       	breq	.+64     	; 0x316 <CALLBACK_USB_GetDescriptor+0x68>
 2d6:	22 32       	cpi	r18, 0x22	; 34
 2d8:	31 05       	cpc	r19, r1
 2da:	11 f5       	brne	.+68     	; 0x320 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
 2dc:	8a e3       	ldi	r24, 0x3A	; 58
 2de:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
 2e0:	20 e2       	ldi	r18, 0x20	; 32
 2e2:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
 2e4:	21 c0       	rjmp	.+66     	; 0x328 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2e6:	82 e1       	ldi	r24, 0x12	; 18
 2e8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 2ea:	2e e0       	ldi	r18, 0x0E	; 14
 2ec:	31 e0       	ldi	r19, 0x01	; 1
 2ee:	1c c0       	rjmp	.+56     	; 0x328 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 2f0:	99 27       	eor	r25, r25
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	91 05       	cpc	r25, r1
 2f6:	49 f0       	breq	.+18     	; 0x30a <CALLBACK_USB_GetDescriptor+0x5c>
 2f8:	28 f0       	brcs	.+10     	; 0x304 <CALLBACK_USB_GetDescriptor+0x56>
 2fa:	02 97       	sbiw	r24, 0x02	; 2
 2fc:	89 f4       	brne	.+34     	; 0x320 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2fe:	ec ea       	ldi	r30, 0xAC	; 172
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	05 c0       	rjmp	.+10     	; 0x30e <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 304:	e8 ee       	ldi	r30, 0xE8	; 232
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 30a:	ee ec       	ldi	r30, 0xCE	; 206
 30c:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 30e:	84 91       	lpm	r24, Z
 310:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 312:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 314:	09 c0       	rjmp	.+18     	; 0x328 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 316:	89 e0       	ldi	r24, 0x09	; 9
 318:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
 31a:	2e ef       	ldi	r18, 0xFE	; 254
 31c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 31e:	04 c0       	rjmp	.+8      	; 0x328 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
 328:	fa 01       	movw	r30, r20
 32a:	31 83       	std	Z+1, r19	; 0x01
 32c:	20 83       	st	Z, r18
	return Size;
}
 32e:	08 95       	ret

00000330 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 330:	98 2f       	mov	r25, r24
 332:	97 30       	cpi	r25, 0x07	; 7
 334:	68 f5       	brcc	.+90     	; 0x390 <Endpoint_ConfigureEndpoint_Prv+0x60>
 336:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 33a:	98 17       	cp	r25, r24
 33c:	39 f0       	breq	.+14     	; 0x34c <Endpoint_ConfigureEndpoint_Prv+0x1c>
 33e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 342:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 346:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 34a:	03 c0       	rjmp	.+6      	; 0x352 <Endpoint_ConfigureEndpoint_Prv+0x22>
 34c:	24 2f       	mov	r18, r20
 34e:	76 2f       	mov	r23, r22
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	21 fd       	sbrc	r18, 1
 354:	02 c0       	rjmp	.+4      	; 0x35a <Endpoint_ConfigureEndpoint_Prv+0x2a>
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	ec cf       	rjmp	.-40     	; 0x332 <Endpoint_ConfigureEndpoint_Prv+0x2>
 35a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 35e:	3e 7f       	andi	r19, 0xFE	; 254
 360:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 364:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 368:	3d 7f       	andi	r19, 0xFD	; 253
 36a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 36e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 372:	31 60       	ori	r19, 0x01	; 1
 374:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 378:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 37c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 380:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 384:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 388:	27 fd       	sbrc	r18, 7
 38a:	e5 cf       	rjmp	.-54     	; 0x356 <Endpoint_ConfigureEndpoint_Prv+0x26>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
 390:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret

00000398 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 398:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 39c:	87 ff       	sbrs	r24, 7
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 3a4:	82 fd       	sbrc	r24, 2
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 3ac:	81 11       	cpse	r24, r1
 3ae:	f8 cf       	rjmp	.-16     	; 0x3a0 <Endpoint_ClearStatusStage+0x8>
 3b0:	11 c0       	rjmp	.+34     	; 0x3d4 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3b6:	8b 77       	andi	r24, 0x7B	; 123
 3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 3be:	88 23       	and	r24, r24
 3c0:	49 f0       	breq	.+18     	; 0x3d4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3ce:	8e 77       	andi	r24, 0x7E	; 126
 3d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3d4:	08 95       	ret

000003d6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 3d6:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 3da:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 3de:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 3e0:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3e4:	84 2f       	mov	r24, r20
 3e6:	81 70       	andi	r24, 0x01	; 1
 3e8:	40 ff       	sbrs	r20, 0
 3ea:	23 c0       	rjmp	.+70     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 3f0:	80 fd       	sbrc	r24, 0
 3f2:	1d c0       	rjmp	.+58     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3f8:	88 23       	and	r24, r24
 3fa:	99 f0       	breq	.+38     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	99 f0       	breq	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 400:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 404:	85 fd       	sbrc	r24, 5
 406:	11 c0       	rjmp	.+34     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 408:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 40c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 410:	24 17       	cp	r18, r20
 412:	35 07       	cpc	r19, r21
 414:	29 f3       	breq	.-54     	; 0x3e0 <Endpoint_WaitUntilReady+0xa>
 416:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 418:	11 f0       	breq	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	9a 01       	movw	r18, r20
 41c:	e1 cf       	rjmp	.-62     	; 0x3e0 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 432:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 436:	42 ff       	sbrs	r20, 2
 438:	dd cf       	rjmp	.-70     	; 0x3f4 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 43a:	08 95       	ret

0000043c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 444:	49 d0       	rcall	.+146    	; 0x4d8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 446:	50 d0       	rcall	.+160    	; 0x4e8 <USB_INT_ClearAllInterrupts>
 448:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 44a:	d0 e0       	ldi	r29, 0x00	; 0
 44c:	88 81       	ld	r24, Y
 44e:	8f 77       	andi	r24, 0x7F	; 127
 450:	88 83       	st	Y, r24
 452:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 454:	80 68       	ori	r24, 0x80	; 128
 456:	88 83       	st	Y, r24
 458:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 45a:	8f 7d       	andi	r24, 0xDF	; 223
 45c:	88 83       	st	Y, r24
 45e:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	80 68       	ori	r24, 0x80	; 128
 466:	80 83       	st	Z, r24
 468:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 46a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 46e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 472:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 476:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 47a:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	f8 01       	movw	r30, r16
 480:	80 81       	ld	r24, Z
 482:	8b 7f       	andi	r24, 0xFB	; 251
 484:	80 83       	st	Z, r24
 486:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	88 83       	st	Y, r24
 48c:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	4e df       	rcall	.-356    	; 0x330 <Endpoint_ConfigureEndpoint_Prv>
 494:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	8e 7f       	andi	r24, 0xFE	; 254
 49c:	80 83       	st	Z, r24
 49e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	81 60       	ori	r24, 0x01	; 1
 4a6:	80 83       	st	Z, r24
 4a8:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 4aa:	88 60       	ori	r24, 0x08	; 8
 4ac:	80 83       	st	Z, r24
 4ae:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4b0:	80 81       	ld	r24, Z
 4b2:	8e 7f       	andi	r24, 0xFE	; 254
 4b4:	80 83       	st	Z, r24
 4b6:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 4b8:	80 61       	ori	r24, 0x10	; 16
 4ba:	88 83       	st	Y, r24
 4bc:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <USB_Init>:
 4c6:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <USB_IsInitialized>

	USB_ResetInterface();
 4d6:	b2 cf       	rjmp	.-156    	; 0x43c <USB_ResetInterface>

000004d8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 4d8:	e8 ed       	ldi	r30, 0xD8	; 216
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	8c 7f       	andi	r24, 0xFC	; 252
 4e0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4e2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4e6:	08 95       	ret

000004e8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 4e8:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 4ec:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 4f0:	08 95       	ret

000004f2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 4f2:	1f 92       	push	r1
 4f4:	0f 92       	push	r0
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	0b b6       	in	r0, 0x3b	; 59
 4fe:	0f 92       	push	r0
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 518:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 51c:	82 ff       	sbrs	r24, 2
 51e:	0a c0       	rjmp	.+20     	; 0x534 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 520:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 524:	82 ff       	sbrs	r24, 2
 526:	06 c0       	rjmp	.+12     	; 0x534 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 528:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 52c:	8b 7f       	andi	r24, 0xFB	; 251
 52e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 532:	80 de       	rcall	.-768    	; 0x234 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 534:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 538:	80 ff       	sbrs	r24, 0
 53a:	1d c0       	rjmp	.+58     	; 0x576 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 53c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 540:	80 ff       	sbrs	r24, 0
 542:	19 c0       	rjmp	.+50     	; 0x576 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 544:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 54e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 552:	80 ff       	sbrs	r24, 0
 554:	0c c0       	rjmp	.+24     	; 0x56e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 556:	8c e0       	ldi	r24, 0x0C	; 12
 558:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 55a:	8e e0       	ldi	r24, 0x0E	; 14
 55c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 55e:	09 b4       	in	r0, 0x29	; 41
 560:	00 fe       	sbrs	r0, 0
 562:	fd cf       	rjmp	.-6      	; 0x55e <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 56a:	4f de       	rcall	.-866    	; 0x20a <EVENT_USB_Device_Connect>
 56c:	04 c0       	rjmp	.+8      	; 0x576 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 56e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 570:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 574:	4c de       	rcall	.-872    	; 0x20e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 576:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 57a:	80 ff       	sbrs	r24, 0
 57c:	18 c0       	rjmp	.+48     	; 0x5ae <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 57e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 582:	80 ff       	sbrs	r24, 0
 584:	14 c0       	rjmp	.+40     	; 0x5ae <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 586:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 58a:	8e 7f       	andi	r24, 0xFE	; 254
 58c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 590:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 594:	80 61       	ori	r24, 0x10	; 16
 596:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 59a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 59e:	80 62       	ori	r24, 0x20	; 32
 5a0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5a4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 5a6:	85 e0       	ldi	r24, 0x05	; 5
 5a8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 5ac:	f3 d2       	rcall	.+1510   	; 0xb94 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 5ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 5b2:	84 ff       	sbrs	r24, 4
 5b4:	2d c0       	rjmp	.+90     	; 0x610 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 5b6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5ba:	84 ff       	sbrs	r24, 4
 5bc:	29 c0       	rjmp	.+82     	; 0x610 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5be:	8c e0       	ldi	r24, 0x0C	; 12
 5c0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5c2:	8e e0       	ldi	r24, 0x0E	; 14
 5c4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5c6:	09 b4       	in	r0, 0x29	; 41
 5c8:	00 fe       	sbrs	r0, 0
 5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5cc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5d0:	8f 7d       	andi	r24, 0xDF	; 223
 5d2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 5d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5da:	8f 7e       	andi	r24, 0xEF	; 239
 5dc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 5e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5e4:	8f 7e       	andi	r24, 0xEF	; 239
 5e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5ee:	81 60       	ori	r24, 0x01	; 1
 5f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 5f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_Device_ConfigurationNumber>
 5f8:	81 11       	cpse	r24, r1
 5fa:	06 c0       	rjmp	.+12     	; 0x608 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 5fc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 600:	87 fd       	sbrc	r24, 7
 602:	02 c0       	rjmp	.+4      	; 0x608 <__vector_10+0x116>
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	01 c0       	rjmp	.+2      	; 0x60a <__vector_10+0x118>
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 60e:	c2 d2       	rcall	.+1412   	; 0xb94 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 610:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 614:	83 ff       	sbrs	r24, 3
 616:	22 c0       	rjmp	.+68     	; 0x65c <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 618:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 61c:	83 ff       	sbrs	r24, 3
 61e:	1e c0       	rjmp	.+60     	; 0x65c <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 620:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 624:	87 7f       	andi	r24, 0xF7	; 247
 626:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 630:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 634:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 638:	8e 7f       	andi	r24, 0xFE	; 254
 63a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 63e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 642:	8e 7f       	andi	r24, 0xFE	; 254
 644:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 648:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 64c:	80 61       	ori	r24, 0x10	; 16
 64e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 652:	42 e0       	ldi	r20, 0x02	; 2
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	6b de       	rcall	.-810    	; 0x330 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 65a:	9c d2       	rcall	.+1336   	; 0xb94 <USB_Event_Stub>
 65c:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0b be       	out	0x3b, r0	; 59
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <Endpoint_Write_Stream_LE>:
 682:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	8b 01       	movw	r16, r22
 696:	7a 01       	movw	r14, r20
 698:	9e de       	rcall	.-708    	; 0x3d6 <Endpoint_WaitUntilReady>
 69a:	81 11       	cpse	r24, r1
 69c:	33 c0       	rjmp	.+102    	; 0x704 <Endpoint_Write_Stream_LE+0x82>
 69e:	e1 14       	cp	r14, r1
 6a0:	f1 04       	cpc	r15, r1
 6a2:	39 f0       	breq	.+14     	; 0x6b2 <Endpoint_Write_Stream_LE+0x30>
 6a4:	f7 01       	movw	r30, r14
 6a6:	80 81       	ld	r24, Z
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	08 1b       	sub	r16, r24
 6ac:	19 0b       	sbc	r17, r25
 6ae:	c8 0f       	add	r28, r24
 6b0:	d9 1f       	adc	r29, r25
 6b2:	c1 2c       	mov	r12, r1
 6b4:	d1 2c       	mov	r13, r1
 6b6:	01 15       	cp	r16, r1
 6b8:	11 05       	cpc	r17, r1
 6ba:	19 f1       	breq	.+70     	; 0x702 <Endpoint_Write_Stream_LE+0x80>
 6bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c0:	85 fd       	sbrc	r24, 5
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <Endpoint_Write_Stream_LE+0x6e>
 6c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c8:	8e 77       	andi	r24, 0x7E	; 126
 6ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ce:	63 d2       	rcall	.+1222   	; 0xb96 <USB_USBTask>
 6d0:	e1 14       	cp	r14, r1
 6d2:	f1 04       	cpc	r15, r1
 6d4:	49 f0       	breq	.+18     	; 0x6e8 <Endpoint_Write_Stream_LE+0x66>
 6d6:	f7 01       	movw	r30, r14
 6d8:	80 81       	ld	r24, Z
 6da:	91 81       	ldd	r25, Z+1	; 0x01
 6dc:	c8 0e       	add	r12, r24
 6de:	d9 1e       	adc	r13, r25
 6e0:	d1 82       	std	Z+1, r13	; 0x01
 6e2:	c0 82       	st	Z, r12
 6e4:	85 e0       	ldi	r24, 0x05	; 5
 6e6:	0e c0       	rjmp	.+28     	; 0x704 <Endpoint_Write_Stream_LE+0x82>
 6e8:	76 de       	rcall	.-788    	; 0x3d6 <Endpoint_WaitUntilReady>
 6ea:	88 23       	and	r24, r24
 6ec:	21 f3       	breq	.-56     	; 0x6b6 <Endpoint_Write_Stream_LE+0x34>
 6ee:	0a c0       	rjmp	.+20     	; 0x704 <Endpoint_Write_Stream_LE+0x82>
 6f0:	89 91       	ld	r24, Y+
 6f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 6f6:	01 50       	subi	r16, 0x01	; 1
 6f8:	11 09       	sbc	r17, r1
 6fa:	ff ef       	ldi	r31, 0xFF	; 255
 6fc:	cf 1a       	sub	r12, r31
 6fe:	df 0a       	sbc	r13, r31
 700:	da cf       	rjmp	.-76     	; 0x6b6 <Endpoint_Write_Stream_LE+0x34>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	ff 90       	pop	r15
 70e:	ef 90       	pop	r14
 710:	df 90       	pop	r13
 712:	cf 90       	pop	r12
 714:	08 95       	ret

00000716 <Endpoint_Write_Control_Stream_LE>:
 716:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <USB_ControlRequest+0x6>
 71a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <USB_ControlRequest+0x7>
 71e:	26 17       	cp	r18, r22
 720:	37 07       	cpc	r19, r23
 722:	48 f0       	brcs	.+18     	; 0x736 <Endpoint_Write_Control_Stream_LE+0x20>
 724:	61 15       	cp	r22, r1
 726:	71 05       	cpc	r23, r1
 728:	39 f4       	brne	.+14     	; 0x738 <Endpoint_Write_Control_Stream_LE+0x22>
 72a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 72e:	2e 77       	andi	r18, 0x7E	; 126
 730:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 734:	01 c0       	rjmp	.+2      	; 0x738 <Endpoint_Write_Control_Stream_LE+0x22>
 736:	b9 01       	movw	r22, r18
 738:	fc 01       	movw	r30, r24
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	61 15       	cp	r22, r1
 73e:	71 05       	cpc	r23, r1
 740:	69 f1       	breq	.+90     	; 0x79c <Endpoint_Write_Control_Stream_LE+0x86>
 742:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 746:	88 23       	and	r24, r24
 748:	d1 f1       	breq	.+116    	; 0x7be <Endpoint_Write_Control_Stream_LE+0xa8>
 74a:	85 30       	cpi	r24, 0x05	; 5
 74c:	d1 f1       	breq	.+116    	; 0x7c2 <Endpoint_Write_Control_Stream_LE+0xac>
 74e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 752:	83 fd       	sbrc	r24, 3
 754:	32 c0       	rjmp	.+100    	; 0x7ba <Endpoint_Write_Control_Stream_LE+0xa4>
 756:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 75a:	82 fd       	sbrc	r24, 2
 75c:	28 c0       	rjmp	.+80     	; 0x7ae <Endpoint_Write_Control_Stream_LE+0x98>
 75e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 762:	80 ff       	sbrs	r24, 0
 764:	eb cf       	rjmp	.-42     	; 0x73c <Endpoint_Write_Control_Stream_LE+0x26>
 766:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 76a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 76e:	61 15       	cp	r22, r1
 770:	71 05       	cpc	r23, r1
 772:	51 f0       	breq	.+20     	; 0x788 <Endpoint_Write_Control_Stream_LE+0x72>
 774:	88 30       	cpi	r24, 0x08	; 8
 776:	91 05       	cpc	r25, r1
 778:	38 f4       	brcc	.+14     	; 0x788 <Endpoint_Write_Control_Stream_LE+0x72>
 77a:	21 91       	ld	r18, Z+
 77c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 780:	61 50       	subi	r22, 0x01	; 1
 782:	71 09       	sbc	r23, r1
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	f3 cf       	rjmp	.-26     	; 0x76e <Endpoint_Write_Control_Stream_LE+0x58>
 788:	21 e0       	ldi	r18, 0x01	; 1
 78a:	08 97       	sbiw	r24, 0x08	; 8
 78c:	09 f0       	breq	.+2      	; 0x790 <Endpoint_Write_Control_Stream_LE+0x7a>
 78e:	20 e0       	ldi	r18, 0x00	; 0
 790:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 794:	8e 77       	andi	r24, 0x7E	; 126
 796:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 79a:	d0 cf       	rjmp	.-96     	; 0x73c <Endpoint_Write_Control_Stream_LE+0x26>
 79c:	21 11       	cpse	r18, r1
 79e:	d1 cf       	rjmp	.-94     	; 0x742 <Endpoint_Write_Control_Stream_LE+0x2c>
 7a0:	06 c0       	rjmp	.+12     	; 0x7ae <Endpoint_Write_Control_Stream_LE+0x98>
 7a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 7a6:	88 23       	and	r24, r24
 7a8:	51 f0       	breq	.+20     	; 0x7be <Endpoint_Write_Control_Stream_LE+0xa8>
 7aa:	85 30       	cpi	r24, 0x05	; 5
 7ac:	51 f0       	breq	.+20     	; 0x7c2 <Endpoint_Write_Control_Stream_LE+0xac>
 7ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b2:	82 ff       	sbrs	r24, 2
 7b4:	f6 cf       	rjmp	.-20     	; 0x7a2 <Endpoint_Write_Control_Stream_LE+0x8c>
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	08 95       	ret
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	08 95       	ret
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	08 95       	ret
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	08 95       	ret

000007c6 <Endpoint_Read_Control_Stream_LE>:
 7c6:	61 15       	cp	r22, r1
 7c8:	71 05       	cpc	r23, r1
 7ca:	29 f4       	brne	.+10     	; 0x7d6 <Endpoint_Read_Control_Stream_LE+0x10>
 7cc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7d0:	2b 77       	andi	r18, 0x7B	; 123
 7d2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7d6:	fc 01       	movw	r30, r24
 7d8:	61 15       	cp	r22, r1
 7da:	71 05       	cpc	r23, r1
 7dc:	31 f1       	breq	.+76     	; 0x82a <Endpoint_Read_Control_Stream_LE+0x64>
 7de:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 7e2:	88 23       	and	r24, r24
 7e4:	51 f1       	breq	.+84     	; 0x83a <Endpoint_Read_Control_Stream_LE+0x74>
 7e6:	85 30       	cpi	r24, 0x05	; 5
 7e8:	51 f1       	breq	.+84     	; 0x83e <Endpoint_Read_Control_Stream_LE+0x78>
 7ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7ee:	83 fd       	sbrc	r24, 3
 7f0:	22 c0       	rjmp	.+68     	; 0x836 <Endpoint_Read_Control_Stream_LE+0x70>
 7f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7f6:	82 ff       	sbrs	r24, 2
 7f8:	ef cf       	rjmp	.-34     	; 0x7d8 <Endpoint_Read_Control_Stream_LE+0x12>
 7fa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 7fe:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 802:	89 2b       	or	r24, r25
 804:	31 f0       	breq	.+12     	; 0x812 <Endpoint_Read_Control_Stream_LE+0x4c>
 806:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 80a:	81 93       	st	Z+, r24
 80c:	61 50       	subi	r22, 0x01	; 1
 80e:	71 09       	sbc	r23, r1
 810:	a1 f7       	brne	.-24     	; 0x7fa <Endpoint_Read_Control_Stream_LE+0x34>
 812:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 816:	8b 77       	andi	r24, 0x7B	; 123
 818:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 81c:	dd cf       	rjmp	.-70     	; 0x7d8 <Endpoint_Read_Control_Stream_LE+0x12>
 81e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 822:	88 23       	and	r24, r24
 824:	51 f0       	breq	.+20     	; 0x83a <Endpoint_Read_Control_Stream_LE+0x74>
 826:	85 30       	cpi	r24, 0x05	; 5
 828:	51 f0       	breq	.+20     	; 0x83e <Endpoint_Read_Control_Stream_LE+0x78>
 82a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 82e:	80 ff       	sbrs	r24, 0
 830:	f6 cf       	rjmp	.-20     	; 0x81e <Endpoint_Read_Control_Stream_LE+0x58>
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	08 95       	ret
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	08 95       	ret
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	08 95       	ret
 83e:	83 e0       	ldi	r24, 0x03	; 3
 840:	08 95       	ret

00000842 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 842:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <USB_ControlRequest+0x6>
 846:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <USB_ControlRequest+0x7>
 84a:	26 17       	cp	r18, r22
 84c:	37 07       	cpc	r19, r23
 84e:	48 f0       	brcs	.+18     	; 0x862 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 850:	61 15       	cp	r22, r1
 852:	71 05       	cpc	r23, r1
 854:	39 f4       	brne	.+14     	; 0x864 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 856:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 85a:	2e 77       	andi	r18, 0x7E	; 126
 85c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 860:	01 c0       	rjmp	.+2      	; 0x864 <Endpoint_Write_Control_PStream_LE+0x22>
 862:	b9 01       	movw	r22, r18
 864:	fc 01       	movw	r30, r24
 866:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 868:	61 15       	cp	r22, r1
 86a:	71 05       	cpc	r23, r1
 86c:	71 f1       	breq	.+92     	; 0x8ca <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 86e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 872:	88 23       	and	r24, r24
 874:	d9 f1       	breq	.+118    	; 0x8ec <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 876:	85 30       	cpi	r24, 0x05	; 5
 878:	d9 f1       	breq	.+118    	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 87a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 87e:	83 fd       	sbrc	r24, 3
 880:	33 c0       	rjmp	.+102    	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 882:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 886:	82 fd       	sbrc	r24, 2
 888:	29 c0       	rjmp	.+82     	; 0x8dc <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 88a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 88e:	80 ff       	sbrs	r24, 0
 890:	eb cf       	rjmp	.-42     	; 0x868 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 892:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 896:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 89a:	61 15       	cp	r22, r1
 89c:	71 05       	cpc	r23, r1
 89e:	59 f0       	breq	.+22     	; 0x8b6 <Endpoint_Write_Control_PStream_LE+0x74>
 8a0:	88 30       	cpi	r24, 0x08	; 8
 8a2:	91 05       	cpc	r25, r1
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 8a6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8a8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 8ac:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 8ae:	61 50       	subi	r22, 0x01	; 1
 8b0:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	f2 cf       	rjmp	.-28     	; 0x89a <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 8b6:	21 e0       	ldi	r18, 0x01	; 1
 8b8:	08 97       	sbiw	r24, 0x08	; 8
 8ba:	09 f0       	breq	.+2      	; 0x8be <Endpoint_Write_Control_PStream_LE+0x7c>
 8bc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8c2:	8e 77       	andi	r24, 0x7E	; 126
 8c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8c8:	cf cf       	rjmp	.-98     	; 0x868 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8ca:	21 11       	cpse	r18, r1
 8cc:	d0 cf       	rjmp	.-96     	; 0x86e <Endpoint_Write_Control_PStream_LE+0x2c>
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8d0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8d4:	88 23       	and	r24, r24
 8d6:	51 f0       	breq	.+20     	; 0x8ec <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8d8:	85 30       	cpi	r24, 0x05	; 5
 8da:	51 f0       	breq	.+20     	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8e0:	82 ff       	sbrs	r24, 2
 8e2:	f6 cf       	rjmp	.-20     	; 0x8d0 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 8ec:	82 e0       	ldi	r24, 0x02	; 2
 8ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 8f0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8f2:	08 95       	ret

000008f4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	aa 97       	sbiw	r28, 0x2a	; 42
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	de bf       	out	0x3e, r29	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	cd bf       	out	0x3d, r28	; 61
 90c:	e6 e1       	ldi	r30, 0x16	; 22
 90e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 910:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 914:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 916:	21 e0       	ldi	r18, 0x01	; 1
 918:	ee 31       	cpi	r30, 0x1E	; 30
 91a:	f2 07       	cpc	r31, r18
 91c:	c9 f7       	brne	.-14     	; 0x910 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 91e:	87 dc       	rcall	.-1778   	; 0x22e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 920:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 924:	83 ff       	sbrs	r24, 3
 926:	1d c1       	rjmp	.+570    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 928:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 92c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <USB_ControlRequest+0x1>
 930:	49 2f       	mov	r20, r25
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	4a 30       	cpi	r20, 0x0A	; 10
 936:	51 05       	cpc	r21, r1
 938:	08 f0       	brcs	.+2      	; 0x93c <USB_Device_ProcessControlRequest+0x48>
 93a:	13 c1       	rjmp	.+550    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
 93c:	fa 01       	movw	r30, r20
 93e:	e4 5b       	subi	r30, 0xB4	; 180
 940:	ff 4f       	sbci	r31, 0xFF	; 255
 942:	33 c3       	rjmp	.+1638   	; 0xfaa <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 944:	80 38       	cpi	r24, 0x80	; 128
 946:	81 f0       	breq	.+32     	; 0x968 <USB_Device_ProcessControlRequest+0x74>
 948:	82 38       	cpi	r24, 0x82	; 130
 94a:	09 f0       	breq	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0x5a>
 94c:	0a c1       	rjmp	.+532    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 94e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x4>
 952:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 954:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 958:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 95c:	85 fb       	bst	r24, 5
 95e:	88 27       	eor	r24, r24
 960:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 962:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 966:	06 c0       	rjmp	.+12     	; 0x974 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 968:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 96c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_Device_RemoteWakeupEnabled>
 970:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 972:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 974:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 978:	97 7f       	andi	r25, 0xF7	; 247
 97a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 97e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 982:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 986:	c5 c0       	rjmp	.+394    	; 0xb12 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 988:	28 2f       	mov	r18, r24
 98a:	2d 7f       	andi	r18, 0xFD	; 253
 98c:	09 f0       	breq	.+2      	; 0x990 <USB_Device_ProcessControlRequest+0x9c>
 98e:	e9 c0       	rjmp	.+466    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 990:	88 23       	and	r24, r24
 992:	19 f0       	breq	.+6      	; 0x99a <USB_Device_ProcessControlRequest+0xa6>
 994:	82 30       	cpi	r24, 0x02	; 2
 996:	61 f0       	breq	.+24     	; 0x9b0 <USB_Device_ProcessControlRequest+0xbc>
 998:	e4 c0       	rjmp	.+456    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 99a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 99e:	81 30       	cpi	r24, 0x01	; 1
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <USB_Device_ProcessControlRequest+0xb0>
 9a2:	df c0       	rjmp	.+446    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9a4:	93 30       	cpi	r25, 0x03	; 3
 9a6:	09 f0       	breq	.+2      	; 0x9aa <USB_Device_ProcessControlRequest+0xb6>
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Device_RemoteWakeupEnabled>
 9ae:	2b c0       	rjmp	.+86     	; 0xa06 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9b0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 9b4:	81 11       	cpse	r24, r1
 9b6:	27 c0       	rjmp	.+78     	; 0xa06 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9b8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x4>
 9bc:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9be:	09 f4       	brne	.+2      	; 0x9c2 <USB_Device_ProcessControlRequest+0xce>
 9c0:	d0 c0       	rjmp	.+416    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9c2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9c6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9ca:	20 ff       	sbrs	r18, 0
 9cc:	1c c0       	rjmp	.+56     	; 0xa06 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9ce:	93 30       	cpi	r25, 0x03	; 3
 9d0:	21 f4       	brne	.+8      	; 0x9da <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9d6:	80 62       	ori	r24, 0x20	; 32
 9d8:	14 c0       	rjmp	.+40     	; 0xa02 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9da:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9de:	90 61       	ori	r25, 0x10	; 16
 9e0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 9e4:	21 e0       	ldi	r18, 0x01	; 1
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	a9 01       	movw	r20, r18
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <USB_Device_ProcessControlRequest+0xfc>
 9ec:	44 0f       	add	r20, r20
 9ee:	55 1f       	adc	r21, r21
 9f0:	8a 95       	dec	r24
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <USB_Device_ProcessControlRequest+0xf8>
 9f4:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 9f8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9fc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a00:	88 60       	ori	r24, 0x08	; 8
 a02:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a06:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a0e:	87 7f       	andi	r24, 0xF7	; 247
 a10:	83 c0       	rjmp	.+262    	; 0xb18 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a12:	81 11       	cpse	r24, r1
 a14:	a6 c0       	rjmp	.+332    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a16:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 a1a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a1c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a1e:	f8 94       	cli
 a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a24:	87 7f       	andi	r24, 0xF7	; 247
 a26:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a2a:	b6 dc       	rcall	.-1684   	; 0x398 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 a30:	80 ff       	sbrs	r24, 0
 a32:	fc cf       	rjmp	.-8      	; 0xa2c <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a34:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 a38:	80 78       	andi	r24, 0x80	; 128
 a3a:	81 2b       	or	r24, r17

				UDADDR = Temp;
 a3c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 a40:	80 68       	ori	r24, 0x80	; 128
 a42:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a46:	11 11       	cpse	r17, r1
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <USB_Device_ProcessControlRequest+0x15a>
 a4a:	82 e0       	ldi	r24, 0x02	; 2
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <USB_Device_ProcessControlRequest+0x15c>
 a4e:	83 e0       	ldi	r24, 0x03	; 3
 a50:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a54:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 a56:	85 c0       	rjmp	.+266    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a58:	80 58       	subi	r24, 0x80	; 128
 a5a:	82 30       	cpi	r24, 0x02	; 2
 a5c:	08 f0       	brcs	.+2      	; 0xa60 <USB_Device_ProcessControlRequest+0x16c>
 a5e:	81 c0       	rjmp	.+258    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a60:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 a64:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <USB_ControlRequest+0x3>
 a68:	8c 3d       	cpi	r24, 0xDC	; 220
 a6a:	53 e0       	ldi	r21, 0x03	; 3
 a6c:	95 07       	cpc	r25, r21
 a6e:	71 f5       	brne	.+92     	; 0xacc <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a70:	83 e0       	ldi	r24, 0x03	; 3
 a72:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a74:	8a e2       	ldi	r24, 0x2A	; 42
 a76:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a78:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a7a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a7c:	de 01       	movw	r26, r28
 a7e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a80:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a82:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a84:	51 e2       	ldi	r21, 0x21	; 33
 a86:	e3 2f       	mov	r30, r19
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 a8e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a90:	20 ff       	sbrs	r18, 0
 a92:	03 c0       	rjmp	.+6      	; 0xa9a <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 a94:	e2 95       	swap	r30
 a96:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a98:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 a9a:	ef 70       	andi	r30, 0x0F	; 15
 a9c:	8e 2f       	mov	r24, r30
 a9e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 aa0:	ea 30       	cpi	r30, 0x0A	; 10
 aa2:	10 f0       	brcs	.+4      	; 0xaa8 <USB_Device_ProcessControlRequest+0x1b4>
 aa4:	c7 96       	adiw	r24, 0x37	; 55
 aa6:	01 c0       	rjmp	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0x1b6>
 aa8:	c0 96       	adiw	r24, 0x30	; 48
 aaa:	8d 93       	st	X+, r24
 aac:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aae:	2f 5f       	subi	r18, 0xFF	; 255
 ab0:	24 31       	cpi	r18, 0x14	; 20
 ab2:	49 f7       	brne	.-46     	; 0xa86 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 ab4:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aba:	87 7f       	andi	r24, 0xF7	; 247
 abc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 ac0:	6a e2       	ldi	r22, 0x2A	; 42
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	ce 01       	movw	r24, r28
 ac6:	01 96       	adiw	r24, 0x01	; 1
 ac8:	26 de       	rcall	.-948    	; 0x716 <Endpoint_Write_Control_Stream_LE>
 aca:	12 c0       	rjmp	.+36     	; 0xaf0 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 acc:	ae 01       	movw	r20, r28
 ace:	4f 5f       	subi	r20, 0xFF	; 255
 ad0:	5f 4f       	sbci	r21, 0xFF	; 255
 ad2:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <USB_ControlRequest+0x4>
 ad6:	eb db       	rcall	.-2090   	; 0x2ae <CALLBACK_USB_GetDescriptor>
 ad8:	bc 01       	movw	r22, r24
 ada:	89 2b       	or	r24, r25
 adc:	09 f4       	brne	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0x1ec>
 ade:	41 c0       	rjmp	.+130    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
 ae0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ae4:	97 7f       	andi	r25, 0xF7	; 247
 ae6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 aea:	89 81       	ldd	r24, Y+1	; 0x01
 aec:	9a 81       	ldd	r25, Y+2	; 0x02
 aee:	a9 de       	rcall	.-686    	; 0x842 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 af0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 af4:	8b 77       	andi	r24, 0x7B	; 123
 af6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 afa:	33 c0       	rjmp	.+102    	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 afc:	80 38       	cpi	r24, 0x80	; 128
 afe:	89 f5       	brne	.+98     	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b04:	87 7f       	andi	r24, 0xF7	; 247
 b06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b0a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b0e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b16:	8e 77       	andi	r24, 0x7E	; 126
 b18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b1c:	3d dc       	rcall	.-1926   	; 0x398 <Endpoint_ClearStatusStage>
 b1e:	21 c0       	rjmp	.+66     	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b20:	81 11       	cpse	r24, r1
 b22:	1f c0       	rjmp	.+62     	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b24:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 b28:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <USB_ControlRequest+0x3>
 b2c:	99 27       	eor	r25, r25
 b2e:	02 97       	sbiw	r24, 0x02	; 2
 b30:	c4 f4       	brge	.+48     	; 0xb62 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b36:	87 7f       	andi	r24, 0xF7	; 247
 b38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b3c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 b40:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 b44:	29 dc       	rcall	.-1966   	; 0x398 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b46:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_Device_ConfigurationNumber>
 b4a:	81 11       	cpse	r24, r1
 b4c:	06 c0       	rjmp	.+12     	; 0xb5a <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b4e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b52:	87 fd       	sbrc	r24, 7
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <USB_Device_ProcessControlRequest+0x266>
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x268>
 b5a:	84 e0       	ldi	r24, 0x04	; 4
 b5c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 b60:	58 db       	rcall	.-2384   	; 0x212 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b66:	83 ff       	sbrs	r24, 3
 b68:	0a c0       	rjmp	.+20     	; 0xb7e <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b6a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b6e:	80 62       	ori	r24, 0x20	; 32
 b70:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b78:	87 7f       	andi	r24, 0xF7	; 247
 b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 b7e:	aa 96       	adiw	r28, 0x2a	; 42
 b80:	0f b6       	in	r0, 0x3f	; 63
 b82:	f8 94       	cli
 b84:	de bf       	out	0x3e, r29	; 62
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	cd bf       	out	0x3d, r28	; 61
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	08 95       	ret

00000b94 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b94:	08 95       	ret

00000b96 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b96:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b98:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 b9c:	88 23       	and	r24, r24
 b9e:	59 f0       	breq	.+22     	; 0xbb6 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ba0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 ba4:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ba6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 baa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 bae:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 bb0:	a1 de       	rcall	.-702    	; 0x8f4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bb2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 bb6:	cf 91       	pop	r28
 bb8:	08 95       	ret

00000bba <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 bba:	6f 92       	push	r6
 bbc:	7f 92       	push	r7
 bbe:	8f 92       	push	r8
 bc0:	9f 92       	push	r9
 bc2:	af 92       	push	r10
 bc4:	bf 92       	push	r11
 bc6:	cf 92       	push	r12
 bc8:	df 92       	push	r13
 bca:	ef 92       	push	r14
 bcc:	ff 92       	push	r15
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	00 d0       	rcall	.+0      	; 0xbd8 <HID_Device_ProcessControlRequest+0x1e>
 bd8:	1f 92       	push	r1
 bda:	cd b7       	in	r28, 0x3d	; 61
 bdc:	de b7       	in	r29, 0x3e	; 62
 bde:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 be0:	ad b6       	in	r10, 0x3d	; 61
 be2:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 be4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 be8:	83 ff       	sbrs	r24, 3
 bea:	f7 c0       	rjmp	.+494    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 bec:	f7 01       	movw	r30, r14
 bee:	80 81       	ld	r24, Z
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <USB_ControlRequest+0x4>
 bf6:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <USB_ControlRequest+0x5>
 bfa:	28 17       	cp	r18, r24
 bfc:	39 07       	cpc	r19, r25
 bfe:	09 f0       	breq	.+2      	; 0xc02 <HID_Device_ProcessControlRequest+0x48>
 c00:	ec c0       	rjmp	.+472    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
	  return;

	switch (USB_ControlRequest.bRequest)
 c02:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x1>
 c06:	83 30       	cpi	r24, 0x03	; 3
 c08:	09 f4       	brne	.+2      	; 0xc0c <HID_Device_ProcessControlRequest+0x52>
 c0a:	96 c0       	rjmp	.+300    	; 0xd38 <HID_Device_ProcessControlRequest+0x17e>
 c0c:	30 f4       	brcc	.+12     	; 0xc1a <HID_Device_ProcessControlRequest+0x60>
 c0e:	81 30       	cpi	r24, 0x01	; 1
 c10:	71 f0       	breq	.+28     	; 0xc2e <HID_Device_ProcessControlRequest+0x74>
 c12:	82 30       	cpi	r24, 0x02	; 2
 c14:	09 f4       	brne	.+2      	; 0xc18 <HID_Device_ProcessControlRequest+0x5e>
 c16:	c9 c0       	rjmp	.+402    	; 0xdaa <HID_Device_ProcessControlRequest+0x1f0>
 c18:	e0 c0       	rjmp	.+448    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
 c1a:	8a 30       	cpi	r24, 0x0A	; 10
 c1c:	09 f4       	brne	.+2      	; 0xc20 <HID_Device_ProcessControlRequest+0x66>
 c1e:	ad c0       	rjmp	.+346    	; 0xd7a <HID_Device_ProcessControlRequest+0x1c0>
 c20:	8b 30       	cpi	r24, 0x0B	; 11
 c22:	09 f4       	brne	.+2      	; 0xc26 <HID_Device_ProcessControlRequest+0x6c>
 c24:	96 c0       	rjmp	.+300    	; 0xd52 <HID_Device_ProcessControlRequest+0x198>
 c26:	89 30       	cpi	r24, 0x09	; 9
 c28:	09 f0       	breq	.+2      	; 0xc2c <HID_Device_ProcessControlRequest+0x72>
 c2a:	d7 c0       	rjmp	.+430    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
 c2c:	48 c0       	rjmp	.+144    	; 0xcbe <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c2e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 c32:	81 3a       	cpi	r24, 0xA1	; 161
 c34:	09 f0       	breq	.+2      	; 0xc38 <HID_Device_ProcessControlRequest+0x7e>
 c36:	d1 c0       	rjmp	.+418    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
			{
 c38:	8d b6       	in	r8, 0x3d	; 61
 c3a:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
 c3c:	1a 82       	std	Y+2, r1	; 0x02
 c3e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c40:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 c44:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <USB_ControlRequest+0x3>
 c48:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 c4a:	f7 01       	movw	r30, r14
 c4c:	87 81       	ldd	r24, Z+7	; 0x07
 c4e:	48 2f       	mov	r20, r24
 c50:	50 e0       	ldi	r21, 0x00	; 0
 c52:	8d b7       	in	r24, 0x3d	; 61
 c54:	9e b7       	in	r25, 0x3e	; 62
 c56:	84 1b       	sub	r24, r20
 c58:	95 0b       	sbc	r25, r21
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	9e bf       	out	0x3e, r25	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	8d bf       	out	0x3d, r24	; 61
 c64:	ed b7       	in	r30, 0x3d	; 61
 c66:	fe b7       	in	r31, 0x3e	; 62
 c68:	31 96       	adiw	r30, 0x01	; 1
 c6a:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	70 e0       	ldi	r23, 0x00	; 0
 c70:	cf 01       	movw	r24, r30
 c72:	ba d1       	rcall	.+884    	; 0xfe8 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 c74:	4f ef       	ldi	r20, 0xFF	; 255
 c76:	41 0f       	add	r20, r17
 c78:	8e 01       	movw	r16, r28
 c7a:	0f 5f       	subi	r16, 0xFF	; 255
 c7c:	1f 4f       	sbci	r17, 0xFF	; 255
 c7e:	96 01       	movw	r18, r12
 c80:	be 01       	movw	r22, r28
 c82:	6d 5f       	subi	r22, 0xFD	; 253
 c84:	7f 4f       	sbci	r23, 0xFF	; 255
 c86:	c7 01       	movw	r24, r14
 c88:	e1 da       	rcall	.-2622   	; 0x24c <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 c8a:	f7 01       	movw	r30, r14
 c8c:	85 81       	ldd	r24, Z+5	; 0x05
 c8e:	96 81       	ldd	r25, Z+6	; 0x06
 c90:	00 97       	sbiw	r24, 0x00	; 0
 c92:	21 f0       	breq	.+8      	; 0xc9c <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 c94:	47 81       	ldd	r20, Z+7	; 0x07
 c96:	50 e0       	ldi	r21, 0x00	; 0
 c98:	b6 01       	movw	r22, r12
 c9a:	9d d1       	rcall	.+826    	; 0xfd6 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c9c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ca0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ca4:	87 7f       	andi	r24, 0xF7	; 247
 ca6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 caa:	69 81       	ldd	r22, Y+1	; 0x01
 cac:	7a 81       	ldd	r23, Y+2	; 0x02
 cae:	c6 01       	movw	r24, r12
 cb0:	32 dd       	rcall	.-1436   	; 0x716 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cb6:	8b 77       	andi	r24, 0x7B	; 123
 cb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cbc:	37 c0       	rjmp	.+110    	; 0xd2c <HID_Device_ProcessControlRequest+0x172>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cbe:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 cc2:	81 32       	cpi	r24, 0x21	; 33
 cc4:	09 f0       	breq	.+2      	; 0xcc8 <HID_Device_ProcessControlRequest+0x10e>
 cc6:	89 c0       	rjmp	.+274    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
			{
 cc8:	8d b6       	in	r8, 0x3d	; 61
 cca:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
 ccc:	00 91 1c 01 	lds	r16, 0x011C	; 0x80011c <USB_ControlRequest+0x6>
 cd0:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 cd4:	70 90 18 01 	lds	r7, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 cd8:	60 90 19 01 	lds	r6, 0x0119	; 0x800119 <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 cdc:	8d b7       	in	r24, 0x3d	; 61
 cde:	9e b7       	in	r25, 0x3e	; 62
 ce0:	80 1b       	sub	r24, r16
 ce2:	91 0b       	sbc	r25, r17
 ce4:	0f b6       	in	r0, 0x3f	; 63
 ce6:	f8 94       	cli
 ce8:	9e bf       	out	0x3e, r25	; 62
 cea:	0f be       	out	0x3f, r0	; 63
 cec:	8d bf       	out	0x3d, r24	; 61
 cee:	ed b7       	in	r30, 0x3d	; 61
 cf0:	fe b7       	in	r31, 0x3e	; 62
 cf2:	31 96       	adiw	r30, 0x01	; 1
 cf4:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cfa:	87 7f       	andi	r24, 0xF7	; 247
 cfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 d00:	b8 01       	movw	r22, r16
 d02:	cf 01       	movw	r24, r30
 d04:	60 dd       	rcall	.-1344   	; 0x7c6 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d0a:	8e 77       	andi	r24, 0x7E	; 126
 d0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 d10:	21 e0       	ldi	r18, 0x01	; 1
 d12:	71 10       	cpse	r7, r1
 d14:	01 c0       	rjmp	.+2      	; 0xd18 <HID_Device_ProcessControlRequest+0x15e>
 d16:	20 e0       	ldi	r18, 0x00	; 0
 d18:	30 e0       	ldi	r19, 0x00	; 0
 d1a:	02 1b       	sub	r16, r18
 d1c:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 d1e:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 d20:	3d 1d       	adc	r19, r13
 d22:	4f ef       	ldi	r20, 0xFF	; 255
 d24:	46 0d       	add	r20, r6
 d26:	67 2d       	mov	r22, r7
 d28:	c7 01       	movw	r24, r14
 d2a:	c0 da       	rcall	.-2688   	; 0x2ac <CALLBACK_HID_Device_ProcessHIDReport>
 d2c:	0f b6       	in	r0, 0x3f	; 63
 d2e:	f8 94       	cli
 d30:	9e be       	out	0x3e, r9	; 62
 d32:	0f be       	out	0x3f, r0	; 63
 d34:	8d be       	out	0x3d, r8	; 61
 d36:	51 c0       	rjmp	.+162    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d38:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 d3c:	81 3a       	cpi	r24, 0xA1	; 161
 d3e:	09 f0       	breq	.+2      	; 0xd42 <HID_Device_ProcessControlRequest+0x188>
 d40:	4c c0       	rjmp	.+152    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d46:	87 7f       	andi	r24, 0xF7	; 247
 d48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 d4c:	f7 01       	movw	r30, r14
 d4e:	80 85       	ldd	r24, Z+8	; 0x08
 d50:	3c c0       	rjmp	.+120    	; 0xdca <HID_Device_ProcessControlRequest+0x210>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d52:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 d56:	81 32       	cpi	r24, 0x21	; 33
 d58:	09 f0       	breq	.+2      	; 0xd5c <HID_Device_ProcessControlRequest+0x1a2>
 d5a:	3f c0       	rjmp	.+126    	; 0xdda <HID_Device_ProcessControlRequest+0x220>
 d5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d60:	87 7f       	andi	r24, 0xF7	; 247
 d62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d66:	18 db       	rcall	.-2512   	; 0x398 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 d68:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 d6c:	81 e0       	ldi	r24, 0x01	; 1
 d6e:	91 11       	cpse	r25, r1
 d70:	01 c0       	rjmp	.+2      	; 0xd74 <HID_Device_ProcessControlRequest+0x1ba>
 d72:	80 e0       	ldi	r24, 0x00	; 0
 d74:	f7 01       	movw	r30, r14
 d76:	80 87       	std	Z+8, r24	; 0x08
 d78:	30 c0       	rjmp	.+96     	; 0xdda <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d7a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 d7e:	81 32       	cpi	r24, 0x21	; 33
 d80:	61 f5       	brne	.+88     	; 0xdda <HID_Device_ProcessControlRequest+0x220>
 d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d86:	87 7f       	andi	r24, 0xF7	; 247
 d88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d8c:	05 db       	rcall	.-2550   	; 0x398 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 d8e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest+0x2>
 d92:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <USB_ControlRequest+0x3>
 d96:	88 27       	eor	r24, r24
 d98:	36 e0       	ldi	r19, 0x06	; 6
 d9a:	96 95       	lsr	r25
 d9c:	87 95       	ror	r24
 d9e:	3a 95       	dec	r19
 da0:	e1 f7       	brne	.-8      	; 0xd9a <HID_Device_ProcessControlRequest+0x1e0>
 da2:	f7 01       	movw	r30, r14
 da4:	92 87       	std	Z+10, r25	; 0x0a
 da6:	81 87       	std	Z+9, r24	; 0x09
 da8:	18 c0       	rjmp	.+48     	; 0xdda <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 daa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_ControlRequest>
 dae:	81 3a       	cpi	r24, 0xA1	; 161
 db0:	a1 f4       	brne	.+40     	; 0xdda <HID_Device_ProcessControlRequest+0x220>
 db2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 db6:	87 7f       	andi	r24, 0xF7	; 247
 db8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 dbc:	f7 01       	movw	r30, r14
 dbe:	81 85       	ldd	r24, Z+9	; 0x09
 dc0:	92 85       	ldd	r25, Z+10	; 0x0a
 dc2:	96 95       	lsr	r25
 dc4:	87 95       	ror	r24
 dc6:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 dc8:	87 95       	ror	r24
 dca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dd2:	8e 77       	andi	r24, 0x7E	; 126
 dd4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 dd8:	df da       	rcall	.-2626   	; 0x398 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 dda:	0f b6       	in	r0, 0x3f	; 63
 ddc:	f8 94       	cli
 dde:	be be       	out	0x3e, r11	; 62
 de0:	0f be       	out	0x3f, r0	; 63
 de2:	ad be       	out	0x3d, r10	; 61
 de4:	0f 90       	pop	r0
 de6:	0f 90       	pop	r0
 de8:	0f 90       	pop	r0
 dea:	df 91       	pop	r29
 dec:	cf 91       	pop	r28
 dee:	1f 91       	pop	r17
 df0:	0f 91       	pop	r16
 df2:	ff 90       	pop	r15
 df4:	ef 90       	pop	r14
 df6:	df 90       	pop	r13
 df8:	cf 90       	pop	r12
 dfa:	bf 90       	pop	r11
 dfc:	af 90       	pop	r10
 dfe:	9f 90       	pop	r9
 e00:	8f 90       	pop	r8
 e02:	7f 90       	pop	r7
 e04:	6f 90       	pop	r6
 e06:	08 95       	ret

00000e08 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 e08:	cf 93       	push	r28
 e0a:	df 93       	push	r29
 e0c:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 e0e:	dc 01       	movw	r26, r24
 e10:	18 96       	adiw	r26, 0x08	; 8
 e12:	85 e0       	ldi	r24, 0x05	; 5
 e14:	ed 01       	movw	r28, r26
 e16:	19 92       	st	Y+, r1
 e18:	8a 95       	dec	r24
 e1a:	e9 f7       	brne	.-6      	; 0xe16 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 e1c:	81 e0       	ldi	r24, 0x01	; 1
 e1e:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
 e20:	84 ef       	ldi	r24, 0xF4	; 244
 e22:	91 e0       	ldi	r25, 0x01	; 1
 e24:	92 87       	std	Z+10, r25	; 0x0a
 e26:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 e28:	84 81       	ldd	r24, Z+4	; 0x04
 e2a:	81 11       	cpse	r24, r1
 e2c:	02 c0       	rjmp	.+4      	; 0xe32 <HID_Device_ConfigureEndpoints+0x2a>
 e2e:	40 e0       	ldi	r20, 0x00	; 0
 e30:	01 c0       	rjmp	.+2      	; 0xe34 <HID_Device_ConfigureEndpoints+0x2c>
 e32:	44 e0       	ldi	r20, 0x04	; 4
 e34:	62 81       	ldd	r22, Z+2	; 0x02
 e36:	73 81       	ldd	r23, Z+3	; 0x03
 e38:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 e3a:	28 e0       	ldi	r18, 0x08	; 8
 e3c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 e3e:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e40:	26 17       	cp	r18, r22
 e42:	37 07       	cpc	r19, r23
 e44:	20 f4       	brcc	.+8      	; 0xe4e <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
 e46:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
 e48:	22 0f       	add	r18, r18
 e4a:	33 1f       	adc	r19, r19
 e4c:	f9 cf       	rjmp	.-14     	; 0xe40 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 e4e:	42 60       	ori	r20, 0x02	; 2
 e50:	92 95       	swap	r25
 e52:	90 7f       	andi	r25, 0xF0	; 240
 e54:	49 2b       	or	r20, r25
 e56:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
 e58:	df 91       	pop	r29
 e5a:	cf 91       	pop	r28
 e5c:	69 ca       	rjmp	.-2862   	; 0x330 <Endpoint_ConfigureEndpoint_Prv>

00000e5e <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 e5e:	5f 92       	push	r5
 e60:	6f 92       	push	r6
 e62:	7f 92       	push	r7
 e64:	8f 92       	push	r8
 e66:	9f 92       	push	r9
 e68:	af 92       	push	r10
 e6a:	bf 92       	push	r11
 e6c:	cf 92       	push	r12
 e6e:	df 92       	push	r13
 e70:	ef 92       	push	r14
 e72:	ff 92       	push	r15
 e74:	0f 93       	push	r16
 e76:	1f 93       	push	r17
 e78:	cf 93       	push	r28
 e7a:	df 93       	push	r29
 e7c:	00 d0       	rcall	.+0      	; 0xe7e <HID_Device_USBTask+0x20>
 e7e:	1f 92       	push	r1
 e80:	cd b7       	in	r28, 0x3d	; 61
 e82:	de b7       	in	r29, 0x3e	; 62
 e84:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
 e86:	ad b6       	in	r10, 0x3d	; 61
 e88:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e8a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_DeviceState>
 e8e:	84 30       	cpi	r24, 0x04	; 4
 e90:	09 f0       	breq	.+2      	; 0xe94 <HID_Device_USBTask+0x36>
 e92:	73 c0       	rjmp	.+230    	; 0xf7a <HID_Device_USBTask+0x11c>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e94:	f7 01       	movw	r30, r14
 e96:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e98:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
 ea0:	85 ff       	sbrs	r24, 5
 ea2:	6b c0       	rjmp	.+214    	; 0xf7a <HID_Device_USBTask+0x11c>
	{
 ea4:	8d b6       	in	r8, 0x3d	; 61
 ea6:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 ea8:	47 81       	ldd	r20, Z+7	; 0x07
 eaa:	50 e0       	ldi	r21, 0x00	; 0
 eac:	8d b7       	in	r24, 0x3d	; 61
 eae:	9e b7       	in	r25, 0x3e	; 62
 eb0:	84 1b       	sub	r24, r20
 eb2:	95 0b       	sbc	r25, r21
 eb4:	0f b6       	in	r0, 0x3f	; 63
 eb6:	f8 94       	cli
 eb8:	9e bf       	out	0x3e, r25	; 62
 eba:	0f be       	out	0x3f, r0	; 63
 ebc:	8d bf       	out	0x3d, r24	; 61
 ebe:	ed b7       	in	r30, 0x3d	; 61
 ec0:	fe b7       	in	r31, 0x3e	; 62
 ec2:	31 96       	adiw	r30, 0x01	; 1
 ec4:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 ec6:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 ec8:	1a 82       	std	Y+2, r1	; 0x02
 eca:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 ecc:	60 e0       	ldi	r22, 0x00	; 0
 ece:	70 e0       	ldi	r23, 0x00	; 0
 ed0:	cf 01       	movw	r24, r30
 ed2:	8a d0       	rcall	.+276    	; 0xfe8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 ed4:	8e 01       	movw	r16, r28
 ed6:	0f 5f       	subi	r16, 0xFF	; 255
 ed8:	1f 4f       	sbci	r17, 0xFF	; 255
 eda:	96 01       	movw	r18, r12
 edc:	40 e0       	ldi	r20, 0x00	; 0
 ede:	be 01       	movw	r22, r28
 ee0:	6d 5f       	subi	r22, 0xFD	; 253
 ee2:	7f 4f       	sbci	r23, 0xFF	; 255
 ee4:	c7 01       	movw	r24, r14
 ee6:	b2 d9       	rcall	.-3228   	; 0x24c <CALLBACK_HID_Device_CreateHIDReport>
 ee8:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 eea:	f7 01       	movw	r30, r14
 eec:	81 85       	ldd	r24, Z+9	; 0x09
 eee:	92 85       	ldd	r25, Z+10	; 0x0a
 ef0:	89 2b       	or	r24, r25
 ef2:	29 f0       	breq	.+10     	; 0xefe <HID_Device_USBTask+0xa0>
 ef4:	11 e0       	ldi	r17, 0x01	; 1
 ef6:	83 85       	ldd	r24, Z+11	; 0x0b
 ef8:	94 85       	ldd	r25, Z+12	; 0x0c
 efa:	89 2b       	or	r24, r25
 efc:	09 f0       	breq	.+2      	; 0xf00 <HID_Device_USBTask+0xa2>
 efe:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 f00:	f7 01       	movw	r30, r14
 f02:	65 80       	ldd	r6, Z+5	; 0x05
 f04:	76 80       	ldd	r7, Z+6	; 0x06
 f06:	61 14       	cp	r6, r1
 f08:	71 04       	cpc	r7, r1
 f0a:	81 f0       	breq	.+32     	; 0xf2c <HID_Device_USBTask+0xce>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 f0c:	49 81       	ldd	r20, Y+1	; 0x01
 f0e:	5a 81       	ldd	r21, Y+2	; 0x02
 f10:	b3 01       	movw	r22, r6
 f12:	c6 01       	movw	r24, r12
 f14:	53 d0       	rcall	.+166    	; 0xfbc <memcmp>
 f16:	01 e0       	ldi	r16, 0x01	; 1
 f18:	89 2b       	or	r24, r25
 f1a:	09 f4       	brne	.+2      	; 0xf1e <HID_Device_USBTask+0xc0>
 f1c:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 f1e:	f7 01       	movw	r30, r14
 f20:	47 81       	ldd	r20, Z+7	; 0x07
 f22:	50 e0       	ldi	r21, 0x00	; 0
 f24:	b6 01       	movw	r22, r12
 f26:	c3 01       	movw	r24, r6
 f28:	56 d0       	rcall	.+172    	; 0xfd6 <memcpy>
 f2a:	01 c0       	rjmp	.+2      	; 0xf2e <HID_Device_USBTask+0xd0>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 f2c:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 f2e:	89 81       	ldd	r24, Y+1	; 0x01
 f30:	9a 81       	ldd	r25, Y+2	; 0x02
 f32:	89 2b       	or	r24, r25
 f34:	e9 f0       	breq	.+58     	; 0xf70 <HID_Device_USBTask+0x112>
 f36:	51 10       	cpse	r5, r1
 f38:	04 c0       	rjmp	.+8      	; 0xf42 <HID_Device_USBTask+0xe4>
 f3a:	01 11       	cpse	r16, r1
 f3c:	02 c0       	rjmp	.+4      	; 0xf42 <HID_Device_USBTask+0xe4>
 f3e:	10 ff       	sbrs	r17, 0
 f40:	17 c0       	rjmp	.+46     	; 0xf70 <HID_Device_USBTask+0x112>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 f42:	f7 01       	movw	r30, r14
 f44:	81 85       	ldd	r24, Z+9	; 0x09
 f46:	92 85       	ldd	r25, Z+10	; 0x0a
 f48:	94 87       	std	Z+12, r25	; 0x0c
 f4a:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 f4c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f4e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
 f52:	8b 81       	ldd	r24, Y+3	; 0x03
 f54:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 f56:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 f5a:	69 81       	ldd	r22, Y+1	; 0x01
 f5c:	7a 81       	ldd	r23, Y+2	; 0x02
 f5e:	40 e0       	ldi	r20, 0x00	; 0
 f60:	50 e0       	ldi	r21, 0x00	; 0
 f62:	c6 01       	movw	r24, r12
 f64:	8e db       	rcall	.-2276   	; 0x682 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 f6a:	8e 77       	andi	r24, 0x7E	; 126
 f6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 f70:	0f b6       	in	r0, 0x3f	; 63
 f72:	f8 94       	cli
 f74:	9e be       	out	0x3e, r9	; 62
 f76:	0f be       	out	0x3f, r0	; 63
 f78:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
 f7a:	0f b6       	in	r0, 0x3f	; 63
 f7c:	f8 94       	cli
 f7e:	be be       	out	0x3e, r11	; 62
 f80:	0f be       	out	0x3f, r0	; 63
 f82:	ad be       	out	0x3d, r10	; 61
 f84:	0f 90       	pop	r0
 f86:	0f 90       	pop	r0
 f88:	0f 90       	pop	r0
 f8a:	df 91       	pop	r29
 f8c:	cf 91       	pop	r28
 f8e:	1f 91       	pop	r17
 f90:	0f 91       	pop	r16
 f92:	ff 90       	pop	r15
 f94:	ef 90       	pop	r14
 f96:	df 90       	pop	r13
 f98:	cf 90       	pop	r12
 f9a:	bf 90       	pop	r11
 f9c:	af 90       	pop	r10
 f9e:	9f 90       	pop	r9
 fa0:	8f 90       	pop	r8
 fa2:	7f 90       	pop	r7
 fa4:	6f 90       	pop	r6
 fa6:	5f 90       	pop	r5
 fa8:	08 95       	ret

00000faa <__tablejump2__>:
 faa:	ee 0f       	add	r30, r30
 fac:	ff 1f       	adc	r31, r31
 fae:	00 24       	eor	r0, r0
 fb0:	00 1c       	adc	r0, r0
 fb2:	0b be       	out	0x3b, r0	; 59
 fb4:	07 90       	elpm	r0, Z+
 fb6:	f6 91       	elpm	r31, Z
 fb8:	e0 2d       	mov	r30, r0
 fba:	09 94       	ijmp

00000fbc <memcmp>:
 fbc:	fb 01       	movw	r30, r22
 fbe:	dc 01       	movw	r26, r24
 fc0:	04 c0       	rjmp	.+8      	; 0xfca <memcmp+0xe>
 fc2:	8d 91       	ld	r24, X+
 fc4:	01 90       	ld	r0, Z+
 fc6:	80 19       	sub	r24, r0
 fc8:	21 f4       	brne	.+8      	; 0xfd2 <memcmp+0x16>
 fca:	41 50       	subi	r20, 0x01	; 1
 fcc:	50 40       	sbci	r21, 0x00	; 0
 fce:	c8 f7       	brcc	.-14     	; 0xfc2 <memcmp+0x6>
 fd0:	88 1b       	sub	r24, r24
 fd2:	99 0b       	sbc	r25, r25
 fd4:	08 95       	ret

00000fd6 <memcpy>:
 fd6:	fb 01       	movw	r30, r22
 fd8:	dc 01       	movw	r26, r24
 fda:	02 c0       	rjmp	.+4      	; 0xfe0 <memcpy+0xa>
 fdc:	01 90       	ld	r0, Z+
 fde:	0d 92       	st	X+, r0
 fe0:	41 50       	subi	r20, 0x01	; 1
 fe2:	50 40       	sbci	r21, 0x00	; 0
 fe4:	d8 f7       	brcc	.-10     	; 0xfdc <memcpy+0x6>
 fe6:	08 95       	ret

00000fe8 <memset>:
 fe8:	dc 01       	movw	r26, r24
 fea:	01 c0       	rjmp	.+2      	; 0xfee <memset+0x6>
 fec:	6d 93       	st	X+, r22
 fee:	41 50       	subi	r20, 0x01	; 1
 ff0:	50 40       	sbci	r21, 0x00	; 0
 ff2:	e0 f7       	brcc	.-8      	; 0xfec <memset+0x4>
 ff4:	08 95       	ret

00000ff6 <_exit>:
 ff6:	f8 94       	cli

00000ff8 <__stop_program>:
 ff8:	ff cf       	rjmp	.-2      	; 0xff8 <__stop_program>
