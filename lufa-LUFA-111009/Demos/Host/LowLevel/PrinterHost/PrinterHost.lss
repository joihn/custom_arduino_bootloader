
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001ae6  00001b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080013a  0080013a  00001bb4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f03  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023b1  00000000  00000000  00007e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003108  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c8  00000000  00000000  0000d2f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002456  00000000  00000000  0000dcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036df  00000000  00000000  00010112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  000137f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bc c1       	rjmp	.+888    	; 0x37a <__ctors_end>
       2:	00 00       	nop
       4:	d8 c1       	rjmp	.+944    	; 0x3b6 <__bad_interrupt>
       6:	00 00       	nop
       8:	d6 c1       	rjmp	.+940    	; 0x3b6 <__bad_interrupt>
       a:	00 00       	nop
       c:	d4 c1       	rjmp	.+936    	; 0x3b6 <__bad_interrupt>
       e:	00 00       	nop
      10:	d2 c1       	rjmp	.+932    	; 0x3b6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d0 c1       	rjmp	.+928    	; 0x3b6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ce c1       	rjmp	.+924    	; 0x3b6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cc c1       	rjmp	.+920    	; 0x3b6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ca c1       	rjmp	.+916    	; 0x3b6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c8 c1       	rjmp	.+912    	; 0x3b6 <__bad_interrupt>
      26:	00 00       	nop
      28:	29 c7       	rjmp	.+3666   	; 0xe7c <__vector_10>
      2a:	00 00       	nop
      2c:	c4 c1       	rjmp	.+904    	; 0x3b6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c2 c1       	rjmp	.+900    	; 0x3b6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c1       	rjmp	.+896    	; 0x3b6 <__bad_interrupt>
      36:	00 00       	nop
      38:	be c1       	rjmp	.+892    	; 0x3b6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bc c1       	rjmp	.+888    	; 0x3b6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ba c1       	rjmp	.+884    	; 0x3b6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b8 c1       	rjmp	.+880    	; 0x3b6 <__bad_interrupt>
      46:	00 00       	nop
      48:	b6 c1       	rjmp	.+876    	; 0x3b6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b4 c1       	rjmp	.+872    	; 0x3b6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b2 c1       	rjmp	.+868    	; 0x3b6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b0 c1       	rjmp	.+864    	; 0x3b6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ae c1       	rjmp	.+860    	; 0x3b6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ac c1       	rjmp	.+856    	; 0x3b6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	aa c1       	rjmp	.+852    	; 0x3b6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a8 c1       	rjmp	.+848    	; 0x3b6 <__bad_interrupt>
      66:	00 00       	nop
      68:	a6 c1       	rjmp	.+844    	; 0x3b6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a4 c1       	rjmp	.+840    	; 0x3b6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a2 c1       	rjmp	.+836    	; 0x3b6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a0 c1       	rjmp	.+832    	; 0x3b6 <__bad_interrupt>
      76:	00 00       	nop
      78:	9e c1       	rjmp	.+828    	; 0x3b6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9c c1       	rjmp	.+824    	; 0x3b6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9a c1       	rjmp	.+820    	; 0x3b6 <__bad_interrupt>
      82:	00 00       	nop
      84:	98 c1       	rjmp	.+816    	; 0x3b6 <__bad_interrupt>
      86:	00 00       	nop
      88:	96 c1       	rjmp	.+812    	; 0x3b6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	94 c1       	rjmp	.+808    	; 0x3b6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	92 c1       	rjmp	.+804    	; 0x3b6 <__bad_interrupt>
      92:	00 00       	nop
      94:	90 c1       	rjmp	.+800    	; 0x3b6 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 05       	cpc	r18, r5
      9a:	16 06       	cpc	r1, r22
      9c:	43 05       	cpc	r20, r3
      9e:	4d 05       	cpc	r20, r13
      a0:	78 05       	cpc	r23, r8
      a2:	a0 05       	cpc	r26, r0
      a4:	ab 05       	cpc	r26, r11
      a6:	bc 05       	cpc	r27, r12
      a8:	d8 05       	cpc	r29, r8
      aa:	ff 05       	cpc	r31, r15

000000ac <__trampolines_end>:
      ac:	54 65       	ori	r21, 0x54	; 84
      ae:	73 74       	andi	r23, 0x43	; 67
      b0:	20 50       	subi	r18, 0x00	; 0
      b2:	61 67       	ori	r22, 0x71	; 113
      b4:	65 20       	and	r6, r5
      b6:	53 65       	ori	r21, 0x53	; 83
      b8:	6e 74       	andi	r22, 0x4E	; 78
      ba:	2e 0d       	add	r18, r14
      bc:	0a 00       	.word	0x000a	; ????

000000be <__c.4553>:
      be:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 6e 64 69     .[31mError Sendi
      ce:	6e 67 20 54 65 73 74 20 50 61 67 65 2e 0d 0a 20     ng Test Page... 
      de:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
      ee:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000000f7 <__c.4551>:
      f7:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     107:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     117:	0a 00                                               ..

00000119 <__c.4543>:
     119:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     129:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     139:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     149:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     159:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     169:	1b 5b 33 37 6d 00                                   .[37m.

0000016f <__c.4536>:
     16f:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     17f:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     18f:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000019e <__c.4531>:
     19e:	50 72 69 6e 74 65 72 20 45 6e 75 6d 65 72 61 74     Printer Enumerat
     1ae:	65 64 2e 0d 0a 00                                   ed....

000001b4 <__c.4529>:
     1b4:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 49     Printer Device I
     1c4:	44 3a 20 25 73 0d 0a 00                             D: %s...

000001cc <__c.4527>:
     1cc:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1dc:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 20 49     or (Get Device I
     1ec:	44 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     D)... -- Error C
     1fc:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

0000020b <__c.4524>:
     20b:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     21b:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

00000225 <__c.4522>:
     225:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     235:	6f 72 20 28 53 65 74 20 49 6e 74 65 72 66 61 63     or (Set Interfac
     245:	65 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     e)... -- Error C
     255:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

00000264 <__c.4520>:
     264:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     274:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     284:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     294:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2a4:	37 6d 00                                            7m.

000002a7 <__c.4518>:
     2a7:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2b7:	25 64 0d 0a 00                                      %d...

000002bc <__c.4516>:
     2bc:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     2cc:	69 63 65 2e 0d 0a 00                                ice....

000002d3 <__c.4514>:
     2d3:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2e3:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2f3:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002fd <__c.4511>:
     2fd:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     30d:	61 74 61 2e 0d 0a 00                                ata....

00000314 <__c.4506>:
     314:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     324:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     334:	00                                                  .

00000335 <__c.4501>:
     335:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     345:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000352 <__c.4492>:
     352:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     362:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     372:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

0000037a <__ctors_end>:
     37a:	11 24       	eor	r1, r1
     37c:	1f be       	out	0x3f, r1	; 63
     37e:	cf ef       	ldi	r28, 0xFF	; 255
     380:	d0 e2       	ldi	r29, 0x20	; 32
     382:	de bf       	out	0x3e, r29	; 62
     384:	cd bf       	out	0x3d, r28	; 61

00000386 <__do_copy_data>:
     386:	11 e0       	ldi	r17, 0x01	; 1
     388:	a0 e0       	ldi	r26, 0x00	; 0
     38a:	b1 e0       	ldi	r27, 0x01	; 1
     38c:	e6 ee       	ldi	r30, 0xE6	; 230
     38e:	fa e1       	ldi	r31, 0x1A	; 26
     390:	00 e0       	ldi	r16, 0x00	; 0
     392:	0b bf       	out	0x3b, r16	; 59
     394:	02 c0       	rjmp	.+4      	; 0x39a <__do_copy_data+0x14>
     396:	07 90       	elpm	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	aa 33       	cpi	r26, 0x3A	; 58
     39c:	b1 07       	cpc	r27, r17
     39e:	d9 f7       	brne	.-10     	; 0x396 <__do_copy_data+0x10>

000003a0 <__do_clear_bss>:
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	aa e3       	ldi	r26, 0x3A	; 58
     3a4:	b1 e0       	ldi	r27, 0x01	; 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <.do_clear_bss_start>

000003a8 <.do_clear_bss_loop>:
     3a8:	1d 92       	st	X+, r1

000003aa <.do_clear_bss_start>:
     3aa:	ae 35       	cpi	r26, 0x5E	; 94
     3ac:	b2 07       	cpc	r27, r18
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <.do_clear_bss_loop>
     3b0:	55 d1       	rcall	.+682    	; 0x65c <main>
     3b2:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <_exit>

000003b6 <__bad_interrupt>:
     3b6:	24 ce       	rjmp	.-952    	; 0x0 <__vectors>

000003b8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3b8:	9b b1       	in	r25, 0x0b	; 11
     3ba:	9f 70       	andi	r25, 0x0F	; 15
     3bc:	89 2b       	or	r24, r25
     3be:	8b b9       	out	0x0b, r24	; 11
     3c0:	08 95       	ret

000003c2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3c2:	84 b7       	in	r24, 0x34	; 52
     3c4:	87 7f       	andi	r24, 0xF7	; 247
     3c6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	a8 95       	wdr
     3ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3d2:	88 61       	ori	r24, 0x18	; 24
     3d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3dc:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 e8       	ldi	r24, 0x80	; 128
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3ee:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3f0:	83 e3       	ldi	r24, 0x33	; 51
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     3f8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3fc:	86 e0       	ldi	r24, 0x06	; 6
     3fe:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     402:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     406:	88 e1       	ldi	r24, 0x18	; 24
     408:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     40c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     40e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     410:	8a b1       	in	r24, 0x0a	; 10
     412:	80 6f       	ori	r24, 0xF0	; 240
     414:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     416:	8b b1       	in	r24, 0x0b	; 11
     418:	8f 70       	andi	r24, 0x0F	; 15
     41a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     41c:	19 d5       	rcall	.+2610   	; 0xe50 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     41e:	a8 e5       	ldi	r26, 0x58	; 88
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	ea e4       	ldi	r30, 0x4A	; 74
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	11 96       	adiw	r26, 0x01	; 1
     428:	fc 93       	st	X, r31
     42a:	ee 93       	st	-X, r30
					stdout = Stream;
     42c:	13 96       	adiw	r26, 0x03	; 3
     42e:	fc 93       	st	X, r31
     430:	ee 93       	st	-X, r30
     432:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     434:	8e e0       	ldi	r24, 0x0E	; 14
     436:	df 01       	movw	r26, r30
     438:	1d 92       	st	X+, r1
     43a:	8a 95       	dec	r24
     43c:	e9 f7       	brne	.-6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	83 83       	std	Z+3, r24	; 0x03
     442:	8e e2       	ldi	r24, 0x2E	; 46
     444:	9a e0       	ldi	r25, 0x0A	; 10
     446:	91 87       	std	Z+9, r25	; 0x09
     448:	80 87       	std	Z+8, r24	; 0x08
     44a:	87 e3       	ldi	r24, 0x37	; 55
     44c:	9a e0       	ldi	r25, 0x0A	; 10
     44e:	93 87       	std	Z+11, r25	; 0x0b
     450:	82 87       	std	Z+10, r24	; 0x0a
     452:	08 95       	ret

00000454 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     454:	85 e3       	ldi	r24, 0x35	; 53
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	0e 94 8a 0a 	call	0x1514	; 0x1514 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	ac cf       	rjmp	.-168    	; 0x3b8 <LEDs_SetAllLEDs>

00000460 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     460:	84 e1       	ldi	r24, 0x14	; 20
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 8a 0a 	call	0x1514	; 0x1514 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     468:	80 e1       	ldi	r24, 0x10	; 16
     46a:	a6 cf       	rjmp	.-180    	; 0x3b8 <LEDs_SetAllLEDs>

0000046c <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	cc 52       	subi	r28, 0x2C	; 44
     47a:	d1 40       	sbci	r29, 0x01	; 1
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     486:	8d ef       	ldi	r24, 0xFD	; 253
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     48e:	11 d1       	rcall	.+546    	; 0x6b2 <ProcessConfigurationDescriptor>
     490:	18 2f       	mov	r17, r24
     492:	88 23       	and	r24, r24
     494:	99 f0       	breq	.+38     	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
	{
		if (ErrorCode == ControlError)
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	19 f4       	brne	.+6      	; 0x4a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     49a:	83 ed       	ldi	r24, 0xD3	; 211
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4a0:	8c eb       	ldi	r24, 0xBC	; 188
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n"), ErrorCode);
     4a8:	1f 92       	push	r1
     4aa:	1f 93       	push	r17
     4ac:	87 ea       	ldi	r24, 0xA7	; 167
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b8:	80 e9       	ldi	r24, 0x90	; 144
     4ba:	3b c0       	rjmp	.+118    	; 0x532 <EVENT_USB_Host_DeviceEnumerationComplete+0xc6>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	86 d7       	rcall	.+3852   	; 0x13cc <USB_Host_SetDeviceConfiguration>
     4c0:	88 23       	and	r24, r24
     4c2:	29 f0       	breq	.+10     	; 0x4ce <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4c4:	1f 92       	push	r1
     4c6:	8f 93       	push	r24
     4c8:	84 e6       	ldi	r24, 0x64	; 100
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x44>
		return;
	}

	/* Some printers use alternate settings to determine the communication protocol used - if so, send a SetInterface
	 * request to switch to the interface alternate setting with the Bidirectional protocol */
	if (PrinterAltSetting)
     4ce:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <PrinterAltSetting>
     4d2:	66 23       	and	r22, r22
     4d4:	51 f0       	breq	.+20     	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
	{
		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PrinterInterfaceNumber, PrinterAltSetting)) != HOST_SENDCONTROL_Successful)
     4d6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <PrinterInterfaceNumber>
     4da:	9f d7       	rcall	.+3902   	; 0x141a <USB_Host_SetInterfaceAltSetting>
     4dc:	88 23       	and	r24, r24
     4de:	29 f0       	breq	.+10     	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		{
			printf_P(PSTR(ESC_FG_RED "Control Error (Set Interface).\r\n"
     4e0:	1f 92       	push	r1
     4e2:	8f 93       	push	r24
     4e4:	85 e2       	ldi	r24, 0x25	; 37
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	11 c0       	rjmp	.+34     	; 0x50c <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     4ea:	8b e0       	ldi	r24, 0x0B	; 11
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 8a 0a 	call	0x1514	; 0x1514 <puts_P>

	char DeviceIDString[300];
	if ((ErrorCode = Printer_GetDeviceID(DeviceIDString, sizeof(DeviceIDString))) != HOST_SENDCONTROL_Successful)
     4f2:	6c e2       	ldi	r22, 0x2C	; 44
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	8e 01       	movw	r16, r28
     4f8:	0f 5f       	subi	r16, 0xFF	; 255
     4fa:	1f 4f       	sbci	r17, 0xFF	; 255
     4fc:	c8 01       	movw	r24, r16
     4fe:	8f d1       	rcall	.+798    	; 0x81e <Printer_GetDeviceID>
     500:	88 23       	and	r24, r24
     502:	61 f0       	breq	.+24     	; 0x51c <EVENT_USB_Host_DeviceEnumerationComplete+0xb0>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Get Device ID).\r\n"
     504:	1f 92       	push	r1
     506:	8f 93       	push	r24
     508:	8c ec       	ldi	r24, 0xCC	; 204
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     510:	da d7       	rcall	.+4020   	; 0x14c6 <printf_P>
     512:	80 e9       	ldi	r24, 0x90	; 144
     514:	51 df       	rcall	.-350    	; 0x3b8 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	59 d7       	rcall	.+3762   	; 0x13cc <USB_Host_SetDeviceConfiguration>
     51a:	0c c0       	rjmp	.+24     	; 0x534 <EVENT_USB_Host_DeviceEnumerationComplete+0xc8>
		return;
	}

	printf_P(PSTR("Printer Device ID: %s\r\n"), DeviceIDString);
     51c:	1f 93       	push	r17
     51e:	0f 93       	push	r16
     520:	84 eb       	ldi	r24, 0xB4	; 180
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24

	puts_P(PSTR("Printer Enumerated.\r\n"));
     528:	ce d7       	rcall	.+3996   	; 0x14c6 <printf_P>
     52a:	8e e9       	ldi	r24, 0x9E	; 158
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	f2 d7       	rcall	.+4068   	; 0x1514 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     530:	80 e6       	ldi	r24, 0x60	; 96
     532:	42 df       	rcall	.-380    	; 0x3b8 <LEDs_SetAllLEDs>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	c4 5d       	subi	r28, 0xD4	; 212
}
     53e:	de 4f       	sbci	r29, 0xFE	; 254
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <EVENT_USB_Host_HostError>:
     554:	c8 2f       	mov	r28, r24

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     556:	14 d4       	rcall	.+2088   	; 0xd80 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     558:	1f 92       	push	r1
     55a:	cf 93       	push	r28
     55c:	8f e6       	ldi	r24, 0x6F	; 111
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	b0 d7       	rcall	.+3936   	; 0x14c6 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     566:	80 e9       	ldi	r24, 0x90	; 144
     568:	27 df       	rcall	.-434    	; 0x3b8 <LEDs_SetAllLEDs>
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	ff cf       	rjmp	.-2      	; 0x572 <EVENT_USB_Host_HostError+0x1e>

00000574 <EVENT_USB_Host_DeviceEnumerationFailed>:
     574:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     578:	1f 92       	push	r1
     57a:	9f 93       	push	r25
     57c:	1f 92       	push	r1
     57e:	6f 93       	push	r22
     580:	1f 92       	push	r1
     582:	8f 93       	push	r24
     584:	89 e1       	ldi	r24, 0x19	; 25
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	9f 93       	push	r25
     58a:	8f 93       	push	r24
     58c:	9c d7       	rcall	.+3896   	; 0x14c6 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58e:	8d b7       	in	r24, 0x3d	; 61
     590:	9e b7       	in	r25, 0x3e	; 62
     592:	08 96       	adiw	r24, 0x08	; 8
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	9e bf       	out	0x3e, r25	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	8d bf       	out	0x3d, r24	; 61
     59e:	80 e9       	ldi	r24, 0x90	; 144
     5a0:	0b cf       	rjmp	.-490    	; 0x3b8 <LEDs_SetAllLEDs>

000005a2 <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	a9 97       	sbiw	r28, 0x29	; 41
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     5be:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <USB_HostState>
     5c2:	8b 30       	cpi	r24, 0x0B	; 11
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <PrinterHost_Task+0x26>
     5c6:	3d c0       	rjmp	.+122    	; 0x642 <PrinterHost_Task+0xa0>
	  return;

	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     5c8:	80 e2       	ldi	r24, 0x20	; 32
     5ca:	f6 de       	rcall	.-532    	; 0x3b8 <LEDs_SetAllLEDs>

	char  TestPageData[]    = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     5cc:	89 e2       	ldi	r24, 0x29	; 41
     5ce:	e1 e1       	ldi	r30, 0x11	; 17
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	9e 01       	movw	r18, r28
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	79 01       	movw	r14, r18
     5da:	d9 01       	movw	r26, r18
     5dc:	01 90       	ld	r0, Z+
     5de:	0d 92       	st	X+, r0
     5e0:	8a 95       	dec	r24
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <PrinterHost_Task+0x3a>
	uint16_t TestPageLength = strlen(TestPageData);
     5e4:	f9 01       	movw	r30, r18
     5e6:	01 90       	ld	r0, Z+
     5e8:	00 20       	and	r0, r0
     5ea:	e9 f7       	brne	.-6      	; 0x5e6 <PrinterHost_Task+0x44>
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	8f 01       	movw	r16, r30
     5f0:	02 1b       	sub	r16, r18
     5f2:	13 0b       	sbc	r17, r19

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     5f4:	1f 93       	push	r17
     5f6:	0f 93       	push	r16
     5f8:	87 ef       	ldi	r24, 0xF7	; 247
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	62 d7       	rcall	.+3780   	; 0x14c6 <printf_P>

	/* Send the test page to the attached printer */
	if ((ErrorCode = Printer_SendData(&TestPageData, TestPageLength)) != PIPE_RWSTREAM_NoError)
     602:	b8 01       	movw	r22, r16
     604:	c7 01       	movw	r24, r14
     606:	ee d0       	rcall	.+476    	; 0x7e4 <Printer_SendData>
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	88 23       	and	r24, r24
     612:	81 f0       	breq	.+32     	; 0x634 <PrinterHost_Task+0x92>
	{
		printf_P(PSTR(ESC_FG_RED "Error Sending Test Page.\r\n"
     614:	1f 92       	push	r1
     616:	8f 93       	push	r24
     618:	8e eb       	ldi	r24, 0xBE	; 190
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     620:	52 d7       	rcall	.+3748   	; 0x14c6 <printf_P>
     622:	80 e9       	ldi	r24, 0x90	; 144
     624:	c9 de       	rcall	.-622    	; 0x3b8 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	d1 d6       	rcall	.+3490   	; 0x13cc <USB_Host_SetDeviceConfiguration>
     62a:	0f 90       	pop	r0
		return;
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     632:	07 c0       	rjmp	.+14     	; 0x642 <PrinterHost_Task+0xa0>
     634:	8c ea       	ldi	r24, 0xAC	; 172
     636:	90 e0       	ldi	r25, 0x00	; 0

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);	
     638:	6d d7       	rcall	.+3802   	; 0x1514 <puts_P>
     63a:	80 e6       	ldi	r24, 0x60	; 96
     63c:	bd de       	rcall	.-646    	; 0x3b8 <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	c5 d6       	rcall	.+3466   	; 0x13cc <USB_Host_SetDeviceConfiguration>
     642:	a9 96       	adiw	r28, 0x29	; 41
}
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	08 95       	ret

0000065c <main>:
     65c:	b2 de       	rcall	.-668    	; 0x3c2 <SetupHardware>
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     65e:	80 e1       	ldi	r24, 0x10	; 16
     660:	ab de       	rcall	.-682    	; 0x3b8 <LEDs_SetAllLEDs>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     662:	82 e5       	ldi	r24, 0x52	; 82
     664:	93 e0       	ldi	r25, 0x03	; 3
	sei();
     666:	56 d7       	rcall	.+3756   	; 0x1514 <puts_P>

	for (;;)
	{
		PrinterHost_Task();
     668:	78 94       	sei
     66a:	9b df       	rcall	.-202    	; 0x5a2 <PrinterHost_Task>

		USB_USBTask();
     66c:	e9 d6       	rcall	.+3538   	; 0x1440 <USB_USBTask>
     66e:	fd cf       	rjmp	.-6      	; 0x66a <main+0xe>

00000670 <DComp_NextBidirectionalPrinterInterface>:
     670:	fc 01       	movw	r30, r24
 */
uint8_t DComp_NextBidirectionalPrinterInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     672:	81 81       	ldd	r24, Z+1	; 0x01
     674:	84 30       	cpi	r24, 0x04	; 4
     676:	59 f4       	brne	.+22     	; 0x68e <DComp_NextBidirectionalPrinterInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
     678:	85 81       	ldd	r24, Z+5	; 0x05
     67a:	87 30       	cpi	r24, 0x07	; 7
     67c:	41 f4       	brne	.+16     	; 0x68e <DComp_NextBidirectionalPrinterInterface+0x1e>
     67e:	86 81       	ldd	r24, Z+6	; 0x06
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	29 f4       	brne	.+10     	; 0x68e <DComp_NextBidirectionalPrinterInterface+0x1e>
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
     684:	87 81       	ldd	r24, Z+7	; 0x07
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	11 f4       	brne	.+4      	; 0x68e <DComp_NextBidirectionalPrinterInterface+0x1e>
			(Interface->Protocol == PRNT_CSCP_BidirectionalProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     68e:	82 e0       	ldi	r24, 0x02	; 2
}
     690:	08 95       	ret

00000692 <DComp_NextPrinterInterfaceBulkDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextPrinterInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     692:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	95 30       	cpi	r25, 0x05	; 5
     698:	31 f4       	brne	.+12     	; 0x6a6 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     69a:	83 81       	ldd	r24, Z+3	; 0x03
     69c:	83 70       	andi	r24, 0x03	; 3
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	31 f4       	brne	.+12     	; 0x6ae <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
     6a6:	94 30       	cpi	r25, 0x04	; 4
     6a8:	11 f4       	brne	.+4      	; 0x6ae <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
	{
		return DESCRIPTOR_SEARCH_Fail;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6ae:	82 e0       	ldi	r24, 0x02	; 2
}
     6b0:	08 95       	ret

000006b2 <ProcessConfigurationDescriptor>:
 *  This routine searches for a bidirectional Printer interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref PrinterHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	c4 50       	subi	r28, 0x04	; 4
     6ca:	d2 40       	sbci	r29, 0x02	; 2
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6d6:	ae 01       	movw	r20, r28
     6d8:	4f 5f       	subi	r20, 0xFF	; 255
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	cd 5f       	subi	r28, 0xFD	; 253
     6de:	dd 4f       	sbci	r29, 0xFD	; 253
     6e0:	59 83       	std	Y+1, r21	; 0x01
     6e2:	48 83       	st	Y, r20
     6e4:	c3 50       	subi	r28, 0x03	; 3
     6e6:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	32 e0       	ldi	r19, 0x02	; 2
     6ec:	be 01       	movw	r22, r28
     6ee:	6f 5f       	subi	r22, 0xFF	; 255
     6f0:	7d 4f       	sbci	r23, 0xFD	; 253
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	c3 d4       	rcall	.+2438   	; 0x107c <USB_Host_GetDeviceConfigDescriptor>
     6f6:	85 30       	cpi	r24, 0x05	; 5
     6f8:	41 f0       	breq	.+16     	; 0x70a <ProcessConfigurationDescriptor+0x58>
     6fa:	86 30       	cpi	r24, 0x06	; 6
     6fc:	09 f4       	brne	.+2      	; 0x700 <ProcessConfigurationDescriptor+0x4e>
     6fe:	5b c0       	rjmp	.+182    	; 0x7b6 <ProcessConfigurationDescriptor+0x104>
     700:	88 23       	and	r24, r24
     702:	29 f1       	breq	.+74     	; 0x74e <ProcessConfigurationDescriptor+0x9c>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     704:	ff 24       	eor	r15, r15
     706:	f3 94       	inc	r15
     708:	5b c0       	rjmp	.+182    	; 0x7c0 <ProcessConfigurationDescriptor+0x10e>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     70a:	22 e0       	ldi	r18, 0x02	; 2
     70c:	f2 2e       	mov	r15, r18
     70e:	58 c0       	rjmp	.+176    	; 0x7c0 <ProcessConfigurationDescriptor+0x10e>

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     710:	49 e4       	ldi	r20, 0x49	; 73
     712:	53 e0       	ldi	r21, 0x03	; 3
     714:	be 01       	movw	r22, r28
     716:	6d 5f       	subi	r22, 0xFD	; 253
     718:	7d 4f       	sbci	r23, 0xFD	; 253
     71a:	ce 01       	movw	r24, r28
     71c:	8f 5f       	subi	r24, 0xFF	; 255
     71e:	9d 4f       	sbci	r25, 0xFD	; 253
     720:	06 d5       	rcall	.+2572   	; 0x112e <USB_GetNextDescriptorComp>
     722:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     724:	81 11       	cpse	r24, r1
     726:	13 c0       	rjmp	.+38     	; 0x74e <ProcessConfigurationDescriptor+0x9c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     728:	cd 5f       	subi	r28, 0xFD	; 253
     72a:	dd 4f       	sbci	r29, 0xFD	; 253
     72c:	e8 81       	ld	r30, Y
     72e:	f9 81       	ldd	r31, Y+1	; 0x01
     730:	c3 50       	subi	r28, 0x03	; 3
     732:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     734:	82 81       	ldd	r24, Z+2	; 0x02
     736:	87 fd       	sbrc	r24, 7
     738:	03 c0       	rjmp	.+6      	; 0x740 <ProcessConfigurationDescriptor+0x8e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
     73a:	6f 01       	movw	r12, r30

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     73c:	eb 2d       	mov	r30, r11
     73e:	fe 2d       	mov	r31, r14
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     740:	30 97       	sbiw	r30, 0x00	; 0
     742:	d9 f4       	brne	.+54     	; 0x77a <ProcessConfigurationDescriptor+0xc8>
 *  This routine searches for a bidirectional Printer interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref PrinterHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     744:	be 2e       	mov	r11, r30
     746:	ef 2e       	mov	r14, r31
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     748:	01 15       	cp	r16, r1
     74a:	11 05       	cpc	r17, r1
     74c:	09 f7       	brne	.-62     	; 0x710 <ProcessConfigurationDescriptor+0x5e>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextPrinterInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     74e:	48 e3       	ldi	r20, 0x38	; 56
     750:	53 e0       	ldi	r21, 0x03	; 3
     752:	be 01       	movw	r22, r28
     754:	6d 5f       	subi	r22, 0xFD	; 253
     756:	7d 4f       	sbci	r23, 0xFD	; 253
     758:	ce 01       	movw	r24, r28
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	9d 4f       	sbci	r25, 0xFD	; 253
     75e:	e7 d4       	rcall	.+2510   	; 0x112e <USB_GetNextDescriptorComp>
     760:	81 11       	cpse	r24, r1
     762:	2c c0       	rjmp	.+88     	; 0x7bc <ProcessConfigurationDescriptor+0x10a>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     764:	cd 5f       	subi	r28, 0xFD	; 253
     766:	dd 4f       	sbci	r29, 0xFD	; 253
     768:	08 81       	ld	r16, Y
     76a:	19 81       	ldd	r17, Y+1	; 0x01
     76c:	c3 50       	subi	r28, 0x03	; 3
     76e:	d2 40       	sbci	r29, 0x02	; 2

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     770:	b1 2c       	mov	r11, r1
     772:	e1 2c       	mov	r14, r1
			DataOUTEndpoint = NULL;
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	e7 cf       	rjmp	.-50     	; 0x748 <ProcessConfigurationDescriptor+0x96>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     77a:	c1 14       	cp	r12, r1
     77c:	d1 04       	cpc	r13, r1
     77e:	11 f3       	breq	.-60     	; 0x744 <ProcessConfigurationDescriptor+0x92>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Save Printer interface details for later use */
	PrinterInterfaceNumber = PrinterInterface->InterfaceNumber;
     780:	d8 01       	movw	r26, r16
     782:	12 96       	adiw	r26, 0x02	; 2
     784:	8c 91       	ld	r24, X
     786:	12 97       	sbiw	r26, 0x02	; 2
     788:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <PrinterInterfaceNumber>
	PrinterAltSetting      = PrinterInterface->AlternateSetting;
     78c:	13 96       	adiw	r26, 0x03	; 3
     78e:	8c 91       	ld	r24, X
     790:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <PrinterAltSetting>

	/* Configure the Printer data IN pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     794:	04 81       	ldd	r16, Z+4	; 0x04
     796:	15 81       	ldd	r17, Z+5	; 0x05
     798:	e1 2c       	mov	r14, r1
     79a:	22 81       	ldd	r18, Z+2	; 0x02
     79c:	40 e1       	ldi	r20, 0x10	; 16
     79e:	62 e0       	ldi	r22, 0x02	; 2
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	50 d2       	rcall	.+1184   	; 0xc44 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     7a4:	f6 01       	movw	r30, r12
     7a6:	04 81       	ldd	r16, Z+4	; 0x04
     7a8:	15 81       	ldd	r17, Z+5	; 0x05
     7aa:	22 81       	ldd	r18, Z+2	; 0x02
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	48 d2       	rcall	.+1168   	; 0xc44 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <ProcessConfigurationDescriptor+0x10e>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	f9 2e       	mov	r15, r25
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <ProcessConfigurationDescriptor+0x10e>
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextBidirectionalPrinterInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	f8 2e       	mov	r15, r24
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7c0:	8f 2d       	mov	r24, r15
     7c2:	cc 5f       	subi	r28, 0xFC	; 252
     7c4:	dd 4f       	sbci	r29, 0xFD	; 253
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	bf 90       	pop	r11
     7e2:	08 95       	ret

000007e4 <Printer_SendData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t Printer_SendData(const void* const PrinterCommands,
                         const uint16_t CommandSize)
{
     7e4:	cf 93       	push	r28
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     7e6:	22 e0       	ldi	r18, 0x02	; 2
     7e8:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     7ec:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     7f0:	2f 7b       	andi	r18, 0xBF	; 191
     7f2:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRINTER_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PrinterCommands, CommandSize, NULL)) != PIPE_RWSTREAM_NoError)
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	d3 d3       	rcall	.+1958   	; 0xfa2 <Pipe_Write_Stream_LE>
     7fc:	c8 2f       	mov	r28, r24
     7fe:	81 11       	cpse	r24, r1
     800:	0b c0       	rjmp	.+22     	; 0x818 <Printer_SendData+0x34>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     802:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     806:	8b 77       	andi	r24, 0x7B	; 123
     808:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  return ErrorCode;

	Pipe_ClearOUT();

	Pipe_WaitUntilReady();
     80c:	8b d2       	rcall	.+1302   	; 0xd24 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     80e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     812:	80 64       	ori	r24, 0x40	; 64
     814:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     818:	8c 2f       	mov	r24, r28
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <Printer_GetDeviceID>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t Printer_GetDeviceID(char* DeviceIDString,
                            const uint16_t BufferSize)
{
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <Printer_GetDeviceID+0xe>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	7c 01       	movw	r14, r24
     832:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
     834:	1a 82       	std	Y+2, r1	; 0x02
     836:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
     838:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <PrinterInterfaceNumber>
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	21 ea       	ldi	r18, 0xA1	; 161
     840:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <USB_ControlRequest>
     844:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <USB_ControlRequest+0x1>
     848:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <USB_ControlRequest+0x3>
     84c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <USB_ControlRequest+0x2>
     850:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <USB_ControlRequest+0x5>
     854:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USB_ControlRequest+0x4>
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <USB_ControlRequest+0x7>
     860:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     864:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	b9 d4       	rcall	.+2418   	; 0x11e0 <USB_Host_SendControlRequest>
     86e:	81 11       	cpse	r24, r1
     870:	2c c0       	rjmp	.+88     	; 0x8ca <Printer_GetDeviceID+0xac>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
     872:	29 81       	ldd	r18, Y+1	; 0x01
     874:	3a 81       	ldd	r19, Y+2	; 0x02
     876:	21 15       	cp	r18, r1
     878:	31 05       	cpc	r19, r1
     87a:	19 f4       	brne	.+6      	; 0x882 <Printer_GetDeviceID+0x64>
	{
		DeviceIDString[0] = 0x00;
     87c:	f7 01       	movw	r30, r14
     87e:	10 82       	st	Z, r1
		return HOST_SENDCONTROL_Successful;
     880:	24 c0       	rjmp	.+72     	; 0x8ca <Printer_GetDeviceID+0xac>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     882:	83 2f       	mov	r24, r19
     884:	92 2f       	mov	r25, r18
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);

	if (DeviceIDStringLength > BufferSize)
     886:	08 17       	cp	r16, r24
     888:	19 07       	cpc	r17, r25
     88a:	18 f0       	brcs	.+6      	; 0x892 <Printer_GetDeviceID+0x74>
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
     88c:	9a 83       	std	Y+2, r25	; 0x02
     88e:	89 83       	std	Y+1, r24	; 0x01
     890:	02 c0       	rjmp	.+4      	; 0x896 <Printer_GetDeviceID+0x78>

	if (DeviceIDStringLength > BufferSize)
	  DeviceIDStringLength = BufferSize;
     892:	1a 83       	std	Y+2, r17	; 0x02
     894:	09 83       	std	Y+1, r16	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <USB_ControlRequest+0x7>
     89e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_ControlRequest+0x6>

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
     8a2:	c7 01       	movw	r24, r14
     8a4:	9d d4       	rcall	.+2362   	; 0x11e0 <USB_Host_SendControlRequest>
     8a6:	81 11       	cpse	r24, r1
     8a8:	10 c0       	rjmp	.+32     	; 0x8ca <Printer_GetDeviceID+0xac>
	  return ErrorCode;

	/* Move string back two characters to remove the string length value from the start of the array */
	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	8c 01       	movw	r16, r24
     8b0:	02 50       	subi	r16, 0x02	; 2
     8b2:	11 09       	sbc	r17, r1
     8b4:	b7 01       	movw	r22, r14
     8b6:	6e 5f       	subi	r22, 0xFE	; 254
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	a8 01       	movw	r20, r16
     8bc:	c7 01       	movw	r24, r14
     8be:	f2 d5       	rcall	.+3044   	; 0x14a4 <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
     8c0:	f7 01       	movw	r30, r14
     8c2:	e0 0f       	add	r30, r16
     8c4:	f1 1f       	adc	r31, r17
     8c6:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8dc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8e0:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     8e2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     8e6:	9d 7f       	andi	r25, 0xFD	; 253
     8e8:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     8ec:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8f0:	92 60       	ori	r25, 0x02	; 2
     8f2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     8f6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     8fa:	91 fd       	sbrc	r25, 1
     8fc:	fc cf       	rjmp	.-8      	; 0x8f6 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8fe:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     902:	91 60       	ori	r25, 0x01	; 1
     904:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     908:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     90c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     910:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     912:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     916:	2f 7d       	andi	r18, 0xDF	; 223
     918:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     91c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     920:	2f 7d       	andi	r18, 0xDF	; 223
     922:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     926:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     928:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     92c:	35 ff       	sbrs	r19, 5
     92e:	0b c0       	rjmp	.+22     	; 0x946 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     930:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     934:	2f 7d       	andi	r18, 0xDF	; 223
     936:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     93a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     93e:	2d 7f       	andi	r18, 0xFD	; 253
     940:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     944:	08 c0       	rjmp	.+16     	; 0x956 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     946:	ef ec       	ldi	r30, 0xCF	; 207
     948:	f7 e0       	ldi	r31, 0x07	; 7
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <USB_Host_ResetDevice+0x6e>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <USB_Host_ResetDevice+0x74>
     950:	00 00       	nop
     952:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     954:	49 f7       	brne	.-46     	; 0x928 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     956:	99 23       	and	r25, r25
     958:	29 f0       	breq	.+10     	; 0x964 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     95a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     95e:	90 62       	ori	r25, 0x20	; 32
     960:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     964:	81 11       	cpse	r24, r1
     966:	05 c0       	rjmp	.+10     	; 0x972 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     968:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     96c:	8e 7f       	andi	r24, 0xFE	; 254
     96e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     972:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     976:	82 60       	ori	r24, 0x02	; 2
     978:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     97c:	08 95       	ret

0000097e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     97e:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     982:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     984:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     988:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     98a:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     98e:	3f 7d       	andi	r19, 0xDF	; 223
     990:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     994:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     998:	3f 7d       	andi	r19, 0xDF	; 223
     99a:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     99e:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9a2:	31 60       	ori	r19, 0x01	; 1
     9a4:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9a8:	88 23       	and	r24, r24
     9aa:	39 f1       	breq	.+78     	; 0x9fa <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9ac:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9b0:	35 ff       	sbrs	r19, 5
     9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9b4:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9b8:	3f 7d       	andi	r19, 0xDF	; 223
     9ba:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9be:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9c0:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <USB_HostState>
     9c4:	31 30       	cpi	r19, 0x01	; 1
     9c6:	c1 f0       	breq	.+48     	; 0x9f8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     9c8:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     9cc:	34 ff       	sbrs	r19, 4
     9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     9d0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     9d4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     9d8:	8f 7e       	andi	r24, 0xEF	; 239
     9da:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     9de:	82 e0       	ldi	r24, 0x02	; 2

			break;
     9e0:	0c c0       	rjmp	.+24     	; 0x9fa <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9e2:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     9e6:	31 ff       	sbrs	r19, 1
     9e8:	df cf       	rjmp	.-66     	; 0x9a8 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9ea:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     9ee:	8d 7f       	andi	r24, 0xFD	; 253
     9f0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     9f4:	83 e0       	ldi	r24, 0x03	; 3

			break;
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     9f8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     9fa:	21 11       	cpse	r18, r1
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9fe:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     a02:	2e 7f       	andi	r18, 0xFE	; 254
     a04:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a08:	99 23       	and	r25, r25
     a0a:	29 f0       	breq	.+10     	; 0xa16 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a0c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a10:	90 62       	ori	r25, 0x20	; 32
     a12:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a16:	08 95       	ret

00000a18 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a18:	ef 92       	push	r14
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	28 97       	sbiw	r28, 0x08	; 8
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     a32:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <USB_HostState>
     a36:	8e 2f       	mov	r24, r30
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	8a 30       	cpi	r24, 0x0A	; 10
     a3c:	91 05       	cpc	r25, r1
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <USB_Host_ProcessNextHostState+0x2a>
     a40:	f5 c0       	rjmp	.+490    	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
     a42:	fc 01       	movw	r30, r24
     a44:	e4 5b       	subi	r30, 0xB4	; 180
     a46:	ff 4f       	sbci	r31, 0xFF	; 255
     a48:	24 c5       	rjmp	.+2632   	; 0x1492 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a4a:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <WaitMSRemaining.2935>
     a4e:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <WaitMSRemaining.2935+0x1>
     a52:	01 15       	cp	r16, r1
     a54:	11 05       	cpc	r17, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <USB_Host_ProcessNextHostState+0x42>
     a58:	e9 c0       	rjmp	.+466    	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 df       	rcall	.-224    	; 0x97e <USB_Host_WaitMS>
     a5e:	88 23       	and	r24, r24
     a60:	31 f0       	breq	.+12     	; 0xa6e <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     a62:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
     a66:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     a6a:	91 e0       	ldi	r25, 0x01	; 1
					break;
     a6c:	d1 c0       	rjmp	.+418    	; 0xc10 <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     a6e:	01 50       	subi	r16, 0x01	; 1
     a70:	11 09       	sbc	r17, r1
     a72:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <WaitMSRemaining.2935+0x1>
     a76:	00 93 3b 01 	sts	0x013B, r16	; 0x80013b <WaitMSRemaining.2935>
     a7a:	01 2b       	or	r16, r17
     a7c:	09 f0       	breq	.+2      	; 0xa80 <USB_Host_ProcessNextHostState+0x68>
     a7e:	d6 c0       	rjmp	.+428    	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     a80:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     a84:	07 c0       	rjmp	.+14     	; 0xa94 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a86:	88 ee       	ldi	r24, 0xE8	; 232
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <WaitMSRemaining.2935+0x1>
     a8e:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <USB_HostState>
			break;
     a98:	c9 c0       	rjmp	.+402    	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a9a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <WaitMSRemaining.2935>
     a9e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <WaitMSRemaining.2935+0x1>
     aa2:	9c 01       	movw	r18, r24
     aa4:	21 50       	subi	r18, 0x01	; 1
     aa6:	31 09       	sbc	r19, r1
     aa8:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <WaitMSRemaining.2935+0x1>
     aac:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <WaitMSRemaining.2935>
     ab0:	89 2b       	or	r24, r25
     ab2:	39 f0       	breq	.+14     	; 0xac2 <USB_Host_ProcessNextHostState+0xaa>
     ab4:	8f ec       	ldi	r24, 0xCF	; 207
     ab6:	97 e0       	ldi	r25, 0x07	; 7
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <USB_Host_ProcessNextHostState+0xa0>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <USB_Host_ProcessNextHostState+0xa6>
     abe:	00 00       	nop
     ac0:	b5 c0       	rjmp	.+362    	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     ac2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ac4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ace:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ad2:	8b 7f       	andi	r24, 0xFB	; 251
     ad4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     ad8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     adc:	80 61       	ori	r24, 0x10	; 16
     ade:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     ae2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	d2 cf       	rjmp	.-92     	; 0xa94 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     af0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     af4:	80 ff       	sbrs	r24, 0
     af6:	9a c0       	rjmp	.+308    	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     af8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     afc:	8e 7f       	andi	r24, 0xFE	; 254
     afe:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b02:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b06:	8d 7f       	andi	r24, 0xFD	; 253
     b08:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b0c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b10:	8d 7f       	andi	r24, 0xFD	; 253
     b12:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b16:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b1a:	82 60       	ori	r24, 0x02	; 2
     b1c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b20:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b2a:	e8 d0       	rcall	.+464    	; 0xcfc <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b2c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <USB_HostState>
     b30:	84 e6       	ldi	r24, 0x64	; 100
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <WaitMSRemaining.2935+0x1>
     b38:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <WaitMSRemaining.2935>
     b3c:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b3e:	5c c0       	rjmp	.+184    	; 0xbf8 <USB_Host_ProcessNextHostState+0x1e0>
     b40:	cd de       	rcall	.-614    	; 0x8dc <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b42:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <USB_HostState>
     b46:	88 ec       	ldi	r24, 0xC8	; 200
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <WaitMSRemaining.2935+0x1>
     b4e:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <WaitMSRemaining.2935>
     b52:	86 e0       	ldi	r24, 0x06	; 6
     b54:	51 c0       	rjmp	.+162    	; 0xbf8 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     b56:	e1 2c       	mov	r14, r1
     b58:	00 e4       	ldi	r16, 0x40	; 64
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	6f d0       	rcall	.+222    	; 0xc44 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b66:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     b6a:	87 fd       	sbrc	r24, 7
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	4e c0       	rjmp	.+156    	; 0xc10 <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     b74:	87 e0       	ldi	r24, 0x07	; 7
     b76:	8e cf       	rjmp	.-228    	; 0xa94 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     b78:	88 e0       	ldi	r24, 0x08	; 8
     b7a:	e1 e0       	ldi	r30, 0x01	; 1
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	a1 e4       	ldi	r26, 0x41	; 65
     b80:	b1 e0       	ldi	r27, 0x01	; 1
     b82:	01 90       	ld	r0, Z+
     b84:	0d 92       	st	X+, r0
     b86:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b88:	e1 f7       	brne	.-8      	; 0xb82 <USB_Host_ProcessNextHostState+0x16a>
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	28 d3       	rcall	.+1616   	; 0x11e0 <USB_Host_SendControlRequest>
     b90:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b92:	3d c0       	rjmp	.+122    	; 0xc0e <USB_Host_ProcessNextHostState+0x1f6>
     b94:	88 85       	ldd	r24, Y+8	; 0x08
     b96:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     b9a:	a0 de       	rcall	.-704    	; 0x8dc <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b9c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <USB_HostState>
     ba0:	88 ec       	ldi	r24, 0xC8	; 200
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <WaitMSRemaining.2935+0x1>
     ba8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <WaitMSRemaining.2935>
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	24 c0       	rjmp	.+72     	; 0xbf8 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     bb0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	e1 2c       	mov	r14, r1
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	41 d0       	rcall	.+130    	; 0xc44 <Pipe_ConfigurePipe>
     bc2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     bc6:	87 ff       	sbrs	r24, 7
     bc8:	d2 cf       	rjmp	.-92     	; 0xb6e <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     bca:	88 e0       	ldi	r24, 0x08	; 8
     bcc:	e9 e0       	ldi	r30, 0x09	; 9
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	a1 e4       	ldi	r26, 0x41	; 65
     bd2:	b1 e0       	ldi	r27, 0x01	; 1
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <USB_Host_ProcessNextHostState+0x1bc>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	ff d2       	rcall	.+1534   	; 0x11e0 <USB_Host_SendControlRequest>
     be2:	81 11       	cpse	r24, r1
     be4:	14 c0       	rjmp	.+40     	; 0xc0e <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     be6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <USB_HostState>
     bea:	84 e6       	ldi	r24, 0x64	; 100
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <WaitMSRemaining.2935+0x1>
     bf2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <WaitMSRemaining.2935>
     bf6:	89 e0       	ldi	r24, 0x09	; 9
     bf8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     bfc:	17 c0       	rjmp	.+46     	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     c04:	8a e0       	ldi	r24, 0x0A	; 10
     c06:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     c0a:	30 dc       	rcall	.-1952   	; 0x46c <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c14:	21 30       	cpi	r18, 0x01	; 1
     c16:	51 f0       	breq	.+20     	; 0xc2c <USB_Host_ProcessNextHostState+0x214>
     c18:	68 2f       	mov	r22, r24
     c1a:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c1c:	ab dc       	rcall	.-1706   	; 0x574 <EVENT_USB_Host_DeviceEnumerationFailed>
     c1e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c28:	1b dc       	rcall	.-1994   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c2a:	c2 d0       	rcall	.+388    	; 0xdb0 <USB_ResetInterface>
     c2c:	28 96       	adiw	r28, 0x08	; 8
	}
}
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <Pipe_ConfigurePipe>:
     c44:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	2f 70       	andi	r18, 0x0F	; 15
     c4c:	42 2b       	or	r20, r18
     c4e:	90 e4       	ldi	r25, 0x40	; 64
     c50:	69 9f       	mul	r22, r25
     c52:	b0 01       	movw	r22, r0
     c54:	11 24       	eor	r1, r1
     c56:	64 2b       	or	r22, r20
     c58:	38 2f       	mov	r19, r24
     c5a:	2e 2d       	mov	r18, r14
     c5c:	22 60       	ori	r18, 0x02	; 2
     c5e:	37 30       	cpi	r19, 0x07	; 7
     c60:	08 f0       	brcs	.+2      	; 0xc64 <Pipe_ConfigurePipe+0x20>
     c62:	45 c0       	rjmp	.+138    	; 0xcee <Pipe_ConfigurePipe+0xaa>
     c64:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     c68:	38 13       	cpse	r19, r24
     c6a:	13 c0       	rjmp	.+38     	; 0xc92 <Pipe_ConfigurePipe+0x4e>
     c6c:	48 e0       	ldi	r20, 0x08	; 8
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	40 17       	cp	r20, r16
     c74:	51 07       	cpc	r21, r17
     c76:	38 f0       	brcs	.+14     	; 0xc86 <Pipe_ConfigurePipe+0x42>
     c78:	92 95       	swap	r25
     c7a:	90 7f       	andi	r25, 0xF0	; 240
     c7c:	92 2b       	or	r25, r18
     c7e:	e6 2f       	mov	r30, r22
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e c0       	rjmp	.+28     	; 0xca2 <Pipe_ConfigurePipe+0x5e>
     c86:	95 30       	cpi	r25, 0x05	; 5
     c88:	b9 f3       	breq	.-18     	; 0xc78 <Pipe_ConfigurePipe+0x34>
     c8a:	9f 5f       	subi	r25, 0xFF	; 255
     c8c:	44 0f       	add	r20, r20
     c8e:	55 1f       	adc	r21, r21
     c90:	f0 cf       	rjmp	.-32     	; 0xc72 <Pipe_ConfigurePipe+0x2e>
     c92:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     c96:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     c9a:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     c9e:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     ca2:	91 fd       	sbrc	r25, 1
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <Pipe_ConfigurePipe+0x66>
     ca6:	3f 5f       	subi	r19, 0xFF	; 255
     ca8:	da cf       	rjmp	.-76     	; 0xc5e <Pipe_ConfigurePipe+0x1a>
     caa:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cae:	4e 7f       	andi	r20, 0xFE	; 254
     cb0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cb4:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cb8:	4d 7f       	andi	r20, 0xFD	; 253
     cba:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cbe:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cc2:	41 60       	ori	r20, 0x01	; 1
     cc4:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cc8:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ccc:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cd0:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     cd4:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     cd8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cdc:	90 62       	ori	r25, 0x20	; 32
     cde:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ce2:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     ce6:	97 fd       	sbrc	r25, 7
     ce8:	de cf       	rjmp	.-68     	; 0xca6 <Pipe_ConfigurePipe+0x62>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <Pipe_ConfigurePipe+0xb0>
     cee:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <Pipe_ClearPipes>:
     cfc:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d06:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     d0a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d0e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d12:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d16:	9e 7f       	andi	r25, 0xFE	; 254
     d18:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	87 30       	cpi	r24, 0x07	; 7
     d20:	81 f7       	brne	.-32     	; 0xd02 <Pipe_ClearPipes+0x6>
     d22:	08 95       	ret

00000d24 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d24:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     d28:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     d2c:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d2e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d32:	90 73       	andi	r25, 0x30	; 48
     d34:	90 31       	cpi	r25, 0x10	; 16
     d36:	29 f4       	brne	.+10     	; 0xd42 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d38:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     d3c:	90 ff       	sbrs	r25, 0
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <Pipe_WaitUntilReady+0x26>
     d40:	19 c0       	rjmp	.+50     	; 0xd74 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d42:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d46:	92 fd       	sbrc	r25, 2
     d48:	15 c0       	rjmp	.+42     	; 0xd74 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d4a:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d4e:	91 fd       	sbrc	r25, 1
     d50:	13 c0       	rjmp	.+38     	; 0xd78 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d52:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <USB_HostState>
     d56:	91 30       	cpi	r25, 0x01	; 1
     d58:	89 f0       	breq	.+34     	; 0xd7c <Pipe_WaitUntilReady+0x58>
     d5a:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     d5e:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d62:	42 17       	cp	r20, r18
     d64:	53 07       	cpc	r21, r19
     d66:	19 f3       	breq	.-58     	; 0xd2e <Pipe_WaitUntilReady+0xa>
     d68:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d6a:	11 f0       	breq	.+4      	; 0xd70 <Pipe_WaitUntilReady+0x4c>
     d6c:	a9 01       	movw	r20, r18
     d6e:	df cf       	rjmp	.-66     	; 0xd2e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d7c:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     d7e:	08 95       	ret

00000d80 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d80:	70 d0       	rcall	.+224    	; 0xe62 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d82:	77 d0       	rcall	.+238    	; 0xe72 <USB_INT_ClearAllInterrupts>
     d84:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
     d8e:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8f 77       	andi	r24, 0x7F	; 127
     d96:	80 83       	st	Z, r24
     d98:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d9a:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	8c 91       	ld	r24, X
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	8c 93       	st	X, r24
     da4:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     da6:	8f 7e       	andi	r24, 0xEF	; 239
     da8:	80 83       	st	Z, r24
     daa:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     dae:	08 95       	ret

00000db0 <USB_ResetInterface>:
     db0:	58 d0       	rcall	.+176    	; 0xe62 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     db2:	5f d0       	rcall	.+190    	; 0xe72 <USB_INT_ClearAllInterrupts>
     db4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     db8:	8f 77       	andi	r24, 0x7F	; 127
     dba:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dbe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dc8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     dcc:	8f 7d       	andi	r24, 0xDF	; 223
     dce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dd2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dd6:	8f 77       	andi	r24, 0x7F	; 127
     dd8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     ddc:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dde:	89 bd       	out	0x29, r24	; 41
     de0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     de2:	89 bd       	out	0x29, r24	; 41
     de4:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     de6:	00 fe       	sbrs	r0, 0
     de8:	fd cf       	rjmp	.-6      	; 0xde4 <USB_ResetInterface+0x34>
     dea:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     dec:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <USB_HostState>
     df0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     df4:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     df6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     dfa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e04:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e0e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e18:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     e1c:	8f 7e       	andi	r24, 0xEF	; 239
     e1e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e22:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     e24:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     e26:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     e2a:	81 60       	ori	r24, 0x01	; 1
     e2c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e30:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e34:	84 60       	ori	r24, 0x04	; 4
     e36:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e3a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e3e:	8e 7f       	andi	r24, 0xFE	; 254
     e40:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     e44:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e4e:	08 95       	ret

00000e50 <USB_Init>:
     e50:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <USB_IsInitialized>

	USB_ResetInterface();
     e60:	a7 cf       	rjmp	.-178    	; 0xdb0 <USB_ResetInterface>

00000e62 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e62:	e8 ed       	ldi	r30, 0xD8	; 216
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8c 7f       	andi	r24, 0xFC	; 252
     e6a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e6c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     e70:	08 95       	ret

00000e72 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e72:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e76:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e7a:	08 95       	ret

00000e7c <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	0b b6       	in	r0, 0x3b	; 59
     e88:	0f 92       	push	r0
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ea2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ea6:	85 ff       	sbrs	r24, 5
     ea8:	0a c0       	rjmp	.+20     	; 0xebe <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     eaa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     eae:	85 ff       	sbrs	r24, 5
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     eb2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ebc:	6a d1       	rcall	.+724    	; 0x1192 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ebe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ec2:	81 ff       	sbrs	r24, 1
     ec4:	15 c0       	rjmp	.+42     	; 0xef0 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ec6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     eca:	81 ff       	sbrs	r24, 1
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ece:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ed2:	8d 7f       	andi	r24, 0xFD	; 253
     ed4:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ed8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ee2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ee6:	8d 7f       	andi	r24, 0xFD	; 253
     ee8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     eec:	b9 da       	rcall	.-2702   	; 0x460 <EVENT_USB_Host_DeviceUnattached>
     eee:	60 df       	rcall	.-320    	; 0xdb0 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ef0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ef4:	81 ff       	sbrs	r24, 1
     ef6:	15 c0       	rjmp	.+42     	; 0xf22 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ef8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     efc:	81 ff       	sbrs	r24, 1
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f00:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     f0a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f0c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	1d db       	rcall	.-2502   	; 0x554 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f1a:	a2 da       	rcall	.-2748   	; 0x460 <EVENT_USB_Host_DeviceUnattached>
     f1c:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     f1e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <USB_HostState>
     f22:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f26:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f28:	17 c0       	rjmp	.+46     	; 0xf58 <__vector_10+0xdc>
     f2a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f2e:	80 ff       	sbrs	r24, 0
     f30:	13 c0       	rjmp	.+38     	; 0xf58 <__vector_10+0xdc>
     f32:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f3c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f46:	86 da       	rcall	.-2804   	; 0x454 <EVENT_USB_Host_DeviceAttached>
     f48:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f52:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f54:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <USB_HostState>
     f58:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f5c:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <__vector_10+0x100>
     f60:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f64:	82 ff       	sbrs	r24, 2
     f66:	0a c0       	rjmp	.+20     	; 0xf7c <__vector_10+0x100>
     f68:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f6c:	8b 7f       	andi	r24, 0xFB	; 251
     f6e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	fe da       	rcall	.-2564   	; 0x574 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     f78:	73 da       	rcall	.-2842   	; 0x460 <EVENT_USB_Host_DeviceUnattached>
     f7a:	1a df       	rcall	.-460    	; 0xdb0 <USB_ResetInterface>

		USB_ResetInterface();
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0b be       	out	0x3b, r0	; 59
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <Pipe_Write_Stream_LE>:
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	ec 01       	movw	r28, r24
     fb4:	8b 01       	movw	r16, r22
     fb6:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fb8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fbc:	8f 7c       	andi	r24, 0xCF	; 207
     fbe:	80 62       	ori	r24, 0x20	; 32
     fc0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     fc4:	af de       	rcall	.-674    	; 0xd24 <Pipe_WaitUntilReady>
     fc6:	81 11       	cpse	r24, r1
     fc8:	32 c0       	rjmp	.+100    	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     fca:	e1 14       	cp	r14, r1
     fcc:	f1 04       	cpc	r15, r1
     fce:	39 f0       	breq	.+14     	; 0xfde <Pipe_Write_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     fd0:	f7 01       	movw	r30, r14
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	08 1b       	sub	r16, r24
     fd8:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     fda:	c8 0f       	add	r28, r24
     fdc:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fde:	c1 2c       	mov	r12, r1
     fe0:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     fe2:	01 15       	cp	r16, r1
     fe4:	11 05       	cpc	r17, r1
     fe6:	11 f1       	breq	.+68     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     fe8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     fec:	85 fd       	sbrc	r24, 5
     fee:	15 c0       	rjmp	.+42     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ff0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ff4:	8b 77       	andi	r24, 0x7B	; 123
     ff6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ffa:	e1 14       	cp	r14, r1
     ffc:	f1 04       	cpc	r15, r1
     ffe:	49 f0       	breq	.+18     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
			{
				*BytesProcessed += BytesInTransfer;
    1000:	f7 01       	movw	r30, r14
    1002:	80 81       	ld	r24, Z
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	c8 0e       	add	r12, r24
    1008:	d9 1e       	adc	r13, r25
    100a:	d1 82       	std	Z+1, r13	; 0x01
    100c:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    100e:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1010:	0e c0       	rjmp	.+28     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1012:	88 de       	rcall	.-752    	; 0xd24 <Pipe_WaitUntilReady>
    1014:	88 23       	and	r24, r24
    1016:	29 f3       	breq	.-54     	; 0xfe2 <Pipe_Write_Stream_LE+0x40>
    1018:	0a c0       	rjmp	.+20     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    101a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    101c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1020:	01 50       	subi	r16, 0x01	; 1
    1022:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1024:	ff ef       	ldi	r31, 0xFF	; 255
    1026:	cf 1a       	sub	r12, r31
    1028:	df 0a       	sbc	r13, r31
    102a:	db cf       	rjmp	.-74     	; 0xfe2 <Pipe_Write_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    102c:	80 e0       	ldi	r24, 0x00	; 0
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	08 95       	ret

00001040 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	dc 01       	movw	r26, r24
    1046:	eb 01       	movw	r28, r22
    1048:	e8 81       	ld	r30, Y
    104a:	f9 81       	ldd	r31, Y+1	; 0x01
    104c:	20 81       	ld	r18, Z
    104e:	8d 91       	ld	r24, X+
    1050:	9c 91       	ld	r25, X
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	82 17       	cp	r24, r18
    1058:	93 07       	cpc	r25, r19
    105a:	08 f4       	brcc	.+2      	; 0x105e <USB_GetNextDescriptor+0x1e>
    105c:	9c 01       	movw	r18, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	eb 01       	movw	r28, r22
    1064:	f9 83       	std	Y+1, r31	; 0x01
    1066:	e8 83       	st	Y, r30
    1068:	8d 91       	ld	r24, X+
    106a:	9c 91       	ld	r25, X
    106c:	11 97       	sbiw	r26, 0x01	; 1
    106e:	82 1b       	sub	r24, r18
    1070:	93 0b       	sbc	r25, r19
    1072:	8d 93       	st	X+, r24
    1074:	9c 93       	st	X, r25
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <USB_Host_GetDeviceConfigDescriptor>:
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	29 97       	sbiw	r28, 0x09	; 9
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	6b 01       	movw	r12, r22
    109e:	8a 01       	movw	r16, r20
    10a0:	79 01       	movw	r14, r18
    10a2:	90 e8       	ldi	r25, 0x80	; 128
    10a4:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <USB_ControlRequest>
    10a8:	96 e0       	ldi	r25, 0x06	; 6
    10aa:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <USB_ControlRequest+0x1>
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	92 60       	ori	r25, 0x02	; 2
    10b4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <USB_ControlRequest+0x3>
    10b8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_ControlRequest+0x2>
    10bc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <USB_ControlRequest+0x5>
    10c0:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <USB_ControlRequest+0x4>
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <USB_ControlRequest+0x7>
    10cc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_ControlRequest+0x6>
    10d0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	83 d0       	rcall	.+262    	; 0x11e0 <USB_Host_SendControlRequest>
    10da:	81 11       	cpse	r24, r1
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <USB_Host_GetDeviceConfigDescriptor+0x94>
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	f6 01       	movw	r30, r12
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	80 83       	st	Z, r24
    10e8:	e8 16       	cp	r14, r24
    10ea:	f9 06       	cpc	r15, r25
    10ec:	70 f0       	brcs	.+28     	; 0x110a <USB_Host_GetDeviceConfigDescriptor+0x8e>
    10ee:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <USB_ControlRequest+0x7>
    10f2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <USB_ControlRequest+0x6>
    10f6:	c8 01       	movw	r24, r16
    10f8:	73 d0       	rcall	.+230    	; 0x11e0 <USB_Host_SendControlRequest>
    10fa:	81 11       	cpse	r24, r1
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <USB_Host_GetDeviceConfigDescriptor+0x94>
    10fe:	f8 01       	movw	r30, r16
    1100:	81 81       	ldd	r24, Z+1	; 0x01
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	21 f4       	brne	.+8      	; 0x110e <USB_Host_GetDeviceConfigDescriptor+0x92>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <USB_Host_GetDeviceConfigDescriptor+0x94>
    110a:	85 e0       	ldi	r24, 0x05	; 5
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <USB_Host_GetDeviceConfigDescriptor+0x94>
    110e:	86 e0       	ldi	r24, 0x06	; 6
    1110:	29 96       	adiw	r28, 0x09	; 9
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	08 95       	ret

0000112e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    112e:	af 92       	push	r10
    1130:	bf 92       	push	r11
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	8c 01       	movw	r16, r24
    1144:	eb 01       	movw	r28, r22
    1146:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1148:	f8 01       	movw	r30, r16
    114a:	e0 80       	ld	r14, Z
    114c:	f1 80       	ldd	r15, Z+1	; 0x01
    114e:	e1 14       	cp	r14, r1
    1150:	f1 04       	cpc	r15, r1
    1152:	99 f0       	breq	.+38     	; 0x117a <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1154:	a8 80       	ld	r10, Y
    1156:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1158:	be 01       	movw	r22, r28
    115a:	c8 01       	movw	r24, r16
    115c:	71 df       	rcall	.-286    	; 0x1040 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    115e:	88 81       	ld	r24, Y
    1160:	99 81       	ldd	r25, Y+1	; 0x01
    1162:	f6 01       	movw	r30, r12
    1164:	09 95       	icall
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	79 f3       	breq	.-34     	; 0x1148 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	39 f4       	brne	.+14     	; 0x117c <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    116e:	b9 82       	std	Y+1, r11	; 0x01
    1170:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    1172:	f8 01       	movw	r30, r16
    1174:	f1 82       	std	Z+1, r15	; 0x01
    1176:	e0 82       	st	Z, r14
    1178:	01 c0       	rjmp	.+2      	; 0x117c <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    117a:	82 e0       	ldi	r24, 0x02	; 2
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	08 95       	ret

00001192 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1192:	08 95       	ret

00001194 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	18 2f       	mov	r17, r24
    119c:	c9 ee       	ldi	r28, 0xE9	; 233
    119e:	d3 e0       	ldi	r29, 0x03	; 3
    11a0:	11 11       	cpse	r17, r1
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <USB_Host_WaitForIOS+0x28>
    11a4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11a8:	83 fd       	sbrc	r24, 3
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <USB_Host_WaitForIOS+0x42>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	e7 db       	rcall	.-2098   	; 0x97e <USB_Host_WaitMS>
    11b0:	81 11       	cpse	r24, r1
    11b2:	12 c0       	rjmp	.+36     	; 0x11d8 <USB_Host_WaitForIOS+0x44>
    11b4:	21 97       	sbiw	r28, 0x01	; 1
    11b6:	a1 f7       	brne	.-24     	; 0x11a0 <USB_Host_WaitForIOS+0xc>
    11b8:	84 e0       	ldi	r24, 0x04	; 4
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <USB_Host_WaitForIOS+0x44>
    11bc:	11 30       	cpi	r17, 0x01	; 1
    11be:	29 f4       	brne	.+10     	; 0x11ca <USB_Host_WaitForIOS+0x36>
    11c0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11c4:	80 ff       	sbrs	r24, 0
    11c6:	f2 cf       	rjmp	.-28     	; 0x11ac <USB_Host_WaitForIOS+0x18>
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <USB_Host_WaitForIOS+0x42>
    11ca:	12 30       	cpi	r17, 0x02	; 2
    11cc:	79 f7       	brne	.-34     	; 0x11ac <USB_Host_WaitForIOS+0x18>
    11ce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11d2:	82 ff       	sbrs	r24, 2
    11d4:	eb cf       	rjmp	.-42     	; 0x11ac <USB_Host_WaitForIOS+0x18>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	08 95       	ret

000011e0 <USB_Host_SendControlRequest>:
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	8c 01       	movw	r16, r24
    11ec:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	f8 2e       	mov	r15, r24
    11f4:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <USB_ControlRequest+0x6>
    11f8:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <USB_ControlRequest+0x7>
    11fc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	ba db       	rcall	.-2188   	; 0x97e <USB_Host_WaitMS>
    120a:	81 11       	cpse	r24, r1
    120c:	c8 c0       	rjmp	.+400    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    120e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1212:	8f 7c       	andi	r24, 0xCF	; 207
    1214:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1218:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
    121c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1220:	8f 7e       	andi	r24, 0xEF	; 239
    1222:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1226:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    122a:	8f 7b       	andi	r24, 0xBF	; 191
    122c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1230:	e1 e4       	ldi	r30, 0x41	; 65
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	89 e4       	ldi	r24, 0x49	; 73
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	21 91       	ld	r18, Z+
    123a:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    123e:	8e 17       	cp	r24, r30
    1240:	9f 07       	cpc	r25, r31
    1242:	d1 f7       	brne	.-12     	; 0x1238 <USB_Host_SendControlRequest+0x58>
    1244:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1248:	87 77       	andi	r24, 0x77	; 119
    124a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	a1 df       	rcall	.-190    	; 0x1194 <USB_Host_WaitForIOS>
    1252:	81 11       	cpse	r24, r1
    1254:	a4 c0       	rjmp	.+328    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    1256:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    125a:	80 64       	ori	r24, 0x40	; 64
    125c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	8d db       	rcall	.-2278   	; 0x97e <USB_Host_WaitMS>
    1264:	81 11       	cpse	r24, r1
    1266:	9b c0       	rjmp	.+310    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    1268:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <USB_ControlRequest>
    126c:	87 ff       	sbrs	r24, 7
    126e:	4e c0       	rjmp	.+156    	; 0x130c <USB_Host_SendControlRequest+0x12c>
    1270:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1274:	8f 7c       	andi	r24, 0xCF	; 207
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    127c:	01 15       	cp	r16, r1
    127e:	11 05       	cpc	r17, r1
    1280:	09 f0       	breq	.+2      	; 0x1284 <USB_Host_SendControlRequest+0xa4>
    1282:	3a c0       	rjmp	.+116    	; 0x12f8 <USB_Host_SendControlRequest+0x118>
    1284:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1288:	8f 7c       	andi	r24, 0xCF	; 207
    128a:	80 62       	ori	r24, 0x20	; 32
    128c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1290:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1294:	8f 7b       	andi	r24, 0xBF	; 191
    1296:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	7b df       	rcall	.-266    	; 0x1194 <USB_Host_WaitForIOS>
    129e:	81 11       	cpse	r24, r1
    12a0:	7e c0       	rjmp	.+252    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    12a2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12a6:	8b 77       	andi	r24, 0x7B	; 123
    12a8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	72 df       	rcall	.-284    	; 0x1194 <USB_Host_WaitForIOS>
    12b0:	76 c0       	rjmp	.+236    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    12b2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12b6:	8f 7b       	andi	r24, 0xBF	; 191
    12b8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	6a df       	rcall	.-300    	; 0x1194 <USB_Host_WaitForIOS>
    12c0:	81 11       	cpse	r24, r1
    12c2:	6d c0       	rjmp	.+218    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    12c4:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    12c8:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    12cc:	89 2b       	or	r24, r25
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <USB_Host_SendControlRequest+0xf4>
    12d0:	c0 e0       	ldi	r28, 0x00	; 0
    12d2:	d0 e0       	ldi	r29, 0x00	; 0
    12d4:	f8 01       	movw	r30, r16
    12d6:	8f 01       	movw	r16, r30
    12d8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    12dc:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    12e0:	89 2b       	or	r24, r25
    12e2:	69 f4       	brne	.+26     	; 0x12fe <USB_Host_SendControlRequest+0x11e>
    12e4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12ee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12f2:	8e 77       	andi	r24, 0x7E	; 126
    12f4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12f8:	20 97       	sbiw	r28, 0x00	; 0
    12fa:	d9 f6       	brne	.-74     	; 0x12b2 <USB_Host_SendControlRequest+0xd2>
    12fc:	c3 cf       	rjmp	.-122    	; 0x1284 <USB_Host_SendControlRequest+0xa4>
    12fe:	20 97       	sbiw	r28, 0x00	; 0
    1300:	89 f3       	breq	.-30     	; 0x12e4 <USB_Host_SendControlRequest+0x104>
    1302:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1306:	81 93       	st	Z+, r24
    1308:	21 97       	sbiw	r28, 0x01	; 1
    130a:	e5 cf       	rjmp	.-54     	; 0x12d6 <USB_Host_SendControlRequest+0xf6>
    130c:	01 15       	cp	r16, r1
    130e:	11 05       	cpc	r17, r1
    1310:	91 f1       	breq	.+100    	; 0x1376 <USB_Host_SendControlRequest+0x196>
    1312:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1316:	8f 7c       	andi	r24, 0xCF	; 207
    1318:	80 62       	ori	r24, 0x20	; 32
    131a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    131e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1322:	8f 7b       	andi	r24, 0xBF	; 191
    1324:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	20 97       	sbiw	r28, 0x00	; 0
    132c:	e1 f0       	breq	.+56     	; 0x1366 <USB_Host_SendControlRequest+0x186>
    132e:	32 df       	rcall	.-412    	; 0x1194 <USB_Host_WaitForIOS>
    1330:	81 11       	cpse	r24, r1
    1332:	35 c0       	rjmp	.+106    	; 0x139e <USB_Host_SendControlRequest+0x1be>
    1334:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1338:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    133c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	28 17       	cp	r18, r24
    1344:	39 07       	cpc	r19, r25
    1346:	48 f4       	brcc	.+18     	; 0x135a <USB_Host_SendControlRequest+0x17a>
    1348:	0f 5f       	subi	r16, 0xFF	; 255
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	f8 01       	movw	r30, r16
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	80 81       	ld	r24, Z
    1352:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1356:	21 97       	sbiw	r28, 0x01	; 1
    1358:	69 f7       	brne	.-38     	; 0x1334 <USB_Host_SendControlRequest+0x154>
    135a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    135e:	8b 77       	andi	r24, 0x7B	; 123
    1360:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1364:	e1 cf       	rjmp	.-62     	; 0x1328 <USB_Host_SendControlRequest+0x148>
    1366:	16 df       	rcall	.-468    	; 0x1194 <USB_Host_WaitForIOS>
    1368:	81 11       	cpse	r24, r1
    136a:	19 c0       	rjmp	.+50     	; 0x139e <USB_Host_SendControlRequest+0x1be>
    136c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1376:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    137a:	8f 7c       	andi	r24, 0xCF	; 207
    137c:	80 61       	ori	r24, 0x10	; 16
    137e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1382:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1386:	8f 7b       	andi	r24, 0xBF	; 191
    1388:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	02 df       	rcall	.-508    	; 0x1194 <USB_Host_WaitForIOS>
    1390:	81 11       	cpse	r24, r1
    1392:	05 c0       	rjmp	.+10     	; 0x139e <USB_Host_SendControlRequest+0x1be>
    1394:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1398:	9e 77       	andi	r25, 0x7E	; 126
    139a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    139e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13a2:	90 64       	ori	r25, 0x40	; 64
    13a4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13a8:	f1 10       	cpse	r15, r1
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <USB_Host_SendControlRequest+0x1d6>
    13ac:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    13b0:	9e 7f       	andi	r25, 0xFE	; 254
    13b2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    13bc:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	08 95       	ret

000013cc <USB_Host_SetDeviceConfiguration>:
    13cc:	cf 93       	push	r28
    13ce:	c8 2f       	mov	r28, r24
    13d0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <USB_ControlRequest>
    13d4:	89 e0       	ldi	r24, 0x09	; 9
    13d6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <USB_ControlRequest+0x1>
    13da:	8c 2f       	mov	r24, r28
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <USB_ControlRequest+0x3>
    13e2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_ControlRequest+0x2>
    13e6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <USB_ControlRequest+0x5>
    13ea:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <USB_ControlRequest+0x4>
    13ee:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <USB_ControlRequest+0x7>
    13f2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <USB_ControlRequest+0x6>
    13f6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	f0 de       	rcall	.-544    	; 0x11e0 <USB_Host_SendControlRequest>
    1400:	81 11       	cpse	r24, r1
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <USB_Host_SetDeviceConfiguration+0x4a>
    1404:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <USB_Host_ConfigurationNumber>
    1408:	c1 11       	cpse	r28, r1
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <USB_Host_SetDeviceConfiguration+0x44>
    140c:	9a e0       	ldi	r25, 0x0A	; 10
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <USB_Host_SetDeviceConfiguration+0x46>
    1410:	9b e0       	ldi	r25, 0x0B	; 11
    1412:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <USB_HostState>
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    141a:	e1 e4       	ldi	r30, 0x41	; 65
    141c:	f1 e0       	ldi	r31, 0x01	; 1
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	90 83       	st	Z, r25
    1422:	9b e0       	ldi	r25, 0x0B	; 11
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	73 83       	std	Z+3, r23	; 0x03
    142a:	62 83       	std	Z+2, r22	; 0x02
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	95 83       	std	Z+5, r25	; 0x05
    1430:	84 83       	std	Z+4, r24	; 0x04
    1432:	17 82       	std	Z+7, r1	; 0x07
    1434:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1436:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	d0 ce       	rjmp	.-608    	; 0x11e0 <USB_Host_SendControlRequest>

00001440 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1446:	c7 ea       	ldi	r28, 0xA7	; 167
    1448:	d0 e0       	ldi	r29, 0x00	; 0
    144a:	18 81       	ld	r17, Y
    144c:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    144e:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1450:	e3 da       	rcall	.-2618   	; 0xa18 <USB_Host_ProcessNextHostState>
    1452:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	08 95       	ret

0000145c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    145c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1460:	95 ff       	sbrs	r25, 5
    1462:	fc cf       	rjmp	.-8      	; 0x145c <Serial_putchar>
				UDR1 = DataByte;
    1464:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	08 95       	ret

0000146e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    146e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1472:	87 ff       	sbrs	r24, 7
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <Serial_getchar+0x18>
    1476:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    147a:	87 ff       	sbrs	r24, 7
    147c:	07 c0       	rjmp	.+14     	; 0x148c <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    147e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	08 95       	ret
	  return _FDEV_EOF;
    1486:	8e ef       	ldi	r24, 0xFE	; 254
    1488:	9f ef       	ldi	r25, 0xFF	; 255
    148a:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1490:	08 95       	ret

00001492 <__tablejump2__>:
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	00 24       	eor	r0, r0
    1498:	00 1c       	adc	r0, r0
    149a:	0b be       	out	0x3b, r0	; 59
    149c:	07 90       	elpm	r0, Z+
    149e:	f6 91       	elpm	r31, Z
    14a0:	e0 2d       	mov	r30, r0
    14a2:	09 94       	ijmp

000014a4 <memmove>:
    14a4:	68 17       	cp	r22, r24
    14a6:	79 07       	cpc	r23, r25
    14a8:	68 f4       	brcc	.+26     	; 0x14c4 <memmove+0x20>
    14aa:	fb 01       	movw	r30, r22
    14ac:	dc 01       	movw	r26, r24
    14ae:	e4 0f       	add	r30, r20
    14b0:	f5 1f       	adc	r31, r21
    14b2:	a4 0f       	add	r26, r20
    14b4:	b5 1f       	adc	r27, r21
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <memmove+0x18>
    14b8:	02 90       	ld	r0, -Z
    14ba:	0e 92       	st	-X, r0
    14bc:	41 50       	subi	r20, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	d8 f7       	brcc	.-10     	; 0x14b8 <memmove+0x14>
    14c2:	08 95       	ret
    14c4:	60 c2       	rjmp	.+1216   	; 0x1986 <memcpy>

000014c6 <printf_P>:
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	ae 01       	movw	r20, r28
    14d4:	49 5f       	subi	r20, 0xF9	; 249
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	da 01       	movw	r26, r20
    14da:	6d 91       	ld	r22, X+
    14dc:	7d 91       	ld	r23, X+
    14de:	ad 01       	movw	r20, r26
    14e0:	08 e5       	ldi	r16, 0x58	; 88
    14e2:	11 e0       	ldi	r17, 0x01	; 1
    14e4:	f8 01       	movw	r30, r16
    14e6:	82 81       	ldd	r24, Z+2	; 0x02
    14e8:	93 81       	ldd	r25, Z+3	; 0x03
    14ea:	dc 01       	movw	r26, r24
    14ec:	13 96       	adiw	r26, 0x03	; 3
    14ee:	2c 91       	ld	r18, X
    14f0:	13 97       	sbiw	r26, 0x03	; 3
    14f2:	28 60       	ori	r18, 0x08	; 8
    14f4:	13 96       	adiw	r26, 0x03	; 3
    14f6:	2c 93       	st	X, r18
    14f8:	3e d0       	rcall	.+124    	; 0x1576 <vfprintf>
    14fa:	d8 01       	movw	r26, r16
    14fc:	12 96       	adiw	r26, 0x02	; 2
    14fe:	ed 91       	ld	r30, X+
    1500:	fc 91       	ld	r31, X
    1502:	13 97       	sbiw	r26, 0x03	; 3
    1504:	23 81       	ldd	r18, Z+3	; 0x03
    1506:	27 7f       	andi	r18, 0xF7	; 247
    1508:	23 83       	std	Z+3, r18	; 0x03
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <puts_P>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	8c 01       	movw	r16, r24
    151e:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__iob+0x2>
    1522:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <__iob+0x3>
    1526:	83 81       	ldd	r24, Z+3	; 0x03
    1528:	81 ff       	sbrs	r24, 1
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <puts_P+0x4e>
    152c:	d0 e0       	ldi	r29, 0x00	; 0
    152e:	c0 e0       	ldi	r28, 0x00	; 0
    1530:	f8 01       	movw	r30, r16
    1532:	84 91       	lpm	r24, Z
    1534:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__iob+0x2>
    1538:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <__iob+0x3>
    153c:	db 01       	movw	r26, r22
    153e:	18 96       	adiw	r26, 0x08	; 8
    1540:	ed 91       	ld	r30, X+
    1542:	fc 91       	ld	r31, X
    1544:	19 97       	sbiw	r26, 0x09	; 9
    1546:	88 23       	and	r24, r24
    1548:	41 f0       	breq	.+16     	; 0x155a <puts_P+0x46>
    154a:	09 95       	icall
    154c:	89 2b       	or	r24, r25
    154e:	11 f0       	breq	.+4      	; 0x1554 <puts_P+0x40>
    1550:	df ef       	ldi	r29, 0xFF	; 255
    1552:	cf ef       	ldi	r28, 0xFF	; 255
    1554:	0f 5f       	subi	r16, 0xFF	; 255
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	eb cf       	rjmp	.-42     	; 0x1530 <puts_P+0x1c>
    155a:	8a e0       	ldi	r24, 0x0A	; 10
    155c:	09 95       	icall
    155e:	89 2b       	or	r24, r25
    1560:	19 f0       	breq	.+6      	; 0x1568 <puts_P+0x54>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	9f ef       	ldi	r25, 0xFF	; 255
    1566:	02 c0       	rjmp	.+4      	; 0x156c <puts_P+0x58>
    1568:	8d 2f       	mov	r24, r29
    156a:	9c 2f       	mov	r25, r28
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <vfprintf>:
    1576:	2f 92       	push	r2
    1578:	3f 92       	push	r3
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	2b 97       	sbiw	r28, 0x0b	; 11
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	6c 01       	movw	r12, r24
    15ac:	7b 01       	movw	r14, r22
    15ae:	8a 01       	movw	r16, r20
    15b0:	fc 01       	movw	r30, r24
    15b2:	17 82       	std	Z+7, r1	; 0x07
    15b4:	16 82       	std	Z+6, r1	; 0x06
    15b6:	83 81       	ldd	r24, Z+3	; 0x03
    15b8:	81 ff       	sbrs	r24, 1
    15ba:	bf c1       	rjmp	.+894    	; 0x193a <vfprintf+0x3c4>
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	3c 01       	movw	r6, r24
    15c2:	f6 01       	movw	r30, r12
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	f7 01       	movw	r30, r14
    15c8:	93 fd       	sbrc	r25, 3
    15ca:	85 91       	lpm	r24, Z+
    15cc:	93 ff       	sbrs	r25, 3
    15ce:	81 91       	ld	r24, Z+
    15d0:	7f 01       	movw	r14, r30
    15d2:	88 23       	and	r24, r24
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <vfprintf+0x62>
    15d6:	ad c1       	rjmp	.+858    	; 0x1932 <vfprintf+0x3bc>
    15d8:	85 32       	cpi	r24, 0x25	; 37
    15da:	39 f4       	brne	.+14     	; 0x15ea <vfprintf+0x74>
    15dc:	93 fd       	sbrc	r25, 3
    15de:	85 91       	lpm	r24, Z+
    15e0:	93 ff       	sbrs	r25, 3
    15e2:	81 91       	ld	r24, Z+
    15e4:	7f 01       	movw	r14, r30
    15e6:	85 32       	cpi	r24, 0x25	; 37
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <vfprintf+0x7c>
    15ea:	b6 01       	movw	r22, r12
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	df d1       	rcall	.+958    	; 0x19ae <fputc>
    15f0:	e8 cf       	rjmp	.-48     	; 0x15c2 <vfprintf+0x4c>
    15f2:	91 2c       	mov	r9, r1
    15f4:	21 2c       	mov	r2, r1
    15f6:	31 2c       	mov	r3, r1
    15f8:	ff e1       	ldi	r31, 0x1F	; 31
    15fa:	f3 15       	cp	r31, r3
    15fc:	d8 f0       	brcs	.+54     	; 0x1634 <vfprintf+0xbe>
    15fe:	8b 32       	cpi	r24, 0x2B	; 43
    1600:	79 f0       	breq	.+30     	; 0x1620 <vfprintf+0xaa>
    1602:	38 f4       	brcc	.+14     	; 0x1612 <vfprintf+0x9c>
    1604:	80 32       	cpi	r24, 0x20	; 32
    1606:	79 f0       	breq	.+30     	; 0x1626 <vfprintf+0xb0>
    1608:	83 32       	cpi	r24, 0x23	; 35
    160a:	a1 f4       	brne	.+40     	; 0x1634 <vfprintf+0xbe>
    160c:	23 2d       	mov	r18, r3
    160e:	20 61       	ori	r18, 0x10	; 16
    1610:	1d c0       	rjmp	.+58     	; 0x164c <vfprintf+0xd6>
    1612:	8d 32       	cpi	r24, 0x2D	; 45
    1614:	61 f0       	breq	.+24     	; 0x162e <vfprintf+0xb8>
    1616:	80 33       	cpi	r24, 0x30	; 48
    1618:	69 f4       	brne	.+26     	; 0x1634 <vfprintf+0xbe>
    161a:	23 2d       	mov	r18, r3
    161c:	21 60       	ori	r18, 0x01	; 1
    161e:	16 c0       	rjmp	.+44     	; 0x164c <vfprintf+0xd6>
    1620:	83 2d       	mov	r24, r3
    1622:	82 60       	ori	r24, 0x02	; 2
    1624:	38 2e       	mov	r3, r24
    1626:	e3 2d       	mov	r30, r3
    1628:	e4 60       	ori	r30, 0x04	; 4
    162a:	3e 2e       	mov	r3, r30
    162c:	2a c0       	rjmp	.+84     	; 0x1682 <vfprintf+0x10c>
    162e:	f3 2d       	mov	r31, r3
    1630:	f8 60       	ori	r31, 0x08	; 8
    1632:	1d c0       	rjmp	.+58     	; 0x166e <vfprintf+0xf8>
    1634:	37 fc       	sbrc	r3, 7
    1636:	2d c0       	rjmp	.+90     	; 0x1692 <vfprintf+0x11c>
    1638:	20 ed       	ldi	r18, 0xD0	; 208
    163a:	28 0f       	add	r18, r24
    163c:	2a 30       	cpi	r18, 0x0A	; 10
    163e:	40 f0       	brcs	.+16     	; 0x1650 <vfprintf+0xda>
    1640:	8e 32       	cpi	r24, 0x2E	; 46
    1642:	b9 f4       	brne	.+46     	; 0x1672 <vfprintf+0xfc>
    1644:	36 fc       	sbrc	r3, 6
    1646:	75 c1       	rjmp	.+746    	; 0x1932 <vfprintf+0x3bc>
    1648:	23 2d       	mov	r18, r3
    164a:	20 64       	ori	r18, 0x40	; 64
    164c:	32 2e       	mov	r3, r18
    164e:	19 c0       	rjmp	.+50     	; 0x1682 <vfprintf+0x10c>
    1650:	36 fe       	sbrs	r3, 6
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0xea>
    1654:	8a e0       	ldi	r24, 0x0A	; 10
    1656:	98 9e       	mul	r9, r24
    1658:	20 0d       	add	r18, r0
    165a:	11 24       	eor	r1, r1
    165c:	92 2e       	mov	r9, r18
    165e:	11 c0       	rjmp	.+34     	; 0x1682 <vfprintf+0x10c>
    1660:	ea e0       	ldi	r30, 0x0A	; 10
    1662:	2e 9e       	mul	r2, r30
    1664:	20 0d       	add	r18, r0
    1666:	11 24       	eor	r1, r1
    1668:	22 2e       	mov	r2, r18
    166a:	f3 2d       	mov	r31, r3
    166c:	f0 62       	ori	r31, 0x20	; 32
    166e:	3f 2e       	mov	r3, r31
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <vfprintf+0x10c>
    1672:	8c 36       	cpi	r24, 0x6C	; 108
    1674:	21 f4       	brne	.+8      	; 0x167e <vfprintf+0x108>
    1676:	83 2d       	mov	r24, r3
    1678:	80 68       	ori	r24, 0x80	; 128
    167a:	38 2e       	mov	r3, r24
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0x10c>
    167e:	88 36       	cpi	r24, 0x68	; 104
    1680:	41 f4       	brne	.+16     	; 0x1692 <vfprintf+0x11c>
    1682:	f7 01       	movw	r30, r14
    1684:	93 fd       	sbrc	r25, 3
    1686:	85 91       	lpm	r24, Z+
    1688:	93 ff       	sbrs	r25, 3
    168a:	81 91       	ld	r24, Z+
    168c:	7f 01       	movw	r14, r30
    168e:	81 11       	cpse	r24, r1
    1690:	b3 cf       	rjmp	.-154    	; 0x15f8 <vfprintf+0x82>
    1692:	98 2f       	mov	r25, r24
    1694:	9f 7d       	andi	r25, 0xDF	; 223
    1696:	95 54       	subi	r25, 0x45	; 69
    1698:	93 30       	cpi	r25, 0x03	; 3
    169a:	28 f4       	brcc	.+10     	; 0x16a6 <vfprintf+0x130>
    169c:	0c 5f       	subi	r16, 0xFC	; 252
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	9f e3       	ldi	r25, 0x3F	; 63
    16a2:	99 83       	std	Y+1, r25	; 0x01
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <vfprintf+0x14a>
    16a6:	83 36       	cpi	r24, 0x63	; 99
    16a8:	31 f0       	breq	.+12     	; 0x16b6 <vfprintf+0x140>
    16aa:	83 37       	cpi	r24, 0x73	; 115
    16ac:	71 f0       	breq	.+28     	; 0x16ca <vfprintf+0x154>
    16ae:	83 35       	cpi	r24, 0x53	; 83
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <vfprintf+0x13e>
    16b2:	55 c0       	rjmp	.+170    	; 0x175e <vfprintf+0x1e8>
    16b4:	20 c0       	rjmp	.+64     	; 0x16f6 <vfprintf+0x180>
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 81       	ld	r24, Z
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	0e 5f       	subi	r16, 0xFE	; 254
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	88 24       	eor	r8, r8
    16c2:	83 94       	inc	r8
    16c4:	91 2c       	mov	r9, r1
    16c6:	53 01       	movw	r10, r6
    16c8:	12 c0       	rjmp	.+36     	; 0x16ee <vfprintf+0x178>
    16ca:	28 01       	movw	r4, r16
    16cc:	f2 e0       	ldi	r31, 0x02	; 2
    16ce:	4f 0e       	add	r4, r31
    16d0:	51 1c       	adc	r5, r1
    16d2:	f8 01       	movw	r30, r16
    16d4:	a0 80       	ld	r10, Z
    16d6:	b1 80       	ldd	r11, Z+1	; 0x01
    16d8:	36 fe       	sbrs	r3, 6
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <vfprintf+0x16c>
    16dc:	69 2d       	mov	r22, r9
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x170>
    16e2:	6f ef       	ldi	r22, 0xFF	; 255
    16e4:	7f ef       	ldi	r23, 0xFF	; 255
    16e6:	c5 01       	movw	r24, r10
    16e8:	57 d1       	rcall	.+686    	; 0x1998 <strnlen>
    16ea:	4c 01       	movw	r8, r24
    16ec:	82 01       	movw	r16, r4
    16ee:	f3 2d       	mov	r31, r3
    16f0:	ff 77       	andi	r31, 0x7F	; 127
    16f2:	3f 2e       	mov	r3, r31
    16f4:	15 c0       	rjmp	.+42     	; 0x1720 <vfprintf+0x1aa>
    16f6:	28 01       	movw	r4, r16
    16f8:	22 e0       	ldi	r18, 0x02	; 2
    16fa:	42 0e       	add	r4, r18
    16fc:	51 1c       	adc	r5, r1
    16fe:	f8 01       	movw	r30, r16
    1700:	a0 80       	ld	r10, Z
    1702:	b1 80       	ldd	r11, Z+1	; 0x01
    1704:	36 fe       	sbrs	r3, 6
    1706:	03 c0       	rjmp	.+6      	; 0x170e <vfprintf+0x198>
    1708:	69 2d       	mov	r22, r9
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x19c>
    170e:	6f ef       	ldi	r22, 0xFF	; 255
    1710:	7f ef       	ldi	r23, 0xFF	; 255
    1712:	c5 01       	movw	r24, r10
    1714:	2d d1       	rcall	.+602    	; 0x1970 <strnlen_P>
    1716:	4c 01       	movw	r8, r24
    1718:	f3 2d       	mov	r31, r3
    171a:	f0 68       	ori	r31, 0x80	; 128
    171c:	3f 2e       	mov	r3, r31
    171e:	82 01       	movw	r16, r4
    1720:	33 fc       	sbrc	r3, 3
    1722:	19 c0       	rjmp	.+50     	; 0x1756 <vfprintf+0x1e0>
    1724:	82 2d       	mov	r24, r2
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 16       	cp	r8, r24
    172a:	99 06       	cpc	r9, r25
    172c:	a0 f4       	brcc	.+40     	; 0x1756 <vfprintf+0x1e0>
    172e:	b6 01       	movw	r22, r12
    1730:	80 e2       	ldi	r24, 0x20	; 32
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	3c d1       	rcall	.+632    	; 0x19ae <fputc>
    1736:	2a 94       	dec	r2
    1738:	f5 cf       	rjmp	.-22     	; 0x1724 <vfprintf+0x1ae>
    173a:	f5 01       	movw	r30, r10
    173c:	37 fc       	sbrc	r3, 7
    173e:	85 91       	lpm	r24, Z+
    1740:	37 fe       	sbrs	r3, 7
    1742:	81 91       	ld	r24, Z+
    1744:	5f 01       	movw	r10, r30
    1746:	b6 01       	movw	r22, r12
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	31 d1       	rcall	.+610    	; 0x19ae <fputc>
    174c:	21 10       	cpse	r2, r1
    174e:	2a 94       	dec	r2
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	82 1a       	sub	r8, r18
    1754:	91 08       	sbc	r9, r1
    1756:	81 14       	cp	r8, r1
    1758:	91 04       	cpc	r9, r1
    175a:	79 f7       	brne	.-34     	; 0x173a <vfprintf+0x1c4>
    175c:	e1 c0       	rjmp	.+450    	; 0x1920 <vfprintf+0x3aa>
    175e:	84 36       	cpi	r24, 0x64	; 100
    1760:	11 f0       	breq	.+4      	; 0x1766 <vfprintf+0x1f0>
    1762:	89 36       	cpi	r24, 0x69	; 105
    1764:	39 f5       	brne	.+78     	; 0x17b4 <vfprintf+0x23e>
    1766:	f8 01       	movw	r30, r16
    1768:	37 fe       	sbrs	r3, 7
    176a:	07 c0       	rjmp	.+14     	; 0x177a <vfprintf+0x204>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	08 c0       	rjmp	.+16     	; 0x178a <vfprintf+0x214>
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	07 2e       	mov	r0, r23
    1780:	00 0c       	add	r0, r0
    1782:	88 0b       	sbc	r24, r24
    1784:	99 0b       	sbc	r25, r25
    1786:	0e 5f       	subi	r16, 0xFE	; 254
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	f3 2d       	mov	r31, r3
    178c:	ff 76       	andi	r31, 0x6F	; 111
    178e:	3f 2e       	mov	r3, r31
    1790:	97 ff       	sbrs	r25, 7
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <vfprintf+0x230>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	f0 68       	ori	r31, 0x80	; 128
    17a4:	3f 2e       	mov	r3, r31
    17a6:	2a e0       	ldi	r18, 0x0A	; 10
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	a3 01       	movw	r20, r6
    17ac:	3c d1       	rcall	.+632    	; 0x1a26 <__ultoa_invert>
    17ae:	88 2e       	mov	r8, r24
    17b0:	86 18       	sub	r8, r6
    17b2:	44 c0       	rjmp	.+136    	; 0x183c <vfprintf+0x2c6>
    17b4:	85 37       	cpi	r24, 0x75	; 117
    17b6:	31 f4       	brne	.+12     	; 0x17c4 <vfprintf+0x24e>
    17b8:	23 2d       	mov	r18, r3
    17ba:	2f 7e       	andi	r18, 0xEF	; 239
    17bc:	b2 2e       	mov	r11, r18
    17be:	2a e0       	ldi	r18, 0x0A	; 10
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	25 c0       	rjmp	.+74     	; 0x180e <vfprintf+0x298>
    17c4:	93 2d       	mov	r25, r3
    17c6:	99 7f       	andi	r25, 0xF9	; 249
    17c8:	b9 2e       	mov	r11, r25
    17ca:	8f 36       	cpi	r24, 0x6F	; 111
    17cc:	c1 f0       	breq	.+48     	; 0x17fe <vfprintf+0x288>
    17ce:	18 f4       	brcc	.+6      	; 0x17d6 <vfprintf+0x260>
    17d0:	88 35       	cpi	r24, 0x58	; 88
    17d2:	79 f0       	breq	.+30     	; 0x17f2 <vfprintf+0x27c>
    17d4:	ae c0       	rjmp	.+348    	; 0x1932 <vfprintf+0x3bc>
    17d6:	80 37       	cpi	r24, 0x70	; 112
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <vfprintf+0x26a>
    17da:	88 37       	cpi	r24, 0x78	; 120
    17dc:	21 f0       	breq	.+8      	; 0x17e6 <vfprintf+0x270>
    17de:	a9 c0       	rjmp	.+338    	; 0x1932 <vfprintf+0x3bc>
    17e0:	e9 2f       	mov	r30, r25
    17e2:	e0 61       	ori	r30, 0x10	; 16
    17e4:	be 2e       	mov	r11, r30
    17e6:	b4 fe       	sbrs	r11, 4
    17e8:	0d c0       	rjmp	.+26     	; 0x1804 <vfprintf+0x28e>
    17ea:	fb 2d       	mov	r31, r11
    17ec:	f4 60       	ori	r31, 0x04	; 4
    17ee:	bf 2e       	mov	r11, r31
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <vfprintf+0x28e>
    17f2:	34 fe       	sbrs	r3, 4
    17f4:	0a c0       	rjmp	.+20     	; 0x180a <vfprintf+0x294>
    17f6:	29 2f       	mov	r18, r25
    17f8:	26 60       	ori	r18, 0x06	; 6
    17fa:	b2 2e       	mov	r11, r18
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x294>
    17fe:	28 e0       	ldi	r18, 0x08	; 8
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	05 c0       	rjmp	.+10     	; 0x180e <vfprintf+0x298>
    1804:	20 e1       	ldi	r18, 0x10	; 16
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x298>
    180a:	20 e1       	ldi	r18, 0x10	; 16
    180c:	32 e0       	ldi	r19, 0x02	; 2
    180e:	f8 01       	movw	r30, r16
    1810:	b7 fe       	sbrs	r11, 7
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <vfprintf+0x2ac>
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	0c 5f       	subi	r16, 0xFC	; 252
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	06 c0       	rjmp	.+12     	; 0x182e <vfprintf+0x2b8>
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 5f       	subi	r16, 0xFE	; 254
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	a3 01       	movw	r20, r6
    1830:	fa d0       	rcall	.+500    	; 0x1a26 <__ultoa_invert>
    1832:	88 2e       	mov	r8, r24
    1834:	86 18       	sub	r8, r6
    1836:	fb 2d       	mov	r31, r11
    1838:	ff 77       	andi	r31, 0x7F	; 127
    183a:	3f 2e       	mov	r3, r31
    183c:	36 fe       	sbrs	r3, 6
    183e:	0d c0       	rjmp	.+26     	; 0x185a <vfprintf+0x2e4>
    1840:	23 2d       	mov	r18, r3
    1842:	2e 7f       	andi	r18, 0xFE	; 254
    1844:	a2 2e       	mov	r10, r18
    1846:	89 14       	cp	r8, r9
    1848:	58 f4       	brcc	.+22     	; 0x1860 <vfprintf+0x2ea>
    184a:	34 fe       	sbrs	r3, 4
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <vfprintf+0x2ee>
    184e:	32 fc       	sbrc	r3, 2
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <vfprintf+0x2ee>
    1852:	83 2d       	mov	r24, r3
    1854:	8e 7e       	andi	r24, 0xEE	; 238
    1856:	a8 2e       	mov	r10, r24
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <vfprintf+0x2ee>
    185a:	b8 2c       	mov	r11, r8
    185c:	a3 2c       	mov	r10, r3
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <vfprintf+0x2f0>
    1860:	b8 2c       	mov	r11, r8
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <vfprintf+0x2f0>
    1864:	b9 2c       	mov	r11, r9
    1866:	a4 fe       	sbrs	r10, 4
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <vfprintf+0x312>
    186a:	fe 01       	movw	r30, r28
    186c:	e8 0d       	add	r30, r8
    186e:	f1 1d       	adc	r31, r1
    1870:	80 81       	ld	r24, Z
    1872:	80 33       	cpi	r24, 0x30	; 48
    1874:	21 f4       	brne	.+8      	; 0x187e <vfprintf+0x308>
    1876:	9a 2d       	mov	r25, r10
    1878:	99 7e       	andi	r25, 0xE9	; 233
    187a:	a9 2e       	mov	r10, r25
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <vfprintf+0x31a>
    187e:	a2 fe       	sbrs	r10, 2
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x318>
    1882:	b3 94       	inc	r11
    1884:	b3 94       	inc	r11
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <vfprintf+0x31a>
    1888:	8a 2d       	mov	r24, r10
    188a:	86 78       	andi	r24, 0x86	; 134
    188c:	09 f0       	breq	.+2      	; 0x1890 <vfprintf+0x31a>
    188e:	b3 94       	inc	r11
    1890:	a3 fc       	sbrc	r10, 3
    1892:	10 c0       	rjmp	.+32     	; 0x18b4 <vfprintf+0x33e>
    1894:	a0 fe       	sbrs	r10, 0
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <vfprintf+0x32e>
    1898:	b2 14       	cp	r11, r2
    189a:	80 f4       	brcc	.+32     	; 0x18bc <vfprintf+0x346>
    189c:	28 0c       	add	r2, r8
    189e:	92 2c       	mov	r9, r2
    18a0:	9b 18       	sub	r9, r11
    18a2:	0d c0       	rjmp	.+26     	; 0x18be <vfprintf+0x348>
    18a4:	b2 14       	cp	r11, r2
    18a6:	58 f4       	brcc	.+22     	; 0x18be <vfprintf+0x348>
    18a8:	b6 01       	movw	r22, r12
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	7f d0       	rcall	.+254    	; 0x19ae <fputc>
    18b0:	b3 94       	inc	r11
    18b2:	f8 cf       	rjmp	.-16     	; 0x18a4 <vfprintf+0x32e>
    18b4:	b2 14       	cp	r11, r2
    18b6:	18 f4       	brcc	.+6      	; 0x18be <vfprintf+0x348>
    18b8:	2b 18       	sub	r2, r11
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <vfprintf+0x34a>
    18bc:	98 2c       	mov	r9, r8
    18be:	21 2c       	mov	r2, r1
    18c0:	a4 fe       	sbrs	r10, 4
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <vfprintf+0x36c>
    18c4:	b6 01       	movw	r22, r12
    18c6:	80 e3       	ldi	r24, 0x30	; 48
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	71 d0       	rcall	.+226    	; 0x19ae <fputc>
    18cc:	a2 fe       	sbrs	r10, 2
    18ce:	16 c0       	rjmp	.+44     	; 0x18fc <vfprintf+0x386>
    18d0:	a1 fc       	sbrc	r10, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x364>
    18d4:	88 e7       	ldi	r24, 0x78	; 120
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x368>
    18da:	88 e5       	ldi	r24, 0x58	; 88
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	b6 01       	movw	r22, r12
    18e0:	0c c0       	rjmp	.+24     	; 0x18fa <vfprintf+0x384>
    18e2:	8a 2d       	mov	r24, r10
    18e4:	86 78       	andi	r24, 0x86	; 134
    18e6:	51 f0       	breq	.+20     	; 0x18fc <vfprintf+0x386>
    18e8:	a1 fe       	sbrs	r10, 1
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x37a>
    18ec:	8b e2       	ldi	r24, 0x2B	; 43
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <vfprintf+0x37c>
    18f0:	80 e2       	ldi	r24, 0x20	; 32
    18f2:	a7 fc       	sbrc	r10, 7
    18f4:	8d e2       	ldi	r24, 0x2D	; 45
    18f6:	b6 01       	movw	r22, r12
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	59 d0       	rcall	.+178    	; 0x19ae <fputc>
    18fc:	89 14       	cp	r8, r9
    18fe:	30 f4       	brcc	.+12     	; 0x190c <vfprintf+0x396>
    1900:	b6 01       	movw	r22, r12
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	53 d0       	rcall	.+166    	; 0x19ae <fputc>
    1908:	9a 94       	dec	r9
    190a:	f8 cf       	rjmp	.-16     	; 0x18fc <vfprintf+0x386>
    190c:	8a 94       	dec	r8
    190e:	f3 01       	movw	r30, r6
    1910:	e8 0d       	add	r30, r8
    1912:	f1 1d       	adc	r31, r1
    1914:	80 81       	ld	r24, Z
    1916:	b6 01       	movw	r22, r12
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	49 d0       	rcall	.+146    	; 0x19ae <fputc>
    191c:	81 10       	cpse	r8, r1
    191e:	f6 cf       	rjmp	.-20     	; 0x190c <vfprintf+0x396>
    1920:	22 20       	and	r2, r2
    1922:	09 f4       	brne	.+2      	; 0x1926 <vfprintf+0x3b0>
    1924:	4e ce       	rjmp	.-868    	; 0x15c2 <vfprintf+0x4c>
    1926:	b6 01       	movw	r22, r12
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	40 d0       	rcall	.+128    	; 0x19ae <fputc>
    192e:	2a 94       	dec	r2
    1930:	f7 cf       	rjmp	.-18     	; 0x1920 <vfprintf+0x3aa>
    1932:	f6 01       	movw	r30, r12
    1934:	86 81       	ldd	r24, Z+6	; 0x06
    1936:	97 81       	ldd	r25, Z+7	; 0x07
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0x3c8>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	9f ef       	ldi	r25, 0xFF	; 255
    193e:	2b 96       	adiw	r28, 0x0b	; 11
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	4f 90       	pop	r4
    196a:	3f 90       	pop	r3
    196c:	2f 90       	pop	r2
    196e:	08 95       	ret

00001970 <strnlen_P>:
    1970:	fc 01       	movw	r30, r24
    1972:	05 90       	lpm	r0, Z+
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	70 40       	sbci	r23, 0x00	; 0
    1978:	01 10       	cpse	r0, r1
    197a:	d8 f7       	brcc	.-10     	; 0x1972 <strnlen_P+0x2>
    197c:	80 95       	com	r24
    197e:	90 95       	com	r25
    1980:	8e 0f       	add	r24, r30
    1982:	9f 1f       	adc	r25, r31
    1984:	08 95       	ret

00001986 <memcpy>:
    1986:	fb 01       	movw	r30, r22
    1988:	dc 01       	movw	r26, r24
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <memcpy+0xa>
    198c:	01 90       	ld	r0, Z+
    198e:	0d 92       	st	X+, r0
    1990:	41 50       	subi	r20, 0x01	; 1
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	d8 f7       	brcc	.-10     	; 0x198c <memcpy+0x6>
    1996:	08 95       	ret

00001998 <strnlen>:
    1998:	fc 01       	movw	r30, r24
    199a:	61 50       	subi	r22, 0x01	; 1
    199c:	70 40       	sbci	r23, 0x00	; 0
    199e:	01 90       	ld	r0, Z+
    19a0:	01 10       	cpse	r0, r1
    19a2:	d8 f7       	brcc	.-10     	; 0x199a <strnlen+0x2>
    19a4:	80 95       	com	r24
    19a6:	90 95       	com	r25
    19a8:	8e 0f       	add	r24, r30
    19aa:	9f 1f       	adc	r25, r31
    19ac:	08 95       	ret

000019ae <fputc>:
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	fb 01       	movw	r30, r22
    19b8:	23 81       	ldd	r18, Z+3	; 0x03
    19ba:	21 fd       	sbrc	r18, 1
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <fputc+0x16>
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	9f ef       	ldi	r25, 0xFF	; 255
    19c2:	2c c0       	rjmp	.+88     	; 0x1a1c <fputc+0x6e>
    19c4:	22 ff       	sbrs	r18, 2
    19c6:	16 c0       	rjmp	.+44     	; 0x19f4 <fputc+0x46>
    19c8:	46 81       	ldd	r20, Z+6	; 0x06
    19ca:	57 81       	ldd	r21, Z+7	; 0x07
    19cc:	24 81       	ldd	r18, Z+4	; 0x04
    19ce:	35 81       	ldd	r19, Z+5	; 0x05
    19d0:	42 17       	cp	r20, r18
    19d2:	53 07       	cpc	r21, r19
    19d4:	44 f4       	brge	.+16     	; 0x19e6 <fputc+0x38>
    19d6:	a0 81       	ld	r26, Z
    19d8:	b1 81       	ldd	r27, Z+1	; 0x01
    19da:	9d 01       	movw	r18, r26
    19dc:	2f 5f       	subi	r18, 0xFF	; 255
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	31 83       	std	Z+1, r19	; 0x01
    19e2:	20 83       	st	Z, r18
    19e4:	8c 93       	st	X, r24
    19e6:	26 81       	ldd	r18, Z+6	; 0x06
    19e8:	37 81       	ldd	r19, Z+7	; 0x07
    19ea:	2f 5f       	subi	r18, 0xFF	; 255
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	37 83       	std	Z+7, r19	; 0x07
    19f0:	26 83       	std	Z+6, r18	; 0x06
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <fputc+0x6e>
    19f4:	8b 01       	movw	r16, r22
    19f6:	ec 01       	movw	r28, r24
    19f8:	fb 01       	movw	r30, r22
    19fa:	00 84       	ldd	r0, Z+8	; 0x08
    19fc:	f1 85       	ldd	r31, Z+9	; 0x09
    19fe:	e0 2d       	mov	r30, r0
    1a00:	09 95       	icall
    1a02:	89 2b       	or	r24, r25
    1a04:	e1 f6       	brne	.-72     	; 0x19be <fputc+0x10>
    1a06:	d8 01       	movw	r26, r16
    1a08:	16 96       	adiw	r26, 0x06	; 6
    1a0a:	8d 91       	ld	r24, X+
    1a0c:	9c 91       	ld	r25, X
    1a0e:	17 97       	sbiw	r26, 0x07	; 7
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	17 96       	adiw	r26, 0x07	; 7
    1a14:	9c 93       	st	X, r25
    1a16:	8e 93       	st	-X, r24
    1a18:	16 97       	sbiw	r26, 0x06	; 6
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	08 95       	ret

00001a26 <__ultoa_invert>:
    1a26:	fa 01       	movw	r30, r20
    1a28:	aa 27       	eor	r26, r26
    1a2a:	28 30       	cpi	r18, 0x08	; 8
    1a2c:	51 f1       	breq	.+84     	; 0x1a82 <__ultoa_invert+0x5c>
    1a2e:	20 31       	cpi	r18, 0x10	; 16
    1a30:	81 f1       	breq	.+96     	; 0x1a92 <__ultoa_invert+0x6c>
    1a32:	e8 94       	clt
    1a34:	6f 93       	push	r22
    1a36:	6e 7f       	andi	r22, 0xFE	; 254
    1a38:	6e 5f       	subi	r22, 0xFE	; 254
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	af 4f       	sbci	r26, 0xFF	; 255
    1a42:	b1 e0       	ldi	r27, 0x01	; 1
    1a44:	3e d0       	rcall	.+124    	; 0x1ac2 <__ultoa_invert+0x9c>
    1a46:	b4 e0       	ldi	r27, 0x04	; 4
    1a48:	3c d0       	rcall	.+120    	; 0x1ac2 <__ultoa_invert+0x9c>
    1a4a:	67 0f       	add	r22, r23
    1a4c:	78 1f       	adc	r23, r24
    1a4e:	89 1f       	adc	r24, r25
    1a50:	9a 1f       	adc	r25, r26
    1a52:	a1 1d       	adc	r26, r1
    1a54:	68 0f       	add	r22, r24
    1a56:	79 1f       	adc	r23, r25
    1a58:	8a 1f       	adc	r24, r26
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	6a 0f       	add	r22, r26
    1a60:	71 1d       	adc	r23, r1
    1a62:	81 1d       	adc	r24, r1
    1a64:	91 1d       	adc	r25, r1
    1a66:	a1 1d       	adc	r26, r1
    1a68:	20 d0       	rcall	.+64     	; 0x1aaa <__ultoa_invert+0x84>
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <__ultoa_invert+0x48>
    1a6c:	68 94       	set
    1a6e:	3f 91       	pop	r19
    1a70:	2a e0       	ldi	r18, 0x0A	; 10
    1a72:	26 9f       	mul	r18, r22
    1a74:	11 24       	eor	r1, r1
    1a76:	30 19       	sub	r19, r0
    1a78:	30 5d       	subi	r19, 0xD0	; 208
    1a7a:	31 93       	st	Z+, r19
    1a7c:	de f6       	brtc	.-74     	; 0x1a34 <__ultoa_invert+0xe>
    1a7e:	cf 01       	movw	r24, r30
    1a80:	08 95       	ret
    1a82:	46 2f       	mov	r20, r22
    1a84:	47 70       	andi	r20, 0x07	; 7
    1a86:	40 5d       	subi	r20, 0xD0	; 208
    1a88:	41 93       	st	Z+, r20
    1a8a:	b3 e0       	ldi	r27, 0x03	; 3
    1a8c:	0f d0       	rcall	.+30     	; 0x1aac <__ultoa_invert+0x86>
    1a8e:	c9 f7       	brne	.-14     	; 0x1a82 <__ultoa_invert+0x5c>
    1a90:	f6 cf       	rjmp	.-20     	; 0x1a7e <__ultoa_invert+0x58>
    1a92:	46 2f       	mov	r20, r22
    1a94:	4f 70       	andi	r20, 0x0F	; 15
    1a96:	40 5d       	subi	r20, 0xD0	; 208
    1a98:	4a 33       	cpi	r20, 0x3A	; 58
    1a9a:	18 f0       	brcs	.+6      	; 0x1aa2 <__ultoa_invert+0x7c>
    1a9c:	49 5d       	subi	r20, 0xD9	; 217
    1a9e:	31 fd       	sbrc	r19, 1
    1aa0:	40 52       	subi	r20, 0x20	; 32
    1aa2:	41 93       	st	Z+, r20
    1aa4:	02 d0       	rcall	.+4      	; 0x1aaa <__ultoa_invert+0x84>
    1aa6:	a9 f7       	brne	.-22     	; 0x1a92 <__ultoa_invert+0x6c>
    1aa8:	ea cf       	rjmp	.-44     	; 0x1a7e <__ultoa_invert+0x58>
    1aaa:	b4 e0       	ldi	r27, 0x04	; 4
    1aac:	a6 95       	lsr	r26
    1aae:	97 95       	ror	r25
    1ab0:	87 95       	ror	r24
    1ab2:	77 95       	ror	r23
    1ab4:	67 95       	ror	r22
    1ab6:	ba 95       	dec	r27
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0x86>
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	61 05       	cpc	r22, r1
    1abe:	71 05       	cpc	r23, r1
    1ac0:	08 95       	ret
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	0a 2e       	mov	r0, r26
    1ac8:	06 94       	lsr	r0
    1aca:	57 95       	ror	r21
    1acc:	47 95       	ror	r20
    1ace:	37 95       	ror	r19
    1ad0:	27 95       	ror	r18
    1ad2:	ba 95       	dec	r27
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__ultoa_invert+0xa2>
    1ad6:	62 0f       	add	r22, r18
    1ad8:	73 1f       	adc	r23, r19
    1ada:	84 1f       	adc	r24, r20
    1adc:	95 1f       	adc	r25, r21
    1ade:	a0 1d       	adc	r26, r0
    1ae0:	08 95       	ret

00001ae2 <_exit>:
    1ae2:	f8 94       	cli

00001ae4 <__stop_program>:
    1ae4:	ff cf       	rjmp	.-2      	; 0x1ae4 <__stop_program>
