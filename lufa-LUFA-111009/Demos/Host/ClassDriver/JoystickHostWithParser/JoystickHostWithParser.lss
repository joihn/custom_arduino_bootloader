
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000023f2  00002486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800124  00800124  000024aa  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000024aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000719c  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002513  00000000  00000000  00009a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003888  00000000  00000000  0000bf23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c10  00000000  00000000  0000f7ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bf1  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c72  00000000  00000000  00012fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  00017c1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c1       	rjmp	.+594    	; 0x254 <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	d9 c5       	rjmp	.+2994   	; 0xbdc <__vector_10>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2f c1       	rjmp	.+606    	; 0x290 <__bad_interrupt>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	19 c1       	rjmp	.+562    	; 0x290 <__bad_interrupt>
      5e:	00 00       	nop
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	15 c1       	rjmp	.+554    	; 0x290 <__bad_interrupt>
      66:	00 00       	nop
      68:	13 c1       	rjmp	.+550    	; 0x290 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ff c0       	rjmp	.+510    	; 0x290 <__bad_interrupt>
      92:	00 00       	nop
      94:	fd c0       	rjmp	.+506    	; 0x290 <__bad_interrupt>
      96:	00 00       	nop
      98:	b3 03       	fmuls	r19, r19
      9a:	a4 04       	cpc	r10, r4
      9c:	d1 03       	fmuls	r21, r17
      9e:	db 03       	fmulsu	r21, r19
      a0:	06 04       	cpc	r0, r6
      a2:	2e 04       	cpc	r2, r14
      a4:	39 04       	cpc	r3, r9
      a6:	4a 04       	cpc	r4, r10
      a8:	66 04       	cpc	r6, r6
      aa:	8d 04       	cpc	r8, r13

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4517>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4512>:
     131:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     141:	74 65 64 2e 0d 0a 00                                ted....

00000148 <__c.4510>:
     148:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     158:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     168:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     178:	64 20 4a 6f 79 73 74 69 63 6b 2e 0d 0a 00           d Joystick....

00000186 <__c.4508>:
     186:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     196:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a6:	6f 6e 2e 0d 0a 00                                   on....

000001ac <__c.4506>:
     1ac:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1bc:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4a 6f 79 73     Not a Valid Joys
     1cc:	74 69 63 6b 2e 0d 0a 00                             tick....

000001d4 <__c.4504>:
     1d4:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1e4:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1f4:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000201 <__c.4497>:
     201:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     211:	68 65 64 2e 0d 0a 00                                hed....

00000218 <__c.4492>:
     218:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     228:	0d 0a 00                                            ...

0000022b <__c.4471>:
     22b:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 6f     .[36mJoystick Ho
     23b:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     24b:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	d0 e2       	ldi	r29, 0x20	; 32
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	e2 ef       	ldi	r30, 0xF2	; 242
     268:	f3 e2       	ldi	r31, 0x23	; 35
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0b bf       	out	0x3b, r16	; 59
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x14>
     270:	07 90       	elpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	a4 32       	cpi	r26, 0x24	; 36
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0x10>

0000027a <__do_clear_bss>:
     27a:	25 e0       	ldi	r18, 0x05	; 5
     27c:	a4 e2       	ldi	r26, 0x24	; 36
     27e:	b1 e0       	ldi	r27, 0x01	; 1
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	af 31       	cpi	r26, 0x1F	; 31
     286:	b2 07       	cpc	r27, r18
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>
     28a:	ff d0       	rcall	.+510    	; 0x48a <main>
     28c:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     292:	9b b1       	in	r25, 0x0b	; 11
     294:	9f 70       	andi	r25, 0x0F	; 15
     296:	89 2b       	or	r24, r25
     298:	8b b9       	out	0x0b, r24	; 11
     29a:	08 95       	ret

0000029c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     29c:	84 b7       	in	r24, 0x34	; 52
     29e:	87 7f       	andi	r24, 0xF7	; 247
     2a0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	a8 95       	wdr
     2a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ac:	88 61       	ori	r24, 0x18	; 24
     2ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2b6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	80 e8       	ldi	r24, 0x80	; 128
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2c8:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2ca:	83 e3       	ldi	r24, 0x33	; 51
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2d2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2d6:	86 e0       	ldi	r24, 0x06	; 6
     2d8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2dc:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2e6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2e8:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ea:	8a b1       	in	r24, 0x0a	; 10
     2ec:	80 6f       	ori	r24, 0xF0	; 240
     2ee:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2f0:	8b b1       	in	r24, 0x0b	; 11
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2f6:	5c d4       	rcall	.+2232   	; 0xbb0 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     2f8:	a9 e1       	ldi	r26, 0x19	; 25
     2fa:	b5 e0       	ldi	r27, 0x05	; 5
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	f5 e0       	ldi	r31, 0x05	; 5
     300:	11 96       	adiw	r26, 0x01	; 1
     302:	fc 93       	st	X, r31
     304:	ee 93       	st	-X, r30
					stdout = Stream;
     306:	13 96       	adiw	r26, 0x03	; 3
     308:	fc 93       	st	X, r31
     30a:	ee 93       	st	-X, r30
     30c:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     30e:	8e e0       	ldi	r24, 0x0E	; 14
     310:	df 01       	movw	r26, r30
     312:	1d 92       	st	X+, r1
     314:	8a 95       	dec	r24
     316:	e9 f7       	brne	.-6      	; 0x312 <SetupHardware+0x76>
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	83 83       	std	Z+3, r24	; 0x03
     31c:	8e ec       	ldi	r24, 0xCE	; 206
     31e:	9e e0       	ldi	r25, 0x0E	; 14
     320:	91 87       	std	Z+9, r25	; 0x09
     322:	80 87       	std	Z+8, r24	; 0x08
     324:	87 ed       	ldi	r24, 0xD7	; 215
     326:	9e e0       	ldi	r25, 0x0E	; 14
     328:	93 87       	std	Z+11, r25	; 0x0b
     32a:	82 87       	std	Z+10, r24	; 0x0a
     32c:	08 95       	ret

0000032e <JoystickHost_Task>:

/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
     32e:	5f 92       	push	r5
     330:	6f 92       	push	r6
     332:	7f 92       	push	r7
     334:	8f 92       	push	r8
     336:	9f 92       	push	r9
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     350:	cd b6       	in	r12, 0x3d	; 61
     352:	de b6       	in	r13, 0x3e	; 62
/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     354:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
     358:	8b 30       	cpi	r24, 0x0B	; 11
     35a:	09 f0       	breq	.+2      	; 0x35e <JoystickHost_Task+0x30>
     35c:	81 c0       	rjmp	.+258    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	  return;

	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <HID_Host_IsReportReceived>
     366:	88 23       	and	r24, r24
     368:	09 f4       	brne	.+2      	; 0x36c <JoystickHost_Task+0x3e>
     36a:	7a c0       	rjmp	.+244    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	{
     36c:	ad b6       	in	r10, 0x3d	; 61
     36e:	be b6       	in	r11, 0x3e	; 62
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
     370:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__DATA_REGION_ORIGIN__+0x12>
     374:	2d b7       	in	r18, 0x3d	; 61
     376:	3e b7       	in	r19, 0x3e	; 62
     378:	28 1b       	sub	r18, r24
     37a:	31 09       	sbc	r19, r1
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	3e bf       	out	0x3e, r19	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	2d bf       	out	0x3d, r18	; 61
     386:	8d b7       	in	r24, 0x3d	; 61
     388:	9e b7       	in	r25, 0x3e	; 62
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	7c 01       	movw	r14, r24
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);
     38e:	bc 01       	movw	r22, r24
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     398:	61 2c       	mov	r6, r1
	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     39a:	71 2c       	mov	r7, r1

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     39c:	9a e2       	ldi	r25, 0x2A	; 42
     39e:	59 2e       	mov	r5, r25
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	82 2e       	mov	r8, r18
     3a4:	91 2c       	mov	r9, r1
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     3a6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     3aa:	68 16       	cp	r6, r24
     3ac:	08 f0       	brcs	.+2      	; 0x3b0 <JoystickHost_Task+0x82>
     3ae:	51 c0       	rjmp	.+162    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     3b0:	56 9c       	mul	r5, r6
     3b2:	80 01       	movw	r16, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	b8 01       	movw	r22, r16
     3b8:	6b 5d       	subi	r22, 0xDB	; 219
     3ba:	7e 4f       	sbci	r23, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(JoystickReport, ReportItem)))
     3bc:	c7 01       	movw	r24, r14
     3be:	0e 94 2c 0c 	call	0x1858	; 0x1858 <USB_GetHIDReportItemInfo>
     3c2:	88 23       	and	r24, r24
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <JoystickHost_Task+0x9a>
     3c6:	43 c0       	rjmp	.+134    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     3c8:	f8 01       	movw	r30, r16
     3ca:	ec 5d       	subi	r30, 0xDC	; 220
     3cc:	fe 4f       	sbci	r31, 0xFE	; 254
     3ce:	82 85       	ldd	r24, Z+10	; 0x0a
     3d0:	93 85       	ldd	r25, Z+11	; 0x0b
     3d2:	89 30       	cpi	r24, 0x09	; 9
     3d4:	91 05       	cpc	r25, r1
     3d6:	71 f4       	brne	.+28     	; 0x3f4 <JoystickHost_Task+0xc6>
     3d8:	83 81       	ldd	r24, Z+3	; 0x03
     3da:	81 11       	cpse	r24, r1
     3dc:	38 c0       	rjmp	.+112    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     3de:	83 a1       	ldd	r24, Z+35	; 0x23
     3e0:	94 a1       	ldd	r25, Z+36	; 0x24
     3e2:	a5 a1       	ldd	r26, Z+37	; 0x25
     3e4:	b6 a1       	ldd	r27, Z+38	; 0x26
     3e6:	89 2b       	or	r24, r25
     3e8:	8a 2b       	or	r24, r26
     3ea:	8b 2b       	or	r24, r27
     3ec:	81 f1       	breq	.+96     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				  LEDMask = LEDS_ALL_LEDS;
     3ee:	80 ef       	ldi	r24, 0xF0	; 240
     3f0:	78 2e       	mov	r7, r24
     3f2:	2d c0       	rjmp	.+90     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	59 f5       	brne	.+86     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     3f8:	24 85       	ldd	r18, Z+12	; 0x0c
     3fa:	35 85       	ldd	r19, Z+13	; 0x0d
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3fc:	c9 01       	movw	r24, r18
     3fe:	c0 97       	sbiw	r24, 0x30	; 48
     400:	02 97       	sbiw	r24, 0x02	; 2
     402:	28 f5       	brcc	.+74     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     404:	83 81       	ldd	r24, Z+3	; 0x03
     406:	81 11       	cpse	r24, r1
     408:	22 c0       	rjmp	.+68     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     40a:	81 85       	ldd	r24, Z+9	; 0x09
     40c:	a4 01       	movw	r20, r8
     40e:	48 1b       	sub	r20, r24
     410:	51 09       	sbc	r21, r1
     412:	83 a1       	ldd	r24, Z+35	; 0x23
     414:	94 a1       	ldd	r25, Z+36	; 0x24
     416:	a5 a1       	ldd	r26, Z+37	; 0x25
     418:	b6 a1       	ldd	r27, Z+38	; 0x26
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	aa 1f       	adc	r26, r26
     422:	bb 1f       	adc	r27, r27
     424:	4a 95       	dec	r20
     426:	d2 f7       	brpl	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

				if (DeltaMovement)
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	89 f0       	breq	.+34     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     42c:	20 33       	cpi	r18, 0x30	; 48
     42e:	31 05       	cpc	r19, r1
     430:	39 f4       	brne	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     432:	18 16       	cp	r1, r24
     434:	19 06       	cpc	r1, r25
     436:	14 f0       	brlt	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43c:	80 e1       	ldi	r24, 0x10	; 16
     43e:	06 c0       	rjmp	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     440:	18 16       	cp	r1, r24
     442:	19 06       	cpc	r1, r25
     444:	14 f0       	brlt	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	80 e4       	ldi	r24, 0x40	; 64
     448:	01 c0       	rjmp	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	78 2a       	or	r7, r24
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     44e:	63 94       	inc	r6
     450:	aa cf       	rjmp	.-172    	; 0x3a6 <JoystickHost_Task+0x78>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     452:	87 2d       	mov	r24, r7
     454:	1e df       	rcall	.-452    	; 0x292 <LEDs_SetAllLEDs>
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	be be       	out	0x3e, r11	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	ad be       	out	0x3d, r10	; 61
	}
}
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de be       	out	0x3e, r13	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd be       	out	0x3d, r12	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	bf 90       	pop	r11
     47c:	af 90       	pop	r10
     47e:	9f 90       	pop	r9
     480:	8f 90       	pop	r8
     482:	7f 90       	pop	r7
     484:	6f 90       	pop	r6
     486:	5f 90       	pop	r5
     488:	08 95       	ret

0000048a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     48a:	08 df       	rcall	.-496    	; 0x29c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick Host Demo running.\r\n" ESC_FG_WHITE));
     48c:	8b e2       	ldi	r24, 0x2B	; 43
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	fd de       	rcall	.-518    	; 0x292 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		JoystickHost_Task();
     498:	78 94       	sei
     49a:	49 df       	rcall	.-366    	; 0x32e <JoystickHost_Task>

		HID_Host_USBTask(&Joystick_HID_Interface);
		USB_USBTask();
     49c:	6e d6       	rcall	.+3292   	; 0x117a <USB_USBTask>
     49e:	fd cf       	rjmp	.-6      	; 0x49a <main+0x10>

000004a0 <EVENT_USB_Host_DeviceAttached>:
     4a0:	88 e1       	ldi	r24, 0x18	; 24
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4a8:	80 ea       	ldi	r24, 0xA0	; 160
     4aa:	f3 ce       	rjmp	.-538    	; 0x292 <LEDs_SetAllLEDs>

000004ac <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4b4:	80 e1       	ldi	r24, 0x10	; 16
     4b6:	ed ce       	rjmp	.-550    	; 0x292 <LEDs_SetAllLEDs>

000004b8 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	c2 50       	subi	r28, 0x02	; 2
     4c2:	d2 40       	sbci	r29, 0x02	; 2
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4ce:	80 ea       	ldi	r24, 0xA0	; 160
     4d0:	e0 de       	rcall	.-576    	; 0x292 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	32 e0       	ldi	r19, 0x02	; 2
     4d6:	ae 01       	movw	r20, r28
     4d8:	4f 5f       	subi	r20, 0xFF	; 255
     4da:	5f 4f       	sbci	r21, 0xFF	; 255
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7d 4f       	sbci	r23, 0xFD	; 253
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	7b d4       	rcall	.+2294   	; 0xddc <USB_Host_GetDeviceConfigDescriptor>
     4e6:	88 23       	and	r24, r24
     4e8:	19 f0       	breq	.+6      	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4ea:	84 ed       	ldi	r24, 0xD4	; 212
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	18 c0       	rjmp	.+48     	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Joystick_HID_Interface,
     4f0:	cf 5f       	subi	r28, 0xFF	; 255
     4f2:	dd 4f       	sbci	r29, 0xFD	; 253
     4f4:	68 81       	ld	r22, Y
     4f6:	79 81       	ldd	r23, Y+1	; 0x01
     4f8:	c1 50       	subi	r28, 0x01	; 1
     4fa:	d2 40       	sbci	r29, 0x02	; 2
     4fc:	ae 01       	movw	r20, r28
     4fe:	4f 5f       	subi	r20, 0xFF	; 255
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <HID_Host_ConfigurePipes>
     50a:	88 23       	and	r24, r24
     50c:	19 f0       	breq	.+6      	; 0x514 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Joystick.\r\n"));
     50e:	8c ea       	ldi	r24, 0xAC	; 172
     510:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     512:	06 c0       	rjmp	.+12     	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0a d6       	rcall	.+3092   	; 0x112c <USB_Host_SetDeviceConfiguration>
     518:	88 23       	and	r24, r24
     51a:	31 f0       	breq	.+12     	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     51c:	86 e8       	ldi	r24, 0x86	; 134
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     524:	80 e9       	ldi	r24, 0x90	; 144
     526:	14 c0       	rjmp	.+40     	; 0x550 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Joystick_HID_Interface) != 0)
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <HID_Host_SetReportProtocol>
     530:	88 23       	and	r24, r24
     532:	49 f0       	breq	.+18     	; 0x546 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Joystick.\r\n"));
     534:	88 e4       	ldi	r24, 0x48	; 72
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     53c:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     53e:	a9 de       	rcall	.-686    	; 0x292 <LEDs_SetAllLEDs>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	f4 d5       	rcall	.+3048   	; 0x112c <USB_Host_SetDeviceConfiguration>
		return;
     544:	06 c0       	rjmp	.+12     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     546:	81 e3       	ldi	r24, 0x31	; 49
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     54e:	80 e6       	ldi	r24, 0x60	; 96
     550:	a0 de       	rcall	.-704    	; 0x292 <LEDs_SetAllLEDs>
}
     552:	ce 5f       	subi	r28, 0xFE	; 254
     554:	dd 4f       	sbci	r29, 0xFD	; 253
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     566:	c8 2f       	mov	r28, r24
	USB_Disable();
     568:	bb d2       	rcall	.+1398   	; 0xae0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     56a:	1f 92       	push	r1
     56c:	cf 93       	push	r28
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     57a:	80 e9       	ldi	r24, 0x90	; 144
     57c:	8a de       	rcall	.-748    	; 0x292 <LEDs_SetAllLEDs>
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	ff cf       	rjmp	.-2      	; 0x586 <EVENT_USB_Host_HostError+0x20>

00000588 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     588:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <USB_HostState>
     58c:	1f 92       	push	r1
     58e:	9f 93       	push	r25
     590:	1f 92       	push	r1
     592:	6f 93       	push	r22
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	8c ea       	ldi	r24, 0xAC	; 172
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a4:	8d b7       	in	r24, 0x3d	; 61
     5a6:	9e b7       	in	r25, 0x3e	; 62
     5a8:	08 96       	adiw	r24, 0x08	; 8
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	9e bf       	out	0x3e, r25	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	8d bf       	out	0x3d, r24	; 61
     5b4:	80 e9       	ldi	r24, 0x90	; 144
     5b6:	6d ce       	rjmp	.-806    	; 0x292 <LEDs_SetAllLEDs>

000005b8 <CALLBACK_HIDParser_FilterHIDReportItem>:

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5b8:	dc 01       	movw	r26, r24
     5ba:	16 96       	adiw	r26, 0x06	; 6
     5bc:	ed 91       	ld	r30, X+
     5be:	fc 91       	ld	r31, X
     5c0:	17 97       	sbiw	r26, 0x07	; 7
     5c2:	30 97       	sbiw	r30, 0x00	; 0
     5c4:	b1 f0       	breq	.+44     	; 0x5f2 <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     5c6:	21 81       	ldd	r18, Z+1	; 0x01
     5c8:	32 81       	ldd	r19, Z+2	; 0x02
     5ca:	21 30       	cpi	r18, 0x01	; 1
     5cc:	31 05       	cpc	r19, r1
     5ce:	29 f4       	brne	.+10     	; 0x5da <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     5d0:	23 81       	ldd	r18, Z+3	; 0x03
     5d2:	34 81       	ldd	r19, Z+4	; 0x04
     5d4:	24 30       	cpi	r18, 0x04	; 4
     5d6:	31 05       	cpc	r19, r1
     5d8:	21 f0       	breq	.+8      	; 0x5e2 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5da:	05 80       	ldd	r0, Z+5	; 0x05
     5dc:	f6 81       	ldd	r31, Z+6	; 0x06
     5de:	e0 2d       	mov	r30, r0
     5e0:	f0 cf       	rjmp	.-32     	; 0x5c2 <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     5e2:	fc 01       	movw	r30, r24
     5e4:	21 85       	ldd	r18, Z+9	; 0x09
     5e6:	32 85       	ldd	r19, Z+10	; 0x0a
     5e8:	27 7f       	andi	r18, 0xF7	; 247
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	21 30       	cpi	r18, 0x01	; 1
     5ee:	31 05       	cpc	r19, r1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     5f4:	08 95       	ret

000005f6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5f6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5fa:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5fc:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     600:	9d 7f       	andi	r25, 0xFD	; 253
     602:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     606:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     60a:	92 60       	ori	r25, 0x02	; 2
     60c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     610:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     614:	91 fd       	sbrc	r25, 1
     616:	fc cf       	rjmp	.-8      	; 0x610 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     618:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     61c:	91 60       	ori	r25, 0x01	; 1
     61e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     622:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     626:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     62a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     62c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     630:	2f 7d       	andi	r18, 0xDF	; 223
     632:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     636:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     63a:	2f 7d       	andi	r18, 0xDF	; 223
     63c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     640:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     642:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     646:	35 ff       	sbrs	r19, 5
     648:	0b c0       	rjmp	.+22     	; 0x660 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     64a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     64e:	2f 7d       	andi	r18, 0xDF	; 223
     650:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     654:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     658:	2d 7f       	andi	r18, 0xFD	; 253
     65a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     65e:	08 c0       	rjmp	.+16     	; 0x670 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     660:	ef ec       	ldi	r30, 0xCF	; 207
     662:	f7 e0       	ldi	r31, 0x07	; 7
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <USB_Host_ResetDevice+0x6e>
     668:	00 c0       	rjmp	.+0      	; 0x66a <USB_Host_ResetDevice+0x74>
     66a:	00 00       	nop
     66c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     66e:	49 f7       	brne	.-46     	; 0x642 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     670:	99 23       	and	r25, r25
     672:	29 f0       	breq	.+10     	; 0x67e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     674:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     678:	90 62       	ori	r25, 0x20	; 32
     67a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     67e:	81 11       	cpse	r24, r1
     680:	05 c0       	rjmp	.+10     	; 0x68c <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     682:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     686:	8e 7f       	andi	r24, 0xFE	; 254
     688:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     68c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     690:	82 60       	ori	r24, 0x02	; 2
     692:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     696:	08 95       	ret

00000698 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     698:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     69c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     69e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6a2:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6a4:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6a8:	3f 7d       	andi	r19, 0xDF	; 223
     6aa:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ae:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6b2:	3f 7d       	andi	r19, 0xDF	; 223
     6b4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6b8:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6bc:	31 60       	ori	r19, 0x01	; 1
     6be:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6c2:	88 23       	and	r24, r24
     6c4:	39 f1       	breq	.+78     	; 0x714 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6c6:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6ca:	35 ff       	sbrs	r19, 5
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ce:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6d2:	3f 7d       	andi	r19, 0xDF	; 223
     6d4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6d8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6da:	30 91 0a 05 	lds	r19, 0x050A	; 0x80050a <USB_HostState>
     6de:	31 30       	cpi	r19, 0x01	; 1
     6e0:	c1 f0       	breq	.+48     	; 0x712 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6e2:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     6e6:	34 ff       	sbrs	r19, 4
     6e8:	09 c0       	rjmp	.+18     	; 0x6fc <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6ea:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     6ee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6f2:	8f 7e       	andi	r24, 0xEF	; 239
     6f4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6f8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6fa:	0c c0       	rjmp	.+24     	; 0x714 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6fc:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     700:	31 ff       	sbrs	r19, 1
     702:	df cf       	rjmp	.-66     	; 0x6c2 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     704:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     708:	8d 7f       	andi	r24, 0xFD	; 253
     70a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     70e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     710:	01 c0       	rjmp	.+2      	; 0x714 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     712:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     714:	21 11       	cpse	r18, r1
     716:	05 c0       	rjmp	.+10     	; 0x722 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     718:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     71c:	2e 7f       	andi	r18, 0xFE	; 254
     71e:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     722:	99 23       	and	r25, r25
     724:	29 f0       	breq	.+10     	; 0x730 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     726:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     72a:	90 62       	ori	r25, 0x20	; 32
     72c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     730:	08 95       	ret

00000732 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     732:	ef 92       	push	r14
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	28 97       	sbiw	r28, 0x08	; 8
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     74c:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <USB_HostState>
     750:	8e 2f       	mov	r24, r30
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	8a 30       	cpi	r24, 0x0A	; 10
     756:	91 05       	cpc	r25, r1
     758:	08 f0       	brcs	.+2      	; 0x75c <USB_Host_ProcessNextHostState+0x2a>
     75a:	f6 c0       	rjmp	.+492    	; 0x948 <USB_Host_ProcessNextHostState+0x216>
     75c:	fc 01       	movw	r30, r24
     75e:	e4 5b       	subi	r30, 0xB4	; 180
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     766:	00 91 fe 04 	lds	r16, 0x04FE	; 0x8004fe <WaitMSRemaining.2935>
     76a:	10 91 ff 04 	lds	r17, 0x04FF	; 0x8004ff <WaitMSRemaining.2935+0x1>
     76e:	01 15       	cp	r16, r1
     770:	11 05       	cpc	r17, r1
     772:	09 f4       	brne	.+2      	; 0x776 <USB_Host_ProcessNextHostState+0x44>
     774:	e9 c0       	rjmp	.+466    	; 0x948 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	8f df       	rcall	.-226    	; 0x698 <USB_Host_WaitMS>
     77a:	88 23       	and	r24, r24
     77c:	31 f0       	breq	.+12     	; 0x78a <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     77e:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <PostWaitState.2936>
     782:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     786:	91 e0       	ldi	r25, 0x01	; 1
					break;
     788:	d1 c0       	rjmp	.+418    	; 0x92c <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     78a:	01 50       	subi	r16, 0x01	; 1
     78c:	11 09       	sbc	r17, r1
     78e:	10 93 ff 04 	sts	0x04FF, r17	; 0x8004ff <WaitMSRemaining.2935+0x1>
     792:	00 93 fe 04 	sts	0x04FE, r16	; 0x8004fe <WaitMSRemaining.2935>
     796:	01 2b       	or	r16, r17
     798:	09 f0       	breq	.+2      	; 0x79c <USB_Host_ProcessNextHostState+0x6a>
     79a:	d6 c0       	rjmp	.+428    	; 0x948 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     79c:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <PostWaitState.2936>
     7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7a2:	88 ee       	ldi	r24, 0xE8	; 232
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     7aa:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
			break;
     7b4:	c9 c0       	rjmp	.+402    	; 0x948 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7b6:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <WaitMSRemaining.2935>
     7ba:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <WaitMSRemaining.2935+0x1>
     7be:	9c 01       	movw	r18, r24
     7c0:	21 50       	subi	r18, 0x01	; 1
     7c2:	31 09       	sbc	r19, r1
     7c4:	30 93 ff 04 	sts	0x04FF, r19	; 0x8004ff <WaitMSRemaining.2935+0x1>
     7c8:	20 93 fe 04 	sts	0x04FE, r18	; 0x8004fe <WaitMSRemaining.2935>
     7cc:	89 2b       	or	r24, r25
     7ce:	39 f0       	breq	.+14     	; 0x7de <USB_Host_ProcessNextHostState+0xac>
     7d0:	8f ec       	ldi	r24, 0xCF	; 207
     7d2:	97 e0       	ldi	r25, 0x07	; 7
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <USB_Host_ProcessNextHostState+0xa2>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <USB_Host_ProcessNextHostState+0xa8>
     7da:	00 00       	nop
     7dc:	b5 c0       	rjmp	.+362    	; 0x948 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7de:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7e0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     7e4:	80 61       	ori	r24, 0x10	; 16
     7e6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7ea:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     7ee:	8b 7f       	andi	r24, 0xFB	; 251
     7f0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     7f4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     7f8:	80 61       	ori	r24, 0x10	; 16
     7fa:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7fe:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     802:	82 60       	ori	r24, 0x02	; 2
     804:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	d2 cf       	rjmp	.-92     	; 0x7b0 <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     80c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     810:	80 ff       	sbrs	r24, 0
     812:	9a c0       	rjmp	.+308    	; 0x948 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     814:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     81e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     828:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     82c:	8d 7f       	andi	r24, 0xFD	; 253
     82e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     832:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     836:	82 60       	ori	r24, 0x02	; 2
     838:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     83c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     840:	81 60       	ori	r24, 0x01	; 1
     842:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     846:	e8 d0       	rcall	.+464    	; 0xa18 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     848:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     84c:	84 e6       	ldi	r24, 0x64	; 100
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     854:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     858:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     85a:	5c c0       	rjmp	.+184    	; 0x914 <USB_Host_ProcessNextHostState+0x1e2>
     85c:	cc de       	rcall	.-616    	; 0x5f6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     85e:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     862:	88 ec       	ldi	r24, 0xC8	; 200
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     86a:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     86e:	86 e0       	ldi	r24, 0x06	; 6
     870:	51 c0       	rjmp	.+162    	; 0x914 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     872:	e1 2c       	mov	r14, r1
     874:	00 e4       	ldi	r16, 0x40	; 64
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	6f d0       	rcall	.+222    	; 0x960 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     882:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     886:	87 fd       	sbrc	r24, 7
     888:	03 c0       	rjmp	.+6      	; 0x890 <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     88a:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	4e c0       	rjmp	.+156    	; 0x92c <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     890:	87 e0       	ldi	r24, 0x07	; 7
     892:	8e cf       	rjmp	.-228    	; 0x7b0 <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     894:	88 e0       	ldi	r24, 0x08	; 8
     896:	e4 e1       	ldi	r30, 0x14	; 20
     898:	f1 e0       	ldi	r31, 0x01	; 1
     89a:	a2 e0       	ldi	r26, 0x02	; 2
     89c:	b5 e0       	ldi	r27, 0x05	; 5
     89e:	01 90       	ld	r0, Z+
     8a0:	0d 92       	st	X+, r0
     8a2:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8a4:	e1 f7       	brne	.-8      	; 0x89e <USB_Host_ProcessNextHostState+0x16c>
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	4a d3       	rcall	.+1684   	; 0xf40 <USB_Host_SendControlRequest>
     8ac:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8ae:	3d c0       	rjmp	.+122    	; 0x92a <USB_Host_ProcessNextHostState+0x1f8>
     8b0:	88 85       	ldd	r24, Y+8	; 0x08
     8b2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     8b6:	9f de       	rcall	.-706    	; 0x5f6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8b8:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     8bc:	88 ec       	ldi	r24, 0xC8	; 200
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     8c4:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     8c8:	88 e0       	ldi	r24, 0x08	; 8
     8ca:	24 c0       	rjmp	.+72     	; 0x914 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8cc:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	e1 2c       	mov	r14, r1
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	41 d0       	rcall	.+130    	; 0x960 <Pipe_ConfigurePipe>
     8de:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8e2:	87 ff       	sbrs	r24, 7
     8e4:	d2 cf       	rjmp	.-92     	; 0x88a <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	ec e1       	ldi	r30, 0x1C	; 28
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	a2 e0       	ldi	r26, 0x02	; 2
     8ee:	b5 e0       	ldi	r27, 0x05	; 5
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <USB_Host_ProcessNextHostState+0x1be>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	21 d3       	rcall	.+1602   	; 0xf40 <USB_Host_SendControlRequest>
     8fe:	81 11       	cpse	r24, r1
     900:	14 c0       	rjmp	.+40     	; 0x92a <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     902:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     906:	84 e6       	ldi	r24, 0x64	; 100
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     90e:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     918:	17 c0       	rjmp	.+46     	; 0x948 <USB_Host_ProcessNextHostState+0x216>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     920:	8a e0       	ldi	r24, 0x0A	; 10
     922:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     926:	c8 dd       	rcall	.-1136   	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     928:	0f c0       	rjmp	.+30     	; 0x948 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     930:	21 30       	cpi	r18, 0x01	; 1
     932:	51 f0       	breq	.+20     	; 0x948 <USB_Host_ProcessNextHostState+0x216>
     934:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     936:	89 2f       	mov	r24, r25
     938:	27 de       	rcall	.-946    	; 0x588 <EVENT_USB_Host_DeviceEnumerationFailed>
     93a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     93e:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     940:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     944:	b3 dd       	rcall	.-1178   	; 0x4ac <EVENT_USB_Host_DeviceUnattached>
     946:	e4 d0       	rcall	.+456    	; 0xb10 <USB_ResetInterface>
	}
}
     948:	28 96       	adiw	r28, 0x08	; 8
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ef 90       	pop	r14
     95e:	08 95       	ret

00000960 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     960:	ef 92       	push	r14
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     966:	2f 70       	andi	r18, 0x0F	; 15
     968:	42 2b       	or	r20, r18
     96a:	90 e4       	ldi	r25, 0x40	; 64
     96c:	69 9f       	mul	r22, r25
     96e:	b0 01       	movw	r22, r0
     970:	11 24       	eor	r1, r1
     972:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     974:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     976:	2e 2d       	mov	r18, r14
     978:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     97a:	37 30       	cpi	r19, 0x07	; 7
     97c:	08 f0       	brcs	.+2      	; 0x980 <Pipe_ConfigurePipe+0x20>
     97e:	45 c0       	rjmp	.+138    	; 0xa0a <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     980:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     984:	38 13       	cpse	r19, r24
     986:	13 c0       	rjmp	.+38     	; 0x9ae <Pipe_ConfigurePipe+0x4e>
     988:	48 e0       	ldi	r20, 0x08	; 8
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     98e:	40 17       	cp	r20, r16
     990:	51 07       	cpc	r21, r17
     992:	38 f0       	brcs	.+14     	; 0x9a2 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     994:	92 95       	swap	r25
     996:	90 7f       	andi	r25, 0xF0	; 240
     998:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     99a:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     99c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	0e c0       	rjmp	.+28     	; 0x9be <Pipe_ConfigurePipe+0x5e>
     9a2:	95 30       	cpi	r25, 0x05	; 5
     9a4:	b9 f3       	breq	.-18     	; 0x994 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     9a6:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     9a8:	44 0f       	add	r20, r20
     9aa:	55 1f       	adc	r21, r21
     9ac:	f0 cf       	rjmp	.-32     	; 0x98e <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9ae:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     9b2:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     9b6:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     9ba:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9be:	91 fd       	sbrc	r25, 1
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c2:	3f 5f       	subi	r19, 0xFF	; 255
     9c4:	da cf       	rjmp	.-76     	; 0x97a <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9c6:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9ca:	4e 7f       	andi	r20, 0xFE	; 254
     9cc:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9d0:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     9d4:	4d 7f       	andi	r20, 0xFD	; 253
     9d6:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9da:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9de:	41 60       	ori	r20, 0x01	; 1
     9e0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     9e4:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     9e8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     9ec:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     9f0:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9f4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9f8:	90 62       	ori	r25, 0x20	; 32
     9fa:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9fe:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a02:	97 fd       	sbrc	r25, 7
     a04:	de cf       	rjmp	.-68     	; 0x9c2 <Pipe_ConfigurePipe+0x62>
		  return false;		
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	03 c0       	rjmp	.+6      	; 0xa10 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a0a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a18:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a22:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     a26:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     a2a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a2e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a32:	9e 7f       	andi	r25, 0xFE	; 254
     a34:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	87 30       	cpi	r24, 0x07	; 7
     a3c:	81 f7       	brne	.-32     	; 0xa1e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a3e:	08 95       	ret

00000a40 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a40:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     a44:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a46:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a48:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a4c:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a50:	27 ff       	sbrs	r18, 7
     a52:	0f c0       	rjmp	.+30     	; 0xa72 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a54:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     a58:	42 2f       	mov	r20, r18
     a5a:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a5c:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a60:	20 73       	andi	r18, 0x30	; 48
     a62:	20 31       	cpi	r18, 0x10	; 16
     a64:	11 f0       	breq	.+4      	; 0xa6a <Pipe_IsEndpointBound+0x2a>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <Pipe_IsEndpointBound+0x2c>
     a6a:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a6c:	24 2b       	or	r18, r20
     a6e:	82 17       	cp	r24, r18
     a70:	39 f0       	breq	.+14     	; 0xa80 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a72:	9f 5f       	subi	r25, 0xFF	; 255
     a74:	97 30       	cpi	r25, 0x07	; 7
     a76:	41 f7       	brne	.-48     	; 0xa48 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a78:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a80:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a82:	08 95       	ret

00000a84 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a84:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a88:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     a8c:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a8e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a92:	90 73       	andi	r25, 0x30	; 48
     a94:	90 31       	cpi	r25, 0x10	; 16
     a96:	29 f4       	brne	.+10     	; 0xaa2 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a98:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     a9c:	90 ff       	sbrs	r25, 0
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <Pipe_WaitUntilReady+0x26>
     aa0:	19 c0       	rjmp	.+50     	; 0xad4 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     aa2:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     aa6:	92 fd       	sbrc	r25, 2
     aa8:	15 c0       	rjmp	.+42     	; 0xad4 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     aaa:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     aae:	91 fd       	sbrc	r25, 1
     ab0:	13 c0       	rjmp	.+38     	; 0xad8 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ab2:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <USB_HostState>
     ab6:	91 30       	cpi	r25, 0x01	; 1
     ab8:	89 f0       	breq	.+34     	; 0xadc <Pipe_WaitUntilReady+0x58>
     aba:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     abe:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ac2:	42 17       	cp	r20, r18
     ac4:	53 07       	cpc	r21, r19
     ac6:	19 f3       	breq	.-58     	; 0xa8e <Pipe_WaitUntilReady+0xa>
     ac8:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aca:	11 f0       	breq	.+4      	; 0xad0 <Pipe_WaitUntilReady+0x4c>
     acc:	a9 01       	movw	r20, r18
     ace:	df cf       	rjmp	.-66     	; 0xa8e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     adc:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     ade:	08 95       	ret

00000ae0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ae0:	70 d0       	rcall	.+224    	; 0xbc2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ae2:	77 d0       	rcall	.+238    	; 0xbd2 <USB_INT_ClearAllInterrupts>
     ae4:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	80 83       	st	Z, r24
     aee:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	8f 77       	andi	r24, 0x7F	; 127
     af6:	80 83       	st	Z, r24
     af8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     afa:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	8c 91       	ld	r24, X
     b00:	8e 7f       	andi	r24, 0xFE	; 254
     b02:	8c 93       	st	X, r24
     b04:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b06:	8f 7e       	andi	r24, 0xEF	; 239
     b08:	80 83       	st	Z, r24
     b0a:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b0e:	08 95       	ret

00000b10 <USB_ResetInterface>:
     b10:	58 d0       	rcall	.+176    	; 0xbc2 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b12:	5f d0       	rcall	.+190    	; 0xbd2 <USB_INT_ClearAllInterrupts>
     b14:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b1e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     b22:	80 68       	ori	r24, 0x80	; 128
     b24:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b2c:	8f 7d       	andi	r24, 0xDF	; 223
     b2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b32:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b36:	8f 77       	andi	r24, 0x7F	; 127
     b38:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b3c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b3e:	89 bd       	out	0x29, r24	; 41
     b40:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b42:	89 bd       	out	0x29, r24	; 41
     b44:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b46:	00 fe       	sbrs	r0, 0
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <USB_ResetInterface+0x34>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b4c:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     b50:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     b54:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b56:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     b5a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b5e:	80 64       	ori	r24, 0x40	; 64
     b60:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b64:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b68:	81 60       	ori	r24, 0x01	; 1
     b6a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b6e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b78:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     b7c:	8f 7e       	andi	r24, 0xEF	; 239
     b7e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b82:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     b84:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b86:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b90:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b94:	84 60       	ori	r24, 0x04	; 4
     b96:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b9a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     ba4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ba8:	80 61       	ori	r24, 0x10	; 16
     baa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bae:	08 95       	ret

00000bb0 <USB_Init>:
     bb0:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <USB_IsInitialized>

	USB_ResetInterface();
     bc0:	a7 cf       	rjmp	.-178    	; 0xb10 <USB_ResetInterface>

00000bc2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bc2:	e8 ed       	ldi	r30, 0xD8	; 216
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8c 7f       	andi	r24, 0xFC	; 252
     bca:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bcc:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bd0:	08 95       	ret

00000bd2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bd2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bd6:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bda:	08 95       	ret

00000bdc <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	0b b6       	in	r0, 0x3b	; 59
     be8:	0f 92       	push	r0
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c02:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c06:	85 ff       	sbrs	r24, 5
     c08:	0a c0       	rjmp	.+20     	; 0xc1e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c0a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c0e:	85 ff       	sbrs	r24, 5
     c10:	06 c0       	rjmp	.+12     	; 0xc1e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c12:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c16:	8f 7d       	andi	r24, 0xDF	; 223
     c18:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c1c:	6a d1       	rcall	.+724    	; 0xef2 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c1e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c22:	81 ff       	sbrs	r24, 1
     c24:	15 c0       	rjmp	.+42     	; 0xc50 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c26:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c2a:	81 ff       	sbrs	r24, 1
     c2c:	11 c0       	rjmp	.+34     	; 0xc50 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c2e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c32:	8d 7f       	andi	r24, 0xFD	; 253
     c34:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c38:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c3c:	8e 7f       	andi	r24, 0xFE	; 254
     c3e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c42:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c46:	8d 7f       	andi	r24, 0xFD	; 253
     c48:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     c4c:	2f dc       	rcall	.-1954   	; 0x4ac <EVENT_USB_Host_DeviceUnattached>
     c4e:	60 df       	rcall	.-320    	; 0xb10 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c50:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c54:	81 ff       	sbrs	r24, 1
     c56:	15 c0       	rjmp	.+42     	; 0xc82 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c58:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c5c:	81 ff       	sbrs	r24, 1
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c60:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c6a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c6c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	76 dc       	rcall	.-1812   	; 0x566 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c7a:	18 dc       	rcall	.-2000   	; 0x4ac <EVENT_USB_Host_DeviceUnattached>
     c7c:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     c7e:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     c82:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c86:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c88:	17 c0       	rjmp	.+46     	; 0xcb8 <__vector_10+0xdc>
     c8a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c8e:	80 ff       	sbrs	r24, 0
     c90:	13 c0       	rjmp	.+38     	; 0xcb8 <__vector_10+0xdc>
     c92:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     c9c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     ca0:	8e 7f       	andi	r24, 0xFE	; 254
     ca2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ca6:	fc db       	rcall	.-2056   	; 0x4a0 <EVENT_USB_Host_DeviceAttached>
     ca8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cac:	82 60       	ori	r24, 0x02	; 2
     cae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cb2:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cb4:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     cb8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cbc:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <__vector_10+0x100>
     cc0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     cc4:	82 ff       	sbrs	r24, 2
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <__vector_10+0x100>
     cc8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ccc:	8b 7f       	andi	r24, 0xFB	; 251
     cce:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	58 dc       	rcall	.-1872   	; 0x588 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cd8:	e9 db       	rcall	.-2094   	; 0x4ac <EVENT_USB_Host_DeviceUnattached>
     cda:	1a df       	rcall	.-460    	; 0xb10 <USB_ResetInterface>

		USB_ResetInterface();
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <Pipe_Read_Stream_LE>:
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	8b 01       	movw	r16, r22
     d16:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d18:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d1c:	8f 7c       	andi	r24, 0xCF	; 207
     d1e:	80 61       	ori	r24, 0x10	; 16
     d20:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d24:	af de       	rcall	.-674    	; 0xa84 <Pipe_WaitUntilReady>
     d26:	81 11       	cpse	r24, r1
     d28:	32 c0       	rjmp	.+100    	; 0xd8e <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d2a:	e1 14       	cp	r14, r1
     d2c:	f1 04       	cpc	r15, r1
     d2e:	39 f0       	breq	.+14     	; 0xd3e <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     d30:	f7 01       	movw	r30, r14
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	08 1b       	sub	r16, r24
     d38:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d3a:	c8 0f       	add	r28, r24
     d3c:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d3e:	c1 2c       	mov	r12, r1
     d40:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d42:	01 15       	cp	r16, r1
     d44:	11 05       	cpc	r17, r1
     d46:	11 f1       	breq	.+68     	; 0xd8c <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d48:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d4c:	85 fd       	sbrc	r24, 5
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d50:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d54:	8e 77       	andi	r24, 0x7E	; 126
     d56:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d5a:	e1 14       	cp	r14, r1
     d5c:	f1 04       	cpc	r15, r1
     d5e:	49 f0       	breq	.+18     	; 0xd72 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     d60:	f7 01       	movw	r30, r14
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	c8 0e       	add	r12, r24
     d68:	d9 1e       	adc	r13, r25
     d6a:	d1 82       	std	Z+1, r13	; 0x01
     d6c:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     d6e:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d70:	0e c0       	rjmp	.+28     	; 0xd8e <Pipe_Read_Stream_LE+0x8c>
     d72:	88 de       	rcall	.-752    	; 0xa84 <Pipe_WaitUntilReady>
     d74:	88 23       	and	r24, r24
     d76:	29 f3       	breq	.-54     	; 0xd42 <Pipe_Read_Stream_LE+0x40>
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     d7a:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d7e:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d80:	01 50       	subi	r16, 0x01	; 1
     d82:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     d84:	ff ef       	ldi	r31, 0xFF	; 255
     d86:	cf 1a       	sub	r12, r31
     d88:	df 0a       	sbc	r13, r31
     d8a:	db cf       	rjmp	.-74     	; 0xd42 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	08 95       	ret

00000da0 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	dc 01       	movw	r26, r24
     da6:	eb 01       	movw	r28, r22
     da8:	e8 81       	ld	r30, Y
     daa:	f9 81       	ldd	r31, Y+1	; 0x01
     dac:	20 81       	ld	r18, Z
     dae:	8d 91       	ld	r24, X+
     db0:	9c 91       	ld	r25, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	82 17       	cp	r24, r18
     db8:	93 07       	cpc	r25, r19
     dba:	08 f4       	brcc	.+2      	; 0xdbe <USB_GetNextDescriptor+0x1e>
     dbc:	9c 01       	movw	r18, r24
     dbe:	e2 0f       	add	r30, r18
     dc0:	f3 1f       	adc	r31, r19
     dc2:	eb 01       	movw	r28, r22
     dc4:	f9 83       	std	Y+1, r31	; 0x01
     dc6:	e8 83       	st	Y, r30
     dc8:	8d 91       	ld	r24, X+
     dca:	9c 91       	ld	r25, X
     dcc:	11 97       	sbiw	r26, 0x01	; 1
     dce:	82 1b       	sub	r24, r18
     dd0:	93 0b       	sbc	r25, r19
     dd2:	8d 93       	st	X+, r24
     dd4:	9c 93       	st	X, r25
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <USB_Host_GetDeviceConfigDescriptor>:
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	29 97       	sbiw	r28, 0x09	; 9
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	6b 01       	movw	r12, r22
     dfe:	8a 01       	movw	r16, r20
     e00:	79 01       	movw	r14, r18
     e02:	90 e8       	ldi	r25, 0x80	; 128
     e04:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <USB_ControlRequest>
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <USB_ControlRequest+0x1>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	92 60       	ori	r25, 0x02	; 2
     e14:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <USB_ControlRequest+0x3>
     e18:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <USB_ControlRequest+0x2>
     e1c:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_ControlRequest+0x5>
     e20:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_ControlRequest+0x4>
     e24:	89 e0       	ldi	r24, 0x09	; 9
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <USB_ControlRequest+0x7>
     e2c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_ControlRequest+0x6>
     e30:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	83 d0       	rcall	.+262    	; 0xf40 <USB_Host_SendControlRequest>
     e3a:	81 11       	cpse	r24, r1
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	f6 01       	movw	r30, r12
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
     e48:	e8 16       	cp	r14, r24
     e4a:	f9 06       	cpc	r15, r25
     e4c:	70 f0       	brcs	.+28     	; 0xe6a <USB_Host_GetDeviceConfigDescriptor+0x8e>
     e4e:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <USB_ControlRequest+0x7>
     e52:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_ControlRequest+0x6>
     e56:	c8 01       	movw	r24, r16
     e58:	73 d0       	rcall	.+230    	; 0xf40 <USB_Host_SendControlRequest>
     e5a:	81 11       	cpse	r24, r1
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e5e:	f8 01       	movw	r30, r16
     e60:	81 81       	ldd	r24, Z+1	; 0x01
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	21 f4       	brne	.+8      	; 0xe6e <USB_Host_GetDeviceConfigDescriptor+0x92>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e6e:	86 e0       	ldi	r24, 0x06	; 6
     e70:	29 96       	adiw	r28, 0x09	; 9
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	08 95       	ret

00000e8e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	8c 01       	movw	r16, r24
     ea4:	eb 01       	movw	r28, r22
     ea6:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ea8:	f8 01       	movw	r30, r16
     eaa:	e0 80       	ld	r14, Z
     eac:	f1 80       	ldd	r15, Z+1	; 0x01
     eae:	e1 14       	cp	r14, r1
     eb0:	f1 04       	cpc	r15, r1
     eb2:	99 f0       	breq	.+38     	; 0xeda <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     eb4:	a8 80       	ld	r10, Y
     eb6:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     eb8:	be 01       	movw	r22, r28
     eba:	c8 01       	movw	r24, r16
     ebc:	71 df       	rcall	.-286    	; 0xda0 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     ebe:	88 81       	ld	r24, Y
     ec0:	99 81       	ldd	r25, Y+1	; 0x01
     ec2:	f6 01       	movw	r30, r12
     ec4:	09 95       	icall
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	79 f3       	breq	.-34     	; 0xea8 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	39 f4       	brne	.+14     	; 0xedc <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     ece:	b9 82       	std	Y+1, r11	; 0x01
     ed0:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     ed2:	f8 01       	movw	r30, r16
     ed4:	f1 82       	std	Z+1, r15	; 0x01
     ed6:	e0 82       	st	Z, r14
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     eda:	82 e0       	ldi	r24, 0x02	; 2
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	df 90       	pop	r13
     eea:	cf 90       	pop	r12
     eec:	bf 90       	pop	r11
     eee:	af 90       	pop	r10
     ef0:	08 95       	ret

00000ef2 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     ef2:	08 95       	ret

00000ef4 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     efc:	c9 ee       	ldi	r28, 0xE9	; 233
     efe:	d3 e0       	ldi	r29, 0x03	; 3
     f00:	11 11       	cpse	r17, r1
     f02:	0c c0       	rjmp	.+24     	; 0xf1c <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f04:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f08:	83 fd       	sbrc	r24, 3
     f0a:	15 c0       	rjmp	.+42     	; 0xf36 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	c4 db       	rcall	.-2168   	; 0x698 <USB_Host_WaitMS>
     f10:	81 11       	cpse	r24, r1
     f12:	12 c0       	rjmp	.+36     	; 0xf38 <USB_Host_WaitForIOS+0x44>
     f14:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f16:	a1 f7       	brne	.-24     	; 0xf00 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f1c:	11 30       	cpi	r17, 0x01	; 1
     f1e:	29 f4       	brne	.+10     	; 0xf2a <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f20:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f24:	80 ff       	sbrs	r24, 0
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <USB_Host_WaitForIOS+0x18>
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f2a:	12 30       	cpi	r17, 0x02	; 2
     f2c:	79 f7       	brne	.-34     	; 0xf0c <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f2e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f32:	82 ff       	sbrs	r24, 2
     f34:	eb cf       	rjmp	.-42     	; 0xf0c <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f36:	80 e0       	ldi	r24, 0x00	; 0
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	08 95       	ret

00000f40 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f4c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f54:	c0 91 08 05 	lds	r28, 0x0508	; 0x800508 <USB_ControlRequest+0x6>
     f58:	d0 91 09 05 	lds	r29, 0x0509	; 0x800509 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f5c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	97 db       	rcall	.-2258   	; 0x698 <USB_Host_WaitMS>
     f6a:	81 11       	cpse	r24, r1
     f6c:	c8 c0       	rjmp	.+400    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f6e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f72:	8f 7c       	andi	r24, 0xCF	; 207
     f74:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f78:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     f7c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f80:	8f 7e       	andi	r24, 0xEF	; 239
     f82:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f86:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f8a:	8f 7b       	andi	r24, 0xBF	; 191
     f8c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f90:	e2 e0       	ldi	r30, 0x02	; 2
     f92:	f5 e0       	ldi	r31, 0x05	; 5
     f94:	8a e0       	ldi	r24, 0x0A	; 10
     f96:	95 e0       	ldi	r25, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     f98:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f9a:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f9e:	8e 17       	cp	r24, r30
     fa0:	9f 07       	cpc	r25, r31
     fa2:	d1 f7       	brne	.-12     	; 0xf98 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fa4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fa8:	87 77       	andi	r24, 0x77	; 119
     faa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	a1 df       	rcall	.-190    	; 0xef4 <USB_Host_WaitForIOS>
     fb2:	81 11       	cpse	r24, r1
     fb4:	a4 c0       	rjmp	.+328    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fb6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	6a db       	rcall	.-2348   	; 0x698 <USB_Host_WaitMS>
     fc4:	81 11       	cpse	r24, r1
     fc6:	9b c0       	rjmp	.+310    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fc8:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <USB_ControlRequest>
     fcc:	87 ff       	sbrs	r24, 7
     fce:	4e c0       	rjmp	.+156    	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fd4:	8f 7c       	andi	r24, 0xCF	; 207
     fd6:	80 61       	ori	r24, 0x10	; 16
     fd8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fdc:	01 15       	cp	r16, r1
     fde:	11 05       	cpc	r17, r1
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <USB_Host_SendControlRequest+0xa4>
     fe2:	3a c0       	rjmp	.+116    	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
     fe4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fe8:	8f 7c       	andi	r24, 0xCF	; 207
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	7b df       	rcall	.-266    	; 0xef4 <USB_Host_WaitForIOS>
     ffe:	81 11       	cpse	r24, r1
    1000:	7e c0       	rjmp	.+252    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1002:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1006:	8b 77       	andi	r24, 0x7B	; 123
    1008:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	72 df       	rcall	.-284    	; 0xef4 <USB_Host_WaitForIOS>
    1010:	76 c0       	rjmp	.+236    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1012:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	6a df       	rcall	.-300    	; 0xef4 <USB_Host_WaitForIOS>
    1020:	81 11       	cpse	r24, r1
    1022:	6d c0       	rjmp	.+218    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1024:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1028:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    102c:	89 2b       	or	r24, r25
    102e:	11 f4       	brne	.+4      	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
				  DataLen = 0;
    1030:	c0 e0       	ldi	r28, 0x00	; 0
    1032:	d0 e0       	ldi	r29, 0x00	; 0
    1034:	f8 01       	movw	r30, r16
    1036:	8f 01       	movw	r16, r30
    1038:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    103c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    1040:	89 2b       	or	r24, r25
    1042:	69 f4       	brne	.+26     	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1044:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1048:	80 64       	ori	r24, 0x40	; 64
    104a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    104e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1052:	8e 77       	andi	r24, 0x7E	; 126
    1054:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1058:	20 97       	sbiw	r28, 0x00	; 0
    105a:	d9 f6       	brne	.-74     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    105c:	c3 cf       	rjmp	.-122    	; 0xfe4 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    105e:	20 97       	sbiw	r28, 0x00	; 0
    1060:	89 f3       	breq	.-30     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1062:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    1066:	81 93       	st	Z+, r24
					DataLen--;
    1068:	21 97       	sbiw	r28, 0x01	; 1
    106a:	e5 cf       	rjmp	.-54     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    106c:	01 15       	cp	r16, r1
    106e:	11 05       	cpc	r17, r1
    1070:	91 f1       	breq	.+100    	; 0x10d6 <__EEPROM_REGION_LENGTH__+0xd6>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1072:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1076:	8f 7c       	andi	r24, 0xCF	; 207
    1078:	80 62       	ori	r24, 0x20	; 32
    107a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    107e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1082:	8f 7b       	andi	r24, 0xBF	; 191
    1084:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    108c:	e1 f0       	breq	.+56     	; 0x10c6 <__EEPROM_REGION_LENGTH__+0xc6>
    108e:	32 df       	rcall	.-412    	; 0xef4 <USB_Host_WaitForIOS>
    1090:	81 11       	cpse	r24, r1
    1092:	35 c0       	rjmp	.+106    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1094:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1098:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    109c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	28 17       	cp	r18, r24
    10a4:	39 07       	cpc	r19, r25
    10a6:	48 f4       	brcc	.+18     	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
				{
					Pipe_Write_8(*(DataStream++));
    10a8:	0f 5f       	subi	r16, 0xFF	; 255
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	f8 01       	movw	r30, r16
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10b2:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    10b6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10b8:	69 f7       	brne	.-38     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    10ba:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10be:	8b 77       	andi	r24, 0x7B	; 123
    10c0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c4:	e1 cf       	rjmp	.-62     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
    10c6:	16 df       	rcall	.-468    	; 0xef4 <USB_Host_WaitForIOS>
    10c8:	81 11       	cpse	r24, r1
    10ca:	19 c0       	rjmp	.+50     	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10cc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10d0:	80 64       	ori	r24, 0x40	; 64
    10d2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10da:	8f 7c       	andi	r24, 0xCF	; 207
    10dc:	80 61       	ori	r24, 0x10	; 16
    10de:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10e6:	8f 7b       	andi	r24, 0xBF	; 191
    10e8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	02 df       	rcall	.-508    	; 0xef4 <USB_Host_WaitForIOS>
    10f0:	81 11       	cpse	r24, r1
    10f2:	05 c0       	rjmp	.+10     	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10f4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10f8:	9e 77       	andi	r25, 0x7E	; 126
    10fa:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10fe:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1102:	90 64       	ori	r25, 0x40	; 64
    1104:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1108:	f1 10       	cpse	r15, r1
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    110c:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1110:	9e 7f       	andi	r25, 0xFE	; 254
    1112:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    111c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	08 95       	ret

0000112c <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    112c:	cf 93       	push	r28
    112e:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1130:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <USB_ControlRequest>
    1134:	89 e0       	ldi	r24, 0x09	; 9
    1136:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <USB_ControlRequest+0x1>
    113a:	8c 2f       	mov	r24, r28
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <USB_ControlRequest+0x3>
    1142:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <USB_ControlRequest+0x2>
    1146:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_ControlRequest+0x5>
    114a:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_ControlRequest+0x4>
    114e:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <USB_ControlRequest+0x7>
    1152:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1156:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	f0 de       	rcall	.-544    	; 0xf40 <USB_Host_SendControlRequest>
    1160:	81 11       	cpse	r24, r1
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1164:	c0 93 00 05 	sts	0x0500, r28	; 0x800500 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1168:	c1 11       	cpse	r28, r1
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <USB_Host_SetDeviceConfiguration+0x44>
    116c:	9a e0       	ldi	r25, 0x0A	; 10
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <USB_Host_SetDeviceConfiguration+0x46>
    1170:	9b e0       	ldi	r25, 0x0B	; 11
    1172:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <USB_HostState>
	}

	return ErrorCode;
}
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1180:	c7 ea       	ldi	r28, 0xA7	; 167
    1182:	d0 e0       	ldi	r29, 0x00	; 0
    1184:	18 81       	ld	r17, Y
    1186:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1188:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    118a:	d3 da       	rcall	.-2650   	; 0x732 <USB_Host_ProcessNextHostState>
    118c:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	08 95       	ret

00001196 <USB_ProcessHIDReport>:
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
    1196:	2f 92       	push	r2
    1198:	3f 92       	push	r3
    119a:	4f 92       	push	r4
    119c:	5f 92       	push	r5
    119e:	6f 92       	push	r6
    11a0:	7f 92       	push	r7
    11a2:	8f 92       	push	r8
    11a4:	9f 92       	push	r9
    11a6:	af 92       	push	r10
    11a8:	bf 92       	push	r11
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	cc 58       	subi	r28, 0x8C	; 140
    11c0:	d1 09       	sbc	r29, r1
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	6c 01       	movw	r12, r24
    11ce:	e7 96       	adiw	r28, 0x37	; 55
    11d0:	7f af       	std	Y+63, r23	; 0x3f
    11d2:	6e af       	std	Y+62, r22	; 0x3e
    11d4:	e7 97       	sbiw	r28, 0x37	; 55
    11d6:	1a 01       	movw	r2, r20
    11d8:	9a 01       	movw	r18, r20
    11da:	20 57       	subi	r18, 0x70	; 112
    11dc:	3c 4f       	sbci	r19, 0xFC	; 252
    11de:	e9 96       	adiw	r28, 0x39	; 57
    11e0:	3f af       	std	Y+63, r19	; 0x3f
    11e2:	2e af       	std	Y+62, r18	; 0x3e
    11e4:	e9 97       	sbiw	r28, 0x39	; 57
    11e6:	89 ed       	ldi	r24, 0xD9	; 217
    11e8:	93 e0       	ldi	r25, 0x03	; 3
    11ea:	da 01       	movw	r26, r20
    11ec:	fc 01       	movw	r30, r24
    11ee:	1d 92       	st	X+, r1
    11f0:	31 97       	sbiw	r30, 0x01	; 1
    11f2:	e9 f7       	brne	.-6      	; 0x11ee <USB_ProcessHIDReport+0x58>
    11f4:	fe 01       	movw	r30, r28
    11f6:	31 96       	adiw	r30, 0x01	; 1
    11f8:	8c e1       	ldi	r24, 0x1C	; 28
    11fa:	df 01       	movw	r26, r30
    11fc:	1d 92       	st	X+, r1
    11fe:	8a 95       	dec	r24
    1200:	e9 f7       	brne	.-6      	; 0x11fc <USB_ProcessHIDReport+0x66>
    1202:	87 e0       	ldi	r24, 0x07	; 7
    1204:	d9 01       	movw	r26, r18
    1206:	1d 92       	st	X+, r1
    1208:	8a 95       	dec	r24
    120a:	e9 f7       	brne	.-6      	; 0x1206 <USB_ProcessHIDReport+0x70>
    120c:	21 50       	subi	r18, 0x01	; 1
    120e:	31 09       	sbc	r19, r1
    1210:	c1 58       	subi	r28, 0x81	; 129
    1212:	df 4f       	sbci	r29, 0xFF	; 255
    1214:	39 83       	std	Y+1, r19	; 0x01
    1216:	28 83       	st	Y, r18
    1218:	cf 57       	subi	r28, 0x7F	; 127
    121a:	d0 40       	sbci	r29, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	d9 01       	movw	r26, r18
    1220:	8c 93       	st	X, r24
    1222:	ed 96       	adiw	r28, 0x3d	; 61
    1224:	1c ae       	std	Y+60, r1	; 0x3c
    1226:	1d ae       	std	Y+61, r1	; 0x3d
    1228:	1e ae       	std	Y+62, r1	; 0x3e
    122a:	1f ae       	std	Y+63, r1	; 0x3f
    122c:	ed 97       	sbiw	r28, 0x3d	; 61
    122e:	41 2c       	mov	r4, r1
    1230:	51 2c       	mov	r5, r1
    1232:	32 01       	movw	r6, r4
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	e5 96       	adiw	r28, 0x35	; 53
    1238:	1f ae       	std	Y+63, r1	; 0x3f
    123a:	1e ae       	std	Y+62, r1	; 0x3e
    123c:	e5 97       	sbiw	r28, 0x35	; 53
    123e:	7f 01       	movw	r14, r30
    1240:	fa 01       	movw	r30, r20
    1242:	ea 52       	subi	r30, 0x2A	; 42
    1244:	fc 4f       	sbci	r31, 0xFC	; 252
    1246:	cf 57       	subi	r28, 0x7F	; 127
    1248:	df 4f       	sbci	r29, 0xFF	; 255
    124a:	f9 83       	std	Y+1, r31	; 0x01
    124c:	e8 83       	st	Y, r30
    124e:	c1 58       	subi	r28, 0x81	; 129
    1250:	d0 40       	sbci	r29, 0x00	; 0
    1252:	27 50       	subi	r18, 0x07	; 7
    1254:	31 09       	sbc	r19, r1
    1256:	c7 57       	subi	r28, 0x77	; 119
    1258:	df 4f       	sbci	r29, 0xFF	; 255
    125a:	39 83       	std	Y+1, r19	; 0x01
    125c:	28 83       	st	Y, r18
    125e:	c9 58       	subi	r28, 0x89	; 137
    1260:	d0 40       	sbci	r29, 0x00	; 0
    1262:	48 52       	subi	r20, 0x28	; 40
    1264:	5c 4f       	sbci	r21, 0xFC	; 252
    1266:	cd 57       	subi	r28, 0x7D	; 125
    1268:	df 4f       	sbci	r29, 0xFF	; 255
    126a:	59 83       	std	Y+1, r21	; 0x01
    126c:	48 83       	st	Y, r20
    126e:	c3 58       	subi	r28, 0x83	; 131
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	c5 57       	subi	r28, 0x75	; 117
    1274:	df 4f       	sbci	r29, 0xFF	; 255
    1276:	b9 83       	std	Y+1, r27	; 0x01
    1278:	a8 83       	st	Y, r26
    127a:	cb 58       	subi	r28, 0x8B	; 139
    127c:	d0 40       	sbci	r29, 0x00	; 0
    127e:	e7 96       	adiw	r28, 0x37	; 55
    1280:	2e ad       	ldd	r18, Y+62	; 0x3e
    1282:	3f ad       	ldd	r19, Y+63	; 0x3f
    1284:	e7 97       	sbiw	r28, 0x37	; 55
    1286:	23 2b       	or	r18, r19
    1288:	09 f4       	brne	.+2      	; 0x128c <USB_ProcessHIDReport+0xf6>
    128a:	b9 c2       	rjmp	.+1394   	; 0x17fe <USB_ProcessHIDReport+0x668>
    128c:	d6 01       	movw	r26, r12
    128e:	bc 91       	ld	r27, X
    1290:	ef 96       	adiw	r28, 0x3f	; 63
    1292:	bf af       	std	Y+63, r27	; 0x3f
    1294:	ef 97       	sbiw	r28, 0x3f	; 63
    1296:	8b 2f       	mov	r24, r27
    1298:	83 70       	andi	r24, 0x03	; 3
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	49 f1       	breq	.+82     	; 0x12f0 <USB_ProcessHIDReport+0x15a>
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	99 f0       	breq	.+38     	; 0x12c8 <USB_ProcessHIDReport+0x132>
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	c9 f1       	breq	.+114    	; 0x1318 <USB_ProcessHIDReport+0x182>
    12a6:	ef ef       	ldi	r30, 0xFF	; 255
    12a8:	ce 1a       	sub	r12, r30
    12aa:	de 0a       	sbc	r13, r30
    12ac:	e7 96       	adiw	r28, 0x37	; 55
    12ae:	2e ad       	ldd	r18, Y+62	; 0x3e
    12b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    12b2:	e7 97       	sbiw	r28, 0x37	; 55
    12b4:	21 50       	subi	r18, 0x01	; 1
    12b6:	31 09       	sbc	r19, r1
    12b8:	e7 96       	adiw	r28, 0x37	; 55
    12ba:	3f af       	std	Y+63, r19	; 0x3f
    12bc:	2e af       	std	Y+62, r18	; 0x3e
    12be:	e7 97       	sbiw	r28, 0x37	; 55
    12c0:	81 2c       	mov	r8, r1
    12c2:	91 2c       	mov	r9, r1
    12c4:	54 01       	movw	r10, r8
    12c6:	3a c0       	rjmp	.+116    	; 0x133c <USB_ProcessHIDReport+0x1a6>
    12c8:	d6 01       	movw	r26, r12
    12ca:	11 96       	adiw	r26, 0x01	; 1
    12cc:	8d 90       	ld	r8, X+
    12ce:	9d 90       	ld	r9, X+
    12d0:	ad 90       	ld	r10, X+
    12d2:	bc 90       	ld	r11, X
    12d4:	14 97       	sbiw	r26, 0x04	; 4
    12d6:	e7 96       	adiw	r28, 0x37	; 55
    12d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    12da:	ff ad       	ldd	r31, Y+63	; 0x3f
    12dc:	e7 97       	sbiw	r28, 0x37	; 55
    12de:	35 97       	sbiw	r30, 0x05	; 5
    12e0:	e7 96       	adiw	r28, 0x37	; 55
    12e2:	ff af       	std	Y+63, r31	; 0x3f
    12e4:	ee af       	std	Y+62, r30	; 0x3e
    12e6:	e7 97       	sbiw	r28, 0x37	; 55
    12e8:	f5 e0       	ldi	r31, 0x05	; 5
    12ea:	cf 0e       	add	r12, r31
    12ec:	d1 1c       	adc	r13, r1
    12ee:	26 c0       	rjmp	.+76     	; 0x133c <USB_ProcessHIDReport+0x1a6>
    12f0:	d6 01       	movw	r26, r12
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	8d 90       	ld	r8, X+
    12f6:	9c 90       	ld	r9, X
    12f8:	12 97       	sbiw	r26, 0x02	; 2
    12fa:	a1 2c       	mov	r10, r1
    12fc:	b1 2c       	mov	r11, r1
    12fe:	e7 96       	adiw	r28, 0x37	; 55
    1300:	ee ad       	ldd	r30, Y+62	; 0x3e
    1302:	ff ad       	ldd	r31, Y+63	; 0x3f
    1304:	e7 97       	sbiw	r28, 0x37	; 55
    1306:	33 97       	sbiw	r30, 0x03	; 3
    1308:	e7 96       	adiw	r28, 0x37	; 55
    130a:	ff af       	std	Y+63, r31	; 0x3f
    130c:	ee af       	std	Y+62, r30	; 0x3e
    130e:	e7 97       	sbiw	r28, 0x37	; 55
    1310:	f3 e0       	ldi	r31, 0x03	; 3
    1312:	cf 0e       	add	r12, r31
    1314:	d1 1c       	adc	r13, r1
    1316:	12 c0       	rjmp	.+36     	; 0x133c <USB_ProcessHIDReport+0x1a6>
    1318:	d6 01       	movw	r26, r12
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	8c 90       	ld	r8, X
    131e:	91 2c       	mov	r9, r1
    1320:	a1 2c       	mov	r10, r1
    1322:	b1 2c       	mov	r11, r1
    1324:	e7 96       	adiw	r28, 0x37	; 55
    1326:	ee ad       	ldd	r30, Y+62	; 0x3e
    1328:	ff ad       	ldd	r31, Y+63	; 0x3f
    132a:	e7 97       	sbiw	r28, 0x37	; 55
    132c:	32 97       	sbiw	r30, 0x02	; 2
    132e:	e7 96       	adiw	r28, 0x37	; 55
    1330:	ff af       	std	Y+63, r31	; 0x3f
    1332:	ee af       	std	Y+62, r30	; 0x3e
    1334:	e7 97       	sbiw	r28, 0x37	; 55
    1336:	f2 e0       	ldi	r31, 0x02	; 2
    1338:	cf 0e       	add	r12, r31
    133a:	d1 1c       	adc	r13, r1
    133c:	ef 96       	adiw	r28, 0x3f	; 63
    133e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1340:	ef 97       	sbiw	r28, 0x3f	; 63
    1342:	1c 7f       	andi	r17, 0xFC	; 252
    1344:	14 36       	cpi	r17, 0x64	; 100
    1346:	09 f4       	brne	.+2      	; 0x134a <USB_ProcessHIDReport+0x1b4>
    1348:	9d c0       	rjmp	.+314    	; 0x1484 <USB_ProcessHIDReport+0x2ee>
    134a:	88 f5       	brcc	.+98     	; 0x13ae <USB_ProcessHIDReport+0x218>
    134c:	14 32       	cpi	r17, 0x24	; 36
    134e:	09 f4       	brne	.+2      	; 0x1352 <USB_ProcessHIDReport+0x1bc>
    1350:	83 c0       	rjmp	.+262    	; 0x1458 <USB_ProcessHIDReport+0x2c2>
    1352:	b0 f4       	brcc	.+44     	; 0x1380 <USB_ProcessHIDReport+0x1ea>
    1354:	18 30       	cpi	r17, 0x08	; 8
    1356:	09 f4       	brne	.+2      	; 0x135a <USB_ProcessHIDReport+0x1c4>
    1358:	ff c0       	rjmp	.+510    	; 0x1558 <USB_ProcessHIDReport+0x3c2>
    135a:	48 f4       	brcc	.+18     	; 0x136e <USB_ProcessHIDReport+0x1d8>
    135c:	14 30       	cpi	r17, 0x04	; 4
    135e:	09 f0       	breq	.+2      	; 0x1362 <USB_ProcessHIDReport+0x1cc>
    1360:	3d c2       	rjmp	.+1146   	; 0x17dc <USB_ProcessHIDReport+0x646>
    1362:	d7 01       	movw	r26, r14
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	9c 92       	st	X, r9
    1368:	8e 92       	st	-X, r8
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	37 c2       	rjmp	.+1134   	; 0x17dc <USB_ProcessHIDReport+0x646>
    136e:	14 31       	cpi	r17, 0x14	; 20
    1370:	09 f4       	brne	.+2      	; 0x1374 <USB_ProcessHIDReport+0x1de>
    1372:	6c c0       	rjmp	.+216    	; 0x144c <USB_ProcessHIDReport+0x2b6>
    1374:	18 31       	cpi	r17, 0x18	; 24
    1376:	09 f0       	breq	.+2      	; 0x137a <USB_ProcessHIDReport+0x1e4>
    1378:	31 c2       	rjmp	.+1122   	; 0x17dc <USB_ProcessHIDReport+0x646>
    137a:	24 01       	movw	r4, r8
    137c:	35 01       	movw	r6, r10
    137e:	2e c2       	rjmp	.+1116   	; 0x17dc <USB_ProcessHIDReport+0x646>
    1380:	14 33       	cpi	r17, 0x34	; 52
    1382:	09 f4       	brne	.+2      	; 0x1386 <USB_ProcessHIDReport+0x1f0>
    1384:	71 c0       	rjmp	.+226    	; 0x1468 <USB_ProcessHIDReport+0x2d2>
    1386:	50 f4       	brcc	.+20     	; 0x139c <USB_ProcessHIDReport+0x206>
    1388:	18 32       	cpi	r17, 0x28	; 40
    138a:	09 f0       	breq	.+2      	; 0x138e <USB_ProcessHIDReport+0x1f8>
    138c:	27 c2       	rjmp	.+1102   	; 0x17dc <USB_ProcessHIDReport+0x646>
    138e:	ed 96       	adiw	r28, 0x3d	; 61
    1390:	8c ae       	std	Y+60, r8	; 0x3c
    1392:	9d ae       	std	Y+61, r9	; 0x3d
    1394:	ae ae       	std	Y+62, r10	; 0x3e
    1396:	bf ae       	std	Y+63, r11	; 0x3f
    1398:	ed 97       	sbiw	r28, 0x3d	; 61
    139a:	20 c2       	rjmp	.+1088   	; 0x17dc <USB_ProcessHIDReport+0x646>
    139c:	14 34       	cpi	r17, 0x44	; 68
    139e:	09 f4       	brne	.+2      	; 0x13a2 <USB_ProcessHIDReport+0x20c>
    13a0:	69 c0       	rjmp	.+210    	; 0x1474 <USB_ProcessHIDReport+0x2de>
    13a2:	14 35       	cpi	r17, 0x54	; 84
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <USB_ProcessHIDReport+0x212>
    13a6:	1a c2       	rjmp	.+1076   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13a8:	f7 01       	movw	r30, r14
    13aa:	81 86       	std	Z+9, r8	; 0x09
    13ac:	17 c2       	rjmp	.+1070   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13ae:	14 39       	cpi	r17, 0x94	; 148
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <USB_ProcessHIDReport+0x21e>
    13b2:	70 c0       	rjmp	.+224    	; 0x1494 <USB_ProcessHIDReport+0x2fe>
    13b4:	78 f4       	brcc	.+30     	; 0x13d4 <USB_ProcessHIDReport+0x23e>
    13b6:	10 38       	cpi	r17, 0x80	; 128
    13b8:	e1 f0       	breq	.+56     	; 0x13f2 <USB_ProcessHIDReport+0x25c>
    13ba:	30 f4       	brcc	.+12     	; 0x13c8 <USB_ProcessHIDReport+0x232>
    13bc:	14 37       	cpi	r17, 0x74	; 116
    13be:	09 f0       	breq	.+2      	; 0x13c2 <USB_ProcessHIDReport+0x22c>
    13c0:	0d c2       	rjmp	.+1050   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13c2:	f7 01       	movw	r30, r14
    13c4:	80 82       	st	Z, r8
    13c6:	0a c2       	rjmp	.+1044   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13c8:	14 38       	cpi	r17, 0x84	; 132
    13ca:	09 f4       	brne	.+2      	; 0x13ce <USB_ProcessHIDReport+0x238>
    13cc:	67 c0       	rjmp	.+206    	; 0x149c <USB_ProcessHIDReport+0x306>
    13ce:	10 39       	cpi	r17, 0x90	; 144
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <USB_ProcessHIDReport+0x25c>
    13d2:	04 c2       	rjmp	.+1032   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13d4:	10 3b       	cpi	r17, 0xB0	; 176
    13d6:	69 f0       	breq	.+26     	; 0x13f2 <USB_ProcessHIDReport+0x25c>
    13d8:	30 f4       	brcc	.+12     	; 0x13e6 <USB_ProcessHIDReport+0x250>
    13da:	10 3a       	cpi	r17, 0xA0	; 160
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <USB_ProcessHIDReport+0x24a>
    13de:	ca c0       	rjmp	.+404    	; 0x1574 <USB_ProcessHIDReport+0x3de>
    13e0:	14 3a       	cpi	r17, 0xA4	; 164
    13e2:	c9 f0       	breq	.+50     	; 0x1416 <USB_ProcessHIDReport+0x280>
    13e4:	fb c1       	rjmp	.+1014   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13e6:	14 3b       	cpi	r17, 0xB4	; 180
    13e8:	39 f1       	breq	.+78     	; 0x1438 <USB_ProcessHIDReport+0x2a2>
    13ea:	10 3c       	cpi	r17, 0xC0	; 192
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <USB_ProcessHIDReport+0x25a>
    13ee:	2a c1       	rjmp	.+596    	; 0x1644 <USB_ProcessHIDReport+0x4ae>
    13f0:	f5 c1       	rjmp	.+1002   	; 0x17dc <USB_ProcessHIDReport+0x646>
    13f2:	ee 96       	adiw	r28, 0x3e	; 62
    13f4:	1f ae       	std	Y+63, r1	; 0x3f
    13f6:	ee 97       	sbiw	r28, 0x3e	; 62
    13f8:	a5 01       	movw	r20, r10
    13fa:	94 01       	movw	r18, r8
    13fc:	21 70       	andi	r18, 0x01	; 1
    13fe:	33 27       	eor	r19, r19
    1400:	44 27       	eor	r20, r20
    1402:	55 27       	eor	r21, r21
    1404:	cb 57       	subi	r28, 0x7B	; 123
    1406:	df 4f       	sbci	r29, 0xFF	; 255
    1408:	28 83       	st	Y, r18
    140a:	39 83       	std	Y+1, r19	; 0x01
    140c:	4a 83       	std	Y+2, r20	; 0x02
    140e:	5b 83       	std	Y+3, r21	; 0x03
    1410:	c5 58       	subi	r28, 0x85	; 133
    1412:	d0 40       	sbci	r29, 0x00	; 0
    1414:	47 c1       	rjmp	.+654    	; 0x16a4 <USB_ProcessHIDReport+0x50e>
    1416:	ce 01       	movw	r24, r28
    1418:	4d 96       	adiw	r24, 0x1d	; 29
    141a:	e8 16       	cp	r14, r24
    141c:	f9 06       	cpc	r15, r25
    141e:	09 f4       	brne	.+2      	; 0x1422 <USB_ProcessHIDReport+0x28c>
    1420:	f4 c1       	rjmp	.+1000   	; 0x180a <USB_ProcessHIDReport+0x674>
    1422:	c7 01       	movw	r24, r14
    1424:	4c 96       	adiw	r24, 0x1c	; 28
    1426:	2a e2       	ldi	r18, 0x2A	; 42
    1428:	f7 01       	movw	r30, r14
    142a:	dc 01       	movw	r26, r24
    142c:	01 90       	ld	r0, Z+
    142e:	0d 92       	st	X+, r0
    1430:	2a 95       	dec	r18
    1432:	e1 f7       	brne	.-8      	; 0x142c <USB_ProcessHIDReport+0x296>
    1434:	7c 01       	movw	r14, r24
    1436:	d2 c1       	rjmp	.+932    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	8e 15       	cp	r24, r14
    143e:	9f 05       	cpc	r25, r15
    1440:	09 f4       	brne	.+2      	; 0x1444 <USB_ProcessHIDReport+0x2ae>
    1442:	e5 c1       	rjmp	.+970    	; 0x180e <USB_ProcessHIDReport+0x678>
    1444:	3c e1       	ldi	r19, 0x1C	; 28
    1446:	e3 1a       	sub	r14, r19
    1448:	f1 08       	sbc	r15, r1
    144a:	c8 c1       	rjmp	.+912    	; 0x17dc <USB_ProcessHIDReport+0x646>
    144c:	f7 01       	movw	r30, r14
    144e:	82 86       	std	Z+10, r8	; 0x0a
    1450:	93 86       	std	Z+11, r9	; 0x0b
    1452:	a4 86       	std	Z+12, r10	; 0x0c
    1454:	b5 86       	std	Z+13, r11	; 0x0d
    1456:	c2 c1       	rjmp	.+900    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1458:	d7 01       	movw	r26, r14
    145a:	1e 96       	adiw	r26, 0x0e	; 14
    145c:	8d 92       	st	X+, r8
    145e:	9d 92       	st	X+, r9
    1460:	ad 92       	st	X+, r10
    1462:	bc 92       	st	X, r11
    1464:	51 97       	sbiw	r26, 0x11	; 17
    1466:	ba c1       	rjmp	.+884    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1468:	f7 01       	movw	r30, r14
    146a:	82 8a       	std	Z+18, r8	; 0x12
    146c:	93 8a       	std	Z+19, r9	; 0x13
    146e:	a4 8a       	std	Z+20, r10	; 0x14
    1470:	b5 8a       	std	Z+21, r11	; 0x15
    1472:	b4 c1       	rjmp	.+872    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1474:	d7 01       	movw	r26, r14
    1476:	56 96       	adiw	r26, 0x16	; 22
    1478:	8d 92       	st	X+, r8
    147a:	9d 92       	st	X+, r9
    147c:	ad 92       	st	X+, r10
    147e:	bc 92       	st	X, r11
    1480:	59 97       	sbiw	r26, 0x19	; 25
    1482:	ac c1       	rjmp	.+856    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1484:	d7 01       	movw	r26, r14
    1486:	15 96       	adiw	r26, 0x05	; 5
    1488:	8d 92       	st	X+, r8
    148a:	9d 92       	st	X+, r9
    148c:	ad 92       	st	X+, r10
    148e:	bc 92       	st	X, r11
    1490:	18 97       	sbiw	r26, 0x08	; 8
    1492:	a4 c1       	rjmp	.+840    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1494:	d7 01       	movw	r26, r14
    1496:	5a 96       	adiw	r26, 0x1a	; 26
    1498:	8c 92       	st	X, r8
    149a:	a0 c1       	rjmp	.+832    	; 0x17dc <USB_ProcessHIDReport+0x646>
    149c:	98 2d       	mov	r25, r8
    149e:	f7 01       	movw	r30, r14
    14a0:	83 8e       	std	Z+27, r8	; 0x1b
    14a2:	cd 57       	subi	r28, 0x7D	; 125
    14a4:	df 4f       	sbci	r29, 0xFF	; 255
    14a6:	a8 81       	ld	r26, Y
    14a8:	b9 81       	ldd	r27, Y+1	; 0x01
    14aa:	c3 58       	subi	r28, 0x83	; 131
    14ac:	d0 40       	sbci	r29, 0x00	; 0
    14ae:	8c 91       	ld	r24, X
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <USB_ProcessHIDReport+0x320>
    14b4:	41 c0       	rjmp	.+130    	; 0x1538 <USB_ProcessHIDReport+0x3a2>
    14b6:	c5 57       	subi	r28, 0x75	; 117
    14b8:	df 4f       	sbci	r29, 0xFF	; 255
    14ba:	e8 81       	ld	r30, Y
    14bc:	f9 81       	ldd	r31, Y+1	; 0x01
    14be:	cb 58       	subi	r28, 0x8B	; 139
    14c0:	d0 40       	sbci	r29, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	f1 01       	movw	r30, r2
    14c6:	e0 57       	subi	r30, 0x70	; 112
    14c8:	fc 4f       	sbci	r31, 0xFC	; 252
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	28 17       	cp	r18, r24
    14d0:	b8 f4       	brcc	.+46     	; 0x1500 <USB_ProcessHIDReport+0x36a>
    14d2:	a9 01       	movw	r20, r18
    14d4:	60 81       	ld	r22, Z
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	37 96       	adiw	r30, 0x07	; 7
    14dc:	96 13       	cpse	r25, r22
    14de:	f7 cf       	rjmp	.-18     	; 0x14ce <USB_ProcessHIDReport+0x338>
    14e0:	27 e0       	ldi	r18, 0x07	; 7
    14e2:	24 9f       	mul	r18, r20
    14e4:	c0 01       	movw	r24, r0
    14e6:	25 9f       	mul	r18, r21
    14e8:	90 0d       	add	r25, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	80 57       	subi	r24, 0x70	; 112
    14ee:	9c 4f       	sbci	r25, 0xFC	; 252
    14f0:	91 01       	movw	r18, r2
    14f2:	28 0f       	add	r18, r24
    14f4:	39 1f       	adc	r19, r25
    14f6:	e9 96       	adiw	r28, 0x39	; 57
    14f8:	3f af       	std	Y+63, r19	; 0x3f
    14fa:	2e af       	std	Y+62, r18	; 0x3e
    14fc:	e9 97       	sbiw	r28, 0x39	; 57
    14fe:	1c c0       	rjmp	.+56     	; 0x1538 <USB_ProcessHIDReport+0x3a2>
    1500:	8a 30       	cpi	r24, 0x0A	; 10
    1502:	09 f4       	brne	.+2      	; 0x1506 <USB_ProcessHIDReport+0x370>
    1504:	8e c1       	rjmp	.+796    	; 0x1822 <USB_ProcessHIDReport+0x68c>
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	98 0f       	add	r25, r24
    150a:	c1 58       	subi	r28, 0x81	; 129
    150c:	df 4f       	sbci	r29, 0xFF	; 255
    150e:	a8 81       	ld	r26, Y
    1510:	b9 81       	ldd	r27, Y+1	; 0x01
    1512:	cf 57       	subi	r28, 0x7F	; 127
    1514:	d0 40       	sbci	r29, 0x00	; 0
    1516:	9c 93       	st	X, r25
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	91 01       	movw	r18, r2
    151c:	98 9f       	mul	r25, r24
    151e:	20 0d       	add	r18, r0
    1520:	31 1d       	adc	r19, r1
    1522:	11 24       	eor	r1, r1
    1524:	f9 01       	movw	r30, r18
    1526:	e0 57       	subi	r30, 0x70	; 112
    1528:	fc 4f       	sbci	r31, 0xFC	; 252
    152a:	e9 96       	adiw	r28, 0x39	; 57
    152c:	ff af       	std	Y+63, r31	; 0x3f
    152e:	ee af       	std	Y+62, r30	; 0x3e
    1530:	e9 97       	sbiw	r28, 0x39	; 57
    1532:	11 92       	st	Z+, r1
    1534:	9a 95       	dec	r25
    1536:	e9 f7       	brne	.-6      	; 0x1532 <USB_ProcessHIDReport+0x39c>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	cd 57       	subi	r28, 0x7D	; 125
    153c:	df 4f       	sbci	r29, 0xFF	; 255
    153e:	a8 81       	ld	r26, Y
    1540:	b9 81       	ldd	r27, Y+1	; 0x01
    1542:	c3 58       	subi	r28, 0x83	; 131
    1544:	d0 40       	sbci	r29, 0x00	; 0
    1546:	8c 93       	st	X, r24
    1548:	f7 01       	movw	r30, r14
    154a:	83 8d       	ldd	r24, Z+27	; 0x1b
    154c:	e9 96       	adiw	r28, 0x39	; 57
    154e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1550:	bf ad       	ldd	r27, Y+63	; 0x3f
    1552:	e9 97       	sbiw	r28, 0x39	; 57
    1554:	8c 93       	st	X, r24
    1556:	42 c1       	rjmp	.+644    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1558:	08 30       	cpi	r16, 0x08	; 8
    155a:	09 f4       	brne	.+2      	; 0x155e <USB_ProcessHIDReport+0x3c8>
    155c:	5a c1       	rjmp	.+692    	; 0x1812 <USB_ProcessHIDReport+0x67c>
    155e:	fe 01       	movw	r30, r28
    1560:	ed 59       	subi	r30, 0x9D	; 157
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	e0 0f       	add	r30, r16
    1566:	f1 1d       	adc	r31, r1
    1568:	e0 0f       	add	r30, r16
    156a:	f1 1d       	adc	r31, r1
    156c:	91 82       	std	Z+1, r9	; 0x01
    156e:	80 82       	st	Z, r8
    1570:	0f 5f       	subi	r16, 0xFF	; 255
    1572:	34 c1       	rjmp	.+616    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1574:	e5 96       	adiw	r28, 0x35	; 53
    1576:	ee ad       	ldd	r30, Y+62	; 0x3e
    1578:	ff ad       	ldd	r31, Y+63	; 0x3f
    157a:	e5 97       	sbiw	r28, 0x35	; 53
    157c:	ef 2b       	or	r30, r31
    157e:	41 f4       	brne	.+16     	; 0x1590 <USB_ProcessHIDReport+0x3fa>
    1580:	91 01       	movw	r18, r2
    1582:	27 5b       	subi	r18, 0xB7	; 183
    1584:	3c 4f       	sbci	r19, 0xFC	; 252
    1586:	e5 96       	adiw	r28, 0x35	; 53
    1588:	3f af       	std	Y+63, r19	; 0x3f
    158a:	2e af       	std	Y+62, r18	; 0x3e
    158c:	e5 97       	sbiw	r28, 0x35	; 53
    158e:	1d c0       	rjmp	.+58     	; 0x15ca <USB_ProcessHIDReport+0x434>
    1590:	f1 01       	movw	r30, r2
    1592:	e0 5b       	subi	r30, 0xB0	; 176
    1594:	fc 4f       	sbci	r31, 0xFC	; 252
    1596:	85 81       	ldd	r24, Z+5	; 0x05
    1598:	96 81       	ldd	r25, Z+6	; 0x06
    159a:	89 2b       	or	r24, r25
    159c:	61 f0       	breq	.+24     	; 0x15b6 <USB_ProcessHIDReport+0x420>
    159e:	c7 57       	subi	r28, 0x77	; 119
    15a0:	df 4f       	sbci	r29, 0xFF	; 255
    15a2:	48 81       	ld	r20, Y
    15a4:	59 81       	ldd	r21, Y+1	; 0x01
    15a6:	c9 58       	subi	r28, 0x89	; 137
    15a8:	d0 40       	sbci	r29, 0x00	; 0
    15aa:	e4 17       	cp	r30, r20
    15ac:	f5 07       	cpc	r31, r21
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <USB_ProcessHIDReport+0x41c>
    15b0:	32 c1       	rjmp	.+612    	; 0x1816 <USB_ProcessHIDReport+0x680>
    15b2:	37 96       	adiw	r30, 0x07	; 7
    15b4:	f0 cf       	rjmp	.-32     	; 0x1596 <USB_ProcessHIDReport+0x400>
    15b6:	e5 96       	adiw	r28, 0x35	; 53
    15b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    15bc:	e5 97       	sbiw	r28, 0x35	; 53
    15be:	96 83       	std	Z+6, r25	; 0x06
    15c0:	85 83       	std	Z+5, r24	; 0x05
    15c2:	e5 96       	adiw	r28, 0x35	; 53
    15c4:	ff af       	std	Y+63, r31	; 0x3f
    15c6:	ee af       	std	Y+62, r30	; 0x3e
    15c8:	e5 97       	sbiw	r28, 0x35	; 53
    15ca:	e5 96       	adiw	r28, 0x35	; 53
    15cc:	ae ad       	ldd	r26, Y+62	; 0x3e
    15ce:	bf ad       	ldd	r27, Y+63	; 0x3f
    15d0:	e5 97       	sbiw	r28, 0x35	; 53
    15d2:	8c 92       	st	X, r8
    15d4:	f7 01       	movw	r30, r14
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
    15d8:	92 81       	ldd	r25, Z+2	; 0x02
    15da:	12 96       	adiw	r26, 0x02	; 2
    15dc:	9c 93       	st	X, r25
    15de:	8e 93       	st	-X, r24
    15e0:	11 97       	sbiw	r26, 0x01	; 1
    15e2:	00 23       	and	r16, r16
    15e4:	a9 f0       	breq	.+42     	; 0x1610 <USB_ProcessHIDReport+0x47a>
    15e6:	a5 96       	adiw	r28, 0x25	; 37
    15e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    15ec:	a5 97       	sbiw	r28, 0x25	; 37
    15ee:	14 96       	adiw	r26, 0x04	; 4
    15f0:	9c 93       	st	X, r25
    15f2:	8e 93       	st	-X, r24
    15f4:	13 97       	sbiw	r26, 0x03	; 3
    15f6:	fe 01       	movw	r30, r28
    15f8:	ed 59       	subi	r30, 0x9D	; 157
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	22 81       	ldd	r18, Z+2	; 0x02
    1600:	33 81       	ldd	r19, Z+3	; 0x03
    1602:	21 93       	st	Z+, r18
    1604:	31 93       	st	Z+, r19
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	08 13       	cpse	r16, r24
    160a:	f9 cf       	rjmp	.-14     	; 0x15fe <USB_ProcessHIDReport+0x468>
    160c:	01 50       	subi	r16, 0x01	; 1
    160e:	e6 c0       	rjmp	.+460    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1610:	ed 96       	adiw	r28, 0x3d	; 61
    1612:	2c ad       	ldd	r18, Y+60	; 0x3c
    1614:	3d ad       	ldd	r19, Y+61	; 0x3d
    1616:	4e ad       	ldd	r20, Y+62	; 0x3e
    1618:	5f ad       	ldd	r21, Y+63	; 0x3f
    161a:	ed 97       	sbiw	r28, 0x3d	; 61
    161c:	24 15       	cp	r18, r4
    161e:	35 05       	cpc	r19, r5
    1620:	46 05       	cpc	r20, r6
    1622:	57 05       	cpc	r21, r7
    1624:	08 f4       	brcc	.+2      	; 0x1628 <USB_ProcessHIDReport+0x492>
    1626:	da c0       	rjmp	.+436    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1628:	e5 96       	adiw	r28, 0x35	; 53
    162a:	ae ad       	ldd	r26, Y+62	; 0x3e
    162c:	bf ad       	ldd	r27, Y+63	; 0x3f
    162e:	e5 97       	sbiw	r28, 0x35	; 53
    1630:	14 96       	adiw	r26, 0x04	; 4
    1632:	5c 92       	st	X, r5
    1634:	4e 92       	st	-X, r4
    1636:	13 97       	sbiw	r26, 0x03	; 3
    1638:	bf ef       	ldi	r27, 0xFF	; 255
    163a:	4b 1a       	sub	r4, r27
    163c:	5b 0a       	sbc	r5, r27
    163e:	6b 0a       	sbc	r6, r27
    1640:	7b 0a       	sbc	r7, r27
    1642:	cc c0       	rjmp	.+408    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1644:	e5 96       	adiw	r28, 0x35	; 53
    1646:	ee ad       	ldd	r30, Y+62	; 0x3e
    1648:	ff ad       	ldd	r31, Y+63	; 0x3f
    164a:	e5 97       	sbiw	r28, 0x35	; 53
    164c:	30 97       	sbiw	r30, 0x00	; 0
    164e:	09 f4       	brne	.+2      	; 0x1652 <USB_ProcessHIDReport+0x4bc>
    1650:	e4 c0       	rjmp	.+456    	; 0x181a <USB_ProcessHIDReport+0x684>
    1652:	25 81       	ldd	r18, Z+5	; 0x05
    1654:	36 81       	ldd	r19, Z+6	; 0x06
    1656:	e5 96       	adiw	r28, 0x35	; 53
    1658:	3f af       	std	Y+63, r19	; 0x3f
    165a:	2e af       	std	Y+62, r18	; 0x3e
    165c:	e5 97       	sbiw	r28, 0x35	; 53
    165e:	be c0       	rjmp	.+380    	; 0x17dc <USB_ProcessHIDReport+0x646>
    1660:	d1 01       	movw	r26, r2
    1662:	ea e2       	ldi	r30, 0x2A	; 42
    1664:	e8 9f       	mul	r30, r24
    1666:	a0 0d       	add	r26, r0
    1668:	b1 1d       	adc	r27, r1
    166a:	11 24       	eor	r1, r1
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	fe 01       	movw	r30, r28
    1670:	f9 96       	adiw	r30, 0x39	; 57
    1672:	8a e2       	ldi	r24, 0x2A	; 42
    1674:	01 90       	ld	r0, Z+
    1676:	0d 92       	st	X+, r0
    1678:	8a 95       	dec	r24
    167a:	e1 f7       	brne	.-8      	; 0x1674 <USB_ProcessHIDReport+0x4de>
    167c:	cb 57       	subi	r28, 0x7B	; 123
    167e:	df 4f       	sbci	r29, 0xFF	; 255
    1680:	28 81       	ld	r18, Y
    1682:	39 81       	ldd	r19, Y+1	; 0x01
    1684:	4a 81       	ldd	r20, Y+2	; 0x02
    1686:	5b 81       	ldd	r21, Y+3	; 0x03
    1688:	c5 58       	subi	r28, 0x85	; 133
    168a:	d0 40       	sbci	r29, 0x00	; 0
    168c:	23 2b       	or	r18, r19
    168e:	24 2b       	or	r18, r20
    1690:	25 2b       	or	r18, r21
    1692:	09 f4       	brne	.+2      	; 0x1696 <USB_ProcessHIDReport+0x500>
    1694:	97 c0       	rjmp	.+302    	; 0x17c4 <USB_ProcessHIDReport+0x62e>
    1696:	ee 96       	adiw	r28, 0x3e	; 62
    1698:	bf ad       	ldd	r27, Y+63	; 0x3f
    169a:	ee 97       	sbiw	r28, 0x3e	; 62
    169c:	bf 5f       	subi	r27, 0xFF	; 255
    169e:	ee 96       	adiw	r28, 0x3e	; 62
    16a0:	bf af       	std	Y+63, r27	; 0x3f
    16a2:	ee 97       	sbiw	r28, 0x3e	; 62
    16a4:	f7 01       	movw	r30, r14
    16a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a8:	ee 96       	adiw	r28, 0x3e	; 62
    16aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    16ac:	ee 97       	sbiw	r28, 0x3e	; 62
    16ae:	f8 17       	cp	r31, r24
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <USB_ProcessHIDReport+0x51e>
    16b2:	94 c0       	rjmp	.+296    	; 0x17dc <USB_ProcessHIDReport+0x646>
    16b4:	8a e1       	ldi	r24, 0x1A	; 26
    16b6:	f7 01       	movw	r30, r14
    16b8:	de 01       	movw	r26, r28
    16ba:	af 5b       	subi	r26, 0xBF	; 191
    16bc:	bf 4f       	sbci	r27, 0xFF	; 255
    16be:	01 90       	ld	r0, Z+
    16c0:	0d 92       	st	X+, r0
    16c2:	8a 95       	dec	r24
    16c4:	e1 f7       	brne	.-8      	; 0x16be <USB_ProcessHIDReport+0x528>
    16c6:	9d ae       	std	Y+61, r9	; 0x3d
    16c8:	8c ae       	std	Y+60, r8	; 0x3c
    16ca:	e5 96       	adiw	r28, 0x35	; 53
    16cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    16ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    16d0:	e5 97       	sbiw	r28, 0x35	; 53
    16d2:	21 96       	adiw	r28, 0x01	; 1
    16d4:	5f af       	std	Y+63, r21	; 0x3f
    16d6:	4e af       	std	Y+62, r20	; 0x3e
    16d8:	21 97       	sbiw	r28, 0x01	; 1
    16da:	d7 01       	movw	r26, r14
    16dc:	5b 96       	adiw	r26, 0x1b	; 27
    16de:	8c 91       	ld	r24, X
    16e0:	8e af       	std	Y+62, r24	; 0x3e
    16e2:	00 23       	and	r16, r16
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <USB_ProcessHIDReport+0x57a>
    16e6:	a5 96       	adiw	r28, 0x25	; 37
    16e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ec:	a5 97       	sbiw	r28, 0x25	; 37
    16ee:	26 96       	adiw	r28, 0x06	; 6
    16f0:	9f af       	std	Y+63, r25	; 0x3f
    16f2:	8e af       	std	Y+62, r24	; 0x3e
    16f4:	26 97       	sbiw	r28, 0x06	; 6
    16f6:	fe 01       	movw	r30, r28
    16f8:	ed 59       	subi	r30, 0x9D	; 157
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	22 81       	ldd	r18, Z+2	; 0x02
    1700:	33 81       	ldd	r19, Z+3	; 0x03
    1702:	21 93       	st	Z+, r18
    1704:	31 93       	st	Z+, r19
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	08 13       	cpse	r16, r24
    170a:	f9 cf       	rjmp	.-14     	; 0x16fe <USB_ProcessHIDReport+0x568>
    170c:	01 50       	subi	r16, 0x01	; 1
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <USB_ProcessHIDReport+0x5a2>
    1710:	ed 96       	adiw	r28, 0x3d	; 61
    1712:	2c ad       	ldd	r18, Y+60	; 0x3c
    1714:	3d ad       	ldd	r19, Y+61	; 0x3d
    1716:	4e ad       	ldd	r20, Y+62	; 0x3e
    1718:	5f ad       	ldd	r21, Y+63	; 0x3f
    171a:	ed 97       	sbiw	r28, 0x3d	; 61
    171c:	24 15       	cp	r18, r4
    171e:	35 05       	cpc	r19, r5
    1720:	46 05       	cpc	r20, r6
    1722:	57 05       	cpc	r21, r7
    1724:	48 f0       	brcs	.+18     	; 0x1738 <USB_ProcessHIDReport+0x5a2>
    1726:	26 96       	adiw	r28, 0x06	; 6
    1728:	5f ae       	std	Y+63, r5	; 0x3f
    172a:	4e ae       	std	Y+62, r4	; 0x3e
    172c:	26 97       	sbiw	r28, 0x06	; 6
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	43 1a       	sub	r4, r19
    1732:	53 0a       	sbc	r5, r19
    1734:	63 0a       	sbc	r6, r19
    1736:	73 0a       	sbc	r7, r19
    1738:	10 38       	cpi	r17, 0x80	; 128
    173a:	11 f4       	brne	.+4      	; 0x1740 <USB_ProcessHIDReport+0x5aa>
    173c:	1b ae       	std	Y+59, r1	; 0x3b
    173e:	07 c0       	rjmp	.+14     	; 0x174e <USB_ProcessHIDReport+0x5b8>
    1740:	10 39       	cpi	r17, 0x90	; 144
    1742:	19 f4       	brne	.+6      	; 0x174a <USB_ProcessHIDReport+0x5b4>
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	4b af       	std	Y+59, r20	; 0x3b
    1748:	02 c0       	rjmp	.+4      	; 0x174e <USB_ProcessHIDReport+0x5b8>
    174a:	52 e0       	ldi	r21, 0x02	; 2
    174c:	5b af       	std	Y+59, r21	; 0x3b
    174e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1750:	e9 96       	adiw	r28, 0x39	; 57
    1752:	ee ad       	ldd	r30, Y+62	; 0x3e
    1754:	ff ad       	ldd	r31, Y+63	; 0x3f
    1756:	e9 97       	sbiw	r28, 0x39	; 57
    1758:	e8 0f       	add	r30, r24
    175a:	f1 1d       	adc	r31, r1
    175c:	e8 0f       	add	r30, r24
    175e:	f1 1d       	adc	r31, r1
    1760:	81 81       	ldd	r24, Z+1	; 0x01
    1762:	92 81       	ldd	r25, Z+2	; 0x02
    1764:	9a af       	std	Y+58, r25	; 0x3a
    1766:	89 af       	std	Y+57, r24	; 0x39
    1768:	d7 01       	movw	r26, r14
    176a:	2c 91       	ld	r18, X
    176c:	81 81       	ldd	r24, Z+1	; 0x01
    176e:	92 81       	ldd	r25, Z+2	; 0x02
    1770:	82 0f       	add	r24, r18
    1772:	91 1d       	adc	r25, r1
    1774:	92 83       	std	Z+2, r25	; 0x02
    1776:	81 83       	std	Z+1, r24	; 0x01
    1778:	8b ad       	ldd	r24, Y+59	; 0x3b
    177a:	e9 96       	adiw	r28, 0x39	; 57
    177c:	ee ad       	ldd	r30, Y+62	; 0x3e
    177e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1780:	e9 97       	sbiw	r28, 0x39	; 57
    1782:	e8 0f       	add	r30, r24
    1784:	f1 1d       	adc	r31, r1
    1786:	e8 0f       	add	r30, r24
    1788:	f1 1d       	adc	r31, r1
    178a:	cf 57       	subi	r28, 0x7F	; 127
    178c:	df 4f       	sbci	r29, 0xFF	; 255
    178e:	a8 81       	ld	r26, Y
    1790:	b9 81       	ldd	r27, Y+1	; 0x01
    1792:	c1 58       	subi	r28, 0x81	; 129
    1794:	d0 40       	sbci	r29, 0x00	; 0
    1796:	2d 91       	ld	r18, X+
    1798:	3c 91       	ld	r19, X
    179a:	81 81       	ldd	r24, Z+1	; 0x01
    179c:	92 81       	ldd	r25, Z+2	; 0x02
    179e:	82 17       	cp	r24, r18
    17a0:	93 07       	cpc	r25, r19
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <USB_ProcessHIDReport+0x610>
    17a4:	c9 01       	movw	r24, r18
    17a6:	cf 57       	subi	r28, 0x7F	; 127
    17a8:	df 4f       	sbci	r29, 0xFF	; 255
    17aa:	e8 81       	ld	r30, Y
    17ac:	f9 81       	ldd	r31, Y+1	; 0x01
    17ae:	c1 58       	subi	r28, 0x81	; 129
    17b0:	d0 40       	sbci	r29, 0x00	; 0
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	80 83       	st	Z, r24
    17b6:	d1 01       	movw	r26, r2
    17b8:	8c 91       	ld	r24, X
    17ba:	84 31       	cpi	r24, 0x14	; 20
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <USB_ProcessHIDReport+0x62a>
    17be:	50 cf       	rjmp	.-352    	; 0x1660 <USB_ProcessHIDReport+0x4ca>
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	30 c0       	rjmp	.+96     	; 0x1824 <USB_ProcessHIDReport+0x68e>
    17c4:	ce 01       	movw	r24, r28
    17c6:	c9 96       	adiw	r24, 0x39	; 57
    17c8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <CALLBACK_HIDParser_FilterHIDReportItem>
    17cc:	88 23       	and	r24, r24
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <USB_ProcessHIDReport+0x63c>
    17d0:	62 cf       	rjmp	.-316    	; 0x1696 <USB_ProcessHIDReport+0x500>
    17d2:	d1 01       	movw	r26, r2
    17d4:	8c 91       	ld	r24, X
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	8c 93       	st	X, r24
    17da:	5d cf       	rjmp	.-326    	; 0x1696 <USB_ProcessHIDReport+0x500>
    17dc:	ef 96       	adiw	r28, 0x3f	; 63
    17de:	8f ad       	ldd	r24, Y+63	; 0x3f
    17e0:	ef 97       	sbiw	r28, 0x3f	; 63
    17e2:	8c 70       	andi	r24, 0x0C	; 12
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <USB_ProcessHIDReport+0x652>
    17e6:	4b cd       	rjmp	.-1386   	; 0x127e <USB_ProcessHIDReport+0xe8>
    17e8:	ed 96       	adiw	r28, 0x3d	; 61
    17ea:	1c ae       	std	Y+60, r1	; 0x3c
    17ec:	1d ae       	std	Y+61, r1	; 0x3d
    17ee:	1e ae       	std	Y+62, r1	; 0x3e
    17f0:	1f ae       	std	Y+63, r1	; 0x3f
    17f2:	ed 97       	sbiw	r28, 0x3d	; 61
    17f4:	41 2c       	mov	r4, r1
    17f6:	51 2c       	mov	r5, r1
    17f8:	32 01       	movw	r6, r4
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	40 cd       	rjmp	.-1408   	; 0x127e <USB_ProcessHIDReport+0xe8>
    17fe:	d1 01       	movw	r26, r2
    1800:	8c 91       	ld	r24, X
    1802:	88 23       	and	r24, r24
    1804:	61 f0       	breq	.+24     	; 0x181e <USB_ProcessHIDReport+0x688>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <USB_ProcessHIDReport+0x68e>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	0b c0       	rjmp	.+22     	; 0x1824 <USB_ProcessHIDReport+0x68e>
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	09 c0       	rjmp	.+18     	; 0x1824 <USB_ProcessHIDReport+0x68e>
    1812:	86 e0       	ldi	r24, 0x06	; 6
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <USB_ProcessHIDReport+0x68e>
    1816:	85 e0       	ldi	r24, 0x05	; 5
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <USB_ProcessHIDReport+0x68e>
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <USB_ProcessHIDReport+0x68e>
    181e:	88 e0       	ldi	r24, 0x08	; 8
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <USB_ProcessHIDReport+0x68e>
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	c4 57       	subi	r28, 0x74	; 116
    1826:	df 4f       	sbci	r29, 0xFF	; 255
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	bf 90       	pop	r11
    1844:	af 90       	pop	r10
    1846:	9f 90       	pop	r9
    1848:	8f 90       	pop	r8
    184a:	7f 90       	pop	r7
    184c:	6f 90       	pop	r6
    184e:	5f 90       	pop	r5
    1850:	4f 90       	pop	r4
    1852:	3f 90       	pop	r3
    1854:	2f 90       	pop	r2
    1856:	08 95       	ret

00001858 <USB_GetHIDReportItemInfo>:
    1858:	8f 92       	push	r8
    185a:	9f 92       	push	r9
    185c:	af 92       	push	r10
    185e:	bf 92       	push	r11
    1860:	cf 92       	push	r12
    1862:	df 92       	push	r13
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	fb 01       	movw	r30, r22
    186a:	30 97       	sbiw	r30, 0x00	; 0
    186c:	09 f4       	brne	.+2      	; 0x1870 <USB_GetHIDReportItemInfo+0x18>
    186e:	48 c0       	rjmp	.+144    	; 0x1900 <USB_GetHIDReportItemInfo+0xa8>
    1870:	25 81       	ldd	r18, Z+5	; 0x05
    1872:	22 23       	and	r18, r18
    1874:	29 f0       	breq	.+10     	; 0x1880 <USB_GetHIDReportItemInfo+0x28>
    1876:	dc 01       	movw	r26, r24
    1878:	3c 91       	ld	r19, X
    187a:	23 13       	cpse	r18, r19
    187c:	41 c0       	rjmp	.+130    	; 0x1900 <USB_GetHIDReportItemInfo+0xa8>
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	20 85       	ldd	r18, Z+8	; 0x08
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	c2 a0       	ldd	r12, Z+34	; 0x22
    188a:	d3 a0       	ldd	r13, Z+35	; 0x23
    188c:	e4 a0       	ldd	r14, Z+36	; 0x24
    188e:	f5 a0       	ldd	r15, Z+37	; 0x25
    1890:	c6 a2       	std	Z+38, r12	; 0x26
    1892:	d7 a2       	std	Z+39, r13	; 0x27
    1894:	e0 a6       	std	Z+40, r14	; 0x28
    1896:	f1 a6       	std	Z+41, r15	; 0x29
    1898:	12 a2       	std	Z+34, r1	; 0x22
    189a:	13 a2       	std	Z+35, r1	; 0x23
    189c:	14 a2       	std	Z+36, r1	; 0x24
    189e:	15 a2       	std	Z+37, r1	; 0x25
    18a0:	c1 2c       	mov	r12, r1
    18a2:	d1 2c       	mov	r13, r1
    18a4:	76 01       	movw	r14, r12
    18a6:	c3 94       	inc	r12
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	31 09       	sbc	r19, r1
    18ac:	38 f1       	brcs	.+78     	; 0x18fc <USB_GetHIDReportItemInfo+0xa4>
    18ae:	db 01       	movw	r26, r22
    18b0:	53 e0       	ldi	r21, 0x03	; 3
    18b2:	b6 95       	lsr	r27
    18b4:	a7 95       	ror	r26
    18b6:	5a 95       	dec	r21
    18b8:	e1 f7       	brne	.-8      	; 0x18b2 <USB_GetHIDReportItemInfo+0x5a>
    18ba:	a8 0f       	add	r26, r24
    18bc:	b9 1f       	adc	r27, r25
    18be:	4c 91       	ld	r20, X
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	db 01       	movw	r26, r22
    18c4:	a7 70       	andi	r26, 0x07	; 7
    18c6:	bb 27       	eor	r27, r27
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <USB_GetHIDReportItemInfo+0x76>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	aa 95       	dec	r26
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <USB_GetHIDReportItemInfo+0x72>
    18d2:	40 ff       	sbrs	r20, 0
    18d4:	0c c0       	rjmp	.+24     	; 0x18ee <USB_GetHIDReportItemInfo+0x96>
    18d6:	82 a0       	ldd	r8, Z+34	; 0x22
    18d8:	93 a0       	ldd	r9, Z+35	; 0x23
    18da:	a4 a0       	ldd	r10, Z+36	; 0x24
    18dc:	b5 a0       	ldd	r11, Z+37	; 0x25
    18de:	8c 28       	or	r8, r12
    18e0:	9d 28       	or	r9, r13
    18e2:	ae 28       	or	r10, r14
    18e4:	bf 28       	or	r11, r15
    18e6:	82 a2       	std	Z+34, r8	; 0x22
    18e8:	93 a2       	std	Z+35, r9	; 0x23
    18ea:	a4 a2       	std	Z+36, r10	; 0x24
    18ec:	b5 a2       	std	Z+37, r11	; 0x25
    18ee:	6f 5f       	subi	r22, 0xFF	; 255
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	cc 0c       	add	r12, r12
    18f4:	dd 1c       	adc	r13, r13
    18f6:	ee 1c       	adc	r14, r14
    18f8:	ff 1c       	adc	r15, r15
    18fa:	d6 cf       	rjmp	.-84     	; 0x18a8 <USB_GetHIDReportItemInfo+0x50>
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <USB_GetHIDReportItemInfo+0xaa>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	9f 90       	pop	r9
    1910:	8f 90       	pop	r8
    1912:	08 95       	ret

00001914 <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1914:	fc 01       	movw	r30, r24
    1916:	ea 5b       	subi	r30, 0xBA	; 186
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	44 0f       	add	r20, r20
    191e:	55 1f       	adc	r21, r21
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1920:	4f 56       	subi	r20, 0x6F	; 111
    1922:	5c 4f       	sbci	r21, 0xFC	; 252
    1924:	dc 01       	movw	r26, r24
    1926:	a4 0f       	add	r26, r20
    1928:	b5 1f       	adc	r27, r21
    192a:	2d 91       	ld	r18, X+
    192c:	3c 91       	ld	r19, X

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    192e:	dc 01       	movw	r26, r24
    1930:	a0 57       	subi	r26, 0x70	; 112
    1932:	bc 4f       	sbci	r27, 0xFC	; 252
    1934:	7c 91       	ld	r23, X
    1936:	76 13       	cpse	r23, r22
    1938:	11 c0       	rjmp	.+34     	; 0x195c <USB_GetHIDReportSize+0x48>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	47 70       	andi	r20, 0x07	; 7
    1942:	55 27       	eor	r21, r21
    1944:	45 2b       	or	r20, r21
    1946:	11 f4       	brne	.+4      	; 0x194c <USB_GetHIDReportSize+0x38>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	43 e0       	ldi	r20, 0x03	; 3
    194e:	36 95       	lsr	r19
    1950:	27 95       	ror	r18
    1952:	4a 95       	dec	r20
    1954:	e1 f7       	brne	.-8      	; 0x194e <USB_GetHIDReportSize+0x3a>
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	08 95       	ret
    195c:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    195e:	8e 17       	cp	r24, r30
    1960:	9f 07       	cpc	r25, r31
    1962:	01 f7       	brne	.-64     	; 0x1924 <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
}
    1968:	08 95       	ret

0000196a <DCOMP_HID_Host_NextHIDInterface>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    196a:	fc 01       	movw	r30, r24
    196c:	21 81       	ldd	r18, Z+1	; 0x01
    196e:	24 30       	cpi	r18, 0x04	; 4
    1970:	29 f4       	brne	.+10     	; 0x197c <DCOMP_HID_Host_NextHIDInterface+0x12>
    1972:	85 81       	ldd	r24, Z+5	; 0x05
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	11 f4       	brne	.+4      	; 0x197c <DCOMP_HID_Host_NextHIDInterface+0x12>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	08 95       	ret
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	08 95       	ret

00001980 <DCOMP_HID_Host_NextHIDDescriptor>:
    1980:	fc 01       	movw	r30, r24
    1982:	81 81       	ldd	r24, Z+1	; 0x01
    1984:	81 32       	cpi	r24, 0x21	; 33
    1986:	21 f0       	breq	.+8      	; 0x1990 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    1988:	84 30       	cpi	r24, 0x04	; 4
    198a:	21 f0       	breq	.+8      	; 0x1994 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	08 95       	ret
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	08 95       	ret
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	08 95       	ret

00001998 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    1998:	fc 01       	movw	r30, r24
    199a:	21 81       	ldd	r18, Z+1	; 0x01
    199c:	25 30       	cpi	r18, 0x05	; 5
    199e:	31 f4       	brne	.+12     	; 0x19ac <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	4e d8       	rcall	.-3940   	; 0xa40 <Pipe_IsEndpointBound>
    19a4:	88 23       	and	r24, r24
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	08 95       	ret
    19ac:	24 30       	cpi	r18, 0x04	; 4
    19ae:	e1 f7       	brne	.-8      	; 0x19a8 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	08 95       	ret
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	08 95       	ret

000019b8 <HID_Host_ConfigurePipes>:
    19b8:	2f 92       	push	r2
    19ba:	3f 92       	push	r3
    19bc:	4f 92       	push	r4
    19be:	5f 92       	push	r5
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	00 d0       	rcall	.+0      	; 0x19de <HID_Host_ConfigurePipes+0x26>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <HID_Host_ConfigurePipes+0x28>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	7a 83       	std	Y+2, r23	; 0x02
    19e6:	69 83       	std	Y+1, r22	; 0x01
    19e8:	5c 83       	std	Y+4, r21	; 0x04
    19ea:	4b 83       	std	Y+3, r20	; 0x03
    19ec:	fc 01       	movw	r30, r24
    19ee:	37 96       	adiw	r30, 0x07	; 7
    19f0:	2c e0       	ldi	r18, 0x0C	; 12
    19f2:	df 01       	movw	r26, r30
    19f4:	1d 92       	st	X+, r1
    19f6:	2a 95       	dec	r18
    19f8:	e9 f7       	brne	.-6      	; 0x19f4 <HID_Host_ConfigurePipes+0x3c>
    19fa:	eb 81       	ldd	r30, Y+3	; 0x03
    19fc:	fc 81       	ldd	r31, Y+4	; 0x04
    19fe:	11 81       	ldd	r17, Z+1	; 0x01
    1a00:	12 30       	cpi	r17, 0x02	; 2
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <HID_Host_ConfigurePipes+0x4e>
    1a04:	7e c0       	rjmp	.+252    	; 0x1b02 <HID_Host_ConfigurePipes+0x14a>
    1a06:	6c 01       	movw	r12, r24
    1a08:	41 2c       	mov	r4, r1
    1a0a:	51 2c       	mov	r5, r1
    1a0c:	61 2c       	mov	r6, r1
    1a0e:	71 2c       	mov	r7, r1
    1a10:	81 2c       	mov	r8, r1
    1a12:	91 2c       	mov	r9, r1
    1a14:	a1 2c       	mov	r10, r1
    1a16:	b1 2c       	mov	r11, r1
    1a18:	a1 14       	cp	r10, r1
    1a1a:	b1 04       	cpc	r11, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <HID_Host_ConfigurePipes+0x68>
    1a1e:	75 c0       	rjmp	.+234    	; 0x1b0a <HID_Host_ConfigurePipes+0x152>
    1a20:	81 14       	cp	r8, r1
    1a22:	91 04       	cpc	r9, r1
    1a24:	91 f4       	brne	.+36     	; 0x1a4a <HID_Host_ConfigurePipes+0x92>
    1a26:	61 14       	cp	r6, r1
    1a28:	71 04       	cpc	r7, r1
    1a2a:	79 f0       	breq	.+30     	; 0x1a4a <HID_Host_ConfigurePipes+0x92>
    1a2c:	4c ec       	ldi	r20, 0xCC	; 204
    1a2e:	5c e0       	ldi	r21, 0x0C	; 12
    1a30:	be 01       	movw	r22, r28
    1a32:	6d 5f       	subi	r22, 0xFD	; 253
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	29 da       	rcall	.-2990   	; 0xe8e <USB_GetNextDescriptorComp>
    1a3c:	88 23       	and	r24, r24
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <HID_Host_ConfigurePipes+0x8a>
    1a40:	90 c0       	rjmp	.+288    	; 0x1b62 <HID_Host_ConfigurePipes+0x1aa>
    1a42:	a1 14       	cp	r10, r1
    1a44:	b1 04       	cpc	r11, r1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <HID_Host_ConfigurePipes+0x92>
    1a48:	64 c0       	rjmp	.+200    	; 0x1b12 <HID_Host_ConfigurePipes+0x15a>
    1a4a:	ff 24       	eor	r15, r15
    1a4c:	f3 94       	inc	r15
    1a4e:	22 24       	eor	r2, r2
    1a50:	23 94       	inc	r2
    1a52:	f6 01       	movw	r30, r12
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 11       	cpse	r24, r15
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <HID_Host_ConfigurePipes+0xc0>
    1a5a:	d5 01       	movw	r26, r10
    1a5c:	14 96       	adiw	r26, 0x04	; 4
    1a5e:	0d 91       	ld	r16, X+
    1a60:	1c 91       	ld	r17, X
    1a62:	15 97       	sbiw	r26, 0x05	; 5
    1a64:	12 96       	adiw	r26, 0x02	; 2
    1a66:	2c 91       	ld	r18, X
    1a68:	12 97       	sbiw	r26, 0x02	; 2
    1a6a:	81 81       	ldd	r24, Z+1	; 0x01
    1a6c:	16 96       	adiw	r26, 0x06	; 6
    1a6e:	3c 90       	ld	r3, X
    1a70:	12 87       	std	Z+10, r17	; 0x0a
    1a72:	01 87       	std	Z+9, r16	; 0x09
    1a74:	40 e1       	ldi	r20, 0x10	; 16
    1a76:	16 c0       	rjmp	.+44     	; 0x1aa4 <HID_Host_ConfigurePipes+0xec>
    1a78:	f6 01       	movw	r30, r12
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	8f 11       	cpse	r24, r15
    1a7e:	21 c0       	rjmp	.+66     	; 0x1ac2 <HID_Host_ConfigurePipes+0x10a>
    1a80:	81 14       	cp	r8, r1
    1a82:	91 04       	cpc	r9, r1
    1a84:	f1 f0       	breq	.+60     	; 0x1ac2 <HID_Host_ConfigurePipes+0x10a>
    1a86:	d4 01       	movw	r26, r8
    1a88:	14 96       	adiw	r26, 0x04	; 4
    1a8a:	0d 91       	ld	r16, X+
    1a8c:	1c 91       	ld	r17, X
    1a8e:	15 97       	sbiw	r26, 0x05	; 5
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	2c 91       	ld	r18, X
    1a94:	12 97       	sbiw	r26, 0x02	; 2
    1a96:	83 81       	ldd	r24, Z+3	; 0x03
    1a98:	16 96       	adiw	r26, 0x06	; 6
    1a9a:	3c 90       	ld	r3, X
    1a9c:	14 87       	std	Z+12, r17	; 0x0c
    1a9e:	03 87       	std	Z+11, r16	; 0x0b
    1aa0:	26 86       	std	Z+14, r2	; 0x0e
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <HID_Host_ConfigurePipes+0xf4>
    1aa8:	e1 2c       	mov	r14, r1
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <HID_Host_ConfigurePipes+0xf8>
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	e8 2e       	mov	r14, r24
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	8f 2d       	mov	r24, r15
    1ab4:	0e 94 b0 04 	call	0x960	; 0x960 <Pipe_ConfigurePipe>
    1ab8:	88 23       	and	r24, r24
    1aba:	29 f1       	breq	.+74     	; 0x1b06 <HID_Host_ConfigurePipes+0x14e>
    1abc:	31 10       	cpse	r3, r1
    1abe:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1ac2:	f3 94       	inc	r15
    1ac4:	b7 e0       	ldi	r27, 0x07	; 7
    1ac6:	fb 12       	cpse	r15, r27
    1ac8:	c4 cf       	rjmp	.-120    	; 0x1a52 <HID_Host_ConfigurePipes+0x9a>
    1aca:	f3 01       	movw	r30, r6
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	d6 01       	movw	r26, r12
    1ad0:	18 96       	adiw	r26, 0x08	; 8
    1ad2:	8c 93       	st	X, r24
    1ad4:	18 97       	sbiw	r26, 0x08	; 8
    1ad6:	f2 01       	movw	r30, r4
    1ad8:	87 81       	ldd	r24, Z+7	; 0x07
    1ada:	90 85       	ldd	r25, Z+8	; 0x08
    1adc:	51 96       	adiw	r26, 0x11	; 17
    1ade:	9c 93       	st	X, r25
    1ae0:	8e 93       	st	-X, r24
    1ae2:	50 97       	sbiw	r26, 0x10	; 16
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	d3 01       	movw	r26, r6
    1ae8:	16 96       	adiw	r26, 0x06	; 6
    1aea:	9c 91       	ld	r25, X
    1aec:	91 11       	cpse	r25, r1
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <HID_Host_ConfigurePipes+0x13a>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	f6 01       	movw	r30, r12
    1af4:	85 87       	std	Z+13, r24	; 0x0d
    1af6:	88 e0       	ldi	r24, 0x08	; 8
    1af8:	82 8b       	std	Z+18, r24	; 0x12
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	87 83       	std	Z+7, r24	; 0x07
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	3c c0       	rjmp	.+120    	; 0x1b7a <HID_Host_ConfigurePipes+0x1c2>
    1b02:	11 e0       	ldi	r17, 0x01	; 1
    1b04:	3a c0       	rjmp	.+116    	; 0x1b7a <HID_Host_ConfigurePipes+0x1c2>
    1b06:	13 e0       	ldi	r17, 0x03	; 3
    1b08:	38 c0       	rjmp	.+112    	; 0x1b7a <HID_Host_ConfigurePipes+0x1c2>
    1b0a:	61 14       	cp	r6, r1
    1b0c:	71 04       	cpc	r7, r1
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <HID_Host_ConfigurePipes+0x15a>
    1b10:	8d cf       	rjmp	.-230    	; 0x1a2c <HID_Host_ConfigurePipes+0x74>
    1b12:	81 14       	cp	r8, r1
    1b14:	91 04       	cpc	r9, r1
    1b16:	71 f5       	brne	.+92     	; 0x1b74 <HID_Host_ConfigurePipes+0x1bc>
    1b18:	45 eb       	ldi	r20, 0xB5	; 181
    1b1a:	5c e0       	ldi	r21, 0x0C	; 12
    1b1c:	be 01       	movw	r22, r28
    1b1e:	6d 5f       	subi	r22, 0xFD	; 253
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	b3 d9       	rcall	.-3226   	; 0xe8e <USB_GetNextDescriptorComp>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	27 c0       	rjmp	.+78     	; 0x1b7a <HID_Host_ConfigurePipes+0x1c2>
    1b2c:	6b 80       	ldd	r6, Y+3	; 0x03
    1b2e:	7c 80       	ldd	r7, Y+4	; 0x04
    1b30:	f6 01       	movw	r30, r12
    1b32:	84 81       	ldd	r24, Z+4	; 0x04
    1b34:	81 11       	cpse	r24, r1
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <HID_Host_ConfigurePipes+0x19e>
    1b38:	40 ec       	ldi	r20, 0xC0	; 192
    1b3a:	5c e0       	ldi	r21, 0x0C	; 12
    1b3c:	be 01       	movw	r22, r28
    1b3e:	6d 5f       	subi	r22, 0xFD	; 253
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	ce 01       	movw	r24, r28
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	a3 d9       	rcall	.-3258   	; 0xe8e <USB_GetNextDescriptorComp>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	17 c0       	rjmp	.+46     	; 0x1b7a <HID_Host_ConfigurePipes+0x1c2>
    1b4c:	4b 80       	ldd	r4, Y+3	; 0x03
    1b4e:	5c 80       	ldd	r5, Y+4	; 0x04
    1b50:	e0 e0       	ldi	r30, 0x00	; 0
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <HID_Host_ConfigurePipes+0x1b8>
    1b56:	d3 01       	movw	r26, r6
    1b58:	17 96       	adiw	r26, 0x07	; 7
    1b5a:	9c 91       	ld	r25, X
    1b5c:	89 13       	cpse	r24, r25
    1b5e:	dc cf       	rjmp	.-72     	; 0x1b18 <HID_Host_ConfigurePipes+0x160>
    1b60:	eb cf       	rjmp	.-42     	; 0x1b38 <HID_Host_ConfigurePipes+0x180>
    1b62:	eb 81       	ldd	r30, Y+3	; 0x03
    1b64:	fc 81       	ldd	r31, Y+4	; 0x04
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	87 fd       	sbrc	r24, 7
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <HID_Host_ConfigurePipes+0x1b8>
    1b6c:	4f 01       	movw	r8, r30
    1b6e:	f5 01       	movw	r30, r10
    1b70:	5f 01       	movw	r10, r30
    1b72:	52 cf       	rjmp	.-348    	; 0x1a18 <HID_Host_ConfigurePipes+0x60>
    1b74:	a1 2c       	mov	r10, r1
    1b76:	b1 2c       	mov	r11, r1
    1b78:	68 cf       	rjmp	.-304    	; 0x1a4a <HID_Host_ConfigurePipes+0x92>
    1b7a:	81 2f       	mov	r24, r17
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	bf 90       	pop	r11
    1b96:	af 90       	pop	r10
    1b98:	9f 90       	pop	r9
    1b9a:	8f 90       	pop	r8
    1b9c:	7f 90       	pop	r7
    1b9e:	6f 90       	pop	r6
    1ba0:	5f 90       	pop	r5
    1ba2:	4f 90       	pop	r4
    1ba4:	3f 90       	pop	r3
    1ba6:	2f 90       	pop	r2
    1ba8:	08 95       	ret

00001baa <HID_Host_ReceiveReport>:
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	fc 01       	movw	r30, r24
    1bb0:	eb 01       	movw	r28, r22
    1bb2:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
    1bb6:	8b 30       	cpi	r24, 0x0B	; 11
    1bb8:	b9 f5       	brne	.+110    	; 0x1c28 <HID_Host_ReceiveReport+0x7e>
    1bba:	87 81       	ldd	r24, Z+7	; 0x07
    1bbc:	88 23       	and	r24, r24
    1bbe:	a1 f1       	breq	.+104    	; 0x1c28 <HID_Host_ReceiveReport+0x7e>
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1bc6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bca:	8f 7b       	andi	r24, 0xBF	; 191
    1bcc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bd0:	87 85       	ldd	r24, Z+15	; 0x0f
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	12 c0       	rjmp	.+36     	; 0x1bfa <HID_Host_ReceiveReport+0x50>
    1bd6:	a5 81       	ldd	r26, Z+5	; 0x05
    1bd8:	b6 81       	ldd	r27, Z+6	; 0x06
    1bda:	a8 52       	subi	r26, 0x28	; 40
    1bdc:	bc 4f       	sbci	r27, 0xFC	; 252
    1bde:	8c 91       	ld	r24, X
    1be0:	88 23       	and	r24, r24
    1be2:	29 f0       	breq	.+10     	; 0x1bee <HID_Host_ReceiveReport+0x44>
    1be4:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1be8:	68 83       	st	Y, r22
    1bea:	21 96       	adiw	r28, 0x01	; 1
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <HID_Host_ReceiveReport+0x46>
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	85 81       	ldd	r24, Z+5	; 0x05
    1bf4:	96 81       	ldd	r25, Z+6	; 0x06
    1bf6:	8e de       	rcall	.-740    	; 0x1914 <USB_GetHIDReportSize>
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <HID_Host_ReceiveReport+0x58>
    1bfa:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1bfe:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	bc 01       	movw	r22, r24
    1c08:	ce 01       	movw	r24, r28
    1c0a:	7b d8       	rcall	.-3850   	; 0xd02 <Pipe_Read_Stream_LE>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	0d c0       	rjmp	.+26     	; 0x1c2a <HID_Host_ReceiveReport+0x80>
    1c10:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c14:	8e 77       	andi	r24, 0x7E	; 126
    1c16:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c1a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c1e:	80 64       	ori	r24, 0x40	; 64
    1c20:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <HID_Host_ReceiveReport+0x80>
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <HID_Host_IsReportReceived>:
    1c30:	fc 01       	movw	r30, r24
    1c32:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
    1c36:	8b 30       	cpi	r24, 0x0B	; 11
    1c38:	a1 f4       	brne	.+40     	; 0x1c62 <HID_Host_IsReportReceived+0x32>
    1c3a:	87 81       	ldd	r24, Z+7	; 0x07
    1c3c:	88 23       	and	r24, r24
    1c3e:	91 f0       	breq	.+36     	; 0x1c64 <HID_Host_IsReportReceived+0x34>
    1c40:	80 81       	ld	r24, Z
    1c42:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1c46:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c4a:	8f 7b       	andi	r24, 0xBF	; 191
    1c4c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c50:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c5a:	90 64       	ori	r25, 0x40	; 64
    1c5c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c60:	08 95       	ret
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	08 95       	ret

00001c66 <HID_Host_SetReportProtocol>:
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1c7c:	ed b6       	in	r14, 0x3d	; 61
    1c7e:	fe b6       	in	r15, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1c80:	dc 01       	movw	r26, r24
    1c82:	50 96       	adiw	r26, 0x10	; 16
    1c84:	2d 91       	ld	r18, X+
    1c86:	3c 91       	ld	r19, X
    1c88:	51 97       	sbiw	r26, 0x11	; 17
    1c8a:	ed b7       	in	r30, 0x3d	; 61
    1c8c:	fe b7       	in	r31, 0x3e	; 62
    1c8e:	e2 1b       	sub	r30, r18
    1c90:	f3 0b       	sbc	r31, r19
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	fe bf       	out	0x3e, r31	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	ed bf       	out	0x3d, r30	; 61
    1c9c:	8d b7       	in	r24, 0x3d	; 61
    1c9e:	9e b7       	in	r25, 0x3e	; 62
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	6c 01       	movw	r12, r24

	USB_ControlRequest = (USB_Request_Header_t)
    1ca4:	18 96       	adiw	r26, 0x08	; 8
    1ca6:	8c 91       	ld	r24, X
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	41 e8       	ldi	r20, 0x81	; 129
    1cac:	40 93 02 05 	sts	0x0502, r20	; 0x800502 <USB_ControlRequest>
    1cb0:	46 e0       	ldi	r20, 0x06	; 6
    1cb2:	40 93 03 05 	sts	0x0503, r20	; 0x800503 <USB_ControlRequest+0x1>
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	52 e2       	ldi	r21, 0x22	; 34
    1cba:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <USB_ControlRequest+0x3>
    1cbe:	40 93 04 05 	sts	0x0504, r20	; 0x800504 <USB_ControlRequest+0x2>
    1cc2:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <USB_ControlRequest+0x5>
    1cc6:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_ControlRequest+0x4>
    1cca:	30 93 09 05 	sts	0x0509, r19	; 0x800509 <USB_ControlRequest+0x7>
    1cce:	20 93 08 05 	sts	0x0508, r18	; 0x800508 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1cd2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	33 d9       	rcall	.-3482   	; 0xf40 <USB_Host_SendControlRequest>
    1cda:	81 11       	cpse	r24, r1
    1cdc:	51 c0       	rjmp	.+162    	; 0x1d80 <HID_Host_SetReportProtocol+0x11a>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1cde:	d8 01       	movw	r26, r16
    1ce0:	1f 96       	adiw	r26, 0x0f	; 15
    1ce2:	8c 91       	ld	r24, X
    1ce4:	1f 97       	sbiw	r26, 0x0f	; 15
    1ce6:	88 23       	and	r24, r24
    1ce8:	f1 f0       	breq	.+60     	; 0x1d26 <HID_Host_SetReportProtocol+0xc0>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1cea:	18 96       	adiw	r26, 0x08	; 8
    1cec:	8c 91       	ld	r24, X
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	21 e2       	ldi	r18, 0x21	; 33
    1cf2:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <USB_ControlRequest>
    1cf6:	2b e0       	ldi	r18, 0x0B	; 11
    1cf8:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <USB_ControlRequest+0x1>
    1cfc:	21 e0       	ldi	r18, 0x01	; 1
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <USB_ControlRequest+0x3>
    1d04:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <USB_ControlRequest+0x2>
    1d08:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <USB_ControlRequest+0x5>
    1d0c:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_ControlRequest+0x4>
    1d10:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <USB_ControlRequest+0x7>
    1d14:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_ControlRequest+0x6>
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	11 d9       	rcall	.-3550   	; 0xf40 <USB_Host_SendControlRequest>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	2f c0       	rjmp	.+94     	; 0x1d80 <HID_Host_SetReportProtocol+0x11a>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1d22:	f8 01       	movw	r30, r16
    1d24:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1d26:	d8 01       	movw	r26, r16
    1d28:	15 96       	adiw	r26, 0x05	; 5
    1d2a:	4d 91       	ld	r20, X+
    1d2c:	5c 91       	ld	r21, X
    1d2e:	16 97       	sbiw	r26, 0x06	; 6
    1d30:	41 15       	cp	r20, r1
    1d32:	51 05       	cpc	r21, r1
    1d34:	21 f1       	breq	.+72     	; 0x1d7e <HID_Host_SetReportProtocol+0x118>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1d36:	50 96       	adiw	r26, 0x10	; 16
    1d38:	6d 91       	ld	r22, X+
    1d3a:	7c 91       	ld	r23, X
    1d3c:	51 97       	sbiw	r26, 0x11	; 17
    1d3e:	c6 01       	movw	r24, r12
    1d40:	2a da       	rcall	.-2988   	; 0x1196 <USB_ProcessHIDReport>
    1d42:	88 23       	and	r24, r24
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <HID_Host_SetReportProtocol+0xe4>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	1b c0       	rjmp	.+54     	; 0x1d80 <HID_Host_SetReportProtocol+0x11a>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1d4a:	d8 01       	movw	r26, r16
    1d4c:	15 96       	adiw	r26, 0x05	; 5
    1d4e:	ed 91       	ld	r30, X+
    1d50:	fc 91       	ld	r31, X
    1d52:	16 97       	sbiw	r26, 0x06	; 6
    1d54:	ea 52       	subi	r30, 0x2A	; 42
    1d56:	fc 4f       	sbci	r31, 0xFC	; 252
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1d5c:	ac 01       	movw	r20, r24
    1d5e:	47 70       	andi	r20, 0x07	; 7
    1d60:	55 27       	eor	r21, r21
    1d62:	21 e0       	ldi	r18, 0x01	; 1
    1d64:	45 2b       	or	r20, r21
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <HID_Host_SetReportProtocol+0x104>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	33 e0       	ldi	r19, 0x03	; 3
    1d6c:	96 95       	lsr	r25
    1d6e:	87 95       	ror	r24
    1d70:	3a 95       	dec	r19
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <HID_Host_SetReportProtocol+0x106>
    1d74:	82 0f       	add	r24, r18
    1d76:	f8 01       	movw	r30, r16
    1d78:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <HID_Host_SetReportProtocol+0x11a>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1d7e:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	fe be       	out	0x3e, r15	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	ed be       	out	0x3d, r14	; 61
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	08 95       	ret

00001d9c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1d9c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1da0:	95 ff       	sbrs	r25, 5
    1da2:	fc cf       	rjmp	.-8      	; 0x1d9c <Serial_putchar>
				UDR1 = DataByte;
    1da4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	08 95       	ret

00001dae <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1dae:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1db2:	87 ff       	sbrs	r24, 7
    1db4:	08 c0       	rjmp	.+16     	; 0x1dc6 <Serial_getchar+0x18>
    1db6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1dba:	87 ff       	sbrs	r24, 7
    1dbc:	07 c0       	rjmp	.+14     	; 0x1dcc <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1dbe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	08 95       	ret
	  return _FDEV_EOF;
    1dc6:	8e ef       	ldi	r24, 0xFE	; 254
    1dc8:	9f ef       	ldi	r25, 0xFF	; 255
    1dca:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1dd0:	08 95       	ret

00001dd2 <__tablejump2__>:
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	00 24       	eor	r0, r0
    1dd8:	00 1c       	adc	r0, r0
    1dda:	0b be       	out	0x3b, r0	; 59
    1ddc:	07 90       	elpm	r0, Z+
    1dde:	f6 91       	elpm	r31, Z
    1de0:	e0 2d       	mov	r30, r0
    1de2:	09 94       	ijmp

00001de4 <printf_P>:
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	ae 01       	movw	r20, r28
    1df2:	49 5f       	subi	r20, 0xF9	; 249
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	da 01       	movw	r26, r20
    1df8:	6d 91       	ld	r22, X+
    1dfa:	7d 91       	ld	r23, X+
    1dfc:	ad 01       	movw	r20, r26
    1dfe:	09 e1       	ldi	r16, 0x19	; 25
    1e00:	15 e0       	ldi	r17, 0x05	; 5
    1e02:	f8 01       	movw	r30, r16
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	dc 01       	movw	r26, r24
    1e0a:	13 96       	adiw	r26, 0x03	; 3
    1e0c:	2c 91       	ld	r18, X
    1e0e:	13 97       	sbiw	r26, 0x03	; 3
    1e10:	28 60       	ori	r18, 0x08	; 8
    1e12:	13 96       	adiw	r26, 0x03	; 3
    1e14:	2c 93       	st	X, r18
    1e16:	3e d0       	rcall	.+124    	; 0x1e94 <vfprintf>
    1e18:	d8 01       	movw	r26, r16
    1e1a:	12 96       	adiw	r26, 0x02	; 2
    1e1c:	ed 91       	ld	r30, X+
    1e1e:	fc 91       	ld	r31, X
    1e20:	13 97       	sbiw	r26, 0x03	; 3
    1e22:	23 81       	ldd	r18, Z+3	; 0x03
    1e24:	27 7f       	andi	r18, 0xF7	; 247
    1e26:	23 83       	std	Z+3, r18	; 0x03
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <puts_P>:
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <__iob+0x2>
    1e40:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <__iob+0x3>
    1e44:	83 81       	ldd	r24, Z+3	; 0x03
    1e46:	81 ff       	sbrs	r24, 1
    1e48:	1b c0       	rjmp	.+54     	; 0x1e80 <puts_P+0x4e>
    1e4a:	d0 e0       	ldi	r29, 0x00	; 0
    1e4c:	c0 e0       	ldi	r28, 0x00	; 0
    1e4e:	f8 01       	movw	r30, r16
    1e50:	84 91       	lpm	r24, Z
    1e52:	60 91 1b 05 	lds	r22, 0x051B	; 0x80051b <__iob+0x2>
    1e56:	70 91 1c 05 	lds	r23, 0x051C	; 0x80051c <__iob+0x3>
    1e5a:	db 01       	movw	r26, r22
    1e5c:	18 96       	adiw	r26, 0x08	; 8
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	19 97       	sbiw	r26, 0x09	; 9
    1e64:	88 23       	and	r24, r24
    1e66:	41 f0       	breq	.+16     	; 0x1e78 <puts_P+0x46>
    1e68:	09 95       	icall
    1e6a:	89 2b       	or	r24, r25
    1e6c:	11 f0       	breq	.+4      	; 0x1e72 <puts_P+0x40>
    1e6e:	df ef       	ldi	r29, 0xFF	; 255
    1e70:	cf ef       	ldi	r28, 0xFF	; 255
    1e72:	0f 5f       	subi	r16, 0xFF	; 255
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	eb cf       	rjmp	.-42     	; 0x1e4e <puts_P+0x1c>
    1e78:	8a e0       	ldi	r24, 0x0A	; 10
    1e7a:	09 95       	icall
    1e7c:	89 2b       	or	r24, r25
    1e7e:	19 f0       	breq	.+6      	; 0x1e86 <puts_P+0x54>
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	9f ef       	ldi	r25, 0xFF	; 255
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <puts_P+0x58>
    1e86:	8d 2f       	mov	r24, r29
    1e88:	9c 2f       	mov	r25, r28
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <vfprintf>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	2b 97       	sbiw	r28, 0x0b	; 11
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	6c 01       	movw	r12, r24
    1eca:	7b 01       	movw	r14, r22
    1ecc:	8a 01       	movw	r16, r20
    1ece:	fc 01       	movw	r30, r24
    1ed0:	17 82       	std	Z+7, r1	; 0x07
    1ed2:	16 82       	std	Z+6, r1	; 0x06
    1ed4:	83 81       	ldd	r24, Z+3	; 0x03
    1ed6:	81 ff       	sbrs	r24, 1
    1ed8:	bf c1       	rjmp	.+894    	; 0x2258 <__stack+0x159>
    1eda:	ce 01       	movw	r24, r28
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	3c 01       	movw	r6, r24
    1ee0:	f6 01       	movw	r30, r12
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	93 fd       	sbrc	r25, 3
    1ee8:	85 91       	lpm	r24, Z+
    1eea:	93 ff       	sbrs	r25, 3
    1eec:	81 91       	ld	r24, Z+
    1eee:	7f 01       	movw	r14, r30
    1ef0:	88 23       	and	r24, r24
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <vfprintf+0x62>
    1ef4:	ad c1       	rjmp	.+858    	; 0x2250 <__stack+0x151>
    1ef6:	85 32       	cpi	r24, 0x25	; 37
    1ef8:	39 f4       	brne	.+14     	; 0x1f08 <vfprintf+0x74>
    1efa:	93 fd       	sbrc	r25, 3
    1efc:	85 91       	lpm	r24, Z+
    1efe:	93 ff       	sbrs	r25, 3
    1f00:	81 91       	ld	r24, Z+
    1f02:	7f 01       	movw	r14, r30
    1f04:	85 32       	cpi	r24, 0x25	; 37
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <vfprintf+0x7c>
    1f08:	b6 01       	movw	r22, r12
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	d6 d1       	rcall	.+940    	; 0x22ba <fputc>
    1f0e:	e8 cf       	rjmp	.-48     	; 0x1ee0 <vfprintf+0x4c>
    1f10:	91 2c       	mov	r9, r1
    1f12:	21 2c       	mov	r2, r1
    1f14:	31 2c       	mov	r3, r1
    1f16:	ff e1       	ldi	r31, 0x1F	; 31
    1f18:	f3 15       	cp	r31, r3
    1f1a:	d8 f0       	brcs	.+54     	; 0x1f52 <vfprintf+0xbe>
    1f1c:	8b 32       	cpi	r24, 0x2B	; 43
    1f1e:	79 f0       	breq	.+30     	; 0x1f3e <vfprintf+0xaa>
    1f20:	38 f4       	brcc	.+14     	; 0x1f30 <vfprintf+0x9c>
    1f22:	80 32       	cpi	r24, 0x20	; 32
    1f24:	79 f0       	breq	.+30     	; 0x1f44 <vfprintf+0xb0>
    1f26:	83 32       	cpi	r24, 0x23	; 35
    1f28:	a1 f4       	brne	.+40     	; 0x1f52 <vfprintf+0xbe>
    1f2a:	23 2d       	mov	r18, r3
    1f2c:	20 61       	ori	r18, 0x10	; 16
    1f2e:	1d c0       	rjmp	.+58     	; 0x1f6a <vfprintf+0xd6>
    1f30:	8d 32       	cpi	r24, 0x2D	; 45
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <vfprintf+0xb8>
    1f34:	80 33       	cpi	r24, 0x30	; 48
    1f36:	69 f4       	brne	.+26     	; 0x1f52 <vfprintf+0xbe>
    1f38:	23 2d       	mov	r18, r3
    1f3a:	21 60       	ori	r18, 0x01	; 1
    1f3c:	16 c0       	rjmp	.+44     	; 0x1f6a <vfprintf+0xd6>
    1f3e:	83 2d       	mov	r24, r3
    1f40:	82 60       	ori	r24, 0x02	; 2
    1f42:	38 2e       	mov	r3, r24
    1f44:	e3 2d       	mov	r30, r3
    1f46:	e4 60       	ori	r30, 0x04	; 4
    1f48:	3e 2e       	mov	r3, r30
    1f4a:	2a c0       	rjmp	.+84     	; 0x1fa0 <vfprintf+0x10c>
    1f4c:	f3 2d       	mov	r31, r3
    1f4e:	f8 60       	ori	r31, 0x08	; 8
    1f50:	1d c0       	rjmp	.+58     	; 0x1f8c <vfprintf+0xf8>
    1f52:	37 fc       	sbrc	r3, 7
    1f54:	2d c0       	rjmp	.+90     	; 0x1fb0 <vfprintf+0x11c>
    1f56:	20 ed       	ldi	r18, 0xD0	; 208
    1f58:	28 0f       	add	r18, r24
    1f5a:	2a 30       	cpi	r18, 0x0A	; 10
    1f5c:	40 f0       	brcs	.+16     	; 0x1f6e <vfprintf+0xda>
    1f5e:	8e 32       	cpi	r24, 0x2E	; 46
    1f60:	b9 f4       	brne	.+46     	; 0x1f90 <vfprintf+0xfc>
    1f62:	36 fc       	sbrc	r3, 6
    1f64:	75 c1       	rjmp	.+746    	; 0x2250 <__stack+0x151>
    1f66:	23 2d       	mov	r18, r3
    1f68:	20 64       	ori	r18, 0x40	; 64
    1f6a:	32 2e       	mov	r3, r18
    1f6c:	19 c0       	rjmp	.+50     	; 0x1fa0 <vfprintf+0x10c>
    1f6e:	36 fe       	sbrs	r3, 6
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <vfprintf+0xea>
    1f72:	8a e0       	ldi	r24, 0x0A	; 10
    1f74:	98 9e       	mul	r9, r24
    1f76:	20 0d       	add	r18, r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	92 2e       	mov	r9, r18
    1f7c:	11 c0       	rjmp	.+34     	; 0x1fa0 <vfprintf+0x10c>
    1f7e:	ea e0       	ldi	r30, 0x0A	; 10
    1f80:	2e 9e       	mul	r2, r30
    1f82:	20 0d       	add	r18, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	22 2e       	mov	r2, r18
    1f88:	f3 2d       	mov	r31, r3
    1f8a:	f0 62       	ori	r31, 0x20	; 32
    1f8c:	3f 2e       	mov	r3, r31
    1f8e:	08 c0       	rjmp	.+16     	; 0x1fa0 <vfprintf+0x10c>
    1f90:	8c 36       	cpi	r24, 0x6C	; 108
    1f92:	21 f4       	brne	.+8      	; 0x1f9c <vfprintf+0x108>
    1f94:	83 2d       	mov	r24, r3
    1f96:	80 68       	ori	r24, 0x80	; 128
    1f98:	38 2e       	mov	r3, r24
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <vfprintf+0x10c>
    1f9c:	88 36       	cpi	r24, 0x68	; 104
    1f9e:	41 f4       	brne	.+16     	; 0x1fb0 <vfprintf+0x11c>
    1fa0:	f7 01       	movw	r30, r14
    1fa2:	93 fd       	sbrc	r25, 3
    1fa4:	85 91       	lpm	r24, Z+
    1fa6:	93 ff       	sbrs	r25, 3
    1fa8:	81 91       	ld	r24, Z+
    1faa:	7f 01       	movw	r14, r30
    1fac:	81 11       	cpse	r24, r1
    1fae:	b3 cf       	rjmp	.-154    	; 0x1f16 <vfprintf+0x82>
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	9f 7d       	andi	r25, 0xDF	; 223
    1fb4:	95 54       	subi	r25, 0x45	; 69
    1fb6:	93 30       	cpi	r25, 0x03	; 3
    1fb8:	28 f4       	brcc	.+10     	; 0x1fc4 <vfprintf+0x130>
    1fba:	0c 5f       	subi	r16, 0xFC	; 252
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	9f e3       	ldi	r25, 0x3F	; 63
    1fc0:	99 83       	std	Y+1, r25	; 0x01
    1fc2:	0d c0       	rjmp	.+26     	; 0x1fde <vfprintf+0x14a>
    1fc4:	83 36       	cpi	r24, 0x63	; 99
    1fc6:	31 f0       	breq	.+12     	; 0x1fd4 <vfprintf+0x140>
    1fc8:	83 37       	cpi	r24, 0x73	; 115
    1fca:	71 f0       	breq	.+28     	; 0x1fe8 <vfprintf+0x154>
    1fcc:	83 35       	cpi	r24, 0x53	; 83
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <vfprintf+0x13e>
    1fd0:	55 c0       	rjmp	.+170    	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    1fd2:	20 c0       	rjmp	.+64     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	80 81       	ld	r24, Z
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	0e 5f       	subi	r16, 0xFE	; 254
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	88 24       	eor	r8, r8
    1fe0:	83 94       	inc	r8
    1fe2:	91 2c       	mov	r9, r1
    1fe4:	53 01       	movw	r10, r6
    1fe6:	12 c0       	rjmp	.+36     	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    1fe8:	28 01       	movw	r4, r16
    1fea:	f2 e0       	ldi	r31, 0x02	; 2
    1fec:	4f 0e       	add	r4, r31
    1fee:	51 1c       	adc	r5, r1
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	a0 80       	ld	r10, Z
    1ff4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ff6:	36 fe       	sbrs	r3, 6
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <__DATA_REGION_LENGTH__>
    1ffa:	69 2d       	mov	r22, r9
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    2000:	6f ef       	ldi	r22, 0xFF	; 255
    2002:	7f ef       	ldi	r23, 0xFF	; 255
    2004:	c5 01       	movw	r24, r10
    2006:	4e d1       	rcall	.+668    	; 0x22a4 <strnlen>
    2008:	4c 01       	movw	r8, r24
    200a:	82 01       	movw	r16, r4
    200c:	f3 2d       	mov	r31, r3
    200e:	ff 77       	andi	r31, 0x7F	; 127
    2010:	3f 2e       	mov	r3, r31
    2012:	15 c0       	rjmp	.+42     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    2014:	28 01       	movw	r4, r16
    2016:	22 e0       	ldi	r18, 0x02	; 2
    2018:	42 0e       	add	r4, r18
    201a:	51 1c       	adc	r5, r1
    201c:	f8 01       	movw	r30, r16
    201e:	a0 80       	ld	r10, Z
    2020:	b1 80       	ldd	r11, Z+1	; 0x01
    2022:	36 fe       	sbrs	r3, 6
    2024:	03 c0       	rjmp	.+6      	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2026:	69 2d       	mov	r22, r9
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    202c:	6f ef       	ldi	r22, 0xFF	; 255
    202e:	7f ef       	ldi	r23, 0xFF	; 255
    2030:	c5 01       	movw	r24, r10
    2032:	2d d1       	rcall	.+602    	; 0x228e <strnlen_P>
    2034:	4c 01       	movw	r8, r24
    2036:	f3 2d       	mov	r31, r3
    2038:	f0 68       	ori	r31, 0x80	; 128
    203a:	3f 2e       	mov	r3, r31
    203c:	82 01       	movw	r16, r4
    203e:	33 fc       	sbrc	r3, 3
    2040:	19 c0       	rjmp	.+50     	; 0x2074 <__DATA_REGION_LENGTH__+0x74>
    2042:	82 2d       	mov	r24, r2
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	88 16       	cp	r8, r24
    2048:	99 06       	cpc	r9, r25
    204a:	a0 f4       	brcc	.+40     	; 0x2074 <__DATA_REGION_LENGTH__+0x74>
    204c:	b6 01       	movw	r22, r12
    204e:	80 e2       	ldi	r24, 0x20	; 32
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	33 d1       	rcall	.+614    	; 0x22ba <fputc>
    2054:	2a 94       	dec	r2
    2056:	f5 cf       	rjmp	.-22     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    2058:	f5 01       	movw	r30, r10
    205a:	37 fc       	sbrc	r3, 7
    205c:	85 91       	lpm	r24, Z+
    205e:	37 fe       	sbrs	r3, 7
    2060:	81 91       	ld	r24, Z+
    2062:	5f 01       	movw	r10, r30
    2064:	b6 01       	movw	r22, r12
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	28 d1       	rcall	.+592    	; 0x22ba <fputc>
    206a:	21 10       	cpse	r2, r1
    206c:	2a 94       	dec	r2
    206e:	21 e0       	ldi	r18, 0x01	; 1
    2070:	82 1a       	sub	r8, r18
    2072:	91 08       	sbc	r9, r1
    2074:	81 14       	cp	r8, r1
    2076:	91 04       	cpc	r9, r1
    2078:	79 f7       	brne	.-34     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    207a:	e1 c0       	rjmp	.+450    	; 0x223e <__stack+0x13f>
    207c:	84 36       	cpi	r24, 0x64	; 100
    207e:	11 f0       	breq	.+4      	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    2080:	89 36       	cpi	r24, 0x69	; 105
    2082:	39 f5       	brne	.+78     	; 0x20d2 <__DATA_REGION_LENGTH__+0xd2>
    2084:	f8 01       	movw	r30, r16
    2086:	37 fe       	sbrs	r3, 7
    2088:	07 c0       	rjmp	.+14     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	0c 5f       	subi	r16, 0xFC	; 252
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	07 2e       	mov	r0, r23
    209e:	00 0c       	add	r0, r0
    20a0:	88 0b       	sbc	r24, r24
    20a2:	99 0b       	sbc	r25, r25
    20a4:	0e 5f       	subi	r16, 0xFE	; 254
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	f3 2d       	mov	r31, r3
    20aa:	ff 76       	andi	r31, 0x6F	; 111
    20ac:	3f 2e       	mov	r3, r31
    20ae:	97 ff       	sbrs	r25, 7
    20b0:	09 c0       	rjmp	.+18     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    20b2:	90 95       	com	r25
    20b4:	80 95       	com	r24
    20b6:	70 95       	com	r23
    20b8:	61 95       	neg	r22
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	8f 4f       	sbci	r24, 0xFF	; 255
    20be:	9f 4f       	sbci	r25, 0xFF	; 255
    20c0:	f0 68       	ori	r31, 0x80	; 128
    20c2:	3f 2e       	mov	r3, r31
    20c4:	2a e0       	ldi	r18, 0x0A	; 10
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	a3 01       	movw	r20, r6
    20ca:	33 d1       	rcall	.+614    	; 0x2332 <__ultoa_invert>
    20cc:	88 2e       	mov	r8, r24
    20ce:	86 18       	sub	r8, r6
    20d0:	44 c0       	rjmp	.+136    	; 0x215a <__stack+0x5b>
    20d2:	85 37       	cpi	r24, 0x75	; 117
    20d4:	31 f4       	brne	.+12     	; 0x20e2 <__DATA_REGION_LENGTH__+0xe2>
    20d6:	23 2d       	mov	r18, r3
    20d8:	2f 7e       	andi	r18, 0xEF	; 239
    20da:	b2 2e       	mov	r11, r18
    20dc:	2a e0       	ldi	r18, 0x0A	; 10
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	25 c0       	rjmp	.+74     	; 0x212c <__stack+0x2d>
    20e2:	93 2d       	mov	r25, r3
    20e4:	99 7f       	andi	r25, 0xF9	; 249
    20e6:	b9 2e       	mov	r11, r25
    20e8:	8f 36       	cpi	r24, 0x6F	; 111
    20ea:	c1 f0       	breq	.+48     	; 0x211c <__stack+0x1d>
    20ec:	18 f4       	brcc	.+6      	; 0x20f4 <__DATA_REGION_LENGTH__+0xf4>
    20ee:	88 35       	cpi	r24, 0x58	; 88
    20f0:	79 f0       	breq	.+30     	; 0x2110 <__stack+0x11>
    20f2:	ae c0       	rjmp	.+348    	; 0x2250 <__stack+0x151>
    20f4:	80 37       	cpi	r24, 0x70	; 112
    20f6:	19 f0       	breq	.+6      	; 0x20fe <__DATA_REGION_LENGTH__+0xfe>
    20f8:	88 37       	cpi	r24, 0x78	; 120
    20fa:	21 f0       	breq	.+8      	; 0x2104 <__stack+0x5>
    20fc:	a9 c0       	rjmp	.+338    	; 0x2250 <__stack+0x151>
    20fe:	e9 2f       	mov	r30, r25
    2100:	e0 61       	ori	r30, 0x10	; 16
    2102:	be 2e       	mov	r11, r30
    2104:	b4 fe       	sbrs	r11, 4
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <__stack+0x23>
    2108:	fb 2d       	mov	r31, r11
    210a:	f4 60       	ori	r31, 0x04	; 4
    210c:	bf 2e       	mov	r11, r31
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <__stack+0x23>
    2110:	34 fe       	sbrs	r3, 4
    2112:	0a c0       	rjmp	.+20     	; 0x2128 <__stack+0x29>
    2114:	29 2f       	mov	r18, r25
    2116:	26 60       	ori	r18, 0x06	; 6
    2118:	b2 2e       	mov	r11, r18
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <__stack+0x29>
    211c:	28 e0       	ldi	r18, 0x08	; 8
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	05 c0       	rjmp	.+10     	; 0x212c <__stack+0x2d>
    2122:	20 e1       	ldi	r18, 0x10	; 16
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	02 c0       	rjmp	.+4      	; 0x212c <__stack+0x2d>
    2128:	20 e1       	ldi	r18, 0x10	; 16
    212a:	32 e0       	ldi	r19, 0x02	; 2
    212c:	f8 01       	movw	r30, r16
    212e:	b7 fe       	sbrs	r11, 7
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <__stack+0x41>
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	0c 5f       	subi	r16, 0xFC	; 252
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	06 c0       	rjmp	.+12     	; 0x214c <__stack+0x4d>
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 5f       	subi	r16, 0xFE	; 254
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	a3 01       	movw	r20, r6
    214e:	f1 d0       	rcall	.+482    	; 0x2332 <__ultoa_invert>
    2150:	88 2e       	mov	r8, r24
    2152:	86 18       	sub	r8, r6
    2154:	fb 2d       	mov	r31, r11
    2156:	ff 77       	andi	r31, 0x7F	; 127
    2158:	3f 2e       	mov	r3, r31
    215a:	36 fe       	sbrs	r3, 6
    215c:	0d c0       	rjmp	.+26     	; 0x2178 <__stack+0x79>
    215e:	23 2d       	mov	r18, r3
    2160:	2e 7f       	andi	r18, 0xFE	; 254
    2162:	a2 2e       	mov	r10, r18
    2164:	89 14       	cp	r8, r9
    2166:	58 f4       	brcc	.+22     	; 0x217e <__stack+0x7f>
    2168:	34 fe       	sbrs	r3, 4
    216a:	0b c0       	rjmp	.+22     	; 0x2182 <__stack+0x83>
    216c:	32 fc       	sbrc	r3, 2
    216e:	09 c0       	rjmp	.+18     	; 0x2182 <__stack+0x83>
    2170:	83 2d       	mov	r24, r3
    2172:	8e 7e       	andi	r24, 0xEE	; 238
    2174:	a8 2e       	mov	r10, r24
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <__stack+0x83>
    2178:	b8 2c       	mov	r11, r8
    217a:	a3 2c       	mov	r10, r3
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <__stack+0x85>
    217e:	b8 2c       	mov	r11, r8
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <__stack+0x85>
    2182:	b9 2c       	mov	r11, r9
    2184:	a4 fe       	sbrs	r10, 4
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <__stack+0xa7>
    2188:	fe 01       	movw	r30, r28
    218a:	e8 0d       	add	r30, r8
    218c:	f1 1d       	adc	r31, r1
    218e:	80 81       	ld	r24, Z
    2190:	80 33       	cpi	r24, 0x30	; 48
    2192:	21 f4       	brne	.+8      	; 0x219c <__stack+0x9d>
    2194:	9a 2d       	mov	r25, r10
    2196:	99 7e       	andi	r25, 0xE9	; 233
    2198:	a9 2e       	mov	r10, r25
    219a:	09 c0       	rjmp	.+18     	; 0x21ae <__stack+0xaf>
    219c:	a2 fe       	sbrs	r10, 2
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <__stack+0xad>
    21a0:	b3 94       	inc	r11
    21a2:	b3 94       	inc	r11
    21a4:	04 c0       	rjmp	.+8      	; 0x21ae <__stack+0xaf>
    21a6:	8a 2d       	mov	r24, r10
    21a8:	86 78       	andi	r24, 0x86	; 134
    21aa:	09 f0       	breq	.+2      	; 0x21ae <__stack+0xaf>
    21ac:	b3 94       	inc	r11
    21ae:	a3 fc       	sbrc	r10, 3
    21b0:	10 c0       	rjmp	.+32     	; 0x21d2 <__stack+0xd3>
    21b2:	a0 fe       	sbrs	r10, 0
    21b4:	06 c0       	rjmp	.+12     	; 0x21c2 <__stack+0xc3>
    21b6:	b2 14       	cp	r11, r2
    21b8:	80 f4       	brcc	.+32     	; 0x21da <__stack+0xdb>
    21ba:	28 0c       	add	r2, r8
    21bc:	92 2c       	mov	r9, r2
    21be:	9b 18       	sub	r9, r11
    21c0:	0d c0       	rjmp	.+26     	; 0x21dc <__stack+0xdd>
    21c2:	b2 14       	cp	r11, r2
    21c4:	58 f4       	brcc	.+22     	; 0x21dc <__stack+0xdd>
    21c6:	b6 01       	movw	r22, r12
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	76 d0       	rcall	.+236    	; 0x22ba <fputc>
    21ce:	b3 94       	inc	r11
    21d0:	f8 cf       	rjmp	.-16     	; 0x21c2 <__stack+0xc3>
    21d2:	b2 14       	cp	r11, r2
    21d4:	18 f4       	brcc	.+6      	; 0x21dc <__stack+0xdd>
    21d6:	2b 18       	sub	r2, r11
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <__stack+0xdf>
    21da:	98 2c       	mov	r9, r8
    21dc:	21 2c       	mov	r2, r1
    21de:	a4 fe       	sbrs	r10, 4
    21e0:	0f c0       	rjmp	.+30     	; 0x2200 <__stack+0x101>
    21e2:	b6 01       	movw	r22, r12
    21e4:	80 e3       	ldi	r24, 0x30	; 48
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	68 d0       	rcall	.+208    	; 0x22ba <fputc>
    21ea:	a2 fe       	sbrs	r10, 2
    21ec:	16 c0       	rjmp	.+44     	; 0x221a <__stack+0x11b>
    21ee:	a1 fc       	sbrc	r10, 1
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <__stack+0xf9>
    21f2:	88 e7       	ldi	r24, 0x78	; 120
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <__stack+0xfd>
    21f8:	88 e5       	ldi	r24, 0x58	; 88
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	b6 01       	movw	r22, r12
    21fe:	0c c0       	rjmp	.+24     	; 0x2218 <__stack+0x119>
    2200:	8a 2d       	mov	r24, r10
    2202:	86 78       	andi	r24, 0x86	; 134
    2204:	51 f0       	breq	.+20     	; 0x221a <__stack+0x11b>
    2206:	a1 fe       	sbrs	r10, 1
    2208:	02 c0       	rjmp	.+4      	; 0x220e <__stack+0x10f>
    220a:	8b e2       	ldi	r24, 0x2B	; 43
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <__stack+0x111>
    220e:	80 e2       	ldi	r24, 0x20	; 32
    2210:	a7 fc       	sbrc	r10, 7
    2212:	8d e2       	ldi	r24, 0x2D	; 45
    2214:	b6 01       	movw	r22, r12
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	50 d0       	rcall	.+160    	; 0x22ba <fputc>
    221a:	89 14       	cp	r8, r9
    221c:	30 f4       	brcc	.+12     	; 0x222a <__stack+0x12b>
    221e:	b6 01       	movw	r22, r12
    2220:	80 e3       	ldi	r24, 0x30	; 48
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	4a d0       	rcall	.+148    	; 0x22ba <fputc>
    2226:	9a 94       	dec	r9
    2228:	f8 cf       	rjmp	.-16     	; 0x221a <__stack+0x11b>
    222a:	8a 94       	dec	r8
    222c:	f3 01       	movw	r30, r6
    222e:	e8 0d       	add	r30, r8
    2230:	f1 1d       	adc	r31, r1
    2232:	80 81       	ld	r24, Z
    2234:	b6 01       	movw	r22, r12
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	40 d0       	rcall	.+128    	; 0x22ba <fputc>
    223a:	81 10       	cpse	r8, r1
    223c:	f6 cf       	rjmp	.-20     	; 0x222a <__stack+0x12b>
    223e:	22 20       	and	r2, r2
    2240:	09 f4       	brne	.+2      	; 0x2244 <__stack+0x145>
    2242:	4e ce       	rjmp	.-868    	; 0x1ee0 <vfprintf+0x4c>
    2244:	b6 01       	movw	r22, r12
    2246:	80 e2       	ldi	r24, 0x20	; 32
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	37 d0       	rcall	.+110    	; 0x22ba <fputc>
    224c:	2a 94       	dec	r2
    224e:	f7 cf       	rjmp	.-18     	; 0x223e <__stack+0x13f>
    2250:	f6 01       	movw	r30, r12
    2252:	86 81       	ldd	r24, Z+6	; 0x06
    2254:	97 81       	ldd	r25, Z+7	; 0x07
    2256:	02 c0       	rjmp	.+4      	; 0x225c <__stack+0x15d>
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	9f ef       	ldi	r25, 0xFF	; 255
    225c:	2b 96       	adiw	r28, 0x0b	; 11
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	bf 90       	pop	r11
    227a:	af 90       	pop	r10
    227c:	9f 90       	pop	r9
    227e:	8f 90       	pop	r8
    2280:	7f 90       	pop	r7
    2282:	6f 90       	pop	r6
    2284:	5f 90       	pop	r5
    2286:	4f 90       	pop	r4
    2288:	3f 90       	pop	r3
    228a:	2f 90       	pop	r2
    228c:	08 95       	ret

0000228e <strnlen_P>:
    228e:	fc 01       	movw	r30, r24
    2290:	05 90       	lpm	r0, Z+
    2292:	61 50       	subi	r22, 0x01	; 1
    2294:	70 40       	sbci	r23, 0x00	; 0
    2296:	01 10       	cpse	r0, r1
    2298:	d8 f7       	brcc	.-10     	; 0x2290 <strnlen_P+0x2>
    229a:	80 95       	com	r24
    229c:	90 95       	com	r25
    229e:	8e 0f       	add	r24, r30
    22a0:	9f 1f       	adc	r25, r31
    22a2:	08 95       	ret

000022a4 <strnlen>:
    22a4:	fc 01       	movw	r30, r24
    22a6:	61 50       	subi	r22, 0x01	; 1
    22a8:	70 40       	sbci	r23, 0x00	; 0
    22aa:	01 90       	ld	r0, Z+
    22ac:	01 10       	cpse	r0, r1
    22ae:	d8 f7       	brcc	.-10     	; 0x22a6 <strnlen+0x2>
    22b0:	80 95       	com	r24
    22b2:	90 95       	com	r25
    22b4:	8e 0f       	add	r24, r30
    22b6:	9f 1f       	adc	r25, r31
    22b8:	08 95       	ret

000022ba <fputc>:
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	fb 01       	movw	r30, r22
    22c4:	23 81       	ldd	r18, Z+3	; 0x03
    22c6:	21 fd       	sbrc	r18, 1
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <fputc+0x16>
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	9f ef       	ldi	r25, 0xFF	; 255
    22ce:	2c c0       	rjmp	.+88     	; 0x2328 <fputc+0x6e>
    22d0:	22 ff       	sbrs	r18, 2
    22d2:	16 c0       	rjmp	.+44     	; 0x2300 <fputc+0x46>
    22d4:	46 81       	ldd	r20, Z+6	; 0x06
    22d6:	57 81       	ldd	r21, Z+7	; 0x07
    22d8:	24 81       	ldd	r18, Z+4	; 0x04
    22da:	35 81       	ldd	r19, Z+5	; 0x05
    22dc:	42 17       	cp	r20, r18
    22de:	53 07       	cpc	r21, r19
    22e0:	44 f4       	brge	.+16     	; 0x22f2 <fputc+0x38>
    22e2:	a0 81       	ld	r26, Z
    22e4:	b1 81       	ldd	r27, Z+1	; 0x01
    22e6:	9d 01       	movw	r18, r26
    22e8:	2f 5f       	subi	r18, 0xFF	; 255
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	31 83       	std	Z+1, r19	; 0x01
    22ee:	20 83       	st	Z, r18
    22f0:	8c 93       	st	X, r24
    22f2:	26 81       	ldd	r18, Z+6	; 0x06
    22f4:	37 81       	ldd	r19, Z+7	; 0x07
    22f6:	2f 5f       	subi	r18, 0xFF	; 255
    22f8:	3f 4f       	sbci	r19, 0xFF	; 255
    22fa:	37 83       	std	Z+7, r19	; 0x07
    22fc:	26 83       	std	Z+6, r18	; 0x06
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <fputc+0x6e>
    2300:	8b 01       	movw	r16, r22
    2302:	ec 01       	movw	r28, r24
    2304:	fb 01       	movw	r30, r22
    2306:	00 84       	ldd	r0, Z+8	; 0x08
    2308:	f1 85       	ldd	r31, Z+9	; 0x09
    230a:	e0 2d       	mov	r30, r0
    230c:	09 95       	icall
    230e:	89 2b       	or	r24, r25
    2310:	e1 f6       	brne	.-72     	; 0x22ca <fputc+0x10>
    2312:	d8 01       	movw	r26, r16
    2314:	16 96       	adiw	r26, 0x06	; 6
    2316:	8d 91       	ld	r24, X+
    2318:	9c 91       	ld	r25, X
    231a:	17 97       	sbiw	r26, 0x07	; 7
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	17 96       	adiw	r26, 0x07	; 7
    2320:	9c 93       	st	X, r25
    2322:	8e 93       	st	-X, r24
    2324:	16 97       	sbiw	r26, 0x06	; 6
    2326:	ce 01       	movw	r24, r28
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	08 95       	ret

00002332 <__ultoa_invert>:
    2332:	fa 01       	movw	r30, r20
    2334:	aa 27       	eor	r26, r26
    2336:	28 30       	cpi	r18, 0x08	; 8
    2338:	51 f1       	breq	.+84     	; 0x238e <__ultoa_invert+0x5c>
    233a:	20 31       	cpi	r18, 0x10	; 16
    233c:	81 f1       	breq	.+96     	; 0x239e <__ultoa_invert+0x6c>
    233e:	e8 94       	clt
    2340:	6f 93       	push	r22
    2342:	6e 7f       	andi	r22, 0xFE	; 254
    2344:	6e 5f       	subi	r22, 0xFE	; 254
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	8f 4f       	sbci	r24, 0xFF	; 255
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	af 4f       	sbci	r26, 0xFF	; 255
    234e:	b1 e0       	ldi	r27, 0x01	; 1
    2350:	3e d0       	rcall	.+124    	; 0x23ce <__ultoa_invert+0x9c>
    2352:	b4 e0       	ldi	r27, 0x04	; 4
    2354:	3c d0       	rcall	.+120    	; 0x23ce <__ultoa_invert+0x9c>
    2356:	67 0f       	add	r22, r23
    2358:	78 1f       	adc	r23, r24
    235a:	89 1f       	adc	r24, r25
    235c:	9a 1f       	adc	r25, r26
    235e:	a1 1d       	adc	r26, r1
    2360:	68 0f       	add	r22, r24
    2362:	79 1f       	adc	r23, r25
    2364:	8a 1f       	adc	r24, r26
    2366:	91 1d       	adc	r25, r1
    2368:	a1 1d       	adc	r26, r1
    236a:	6a 0f       	add	r22, r26
    236c:	71 1d       	adc	r23, r1
    236e:	81 1d       	adc	r24, r1
    2370:	91 1d       	adc	r25, r1
    2372:	a1 1d       	adc	r26, r1
    2374:	20 d0       	rcall	.+64     	; 0x23b6 <__ultoa_invert+0x84>
    2376:	09 f4       	brne	.+2      	; 0x237a <__ultoa_invert+0x48>
    2378:	68 94       	set
    237a:	3f 91       	pop	r19
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	26 9f       	mul	r18, r22
    2380:	11 24       	eor	r1, r1
    2382:	30 19       	sub	r19, r0
    2384:	30 5d       	subi	r19, 0xD0	; 208
    2386:	31 93       	st	Z+, r19
    2388:	de f6       	brtc	.-74     	; 0x2340 <__ultoa_invert+0xe>
    238a:	cf 01       	movw	r24, r30
    238c:	08 95       	ret
    238e:	46 2f       	mov	r20, r22
    2390:	47 70       	andi	r20, 0x07	; 7
    2392:	40 5d       	subi	r20, 0xD0	; 208
    2394:	41 93       	st	Z+, r20
    2396:	b3 e0       	ldi	r27, 0x03	; 3
    2398:	0f d0       	rcall	.+30     	; 0x23b8 <__ultoa_invert+0x86>
    239a:	c9 f7       	brne	.-14     	; 0x238e <__ultoa_invert+0x5c>
    239c:	f6 cf       	rjmp	.-20     	; 0x238a <__ultoa_invert+0x58>
    239e:	46 2f       	mov	r20, r22
    23a0:	4f 70       	andi	r20, 0x0F	; 15
    23a2:	40 5d       	subi	r20, 0xD0	; 208
    23a4:	4a 33       	cpi	r20, 0x3A	; 58
    23a6:	18 f0       	brcs	.+6      	; 0x23ae <__ultoa_invert+0x7c>
    23a8:	49 5d       	subi	r20, 0xD9	; 217
    23aa:	31 fd       	sbrc	r19, 1
    23ac:	40 52       	subi	r20, 0x20	; 32
    23ae:	41 93       	st	Z+, r20
    23b0:	02 d0       	rcall	.+4      	; 0x23b6 <__ultoa_invert+0x84>
    23b2:	a9 f7       	brne	.-22     	; 0x239e <__ultoa_invert+0x6c>
    23b4:	ea cf       	rjmp	.-44     	; 0x238a <__ultoa_invert+0x58>
    23b6:	b4 e0       	ldi	r27, 0x04	; 4
    23b8:	a6 95       	lsr	r26
    23ba:	97 95       	ror	r25
    23bc:	87 95       	ror	r24
    23be:	77 95       	ror	r23
    23c0:	67 95       	ror	r22
    23c2:	ba 95       	dec	r27
    23c4:	c9 f7       	brne	.-14     	; 0x23b8 <__ultoa_invert+0x86>
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	61 05       	cpc	r22, r1
    23ca:	71 05       	cpc	r23, r1
    23cc:	08 95       	ret
    23ce:	9b 01       	movw	r18, r22
    23d0:	ac 01       	movw	r20, r24
    23d2:	0a 2e       	mov	r0, r26
    23d4:	06 94       	lsr	r0
    23d6:	57 95       	ror	r21
    23d8:	47 95       	ror	r20
    23da:	37 95       	ror	r19
    23dc:	27 95       	ror	r18
    23de:	ba 95       	dec	r27
    23e0:	c9 f7       	brne	.-14     	; 0x23d4 <__ultoa_invert+0xa2>
    23e2:	62 0f       	add	r22, r18
    23e4:	73 1f       	adc	r23, r19
    23e6:	84 1f       	adc	r24, r20
    23e8:	95 1f       	adc	r25, r21
    23ea:	a0 1d       	adc	r26, r0
    23ec:	08 95       	ret

000023ee <_exit>:
    23ee:	f8 94       	cli

000023f0 <__stop_program>:
    23f0:	ff cf       	rjmp	.-2      	; 0x23f0 <__stop_program>
