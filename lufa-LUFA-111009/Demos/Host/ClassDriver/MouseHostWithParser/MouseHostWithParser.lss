
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002444  000024d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800124  00800124  000024fc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000071b4  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002522  00000000  00000000  00009a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038b3  00000000  00000000  0000bf9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c1c  00000000  00000000  0000f854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bea  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c7b  00000000  00000000  0001305a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00017cd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c1       	rjmp	.+582    	; 0x248 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	3b c1       	rjmp	.+630    	; 0x284 <__bad_interrupt>
       e:	00 00       	nop
      10:	39 c1       	rjmp	.+626    	; 0x284 <__bad_interrupt>
      12:	00 00       	nop
      14:	37 c1       	rjmp	.+622    	; 0x284 <__bad_interrupt>
      16:	00 00       	nop
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c6       	rjmp	.+3076   	; 0xc2e <__vector_10>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	01 c1       	rjmp	.+514    	; 0x284 <__bad_interrupt>
      82:	00 00       	nop
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	dc 03       	fmulsu	r21, r20
      9a:	cd 04       	cpc	r12, r13
      9c:	fa 03       	fmulsu	r23, r18
      9e:	04 04       	cpc	r0, r4
      a0:	2f 04       	cpc	r2, r15
      a2:	57 04       	cpc	r5, r7
      a4:	62 04       	cpc	r6, r2
      a6:	73 04       	cpc	r7, r3
      a8:	8f 04       	cpc	r8, r15
      aa:	b6 04       	cpc	r11, r6

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4518>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4513>:
     131:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     141:	2e 0d 0a 00                                         ....

00000145 <__c.4511>:
     145:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     155:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     165:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     175:	64 20 4d 6f 75 73 65 2e 0d 0a 00                    d Mouse....

00000180 <__c.4509>:
     180:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     190:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a0:	6f 6e 2e 0d 0a 00                                   on....

000001a6 <__c.4507>:
     1a6:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b6:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     1c6:	65 2e 0d 0a 00                                      e....

000001cb <__c.4505>:
     1cb:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1db:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1eb:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001f8 <__c.4498>:
     1f8:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     208:	68 65 64 2e 0d 0a 00                                hed....

0000020f <__c.4493>:
     20f:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     21f:	0d 0a 00                                            ...

00000222 <__c.4471>:
     222:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     232:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     242:	5b 33 37 6d 00 00                                   [37m..

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d0 e2       	ldi	r29, 0x20	; 32
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e4 e4       	ldi	r30, 0x44	; 68
     25c:	f4 e2       	ldi	r31, 0x24	; 36
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	0b bf       	out	0x3b, r16	; 59
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
     264:	07 90       	elpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a4 32       	cpi	r26, 0x24	; 36
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
     26e:	25 e0       	ldi	r18, 0x05	; 5
     270:	a4 e2       	ldi	r26, 0x24	; 36
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	af 31       	cpi	r26, 0x1F	; 31
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	2e d1       	rcall	.+604    	; 0x4dc <main>
     280:	0c 94 20 12 	jmp	0x2440	; 0x2440 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     286:	9b b1       	in	r25, 0x0b	; 11
     288:	9f 70       	andi	r25, 0x0F	; 15
     28a:	89 2b       	or	r24, r25
     28c:	8b b9       	out	0x0b, r24	; 11
     28e:	08 95       	ret

00000290 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     290:	84 b7       	in	r24, 0x34	; 52
     292:	87 7f       	andi	r24, 0xF7	; 247
     294:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	a8 95       	wdr
     29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2a0:	88 61       	ori	r24, 0x18	; 24
     2a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2aa:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	80 e8       	ldi	r24, 0x80	; 128
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2b8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2bc:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2be:	83 e3       	ldi	r24, 0x33	; 51
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2c6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2ca:	86 e0       	ldi	r24, 0x06	; 6
     2cc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2d0:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2d4:	88 e1       	ldi	r24, 0x18	; 24
     2d6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2da:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2dc:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2de:	8a b1       	in	r24, 0x0a	; 10
     2e0:	80 6f       	ori	r24, 0xF0	; 240
     2e2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2e4:	8b b1       	in	r24, 0x0b	; 11
     2e6:	8f 70       	andi	r24, 0x0F	; 15
     2e8:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2ea:	8b d4       	rcall	.+2326   	; 0xc02 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     2ec:	a9 e1       	ldi	r26, 0x19	; 25
     2ee:	b5 e0       	ldi	r27, 0x05	; 5
     2f0:	eb e0       	ldi	r30, 0x0B	; 11
     2f2:	f5 e0       	ldi	r31, 0x05	; 5
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	fc 93       	st	X, r31
     2f8:	ee 93       	st	-X, r30
					stdout = Stream;
     2fa:	13 96       	adiw	r26, 0x03	; 3
     2fc:	fc 93       	st	X, r31
     2fe:	ee 93       	st	-X, r30
     300:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     302:	8e e0       	ldi	r24, 0x0E	; 14
     304:	df 01       	movw	r26, r30
     306:	1d 92       	st	X+, r1
     308:	8a 95       	dec	r24
     30a:	e9 f7       	brne	.-6      	; 0x306 <SetupHardware+0x76>
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	83 83       	std	Z+3, r24	; 0x03
     310:	87 ef       	ldi	r24, 0xF7	; 247
     312:	9e e0       	ldi	r25, 0x0E	; 14
     314:	91 87       	std	Z+9, r25	; 0x09
     316:	80 87       	std	Z+8, r24	; 0x08
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	9f e0       	ldi	r25, 0x0F	; 15
     31c:	93 87       	std	Z+11, r25	; 0x0b
     31e:	82 87       	std	Z+10, r24	; 0x0a
     320:	08 95       	ret

00000322 <MouseHost_Task>:

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     322:	3f 92       	push	r3
     324:	4f 92       	push	r4
     326:	5f 92       	push	r5
     328:	6f 92       	push	r6
     32a:	7f 92       	push	r7
     32c:	8f 92       	push	r8
     32e:	9f 92       	push	r9
     330:	af 92       	push	r10
     332:	bf 92       	push	r11
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     348:	6d b6       	in	r6, 0x3d	; 61
     34a:	7e b6       	in	r7, 0x3e	; 62
/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     34c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
     350:	8b 30       	cpi	r24, 0x0B	; 11
     352:	09 f0       	breq	.+2      	; 0x356 <MouseHost_Task+0x34>
     354:	ac c0       	rjmp	.+344    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	  return;
	
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <HID_Host_IsReportReceived>
     35e:	88 23       	and	r24, r24
     360:	09 f4       	brne	.+2      	; 0x364 <MouseHost_Task+0x42>
     362:	a5 c0       	rjmp	.+330    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	{
     364:	8d b6       	in	r8, 0x3d	; 61
     366:	9e b6       	in	r9, 0x3e	; 62
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
     368:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__DATA_REGION_ORIGIN__+0x12>
     36c:	2d b7       	in	r18, 0x3d	; 61
     36e:	3e b7       	in	r19, 0x3e	; 62
     370:	28 1b       	sub	r18, r24
     372:	31 09       	sbc	r19, r1
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	3e bf       	out	0x3e, r19	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	2d bf       	out	0x3d, r18	; 61
     37e:	8d b7       	in	r24, 0x3d	; 61
     380:	9e b7       	in	r25, 0x3e	; 62
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	7c 01       	movw	r14, r24
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     386:	bc 01       	movw	r22, r24
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     390:	41 2c       	mov	r4, r1
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
	{
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     392:	51 2c       	mov	r5, r1

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     394:	3a e2       	ldi	r19, 0x2A	; 42
     396:	33 2e       	mov	r3, r19
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     398:	40 e1       	ldi	r20, 0x10	; 16
     39a:	c4 2e       	mov	r12, r20
     39c:	d1 2c       	mov	r13, r1
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     39e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     3a2:	48 16       	cp	r4, r24
     3a4:	08 f0       	brcs	.+2      	; 0x3a8 <MouseHost_Task+0x86>
     3a6:	7c c0       	rjmp	.+248    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     3a8:	a4 2c       	mov	r10, r4
     3aa:	b1 2c       	mov	r11, r1
     3ac:	3a 9c       	mul	r3, r10
     3ae:	80 01       	movw	r16, r0
     3b0:	3b 9c       	mul	r3, r11
     3b2:	10 0d       	add	r17, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	b8 01       	movw	r22, r16
     3b8:	6b 5d       	subi	r22, 0xDB	; 219
     3ba:	7e 4f       	sbci	r23, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     3bc:	c7 01       	movw	r24, r14
     3be:	0e 94 55 0c 	call	0x18aa	; 0x18aa <USB_GetHIDReportItemInfo>
     3c2:	88 23       	and	r24, r24
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <MouseHost_Task+0xa6>
     3c6:	6a c0       	rjmp	.+212    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     3c8:	f8 01       	movw	r30, r16
     3ca:	ec 5d       	subi	r30, 0xDC	; 220
     3cc:	fe 4f       	sbci	r31, 0xFE	; 254
     3ce:	82 85       	ldd	r24, Z+10	; 0x0a
     3d0:	93 85       	ldd	r25, Z+11	; 0x0b
     3d2:	89 30       	cpi	r24, 0x09	; 9
     3d4:	91 05       	cpc	r25, r1
     3d6:	79 f4       	brne	.+30     	; 0x3f6 <MouseHost_Task+0xd4>
     3d8:	83 81       	ldd	r24, Z+3	; 0x03
     3da:	81 11       	cpse	r24, r1
     3dc:	5f c0       	rjmp	.+190    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     3de:	83 a1       	ldd	r24, Z+35	; 0x23
     3e0:	94 a1       	ldd	r25, Z+36	; 0x24
     3e2:	a5 a1       	ldd	r26, Z+37	; 0x25
     3e4:	b6 a1       	ldd	r27, Z+38	; 0x26
     3e6:	89 2b       	or	r24, r25
     3e8:	8a 2b       	or	r24, r26
     3ea:	8b 2b       	or	r24, r27
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <MouseHost_Task+0xce>
     3ee:	56 c0       	rjmp	.+172    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				  LEDMask = LEDS_ALL_LEDS;
     3f0:	20 ef       	ldi	r18, 0xF0	; 240
     3f2:	52 2e       	mov	r5, r18
     3f4:	53 c0       	rjmp	.+166    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	09 f0       	breq	.+2      	; 0x3fc <MouseHost_Task+0xda>
     3fa:	50 c0       	rjmp	.+160    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     3fc:	24 85       	ldd	r18, Z+12	; 0x0c
     3fe:	35 85       	ldd	r19, Z+13	; 0x0d
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     400:	28 33       	cpi	r18, 0x38	; 56
     402:	31 05       	cpc	r19, r1
     404:	c1 f4       	brne	.+48     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	81 11       	cpse	r24, r1
     40a:	15 c0       	rjmp	.+42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     40c:	81 85       	ldd	r24, Z+9	; 0x09
     40e:	96 01       	movw	r18, r12
     410:	28 1b       	sub	r18, r24
     412:	31 09       	sbc	r19, r1
     414:	83 a1       	ldd	r24, Z+35	; 0x23
     416:	94 a1       	ldd	r25, Z+36	; 0x24
     418:	a5 a1       	ldd	r26, Z+37	; 0x25
     41a:	b6 a1       	ldd	r27, Z+38	; 0x26
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	aa 1f       	adc	r26, r26
     424:	bb 1f       	adc	r27, r27
     426:	2a 95       	dec	r18
     428:	d2 f7       	brpl	.-12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

				if (WheelDelta)
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	b9 f1       	breq	.+110    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     42e:	a4 f5       	brge	.+104    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     430:	90 e7       	ldi	r25, 0x70	; 112
     432:	59 2e       	mov	r5, r25
     434:	33 c0       	rjmp	.+102    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     436:	c9 01       	movw	r24, r18
     438:	c0 97       	sbiw	r24, 0x30	; 48
     43a:	02 97       	sbiw	r24, 0x02	; 2
     43c:	78 f5       	brcc	.+94     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
     43e:	3a 9c       	mul	r3, r10
     440:	f0 01       	movw	r30, r0
     442:	3b 9c       	mul	r3, r11
     444:	f0 0d       	add	r31, r0
     446:	11 24       	eor	r1, r1
     448:	ec 5d       	subi	r30, 0xDC	; 220
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
				if (WheelDelta)
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     44c:	83 81       	ldd	r24, Z+3	; 0x03
     44e:	81 11       	cpse	r24, r1
     450:	25 c0       	rjmp	.+74     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     452:	81 85       	ldd	r24, Z+9	; 0x09
     454:	a6 01       	movw	r20, r12
     456:	48 1b       	sub	r20, r24
     458:	51 09       	sbc	r21, r1
     45a:	83 a1       	ldd	r24, Z+35	; 0x23
     45c:	94 a1       	ldd	r25, Z+36	; 0x24
     45e:	a5 a1       	ldd	r26, Z+37	; 0x25
     460:	b6 a1       	ldd	r27, Z+38	; 0x26
     462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	aa 1f       	adc	r26, r26
     46a:	bb 1f       	adc	r27, r27
     46c:	4a 95       	dec	r20
     46e:	d2 f7       	brpl	.-12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

				if (DeltaMovement)
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	a1 f0       	breq	.+40     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     474:	20 33       	cpi	r18, 0x30	; 48
     476:	31 05       	cpc	r19, r1
     478:	39 f4       	brne	.+14     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     47a:	18 16       	cp	r1, r24
     47c:	19 06       	cpc	r1, r25
     47e:	14 f0       	brlt	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     480:	80 e2       	ldi	r24, 0x20	; 32
     482:	08 c0       	rjmp	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     484:	80 e1       	ldi	r24, 0x10	; 16
     486:	06 c0       	rjmp	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     488:	18 16       	cp	r1, r24
     48a:	19 06       	cpc	r1, r25
     48c:	14 f0       	brlt	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48e:	80 e4       	ldi	r24, 0x40	; 64
     490:	01 c0       	rjmp	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	80 e8       	ldi	r24, 0x80	; 128
     494:	58 2a       	or	r5, r24
     496:	02 c0       	rjmp	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

				if (WheelDelta)
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     498:	80 eb       	ldi	r24, 0xB0	; 176
     49a:	58 2e       	mov	r5, r24
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     49c:	43 94       	inc	r4
     49e:	7f cf       	rjmp	.-258    	; 0x39e <MouseHost_Task+0x7c>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     4a0:	85 2d       	mov	r24, r5
     4a2:	f1 de       	rcall	.-542    	; 0x286 <LEDs_SetAllLEDs>
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	9e be       	out	0x3e, r9	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	8d be       	out	0x3d, r8	; 61
	}
}
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	7e be       	out	0x3e, r7	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	6d be       	out	0x3d, r6	; 61
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	9f 90       	pop	r9
     4ce:	8f 90       	pop	r8
     4d0:	7f 90       	pop	r7
     4d2:	6f 90       	pop	r6
     4d4:	5f 90       	pop	r5
     4d6:	4f 90       	pop	r4
     4d8:	3f 90       	pop	r3
     4da:	08 95       	ret

000004dc <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     4dc:	d9 de       	rcall	.-590    	; 0x290 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     4de:	82 e2       	ldi	r24, 0x22	; 34
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <puts_P>
	sei();
     4e6:	78 94       	sei

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4e8:	80 e1       	ldi	r24, 0x10	; 16

	for (;;)
	{
		MouseHost_Task();
     4ea:	cd de       	rcall	.-614    	; 0x286 <LEDs_SetAllLEDs>
     4ec:	1a df       	rcall	.-460    	; 0x322 <MouseHost_Task>

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     4ee:	6e d6       	rcall	.+3292   	; 0x11cc <USB_USBTask>
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <main+0x10>

000004f2 <EVENT_USB_Host_DeviceAttached>:
     4f2:	8f e0       	ldi	r24, 0x0F	; 15
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4fa:	80 ea       	ldi	r24, 0xA0	; 160
     4fc:	c4 ce       	rjmp	.-632    	; 0x286 <LEDs_SetAllLEDs>

000004fe <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4fe:	88 ef       	ldi	r24, 0xF8	; 248
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     506:	80 e1       	ldi	r24, 0x10	; 16
     508:	be ce       	rjmp	.-644    	; 0x286 <LEDs_SetAllLEDs>

0000050a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	c2 50       	subi	r28, 0x02	; 2
     514:	d2 40       	sbci	r29, 0x02	; 2
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     520:	80 ea       	ldi	r24, 0xA0	; 160
     522:	b1 de       	rcall	.-670    	; 0x286 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	32 e0       	ldi	r19, 0x02	; 2
     528:	ae 01       	movw	r20, r28
     52a:	4f 5f       	subi	r20, 0xFF	; 255
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	be 01       	movw	r22, r28
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	7d 4f       	sbci	r23, 0xFD	; 253
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	7b d4       	rcall	.+2294   	; 0xe2e <USB_Host_GetDeviceConfigDescriptor>
     538:	88 23       	and	r24, r24
     53a:	19 f0       	breq	.+6      	; 0x542 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     53c:	8b ec       	ldi	r24, 0xCB	; 203
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	18 c0       	rjmp	.+48     	; 0x572 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     542:	cf 5f       	subi	r28, 0xFF	; 255
     544:	dd 4f       	sbci	r29, 0xFD	; 253
     546:	68 81       	ld	r22, Y
     548:	79 81       	ldd	r23, Y+1	; 0x01
     54a:	c1 50       	subi	r28, 0x01	; 1
     54c:	d2 40       	sbci	r29, 0x02	; 2
     54e:	ae 01       	movw	r20, r28
     550:	4f 5f       	subi	r20, 0xFF	; 255
     552:	5f 4f       	sbci	r21, 0xFF	; 255
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <HID_Host_ConfigurePipes>
     55c:	88 23       	and	r24, r24
     55e:	19 f0       	breq	.+6      	; 0x566 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     560:	86 ea       	ldi	r24, 0xA6	; 166
     562:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     564:	06 c0       	rjmp	.+12     	; 0x572 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	0a d6       	rcall	.+3092   	; 0x117e <USB_Host_SetDeviceConfiguration>
     56a:	88 23       	and	r24, r24
     56c:	31 f0       	breq	.+12     	; 0x57a <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     576:	80 e9       	ldi	r24, 0x90	; 144
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Mouse_HID_Interface) != 0)
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <HID_Host_SetReportProtocol>
     582:	88 23       	and	r24, r24
     584:	49 f0       	breq	.+18     	; 0x598 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Mouse.\r\n"));
     586:	85 e4       	ldi	r24, 0x45	; 69
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58e:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     590:	7a de       	rcall	.-780    	; 0x286 <LEDs_SetAllLEDs>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	f4 d5       	rcall	.+3048   	; 0x117e <USB_Host_SetDeviceConfiguration>
		return;
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     598:	81 e3       	ldi	r24, 0x31	; 49
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5a0:	80 e6       	ldi	r24, 0x60	; 96
     5a2:	71 de       	rcall	.-798    	; 0x286 <LEDs_SetAllLEDs>
}
     5a4:	ce 5f       	subi	r28, 0xFE	; 254
     5a6:	dd 4f       	sbci	r29, 0xFD	; 253
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     5b8:	c8 2f       	mov	r28, r24
	USB_Disable();
     5ba:	bb d2       	rcall	.+1398   	; 0xb32 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5bc:	1f 92       	push	r1
     5be:	cf 93       	push	r28
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5cc:	80 e9       	ldi	r24, 0x90	; 144
     5ce:	5b de       	rcall	.-842    	; 0x286 <LEDs_SetAllLEDs>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <EVENT_USB_Host_HostError+0x20>

000005da <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5da:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <USB_HostState>
     5de:	1f 92       	push	r1
     5e0:	9f 93       	push	r25
     5e2:	1f 92       	push	r1
     5e4:	6f 93       	push	r22
     5e6:	1f 92       	push	r1
     5e8:	8f 93       	push	r24
     5ea:	8c ea       	ldi	r24, 0xAC	; 172
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5f6:	8d b7       	in	r24, 0x3d	; 61
     5f8:	9e b7       	in	r25, 0x3e	; 62
     5fa:	08 96       	adiw	r24, 0x08	; 8
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	9e bf       	out	0x3e, r25	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	8d bf       	out	0x3d, r24	; 61
     606:	80 e9       	ldi	r24, 0x90	; 144
     608:	3e ce       	rjmp	.-900    	; 0x286 <LEDs_SetAllLEDs>

0000060a <CALLBACK_HIDParser_FilterHIDReportItem>:

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     60a:	dc 01       	movw	r26, r24
     60c:	16 96       	adiw	r26, 0x06	; 6
     60e:	ed 91       	ld	r30, X+
     610:	fc 91       	ld	r31, X
     612:	17 97       	sbiw	r26, 0x07	; 7
     614:	30 97       	sbiw	r30, 0x00	; 0
     616:	b1 f0       	breq	.+44     	; 0x644 <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     618:	21 81       	ldd	r18, Z+1	; 0x01
     61a:	32 81       	ldd	r19, Z+2	; 0x02
     61c:	21 30       	cpi	r18, 0x01	; 1
     61e:	31 05       	cpc	r19, r1
     620:	29 f4       	brne	.+10     	; 0x62c <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     622:	23 81       	ldd	r18, Z+3	; 0x03
     624:	34 81       	ldd	r19, Z+4	; 0x04
     626:	22 30       	cpi	r18, 0x02	; 2
     628:	31 05       	cpc	r19, r1
     62a:	21 f0       	breq	.+8      	; 0x634 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     62c:	05 80       	ldd	r0, Z+5	; 0x05
     62e:	f6 81       	ldd	r31, Z+6	; 0x06
     630:	e0 2d       	mov	r30, r0
     632:	f0 cf       	rjmp	.-32     	; 0x614 <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     634:	fc 01       	movw	r30, r24
     636:	21 85       	ldd	r18, Z+9	; 0x09
     638:	32 85       	ldd	r19, Z+10	; 0x0a
     63a:	27 7f       	andi	r18, 0xF7	; 247
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	21 30       	cpi	r18, 0x01	; 1
     640:	31 05       	cpc	r19, r1
     642:	09 f0       	breq	.+2      	; 0x646 <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     644:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     646:	08 95       	ret

00000648 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     648:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     64c:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     64e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     652:	9d 7f       	andi	r25, 0xFD	; 253
     654:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     658:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     65c:	92 60       	ori	r25, 0x02	; 2
     65e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     662:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     666:	91 fd       	sbrc	r25, 1
     668:	fc cf       	rjmp	.-8      	; 0x662 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     66a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     66e:	91 60       	ori	r25, 0x01	; 1
     670:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     674:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     678:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     67c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     67e:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     682:	2f 7d       	andi	r18, 0xDF	; 223
     684:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     688:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     68c:	2f 7d       	andi	r18, 0xDF	; 223
     68e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     692:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     694:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     698:	35 ff       	sbrs	r19, 5
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     69c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6a0:	2f 7d       	andi	r18, 0xDF	; 223
     6a2:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6a6:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6aa:	2d 7f       	andi	r18, 0xFD	; 253
     6ac:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b2:	ef ec       	ldi	r30, 0xCF	; 207
     6b4:	f7 e0       	ldi	r31, 0x07	; 7
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <USB_Host_ResetDevice+0x6e>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <USB_Host_ResetDevice+0x74>
     6bc:	00 00       	nop
     6be:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     6c0:	49 f7       	brne	.-46     	; 0x694 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     6c2:	99 23       	and	r25, r25
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6c6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6ca:	90 62       	ori	r25, 0x20	; 32
     6cc:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     6d0:	81 11       	cpse	r24, r1
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6d4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6d8:	8e 7f       	andi	r24, 0xFE	; 254
     6da:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     6de:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6e8:	08 95       	ret

000006ea <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6ea:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6ee:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6f0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6f4:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6f6:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6fa:	3f 7d       	andi	r19, 0xDF	; 223
     6fc:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     700:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     704:	3f 7d       	andi	r19, 0xDF	; 223
     706:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     70a:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     70e:	31 60       	ori	r19, 0x01	; 1
     710:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     714:	88 23       	and	r24, r24
     716:	39 f1       	breq	.+78     	; 0x766 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     718:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     71c:	35 ff       	sbrs	r19, 5
     71e:	06 c0       	rjmp	.+12     	; 0x72c <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     720:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     724:	3f 7d       	andi	r19, 0xDF	; 223
     726:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     72a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     72c:	30 91 0a 05 	lds	r19, 0x050A	; 0x80050a <USB_HostState>
     730:	31 30       	cpi	r19, 0x01	; 1
     732:	c1 f0       	breq	.+48     	; 0x764 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     734:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     738:	34 ff       	sbrs	r19, 4
     73a:	09 c0       	rjmp	.+18     	; 0x74e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     73c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     740:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     744:	8f 7e       	andi	r24, 0xEF	; 239
     746:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     74a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     74c:	0c c0       	rjmp	.+24     	; 0x766 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     74e:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     752:	31 ff       	sbrs	r19, 1
     754:	df cf       	rjmp	.-66     	; 0x714 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     756:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     760:	83 e0       	ldi	r24, 0x03	; 3

			break;
     762:	01 c0       	rjmp	.+2      	; 0x766 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     764:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     766:	21 11       	cpse	r18, r1
     768:	05 c0       	rjmp	.+10     	; 0x774 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     76a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     76e:	2e 7f       	andi	r18, 0xFE	; 254
     770:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     774:	99 23       	and	r25, r25
     776:	29 f0       	breq	.+10     	; 0x782 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     778:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     77c:	90 62       	ori	r25, 0x20	; 32
     77e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     782:	08 95       	ret

00000784 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     784:	ef 92       	push	r14
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	28 97       	sbiw	r28, 0x08	; 8
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     79e:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <USB_HostState>
     7a2:	8e 2f       	mov	r24, r30
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	8a 30       	cpi	r24, 0x0A	; 10
     7a8:	91 05       	cpc	r25, r1
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <USB_Host_ProcessNextHostState+0x2a>
     7ac:	f6 c0       	rjmp	.+492    	; 0x99a <USB_Host_ProcessNextHostState+0x216>
     7ae:	fc 01       	movw	r30, r24
     7b0:	e4 5b       	subi	r30, 0xB4	; 180
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7b8:	00 91 fe 04 	lds	r16, 0x04FE	; 0x8004fe <WaitMSRemaining.2935>
     7bc:	10 91 ff 04 	lds	r17, 0x04FF	; 0x8004ff <WaitMSRemaining.2935+0x1>
     7c0:	01 15       	cp	r16, r1
     7c2:	11 05       	cpc	r17, r1
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <USB_Host_ProcessNextHostState+0x44>
     7c6:	e9 c0       	rjmp	.+466    	; 0x99a <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	8f df       	rcall	.-226    	; 0x6ea <USB_Host_WaitMS>
     7cc:	88 23       	and	r24, r24
     7ce:	31 f0       	breq	.+12     	; 0x7dc <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     7d0:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <PostWaitState.2936>
     7d4:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7d8:	91 e0       	ldi	r25, 0x01	; 1
					break;
     7da:	d1 c0       	rjmp	.+418    	; 0x97e <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     7dc:	01 50       	subi	r16, 0x01	; 1
     7de:	11 09       	sbc	r17, r1
     7e0:	10 93 ff 04 	sts	0x04FF, r17	; 0x8004ff <WaitMSRemaining.2935+0x1>
     7e4:	00 93 fe 04 	sts	0x04FE, r16	; 0x8004fe <WaitMSRemaining.2935>
     7e8:	01 2b       	or	r16, r17
     7ea:	09 f0       	breq	.+2      	; 0x7ee <USB_Host_ProcessNextHostState+0x6a>
     7ec:	d6 c0       	rjmp	.+428    	; 0x99a <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     7ee:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <PostWaitState.2936>
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7f4:	88 ee       	ldi	r24, 0xE8	; 232
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     7fc:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
			break;
     806:	c9 c0       	rjmp	.+402    	; 0x99a <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     808:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <WaitMSRemaining.2935>
     80c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <WaitMSRemaining.2935+0x1>
     810:	9c 01       	movw	r18, r24
     812:	21 50       	subi	r18, 0x01	; 1
     814:	31 09       	sbc	r19, r1
     816:	30 93 ff 04 	sts	0x04FF, r19	; 0x8004ff <WaitMSRemaining.2935+0x1>
     81a:	20 93 fe 04 	sts	0x04FE, r18	; 0x8004fe <WaitMSRemaining.2935>
     81e:	89 2b       	or	r24, r25
     820:	39 f0       	breq	.+14     	; 0x830 <USB_Host_ProcessNextHostState+0xac>
     822:	8f ec       	ldi	r24, 0xCF	; 207
     824:	97 e0       	ldi	r25, 0x07	; 7
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <USB_Host_ProcessNextHostState+0xa2>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <USB_Host_ProcessNextHostState+0xa8>
     82c:	00 00       	nop
     82e:	b5 c0       	rjmp	.+362    	; 0x99a <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     830:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     832:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     836:	80 61       	ori	r24, 0x10	; 16
     838:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     83c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     840:	8b 7f       	andi	r24, 0xFB	; 251
     842:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     846:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     84a:	80 61       	ori	r24, 0x10	; 16
     84c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     850:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     854:	82 60       	ori	r24, 0x02	; 2
     856:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	d2 cf       	rjmp	.-92     	; 0x802 <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     85e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     862:	80 ff       	sbrs	r24, 0
     864:	9a c0       	rjmp	.+308    	; 0x99a <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     866:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     86a:	8e 7f       	andi	r24, 0xFE	; 254
     86c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     870:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     874:	8d 7f       	andi	r24, 0xFD	; 253
     876:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     87a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     884:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     888:	82 60       	ori	r24, 0x02	; 2
     88a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     88e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     892:	81 60       	ori	r24, 0x01	; 1
     894:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     898:	e8 d0       	rcall	.+464    	; 0xa6a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     89a:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     89e:	84 e6       	ldi	r24, 0x64	; 100
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     8a6:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     8aa:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8ac:	5c c0       	rjmp	.+184    	; 0x966 <USB_Host_ProcessNextHostState+0x1e2>
     8ae:	cc de       	rcall	.-616    	; 0x648 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8b0:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     8b4:	88 ec       	ldi	r24, 0xC8	; 200
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     8bc:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     8c0:	86 e0       	ldi	r24, 0x06	; 6
     8c2:	51 c0       	rjmp	.+162    	; 0x966 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8c4:	e1 2c       	mov	r14, r1
     8c6:	00 e4       	ldi	r16, 0x40	; 64
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	6f d0       	rcall	.+222    	; 0x9b2 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8d4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8d8:	87 fd       	sbrc	r24, 7
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8de:	94 e0       	ldi	r25, 0x04	; 4
     8e0:	4e c0       	rjmp	.+156    	; 0x97e <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	8e cf       	rjmp	.-228    	; 0x802 <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	e4 e1       	ldi	r30, 0x14	; 20
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	a2 e0       	ldi	r26, 0x02	; 2
     8ee:	b5 e0       	ldi	r27, 0x05	; 5
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <USB_Host_ProcessNextHostState+0x16c>
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	4a d3       	rcall	.+1684   	; 0xf92 <USB_Host_SendControlRequest>
     8fe:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     900:	3d c0       	rjmp	.+122    	; 0x97c <USB_Host_ProcessNextHostState+0x1f8>
     902:	88 85       	ldd	r24, Y+8	; 0x08
     904:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     908:	9f de       	rcall	.-706    	; 0x648 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     90a:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     90e:	88 ec       	ldi	r24, 0xC8	; 200
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     916:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     91a:	88 e0       	ldi	r24, 0x08	; 8
     91c:	24 c0       	rjmp	.+72     	; 0x966 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     91e:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	e1 2c       	mov	r14, r1
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	41 d0       	rcall	.+130    	; 0x9b2 <Pipe_ConfigurePipe>
     930:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     934:	87 ff       	sbrs	r24, 7
     936:	d2 cf       	rjmp	.-92     	; 0x8dc <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	ec e1       	ldi	r30, 0x1C	; 28
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	a2 e0       	ldi	r26, 0x02	; 2
     940:	b5 e0       	ldi	r27, 0x05	; 5
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     948:	e1 f7       	brne	.-8      	; 0x942 <USB_Host_ProcessNextHostState+0x1be>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	21 d3       	rcall	.+1602   	; 0xf92 <USB_Host_SendControlRequest>
     950:	81 11       	cpse	r24, r1
     952:	14 c0       	rjmp	.+40     	; 0x97c <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     954:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     958:	84 e6       	ldi	r24, 0x64	; 100
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     960:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     96a:	17 c0       	rjmp	.+46     	; 0x99a <USB_Host_ProcessNextHostState+0x216>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     972:	8a e0       	ldi	r24, 0x0A	; 10
     974:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     978:	c8 dd       	rcall	.-1136   	; 0x50a <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     97a:	0f c0       	rjmp	.+30     	; 0x99a <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     982:	21 30       	cpi	r18, 0x01	; 1
     984:	51 f0       	breq	.+20     	; 0x99a <USB_Host_ProcessNextHostState+0x216>
     986:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     988:	89 2f       	mov	r24, r25
     98a:	27 de       	rcall	.-946    	; 0x5da <EVENT_USB_Host_DeviceEnumerationFailed>
     98c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     990:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     992:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     996:	b3 dd       	rcall	.-1178   	; 0x4fe <EVENT_USB_Host_DeviceUnattached>
     998:	e4 d0       	rcall	.+456    	; 0xb62 <USB_ResetInterface>
	}
}
     99a:	28 96       	adiw	r28, 0x08	; 8
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9b2:	ef 92       	push	r14
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9b8:	2f 70       	andi	r18, 0x0F	; 15
     9ba:	42 2b       	or	r20, r18
     9bc:	90 e4       	ldi	r25, 0x40	; 64
     9be:	69 9f       	mul	r22, r25
     9c0:	b0 01       	movw	r22, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c6:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9c8:	2e 2d       	mov	r18, r14
     9ca:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9cc:	37 30       	cpi	r19, 0x07	; 7
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <Pipe_ConfigurePipe+0x20>
     9d0:	45 c0       	rjmp	.+138    	; 0xa5c <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9d2:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9d6:	38 13       	cpse	r19, r24
     9d8:	13 c0       	rjmp	.+38     	; 0xa00 <Pipe_ConfigurePipe+0x4e>
     9da:	48 e0       	ldi	r20, 0x08	; 8
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9e0:	40 17       	cp	r20, r16
     9e2:	51 07       	cpc	r21, r17
     9e4:	38 f0       	brcs	.+14     	; 0x9f4 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9e6:	92 95       	swap	r25
     9e8:	90 7f       	andi	r25, 0xF0	; 240
     9ea:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9ec:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     9ee:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <Pipe_ConfigurePipe+0x5e>
     9f4:	95 30       	cpi	r25, 0x05	; 5
     9f6:	b9 f3       	breq	.-18     	; 0x9e6 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     9f8:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     9fa:	44 0f       	add	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	f0 cf       	rjmp	.-32     	; 0x9e0 <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a00:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     a04:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     a08:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     a0c:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a10:	91 fd       	sbrc	r25, 1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a14:	3f 5f       	subi	r19, 0xFF	; 255
     a16:	da cf       	rjmp	.-76     	; 0x9cc <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a18:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a1c:	4e 7f       	andi	r20, 0xFE	; 254
     a1e:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a22:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a26:	4d 7f       	andi	r20, 0xFD	; 253
     a28:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a2c:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a30:	41 60       	ori	r20, 0x01	; 1
     a32:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a36:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     a3a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     a3e:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     a42:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a46:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a4a:	90 62       	ori	r25, 0x20	; 32
     a4c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a50:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a54:	97 fd       	sbrc	r25, 7
     a56:	de cf       	rjmp	.-68     	; 0xa14 <Pipe_ConfigurePipe+0x62>
		  return false;		
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a5c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     a60:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ef 90       	pop	r14
     a68:	08 95       	ret

00000a6a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a6a:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a74:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     a78:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     a7c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a80:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a84:	9e 7f       	andi	r25, 0xFE	; 254
     a86:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	87 30       	cpi	r24, 0x07	; 7
     a8e:	81 f7       	brne	.-32     	; 0xa70 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a90:	08 95       	ret

00000a92 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a92:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     a96:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a98:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a9a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a9e:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     aa2:	27 ff       	sbrs	r18, 7
     aa4:	0f c0       	rjmp	.+30     	; 0xac4 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     aa6:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     aaa:	42 2f       	mov	r20, r18
     aac:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     aae:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     ab2:	20 73       	andi	r18, 0x30	; 48
     ab4:	20 31       	cpi	r18, 0x10	; 16
     ab6:	11 f0       	breq	.+4      	; 0xabc <Pipe_IsEndpointBound+0x2a>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	01 c0       	rjmp	.+2      	; 0xabe <Pipe_IsEndpointBound+0x2c>
     abc:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     abe:	24 2b       	or	r18, r20
     ac0:	82 17       	cp	r24, r18
     ac2:	39 f0       	breq	.+14     	; 0xad2 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac4:	9f 5f       	subi	r25, 0xFF	; 255
     ac6:	97 30       	cpi	r25, 0x07	; 7
     ac8:	41 f7       	brne	.-48     	; 0xa9a <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aca:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ad4:	08 95       	ret

00000ad6 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ad6:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     ada:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     ade:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ae0:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ae4:	90 73       	andi	r25, 0x30	; 48
     ae6:	90 31       	cpi	r25, 0x10	; 16
     ae8:	29 f4       	brne	.+10     	; 0xaf4 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aea:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     aee:	90 ff       	sbrs	r25, 0
     af0:	05 c0       	rjmp	.+10     	; 0xafc <Pipe_WaitUntilReady+0x26>
     af2:	19 c0       	rjmp	.+50     	; 0xb26 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     af4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     af8:	92 fd       	sbrc	r25, 2
     afa:	15 c0       	rjmp	.+42     	; 0xb26 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     afc:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b00:	91 fd       	sbrc	r25, 1
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b04:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <USB_HostState>
     b08:	91 30       	cpi	r25, 0x01	; 1
     b0a:	89 f0       	breq	.+34     	; 0xb2e <Pipe_WaitUntilReady+0x58>
     b0c:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b10:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b14:	42 17       	cp	r20, r18
     b16:	53 07       	cpc	r21, r19
     b18:	19 f3       	breq	.-58     	; 0xae0 <Pipe_WaitUntilReady+0xa>
     b1a:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b1c:	11 f0       	breq	.+4      	; 0xb22 <Pipe_WaitUntilReady+0x4c>
     b1e:	a9 01       	movw	r20, r18
     b20:	df cf       	rjmp	.-66     	; 0xae0 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b2e:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b30:	08 95       	ret

00000b32 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b32:	70 d0       	rcall	.+224    	; 0xc14 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b34:	77 d0       	rcall	.+238    	; 0xc24 <USB_INT_ClearAllInterrupts>
     b36:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	80 83       	st	Z, r24
     b40:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	80 83       	st	Z, r24
     b4a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b4c:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	8c 91       	ld	r24, X
     b52:	8e 7f       	andi	r24, 0xFE	; 254
     b54:	8c 93       	st	X, r24
     b56:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b58:	8f 7e       	andi	r24, 0xEF	; 239
     b5a:	80 83       	st	Z, r24
     b5c:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b60:	08 95       	ret

00000b62 <USB_ResetInterface>:
     b62:	58 d0       	rcall	.+176    	; 0xc14 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b64:	5f d0       	rcall	.+190    	; 0xc24 <USB_INT_ClearAllInterrupts>
     b66:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b70:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b7a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b7e:	8f 7d       	andi	r24, 0xDF	; 223
     b80:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b84:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b88:	8f 77       	andi	r24, 0x7F	; 127
     b8a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b8e:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b90:	89 bd       	out	0x29, r24	; 41
     b92:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b94:	89 bd       	out	0x29, r24	; 41
     b96:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b98:	00 fe       	sbrs	r0, 0
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <USB_ResetInterface+0x34>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b9e:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     ba2:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     ba6:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ba8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     bac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bb0:	80 64       	ori	r24, 0x40	; 64
     bb2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bb6:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bc0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bca:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     bce:	8f 7e       	andi	r24, 0xEF	; 239
     bd0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     bd4:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     bd6:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     bd8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     be2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     be6:	84 60       	ori	r24, 0x04	; 4
     be8:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     bec:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bf0:	8e 7f       	andi	r24, 0xFE	; 254
     bf2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     bf6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bfa:	80 61       	ori	r24, 0x10	; 16
     bfc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c00:	08 95       	ret

00000c02 <USB_Init>:
     c02:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <USB_IsInitialized>

	USB_ResetInterface();
     c12:	a7 cf       	rjmp	.-178    	; 0xb62 <USB_ResetInterface>

00000c14 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c14:	e8 ed       	ldi	r30, 0xD8	; 216
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8c 7f       	andi	r24, 0xFC	; 252
     c1c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c1e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c22:	08 95       	ret

00000c24 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c24:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c28:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c2c:	08 95       	ret

00000c2e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	0b b6       	in	r0, 0x3b	; 59
     c3a:	0f 92       	push	r0
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c54:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c58:	85 ff       	sbrs	r24, 5
     c5a:	0a c0       	rjmp	.+20     	; 0xc70 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c5c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c60:	85 ff       	sbrs	r24, 5
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c64:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c68:	8f 7d       	andi	r24, 0xDF	; 223
     c6a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c6e:	6a d1       	rcall	.+724    	; 0xf44 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c70:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c74:	81 ff       	sbrs	r24, 1
     c76:	15 c0       	rjmp	.+42     	; 0xca2 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c78:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c7c:	81 ff       	sbrs	r24, 1
     c7e:	11 c0       	rjmp	.+34     	; 0xca2 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c80:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c84:	8d 7f       	andi	r24, 0xFD	; 253
     c86:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c8a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c94:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     c9e:	2f dc       	rcall	.-1954   	; 0x4fe <EVENT_USB_Host_DeviceUnattached>
     ca0:	60 df       	rcall	.-320    	; 0xb62 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ca2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ca6:	81 ff       	sbrs	r24, 1
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     caa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     cae:	81 ff       	sbrs	r24, 1
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cb2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cbc:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cbe:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	76 dc       	rcall	.-1812   	; 0x5b8 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ccc:	18 dc       	rcall	.-2000   	; 0x4fe <EVENT_USB_Host_DeviceUnattached>
     cce:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     cd0:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     cd4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cd8:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cda:	17 c0       	rjmp	.+46     	; 0xd0a <__vector_10+0xdc>
     cdc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ce0:	80 ff       	sbrs	r24, 0
     ce2:	13 c0       	rjmp	.+38     	; 0xd0a <__vector_10+0xdc>
     ce4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     cee:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cf8:	fc db       	rcall	.-2056   	; 0x4f2 <EVENT_USB_Host_DeviceAttached>
     cfa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d04:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d06:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     d0a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d0e:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <__vector_10+0x100>
     d12:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d16:	82 ff       	sbrs	r24, 2
     d18:	0a c0       	rjmp	.+20     	; 0xd2e <__vector_10+0x100>
     d1a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	58 dc       	rcall	.-1872   	; 0x5da <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d2a:	e9 db       	rcall	.-2094   	; 0x4fe <EVENT_USB_Host_DeviceUnattached>
     d2c:	1a df       	rcall	.-460    	; 0xb62 <USB_ResetInterface>

		USB_ResetInterface();
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <Pipe_Read_Stream_LE>:
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
     d66:	8b 01       	movw	r16, r22
     d68:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d6a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d6e:	8f 7c       	andi	r24, 0xCF	; 207
     d70:	80 61       	ori	r24, 0x10	; 16
     d72:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d76:	af de       	rcall	.-674    	; 0xad6 <Pipe_WaitUntilReady>
     d78:	81 11       	cpse	r24, r1
     d7a:	32 c0       	rjmp	.+100    	; 0xde0 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d7c:	e1 14       	cp	r14, r1
     d7e:	f1 04       	cpc	r15, r1
     d80:	39 f0       	breq	.+14     	; 0xd90 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     d82:	f7 01       	movw	r30, r14
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	08 1b       	sub	r16, r24
     d8a:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d8c:	c8 0f       	add	r28, r24
     d8e:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d90:	c1 2c       	mov	r12, r1
     d92:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d94:	01 15       	cp	r16, r1
     d96:	11 05       	cpc	r17, r1
     d98:	11 f1       	breq	.+68     	; 0xdde <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d9a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d9e:	85 fd       	sbrc	r24, 5
     da0:	15 c0       	rjmp	.+42     	; 0xdcc <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     da2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     da6:	8e 77       	andi	r24, 0x7E	; 126
     da8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dac:	e1 14       	cp	r14, r1
     dae:	f1 04       	cpc	r15, r1
     db0:	49 f0       	breq	.+18     	; 0xdc4 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     db2:	f7 01       	movw	r30, r14
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	c8 0e       	add	r12, r24
     dba:	d9 1e       	adc	r13, r25
     dbc:	d1 82       	std	Z+1, r13	; 0x01
     dbe:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     dc0:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <Pipe_Read_Stream_LE+0x8c>
     dc4:	88 de       	rcall	.-752    	; 0xad6 <Pipe_WaitUntilReady>
     dc6:	88 23       	and	r24, r24
     dc8:	29 f3       	breq	.-54     	; 0xd94 <Pipe_Read_Stream_LE+0x40>
     dca:	0a c0       	rjmp	.+20     	; 0xde0 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     dcc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     dd0:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dd2:	01 50       	subi	r16, 0x01	; 1
     dd4:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     dd6:	ff ef       	ldi	r31, 0xFF	; 255
     dd8:	cf 1a       	sub	r12, r31
     dda:	df 0a       	sbc	r13, r31
     ddc:	db cf       	rjmp	.-74     	; 0xd94 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     dde:	80 e0       	ldi	r24, 0x00	; 0
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	08 95       	ret

00000df2 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	dc 01       	movw	r26, r24
     df8:	eb 01       	movw	r28, r22
     dfa:	e8 81       	ld	r30, Y
     dfc:	f9 81       	ldd	r31, Y+1	; 0x01
     dfe:	20 81       	ld	r18, Z
     e00:	8d 91       	ld	r24, X+
     e02:	9c 91       	ld	r25, X
     e04:	11 97       	sbiw	r26, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	82 17       	cp	r24, r18
     e0a:	93 07       	cpc	r25, r19
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <USB_GetNextDescriptor+0x1e>
     e0e:	9c 01       	movw	r18, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	eb 01       	movw	r28, r22
     e16:	f9 83       	std	Y+1, r31	; 0x01
     e18:	e8 83       	st	Y, r30
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 1b       	sub	r24, r18
     e22:	93 0b       	sbc	r25, r19
     e24:	8d 93       	st	X+, r24
     e26:	9c 93       	st	X, r25
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <USB_Host_GetDeviceConfigDescriptor>:
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	29 97       	sbiw	r28, 0x09	; 9
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	6b 01       	movw	r12, r22
     e50:	8a 01       	movw	r16, r20
     e52:	79 01       	movw	r14, r18
     e54:	90 e8       	ldi	r25, 0x80	; 128
     e56:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <USB_ControlRequest>
     e5a:	96 e0       	ldi	r25, 0x06	; 6
     e5c:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <USB_ControlRequest+0x1>
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	92 60       	ori	r25, 0x02	; 2
     e66:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <USB_ControlRequest+0x3>
     e6a:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <USB_ControlRequest+0x2>
     e6e:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_ControlRequest+0x5>
     e72:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_ControlRequest+0x4>
     e76:	89 e0       	ldi	r24, 0x09	; 9
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <USB_ControlRequest+0x7>
     e7e:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_ControlRequest+0x6>
     e82:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e86:	ce 01       	movw	r24, r28
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	83 d0       	rcall	.+262    	; 0xf92 <USB_Host_SendControlRequest>
     e8c:	81 11       	cpse	r24, r1
     e8e:	19 c0       	rjmp	.+50     	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	f6 01       	movw	r30, r12
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	80 83       	st	Z, r24
     e9a:	e8 16       	cp	r14, r24
     e9c:	f9 06       	cpc	r15, r25
     e9e:	70 f0       	brcs	.+28     	; 0xebc <USB_Host_GetDeviceConfigDescriptor+0x8e>
     ea0:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <USB_ControlRequest+0x7>
     ea4:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_ControlRequest+0x6>
     ea8:	c8 01       	movw	r24, r16
     eaa:	73 d0       	rcall	.+230    	; 0xf92 <USB_Host_SendControlRequest>
     eac:	81 11       	cpse	r24, r1
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     eb0:	f8 01       	movw	r30, r16
     eb2:	81 81       	ldd	r24, Z+1	; 0x01
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	21 f4       	brne	.+8      	; 0xec0 <USB_Host_GetDeviceConfigDescriptor+0x92>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ebc:	85 e0       	ldi	r24, 0x05	; 5
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	29 96       	adiw	r28, 0x09	; 9
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	08 95       	ret

00000ee0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ee0:	af 92       	push	r10
     ee2:	bf 92       	push	r11
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	8c 01       	movw	r16, r24
     ef6:	eb 01       	movw	r28, r22
     ef8:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     efa:	f8 01       	movw	r30, r16
     efc:	e0 80       	ld	r14, Z
     efe:	f1 80       	ldd	r15, Z+1	; 0x01
     f00:	e1 14       	cp	r14, r1
     f02:	f1 04       	cpc	r15, r1
     f04:	99 f0       	breq	.+38     	; 0xf2c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f06:	a8 80       	ld	r10, Y
     f08:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     f0a:	be 01       	movw	r22, r28
     f0c:	c8 01       	movw	r24, r16
     f0e:	71 df       	rcall	.-286    	; 0xdf2 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f10:	88 81       	ld	r24, Y
     f12:	99 81       	ldd	r25, Y+1	; 0x01
     f14:	f6 01       	movw	r30, r12
     f16:	09 95       	icall
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	79 f3       	breq	.-34     	; 0xefa <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	39 f4       	brne	.+14     	; 0xf2e <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     f20:	b9 82       	std	Y+1, r11	; 0x01
     f22:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     f24:	f8 01       	movw	r30, r16
     f26:	f1 82       	std	Z+1, r15	; 0x01
     f28:	e0 82       	st	Z, r14
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	08 95       	ret

00000f44 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f44:	08 95       	ret

00000f46 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f4e:	c9 ee       	ldi	r28, 0xE9	; 233
     f50:	d3 e0       	ldi	r29, 0x03	; 3
     f52:	11 11       	cpse	r17, r1
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f56:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f5a:	83 fd       	sbrc	r24, 3
     f5c:	15 c0       	rjmp	.+42     	; 0xf88 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	c4 db       	rcall	.-2168   	; 0x6ea <USB_Host_WaitMS>
     f62:	81 11       	cpse	r24, r1
     f64:	12 c0       	rjmp	.+36     	; 0xf8a <USB_Host_WaitForIOS+0x44>
     f66:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f68:	a1 f7       	brne	.-24     	; 0xf52 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f6e:	11 30       	cpi	r17, 0x01	; 1
     f70:	29 f4       	brne	.+10     	; 0xf7c <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f72:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f76:	80 ff       	sbrs	r24, 0
     f78:	f2 cf       	rjmp	.-28     	; 0xf5e <USB_Host_WaitForIOS+0x18>
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f7c:	12 30       	cpi	r17, 0x02	; 2
     f7e:	79 f7       	brne	.-34     	; 0xf5e <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f80:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f84:	82 ff       	sbrs	r24, 2
     f86:	eb cf       	rjmp	.-42     	; 0xf5e <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f88:	80 e0       	ldi	r24, 0x00	; 0
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f9e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fa6:	c0 91 08 05 	lds	r28, 0x0508	; 0x800508 <USB_ControlRequest+0x6>
     faa:	d0 91 09 05 	lds	r29, 0x0509	; 0x800509 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fae:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	97 db       	rcall	.-2258   	; 0x6ea <USB_Host_WaitMS>
     fbc:	81 11       	cpse	r24, r1
     fbe:	c8 c0       	rjmp	.+400    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fc0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fc4:	8f 7c       	andi	r24, 0xCF	; 207
     fc6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fca:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     fce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fd2:	8f 7e       	andi	r24, 0xEF	; 239
     fd4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fe2:	e2 e0       	ldi	r30, 0x02	; 2
     fe4:	f5 e0       	ldi	r31, 0x05	; 5
     fe6:	8a e0       	ldi	r24, 0x0A	; 10
     fe8:	95 e0       	ldi	r25, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     fea:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fec:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ff0:	8e 17       	cp	r24, r30
     ff2:	9f 07       	cpc	r25, r31
     ff4:	d1 f7       	brne	.-12     	; 0xfea <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ff6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ffa:	87 77       	andi	r24, 0x77	; 119
     ffc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	a1 df       	rcall	.-190    	; 0xf46 <USB_Host_WaitForIOS>
    1004:	81 11       	cpse	r24, r1
    1006:	a4 c0       	rjmp	.+328    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1008:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	6a db       	rcall	.-2348   	; 0x6ea <USB_Host_WaitMS>
    1016:	81 11       	cpse	r24, r1
    1018:	9b c0       	rjmp	.+310    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    101a:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <USB_ControlRequest>
    101e:	87 ff       	sbrs	r24, 7
    1020:	4e c0       	rjmp	.+156    	; 0x10be <__EEPROM_REGION_LENGTH__+0xbe>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1022:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1026:	8f 7c       	andi	r24, 0xCF	; 207
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    102e:	01 15       	cp	r16, r1
    1030:	11 05       	cpc	r17, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1034:	3a c0       	rjmp	.+116    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
    1036:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    103a:	8f 7c       	andi	r24, 0xCF	; 207
    103c:	80 62       	ori	r24, 0x20	; 32
    103e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1042:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	7b df       	rcall	.-266    	; 0xf46 <USB_Host_WaitForIOS>
    1050:	81 11       	cpse	r24, r1
    1052:	7e c0       	rjmp	.+252    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1054:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1058:	8b 77       	andi	r24, 0x7B	; 123
    105a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	72 df       	rcall	.-284    	; 0xf46 <USB_Host_WaitForIOS>
    1062:	76 c0       	rjmp	.+236    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1064:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1068:	8f 7b       	andi	r24, 0xBF	; 191
    106a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	6a df       	rcall	.-300    	; 0xf46 <USB_Host_WaitForIOS>
    1072:	81 11       	cpse	r24, r1
    1074:	6d c0       	rjmp	.+218    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1076:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    107a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    107e:	89 2b       	or	r24, r25
    1080:	11 f4       	brne	.+4      	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
				  DataLen = 0;
    1082:	c0 e0       	ldi	r28, 0x00	; 0
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	f8 01       	movw	r30, r16
    1088:	8f 01       	movw	r16, r30
    108a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    108e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    1092:	89 2b       	or	r24, r25
    1094:	69 f4       	brne	.+26     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1096:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10a0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10a4:	8e 77       	andi	r24, 0x7E	; 126
    10a6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10aa:	20 97       	sbiw	r28, 0x00	; 0
    10ac:	d9 f6       	brne	.-74     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    10ae:	c3 cf       	rjmp	.-122    	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10b0:	20 97       	sbiw	r28, 0x00	; 0
    10b2:	89 f3       	breq	.-30     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10b4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    10b8:	81 93       	st	Z+, r24
					DataLen--;
    10ba:	21 97       	sbiw	r28, 0x01	; 1
    10bc:	e5 cf       	rjmp	.-54     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10be:	01 15       	cp	r16, r1
    10c0:	11 05       	cpc	r17, r1
    10c2:	91 f1       	breq	.+100    	; 0x1128 <__EEPROM_REGION_LENGTH__+0x128>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10c4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10c8:	8f 7c       	andi	r24, 0xCF	; 207
    10ca:	80 62       	ori	r24, 0x20	; 32
    10cc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10d0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10d4:	8f 7b       	andi	r24, 0xBF	; 191
    10d6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10de:	e1 f0       	breq	.+56     	; 0x1118 <__EEPROM_REGION_LENGTH__+0x118>
    10e0:	32 df       	rcall	.-412    	; 0xf46 <USB_Host_WaitForIOS>
    10e2:	81 11       	cpse	r24, r1
    10e4:	35 c0       	rjmp	.+106    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10e6:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    10ea:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10ee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	28 17       	cp	r18, r24
    10f6:	39 07       	cpc	r19, r25
    10f8:	48 f4       	brcc	.+18     	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
				{
					Pipe_Write_8(*(DataStream++));
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	f8 01       	movw	r30, r16
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1104:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    1108:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    110a:	69 f7       	brne	.-38     	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
    110c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1110:	8b 77       	andi	r24, 0x7B	; 123
    1112:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1116:	e1 cf       	rjmp	.-62     	; 0x10da <__EEPROM_REGION_LENGTH__+0xda>
    1118:	16 df       	rcall	.-468    	; 0xf46 <USB_Host_WaitForIOS>
    111a:	81 11       	cpse	r24, r1
    111c:	19 c0       	rjmp	.+50     	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    111e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1122:	80 64       	ori	r24, 0x40	; 64
    1124:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1128:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    112c:	8f 7c       	andi	r24, 0xCF	; 207
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1134:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1138:	8f 7b       	andi	r24, 0xBF	; 191
    113a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	02 df       	rcall	.-508    	; 0xf46 <USB_Host_WaitForIOS>
    1142:	81 11       	cpse	r24, r1
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1146:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    114a:	9e 77       	andi	r25, 0x7E	; 126
    114c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1150:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1154:	90 64       	ori	r25, 0x40	; 64
    1156:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    115a:	f1 10       	cpse	r15, r1
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <__EEPROM_REGION_LENGTH__+0x168>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    115e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1162:	9e 7f       	andi	r25, 0xFE	; 254
    1164:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    116e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	08 95       	ret

0000117e <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    117e:	cf 93       	push	r28
    1180:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1182:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <USB_ControlRequest>
    1186:	89 e0       	ldi	r24, 0x09	; 9
    1188:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <USB_ControlRequest+0x1>
    118c:	8c 2f       	mov	r24, r28
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <USB_ControlRequest+0x3>
    1194:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <USB_ControlRequest+0x2>
    1198:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_ControlRequest+0x5>
    119c:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_ControlRequest+0x4>
    11a0:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <USB_ControlRequest+0x7>
    11a4:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11a8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	f0 de       	rcall	.-544    	; 0xf92 <USB_Host_SendControlRequest>
    11b2:	81 11       	cpse	r24, r1
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11b6:	c0 93 00 05 	sts	0x0500, r28	; 0x800500 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11ba:	c1 11       	cpse	r28, r1
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <USB_Host_SetDeviceConfiguration+0x44>
    11be:	9a e0       	ldi	r25, 0x0A	; 10
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <USB_Host_SetDeviceConfiguration+0x46>
    11c2:	9b e0       	ldi	r25, 0x0B	; 11
    11c4:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <USB_HostState>
	}

	return ErrorCode;
}
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11d2:	c7 ea       	ldi	r28, 0xA7	; 167
    11d4:	d0 e0       	ldi	r29, 0x00	; 0
    11d6:	18 81       	ld	r17, Y
    11d8:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11da:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11dc:	d3 da       	rcall	.-2650   	; 0x784 <USB_Host_ProcessNextHostState>
    11de:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	08 95       	ret

000011e8 <USB_ProcessHIDReport>:
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
    11e8:	2f 92       	push	r2
    11ea:	3f 92       	push	r3
    11ec:	4f 92       	push	r4
    11ee:	5f 92       	push	r5
    11f0:	6f 92       	push	r6
    11f2:	7f 92       	push	r7
    11f4:	8f 92       	push	r8
    11f6:	9f 92       	push	r9
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	cc 58       	subi	r28, 0x8C	; 140
    1212:	d1 09       	sbc	r29, r1
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	6c 01       	movw	r12, r24
    1220:	e7 96       	adiw	r28, 0x37	; 55
    1222:	7f af       	std	Y+63, r23	; 0x3f
    1224:	6e af       	std	Y+62, r22	; 0x3e
    1226:	e7 97       	sbiw	r28, 0x37	; 55
    1228:	1a 01       	movw	r2, r20
    122a:	9a 01       	movw	r18, r20
    122c:	20 57       	subi	r18, 0x70	; 112
    122e:	3c 4f       	sbci	r19, 0xFC	; 252
    1230:	e9 96       	adiw	r28, 0x39	; 57
    1232:	3f af       	std	Y+63, r19	; 0x3f
    1234:	2e af       	std	Y+62, r18	; 0x3e
    1236:	e9 97       	sbiw	r28, 0x39	; 57
    1238:	89 ed       	ldi	r24, 0xD9	; 217
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	da 01       	movw	r26, r20
    123e:	fc 01       	movw	r30, r24
    1240:	1d 92       	st	X+, r1
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	e9 f7       	brne	.-6      	; 0x1240 <USB_ProcessHIDReport+0x58>
    1246:	fe 01       	movw	r30, r28
    1248:	31 96       	adiw	r30, 0x01	; 1
    124a:	8c e1       	ldi	r24, 0x1C	; 28
    124c:	df 01       	movw	r26, r30
    124e:	1d 92       	st	X+, r1
    1250:	8a 95       	dec	r24
    1252:	e9 f7       	brne	.-6      	; 0x124e <USB_ProcessHIDReport+0x66>
    1254:	87 e0       	ldi	r24, 0x07	; 7
    1256:	d9 01       	movw	r26, r18
    1258:	1d 92       	st	X+, r1
    125a:	8a 95       	dec	r24
    125c:	e9 f7       	brne	.-6      	; 0x1258 <USB_ProcessHIDReport+0x70>
    125e:	21 50       	subi	r18, 0x01	; 1
    1260:	31 09       	sbc	r19, r1
    1262:	c1 58       	subi	r28, 0x81	; 129
    1264:	df 4f       	sbci	r29, 0xFF	; 255
    1266:	39 83       	std	Y+1, r19	; 0x01
    1268:	28 83       	st	Y, r18
    126a:	cf 57       	subi	r28, 0x7F	; 127
    126c:	d0 40       	sbci	r29, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	d9 01       	movw	r26, r18
    1272:	8c 93       	st	X, r24
    1274:	ed 96       	adiw	r28, 0x3d	; 61
    1276:	1c ae       	std	Y+60, r1	; 0x3c
    1278:	1d ae       	std	Y+61, r1	; 0x3d
    127a:	1e ae       	std	Y+62, r1	; 0x3e
    127c:	1f ae       	std	Y+63, r1	; 0x3f
    127e:	ed 97       	sbiw	r28, 0x3d	; 61
    1280:	41 2c       	mov	r4, r1
    1282:	51 2c       	mov	r5, r1
    1284:	32 01       	movw	r6, r4
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	e5 96       	adiw	r28, 0x35	; 53
    128a:	1f ae       	std	Y+63, r1	; 0x3f
    128c:	1e ae       	std	Y+62, r1	; 0x3e
    128e:	e5 97       	sbiw	r28, 0x35	; 53
    1290:	7f 01       	movw	r14, r30
    1292:	fa 01       	movw	r30, r20
    1294:	ea 52       	subi	r30, 0x2A	; 42
    1296:	fc 4f       	sbci	r31, 0xFC	; 252
    1298:	cf 57       	subi	r28, 0x7F	; 127
    129a:	df 4f       	sbci	r29, 0xFF	; 255
    129c:	f9 83       	std	Y+1, r31	; 0x01
    129e:	e8 83       	st	Y, r30
    12a0:	c1 58       	subi	r28, 0x81	; 129
    12a2:	d0 40       	sbci	r29, 0x00	; 0
    12a4:	27 50       	subi	r18, 0x07	; 7
    12a6:	31 09       	sbc	r19, r1
    12a8:	c7 57       	subi	r28, 0x77	; 119
    12aa:	df 4f       	sbci	r29, 0xFF	; 255
    12ac:	39 83       	std	Y+1, r19	; 0x01
    12ae:	28 83       	st	Y, r18
    12b0:	c9 58       	subi	r28, 0x89	; 137
    12b2:	d0 40       	sbci	r29, 0x00	; 0
    12b4:	48 52       	subi	r20, 0x28	; 40
    12b6:	5c 4f       	sbci	r21, 0xFC	; 252
    12b8:	cd 57       	subi	r28, 0x7D	; 125
    12ba:	df 4f       	sbci	r29, 0xFF	; 255
    12bc:	59 83       	std	Y+1, r21	; 0x01
    12be:	48 83       	st	Y, r20
    12c0:	c3 58       	subi	r28, 0x83	; 131
    12c2:	d0 40       	sbci	r29, 0x00	; 0
    12c4:	c5 57       	subi	r28, 0x75	; 117
    12c6:	df 4f       	sbci	r29, 0xFF	; 255
    12c8:	b9 83       	std	Y+1, r27	; 0x01
    12ca:	a8 83       	st	Y, r26
    12cc:	cb 58       	subi	r28, 0x8B	; 139
    12ce:	d0 40       	sbci	r29, 0x00	; 0
    12d0:	e7 96       	adiw	r28, 0x37	; 55
    12d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    12d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    12d6:	e7 97       	sbiw	r28, 0x37	; 55
    12d8:	23 2b       	or	r18, r19
    12da:	09 f4       	brne	.+2      	; 0x12de <USB_ProcessHIDReport+0xf6>
    12dc:	b9 c2       	rjmp	.+1394   	; 0x1850 <USB_ProcessHIDReport+0x668>
    12de:	d6 01       	movw	r26, r12
    12e0:	bc 91       	ld	r27, X
    12e2:	ef 96       	adiw	r28, 0x3f	; 63
    12e4:	bf af       	std	Y+63, r27	; 0x3f
    12e6:	ef 97       	sbiw	r28, 0x3f	; 63
    12e8:	8b 2f       	mov	r24, r27
    12ea:	83 70       	andi	r24, 0x03	; 3
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	49 f1       	breq	.+82     	; 0x1342 <USB_ProcessHIDReport+0x15a>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	99 f0       	breq	.+38     	; 0x131a <USB_ProcessHIDReport+0x132>
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	c9 f1       	breq	.+114    	; 0x136a <USB_ProcessHIDReport+0x182>
    12f8:	ef ef       	ldi	r30, 0xFF	; 255
    12fa:	ce 1a       	sub	r12, r30
    12fc:	de 0a       	sbc	r13, r30
    12fe:	e7 96       	adiw	r28, 0x37	; 55
    1300:	2e ad       	ldd	r18, Y+62	; 0x3e
    1302:	3f ad       	ldd	r19, Y+63	; 0x3f
    1304:	e7 97       	sbiw	r28, 0x37	; 55
    1306:	21 50       	subi	r18, 0x01	; 1
    1308:	31 09       	sbc	r19, r1
    130a:	e7 96       	adiw	r28, 0x37	; 55
    130c:	3f af       	std	Y+63, r19	; 0x3f
    130e:	2e af       	std	Y+62, r18	; 0x3e
    1310:	e7 97       	sbiw	r28, 0x37	; 55
    1312:	81 2c       	mov	r8, r1
    1314:	91 2c       	mov	r9, r1
    1316:	54 01       	movw	r10, r8
    1318:	3a c0       	rjmp	.+116    	; 0x138e <USB_ProcessHIDReport+0x1a6>
    131a:	d6 01       	movw	r26, r12
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	8d 90       	ld	r8, X+
    1320:	9d 90       	ld	r9, X+
    1322:	ad 90       	ld	r10, X+
    1324:	bc 90       	ld	r11, X
    1326:	14 97       	sbiw	r26, 0x04	; 4
    1328:	e7 96       	adiw	r28, 0x37	; 55
    132a:	ee ad       	ldd	r30, Y+62	; 0x3e
    132c:	ff ad       	ldd	r31, Y+63	; 0x3f
    132e:	e7 97       	sbiw	r28, 0x37	; 55
    1330:	35 97       	sbiw	r30, 0x05	; 5
    1332:	e7 96       	adiw	r28, 0x37	; 55
    1334:	ff af       	std	Y+63, r31	; 0x3f
    1336:	ee af       	std	Y+62, r30	; 0x3e
    1338:	e7 97       	sbiw	r28, 0x37	; 55
    133a:	f5 e0       	ldi	r31, 0x05	; 5
    133c:	cf 0e       	add	r12, r31
    133e:	d1 1c       	adc	r13, r1
    1340:	26 c0       	rjmp	.+76     	; 0x138e <USB_ProcessHIDReport+0x1a6>
    1342:	d6 01       	movw	r26, r12
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	8d 90       	ld	r8, X+
    1348:	9c 90       	ld	r9, X
    134a:	12 97       	sbiw	r26, 0x02	; 2
    134c:	a1 2c       	mov	r10, r1
    134e:	b1 2c       	mov	r11, r1
    1350:	e7 96       	adiw	r28, 0x37	; 55
    1352:	ee ad       	ldd	r30, Y+62	; 0x3e
    1354:	ff ad       	ldd	r31, Y+63	; 0x3f
    1356:	e7 97       	sbiw	r28, 0x37	; 55
    1358:	33 97       	sbiw	r30, 0x03	; 3
    135a:	e7 96       	adiw	r28, 0x37	; 55
    135c:	ff af       	std	Y+63, r31	; 0x3f
    135e:	ee af       	std	Y+62, r30	; 0x3e
    1360:	e7 97       	sbiw	r28, 0x37	; 55
    1362:	f3 e0       	ldi	r31, 0x03	; 3
    1364:	cf 0e       	add	r12, r31
    1366:	d1 1c       	adc	r13, r1
    1368:	12 c0       	rjmp	.+36     	; 0x138e <USB_ProcessHIDReport+0x1a6>
    136a:	d6 01       	movw	r26, r12
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	8c 90       	ld	r8, X
    1370:	91 2c       	mov	r9, r1
    1372:	a1 2c       	mov	r10, r1
    1374:	b1 2c       	mov	r11, r1
    1376:	e7 96       	adiw	r28, 0x37	; 55
    1378:	ee ad       	ldd	r30, Y+62	; 0x3e
    137a:	ff ad       	ldd	r31, Y+63	; 0x3f
    137c:	e7 97       	sbiw	r28, 0x37	; 55
    137e:	32 97       	sbiw	r30, 0x02	; 2
    1380:	e7 96       	adiw	r28, 0x37	; 55
    1382:	ff af       	std	Y+63, r31	; 0x3f
    1384:	ee af       	std	Y+62, r30	; 0x3e
    1386:	e7 97       	sbiw	r28, 0x37	; 55
    1388:	f2 e0       	ldi	r31, 0x02	; 2
    138a:	cf 0e       	add	r12, r31
    138c:	d1 1c       	adc	r13, r1
    138e:	ef 96       	adiw	r28, 0x3f	; 63
    1390:	1f ad       	ldd	r17, Y+63	; 0x3f
    1392:	ef 97       	sbiw	r28, 0x3f	; 63
    1394:	1c 7f       	andi	r17, 0xFC	; 252
    1396:	14 36       	cpi	r17, 0x64	; 100
    1398:	09 f4       	brne	.+2      	; 0x139c <USB_ProcessHIDReport+0x1b4>
    139a:	9d c0       	rjmp	.+314    	; 0x14d6 <USB_ProcessHIDReport+0x2ee>
    139c:	88 f5       	brcc	.+98     	; 0x1400 <USB_ProcessHIDReport+0x218>
    139e:	14 32       	cpi	r17, 0x24	; 36
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <USB_ProcessHIDReport+0x1bc>
    13a2:	83 c0       	rjmp	.+262    	; 0x14aa <USB_ProcessHIDReport+0x2c2>
    13a4:	b0 f4       	brcc	.+44     	; 0x13d2 <USB_ProcessHIDReport+0x1ea>
    13a6:	18 30       	cpi	r17, 0x08	; 8
    13a8:	09 f4       	brne	.+2      	; 0x13ac <USB_ProcessHIDReport+0x1c4>
    13aa:	ff c0       	rjmp	.+510    	; 0x15aa <USB_ProcessHIDReport+0x3c2>
    13ac:	48 f4       	brcc	.+18     	; 0x13c0 <USB_ProcessHIDReport+0x1d8>
    13ae:	14 30       	cpi	r17, 0x04	; 4
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <USB_ProcessHIDReport+0x1cc>
    13b2:	3d c2       	rjmp	.+1146   	; 0x182e <USB_ProcessHIDReport+0x646>
    13b4:	d7 01       	movw	r26, r14
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	9c 92       	st	X, r9
    13ba:	8e 92       	st	-X, r8
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	37 c2       	rjmp	.+1134   	; 0x182e <USB_ProcessHIDReport+0x646>
    13c0:	14 31       	cpi	r17, 0x14	; 20
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <USB_ProcessHIDReport+0x1de>
    13c4:	6c c0       	rjmp	.+216    	; 0x149e <USB_ProcessHIDReport+0x2b6>
    13c6:	18 31       	cpi	r17, 0x18	; 24
    13c8:	09 f0       	breq	.+2      	; 0x13cc <USB_ProcessHIDReport+0x1e4>
    13ca:	31 c2       	rjmp	.+1122   	; 0x182e <USB_ProcessHIDReport+0x646>
    13cc:	24 01       	movw	r4, r8
    13ce:	35 01       	movw	r6, r10
    13d0:	2e c2       	rjmp	.+1116   	; 0x182e <USB_ProcessHIDReport+0x646>
    13d2:	14 33       	cpi	r17, 0x34	; 52
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <USB_ProcessHIDReport+0x1f0>
    13d6:	71 c0       	rjmp	.+226    	; 0x14ba <USB_ProcessHIDReport+0x2d2>
    13d8:	50 f4       	brcc	.+20     	; 0x13ee <USB_ProcessHIDReport+0x206>
    13da:	18 32       	cpi	r17, 0x28	; 40
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <USB_ProcessHIDReport+0x1f8>
    13de:	27 c2       	rjmp	.+1102   	; 0x182e <USB_ProcessHIDReport+0x646>
    13e0:	ed 96       	adiw	r28, 0x3d	; 61
    13e2:	8c ae       	std	Y+60, r8	; 0x3c
    13e4:	9d ae       	std	Y+61, r9	; 0x3d
    13e6:	ae ae       	std	Y+62, r10	; 0x3e
    13e8:	bf ae       	std	Y+63, r11	; 0x3f
    13ea:	ed 97       	sbiw	r28, 0x3d	; 61
    13ec:	20 c2       	rjmp	.+1088   	; 0x182e <USB_ProcessHIDReport+0x646>
    13ee:	14 34       	cpi	r17, 0x44	; 68
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <USB_ProcessHIDReport+0x20c>
    13f2:	69 c0       	rjmp	.+210    	; 0x14c6 <USB_ProcessHIDReport+0x2de>
    13f4:	14 35       	cpi	r17, 0x54	; 84
    13f6:	09 f0       	breq	.+2      	; 0x13fa <USB_ProcessHIDReport+0x212>
    13f8:	1a c2       	rjmp	.+1076   	; 0x182e <USB_ProcessHIDReport+0x646>
    13fa:	f7 01       	movw	r30, r14
    13fc:	81 86       	std	Z+9, r8	; 0x09
    13fe:	17 c2       	rjmp	.+1070   	; 0x182e <USB_ProcessHIDReport+0x646>
    1400:	14 39       	cpi	r17, 0x94	; 148
    1402:	09 f4       	brne	.+2      	; 0x1406 <USB_ProcessHIDReport+0x21e>
    1404:	70 c0       	rjmp	.+224    	; 0x14e6 <USB_ProcessHIDReport+0x2fe>
    1406:	78 f4       	brcc	.+30     	; 0x1426 <USB_ProcessHIDReport+0x23e>
    1408:	10 38       	cpi	r17, 0x80	; 128
    140a:	e1 f0       	breq	.+56     	; 0x1444 <USB_ProcessHIDReport+0x25c>
    140c:	30 f4       	brcc	.+12     	; 0x141a <USB_ProcessHIDReport+0x232>
    140e:	14 37       	cpi	r17, 0x74	; 116
    1410:	09 f0       	breq	.+2      	; 0x1414 <USB_ProcessHIDReport+0x22c>
    1412:	0d c2       	rjmp	.+1050   	; 0x182e <USB_ProcessHIDReport+0x646>
    1414:	f7 01       	movw	r30, r14
    1416:	80 82       	st	Z, r8
    1418:	0a c2       	rjmp	.+1044   	; 0x182e <USB_ProcessHIDReport+0x646>
    141a:	14 38       	cpi	r17, 0x84	; 132
    141c:	09 f4       	brne	.+2      	; 0x1420 <USB_ProcessHIDReport+0x238>
    141e:	67 c0       	rjmp	.+206    	; 0x14ee <USB_ProcessHIDReport+0x306>
    1420:	10 39       	cpi	r17, 0x90	; 144
    1422:	81 f0       	breq	.+32     	; 0x1444 <USB_ProcessHIDReport+0x25c>
    1424:	04 c2       	rjmp	.+1032   	; 0x182e <USB_ProcessHIDReport+0x646>
    1426:	10 3b       	cpi	r17, 0xB0	; 176
    1428:	69 f0       	breq	.+26     	; 0x1444 <USB_ProcessHIDReport+0x25c>
    142a:	30 f4       	brcc	.+12     	; 0x1438 <USB_ProcessHIDReport+0x250>
    142c:	10 3a       	cpi	r17, 0xA0	; 160
    142e:	09 f4       	brne	.+2      	; 0x1432 <USB_ProcessHIDReport+0x24a>
    1430:	ca c0       	rjmp	.+404    	; 0x15c6 <USB_ProcessHIDReport+0x3de>
    1432:	14 3a       	cpi	r17, 0xA4	; 164
    1434:	c9 f0       	breq	.+50     	; 0x1468 <USB_ProcessHIDReport+0x280>
    1436:	fb c1       	rjmp	.+1014   	; 0x182e <USB_ProcessHIDReport+0x646>
    1438:	14 3b       	cpi	r17, 0xB4	; 180
    143a:	39 f1       	breq	.+78     	; 0x148a <USB_ProcessHIDReport+0x2a2>
    143c:	10 3c       	cpi	r17, 0xC0	; 192
    143e:	09 f4       	brne	.+2      	; 0x1442 <USB_ProcessHIDReport+0x25a>
    1440:	2a c1       	rjmp	.+596    	; 0x1696 <USB_ProcessHIDReport+0x4ae>
    1442:	f5 c1       	rjmp	.+1002   	; 0x182e <USB_ProcessHIDReport+0x646>
    1444:	ee 96       	adiw	r28, 0x3e	; 62
    1446:	1f ae       	std	Y+63, r1	; 0x3f
    1448:	ee 97       	sbiw	r28, 0x3e	; 62
    144a:	a5 01       	movw	r20, r10
    144c:	94 01       	movw	r18, r8
    144e:	21 70       	andi	r18, 0x01	; 1
    1450:	33 27       	eor	r19, r19
    1452:	44 27       	eor	r20, r20
    1454:	55 27       	eor	r21, r21
    1456:	cb 57       	subi	r28, 0x7B	; 123
    1458:	df 4f       	sbci	r29, 0xFF	; 255
    145a:	28 83       	st	Y, r18
    145c:	39 83       	std	Y+1, r19	; 0x01
    145e:	4a 83       	std	Y+2, r20	; 0x02
    1460:	5b 83       	std	Y+3, r21	; 0x03
    1462:	c5 58       	subi	r28, 0x85	; 133
    1464:	d0 40       	sbci	r29, 0x00	; 0
    1466:	47 c1       	rjmp	.+654    	; 0x16f6 <USB_ProcessHIDReport+0x50e>
    1468:	ce 01       	movw	r24, r28
    146a:	4d 96       	adiw	r24, 0x1d	; 29
    146c:	e8 16       	cp	r14, r24
    146e:	f9 06       	cpc	r15, r25
    1470:	09 f4       	brne	.+2      	; 0x1474 <USB_ProcessHIDReport+0x28c>
    1472:	f4 c1       	rjmp	.+1000   	; 0x185c <USB_ProcessHIDReport+0x674>
    1474:	c7 01       	movw	r24, r14
    1476:	4c 96       	adiw	r24, 0x1c	; 28
    1478:	2a e2       	ldi	r18, 0x2A	; 42
    147a:	f7 01       	movw	r30, r14
    147c:	dc 01       	movw	r26, r24
    147e:	01 90       	ld	r0, Z+
    1480:	0d 92       	st	X+, r0
    1482:	2a 95       	dec	r18
    1484:	e1 f7       	brne	.-8      	; 0x147e <USB_ProcessHIDReport+0x296>
    1486:	7c 01       	movw	r14, r24
    1488:	d2 c1       	rjmp	.+932    	; 0x182e <USB_ProcessHIDReport+0x646>
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	8e 15       	cp	r24, r14
    1490:	9f 05       	cpc	r25, r15
    1492:	09 f4       	brne	.+2      	; 0x1496 <USB_ProcessHIDReport+0x2ae>
    1494:	e5 c1       	rjmp	.+970    	; 0x1860 <USB_ProcessHIDReport+0x678>
    1496:	3c e1       	ldi	r19, 0x1C	; 28
    1498:	e3 1a       	sub	r14, r19
    149a:	f1 08       	sbc	r15, r1
    149c:	c8 c1       	rjmp	.+912    	; 0x182e <USB_ProcessHIDReport+0x646>
    149e:	f7 01       	movw	r30, r14
    14a0:	82 86       	std	Z+10, r8	; 0x0a
    14a2:	93 86       	std	Z+11, r9	; 0x0b
    14a4:	a4 86       	std	Z+12, r10	; 0x0c
    14a6:	b5 86       	std	Z+13, r11	; 0x0d
    14a8:	c2 c1       	rjmp	.+900    	; 0x182e <USB_ProcessHIDReport+0x646>
    14aa:	d7 01       	movw	r26, r14
    14ac:	1e 96       	adiw	r26, 0x0e	; 14
    14ae:	8d 92       	st	X+, r8
    14b0:	9d 92       	st	X+, r9
    14b2:	ad 92       	st	X+, r10
    14b4:	bc 92       	st	X, r11
    14b6:	51 97       	sbiw	r26, 0x11	; 17
    14b8:	ba c1       	rjmp	.+884    	; 0x182e <USB_ProcessHIDReport+0x646>
    14ba:	f7 01       	movw	r30, r14
    14bc:	82 8a       	std	Z+18, r8	; 0x12
    14be:	93 8a       	std	Z+19, r9	; 0x13
    14c0:	a4 8a       	std	Z+20, r10	; 0x14
    14c2:	b5 8a       	std	Z+21, r11	; 0x15
    14c4:	b4 c1       	rjmp	.+872    	; 0x182e <USB_ProcessHIDReport+0x646>
    14c6:	d7 01       	movw	r26, r14
    14c8:	56 96       	adiw	r26, 0x16	; 22
    14ca:	8d 92       	st	X+, r8
    14cc:	9d 92       	st	X+, r9
    14ce:	ad 92       	st	X+, r10
    14d0:	bc 92       	st	X, r11
    14d2:	59 97       	sbiw	r26, 0x19	; 25
    14d4:	ac c1       	rjmp	.+856    	; 0x182e <USB_ProcessHIDReport+0x646>
    14d6:	d7 01       	movw	r26, r14
    14d8:	15 96       	adiw	r26, 0x05	; 5
    14da:	8d 92       	st	X+, r8
    14dc:	9d 92       	st	X+, r9
    14de:	ad 92       	st	X+, r10
    14e0:	bc 92       	st	X, r11
    14e2:	18 97       	sbiw	r26, 0x08	; 8
    14e4:	a4 c1       	rjmp	.+840    	; 0x182e <USB_ProcessHIDReport+0x646>
    14e6:	d7 01       	movw	r26, r14
    14e8:	5a 96       	adiw	r26, 0x1a	; 26
    14ea:	8c 92       	st	X, r8
    14ec:	a0 c1       	rjmp	.+832    	; 0x182e <USB_ProcessHIDReport+0x646>
    14ee:	98 2d       	mov	r25, r8
    14f0:	f7 01       	movw	r30, r14
    14f2:	83 8e       	std	Z+27, r8	; 0x1b
    14f4:	cd 57       	subi	r28, 0x7D	; 125
    14f6:	df 4f       	sbci	r29, 0xFF	; 255
    14f8:	a8 81       	ld	r26, Y
    14fa:	b9 81       	ldd	r27, Y+1	; 0x01
    14fc:	c3 58       	subi	r28, 0x83	; 131
    14fe:	d0 40       	sbci	r29, 0x00	; 0
    1500:	8c 91       	ld	r24, X
    1502:	88 23       	and	r24, r24
    1504:	09 f4       	brne	.+2      	; 0x1508 <USB_ProcessHIDReport+0x320>
    1506:	41 c0       	rjmp	.+130    	; 0x158a <USB_ProcessHIDReport+0x3a2>
    1508:	c5 57       	subi	r28, 0x75	; 117
    150a:	df 4f       	sbci	r29, 0xFF	; 255
    150c:	e8 81       	ld	r30, Y
    150e:	f9 81       	ldd	r31, Y+1	; 0x01
    1510:	cb 58       	subi	r28, 0x8B	; 139
    1512:	d0 40       	sbci	r29, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	f1 01       	movw	r30, r2
    1518:	e0 57       	subi	r30, 0x70	; 112
    151a:	fc 4f       	sbci	r31, 0xFC	; 252
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	28 17       	cp	r18, r24
    1522:	b8 f4       	brcc	.+46     	; 0x1552 <USB_ProcessHIDReport+0x36a>
    1524:	a9 01       	movw	r20, r18
    1526:	60 81       	ld	r22, Z
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	37 96       	adiw	r30, 0x07	; 7
    152e:	96 13       	cpse	r25, r22
    1530:	f7 cf       	rjmp	.-18     	; 0x1520 <USB_ProcessHIDReport+0x338>
    1532:	27 e0       	ldi	r18, 0x07	; 7
    1534:	24 9f       	mul	r18, r20
    1536:	c0 01       	movw	r24, r0
    1538:	25 9f       	mul	r18, r21
    153a:	90 0d       	add	r25, r0
    153c:	11 24       	eor	r1, r1
    153e:	80 57       	subi	r24, 0x70	; 112
    1540:	9c 4f       	sbci	r25, 0xFC	; 252
    1542:	91 01       	movw	r18, r2
    1544:	28 0f       	add	r18, r24
    1546:	39 1f       	adc	r19, r25
    1548:	e9 96       	adiw	r28, 0x39	; 57
    154a:	3f af       	std	Y+63, r19	; 0x3f
    154c:	2e af       	std	Y+62, r18	; 0x3e
    154e:	e9 97       	sbiw	r28, 0x39	; 57
    1550:	1c c0       	rjmp	.+56     	; 0x158a <USB_ProcessHIDReport+0x3a2>
    1552:	8a 30       	cpi	r24, 0x0A	; 10
    1554:	09 f4       	brne	.+2      	; 0x1558 <USB_ProcessHIDReport+0x370>
    1556:	8e c1       	rjmp	.+796    	; 0x1874 <USB_ProcessHIDReport+0x68c>
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	98 0f       	add	r25, r24
    155c:	c1 58       	subi	r28, 0x81	; 129
    155e:	df 4f       	sbci	r29, 0xFF	; 255
    1560:	a8 81       	ld	r26, Y
    1562:	b9 81       	ldd	r27, Y+1	; 0x01
    1564:	cf 57       	subi	r28, 0x7F	; 127
    1566:	d0 40       	sbci	r29, 0x00	; 0
    1568:	9c 93       	st	X, r25
    156a:	97 e0       	ldi	r25, 0x07	; 7
    156c:	91 01       	movw	r18, r2
    156e:	98 9f       	mul	r25, r24
    1570:	20 0d       	add	r18, r0
    1572:	31 1d       	adc	r19, r1
    1574:	11 24       	eor	r1, r1
    1576:	f9 01       	movw	r30, r18
    1578:	e0 57       	subi	r30, 0x70	; 112
    157a:	fc 4f       	sbci	r31, 0xFC	; 252
    157c:	e9 96       	adiw	r28, 0x39	; 57
    157e:	ff af       	std	Y+63, r31	; 0x3f
    1580:	ee af       	std	Y+62, r30	; 0x3e
    1582:	e9 97       	sbiw	r28, 0x39	; 57
    1584:	11 92       	st	Z+, r1
    1586:	9a 95       	dec	r25
    1588:	e9 f7       	brne	.-6      	; 0x1584 <USB_ProcessHIDReport+0x39c>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	cd 57       	subi	r28, 0x7D	; 125
    158e:	df 4f       	sbci	r29, 0xFF	; 255
    1590:	a8 81       	ld	r26, Y
    1592:	b9 81       	ldd	r27, Y+1	; 0x01
    1594:	c3 58       	subi	r28, 0x83	; 131
    1596:	d0 40       	sbci	r29, 0x00	; 0
    1598:	8c 93       	st	X, r24
    159a:	f7 01       	movw	r30, r14
    159c:	83 8d       	ldd	r24, Z+27	; 0x1b
    159e:	e9 96       	adiw	r28, 0x39	; 57
    15a0:	ae ad       	ldd	r26, Y+62	; 0x3e
    15a2:	bf ad       	ldd	r27, Y+63	; 0x3f
    15a4:	e9 97       	sbiw	r28, 0x39	; 57
    15a6:	8c 93       	st	X, r24
    15a8:	42 c1       	rjmp	.+644    	; 0x182e <USB_ProcessHIDReport+0x646>
    15aa:	08 30       	cpi	r16, 0x08	; 8
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <USB_ProcessHIDReport+0x3c8>
    15ae:	5a c1       	rjmp	.+692    	; 0x1864 <USB_ProcessHIDReport+0x67c>
    15b0:	fe 01       	movw	r30, r28
    15b2:	ed 59       	subi	r30, 0x9D	; 157
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	e0 0f       	add	r30, r16
    15b8:	f1 1d       	adc	r31, r1
    15ba:	e0 0f       	add	r30, r16
    15bc:	f1 1d       	adc	r31, r1
    15be:	91 82       	std	Z+1, r9	; 0x01
    15c0:	80 82       	st	Z, r8
    15c2:	0f 5f       	subi	r16, 0xFF	; 255
    15c4:	34 c1       	rjmp	.+616    	; 0x182e <USB_ProcessHIDReport+0x646>
    15c6:	e5 96       	adiw	r28, 0x35	; 53
    15c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    15ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    15cc:	e5 97       	sbiw	r28, 0x35	; 53
    15ce:	ef 2b       	or	r30, r31
    15d0:	41 f4       	brne	.+16     	; 0x15e2 <USB_ProcessHIDReport+0x3fa>
    15d2:	91 01       	movw	r18, r2
    15d4:	27 5b       	subi	r18, 0xB7	; 183
    15d6:	3c 4f       	sbci	r19, 0xFC	; 252
    15d8:	e5 96       	adiw	r28, 0x35	; 53
    15da:	3f af       	std	Y+63, r19	; 0x3f
    15dc:	2e af       	std	Y+62, r18	; 0x3e
    15de:	e5 97       	sbiw	r28, 0x35	; 53
    15e0:	1d c0       	rjmp	.+58     	; 0x161c <USB_ProcessHIDReport+0x434>
    15e2:	f1 01       	movw	r30, r2
    15e4:	e0 5b       	subi	r30, 0xB0	; 176
    15e6:	fc 4f       	sbci	r31, 0xFC	; 252
    15e8:	85 81       	ldd	r24, Z+5	; 0x05
    15ea:	96 81       	ldd	r25, Z+6	; 0x06
    15ec:	89 2b       	or	r24, r25
    15ee:	61 f0       	breq	.+24     	; 0x1608 <USB_ProcessHIDReport+0x420>
    15f0:	c7 57       	subi	r28, 0x77	; 119
    15f2:	df 4f       	sbci	r29, 0xFF	; 255
    15f4:	48 81       	ld	r20, Y
    15f6:	59 81       	ldd	r21, Y+1	; 0x01
    15f8:	c9 58       	subi	r28, 0x89	; 137
    15fa:	d0 40       	sbci	r29, 0x00	; 0
    15fc:	e4 17       	cp	r30, r20
    15fe:	f5 07       	cpc	r31, r21
    1600:	09 f4       	brne	.+2      	; 0x1604 <USB_ProcessHIDReport+0x41c>
    1602:	32 c1       	rjmp	.+612    	; 0x1868 <USB_ProcessHIDReport+0x680>
    1604:	37 96       	adiw	r30, 0x07	; 7
    1606:	f0 cf       	rjmp	.-32     	; 0x15e8 <USB_ProcessHIDReport+0x400>
    1608:	e5 96       	adiw	r28, 0x35	; 53
    160a:	8e ad       	ldd	r24, Y+62	; 0x3e
    160c:	9f ad       	ldd	r25, Y+63	; 0x3f
    160e:	e5 97       	sbiw	r28, 0x35	; 53
    1610:	96 83       	std	Z+6, r25	; 0x06
    1612:	85 83       	std	Z+5, r24	; 0x05
    1614:	e5 96       	adiw	r28, 0x35	; 53
    1616:	ff af       	std	Y+63, r31	; 0x3f
    1618:	ee af       	std	Y+62, r30	; 0x3e
    161a:	e5 97       	sbiw	r28, 0x35	; 53
    161c:	e5 96       	adiw	r28, 0x35	; 53
    161e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1620:	bf ad       	ldd	r27, Y+63	; 0x3f
    1622:	e5 97       	sbiw	r28, 0x35	; 53
    1624:	8c 92       	st	X, r8
    1626:	f7 01       	movw	r30, r14
    1628:	81 81       	ldd	r24, Z+1	; 0x01
    162a:	92 81       	ldd	r25, Z+2	; 0x02
    162c:	12 96       	adiw	r26, 0x02	; 2
    162e:	9c 93       	st	X, r25
    1630:	8e 93       	st	-X, r24
    1632:	11 97       	sbiw	r26, 0x01	; 1
    1634:	00 23       	and	r16, r16
    1636:	a9 f0       	breq	.+42     	; 0x1662 <USB_ProcessHIDReport+0x47a>
    1638:	a5 96       	adiw	r28, 0x25	; 37
    163a:	8e ad       	ldd	r24, Y+62	; 0x3e
    163c:	9f ad       	ldd	r25, Y+63	; 0x3f
    163e:	a5 97       	sbiw	r28, 0x25	; 37
    1640:	14 96       	adiw	r26, 0x04	; 4
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
    1646:	13 97       	sbiw	r26, 0x03	; 3
    1648:	fe 01       	movw	r30, r28
    164a:	ed 59       	subi	r30, 0x9D	; 157
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	22 81       	ldd	r18, Z+2	; 0x02
    1652:	33 81       	ldd	r19, Z+3	; 0x03
    1654:	21 93       	st	Z+, r18
    1656:	31 93       	st	Z+, r19
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	08 13       	cpse	r16, r24
    165c:	f9 cf       	rjmp	.-14     	; 0x1650 <USB_ProcessHIDReport+0x468>
    165e:	01 50       	subi	r16, 0x01	; 1
    1660:	e6 c0       	rjmp	.+460    	; 0x182e <USB_ProcessHIDReport+0x646>
    1662:	ed 96       	adiw	r28, 0x3d	; 61
    1664:	2c ad       	ldd	r18, Y+60	; 0x3c
    1666:	3d ad       	ldd	r19, Y+61	; 0x3d
    1668:	4e ad       	ldd	r20, Y+62	; 0x3e
    166a:	5f ad       	ldd	r21, Y+63	; 0x3f
    166c:	ed 97       	sbiw	r28, 0x3d	; 61
    166e:	24 15       	cp	r18, r4
    1670:	35 05       	cpc	r19, r5
    1672:	46 05       	cpc	r20, r6
    1674:	57 05       	cpc	r21, r7
    1676:	08 f4       	brcc	.+2      	; 0x167a <USB_ProcessHIDReport+0x492>
    1678:	da c0       	rjmp	.+436    	; 0x182e <USB_ProcessHIDReport+0x646>
    167a:	e5 96       	adiw	r28, 0x35	; 53
    167c:	ae ad       	ldd	r26, Y+62	; 0x3e
    167e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1680:	e5 97       	sbiw	r28, 0x35	; 53
    1682:	14 96       	adiw	r26, 0x04	; 4
    1684:	5c 92       	st	X, r5
    1686:	4e 92       	st	-X, r4
    1688:	13 97       	sbiw	r26, 0x03	; 3
    168a:	bf ef       	ldi	r27, 0xFF	; 255
    168c:	4b 1a       	sub	r4, r27
    168e:	5b 0a       	sbc	r5, r27
    1690:	6b 0a       	sbc	r6, r27
    1692:	7b 0a       	sbc	r7, r27
    1694:	cc c0       	rjmp	.+408    	; 0x182e <USB_ProcessHIDReport+0x646>
    1696:	e5 96       	adiw	r28, 0x35	; 53
    1698:	ee ad       	ldd	r30, Y+62	; 0x3e
    169a:	ff ad       	ldd	r31, Y+63	; 0x3f
    169c:	e5 97       	sbiw	r28, 0x35	; 53
    169e:	30 97       	sbiw	r30, 0x00	; 0
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <USB_ProcessHIDReport+0x4bc>
    16a2:	e4 c0       	rjmp	.+456    	; 0x186c <USB_ProcessHIDReport+0x684>
    16a4:	25 81       	ldd	r18, Z+5	; 0x05
    16a6:	36 81       	ldd	r19, Z+6	; 0x06
    16a8:	e5 96       	adiw	r28, 0x35	; 53
    16aa:	3f af       	std	Y+63, r19	; 0x3f
    16ac:	2e af       	std	Y+62, r18	; 0x3e
    16ae:	e5 97       	sbiw	r28, 0x35	; 53
    16b0:	be c0       	rjmp	.+380    	; 0x182e <USB_ProcessHIDReport+0x646>
    16b2:	d1 01       	movw	r26, r2
    16b4:	ea e2       	ldi	r30, 0x2A	; 42
    16b6:	e8 9f       	mul	r30, r24
    16b8:	a0 0d       	add	r26, r0
    16ba:	b1 1d       	adc	r27, r1
    16bc:	11 24       	eor	r1, r1
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	fe 01       	movw	r30, r28
    16c2:	f9 96       	adiw	r30, 0x39	; 57
    16c4:	8a e2       	ldi	r24, 0x2A	; 42
    16c6:	01 90       	ld	r0, Z+
    16c8:	0d 92       	st	X+, r0
    16ca:	8a 95       	dec	r24
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <USB_ProcessHIDReport+0x4de>
    16ce:	cb 57       	subi	r28, 0x7B	; 123
    16d0:	df 4f       	sbci	r29, 0xFF	; 255
    16d2:	28 81       	ld	r18, Y
    16d4:	39 81       	ldd	r19, Y+1	; 0x01
    16d6:	4a 81       	ldd	r20, Y+2	; 0x02
    16d8:	5b 81       	ldd	r21, Y+3	; 0x03
    16da:	c5 58       	subi	r28, 0x85	; 133
    16dc:	d0 40       	sbci	r29, 0x00	; 0
    16de:	23 2b       	or	r18, r19
    16e0:	24 2b       	or	r18, r20
    16e2:	25 2b       	or	r18, r21
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <USB_ProcessHIDReport+0x500>
    16e6:	97 c0       	rjmp	.+302    	; 0x1816 <USB_ProcessHIDReport+0x62e>
    16e8:	ee 96       	adiw	r28, 0x3e	; 62
    16ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    16ec:	ee 97       	sbiw	r28, 0x3e	; 62
    16ee:	bf 5f       	subi	r27, 0xFF	; 255
    16f0:	ee 96       	adiw	r28, 0x3e	; 62
    16f2:	bf af       	std	Y+63, r27	; 0x3f
    16f4:	ee 97       	sbiw	r28, 0x3e	; 62
    16f6:	f7 01       	movw	r30, r14
    16f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    16fa:	ee 96       	adiw	r28, 0x3e	; 62
    16fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    16fe:	ee 97       	sbiw	r28, 0x3e	; 62
    1700:	f8 17       	cp	r31, r24
    1702:	08 f0       	brcs	.+2      	; 0x1706 <USB_ProcessHIDReport+0x51e>
    1704:	94 c0       	rjmp	.+296    	; 0x182e <USB_ProcessHIDReport+0x646>
    1706:	8a e1       	ldi	r24, 0x1A	; 26
    1708:	f7 01       	movw	r30, r14
    170a:	de 01       	movw	r26, r28
    170c:	af 5b       	subi	r26, 0xBF	; 191
    170e:	bf 4f       	sbci	r27, 0xFF	; 255
    1710:	01 90       	ld	r0, Z+
    1712:	0d 92       	st	X+, r0
    1714:	8a 95       	dec	r24
    1716:	e1 f7       	brne	.-8      	; 0x1710 <USB_ProcessHIDReport+0x528>
    1718:	9d ae       	std	Y+61, r9	; 0x3d
    171a:	8c ae       	std	Y+60, r8	; 0x3c
    171c:	e5 96       	adiw	r28, 0x35	; 53
    171e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1720:	5f ad       	ldd	r21, Y+63	; 0x3f
    1722:	e5 97       	sbiw	r28, 0x35	; 53
    1724:	21 96       	adiw	r28, 0x01	; 1
    1726:	5f af       	std	Y+63, r21	; 0x3f
    1728:	4e af       	std	Y+62, r20	; 0x3e
    172a:	21 97       	sbiw	r28, 0x01	; 1
    172c:	d7 01       	movw	r26, r14
    172e:	5b 96       	adiw	r26, 0x1b	; 27
    1730:	8c 91       	ld	r24, X
    1732:	8e af       	std	Y+62, r24	; 0x3e
    1734:	00 23       	and	r16, r16
    1736:	a9 f0       	breq	.+42     	; 0x1762 <USB_ProcessHIDReport+0x57a>
    1738:	a5 96       	adiw	r28, 0x25	; 37
    173a:	8e ad       	ldd	r24, Y+62	; 0x3e
    173c:	9f ad       	ldd	r25, Y+63	; 0x3f
    173e:	a5 97       	sbiw	r28, 0x25	; 37
    1740:	26 96       	adiw	r28, 0x06	; 6
    1742:	9f af       	std	Y+63, r25	; 0x3f
    1744:	8e af       	std	Y+62, r24	; 0x3e
    1746:	26 97       	sbiw	r28, 0x06	; 6
    1748:	fe 01       	movw	r30, r28
    174a:	ed 59       	subi	r30, 0x9D	; 157
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	22 81       	ldd	r18, Z+2	; 0x02
    1752:	33 81       	ldd	r19, Z+3	; 0x03
    1754:	21 93       	st	Z+, r18
    1756:	31 93       	st	Z+, r19
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	08 13       	cpse	r16, r24
    175c:	f9 cf       	rjmp	.-14     	; 0x1750 <USB_ProcessHIDReport+0x568>
    175e:	01 50       	subi	r16, 0x01	; 1
    1760:	14 c0       	rjmp	.+40     	; 0x178a <USB_ProcessHIDReport+0x5a2>
    1762:	ed 96       	adiw	r28, 0x3d	; 61
    1764:	2c ad       	ldd	r18, Y+60	; 0x3c
    1766:	3d ad       	ldd	r19, Y+61	; 0x3d
    1768:	4e ad       	ldd	r20, Y+62	; 0x3e
    176a:	5f ad       	ldd	r21, Y+63	; 0x3f
    176c:	ed 97       	sbiw	r28, 0x3d	; 61
    176e:	24 15       	cp	r18, r4
    1770:	35 05       	cpc	r19, r5
    1772:	46 05       	cpc	r20, r6
    1774:	57 05       	cpc	r21, r7
    1776:	48 f0       	brcs	.+18     	; 0x178a <USB_ProcessHIDReport+0x5a2>
    1778:	26 96       	adiw	r28, 0x06	; 6
    177a:	5f ae       	std	Y+63, r5	; 0x3f
    177c:	4e ae       	std	Y+62, r4	; 0x3e
    177e:	26 97       	sbiw	r28, 0x06	; 6
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	43 1a       	sub	r4, r19
    1784:	53 0a       	sbc	r5, r19
    1786:	63 0a       	sbc	r6, r19
    1788:	73 0a       	sbc	r7, r19
    178a:	10 38       	cpi	r17, 0x80	; 128
    178c:	11 f4       	brne	.+4      	; 0x1792 <USB_ProcessHIDReport+0x5aa>
    178e:	1b ae       	std	Y+59, r1	; 0x3b
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <USB_ProcessHIDReport+0x5b8>
    1792:	10 39       	cpi	r17, 0x90	; 144
    1794:	19 f4       	brne	.+6      	; 0x179c <USB_ProcessHIDReport+0x5b4>
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	4b af       	std	Y+59, r20	; 0x3b
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <USB_ProcessHIDReport+0x5b8>
    179c:	52 e0       	ldi	r21, 0x02	; 2
    179e:	5b af       	std	Y+59, r21	; 0x3b
    17a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    17a2:	e9 96       	adiw	r28, 0x39	; 57
    17a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    17a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    17a8:	e9 97       	sbiw	r28, 0x39	; 57
    17aa:	e8 0f       	add	r30, r24
    17ac:	f1 1d       	adc	r31, r1
    17ae:	e8 0f       	add	r30, r24
    17b0:	f1 1d       	adc	r31, r1
    17b2:	81 81       	ldd	r24, Z+1	; 0x01
    17b4:	92 81       	ldd	r25, Z+2	; 0x02
    17b6:	9a af       	std	Y+58, r25	; 0x3a
    17b8:	89 af       	std	Y+57, r24	; 0x39
    17ba:	d7 01       	movw	r26, r14
    17bc:	2c 91       	ld	r18, X
    17be:	81 81       	ldd	r24, Z+1	; 0x01
    17c0:	92 81       	ldd	r25, Z+2	; 0x02
    17c2:	82 0f       	add	r24, r18
    17c4:	91 1d       	adc	r25, r1
    17c6:	92 83       	std	Z+2, r25	; 0x02
    17c8:	81 83       	std	Z+1, r24	; 0x01
    17ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    17cc:	e9 96       	adiw	r28, 0x39	; 57
    17ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    17d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17d2:	e9 97       	sbiw	r28, 0x39	; 57
    17d4:	e8 0f       	add	r30, r24
    17d6:	f1 1d       	adc	r31, r1
    17d8:	e8 0f       	add	r30, r24
    17da:	f1 1d       	adc	r31, r1
    17dc:	cf 57       	subi	r28, 0x7F	; 127
    17de:	df 4f       	sbci	r29, 0xFF	; 255
    17e0:	a8 81       	ld	r26, Y
    17e2:	b9 81       	ldd	r27, Y+1	; 0x01
    17e4:	c1 58       	subi	r28, 0x81	; 129
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	2d 91       	ld	r18, X+
    17ea:	3c 91       	ld	r19, X
    17ec:	81 81       	ldd	r24, Z+1	; 0x01
    17ee:	92 81       	ldd	r25, Z+2	; 0x02
    17f0:	82 17       	cp	r24, r18
    17f2:	93 07       	cpc	r25, r19
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <USB_ProcessHIDReport+0x610>
    17f6:	c9 01       	movw	r24, r18
    17f8:	cf 57       	subi	r28, 0x7F	; 127
    17fa:	df 4f       	sbci	r29, 0xFF	; 255
    17fc:	e8 81       	ld	r30, Y
    17fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1800:	c1 58       	subi	r28, 0x81	; 129
    1802:	d0 40       	sbci	r29, 0x00	; 0
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
    1808:	d1 01       	movw	r26, r2
    180a:	8c 91       	ld	r24, X
    180c:	84 31       	cpi	r24, 0x14	; 20
    180e:	09 f0       	breq	.+2      	; 0x1812 <USB_ProcessHIDReport+0x62a>
    1810:	50 cf       	rjmp	.-352    	; 0x16b2 <USB_ProcessHIDReport+0x4ca>
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	30 c0       	rjmp	.+96     	; 0x1876 <USB_ProcessHIDReport+0x68e>
    1816:	ce 01       	movw	r24, r28
    1818:	c9 96       	adiw	r24, 0x39	; 57
    181a:	0e 94 05 03 	call	0x60a	; 0x60a <CALLBACK_HIDParser_FilterHIDReportItem>
    181e:	88 23       	and	r24, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <USB_ProcessHIDReport+0x63c>
    1822:	62 cf       	rjmp	.-316    	; 0x16e8 <USB_ProcessHIDReport+0x500>
    1824:	d1 01       	movw	r26, r2
    1826:	8c 91       	ld	r24, X
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	8c 93       	st	X, r24
    182c:	5d cf       	rjmp	.-326    	; 0x16e8 <USB_ProcessHIDReport+0x500>
    182e:	ef 96       	adiw	r28, 0x3f	; 63
    1830:	8f ad       	ldd	r24, Y+63	; 0x3f
    1832:	ef 97       	sbiw	r28, 0x3f	; 63
    1834:	8c 70       	andi	r24, 0x0C	; 12
    1836:	09 f0       	breq	.+2      	; 0x183a <USB_ProcessHIDReport+0x652>
    1838:	4b cd       	rjmp	.-1386   	; 0x12d0 <USB_ProcessHIDReport+0xe8>
    183a:	ed 96       	adiw	r28, 0x3d	; 61
    183c:	1c ae       	std	Y+60, r1	; 0x3c
    183e:	1d ae       	std	Y+61, r1	; 0x3d
    1840:	1e ae       	std	Y+62, r1	; 0x3e
    1842:	1f ae       	std	Y+63, r1	; 0x3f
    1844:	ed 97       	sbiw	r28, 0x3d	; 61
    1846:	41 2c       	mov	r4, r1
    1848:	51 2c       	mov	r5, r1
    184a:	32 01       	movw	r6, r4
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	40 cd       	rjmp	.-1408   	; 0x12d0 <USB_ProcessHIDReport+0xe8>
    1850:	d1 01       	movw	r26, r2
    1852:	8c 91       	ld	r24, X
    1854:	88 23       	and	r24, r24
    1856:	61 f0       	breq	.+24     	; 0x1870 <USB_ProcessHIDReport+0x688>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <USB_ProcessHIDReport+0x68e>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	0b c0       	rjmp	.+22     	; 0x1876 <USB_ProcessHIDReport+0x68e>
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <USB_ProcessHIDReport+0x68e>
    1864:	86 e0       	ldi	r24, 0x06	; 6
    1866:	07 c0       	rjmp	.+14     	; 0x1876 <USB_ProcessHIDReport+0x68e>
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <USB_ProcessHIDReport+0x68e>
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <USB_ProcessHIDReport+0x68e>
    1870:	88 e0       	ldi	r24, 0x08	; 8
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <USB_ProcessHIDReport+0x68e>
    1874:	87 e0       	ldi	r24, 0x07	; 7
    1876:	c4 57       	subi	r28, 0x74	; 116
    1878:	df 4f       	sbci	r29, 0xFF	; 255
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	bf 90       	pop	r11
    1896:	af 90       	pop	r10
    1898:	9f 90       	pop	r9
    189a:	8f 90       	pop	r8
    189c:	7f 90       	pop	r7
    189e:	6f 90       	pop	r6
    18a0:	5f 90       	pop	r5
    18a2:	4f 90       	pop	r4
    18a4:	3f 90       	pop	r3
    18a6:	2f 90       	pop	r2
    18a8:	08 95       	ret

000018aa <USB_GetHIDReportItemInfo>:
    18aa:	8f 92       	push	r8
    18ac:	9f 92       	push	r9
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	fb 01       	movw	r30, r22
    18bc:	30 97       	sbiw	r30, 0x00	; 0
    18be:	09 f4       	brne	.+2      	; 0x18c2 <USB_GetHIDReportItemInfo+0x18>
    18c0:	48 c0       	rjmp	.+144    	; 0x1952 <USB_GetHIDReportItemInfo+0xa8>
    18c2:	25 81       	ldd	r18, Z+5	; 0x05
    18c4:	22 23       	and	r18, r18
    18c6:	29 f0       	breq	.+10     	; 0x18d2 <USB_GetHIDReportItemInfo+0x28>
    18c8:	dc 01       	movw	r26, r24
    18ca:	3c 91       	ld	r19, X
    18cc:	23 13       	cpse	r18, r19
    18ce:	41 c0       	rjmp	.+130    	; 0x1952 <USB_GetHIDReportItemInfo+0xa8>
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	20 85       	ldd	r18, Z+8	; 0x08
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	c2 a0       	ldd	r12, Z+34	; 0x22
    18dc:	d3 a0       	ldd	r13, Z+35	; 0x23
    18de:	e4 a0       	ldd	r14, Z+36	; 0x24
    18e0:	f5 a0       	ldd	r15, Z+37	; 0x25
    18e2:	c6 a2       	std	Z+38, r12	; 0x26
    18e4:	d7 a2       	std	Z+39, r13	; 0x27
    18e6:	e0 a6       	std	Z+40, r14	; 0x28
    18e8:	f1 a6       	std	Z+41, r15	; 0x29
    18ea:	12 a2       	std	Z+34, r1	; 0x22
    18ec:	13 a2       	std	Z+35, r1	; 0x23
    18ee:	14 a2       	std	Z+36, r1	; 0x24
    18f0:	15 a2       	std	Z+37, r1	; 0x25
    18f2:	c1 2c       	mov	r12, r1
    18f4:	d1 2c       	mov	r13, r1
    18f6:	76 01       	movw	r14, r12
    18f8:	c3 94       	inc	r12
    18fa:	21 50       	subi	r18, 0x01	; 1
    18fc:	31 09       	sbc	r19, r1
    18fe:	38 f1       	brcs	.+78     	; 0x194e <USB_GetHIDReportItemInfo+0xa4>
    1900:	db 01       	movw	r26, r22
    1902:	53 e0       	ldi	r21, 0x03	; 3
    1904:	b6 95       	lsr	r27
    1906:	a7 95       	ror	r26
    1908:	5a 95       	dec	r21
    190a:	e1 f7       	brne	.-8      	; 0x1904 <USB_GetHIDReportItemInfo+0x5a>
    190c:	a8 0f       	add	r26, r24
    190e:	b9 1f       	adc	r27, r25
    1910:	4c 91       	ld	r20, X
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	db 01       	movw	r26, r22
    1916:	a7 70       	andi	r26, 0x07	; 7
    1918:	bb 27       	eor	r27, r27
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <USB_GetHIDReportItemInfo+0x76>
    191c:	55 95       	asr	r21
    191e:	47 95       	ror	r20
    1920:	aa 95       	dec	r26
    1922:	e2 f7       	brpl	.-8      	; 0x191c <USB_GetHIDReportItemInfo+0x72>
    1924:	40 ff       	sbrs	r20, 0
    1926:	0c c0       	rjmp	.+24     	; 0x1940 <USB_GetHIDReportItemInfo+0x96>
    1928:	82 a0       	ldd	r8, Z+34	; 0x22
    192a:	93 a0       	ldd	r9, Z+35	; 0x23
    192c:	a4 a0       	ldd	r10, Z+36	; 0x24
    192e:	b5 a0       	ldd	r11, Z+37	; 0x25
    1930:	8c 28       	or	r8, r12
    1932:	9d 28       	or	r9, r13
    1934:	ae 28       	or	r10, r14
    1936:	bf 28       	or	r11, r15
    1938:	82 a2       	std	Z+34, r8	; 0x22
    193a:	93 a2       	std	Z+35, r9	; 0x23
    193c:	a4 a2       	std	Z+36, r10	; 0x24
    193e:	b5 a2       	std	Z+37, r11	; 0x25
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	cc 0c       	add	r12, r12
    1946:	dd 1c       	adc	r13, r13
    1948:	ee 1c       	adc	r14, r14
    194a:	ff 1c       	adc	r15, r15
    194c:	d6 cf       	rjmp	.-84     	; 0x18fa <USB_GetHIDReportItemInfo+0x50>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <USB_GetHIDReportItemInfo+0xaa>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	bf 90       	pop	r11
    195e:	af 90       	pop	r10
    1960:	9f 90       	pop	r9
    1962:	8f 90       	pop	r8
    1964:	08 95       	ret

00001966 <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1966:	fc 01       	movw	r30, r24
    1968:	ea 5b       	subi	r30, 0xBA	; 186
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	44 0f       	add	r20, r20
    1970:	55 1f       	adc	r21, r21
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1972:	4f 56       	subi	r20, 0x6F	; 111
    1974:	5c 4f       	sbci	r21, 0xFC	; 252
    1976:	dc 01       	movw	r26, r24
    1978:	a4 0f       	add	r26, r20
    197a:	b5 1f       	adc	r27, r21
    197c:	2d 91       	ld	r18, X+
    197e:	3c 91       	ld	r19, X

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1980:	dc 01       	movw	r26, r24
    1982:	a0 57       	subi	r26, 0x70	; 112
    1984:	bc 4f       	sbci	r27, 0xFC	; 252
    1986:	7c 91       	ld	r23, X
    1988:	76 13       	cpse	r23, r22
    198a:	11 c0       	rjmp	.+34     	; 0x19ae <USB_GetHIDReportSize+0x48>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	47 70       	andi	r20, 0x07	; 7
    1994:	55 27       	eor	r21, r21
    1996:	45 2b       	or	r20, r21
    1998:	11 f4       	brne	.+4      	; 0x199e <USB_GetHIDReportSize+0x38>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	43 e0       	ldi	r20, 0x03	; 3
    19a0:	36 95       	lsr	r19
    19a2:	27 95       	ror	r18
    19a4:	4a 95       	dec	r20
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <USB_GetHIDReportSize+0x3a>
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	08 95       	ret
    19ae:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    19b0:	8e 17       	cp	r24, r30
    19b2:	9f 07       	cpc	r25, r31
    19b4:	01 f7       	brne	.-64     	; 0x1976 <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
}
    19ba:	08 95       	ret

000019bc <DCOMP_HID_Host_NextHIDInterface>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    19bc:	fc 01       	movw	r30, r24
    19be:	21 81       	ldd	r18, Z+1	; 0x01
    19c0:	24 30       	cpi	r18, 0x04	; 4
    19c2:	29 f4       	brne	.+10     	; 0x19ce <DCOMP_HID_Host_NextHIDInterface+0x12>
    19c4:	85 81       	ldd	r24, Z+5	; 0x05
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	11 f4       	brne	.+4      	; 0x19ce <DCOMP_HID_Host_NextHIDInterface+0x12>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	08 95       	ret
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	08 95       	ret

000019d2 <DCOMP_HID_Host_NextHIDDescriptor>:
    19d2:	fc 01       	movw	r30, r24
    19d4:	81 81       	ldd	r24, Z+1	; 0x01
    19d6:	81 32       	cpi	r24, 0x21	; 33
    19d8:	21 f0       	breq	.+8      	; 0x19e2 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	21 f0       	breq	.+8      	; 0x19e6 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	08 95       	ret
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	08 95       	ret
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	08 95       	ret

000019ea <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    19ea:	fc 01       	movw	r30, r24
    19ec:	21 81       	ldd	r18, Z+1	; 0x01
    19ee:	25 30       	cpi	r18, 0x05	; 5
    19f0:	31 f4       	brne	.+12     	; 0x19fe <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	4e d8       	rcall	.-3940   	; 0xa92 <Pipe_IsEndpointBound>
    19f6:	88 23       	and	r24, r24
    19f8:	31 f0       	breq	.+12     	; 0x1a06 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	08 95       	ret
    19fe:	24 30       	cpi	r18, 0x04	; 4
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	08 95       	ret
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	08 95       	ret

00001a0a <HID_Host_ConfigurePipes>:
    1a0a:	2f 92       	push	r2
    1a0c:	3f 92       	push	r3
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <HID_Host_ConfigurePipes+0x26>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <HID_Host_ConfigurePipes+0x28>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	7a 83       	std	Y+2, r23	; 0x02
    1a38:	69 83       	std	Y+1, r22	; 0x01
    1a3a:	5c 83       	std	Y+4, r21	; 0x04
    1a3c:	4b 83       	std	Y+3, r20	; 0x03
    1a3e:	fc 01       	movw	r30, r24
    1a40:	37 96       	adiw	r30, 0x07	; 7
    1a42:	2c e0       	ldi	r18, 0x0C	; 12
    1a44:	df 01       	movw	r26, r30
    1a46:	1d 92       	st	X+, r1
    1a48:	2a 95       	dec	r18
    1a4a:	e9 f7       	brne	.-6      	; 0x1a46 <HID_Host_ConfigurePipes+0x3c>
    1a4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a50:	11 81       	ldd	r17, Z+1	; 0x01
    1a52:	12 30       	cpi	r17, 0x02	; 2
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <HID_Host_ConfigurePipes+0x4e>
    1a56:	7e c0       	rjmp	.+252    	; 0x1b54 <HID_Host_ConfigurePipes+0x14a>
    1a58:	6c 01       	movw	r12, r24
    1a5a:	41 2c       	mov	r4, r1
    1a5c:	51 2c       	mov	r5, r1
    1a5e:	61 2c       	mov	r6, r1
    1a60:	71 2c       	mov	r7, r1
    1a62:	81 2c       	mov	r8, r1
    1a64:	91 2c       	mov	r9, r1
    1a66:	a1 2c       	mov	r10, r1
    1a68:	b1 2c       	mov	r11, r1
    1a6a:	a1 14       	cp	r10, r1
    1a6c:	b1 04       	cpc	r11, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <HID_Host_ConfigurePipes+0x68>
    1a70:	75 c0       	rjmp	.+234    	; 0x1b5c <HID_Host_ConfigurePipes+0x152>
    1a72:	81 14       	cp	r8, r1
    1a74:	91 04       	cpc	r9, r1
    1a76:	91 f4       	brne	.+36     	; 0x1a9c <HID_Host_ConfigurePipes+0x92>
    1a78:	61 14       	cp	r6, r1
    1a7a:	71 04       	cpc	r7, r1
    1a7c:	79 f0       	breq	.+30     	; 0x1a9c <HID_Host_ConfigurePipes+0x92>
    1a7e:	45 ef       	ldi	r20, 0xF5	; 245
    1a80:	5c e0       	ldi	r21, 0x0C	; 12
    1a82:	be 01       	movw	r22, r28
    1a84:	6d 5f       	subi	r22, 0xFD	; 253
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	29 da       	rcall	.-2990   	; 0xee0 <USB_GetNextDescriptorComp>
    1a8e:	88 23       	and	r24, r24
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <HID_Host_ConfigurePipes+0x8a>
    1a92:	90 c0       	rjmp	.+288    	; 0x1bb4 <HID_Host_ConfigurePipes+0x1aa>
    1a94:	a1 14       	cp	r10, r1
    1a96:	b1 04       	cpc	r11, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <HID_Host_ConfigurePipes+0x92>
    1a9a:	64 c0       	rjmp	.+200    	; 0x1b64 <HID_Host_ConfigurePipes+0x15a>
    1a9c:	ff 24       	eor	r15, r15
    1a9e:	f3 94       	inc	r15
    1aa0:	22 24       	eor	r2, r2
    1aa2:	23 94       	inc	r2
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8f 11       	cpse	r24, r15
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <HID_Host_ConfigurePipes+0xc0>
    1aac:	d5 01       	movw	r26, r10
    1aae:	14 96       	adiw	r26, 0x04	; 4
    1ab0:	0d 91       	ld	r16, X+
    1ab2:	1c 91       	ld	r17, X
    1ab4:	15 97       	sbiw	r26, 0x05	; 5
    1ab6:	12 96       	adiw	r26, 0x02	; 2
    1ab8:	2c 91       	ld	r18, X
    1aba:	12 97       	sbiw	r26, 0x02	; 2
    1abc:	81 81       	ldd	r24, Z+1	; 0x01
    1abe:	16 96       	adiw	r26, 0x06	; 6
    1ac0:	3c 90       	ld	r3, X
    1ac2:	12 87       	std	Z+10, r17	; 0x0a
    1ac4:	01 87       	std	Z+9, r16	; 0x09
    1ac6:	40 e1       	ldi	r20, 0x10	; 16
    1ac8:	16 c0       	rjmp	.+44     	; 0x1af6 <HID_Host_ConfigurePipes+0xec>
    1aca:	f6 01       	movw	r30, r12
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	8f 11       	cpse	r24, r15
    1ad0:	21 c0       	rjmp	.+66     	; 0x1b14 <HID_Host_ConfigurePipes+0x10a>
    1ad2:	81 14       	cp	r8, r1
    1ad4:	91 04       	cpc	r9, r1
    1ad6:	f1 f0       	breq	.+60     	; 0x1b14 <HID_Host_ConfigurePipes+0x10a>
    1ad8:	d4 01       	movw	r26, r8
    1ada:	14 96       	adiw	r26, 0x04	; 4
    1adc:	0d 91       	ld	r16, X+
    1ade:	1c 91       	ld	r17, X
    1ae0:	15 97       	sbiw	r26, 0x05	; 5
    1ae2:	12 96       	adiw	r26, 0x02	; 2
    1ae4:	2c 91       	ld	r18, X
    1ae6:	12 97       	sbiw	r26, 0x02	; 2
    1ae8:	83 81       	ldd	r24, Z+3	; 0x03
    1aea:	16 96       	adiw	r26, 0x06	; 6
    1aec:	3c 90       	ld	r3, X
    1aee:	14 87       	std	Z+12, r17	; 0x0c
    1af0:	03 87       	std	Z+11, r16	; 0x0b
    1af2:	26 86       	std	Z+14, r2	; 0x0e
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	81 11       	cpse	r24, r1
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <HID_Host_ConfigurePipes+0xf4>
    1afa:	e1 2c       	mov	r14, r1
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <HID_Host_ConfigurePipes+0xf8>
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	e8 2e       	mov	r14, r24
    1b02:	63 e0       	ldi	r22, 0x03	; 3
    1b04:	8f 2d       	mov	r24, r15
    1b06:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Pipe_ConfigurePipe>
    1b0a:	88 23       	and	r24, r24
    1b0c:	29 f1       	breq	.+74     	; 0x1b58 <HID_Host_ConfigurePipes+0x14e>
    1b0e:	31 10       	cpse	r3, r1
    1b10:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1b14:	f3 94       	inc	r15
    1b16:	b7 e0       	ldi	r27, 0x07	; 7
    1b18:	fb 12       	cpse	r15, r27
    1b1a:	c4 cf       	rjmp	.-120    	; 0x1aa4 <HID_Host_ConfigurePipes+0x9a>
    1b1c:	f3 01       	movw	r30, r6
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	d6 01       	movw	r26, r12
    1b22:	18 96       	adiw	r26, 0x08	; 8
    1b24:	8c 93       	st	X, r24
    1b26:	18 97       	sbiw	r26, 0x08	; 8
    1b28:	f2 01       	movw	r30, r4
    1b2a:	87 81       	ldd	r24, Z+7	; 0x07
    1b2c:	90 85       	ldd	r25, Z+8	; 0x08
    1b2e:	51 96       	adiw	r26, 0x11	; 17
    1b30:	9c 93       	st	X, r25
    1b32:	8e 93       	st	-X, r24
    1b34:	50 97       	sbiw	r26, 0x10	; 16
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	d3 01       	movw	r26, r6
    1b3a:	16 96       	adiw	r26, 0x06	; 6
    1b3c:	9c 91       	ld	r25, X
    1b3e:	91 11       	cpse	r25, r1
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <HID_Host_ConfigurePipes+0x13a>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	f6 01       	movw	r30, r12
    1b46:	85 87       	std	Z+13, r24	; 0x0d
    1b48:	88 e0       	ldi	r24, 0x08	; 8
    1b4a:	82 8b       	std	Z+18, r24	; 0x12
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	87 83       	std	Z+7, r24	; 0x07
    1b50:	10 e0       	ldi	r17, 0x00	; 0
    1b52:	3c c0       	rjmp	.+120    	; 0x1bcc <HID_Host_ConfigurePipes+0x1c2>
    1b54:	11 e0       	ldi	r17, 0x01	; 1
    1b56:	3a c0       	rjmp	.+116    	; 0x1bcc <HID_Host_ConfigurePipes+0x1c2>
    1b58:	13 e0       	ldi	r17, 0x03	; 3
    1b5a:	38 c0       	rjmp	.+112    	; 0x1bcc <HID_Host_ConfigurePipes+0x1c2>
    1b5c:	61 14       	cp	r6, r1
    1b5e:	71 04       	cpc	r7, r1
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <HID_Host_ConfigurePipes+0x15a>
    1b62:	8d cf       	rjmp	.-230    	; 0x1a7e <HID_Host_ConfigurePipes+0x74>
    1b64:	81 14       	cp	r8, r1
    1b66:	91 04       	cpc	r9, r1
    1b68:	71 f5       	brne	.+92     	; 0x1bc6 <HID_Host_ConfigurePipes+0x1bc>
    1b6a:	4e ed       	ldi	r20, 0xDE	; 222
    1b6c:	5c e0       	ldi	r21, 0x0C	; 12
    1b6e:	be 01       	movw	r22, r28
    1b70:	6d 5f       	subi	r22, 0xFD	; 253
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	b3 d9       	rcall	.-3226   	; 0xee0 <USB_GetNextDescriptorComp>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <HID_Host_ConfigurePipes+0x1c2>
    1b7e:	6b 80       	ldd	r6, Y+3	; 0x03
    1b80:	7c 80       	ldd	r7, Y+4	; 0x04
    1b82:	f6 01       	movw	r30, r12
    1b84:	84 81       	ldd	r24, Z+4	; 0x04
    1b86:	81 11       	cpse	r24, r1
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <HID_Host_ConfigurePipes+0x19e>
    1b8a:	49 ee       	ldi	r20, 0xE9	; 233
    1b8c:	5c e0       	ldi	r21, 0x0C	; 12
    1b8e:	be 01       	movw	r22, r28
    1b90:	6d 5f       	subi	r22, 0xFD	; 253
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	a3 d9       	rcall	.-3258   	; 0xee0 <USB_GetNextDescriptorComp>
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	17 c0       	rjmp	.+46     	; 0x1bcc <HID_Host_ConfigurePipes+0x1c2>
    1b9e:	4b 80       	ldd	r4, Y+3	; 0x03
    1ba0:	5c 80       	ldd	r5, Y+4	; 0x04
    1ba2:	e0 e0       	ldi	r30, 0x00	; 0
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <HID_Host_ConfigurePipes+0x1b8>
    1ba8:	d3 01       	movw	r26, r6
    1baa:	17 96       	adiw	r26, 0x07	; 7
    1bac:	9c 91       	ld	r25, X
    1bae:	89 13       	cpse	r24, r25
    1bb0:	dc cf       	rjmp	.-72     	; 0x1b6a <HID_Host_ConfigurePipes+0x160>
    1bb2:	eb cf       	rjmp	.-42     	; 0x1b8a <HID_Host_ConfigurePipes+0x180>
    1bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	87 fd       	sbrc	r24, 7
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <HID_Host_ConfigurePipes+0x1b8>
    1bbe:	4f 01       	movw	r8, r30
    1bc0:	f5 01       	movw	r30, r10
    1bc2:	5f 01       	movw	r10, r30
    1bc4:	52 cf       	rjmp	.-348    	; 0x1a6a <HID_Host_ConfigurePipes+0x60>
    1bc6:	a1 2c       	mov	r10, r1
    1bc8:	b1 2c       	mov	r11, r1
    1bca:	68 cf       	rjmp	.-304    	; 0x1a9c <HID_Host_ConfigurePipes+0x92>
    1bcc:	81 2f       	mov	r24, r17
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	5f 90       	pop	r5
    1bf4:	4f 90       	pop	r4
    1bf6:	3f 90       	pop	r3
    1bf8:	2f 90       	pop	r2
    1bfa:	08 95       	ret

00001bfc <HID_Host_ReceiveReport>:
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	fc 01       	movw	r30, r24
    1c02:	eb 01       	movw	r28, r22
    1c04:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
    1c08:	8b 30       	cpi	r24, 0x0B	; 11
    1c0a:	b9 f5       	brne	.+110    	; 0x1c7a <HID_Host_ReceiveReport+0x7e>
    1c0c:	87 81       	ldd	r24, Z+7	; 0x07
    1c0e:	88 23       	and	r24, r24
    1c10:	a1 f1       	breq	.+104    	; 0x1c7a <HID_Host_ReceiveReport+0x7e>
    1c12:	80 81       	ld	r24, Z
    1c14:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1c18:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c1c:	8f 7b       	andi	r24, 0xBF	; 191
    1c1e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c22:	87 85       	ldd	r24, Z+15	; 0x0f
    1c24:	81 11       	cpse	r24, r1
    1c26:	12 c0       	rjmp	.+36     	; 0x1c4c <HID_Host_ReceiveReport+0x50>
    1c28:	a5 81       	ldd	r26, Z+5	; 0x05
    1c2a:	b6 81       	ldd	r27, Z+6	; 0x06
    1c2c:	a8 52       	subi	r26, 0x28	; 40
    1c2e:	bc 4f       	sbci	r27, 0xFC	; 252
    1c30:	8c 91       	ld	r24, X
    1c32:	88 23       	and	r24, r24
    1c34:	29 f0       	breq	.+10     	; 0x1c40 <HID_Host_ReceiveReport+0x44>
    1c36:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1c3a:	68 83       	st	Y, r22
    1c3c:	21 96       	adiw	r28, 0x01	; 1
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <HID_Host_ReceiveReport+0x46>
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	85 81       	ldd	r24, Z+5	; 0x05
    1c46:	96 81       	ldd	r25, Z+6	; 0x06
    1c48:	8e de       	rcall	.-740    	; 0x1966 <USB_GetHIDReportSize>
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <HID_Host_ReceiveReport+0x58>
    1c4c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1c50:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	bc 01       	movw	r22, r24
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	7b d8       	rcall	.-3850   	; 0xd54 <Pipe_Read_Stream_LE>
    1c5e:	81 11       	cpse	r24, r1
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <HID_Host_ReceiveReport+0x80>
    1c62:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c66:	8e 77       	andi	r24, 0x7E	; 126
    1c68:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c6c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <HID_Host_ReceiveReport+0x80>
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <HID_Host_IsReportReceived>:
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
    1c88:	8b 30       	cpi	r24, 0x0B	; 11
    1c8a:	a1 f4       	brne	.+40     	; 0x1cb4 <HID_Host_IsReportReceived+0x32>
    1c8c:	87 81       	ldd	r24, Z+7	; 0x07
    1c8e:	88 23       	and	r24, r24
    1c90:	91 f0       	breq	.+36     	; 0x1cb6 <HID_Host_IsReportReceived+0x34>
    1c92:	80 81       	ld	r24, Z
    1c94:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1c98:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c9c:	8f 7b       	andi	r24, 0xBF	; 191
    1c9e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1ca2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1ca6:	81 70       	andi	r24, 0x01	; 1
    1ca8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1cac:	90 64       	ori	r25, 0x40	; 64
    1cae:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1cb2:	08 95       	ret
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	08 95       	ret

00001cb8 <HID_Host_SetReportProtocol>:
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1cce:	ed b6       	in	r14, 0x3d	; 61
    1cd0:	fe b6       	in	r15, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	50 96       	adiw	r26, 0x10	; 16
    1cd6:	2d 91       	ld	r18, X+
    1cd8:	3c 91       	ld	r19, X
    1cda:	51 97       	sbiw	r26, 0x11	; 17
    1cdc:	ed b7       	in	r30, 0x3d	; 61
    1cde:	fe b7       	in	r31, 0x3e	; 62
    1ce0:	e2 1b       	sub	r30, r18
    1ce2:	f3 0b       	sbc	r31, r19
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	fe bf       	out	0x3e, r31	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	ed bf       	out	0x3d, r30	; 61
    1cee:	8d b7       	in	r24, 0x3d	; 61
    1cf0:	9e b7       	in	r25, 0x3e	; 62
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	6c 01       	movw	r12, r24

	USB_ControlRequest = (USB_Request_Header_t)
    1cf6:	18 96       	adiw	r26, 0x08	; 8
    1cf8:	8c 91       	ld	r24, X
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	41 e8       	ldi	r20, 0x81	; 129
    1cfe:	40 93 02 05 	sts	0x0502, r20	; 0x800502 <USB_ControlRequest>
    1d02:	46 e0       	ldi	r20, 0x06	; 6
    1d04:	40 93 03 05 	sts	0x0503, r20	; 0x800503 <USB_ControlRequest+0x1>
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	52 e2       	ldi	r21, 0x22	; 34
    1d0c:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <USB_ControlRequest+0x3>
    1d10:	40 93 04 05 	sts	0x0504, r20	; 0x800504 <USB_ControlRequest+0x2>
    1d14:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <USB_ControlRequest+0x5>
    1d18:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_ControlRequest+0x4>
    1d1c:	30 93 09 05 	sts	0x0509, r19	; 0x800509 <USB_ControlRequest+0x7>
    1d20:	20 93 08 05 	sts	0x0508, r18	; 0x800508 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1d24:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1d28:	c6 01       	movw	r24, r12
    1d2a:	33 d9       	rcall	.-3482   	; 0xf92 <USB_Host_SendControlRequest>
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	51 c0       	rjmp	.+162    	; 0x1dd2 <HID_Host_SetReportProtocol+0x11a>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1d30:	d8 01       	movw	r26, r16
    1d32:	1f 96       	adiw	r26, 0x0f	; 15
    1d34:	8c 91       	ld	r24, X
    1d36:	1f 97       	sbiw	r26, 0x0f	; 15
    1d38:	88 23       	and	r24, r24
    1d3a:	f1 f0       	breq	.+60     	; 0x1d78 <HID_Host_SetReportProtocol+0xc0>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1d3c:	18 96       	adiw	r26, 0x08	; 8
    1d3e:	8c 91       	ld	r24, X
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	21 e2       	ldi	r18, 0x21	; 33
    1d44:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <USB_ControlRequest>
    1d48:	2b e0       	ldi	r18, 0x0B	; 11
    1d4a:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <USB_ControlRequest+0x1>
    1d4e:	21 e0       	ldi	r18, 0x01	; 1
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <USB_ControlRequest+0x3>
    1d56:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <USB_ControlRequest+0x2>
    1d5a:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <USB_ControlRequest+0x5>
    1d5e:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_ControlRequest+0x4>
    1d62:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <USB_ControlRequest+0x7>
    1d66:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_ControlRequest+0x6>
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	11 d9       	rcall	.-3550   	; 0xf92 <USB_Host_SendControlRequest>
    1d70:	81 11       	cpse	r24, r1
    1d72:	2f c0       	rjmp	.+94     	; 0x1dd2 <HID_Host_SetReportProtocol+0x11a>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1d74:	f8 01       	movw	r30, r16
    1d76:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1d78:	d8 01       	movw	r26, r16
    1d7a:	15 96       	adiw	r26, 0x05	; 5
    1d7c:	4d 91       	ld	r20, X+
    1d7e:	5c 91       	ld	r21, X
    1d80:	16 97       	sbiw	r26, 0x06	; 6
    1d82:	41 15       	cp	r20, r1
    1d84:	51 05       	cpc	r21, r1
    1d86:	21 f1       	breq	.+72     	; 0x1dd0 <HID_Host_SetReportProtocol+0x118>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1d88:	50 96       	adiw	r26, 0x10	; 16
    1d8a:	6d 91       	ld	r22, X+
    1d8c:	7c 91       	ld	r23, X
    1d8e:	51 97       	sbiw	r26, 0x11	; 17
    1d90:	c6 01       	movw	r24, r12
    1d92:	2a da       	rcall	.-2988   	; 0x11e8 <USB_ProcessHIDReport>
    1d94:	88 23       	and	r24, r24
    1d96:	11 f0       	breq	.+4      	; 0x1d9c <HID_Host_SetReportProtocol+0xe4>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1d98:	80 68       	ori	r24, 0x80	; 128
    1d9a:	1b c0       	rjmp	.+54     	; 0x1dd2 <HID_Host_SetReportProtocol+0x11a>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1d9c:	d8 01       	movw	r26, r16
    1d9e:	15 96       	adiw	r26, 0x05	; 5
    1da0:	ed 91       	ld	r30, X+
    1da2:	fc 91       	ld	r31, X
    1da4:	16 97       	sbiw	r26, 0x06	; 6
    1da6:	ea 52       	subi	r30, 0x2A	; 42
    1da8:	fc 4f       	sbci	r31, 0xFC	; 252
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1dae:	ac 01       	movw	r20, r24
    1db0:	47 70       	andi	r20, 0x07	; 7
    1db2:	55 27       	eor	r21, r21
    1db4:	21 e0       	ldi	r18, 0x01	; 1
    1db6:	45 2b       	or	r20, r21
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <HID_Host_SetReportProtocol+0x104>
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	33 e0       	ldi	r19, 0x03	; 3
    1dbe:	96 95       	lsr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	3a 95       	dec	r19
    1dc4:	e1 f7       	brne	.-8      	; 0x1dbe <HID_Host_SetReportProtocol+0x106>
    1dc6:	82 0f       	add	r24, r18
    1dc8:	f8 01       	movw	r30, r16
    1dca:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <HID_Host_SetReportProtocol+0x11a>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1dd0:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	fe be       	out	0x3e, r15	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	ed be       	out	0x3d, r14	; 61
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	08 95       	ret

00001dee <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1dee:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1df2:	95 ff       	sbrs	r25, 5
    1df4:	fc cf       	rjmp	.-8      	; 0x1dee <Serial_putchar>
				UDR1 = DataByte;
    1df6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	08 95       	ret

00001e00 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e00:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e04:	87 ff       	sbrs	r24, 7
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <Serial_getchar+0x18>
    1e08:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e0c:	87 ff       	sbrs	r24, 7
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1e10:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	08 95       	ret
	  return _FDEV_EOF;
    1e18:	8e ef       	ldi	r24, 0xFE	; 254
    1e1a:	9f ef       	ldi	r25, 0xFF	; 255
    1e1c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e1e:	8f ef       	ldi	r24, 0xFF	; 255
    1e20:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e22:	08 95       	ret

00001e24 <__tablejump2__>:
    1e24:	ee 0f       	add	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	00 24       	eor	r0, r0
    1e2a:	00 1c       	adc	r0, r0
    1e2c:	0b be       	out	0x3b, r0	; 59
    1e2e:	07 90       	elpm	r0, Z+
    1e30:	f6 91       	elpm	r31, Z
    1e32:	e0 2d       	mov	r30, r0
    1e34:	09 94       	ijmp

00001e36 <printf_P>:
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	ae 01       	movw	r20, r28
    1e44:	49 5f       	subi	r20, 0xF9	; 249
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	da 01       	movw	r26, r20
    1e4a:	6d 91       	ld	r22, X+
    1e4c:	7d 91       	ld	r23, X+
    1e4e:	ad 01       	movw	r20, r26
    1e50:	09 e1       	ldi	r16, 0x19	; 25
    1e52:	15 e0       	ldi	r17, 0x05	; 5
    1e54:	f8 01       	movw	r30, r16
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	13 96       	adiw	r26, 0x03	; 3
    1e5e:	2c 91       	ld	r18, X
    1e60:	13 97       	sbiw	r26, 0x03	; 3
    1e62:	28 60       	ori	r18, 0x08	; 8
    1e64:	13 96       	adiw	r26, 0x03	; 3
    1e66:	2c 93       	st	X, r18
    1e68:	3e d0       	rcall	.+124    	; 0x1ee6 <vfprintf>
    1e6a:	d8 01       	movw	r26, r16
    1e6c:	12 96       	adiw	r26, 0x02	; 2
    1e6e:	ed 91       	ld	r30, X+
    1e70:	fc 91       	ld	r31, X
    1e72:	13 97       	sbiw	r26, 0x03	; 3
    1e74:	23 81       	ldd	r18, Z+3	; 0x03
    1e76:	27 7f       	andi	r18, 0xF7	; 247
    1e78:	23 83       	std	Z+3, r18	; 0x03
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <puts_P>:
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	8c 01       	movw	r16, r24
    1e8e:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <__iob+0x2>
    1e92:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <__iob+0x3>
    1e96:	83 81       	ldd	r24, Z+3	; 0x03
    1e98:	81 ff       	sbrs	r24, 1
    1e9a:	1b c0       	rjmp	.+54     	; 0x1ed2 <puts_P+0x4e>
    1e9c:	d0 e0       	ldi	r29, 0x00	; 0
    1e9e:	c0 e0       	ldi	r28, 0x00	; 0
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	84 91       	lpm	r24, Z
    1ea4:	60 91 1b 05 	lds	r22, 0x051B	; 0x80051b <__iob+0x2>
    1ea8:	70 91 1c 05 	lds	r23, 0x051C	; 0x80051c <__iob+0x3>
    1eac:	db 01       	movw	r26, r22
    1eae:	18 96       	adiw	r26, 0x08	; 8
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
    1eb4:	19 97       	sbiw	r26, 0x09	; 9
    1eb6:	88 23       	and	r24, r24
    1eb8:	41 f0       	breq	.+16     	; 0x1eca <puts_P+0x46>
    1eba:	09 95       	icall
    1ebc:	89 2b       	or	r24, r25
    1ebe:	11 f0       	breq	.+4      	; 0x1ec4 <puts_P+0x40>
    1ec0:	df ef       	ldi	r29, 0xFF	; 255
    1ec2:	cf ef       	ldi	r28, 0xFF	; 255
    1ec4:	0f 5f       	subi	r16, 0xFF	; 255
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	eb cf       	rjmp	.-42     	; 0x1ea0 <puts_P+0x1c>
    1eca:	8a e0       	ldi	r24, 0x0A	; 10
    1ecc:	09 95       	icall
    1ece:	89 2b       	or	r24, r25
    1ed0:	19 f0       	breq	.+6      	; 0x1ed8 <puts_P+0x54>
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	9f ef       	ldi	r25, 0xFF	; 255
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <puts_P+0x58>
    1ed8:	8d 2f       	mov	r24, r29
    1eda:	9c 2f       	mov	r25, r28
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <vfprintf>:
    1ee6:	2f 92       	push	r2
    1ee8:	3f 92       	push	r3
    1eea:	4f 92       	push	r4
    1eec:	5f 92       	push	r5
    1eee:	6f 92       	push	r6
    1ef0:	7f 92       	push	r7
    1ef2:	8f 92       	push	r8
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	2b 97       	sbiw	r28, 0x0b	; 11
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	6c 01       	movw	r12, r24
    1f1c:	7b 01       	movw	r14, r22
    1f1e:	8a 01       	movw	r16, r20
    1f20:	fc 01       	movw	r30, r24
    1f22:	17 82       	std	Z+7, r1	; 0x07
    1f24:	16 82       	std	Z+6, r1	; 0x06
    1f26:	83 81       	ldd	r24, Z+3	; 0x03
    1f28:	81 ff       	sbrs	r24, 1
    1f2a:	bf c1       	rjmp	.+894    	; 0x22aa <__stack+0x1ab>
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	3c 01       	movw	r6, r24
    1f32:	f6 01       	movw	r30, r12
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	f7 01       	movw	r30, r14
    1f38:	93 fd       	sbrc	r25, 3
    1f3a:	85 91       	lpm	r24, Z+
    1f3c:	93 ff       	sbrs	r25, 3
    1f3e:	81 91       	ld	r24, Z+
    1f40:	7f 01       	movw	r14, r30
    1f42:	88 23       	and	r24, r24
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <vfprintf+0x62>
    1f46:	ad c1       	rjmp	.+858    	; 0x22a2 <__stack+0x1a3>
    1f48:	85 32       	cpi	r24, 0x25	; 37
    1f4a:	39 f4       	brne	.+14     	; 0x1f5a <vfprintf+0x74>
    1f4c:	93 fd       	sbrc	r25, 3
    1f4e:	85 91       	lpm	r24, Z+
    1f50:	93 ff       	sbrs	r25, 3
    1f52:	81 91       	ld	r24, Z+
    1f54:	7f 01       	movw	r14, r30
    1f56:	85 32       	cpi	r24, 0x25	; 37
    1f58:	21 f4       	brne	.+8      	; 0x1f62 <vfprintf+0x7c>
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	d6 d1       	rcall	.+940    	; 0x230c <fputc>
    1f60:	e8 cf       	rjmp	.-48     	; 0x1f32 <vfprintf+0x4c>
    1f62:	91 2c       	mov	r9, r1
    1f64:	21 2c       	mov	r2, r1
    1f66:	31 2c       	mov	r3, r1
    1f68:	ff e1       	ldi	r31, 0x1F	; 31
    1f6a:	f3 15       	cp	r31, r3
    1f6c:	d8 f0       	brcs	.+54     	; 0x1fa4 <vfprintf+0xbe>
    1f6e:	8b 32       	cpi	r24, 0x2B	; 43
    1f70:	79 f0       	breq	.+30     	; 0x1f90 <vfprintf+0xaa>
    1f72:	38 f4       	brcc	.+14     	; 0x1f82 <vfprintf+0x9c>
    1f74:	80 32       	cpi	r24, 0x20	; 32
    1f76:	79 f0       	breq	.+30     	; 0x1f96 <vfprintf+0xb0>
    1f78:	83 32       	cpi	r24, 0x23	; 35
    1f7a:	a1 f4       	brne	.+40     	; 0x1fa4 <vfprintf+0xbe>
    1f7c:	23 2d       	mov	r18, r3
    1f7e:	20 61       	ori	r18, 0x10	; 16
    1f80:	1d c0       	rjmp	.+58     	; 0x1fbc <vfprintf+0xd6>
    1f82:	8d 32       	cpi	r24, 0x2D	; 45
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <vfprintf+0xb8>
    1f86:	80 33       	cpi	r24, 0x30	; 48
    1f88:	69 f4       	brne	.+26     	; 0x1fa4 <vfprintf+0xbe>
    1f8a:	23 2d       	mov	r18, r3
    1f8c:	21 60       	ori	r18, 0x01	; 1
    1f8e:	16 c0       	rjmp	.+44     	; 0x1fbc <vfprintf+0xd6>
    1f90:	83 2d       	mov	r24, r3
    1f92:	82 60       	ori	r24, 0x02	; 2
    1f94:	38 2e       	mov	r3, r24
    1f96:	e3 2d       	mov	r30, r3
    1f98:	e4 60       	ori	r30, 0x04	; 4
    1f9a:	3e 2e       	mov	r3, r30
    1f9c:	2a c0       	rjmp	.+84     	; 0x1ff2 <vfprintf+0x10c>
    1f9e:	f3 2d       	mov	r31, r3
    1fa0:	f8 60       	ori	r31, 0x08	; 8
    1fa2:	1d c0       	rjmp	.+58     	; 0x1fde <vfprintf+0xf8>
    1fa4:	37 fc       	sbrc	r3, 7
    1fa6:	2d c0       	rjmp	.+90     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1fa8:	20 ed       	ldi	r18, 0xD0	; 208
    1faa:	28 0f       	add	r18, r24
    1fac:	2a 30       	cpi	r18, 0x0A	; 10
    1fae:	40 f0       	brcs	.+16     	; 0x1fc0 <vfprintf+0xda>
    1fb0:	8e 32       	cpi	r24, 0x2E	; 46
    1fb2:	b9 f4       	brne	.+46     	; 0x1fe2 <vfprintf+0xfc>
    1fb4:	36 fc       	sbrc	r3, 6
    1fb6:	75 c1       	rjmp	.+746    	; 0x22a2 <__stack+0x1a3>
    1fb8:	23 2d       	mov	r18, r3
    1fba:	20 64       	ori	r18, 0x40	; 64
    1fbc:	32 2e       	mov	r3, r18
    1fbe:	19 c0       	rjmp	.+50     	; 0x1ff2 <vfprintf+0x10c>
    1fc0:	36 fe       	sbrs	r3, 6
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <vfprintf+0xea>
    1fc4:	8a e0       	ldi	r24, 0x0A	; 10
    1fc6:	98 9e       	mul	r9, r24
    1fc8:	20 0d       	add	r18, r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	92 2e       	mov	r9, r18
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <vfprintf+0x10c>
    1fd0:	ea e0       	ldi	r30, 0x0A	; 10
    1fd2:	2e 9e       	mul	r2, r30
    1fd4:	20 0d       	add	r18, r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	22 2e       	mov	r2, r18
    1fda:	f3 2d       	mov	r31, r3
    1fdc:	f0 62       	ori	r31, 0x20	; 32
    1fde:	3f 2e       	mov	r3, r31
    1fe0:	08 c0       	rjmp	.+16     	; 0x1ff2 <vfprintf+0x10c>
    1fe2:	8c 36       	cpi	r24, 0x6C	; 108
    1fe4:	21 f4       	brne	.+8      	; 0x1fee <vfprintf+0x108>
    1fe6:	83 2d       	mov	r24, r3
    1fe8:	80 68       	ori	r24, 0x80	; 128
    1fea:	38 2e       	mov	r3, r24
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <vfprintf+0x10c>
    1fee:	88 36       	cpi	r24, 0x68	; 104
    1ff0:	41 f4       	brne	.+16     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1ff2:	f7 01       	movw	r30, r14
    1ff4:	93 fd       	sbrc	r25, 3
    1ff6:	85 91       	lpm	r24, Z+
    1ff8:	93 ff       	sbrs	r25, 3
    1ffa:	81 91       	ld	r24, Z+
    1ffc:	7f 01       	movw	r14, r30
    1ffe:	81 11       	cpse	r24, r1
    2000:	b3 cf       	rjmp	.-154    	; 0x1f68 <vfprintf+0x82>
    2002:	98 2f       	mov	r25, r24
    2004:	9f 7d       	andi	r25, 0xDF	; 223
    2006:	95 54       	subi	r25, 0x45	; 69
    2008:	93 30       	cpi	r25, 0x03	; 3
    200a:	28 f4       	brcc	.+10     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    200c:	0c 5f       	subi	r16, 0xFC	; 252
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	9f e3       	ldi	r25, 0x3F	; 63
    2012:	99 83       	std	Y+1, r25	; 0x01
    2014:	0d c0       	rjmp	.+26     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    2016:	83 36       	cpi	r24, 0x63	; 99
    2018:	31 f0       	breq	.+12     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    201a:	83 37       	cpi	r24, 0x73	; 115
    201c:	71 f0       	breq	.+28     	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    201e:	83 35       	cpi	r24, 0x53	; 83
    2020:	09 f0       	breq	.+2      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    2022:	55 c0       	rjmp	.+170    	; 0x20ce <__DATA_REGION_LENGTH__+0xce>
    2024:	20 c0       	rjmp	.+64     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2026:	f8 01       	movw	r30, r16
    2028:	80 81       	ld	r24, Z
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	0e 5f       	subi	r16, 0xFE	; 254
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	88 24       	eor	r8, r8
    2032:	83 94       	inc	r8
    2034:	91 2c       	mov	r9, r1
    2036:	53 01       	movw	r10, r6
    2038:	12 c0       	rjmp	.+36     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    203a:	28 01       	movw	r4, r16
    203c:	f2 e0       	ldi	r31, 0x02	; 2
    203e:	4f 0e       	add	r4, r31
    2040:	51 1c       	adc	r5, r1
    2042:	f8 01       	movw	r30, r16
    2044:	a0 80       	ld	r10, Z
    2046:	b1 80       	ldd	r11, Z+1	; 0x01
    2048:	36 fe       	sbrs	r3, 6
    204a:	03 c0       	rjmp	.+6      	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    204c:	69 2d       	mov	r22, r9
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2052:	6f ef       	ldi	r22, 0xFF	; 255
    2054:	7f ef       	ldi	r23, 0xFF	; 255
    2056:	c5 01       	movw	r24, r10
    2058:	4e d1       	rcall	.+668    	; 0x22f6 <strnlen>
    205a:	4c 01       	movw	r8, r24
    205c:	82 01       	movw	r16, r4
    205e:	f3 2d       	mov	r31, r3
    2060:	ff 77       	andi	r31, 0x7F	; 127
    2062:	3f 2e       	mov	r3, r31
    2064:	15 c0       	rjmp	.+42     	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    2066:	28 01       	movw	r4, r16
    2068:	22 e0       	ldi	r18, 0x02	; 2
    206a:	42 0e       	add	r4, r18
    206c:	51 1c       	adc	r5, r1
    206e:	f8 01       	movw	r30, r16
    2070:	a0 80       	ld	r10, Z
    2072:	b1 80       	ldd	r11, Z+1	; 0x01
    2074:	36 fe       	sbrs	r3, 6
    2076:	03 c0       	rjmp	.+6      	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
    2078:	69 2d       	mov	r22, r9
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    207e:	6f ef       	ldi	r22, 0xFF	; 255
    2080:	7f ef       	ldi	r23, 0xFF	; 255
    2082:	c5 01       	movw	r24, r10
    2084:	2d d1       	rcall	.+602    	; 0x22e0 <strnlen_P>
    2086:	4c 01       	movw	r8, r24
    2088:	f3 2d       	mov	r31, r3
    208a:	f0 68       	ori	r31, 0x80	; 128
    208c:	3f 2e       	mov	r3, r31
    208e:	82 01       	movw	r16, r4
    2090:	33 fc       	sbrc	r3, 3
    2092:	19 c0       	rjmp	.+50     	; 0x20c6 <__DATA_REGION_LENGTH__+0xc6>
    2094:	82 2d       	mov	r24, r2
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	88 16       	cp	r8, r24
    209a:	99 06       	cpc	r9, r25
    209c:	a0 f4       	brcc	.+40     	; 0x20c6 <__DATA_REGION_LENGTH__+0xc6>
    209e:	b6 01       	movw	r22, r12
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	33 d1       	rcall	.+614    	; 0x230c <fputc>
    20a6:	2a 94       	dec	r2
    20a8:	f5 cf       	rjmp	.-22     	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    20aa:	f5 01       	movw	r30, r10
    20ac:	37 fc       	sbrc	r3, 7
    20ae:	85 91       	lpm	r24, Z+
    20b0:	37 fe       	sbrs	r3, 7
    20b2:	81 91       	ld	r24, Z+
    20b4:	5f 01       	movw	r10, r30
    20b6:	b6 01       	movw	r22, r12
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	28 d1       	rcall	.+592    	; 0x230c <fputc>
    20bc:	21 10       	cpse	r2, r1
    20be:	2a 94       	dec	r2
    20c0:	21 e0       	ldi	r18, 0x01	; 1
    20c2:	82 1a       	sub	r8, r18
    20c4:	91 08       	sbc	r9, r1
    20c6:	81 14       	cp	r8, r1
    20c8:	91 04       	cpc	r9, r1
    20ca:	79 f7       	brne	.-34     	; 0x20aa <__DATA_REGION_LENGTH__+0xaa>
    20cc:	e1 c0       	rjmp	.+450    	; 0x2290 <__stack+0x191>
    20ce:	84 36       	cpi	r24, 0x64	; 100
    20d0:	11 f0       	breq	.+4      	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
    20d2:	89 36       	cpi	r24, 0x69	; 105
    20d4:	39 f5       	brne	.+78     	; 0x2124 <__stack+0x25>
    20d6:	f8 01       	movw	r30, r16
    20d8:	37 fe       	sbrs	r3, 7
    20da:	07 c0       	rjmp	.+14     	; 0x20ea <__DATA_REGION_LENGTH__+0xea>
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	0c 5f       	subi	r16, 0xFC	; 252
    20e6:	1f 4f       	sbci	r17, 0xFF	; 255
    20e8:	08 c0       	rjmp	.+16     	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	07 2e       	mov	r0, r23
    20f0:	00 0c       	add	r0, r0
    20f2:	88 0b       	sbc	r24, r24
    20f4:	99 0b       	sbc	r25, r25
    20f6:	0e 5f       	subi	r16, 0xFE	; 254
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	f3 2d       	mov	r31, r3
    20fc:	ff 76       	andi	r31, 0x6F	; 111
    20fe:	3f 2e       	mov	r3, r31
    2100:	97 ff       	sbrs	r25, 7
    2102:	09 c0       	rjmp	.+18     	; 0x2116 <__stack+0x17>
    2104:	90 95       	com	r25
    2106:	80 95       	com	r24
    2108:	70 95       	com	r23
    210a:	61 95       	neg	r22
    210c:	7f 4f       	sbci	r23, 0xFF	; 255
    210e:	8f 4f       	sbci	r24, 0xFF	; 255
    2110:	9f 4f       	sbci	r25, 0xFF	; 255
    2112:	f0 68       	ori	r31, 0x80	; 128
    2114:	3f 2e       	mov	r3, r31
    2116:	2a e0       	ldi	r18, 0x0A	; 10
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	a3 01       	movw	r20, r6
    211c:	33 d1       	rcall	.+614    	; 0x2384 <__ultoa_invert>
    211e:	88 2e       	mov	r8, r24
    2120:	86 18       	sub	r8, r6
    2122:	44 c0       	rjmp	.+136    	; 0x21ac <__stack+0xad>
    2124:	85 37       	cpi	r24, 0x75	; 117
    2126:	31 f4       	brne	.+12     	; 0x2134 <__stack+0x35>
    2128:	23 2d       	mov	r18, r3
    212a:	2f 7e       	andi	r18, 0xEF	; 239
    212c:	b2 2e       	mov	r11, r18
    212e:	2a e0       	ldi	r18, 0x0A	; 10
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	25 c0       	rjmp	.+74     	; 0x217e <__stack+0x7f>
    2134:	93 2d       	mov	r25, r3
    2136:	99 7f       	andi	r25, 0xF9	; 249
    2138:	b9 2e       	mov	r11, r25
    213a:	8f 36       	cpi	r24, 0x6F	; 111
    213c:	c1 f0       	breq	.+48     	; 0x216e <__stack+0x6f>
    213e:	18 f4       	brcc	.+6      	; 0x2146 <__stack+0x47>
    2140:	88 35       	cpi	r24, 0x58	; 88
    2142:	79 f0       	breq	.+30     	; 0x2162 <__stack+0x63>
    2144:	ae c0       	rjmp	.+348    	; 0x22a2 <__stack+0x1a3>
    2146:	80 37       	cpi	r24, 0x70	; 112
    2148:	19 f0       	breq	.+6      	; 0x2150 <__stack+0x51>
    214a:	88 37       	cpi	r24, 0x78	; 120
    214c:	21 f0       	breq	.+8      	; 0x2156 <__stack+0x57>
    214e:	a9 c0       	rjmp	.+338    	; 0x22a2 <__stack+0x1a3>
    2150:	e9 2f       	mov	r30, r25
    2152:	e0 61       	ori	r30, 0x10	; 16
    2154:	be 2e       	mov	r11, r30
    2156:	b4 fe       	sbrs	r11, 4
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <__stack+0x75>
    215a:	fb 2d       	mov	r31, r11
    215c:	f4 60       	ori	r31, 0x04	; 4
    215e:	bf 2e       	mov	r11, r31
    2160:	09 c0       	rjmp	.+18     	; 0x2174 <__stack+0x75>
    2162:	34 fe       	sbrs	r3, 4
    2164:	0a c0       	rjmp	.+20     	; 0x217a <__stack+0x7b>
    2166:	29 2f       	mov	r18, r25
    2168:	26 60       	ori	r18, 0x06	; 6
    216a:	b2 2e       	mov	r11, r18
    216c:	06 c0       	rjmp	.+12     	; 0x217a <__stack+0x7b>
    216e:	28 e0       	ldi	r18, 0x08	; 8
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	05 c0       	rjmp	.+10     	; 0x217e <__stack+0x7f>
    2174:	20 e1       	ldi	r18, 0x10	; 16
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	02 c0       	rjmp	.+4      	; 0x217e <__stack+0x7f>
    217a:	20 e1       	ldi	r18, 0x10	; 16
    217c:	32 e0       	ldi	r19, 0x02	; 2
    217e:	f8 01       	movw	r30, r16
    2180:	b7 fe       	sbrs	r11, 7
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <__stack+0x93>
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	0c 5f       	subi	r16, 0xFC	; 252
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	06 c0       	rjmp	.+12     	; 0x219e <__stack+0x9f>
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 5f       	subi	r16, 0xFE	; 254
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	a3 01       	movw	r20, r6
    21a0:	f1 d0       	rcall	.+482    	; 0x2384 <__ultoa_invert>
    21a2:	88 2e       	mov	r8, r24
    21a4:	86 18       	sub	r8, r6
    21a6:	fb 2d       	mov	r31, r11
    21a8:	ff 77       	andi	r31, 0x7F	; 127
    21aa:	3f 2e       	mov	r3, r31
    21ac:	36 fe       	sbrs	r3, 6
    21ae:	0d c0       	rjmp	.+26     	; 0x21ca <__stack+0xcb>
    21b0:	23 2d       	mov	r18, r3
    21b2:	2e 7f       	andi	r18, 0xFE	; 254
    21b4:	a2 2e       	mov	r10, r18
    21b6:	89 14       	cp	r8, r9
    21b8:	58 f4       	brcc	.+22     	; 0x21d0 <__stack+0xd1>
    21ba:	34 fe       	sbrs	r3, 4
    21bc:	0b c0       	rjmp	.+22     	; 0x21d4 <__stack+0xd5>
    21be:	32 fc       	sbrc	r3, 2
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <__stack+0xd5>
    21c2:	83 2d       	mov	r24, r3
    21c4:	8e 7e       	andi	r24, 0xEE	; 238
    21c6:	a8 2e       	mov	r10, r24
    21c8:	05 c0       	rjmp	.+10     	; 0x21d4 <__stack+0xd5>
    21ca:	b8 2c       	mov	r11, r8
    21cc:	a3 2c       	mov	r10, r3
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <__stack+0xd7>
    21d0:	b8 2c       	mov	r11, r8
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <__stack+0xd7>
    21d4:	b9 2c       	mov	r11, r9
    21d6:	a4 fe       	sbrs	r10, 4
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <__stack+0xf9>
    21da:	fe 01       	movw	r30, r28
    21dc:	e8 0d       	add	r30, r8
    21de:	f1 1d       	adc	r31, r1
    21e0:	80 81       	ld	r24, Z
    21e2:	80 33       	cpi	r24, 0x30	; 48
    21e4:	21 f4       	brne	.+8      	; 0x21ee <__stack+0xef>
    21e6:	9a 2d       	mov	r25, r10
    21e8:	99 7e       	andi	r25, 0xE9	; 233
    21ea:	a9 2e       	mov	r10, r25
    21ec:	09 c0       	rjmp	.+18     	; 0x2200 <__stack+0x101>
    21ee:	a2 fe       	sbrs	r10, 2
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <__stack+0xff>
    21f2:	b3 94       	inc	r11
    21f4:	b3 94       	inc	r11
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <__stack+0x101>
    21f8:	8a 2d       	mov	r24, r10
    21fa:	86 78       	andi	r24, 0x86	; 134
    21fc:	09 f0       	breq	.+2      	; 0x2200 <__stack+0x101>
    21fe:	b3 94       	inc	r11
    2200:	a3 fc       	sbrc	r10, 3
    2202:	10 c0       	rjmp	.+32     	; 0x2224 <__stack+0x125>
    2204:	a0 fe       	sbrs	r10, 0
    2206:	06 c0       	rjmp	.+12     	; 0x2214 <__stack+0x115>
    2208:	b2 14       	cp	r11, r2
    220a:	80 f4       	brcc	.+32     	; 0x222c <__stack+0x12d>
    220c:	28 0c       	add	r2, r8
    220e:	92 2c       	mov	r9, r2
    2210:	9b 18       	sub	r9, r11
    2212:	0d c0       	rjmp	.+26     	; 0x222e <__stack+0x12f>
    2214:	b2 14       	cp	r11, r2
    2216:	58 f4       	brcc	.+22     	; 0x222e <__stack+0x12f>
    2218:	b6 01       	movw	r22, r12
    221a:	80 e2       	ldi	r24, 0x20	; 32
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	76 d0       	rcall	.+236    	; 0x230c <fputc>
    2220:	b3 94       	inc	r11
    2222:	f8 cf       	rjmp	.-16     	; 0x2214 <__stack+0x115>
    2224:	b2 14       	cp	r11, r2
    2226:	18 f4       	brcc	.+6      	; 0x222e <__stack+0x12f>
    2228:	2b 18       	sub	r2, r11
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <__stack+0x131>
    222c:	98 2c       	mov	r9, r8
    222e:	21 2c       	mov	r2, r1
    2230:	a4 fe       	sbrs	r10, 4
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <__stack+0x153>
    2234:	b6 01       	movw	r22, r12
    2236:	80 e3       	ldi	r24, 0x30	; 48
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	68 d0       	rcall	.+208    	; 0x230c <fputc>
    223c:	a2 fe       	sbrs	r10, 2
    223e:	16 c0       	rjmp	.+44     	; 0x226c <__stack+0x16d>
    2240:	a1 fc       	sbrc	r10, 1
    2242:	03 c0       	rjmp	.+6      	; 0x224a <__stack+0x14b>
    2244:	88 e7       	ldi	r24, 0x78	; 120
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 c0       	rjmp	.+4      	; 0x224e <__stack+0x14f>
    224a:	88 e5       	ldi	r24, 0x58	; 88
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	b6 01       	movw	r22, r12
    2250:	0c c0       	rjmp	.+24     	; 0x226a <__stack+0x16b>
    2252:	8a 2d       	mov	r24, r10
    2254:	86 78       	andi	r24, 0x86	; 134
    2256:	51 f0       	breq	.+20     	; 0x226c <__stack+0x16d>
    2258:	a1 fe       	sbrs	r10, 1
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <__stack+0x161>
    225c:	8b e2       	ldi	r24, 0x2B	; 43
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <__stack+0x163>
    2260:	80 e2       	ldi	r24, 0x20	; 32
    2262:	a7 fc       	sbrc	r10, 7
    2264:	8d e2       	ldi	r24, 0x2D	; 45
    2266:	b6 01       	movw	r22, r12
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	50 d0       	rcall	.+160    	; 0x230c <fputc>
    226c:	89 14       	cp	r8, r9
    226e:	30 f4       	brcc	.+12     	; 0x227c <__stack+0x17d>
    2270:	b6 01       	movw	r22, r12
    2272:	80 e3       	ldi	r24, 0x30	; 48
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	4a d0       	rcall	.+148    	; 0x230c <fputc>
    2278:	9a 94       	dec	r9
    227a:	f8 cf       	rjmp	.-16     	; 0x226c <__stack+0x16d>
    227c:	8a 94       	dec	r8
    227e:	f3 01       	movw	r30, r6
    2280:	e8 0d       	add	r30, r8
    2282:	f1 1d       	adc	r31, r1
    2284:	80 81       	ld	r24, Z
    2286:	b6 01       	movw	r22, r12
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	40 d0       	rcall	.+128    	; 0x230c <fputc>
    228c:	81 10       	cpse	r8, r1
    228e:	f6 cf       	rjmp	.-20     	; 0x227c <__stack+0x17d>
    2290:	22 20       	and	r2, r2
    2292:	09 f4       	brne	.+2      	; 0x2296 <__stack+0x197>
    2294:	4e ce       	rjmp	.-868    	; 0x1f32 <vfprintf+0x4c>
    2296:	b6 01       	movw	r22, r12
    2298:	80 e2       	ldi	r24, 0x20	; 32
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	37 d0       	rcall	.+110    	; 0x230c <fputc>
    229e:	2a 94       	dec	r2
    22a0:	f7 cf       	rjmp	.-18     	; 0x2290 <__stack+0x191>
    22a2:	f6 01       	movw	r30, r12
    22a4:	86 81       	ldd	r24, Z+6	; 0x06
    22a6:	97 81       	ldd	r25, Z+7	; 0x07
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <__stack+0x1af>
    22aa:	8f ef       	ldi	r24, 0xFF	; 255
    22ac:	9f ef       	ldi	r25, 0xFF	; 255
    22ae:	2b 96       	adiw	r28, 0x0b	; 11
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	8f 90       	pop	r8
    22d2:	7f 90       	pop	r7
    22d4:	6f 90       	pop	r6
    22d6:	5f 90       	pop	r5
    22d8:	4f 90       	pop	r4
    22da:	3f 90       	pop	r3
    22dc:	2f 90       	pop	r2
    22de:	08 95       	ret

000022e0 <strnlen_P>:
    22e0:	fc 01       	movw	r30, r24
    22e2:	05 90       	lpm	r0, Z+
    22e4:	61 50       	subi	r22, 0x01	; 1
    22e6:	70 40       	sbci	r23, 0x00	; 0
    22e8:	01 10       	cpse	r0, r1
    22ea:	d8 f7       	brcc	.-10     	; 0x22e2 <strnlen_P+0x2>
    22ec:	80 95       	com	r24
    22ee:	90 95       	com	r25
    22f0:	8e 0f       	add	r24, r30
    22f2:	9f 1f       	adc	r25, r31
    22f4:	08 95       	ret

000022f6 <strnlen>:
    22f6:	fc 01       	movw	r30, r24
    22f8:	61 50       	subi	r22, 0x01	; 1
    22fa:	70 40       	sbci	r23, 0x00	; 0
    22fc:	01 90       	ld	r0, Z+
    22fe:	01 10       	cpse	r0, r1
    2300:	d8 f7       	brcc	.-10     	; 0x22f8 <strnlen+0x2>
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	8e 0f       	add	r24, r30
    2308:	9f 1f       	adc	r25, r31
    230a:	08 95       	ret

0000230c <fputc>:
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	fb 01       	movw	r30, r22
    2316:	23 81       	ldd	r18, Z+3	; 0x03
    2318:	21 fd       	sbrc	r18, 1
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <fputc+0x16>
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	9f ef       	ldi	r25, 0xFF	; 255
    2320:	2c c0       	rjmp	.+88     	; 0x237a <fputc+0x6e>
    2322:	22 ff       	sbrs	r18, 2
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <fputc+0x46>
    2326:	46 81       	ldd	r20, Z+6	; 0x06
    2328:	57 81       	ldd	r21, Z+7	; 0x07
    232a:	24 81       	ldd	r18, Z+4	; 0x04
    232c:	35 81       	ldd	r19, Z+5	; 0x05
    232e:	42 17       	cp	r20, r18
    2330:	53 07       	cpc	r21, r19
    2332:	44 f4       	brge	.+16     	; 0x2344 <fputc+0x38>
    2334:	a0 81       	ld	r26, Z
    2336:	b1 81       	ldd	r27, Z+1	; 0x01
    2338:	9d 01       	movw	r18, r26
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	31 83       	std	Z+1, r19	; 0x01
    2340:	20 83       	st	Z, r18
    2342:	8c 93       	st	X, r24
    2344:	26 81       	ldd	r18, Z+6	; 0x06
    2346:	37 81       	ldd	r19, Z+7	; 0x07
    2348:	2f 5f       	subi	r18, 0xFF	; 255
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
    234c:	37 83       	std	Z+7, r19	; 0x07
    234e:	26 83       	std	Z+6, r18	; 0x06
    2350:	14 c0       	rjmp	.+40     	; 0x237a <fputc+0x6e>
    2352:	8b 01       	movw	r16, r22
    2354:	ec 01       	movw	r28, r24
    2356:	fb 01       	movw	r30, r22
    2358:	00 84       	ldd	r0, Z+8	; 0x08
    235a:	f1 85       	ldd	r31, Z+9	; 0x09
    235c:	e0 2d       	mov	r30, r0
    235e:	09 95       	icall
    2360:	89 2b       	or	r24, r25
    2362:	e1 f6       	brne	.-72     	; 0x231c <fputc+0x10>
    2364:	d8 01       	movw	r26, r16
    2366:	16 96       	adiw	r26, 0x06	; 6
    2368:	8d 91       	ld	r24, X+
    236a:	9c 91       	ld	r25, X
    236c:	17 97       	sbiw	r26, 0x07	; 7
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	17 96       	adiw	r26, 0x07	; 7
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
    2376:	16 97       	sbiw	r26, 0x06	; 6
    2378:	ce 01       	movw	r24, r28
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <__ultoa_invert>:
    2384:	fa 01       	movw	r30, r20
    2386:	aa 27       	eor	r26, r26
    2388:	28 30       	cpi	r18, 0x08	; 8
    238a:	51 f1       	breq	.+84     	; 0x23e0 <__ultoa_invert+0x5c>
    238c:	20 31       	cpi	r18, 0x10	; 16
    238e:	81 f1       	breq	.+96     	; 0x23f0 <__ultoa_invert+0x6c>
    2390:	e8 94       	clt
    2392:	6f 93       	push	r22
    2394:	6e 7f       	andi	r22, 0xFE	; 254
    2396:	6e 5f       	subi	r22, 0xFE	; 254
    2398:	7f 4f       	sbci	r23, 0xFF	; 255
    239a:	8f 4f       	sbci	r24, 0xFF	; 255
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	af 4f       	sbci	r26, 0xFF	; 255
    23a0:	b1 e0       	ldi	r27, 0x01	; 1
    23a2:	3e d0       	rcall	.+124    	; 0x2420 <__ultoa_invert+0x9c>
    23a4:	b4 e0       	ldi	r27, 0x04	; 4
    23a6:	3c d0       	rcall	.+120    	; 0x2420 <__ultoa_invert+0x9c>
    23a8:	67 0f       	add	r22, r23
    23aa:	78 1f       	adc	r23, r24
    23ac:	89 1f       	adc	r24, r25
    23ae:	9a 1f       	adc	r25, r26
    23b0:	a1 1d       	adc	r26, r1
    23b2:	68 0f       	add	r22, r24
    23b4:	79 1f       	adc	r23, r25
    23b6:	8a 1f       	adc	r24, r26
    23b8:	91 1d       	adc	r25, r1
    23ba:	a1 1d       	adc	r26, r1
    23bc:	6a 0f       	add	r22, r26
    23be:	71 1d       	adc	r23, r1
    23c0:	81 1d       	adc	r24, r1
    23c2:	91 1d       	adc	r25, r1
    23c4:	a1 1d       	adc	r26, r1
    23c6:	20 d0       	rcall	.+64     	; 0x2408 <__ultoa_invert+0x84>
    23c8:	09 f4       	brne	.+2      	; 0x23cc <__ultoa_invert+0x48>
    23ca:	68 94       	set
    23cc:	3f 91       	pop	r19
    23ce:	2a e0       	ldi	r18, 0x0A	; 10
    23d0:	26 9f       	mul	r18, r22
    23d2:	11 24       	eor	r1, r1
    23d4:	30 19       	sub	r19, r0
    23d6:	30 5d       	subi	r19, 0xD0	; 208
    23d8:	31 93       	st	Z+, r19
    23da:	de f6       	brtc	.-74     	; 0x2392 <__ultoa_invert+0xe>
    23dc:	cf 01       	movw	r24, r30
    23de:	08 95       	ret
    23e0:	46 2f       	mov	r20, r22
    23e2:	47 70       	andi	r20, 0x07	; 7
    23e4:	40 5d       	subi	r20, 0xD0	; 208
    23e6:	41 93       	st	Z+, r20
    23e8:	b3 e0       	ldi	r27, 0x03	; 3
    23ea:	0f d0       	rcall	.+30     	; 0x240a <__ultoa_invert+0x86>
    23ec:	c9 f7       	brne	.-14     	; 0x23e0 <__ultoa_invert+0x5c>
    23ee:	f6 cf       	rjmp	.-20     	; 0x23dc <__ultoa_invert+0x58>
    23f0:	46 2f       	mov	r20, r22
    23f2:	4f 70       	andi	r20, 0x0F	; 15
    23f4:	40 5d       	subi	r20, 0xD0	; 208
    23f6:	4a 33       	cpi	r20, 0x3A	; 58
    23f8:	18 f0       	brcs	.+6      	; 0x2400 <__ultoa_invert+0x7c>
    23fa:	49 5d       	subi	r20, 0xD9	; 217
    23fc:	31 fd       	sbrc	r19, 1
    23fe:	40 52       	subi	r20, 0x20	; 32
    2400:	41 93       	st	Z+, r20
    2402:	02 d0       	rcall	.+4      	; 0x2408 <__ultoa_invert+0x84>
    2404:	a9 f7       	brne	.-22     	; 0x23f0 <__ultoa_invert+0x6c>
    2406:	ea cf       	rjmp	.-44     	; 0x23dc <__ultoa_invert+0x58>
    2408:	b4 e0       	ldi	r27, 0x04	; 4
    240a:	a6 95       	lsr	r26
    240c:	97 95       	ror	r25
    240e:	87 95       	ror	r24
    2410:	77 95       	ror	r23
    2412:	67 95       	ror	r22
    2414:	ba 95       	dec	r27
    2416:	c9 f7       	brne	.-14     	; 0x240a <__ultoa_invert+0x86>
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	61 05       	cpc	r22, r1
    241c:	71 05       	cpc	r23, r1
    241e:	08 95       	ret
    2420:	9b 01       	movw	r18, r22
    2422:	ac 01       	movw	r20, r24
    2424:	0a 2e       	mov	r0, r26
    2426:	06 94       	lsr	r0
    2428:	57 95       	ror	r21
    242a:	47 95       	ror	r20
    242c:	37 95       	ror	r19
    242e:	27 95       	ror	r18
    2430:	ba 95       	dec	r27
    2432:	c9 f7       	brne	.-14     	; 0x2426 <__ultoa_invert+0xa2>
    2434:	62 0f       	add	r22, r18
    2436:	73 1f       	adc	r23, r19
    2438:	84 1f       	adc	r24, r20
    243a:	95 1f       	adc	r25, r21
    243c:	a0 1d       	adc	r26, r0
    243e:	08 95       	ret

00002440 <_exit>:
    2440:	f8 94       	cli

00002442 <__stop_program>:
    2442:	ff cf       	rjmp	.-2      	; 0x2442 <__stop_program>
