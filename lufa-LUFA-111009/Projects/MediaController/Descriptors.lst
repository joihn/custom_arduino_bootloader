   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  12               	.global	CALLBACK_USB_GetDescriptor
  14               	CALLBACK_USB_GetDescriptor:
  15               	.LFB97:
  16               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
  41:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
  42:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
  43:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
  44:Descriptors.c ****  *  more details on HID report descriptors.
  45:Descriptors.c ****  */
  46:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MediaControlReport[] =
  47:Descriptors.c **** {
  48:Descriptors.c **** 	HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer Page */
  49:Descriptors.c **** 	HID_RI_USAGE(8, 0x01), /* Consumer Controls */
  50:Descriptors.c **** 	HID_RI_COLLECTION(8, 0x01), /* Application */
  51:Descriptors.c **** 		HID_RI_USAGE(8, 0xB0), /* Play */
  52:Descriptors.c **** 		HID_RI_USAGE(8, 0xB1), /* Pause */
  53:Descriptors.c **** 		HID_RI_USAGE(8, 0xB3), /* Fast Forward */
  54:Descriptors.c **** 		HID_RI_USAGE(8, 0xB4), /* Rewind */
  55:Descriptors.c **** 		HID_RI_USAGE(8, 0xB5), /* Next Track */
  56:Descriptors.c **** 		HID_RI_USAGE(8, 0xB6), /* Previous Track */
  57:Descriptors.c **** 		HID_RI_USAGE(8, 0xB7), /* Stop */
  58:Descriptors.c **** 		HID_RI_USAGE(8, 0xCD), /* Play/Pause (toggle) */
  59:Descriptors.c **** 		HID_RI_USAGE(8, 0xE2), /* Mute */
  60:Descriptors.c **** 		HID_RI_USAGE(8, 0xE9), /* Volume Up */
  61:Descriptors.c **** 		HID_RI_USAGE(8, 0xEA), /* Volume Down */
  62:Descriptors.c **** 		HID_RI_REPORT_SIZE(8, 0x01),
  63:Descriptors.c **** 		HID_RI_REPORT_COUNT(8, 0x0B),
  64:Descriptors.c **** 		HID_RI_LOGICAL_MINIMUM(8, 0),
  65:Descriptors.c **** 		HID_RI_LOGICAL_MAXIMUM(8, 1),
  66:Descriptors.c **** 		HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
  67:Descriptors.c **** 		HID_RI_REPORT_COUNT(8, 0x05),
  68:Descriptors.c **** 		HID_RI_INPUT(8, HID_IOF_CONSTANT),
  69:Descriptors.c **** 	HID_RI_END_COLLECTION(0),
  70:Descriptors.c **** };
  71:Descriptors.c **** 
  72:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  73:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  74:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  75:Descriptors.c ****  *  process begins.
  76:Descriptors.c ****  */
  77:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  78:Descriptors.c **** {
  79:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  80:Descriptors.c **** 
  81:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  82:Descriptors.c **** 	.Class                  = USB_CSCP_NoDeviceClass,
  83:Descriptors.c **** 	.SubClass               = USB_CSCP_NoDeviceSubclass,
  84:Descriptors.c **** 	.Protocol               = USB_CSCP_NoDeviceProtocol,
  85:Descriptors.c **** 
  86:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  87:Descriptors.c **** 
  88:Descriptors.c **** 	.VendorID               = 0x03EB,
  89:Descriptors.c **** 	.ProductID              = 0x206A,
  90:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  91:Descriptors.c **** 
  92:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  93:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  94:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  95:Descriptors.c **** 
  96:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  97:Descriptors.c **** };
  98:Descriptors.c **** 
  99:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
 100:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
 101:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
 102:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
 103:Descriptors.c ****  */
 104:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 105:Descriptors.c **** {
 106:Descriptors.c **** 	.Config =
 107:Descriptors.c **** 		{
 108:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 111:Descriptors.c **** 			.TotalInterfaces        = 1,
 112:Descriptors.c **** 
 113:Descriptors.c **** 			.ConfigurationNumber    = 1,
 114:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
 115:Descriptors.c **** 
 116:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.HID_Interface =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 124:Descriptors.c **** 
 125:Descriptors.c **** 			.InterfaceNumber        = 0x00,
 126:Descriptors.c **** 			.AlternateSetting       = 0x00,
 127:Descriptors.c **** 
 128:Descriptors.c **** 			.TotalEndpoints         = 1,
 129:Descriptors.c **** 
 130:Descriptors.c **** 			.Class                  = HID_CSCP_HIDClass,
 131:Descriptors.c **** 			.SubClass               = HID_CSCP_NonBootSubclass,
 132:Descriptors.c **** 			.Protocol               = HID_CSCP_NonBootProtocol,
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 135:Descriptors.c **** 		},
 136:Descriptors.c **** 
 137:Descriptors.c **** 	.HID_MediaControlHID =
 138:Descriptors.c **** 		{
 139:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_HID},
 140:Descriptors.c **** 
 141:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 142:Descriptors.c **** 			.CountryCode            = 0x00,
 143:Descriptors.c **** 			.TotalReportDescriptors = 1,
 144:Descriptors.c **** 			.HIDReportType          = HID_DTYPE_Report,
 145:Descriptors.c **** 			.HIDReportLength        = sizeof(MediaControlReport)
 146:Descriptors.c **** 		},
 147:Descriptors.c **** 
 148:Descriptors.c **** 	.HID_ReportINEndpoint =
 149:Descriptors.c **** 		{
 150:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 151:Descriptors.c **** 
 152:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | MEDIACONTROL_HID_EPNUM),
 153:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 154:Descriptors.c **** 			.EndpointSize           = MEDIACONTROL_HID_EPSIZE,
 155:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 156:Descriptors.c **** 		},
 157:Descriptors.c **** };
 158:Descriptors.c **** 
 159:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 160:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 161:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 162:Descriptors.c ****  */
 163:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 164:Descriptors.c **** {
 165:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 166:Descriptors.c **** 
 167:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 168:Descriptors.c **** };
 169:Descriptors.c **** 
 170:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 171:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 172:Descriptors.c ****  *  Descriptor.
 173:Descriptors.c ****  */
 174:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 175:Descriptors.c **** {
 176:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 177:Descriptors.c **** 
 178:Descriptors.c **** 	.UnicodeString          = L"Dean Camera"
 179:Descriptors.c **** };
 180:Descriptors.c **** 
 181:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 182:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 183:Descriptors.c ****  *  Descriptor.
 184:Descriptors.c ****  */
 185:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 186:Descriptors.c **** {
 187:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(21), .Type = DTYPE_String},
 188:Descriptors.c **** 
 189:Descriptors.c **** 	.UnicodeString          = L"LUFA Media Controller"
 190:Descriptors.c **** };
 191:Descriptors.c **** 
 192:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 193:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 194:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 195:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 196:Descriptors.c ****  *  USB host.
 197:Descriptors.c ****  */
 198:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 199:Descriptors.c ****                                     const uint8_t wIndex,
 200:Descriptors.c ****                                     const void** const DescriptorAddress)
 201:Descriptors.c **** {
  17               		.loc 1 201 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 202:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 203:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 204:Descriptors.c **** 
 205:Descriptors.c **** 	const void* Address = NULL;
 206:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 207:Descriptors.c **** 
 208:Descriptors.c **** 	switch (DescriptorType)
  24               		.loc 1 208 0
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 00F4      		brsh .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L5
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F4      		brne .L14
  37               	.LVL1:
 209:Descriptors.c **** 	{
 210:Descriptors.c **** 		case DTYPE_Device:
 211:Descriptors.c **** 			Address = &DeviceDescriptor;
 212:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 213:Descriptors.c **** 			break;
 214:Descriptors.c **** 		case DTYPE_Configuration:
 215:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 216:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 216 0
  39 0018 82E2      		ldi r24,lo8(34)
  40 001a 90E0      		ldi r25,0
  41               	.LVL2:
 215:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  42               		.loc 1 215 0
  43 001c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 001e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 217:Descriptors.c **** 			break;
  45               		.loc 1 217 0
  46 0020 00C0      		rjmp .L2
  47               	.LVL3:
  48               	.L4:
 208:Descriptors.c **** 	{
  49               		.loc 1 208 0
  50 0022 2132      		cpi r18,33
  51 0024 3105      		cpc r19,__zero_reg__
  52 0026 01F0      		breq .L7
  53 0028 2232      		cpi r18,34
  54 002a 3105      		cpc r19,__zero_reg__
  55 002c 01F4      		brne .L14
  56               	.LVL4:
 218:Descriptors.c **** 		case DTYPE_String:
 219:Descriptors.c **** 			switch (DescriptorNumber)
 220:Descriptors.c **** 			{
 221:Descriptors.c **** 				case 0x00:
 222:Descriptors.c **** 					Address = &LanguageString;
 223:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 224:Descriptors.c **** 					break;
 225:Descriptors.c **** 				case 0x01:
 226:Descriptors.c **** 					Address = &ManufacturerString;
 227:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 228:Descriptors.c **** 					break;
 229:Descriptors.c **** 				case 0x02:
 230:Descriptors.c **** 					Address = &ProductString;
 231:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 232:Descriptors.c **** 					break;
 233:Descriptors.c **** 			}
 234:Descriptors.c **** 
 235:Descriptors.c **** 			break;
 236:Descriptors.c **** 		case HID_DTYPE_HID:
 237:Descriptors.c **** 			Address = &ConfigurationDescriptor.HID_MediaControlHID;
 238:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_HID_t);
 239:Descriptors.c **** 			break;
 240:Descriptors.c **** 		case HID_DTYPE_Report:
 241:Descriptors.c **** 			Address = &MediaControlReport;
 242:Descriptors.c **** 			Size    = sizeof(MediaControlReport);
  57               		.loc 1 242 0
  58 002e 8BE2      		ldi r24,lo8(43)
  59 0030 90E0      		ldi r25,0
  60               	.LVL5:
 241:Descriptors.c **** 			Size    = sizeof(MediaControlReport);
  61               		.loc 1 241 0
  62 0032 20E0      		ldi r18,lo8(MediaControlReport)
  63 0034 30E0      		ldi r19,hi8(MediaControlReport)
 243:Descriptors.c **** 			break;
  64               		.loc 1 243 0
  65 0036 00C0      		rjmp .L2
  66               	.LVL6:
  67               	.L5:
 212:Descriptors.c **** 			break;
  68               		.loc 1 212 0
  69 0038 82E1      		ldi r24,lo8(18)
  70 003a 90E0      		ldi r25,0
  71               	.LVL7:
 211:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  72               		.loc 1 211 0
  73 003c 20E0      		ldi r18,lo8(DeviceDescriptor)
  74 003e 30E0      		ldi r19,hi8(DeviceDescriptor)
  75 0040 00C0      		rjmp .L2
  76               	.LVL8:
  77               	.L3:
 219:Descriptors.c **** 			{
  78               		.loc 1 219 0
  79 0042 9927      		clr r25
  80               	.LVL9:
  81 0044 8130      		cpi r24,1
  82 0046 9105      		cpc r25,__zero_reg__
  83 0048 01F0      		breq .L9
  84 004a 00F0      		brlo .L10
  85 004c 0297      		sbiw r24,2
  86 004e 01F4      		brne .L14
  87               	.LVL10:
  88               	.LBB2:
 231:Descriptors.c **** 					break;
  89               		.loc 1 231 0
  90 0050 E0E0      		ldi r30,lo8(ProductString)
  91 0052 F0E0      		ldi r31,hi8(ProductString)
  92 0054 00C0      		rjmp .L15
  93               	.LVL11:
  94               	.L10:
  95               	.LBE2:
  96               	.LBB3:
 223:Descriptors.c **** 					break;
  97               		.loc 1 223 0
  98 0056 E0E0      		ldi r30,lo8(LanguageString)
  99 0058 F0E0      		ldi r31,hi8(LanguageString)
 100 005a 00C0      		rjmp .L15
 101               	.LVL12:
 102               	.L9:
 103               	.LBE3:
 104               	.LBB4:
 227:Descriptors.c **** 					break;
 105               		.loc 1 227 0
 106 005c E0E0      		ldi r30,lo8(ManufacturerString)
 107 005e F0E0      		ldi r31,hi8(ManufacturerString)
 108               	.LVL13:
 109               	.L15:
 110               	.LBE4:
 111               	.LBB5:
 231:Descriptors.c **** 					break;
 112               		.loc 1 231 0
 113               	/* #APP */
 114               	 ;  231 "Descriptors.c" 1
 115 0060 8491      		lpm r24, Z
 116               		
 117               	 ;  0 "" 2
 118               	.LVL14:
 119               	/* #NOAPP */
 120               	.LBE5:
 121 0062 90E0      		ldi r25,0
 122               	.LVL15:
 230:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 123               		.loc 1 230 0
 124 0064 9F01      		movw r18,r30
 232:Descriptors.c **** 			}
 125               		.loc 1 232 0
 126 0066 00C0      		rjmp .L2
 127               	.LVL16:
 128               	.L7:
 238:Descriptors.c **** 			break;
 129               		.loc 1 238 0
 130 0068 89E0      		ldi r24,lo8(9)
 131 006a 90E0      		ldi r25,0
 132               	.LVL17:
 237:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_HID_t);
 133               		.loc 1 237 0
 134 006c 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 135 006e 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 136               	.LVL18:
 239:Descriptors.c **** 		case HID_DTYPE_Report:
 137               		.loc 1 239 0
 138 0070 00C0      		rjmp .L2
 139               	.LVL19:
 140               	.L14:
 206:Descriptors.c **** 
 141               		.loc 1 206 0
 142 0072 80E0      		ldi r24,0
 143 0074 90E0      		ldi r25,0
 205:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 144               		.loc 1 205 0
 145 0076 20E0      		ldi r18,0
 146 0078 30E0      		ldi r19,0
 147               	.LVL20:
 148               	.L2:
 244:Descriptors.c **** 	}
 245:Descriptors.c **** 
 246:Descriptors.c **** 	*DescriptorAddress = Address;
 149               		.loc 1 246 0
 150 007a FA01      		movw r30,r20
 151 007c 3183      		std Z+1,r19
 152 007e 2083      		st Z,r18
 247:Descriptors.c **** 	return Size;
 248:Descriptors.c **** }
 153               		.loc 1 248 0
 154 0080 0895      		ret
 155               		.cfi_endproc
 156               	.LFE97:
 158               	.global	ProductString
 159               		.section	.progmem.data,"a",@progbits
 162               	ProductString:
 163 0000 2C        		.byte	44
 164 0001 03        		.byte	3
 165 0002 4C00      		.string	"L"
 166 0004 5500      		.string	"U"
 167 0006 4600      		.string	"F"
 168 0008 4100      		.string	"A"
 169 000a 2000      		.string	" "
 170 000c 4D00      		.string	"M"
 171 000e 6500      		.string	"e"
 172 0010 6400      		.string	"d"
 173 0012 6900      		.string	"i"
 174 0014 6100      		.string	"a"
 175 0016 2000      		.string	" "
 176 0018 4300      		.string	"C"
 177 001a 6F00      		.string	"o"
 178 001c 6E00      		.string	"n"
 179 001e 7400      		.string	"t"
 180 0020 7200      		.string	"r"
 181 0022 6F00      		.string	"o"
 182 0024 6C00      		.string	"l"
 183 0026 6C00      		.string	"l"
 184 0028 6500      		.string	"e"
 185 002a 7200      		.string	"r"
 186 002c 00        		.string	""
 187 002d 00        		.string	""
 188               	.global	ManufacturerString
 191               	ManufacturerString:
 192 002e 18        		.byte	24
 193 002f 03        		.byte	3
 194 0030 4400      		.string	"D"
 195 0032 6500      		.string	"e"
 196 0034 6100      		.string	"a"
 197 0036 6E00      		.string	"n"
 198 0038 2000      		.string	" "
 199 003a 4300      		.string	"C"
 200 003c 6100      		.string	"a"
 201 003e 6D00      		.string	"m"
 202 0040 6500      		.string	"e"
 203 0042 7200      		.string	"r"
 204 0044 6100      		.string	"a"
 205 0046 00        		.string	""
 206 0047 00        		.string	""
 207               	.global	LanguageString
 210               	LanguageString:
 211 0048 04        		.byte	4
 212 0049 03        		.byte	3
 213 004a 0904      		.word	1033
 214               	.global	ConfigurationDescriptor
 217               	ConfigurationDescriptor:
 218 004c 09        		.byte	9
 219 004d 02        		.byte	2
 220 004e 2200      		.word	34
 221 0050 01        		.byte	1
 222 0051 01        		.byte	1
 223 0052 00        		.byte	0
 224 0053 C0        		.byte	-64
 225 0054 32        		.byte	50
 226 0055 09        		.byte	9
 227 0056 04        		.byte	4
 228 0057 00        		.byte	0
 229 0058 00        		.byte	0
 230 0059 01        		.byte	1
 231 005a 03        		.byte	3
 232 005b 00        		.byte	0
 233 005c 00        		.byte	0
 234 005d 00        		.byte	0
 235 005e 09        		.byte	9
 236 005f 21        		.byte	33
 237 0060 1101      		.word	273
 238 0062 00        		.byte	0
 239 0063 01        		.byte	1
 240 0064 22        		.byte	34
 241 0065 2B00      		.word	43
 242 0067 07        		.byte	7
 243 0068 05        		.byte	5
 244 0069 81        		.byte	-127
 245 006a 03        		.byte	3
 246 006b 0800      		.word	8
 247 006d 01        		.byte	1
 248               	.global	DeviceDescriptor
 251               	DeviceDescriptor:
 252 006e 12        		.byte	18
 253 006f 01        		.byte	1
 254 0070 1001      		.word	272
 255 0072 00        		.byte	0
 256 0073 00        		.byte	0
 257 0074 00        		.byte	0
 258 0075 08        		.byte	8
 259 0076 EB03      		.word	1003
 260 0078 6A20      		.word	8298
 261 007a 0100      		.word	1
 262 007c 01        		.byte	1
 263 007d 02        		.byte	2
 264 007e 00        		.byte	0
 265 007f 01        		.byte	1
 266               	.global	MediaControlReport
 269               	MediaControlReport:
 270 0080 05        		.byte	5
 271 0081 0C        		.byte	12
 272 0082 09        		.byte	9
 273 0083 01        		.byte	1
 274 0084 A1        		.byte	-95
 275 0085 01        		.byte	1
 276 0086 09        		.byte	9
 277 0087 B0        		.byte	-80
 278 0088 09        		.byte	9
 279 0089 B1        		.byte	-79
 280 008a 09        		.byte	9
 281 008b B3        		.byte	-77
 282 008c 09        		.byte	9
 283 008d B4        		.byte	-76
 284 008e 09        		.byte	9
 285 008f B5        		.byte	-75
 286 0090 09        		.byte	9
 287 0091 B6        		.byte	-74
 288 0092 09        		.byte	9
 289 0093 B7        		.byte	-73
 290 0094 09        		.byte	9
 291 0095 CD        		.byte	-51
 292 0096 09        		.byte	9
 293 0097 E2        		.byte	-30
 294 0098 09        		.byte	9
 295 0099 E9        		.byte	-23
 296 009a 09        		.byte	9
 297 009b EA        		.byte	-22
 298 009c 75        		.byte	117
 299 009d 01        		.byte	1
 300 009e 95        		.byte	-107
 301 009f 0B        		.byte	11
 302 00a0 15        		.byte	21
 303 00a1 00        		.byte	0
 304 00a2 25        		.byte	37
 305 00a3 01        		.byte	1
 306 00a4 81        		.byte	-127
 307 00a5 06        		.byte	6
 308 00a6 95        		.byte	-107
 309 00a7 05        		.byte	5
 310 00a8 81        		.byte	-127
 311 00a9 01        		.byte	1
 312 00aa C0        		.byte	-64
 313               		.text
 314               	.Letext0:
 315               		.file 2 "/usr/lib/avr/include/stdint.h"
 316               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 317               		.file 4 "../../LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 318               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 319               		.file 6 "Descriptors.h"
 320               		.file 7 "../../LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccBOLpCS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBOLpCS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBOLpCS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBOLpCS.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccBOLpCS.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBOLpCS.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBOLpCS.s:14     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccBOLpCS.s:217    .progmem.data:000000000000004c ConfigurationDescriptor
     /tmp/ccBOLpCS.s:269    .progmem.data:0000000000000080 MediaControlReport
     /tmp/ccBOLpCS.s:251    .progmem.data:000000000000006e DeviceDescriptor
     /tmp/ccBOLpCS.s:162    .progmem.data:0000000000000000 ProductString
     /tmp/ccBOLpCS.s:210    .progmem.data:0000000000000048 LanguageString
     /tmp/ccBOLpCS.s:191    .progmem.data:000000000000002e ManufacturerString

NO UNDEFINED SYMBOLS
