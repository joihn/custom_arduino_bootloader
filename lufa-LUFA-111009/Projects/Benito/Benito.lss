
Benito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000f6c  00001000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800118  00800118  00001018  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cff  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a92  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033e8  00000000  00000000  00008ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000918  00000000  00000000  0000bed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002632  00000000  00000000  0000c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036d7  00000000  00000000  0000ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  000124f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ed c2       	rjmp	.+1498   	; 0x608 <__vector_11>
  2e:	00 00       	nop
  30:	8e c3       	rjmp	.+1820   	; 0x74e <__vector_12>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	af c1       	rjmp	.+862    	; 0x3bc <__vector_23>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	ba 04       	cpc	r11, r10
  76:	dc 04       	cpc	r13, r12
  78:	c7 05       	cpc	r28, r7
  7a:	dc 04       	cpc	r13, r12
  7c:	c7 05       	cpc	r28, r7
  7e:	21 05       	cpc	r18, r1
  80:	43 05       	cpc	r20, r3
  82:	c7 05       	cpc	r28, r7
  84:	95 05       	cpc	r25, r5
  86:	a7 05       	cpc	r26, r7

00000088 <ProductString>:
  88:	34 03 42 00 65 00 6e 00 69 00 74 00 6f 00 20 00     4.B.e.n.i.t.o. .
  98:	41 00 72 00 64 00 75 00 69 00 6e 00 6f 00 20 00     A.r.d.u.i.n.o. .
  a8:	50 00 72 00 6f 00 67 00 72 00 61 00 6d 00 6d 00     P.r.o.g.r.a.m.m.
  b8:	65 00 72 00 00 00                                   e.r...

000000be <ManufacturerString>:
  be:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ce:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d8 <LanguageString>:
  d8:	04 03 09 04                                         ....

000000dc <ConfigurationDescriptor>:
  dc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ec:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  fc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 10c:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

0000011a <DeviceDescriptor>:
 11a:	12 01 10 01 02 00 00 08 eb 03 60 20 01 00 01 02     ..........` ....
 12a:	dc 01                                               ..

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf ef       	ldi	r28, 0xFF	; 255
 132:	d4 e0       	ldi	r29, 0x04	; 4
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b1 e0       	ldi	r27, 0x01	; 1
 13e:	ec e6       	ldi	r30, 0x6C	; 108
 140:	ff e0       	ldi	r31, 0x0F	; 15
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	a8 31       	cpi	r26, 0x18	; 24
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	a8 e1       	ldi	r26, 0x18	; 24
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
 156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
 158:	a4 3b       	cpi	r26, 0xB4	; 180
 15a:	b2 07       	cpc	r27, r18
 15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
 15e:	26 d0       	rcall	.+76     	; 0x1ac <main>
 160:	03 c7       	rjmp	.+3590   	; 0xf68 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <LEDs_SetAllLEDs>:
				PORTC |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = ((PORTC | LEDS_ALL_LEDS) & ~LEDMask);
 164:	98 b1       	in	r25, 0x08	; 8
 166:	90 6c       	ori	r25, 0xC0	; 192
 168:	80 95       	com	r24
 16a:	89 23       	and	r24, r25
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	08 95       	ret

00000170 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 170:	84 b7       	in	r24, 0x34	; 52
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	a8 95       	wdr
 17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 180:	88 61       	ori	r24, 0x18	; 24
 182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 186:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 18a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |= LEDS_ALL_LEDS;
 18c:	87 b1       	in	r24, 0x07	; 7
 18e:	80 6c       	ori	r24, 0xC0	; 192
 190:	87 b9       	out	0x07, r24	; 7
				PORTC |= LEDS_ALL_LEDS;
 192:	88 b1       	in	r24, 0x08	; 8
 194:	80 6c       	ori	r24, 0xC0	; 192
 196:	88 b9       	out	0x08, r24	; 8
	wdt_disable();

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 198:	28 d2       	rcall	.+1104   	; 0x5ea <USB_Init>

	/* Millisecond Timer Interrupt */
	OCR0A  = (F_CPU / 64 / 1000);
 19a:	8d e7       	ldi	r24, 0x7D	; 125
 19c:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((1 << CS01) | (1 << CS00));
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	85 bd       	out	0x25, r24	; 37

	/* Tristate target /RESET Line */
	AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 1a6:	5c 98       	cbi	0x0b, 4	; 11
	AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
 1a8:	54 98       	cbi	0x0a, 4	; 10
 1aa:	08 95       	ret

000001ac <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 1ac:	e1 df       	rcall	.-62     	; 0x170 <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 1ae:	e9 e9       	ldi	r30, 0x99	; 153
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 1b2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 1b4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
 1b6:	89 e1       	ldi	r24, 0x19	; 25
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	91 83       	std	Z+1, r25	; 0x01
 1bc:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 1be:	93 83       	std	Z+3, r25	; 0x03
 1c0:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 1c2:	95 83       	std	Z+5, r25	; 0x05
 1c4:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 1c6:	89 e9       	ldi	r24, 0x99	; 153
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	97 83       	std	Z+7, r25	; 0x07
 1cc:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
 1d2:	12 86       	std	Z+10, r1	; 0x0a
 1d4:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1d6:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	sei();
 1d8:	78 94       	sei
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 1da:	8e e1       	ldi	r24, 0x1E	; 30
 1dc:	f8 2e       	mov	r15, r24

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
 1de:	9a e0       	ldi	r25, 0x0A	; 10
 1e0:	e9 2e       	mov	r14, r25
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
 1e2:	09 e9       	ldi	r16, 0x99	; 153
 1e4:	11 e0       	ldi	r17, 0x01	; 1
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTC ^= LEDMask;
 1e6:	20 ec       	ldi	r18, 0xC0	; 192
 1e8:	d2 2e       	mov	r13, r18

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
 1ea:	34 e6       	ldi	r19, 0x64	; 100
 1ec:	c3 2e       	mov	r12, r19
	sei();

	for (;;)
	{
		/* Echo bytes from the host to the target via the hardware USART */
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
 1ee:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 1f2:	85 ff       	sbrs	r24, 5
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <main+0x64>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	a0 d5       	rcall	.+2880   	; 0xd3c <CDC_Device_BytesReceived>
 1fc:	89 2b       	or	r24, r25
 1fe:	41 f0       	breq	.+16     	; 0x210 <main+0x64>
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	be d5       	rcall	.+2940   	; 0xd82 <CDC_Device_ReceiveByte>
 206:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
				PORTC |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
 20a:	47 98       	cbi	0x08, 7	; 8

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 20c:	f0 92 a5 01 	sts	0x01A5, r15	; 0x8001a5 <PulseMSRemaining+0x1>
		}

		/* Check if the millisecond timer has elapsed */
		if (TIFR0 & (1 << OCF0A))
 210:	a9 99       	sbic	0x15, 1	; 21
					RingBuffer_Remove(&USARTtoUSB_Buffer);
				}
			}
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 212:	05 c0       	rjmp	.+10     	; 0x21e <main+0x72>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 218:	83 d5       	rcall	.+2822   	; 0xd20 <CDC_Device_USBTask>
 21a:	d3 d4       	rcall	.+2470   	; 0xbc2 <USB_USBTask>
	}
 21c:	e8 cf       	rjmp	.-48     	; 0x1ee <main+0x42>

		/* Check if the millisecond timer has elapsed */
		if (TIFR0 & (1 << OCF0A))
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
 21e:	a8 9a       	sbi	0x15, 0	; 21

			/* Check if the reset pulse period has elapsed, if so tristate the target reset line */
			if (PulseMSRemaining.ResetPulse && !(--PulseMSRemaining.ResetPulse))
 220:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <PulseMSRemaining>
 224:	88 23       	and	r24, r24
 226:	59 f0       	breq	.+22     	; 0x23e <main+0x92>
 228:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <PulseMSRemaining>
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <PulseMSRemaining>
 232:	81 11       	cpse	r24, r1
 234:	04 c0       	rjmp	.+8      	; 0x23e <main+0x92>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
 236:	88 b1       	in	r24, 0x08	; 8
 238:	80 6c       	ori	r24, 0xC0	; 192
 23a:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_TurnOffLEDs(LEDMASK_BUSY);
				AVR_RESET_LINE_DDR &= ~AVR_RESET_LINE_MASK;
 23c:	54 98       	cbi	0x0a, 4	; 10
			}

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
 23e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <PulseMSRemaining+0x3>
 242:	88 23       	and	r24, r24
 244:	61 f0       	breq	.+24     	; 0x25e <main+0xb2>
 246:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <PulseMSRemaining+0x3>
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <PulseMSRemaining+0x3>
 250:	81 11       	cpse	r24, r1
 252:	05 c0       	rjmp	.+10     	; 0x25e <main+0xb2>
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTC ^= LEDMask;
 254:	88 b1       	in	r24, 0x08	; 8
 256:	8d 25       	eor	r24, r13
 258:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
 25a:	c0 92 a7 01 	sts	0x01A7, r12	; 0x8001a7 <PulseMSRemaining+0x3>
			}

			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
 25e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <PulseMSRemaining+0x1>
 262:	88 23       	and	r24, r24
 264:	41 f0       	breq	.+16     	; 0x276 <main+0xca>
 266:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <PulseMSRemaining+0x1>
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <PulseMSRemaining+0x1>
 270:	81 11       	cpse	r24, r1
 272:	01 c0       	rjmp	.+2      	; 0x276 <main+0xca>
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
 274:	47 9a       	sbi	0x08, 7	; 8
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
 276:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <PulseMSRemaining+0x2>
 27a:	88 23       	and	r24, r24
 27c:	41 f0       	breq	.+16     	; 0x28e <main+0xe2>
 27e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <PulseMSRemaining+0x2>
 282:	81 50       	subi	r24, 0x01	; 1
 284:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <PulseMSRemaining+0x2>
 288:	81 11       	cpse	r24, r1
 28a:	01 c0       	rjmp	.+2      	; 0x28e <main+0xe2>
 28c:	46 9a       	sbi	0x08, 6	; 8
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 28e:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 290:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
 292:	c0 91 a2 01 	lds	r28, 0x01A2	; 0x8001a2 <USARTtoUSB_Buffer+0x9>
 296:	d0 91 a3 01 	lds	r29, 0x01A3	; 0x8001a3 <USARTtoUSB_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 29a:	8f bf       	out	0x3f, r24	; 63
			  LEDs_TurnOffLEDs(LEDMASK_RX);

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
 29c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <FlushPeriodRemaining>
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <main+0x104>
 2a4:	c9 3c       	cpi	r28, 0xC9	; 201
 2a6:	d1 05       	cpc	r29, r1
 2a8:	18 f4       	brcc	.+6      	; 0x2b0 <main+0x104>
 2aa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <FlushPeriodRemaining>
 2ae:	b2 cf       	rjmp	.-156    	; 0x214 <main+0x68>
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
 2b0:	e0 92 16 01 	sts	0x0116, r14	; 0x800116 <FlushPeriodRemaining>

				/* Start RX LED indicator pulse */
				if (BufferCount)
 2b4:	20 97       	sbiw	r28, 0x00	; 0
 2b6:	09 f4       	brne	.+2      	; 0x2ba <main+0x10e>
 2b8:	ad cf       	rjmp	.-166    	; 0x214 <main+0x68>
				PORTC |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
 2ba:	46 98       	cbi	0x08, 6	; 8
				{
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
 2bc:	f0 92 a6 01 	sts	0x01A6, r15	; 0x8001a6 <PulseMSRemaining+0x2>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
 2c0:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <USARTtoUSB_Buffer+0x2>
 2c4:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <USARTtoUSB_Buffer+0x3>

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 2c8:	60 81       	ld	r22, Z
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	d7 d4       	rcall	.+2478   	; 0xc7e <CDC_Device_SendByte>
 2d0:	81 11       	cpse	r24, r1
 2d2:	a0 cf       	rjmp	.-192    	; 0x214 <main+0x68>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 2d4:	f8 01       	movw	r30, r16
		
			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
 2d6:	82 81       	ldd	r24, Z+2	; 0x02
 2d8:	93 81       	ldd	r25, Z+3	; 0x03
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	93 83       	std	Z+3, r25	; 0x03
 2de:	82 83       	std	Z+2, r24	; 0x02
 2e0:	26 81       	ldd	r18, Z+6	; 0x06
 2e2:	37 81       	ldd	r19, Z+7	; 0x07
 2e4:	82 17       	cp	r24, r18
 2e6:	93 07       	cpc	r25, r19
 2e8:	21 f4       	brne	.+8      	; 0x2f2 <main+0x146>
			  Buffer->Out = Buffer->Start;
 2ea:	84 81       	ldd	r24, Z+4	; 0x04
 2ec:	95 81       	ldd	r25, Z+5	; 0x05
 2ee:	93 83       	std	Z+3, r25	; 0x03
 2f0:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 2f2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 2f4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
 2f6:	81 85       	ldd	r24, Z+9	; 0x09
 2f8:	92 85       	ldd	r25, Z+10	; 0x0a
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	92 87       	std	Z+10, r25	; 0x0a
 2fe:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 300:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 302:	21 97       	sbiw	r28, 0x01	; 1
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
				}

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
 304:	e9 f6       	brne	.-70     	; 0x2c0 <main+0x114>
 306:	86 cf       	rjmp	.-244    	; 0x214 <main+0x68>

00000308 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
 308:	84 e6       	ldi	r24, 0x64	; 100
 30a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <PulseMSRemaining+0x3>
	LEDs_SetAllLEDs(LEDMASK_TX);
 30e:	80 e8       	ldi	r24, 0x80	; 128
 310:	29 cf       	rjmp	.-430    	; 0x164 <LEDs_SetAllLEDs>

00000312 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	PulseMSRemaining.PingPongLEDPulse = 0;
 312:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <PulseMSRemaining+0x3>
	LEDs_SetAllLEDs(LEDS_NO_LEDS);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	25 cf       	rjmp	.-438    	; 0x164 <LEDs_SetAllLEDs>

0000031a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	62 d4       	rcall	.+2244   	; 0xbe4 <CDC_Device_ConfigureEndpoints>

	PulseMSRemaining.PingPongLEDPulse = 0;
 320:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <PulseMSRemaining+0x3>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDS_NO_LEDS : LEDMASK_ERROR);
 324:	81 11       	cpse	r24, r1
 326:	02 c0       	rjmp	.+4      	; 0x32c <EVENT_USB_Device_ConfigurationChanged+0x12>
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	01 c0       	rjmp	.+2      	; 0x32e <EVENT_USB_Device_ConfigurationChanged+0x14>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	1a cf       	rjmp	.-460    	; 0x164 <LEDs_SetAllLEDs>

00000330 <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	52 c5       	rjmp	.+2724   	; 0xdda <CDC_Device_ProcessControlRequest>

00000336 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 336:	cf 93       	push	r28
 338:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 33a:	84 89       	ldd	r24, Z+20	; 0x14
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	21 f0       	breq	.+8      	; 0x348 <EVENT_CDC_Device_LineEncodingChanged+0x12>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	21 f4       	brne	.+8      	; 0x34c <EVENT_CDC_Device_LineEncodingChanged+0x16>
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
			break;
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
 344:	c0 e2       	ldi	r28, 0x20	; 32
			break;
 346:	03 c0       	rjmp	.+6      	; 0x34e <EVENT_CDC_Device_LineEncodingChanged+0x18>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
 348:	c0 e3       	ldi	r28, 0x30	; 48
 34a:	01 c0       	rjmp	.+2      	; 0x34e <EVENT_CDC_Device_LineEncodingChanged+0x18>
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;
 34c:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 34e:	83 89       	ldd	r24, Z+19	; 0x13
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	09 f4       	brne	.+2      	; 0x356 <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
 354:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 356:	85 89       	ldd	r24, Z+21	; 0x15
 358:	87 30       	cpi	r24, 0x07	; 7
 35a:	31 f0       	breq	.+12     	; 0x368 <EVENT_CDC_Device_LineEncodingChanged+0x32>
 35c:	88 30       	cpi	r24, 0x08	; 8
 35e:	31 f0       	breq	.+12     	; 0x36c <EVENT_CDC_Device_LineEncodingChanged+0x36>
 360:	86 30       	cpi	r24, 0x06	; 6
 362:	29 f4       	brne	.+10     	; 0x36e <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 364:	c2 60       	ori	r28, 0x02	; 2
			break;
 366:	03 c0       	rjmp	.+6      	; 0x36e <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
 368:	c4 60       	ori	r28, 0x04	; 4
			break;
 36a:	01 c0       	rjmp	.+2      	; 0x36e <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 36c:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 36e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1A = 0;
 372:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	UCSR1C = 0;
 376:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 37a:	27 85       	ldd	r18, Z+15	; 0x0f
 37c:	30 89       	ldd	r19, Z+16	; 0x10
 37e:	41 89       	ldd	r20, Z+17	; 0x11
 380:	52 89       	ldd	r21, Z+18	; 0x12
 382:	da 01       	movw	r26, r20
 384:	c9 01       	movw	r24, r18
 386:	b6 95       	lsr	r27
 388:	a7 95       	ror	r26
 38a:	97 95       	ror	r25
 38c:	87 95       	ror	r24
 38e:	bc 01       	movw	r22, r24
 390:	cd 01       	movw	r24, r26
 392:	60 5c       	subi	r22, 0xC0	; 192
 394:	7d 4b       	sbci	r23, 0xBD	; 189
 396:	80 4f       	sbci	r24, 0xF0	; 240
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	be d5       	rcall	.+2940   	; 0xf18 <__udivmodsi4>
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	31 09       	sbc	r19, r1
 3a0:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 3a4:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
 3a8:	c0 93 ca 00 	sts	0x00CA, r28	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
	UCSR1A = (1 << U2X1);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 3b2:	88 e9       	ldi	r24, 0x98	; 152
 3b4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
}
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 3d6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>

	if (USB_DeviceState == DEVICE_STATE_Configured)
 3da:	9e b3       	in	r25, 0x1e	; 30
 3dc:	94 30       	cpi	r25, 0x04	; 4
 3de:	d9 f4       	brne	.+54     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 3e0:	e9 e9       	ldi	r30, 0x99	; 153
 3e2:	f1 e0       	ldi	r31, 0x01	; 1

			*Buffer->In = Data;
 3e4:	a0 81       	ld	r26, Z
 3e6:	b1 81       	ldd	r27, Z+1	; 0x01
 3e8:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
 3ea:	80 81       	ld	r24, Z
 3ec:	91 81       	ldd	r25, Z+1	; 0x01
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	91 83       	std	Z+1, r25	; 0x01
 3f2:	80 83       	st	Z, r24
 3f4:	26 81       	ldd	r18, Z+6	; 0x06
 3f6:	37 81       	ldd	r19, Z+7	; 0x07
 3f8:	82 17       	cp	r24, r18
 3fa:	93 07       	cpc	r25, r19
 3fc:	21 f4       	brne	.+8      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
			  Buffer->In = Buffer->Start;
 3fe:	84 81       	ldd	r24, Z+4	; 0x04
 400:	95 81       	ldd	r25, Z+5	; 0x05
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 406:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 408:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
 40a:	81 85       	ldd	r24, Z+9	; 0x09
 40c:	92 85       	ldd	r25, Z+10	; 0x0a
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	92 87       	std	Z+10, r25	; 0x0a
 412:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 414:	2f bf       	out	0x3f, r18	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 430:	cf 93       	push	r28
	static bool PreviousDTRState = false;
	bool        CurrentDTRState  = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
 432:	fc 01       	movw	r30, r24
 434:	c5 85       	ldd	r28, Z+13	; 0x0d
 436:	c1 70       	andi	r28, 0x01	; 1

	/* Check if the DTR line has been asserted - if so, start the target AVR's reset pulse */
	if (!(PreviousDTRState) && CurrentDTRState)
 438:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 43c:	81 11       	cpse	r24, r1
 43e:	08 c0       	rjmp	.+16     	; 0x450 <EVENT_CDC_Device_ControLineStateChanged+0x20>
 440:	cc 23       	and	r28, r28
 442:	31 f0       	breq	.+12     	; 0x450 <EVENT_CDC_Device_ControLineStateChanged+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	8e de       	rcall	.-740    	; 0x164 <LEDs_SetAllLEDs>

		AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
 448:	54 9a       	sbi	0x0a, 4	; 10
		PulseMSRemaining.ResetPulse = AVR_RESET_PULSE_MS;
 44a:	8a e0       	ldi	r24, 0x0A	; 10
 44c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <PulseMSRemaining>
	}

	PreviousDTRState = CurrentDTRState;
 450:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <__data_end>
}
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 458:	29 2f       	mov	r18, r25
 45a:	33 27       	eor	r19, r19
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	31 05       	cpc	r19, r1
 460:	59 f0       	breq	.+22     	; 0x478 <CALLBACK_USB_GetDescriptor+0x20>
 462:	23 30       	cpi	r18, 0x03	; 3
 464:	31 05       	cpc	r19, r1
 466:	69 f0       	breq	.+26     	; 0x482 <CALLBACK_USB_GetDescriptor+0x2a>
 468:	21 30       	cpi	r18, 0x01	; 1
 46a:	31 05       	cpc	r19, r1
 46c:	e9 f4       	brne	.+58     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 46e:	82 e1       	ldi	r24, 0x12	; 18
 470:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 472:	2a e1       	ldi	r18, 0x1A	; 26
 474:	31 e0       	ldi	r19, 0x01	; 1
 476:	1c c0       	rjmp	.+56     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 478:	8e e3       	ldi	r24, 0x3E	; 62
 47a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 47c:	2c ed       	ldi	r18, 0xDC	; 220
 47e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 480:	17 c0       	rjmp	.+46     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 482:	99 27       	eor	r25, r25
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	91 05       	cpc	r25, r1
 488:	49 f0       	breq	.+18     	; 0x49c <CALLBACK_USB_GetDescriptor+0x44>
 48a:	28 f0       	brcs	.+10     	; 0x496 <CALLBACK_USB_GetDescriptor+0x3e>
 48c:	02 97       	sbiw	r24, 0x02	; 2
 48e:	61 f4       	brne	.+24     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 490:	e8 e8       	ldi	r30, 0x88	; 136
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 496:	e8 ed       	ldi	r30, 0xD8	; 216
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 49c:	ee eb       	ldi	r30, 0xBE	; 190
 49e:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4a0:	84 91       	lpm	r24, Z
 4a2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 4a4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 4b0:	fa 01       	movw	r30, r20
 4b2:	31 83       	std	Z+1, r19	; 0x01
 4b4:	20 83       	st	Z, r18
	return Size;
}
 4b6:	08 95       	ret

000004b8 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 4b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 4bc:	eb ee       	ldi	r30, 0xEB	; 235
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	81 60       	ori	r24, 0x01	; 1
 4c4:	80 83       	st	Z, r24
 4c6:	ed ee       	ldi	r30, 0xED	; 237
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	10 82       	st	Z, r1
 4cc:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 4d0:	40 83       	st	Z, r20
 4d2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 4d6:	88 1f       	adc	r24, r24
 4d8:	88 27       	eor	r24, r24
 4da:	88 1f       	adc	r24, r24
 4dc:	08 95       	ret

000004de <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4de:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_ControlRequest>
 4e2:	87 ff       	sbrs	r24, 7
 4e4:	0f c0       	rjmp	.+30     	; 0x504 <__stack+0x5>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 4ea:	82 fd       	sbrc	r24, 2
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4ee:	8e b3       	in	r24, 0x1e	; 30
 4f0:	81 11       	cpse	r24, r1
 4f2:	f9 cf       	rjmp	.-14     	; 0x4e6 <Endpoint_ClearStatusStage+0x8>
 4f4:	10 c0       	rjmp	.+32     	; 0x516 <__stack+0x17>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 4fa:	8b 77       	andi	r24, 0x7B	; 123
 4fc:	0a c0       	rjmp	.+20     	; 0x512 <__stack+0x13>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4fe:	8e b3       	in	r24, 0x1e	; 30
 500:	88 23       	and	r24, r24
 502:	49 f0       	breq	.+18     	; 0x516 <__stack+0x17>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 504:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 508:	80 ff       	sbrs	r24, 0
 50a:	f9 cf       	rjmp	.-14     	; 0x4fe <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 50c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 510:	8e 77       	andi	r24, 0x7E	; 126
 512:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 516:	08 95       	ret

00000518 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 518:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
 51c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
 520:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 522:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 526:	84 2f       	mov	r24, r20
 528:	81 70       	andi	r24, 0x01	; 1
 52a:	40 ff       	sbrs	r20, 0
 52c:	22 c0       	rjmp	.+68     	; 0x572 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 52e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 532:	80 fd       	sbrc	r24, 0
 534:	1c c0       	rjmp	.+56     	; 0x56e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 536:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 538:	88 23       	and	r24, r24
 53a:	99 f0       	breq	.+38     	; 0x562 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 53c:	85 30       	cpi	r24, 0x05	; 5
 53e:	99 f0       	breq	.+38     	; 0x566 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 540:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 544:	85 fd       	sbrc	r24, 5
 546:	11 c0       	rjmp	.+34     	; 0x56a <Endpoint_WaitUntilReady+0x52>
 548:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
 54c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 550:	24 17       	cp	r18, r20
 552:	35 07       	cpc	r19, r21
 554:	31 f3       	breq	.-52     	; 0x522 <Endpoint_WaitUntilReady+0xa>
 556:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 558:	11 f0       	breq	.+4      	; 0x55e <Endpoint_WaitUntilReady+0x46>
 55a:	9a 01       	movw	r18, r20
 55c:	e2 cf       	rjmp	.-60     	; 0x522 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 55e:	84 e0       	ldi	r24, 0x04	; 4
 560:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 572:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 576:	42 ff       	sbrs	r20, 2
 578:	de cf       	rjmp	.-68     	; 0x536 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 57a:	08 95       	ret

0000057c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 57c:	3f d0       	rcall	.+126    	; 0x5fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 57e:	41 d0       	rcall	.+130    	; 0x602 <USB_INT_ClearAllInterrupts>
 580:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 584:	8f 77       	andi	r24, 0x7F	; 127
 586:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 58a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
				USBCON |=  (1 << USBE);
 58e:	80 68       	ori	r24, 0x80	; 128
 590:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 594:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 598:	8f 7d       	andi	r24, 0xDF	; 223
 59a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 59e:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5a0:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5a2:	89 bd       	out	0x29, r24	; 41
 5a4:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5a6:	00 fe       	sbrs	r0, 0
 5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <USB_ResetInterface+0x28>
 5aa:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5ac:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 5b0:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5b4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5b8:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	7c df       	rcall	.-264    	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv>
 5c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5c4:	8e 7f       	andi	r24, 0xFE	; 254
 5c6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 5ca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5ce:	81 60       	ori	r24, 0x01	; 1
 5d0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 5d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 5de:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
 5e8:	08 95       	ret

000005ea <USB_Init>:
 5ea:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <USB_IsInitialized>

	USB_ResetInterface();
 5fa:	c0 cf       	rjmp	.-128    	; 0x57c <USB_ResetInterface>

000005fc <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5fc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 600:	08 95       	ret

00000602 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 602:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 606:	08 95       	ret

00000608 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 62a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 62e:	82 ff       	sbrs	r24, 2
 630:	0a c0       	rjmp	.+20     	; 0x646 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 632:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 636:	82 ff       	sbrs	r24, 2
 638:	06 c0       	rjmp	.+12     	; 0x646 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 63a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 63e:	8b 7f       	andi	r24, 0xFB	; 251
 640:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 644:	bd d2       	rcall	.+1402   	; 0xbc0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 646:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 64a:	80 ff       	sbrs	r24, 0
 64c:	16 c0       	rjmp	.+44     	; 0x67a <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 64e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 652:	80 ff       	sbrs	r24, 0
 654:	12 c0       	rjmp	.+36     	; 0x67a <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 656:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 65a:	8e 7f       	andi	r24, 0xFE	; 254
 65c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 660:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 664:	80 61       	ori	r24, 0x10	; 16
 666:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 66a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 66e:	80 62       	ori	r24, 0x20	; 32
 670:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 674:	19 bc       	out	0x29, r1	; 41
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
 676:	1e ba       	out	0x1e, r1	; 30
 678:	4c de       	rcall	.-872    	; 0x312 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 67a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 67e:	84 ff       	sbrs	r24, 4
 680:	2b c0       	rjmp	.+86     	; 0x6d8 <__vector_11+0xd0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 682:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 686:	84 ff       	sbrs	r24, 4
 688:	27 c0       	rjmp	.+78     	; 0x6d8 <__vector_11+0xd0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 68a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 690:	09 b4       	in	r0, 0x29	; 41
 692:	00 fe       	sbrs	r0, 0
 694:	fd cf       	rjmp	.-6      	; 0x690 <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 696:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 69a:	8f 7d       	andi	r24, 0xDF	; 223
 69c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6a0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 6a4:	8f 7e       	andi	r24, 0xEF	; 239
 6a6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6aa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 6ae:	8f 7e       	andi	r24, 0xEF	; 239
 6b0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6be:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_Device_ConfigurationNumber>
 6c2:	81 11       	cpse	r24, r1
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__vector_11+0xca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 6ca:	87 fd       	sbrc	r24, 7
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__vector_11+0xca>
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <__vector_11+0xcc>
 6d2:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 6d4:	8e bb       	out	0x1e, r24	; 30
 6d6:	18 de       	rcall	.-976    	; 0x308 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6dc:	83 ff       	sbrs	r24, 3
 6de:	26 c0       	rjmp	.+76     	; 0x72c <__vector_11+0x124>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 6e4:	83 ff       	sbrs	r24, 3
 6e6:	22 c0       	rjmp	.+68     	; 0x72c <__vector_11+0x124>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 6ec:	87 7f       	andi	r24, 0xF7	; 247
 6ee:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 6f6:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 6fe:	8e 7f       	andi	r24, 0xFE	; 254
 700:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 704:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 708:	8e 7f       	andi	r24, 0xFE	; 254
 70a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 70e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 712:	80 61       	ori	r24, 0x10	; 16
 714:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 718:	42 e0       	ldi	r20, 0x02	; 2
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	cc de       	rcall	.-616    	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 720:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 724:	88 60       	ori	r24, 0x08	; 8
 726:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 72a:	4a d2       	rcall	.+1172   	; 0xbc0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 72c:	ff 91       	pop	r31
 72e:	ef 91       	pop	r30
 730:	bf 91       	pop	r27
 732:	af 91       	pop	r26
 734:	9f 91       	pop	r25
 736:	8f 91       	pop	r24
 738:	7f 91       	pop	r23
 73a:	6f 91       	pop	r22
 73c:	5f 91       	pop	r21
 73e:	4f 91       	pop	r20
 740:	3f 91       	pop	r19
 742:	2f 91       	pop	r18
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	ff 92       	push	r15
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	ef 93       	push	r30
 778:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 77a:	c9 ee       	ldi	r28, 0xE9	; 233
 77c:	d0 e0       	ldi	r29, 0x00	; 0
 77e:	88 81       	ld	r24, Y
 780:	87 70       	andi	r24, 0x07	; 7
 782:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 784:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 786:	00 ef       	ldi	r16, 0xF0	; 240
 788:	10 e0       	ldi	r17, 0x00	; 0
 78a:	f8 01       	movw	r30, r16
 78c:	80 81       	ld	r24, Z
 78e:	87 7f       	andi	r24, 0xF7	; 247
 790:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 792:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 794:	c7 d0       	rcall	.+398    	; 0x924 <USB_Device_ProcessControlRequest>
 796:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 798:	f8 01       	movw	r30, r16
 79a:	80 81       	ld	r24, Z
 79c:	88 60       	ori	r24, 0x08	; 8
 79e:	80 83       	st	Z, r24
 7a0:	f8 82       	st	Y, r15

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	bf 91       	pop	r27
 7ac:	af 91       	pop	r26
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	7f 91       	pop	r23
 7b4:	6f 91       	pop	r22
 7b6:	5f 91       	pop	r21
 7b8:	4f 91       	pop	r20
 7ba:	3f 91       	pop	r19
 7bc:	2f 91       	pop	r18
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	ff 90       	pop	r15
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7ce:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <USB_ControlRequest+0x6>
 7d2:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <USB_ControlRequest+0x7>
 7d6:	26 17       	cp	r18, r22
 7d8:	37 07       	cpc	r19, r23
 7da:	48 f0       	brcs	.+18     	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x20>
 7dc:	61 15       	cp	r22, r1
 7de:	71 05       	cpc	r23, r1
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x22>
 7e2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 7e6:	2e 77       	andi	r18, 0x7E	; 126
 7e8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x22>
 7ee:	b9 01       	movw	r22, r18
 7f0:	fc 01       	movw	r30, r24
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	61 15       	cp	r22, r1
 7f6:	71 05       	cpc	r23, r1
 7f8:	59 f1       	breq	.+86     	; 0x850 <Endpoint_Write_Control_Stream_LE+0x82>
 7fa:	8e b3       	in	r24, 0x1e	; 30
 7fc:	88 23       	and	r24, r24
 7fe:	c1 f1       	breq	.+112    	; 0x870 <Endpoint_Write_Control_Stream_LE+0xa2>
 800:	85 30       	cpi	r24, 0x05	; 5
 802:	c1 f1       	breq	.+112    	; 0x874 <Endpoint_Write_Control_Stream_LE+0xa6>
 804:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 808:	83 fd       	sbrc	r24, 3
 80a:	30 c0       	rjmp	.+96     	; 0x86c <Endpoint_Write_Control_Stream_LE+0x9e>
 80c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 810:	82 fd       	sbrc	r24, 2
 812:	26 c0       	rjmp	.+76     	; 0x860 <Endpoint_Write_Control_Stream_LE+0x92>
 814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 818:	80 ff       	sbrs	r24, 0
 81a:	ec cf       	rjmp	.-40     	; 0x7f4 <Endpoint_Write_Control_Stream_LE+0x26>
 81c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	51 f0       	breq	.+20     	; 0x83c <Endpoint_Write_Control_Stream_LE+0x6e>
 828:	88 30       	cpi	r24, 0x08	; 8
 82a:	91 05       	cpc	r25, r1
 82c:	38 f4       	brcc	.+14     	; 0x83c <Endpoint_Write_Control_Stream_LE+0x6e>
 82e:	21 91       	ld	r18, Z+
 830:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 834:	61 50       	subi	r22, 0x01	; 1
 836:	71 09       	sbc	r23, r1
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	f3 cf       	rjmp	.-26     	; 0x822 <Endpoint_Write_Control_Stream_LE+0x54>
 83c:	21 e0       	ldi	r18, 0x01	; 1
 83e:	08 97       	sbiw	r24, 0x08	; 8
 840:	09 f0       	breq	.+2      	; 0x844 <Endpoint_Write_Control_Stream_LE+0x76>
 842:	20 e0       	ldi	r18, 0x00	; 0
 844:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 848:	8e 77       	andi	r24, 0x7E	; 126
 84a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 84e:	d2 cf       	rjmp	.-92     	; 0x7f4 <Endpoint_Write_Control_Stream_LE+0x26>
 850:	21 11       	cpse	r18, r1
 852:	d3 cf       	rjmp	.-90     	; 0x7fa <Endpoint_Write_Control_Stream_LE+0x2c>
 854:	05 c0       	rjmp	.+10     	; 0x860 <Endpoint_Write_Control_Stream_LE+0x92>
 856:	8e b3       	in	r24, 0x1e	; 30
 858:	88 23       	and	r24, r24
 85a:	51 f0       	breq	.+20     	; 0x870 <Endpoint_Write_Control_Stream_LE+0xa2>
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	51 f0       	breq	.+20     	; 0x874 <Endpoint_Write_Control_Stream_LE+0xa6>
 860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 864:	82 ff       	sbrs	r24, 2
 866:	f7 cf       	rjmp	.-18     	; 0x856 <Endpoint_Write_Control_Stream_LE+0x88>
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	08 95       	ret
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	08 95       	ret
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	08 95       	ret
 874:	83 e0       	ldi	r24, 0x03	; 3
 876:	08 95       	ret

00000878 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 878:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <USB_ControlRequest+0x6>
 87c:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <USB_ControlRequest+0x7>
 880:	26 17       	cp	r18, r22
 882:	37 07       	cpc	r19, r23
 884:	48 f0       	brcs	.+18     	; 0x898 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 886:	61 15       	cp	r22, r1
 888:	71 05       	cpc	r23, r1
 88a:	39 f4       	brne	.+14     	; 0x89a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 88c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 890:	2e 77       	andi	r18, 0x7E	; 126
 892:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 896:	01 c0       	rjmp	.+2      	; 0x89a <Endpoint_Write_Control_PStream_LE+0x22>
 898:	b9 01       	movw	r22, r18
 89a:	fc 01       	movw	r30, r24
 89c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 89e:	61 15       	cp	r22, r1
 8a0:	71 05       	cpc	r23, r1
 8a2:	61 f1       	breq	.+88     	; 0x8fc <Endpoint_Write_Control_PStream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8a4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8a6:	88 23       	and	r24, r24
 8a8:	c9 f1       	breq	.+114    	; 0x91c <Endpoint_Write_Control_PStream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8aa:	85 30       	cpi	r24, 0x05	; 5
 8ac:	c9 f1       	breq	.+114    	; 0x920 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 8b2:	83 fd       	sbrc	r24, 3
 8b4:	31 c0       	rjmp	.+98     	; 0x918 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 8ba:	82 fd       	sbrc	r24, 2
 8bc:	27 c0       	rjmp	.+78     	; 0x90c <Endpoint_Write_Control_PStream_LE+0x94>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
 8c2:	80 ff       	sbrs	r24, 0
 8c4:	ec cf       	rjmp	.-40     	; 0x89e <Endpoint_Write_Control_PStream_LE+0x26>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 8c6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 8ca:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 8cc:	61 15       	cp	r22, r1
 8ce:	71 05       	cpc	r23, r1
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x70>
 8d2:	88 30       	cpi	r24, 0x08	; 8
 8d4:	91 05       	cpc	r25, r1
 8d6:	40 f4       	brcc	.+16     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 8d8:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8da:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 8de:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 8e0:	61 50       	subi	r22, 0x01	; 1
 8e2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	f2 cf       	rjmp	.-28     	; 0x8cc <Endpoint_Write_Control_PStream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 8e8:	21 e0       	ldi	r18, 0x01	; 1
 8ea:	08 97       	sbiw	r24, 0x08	; 8
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0x78>
 8ee:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 8f4:	8e 77       	andi	r24, 0x7E	; 126
 8f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 8fa:	d1 cf       	rjmp	.-94     	; 0x89e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8fc:	21 11       	cpse	r18, r1
 8fe:	d2 cf       	rjmp	.-92     	; 0x8a4 <Endpoint_Write_Control_PStream_LE+0x2c>
 900:	05 c0       	rjmp	.+10     	; 0x90c <Endpoint_Write_Control_PStream_LE+0x94>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 902:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 904:	88 23       	and	r24, r24
 906:	51 f0       	breq	.+20     	; 0x91c <Endpoint_Write_Control_PStream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 908:	85 30       	cpi	r24, 0x05	; 5
 90a:	51 f0       	breq	.+20     	; 0x920 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 90c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 910:	82 ff       	sbrs	r24, 2
 912:	f7 cf       	rjmp	.-18     	; 0x902 <Endpoint_Write_Control_PStream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 920:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 922:	08 95       	ret

00000924 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
 930:	aa 97       	sbiw	r28, 0x2a	; 42
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	f8 94       	cli
 936:	de bf       	out	0x3e, r29	; 62
 938:	0f be       	out	0x3f, r0	; 63
 93a:	cd bf       	out	0x3d, r28	; 61
 93c:	ec ea       	ldi	r30, 0xAC	; 172
 93e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 940:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 944:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 946:	21 e0       	ldi	r18, 0x01	; 1
 948:	e4 3b       	cpi	r30, 0xB4	; 180
 94a:	f2 07       	cpc	r31, r18
 94c:	c9 f7       	brne	.-14     	; 0x940 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 94e:	f0 dc       	rcall	.-1568   	; 0x330 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 950:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
 954:	83 ff       	sbrs	r24, 3
 956:	1b c1       	rjmp	.+566    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 958:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 95c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <USB_ControlRequest+0x1>
 960:	49 2f       	mov	r20, r25
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	4a 30       	cpi	r20, 0x0A	; 10
 966:	51 05       	cpc	r21, r1
 968:	08 f0       	brcs	.+2      	; 0x96c <USB_Device_ProcessControlRequest+0x48>
 96a:	11 c1       	rjmp	.+546    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
 96c:	fa 01       	movw	r30, r20
 96e:	e6 5c       	subi	r30, 0xC6	; 198
 970:	ff 4f       	sbci	r31, 0xFF	; 255
 972:	f4 c2       	rjmp	.+1512   	; 0xf5c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 974:	80 38       	cpi	r24, 0x80	; 128
 976:	81 f0       	breq	.+32     	; 0x998 <USB_Device_ProcessControlRequest+0x74>
 978:	82 38       	cpi	r24, 0x82	; 130
 97a:	09 f0       	breq	.+2      	; 0x97e <USB_Device_ProcessControlRequest+0x5a>
 97c:	08 c1       	rjmp	.+528    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 97e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x4>
 982:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 984:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 988:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>

			CurrentStatus = Endpoint_IsStalled();
 98c:	85 fb       	bst	r24, 5
 98e:	88 27       	eor	r24, r24
 990:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 992:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 998:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 99c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <USB_Device_RemoteWakeupEnabled>
 9a0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9a2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 9a8:	97 7f       	andi	r25, 0xF7	; 247
 9aa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9ae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
 9b2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 9b6:	c4 c0       	rjmp	.+392    	; 0xb40 <USB_Device_ProcessControlRequest+0x21c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9b8:	28 2f       	mov	r18, r24
 9ba:	2d 7f       	andi	r18, 0xFD	; 253
 9bc:	09 f0       	breq	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0x9c>
 9be:	e7 c0       	rjmp	.+462    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9c0:	88 23       	and	r24, r24
 9c2:	19 f0       	breq	.+6      	; 0x9ca <USB_Device_ProcessControlRequest+0xa6>
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	61 f0       	breq	.+24     	; 0x9e0 <USB_Device_ProcessControlRequest+0xbc>
 9c8:	e2 c0       	rjmp	.+452    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9ca:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
 9ce:	81 30       	cpi	r24, 0x01	; 1
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <USB_Device_ProcessControlRequest+0xb0>
 9d2:	dd c0       	rjmp	.+442    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9d4:	93 30       	cpi	r25, 0x03	; 3
 9d6:	09 f0       	breq	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0xb6>
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <USB_Device_RemoteWakeupEnabled>
 9de:	2b c0       	rjmp	.+86     	; 0xa36 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9e0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
 9e4:	81 11       	cpse	r24, r1
 9e6:	27 c0       	rjmp	.+78     	; 0xa36 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9e8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x4>
 9ec:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <USB_Device_ProcessControlRequest+0xce>
 9f0:	ce c0       	rjmp	.+412    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9f6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9fa:	20 ff       	sbrs	r18, 0
 9fc:	1c c0       	rjmp	.+56     	; 0xa36 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9fe:	93 30       	cpi	r25, 0x03	; 3
 a00:	21 f4       	brne	.+8      	; 0xa0a <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a02:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a06:	80 62       	ori	r24, 0x20	; 32
 a08:	14 c0       	rjmp	.+40     	; 0xa32 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a0a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a0e:	90 61       	ori	r25, 0x10	; 16
 a10:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a14:	21 e0       	ldi	r18, 0x01	; 1
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	a9 01       	movw	r20, r18
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <USB_Device_ProcessControlRequest+0xfc>
 a1c:	44 0f       	add	r20, r20
 a1e:	55 1f       	adc	r21, r21
 a20:	8a 95       	dec	r24
 a22:	e2 f7       	brpl	.-8      	; 0xa1c <USB_Device_ProcessControlRequest+0xf8>
 a24:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
 a28:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a2c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a30:	88 60       	ori	r24, 0x08	; 8
 a32:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a3e:	87 7f       	andi	r24, 0xF7	; 247
 a40:	82 c0       	rjmp	.+260    	; 0xb46 <USB_Device_ProcessControlRequest+0x222>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a42:	81 11       	cpse	r24, r1
 a44:	a4 c0       	rjmp	.+328    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a46:	10 91 ae 01 	lds	r17, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
 a4a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a4c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a4e:	f8 94       	cli
 a50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a54:	87 7f       	andi	r24, 0xF7	; 247
 a56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a5a:	41 dd       	rcall	.-1406   	; 0x4de <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
 a60:	80 ff       	sbrs	r24, 0
 a62:	fc cf       	rjmp	.-8      	; 0xa5c <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a64:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 a68:	80 78       	andi	r24, 0x80	; 128
 a6a:	81 2b       	or	r24, r17

				UDADDR = Temp;
 a6c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
				UDADDR = Temp | (1 << ADDEN);
 a70:	80 68       	ori	r24, 0x80	; 128
 a72:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a76:	11 11       	cpse	r17, r1
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <USB_Device_ProcessControlRequest+0x15a>
 a7a:	82 e0       	ldi	r24, 0x02	; 2
 a7c:	01 c0       	rjmp	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0x15c>
 a7e:	83 e0       	ldi	r24, 0x03	; 3
 a80:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a82:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 a84:	84 c0       	rjmp	.+264    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a86:	80 58       	subi	r24, 0x80	; 128
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	08 f0       	brcs	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x16a>
 a8c:	80 c0       	rjmp	.+256    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a8e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
 a92:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <USB_ControlRequest+0x3>
 a96:	8c 3d       	cpi	r24, 0xDC	; 220
 a98:	53 e0       	ldi	r21, 0x03	; 3
 a9a:	95 07       	cpc	r25, r21
 a9c:	71 f5       	brne	.+92     	; 0xafa <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 aa2:	8a e2       	ldi	r24, 0x2A	; 42
 aa4:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 aa6:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 aa8:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 aaa:	de 01       	movw	r26, r28
 aac:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aae:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 ab0:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ab2:	51 e2       	ldi	r21, 0x21	; 33
 ab4:	e3 2f       	mov	r30, r19
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 abc:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 abe:	20 ff       	sbrs	r18, 0
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <USB_Device_ProcessControlRequest+0x1a4>
					{
						SerialByte >>= 4;
 ac2:	e2 95       	swap	r30
 ac4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ac6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ac8:	ef 70       	andi	r30, 0x0F	; 15
 aca:	8e 2f       	mov	r24, r30
 acc:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ace:	ea 30       	cpi	r30, 0x0A	; 10
 ad0:	10 f0       	brcs	.+4      	; 0xad6 <USB_Device_ProcessControlRequest+0x1b2>
 ad2:	c7 96       	adiw	r24, 0x37	; 55
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x1b4>
 ad6:	c0 96       	adiw	r24, 0x30	; 48
 ad8:	8d 93       	st	X+, r24
 ada:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 adc:	2f 5f       	subi	r18, 0xFF	; 255
 ade:	24 31       	cpi	r18, 0x14	; 20
 ae0:	49 f7       	brne	.-46     	; 0xab4 <USB_Device_ProcessControlRequest+0x190>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 ae2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ae4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ae8:	87 7f       	andi	r24, 0xF7	; 247
 aea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 aee:	6a e2       	ldi	r22, 0x2A	; 42
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	ce 01       	movw	r24, r28
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	6b de       	rcall	.-810    	; 0x7ce <Endpoint_Write_Control_Stream_LE>
 af8:	12 c0       	rjmp	.+36     	; 0xb1e <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 afa:	ae 01       	movw	r20, r28
 afc:	4f 5f       	subi	r20, 0xFF	; 255
 afe:	5f 4f       	sbci	r21, 0xFF	; 255
 b00:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x4>
 b04:	a9 dc       	rcall	.-1710   	; 0x458 <CALLBACK_USB_GetDescriptor>
 b06:	bc 01       	movw	r22, r24
 b08:	89 2b       	or	r24, r25
 b0a:	09 f4       	brne	.+2      	; 0xb0e <USB_Device_ProcessControlRequest+0x1ea>
 b0c:	40 c0       	rjmp	.+128    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
 b0e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b12:	97 7f       	andi	r25, 0xF7	; 247
 b14:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	9a 81       	ldd	r25, Y+2	; 0x02
 b1c:	ad de       	rcall	.-678    	; 0x878 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b22:	8b 77       	andi	r24, 0x7B	; 123
 b24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b28:	32 c0       	rjmp	.+100    	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b2a:	80 38       	cpi	r24, 0x80	; 128
 b2c:	81 f5       	brne	.+96     	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b32:	87 7f       	andi	r24, 0xF7	; 247
 b34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b38:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b3c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b44:	8e 77       	andi	r24, 0x7E	; 126
 b46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b4a:	c9 dc       	rcall	.-1646   	; 0x4de <Endpoint_ClearStatusStage>
 b4c:	20 c0       	rjmp	.+64     	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b4e:	81 11       	cpse	r24, r1
 b50:	1e c0       	rjmp	.+60     	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b52:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
 b56:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <USB_ControlRequest+0x3>
 b5a:	99 27       	eor	r25, r25
 b5c:	02 97       	sbiw	r24, 0x02	; 2
 b5e:	bc f4       	brge	.+46     	; 0xb8e <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b64:	87 7f       	andi	r24, 0xF7	; 247
 b66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b6a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
 b6e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 b72:	b5 dc       	rcall	.-1686   	; 0x4de <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b74:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_Device_ConfigurationNumber>
 b78:	81 11       	cpse	r24, r1
 b7a:	06 c0       	rjmp	.+12     	; 0xb88 <USB_Device_ProcessControlRequest+0x264>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b7c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b80:	87 fd       	sbrc	r24, 7
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <USB_Device_ProcessControlRequest+0x264>
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	01 c0       	rjmp	.+2      	; 0xb8a <USB_Device_ProcessControlRequest+0x266>
 b88:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
 b8a:	8e bb       	out	0x1e, r24	; 30
 b8c:	c6 db       	rcall	.-2164   	; 0x31a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b92:	83 ff       	sbrs	r24, 3
 b94:	0a c0       	rjmp	.+20     	; 0xbaa <USB_Device_ProcessControlRequest+0x286>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b96:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 b9a:	80 62       	ori	r24, 0x20	; 32
 b9c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ba4:	87 7f       	andi	r24, 0xF7	; 247
 ba6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 baa:	aa 96       	adiw	r28, 0x2a	; 42
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	f8 94       	cli
 bb0:	de bf       	out	0x3e, r29	; 62
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	cd bf       	out	0x3d, r28	; 61
 bb6:	df 91       	pop	r29
 bb8:	cf 91       	pop	r28
 bba:	1f 91       	pop	r17
 bbc:	0f 91       	pop	r16
 bbe:	08 95       	ret

00000bc0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 bc0:	08 95       	ret

00000bc2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bc2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 bc4:	8e b3       	in	r24, 0x1e	; 30
 bc6:	88 23       	and	r24, r24
 bc8:	59 f0       	breq	.+22     	; 0xbe0 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 bca:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 bce:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bd0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 bd8:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 bda:	a4 de       	rcall	.-696    	; 0x924 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bdc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 be0:	cf 91       	pop	r28
 be2:	08 95       	ret

00000be4 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	ec 01       	movw	r28, r24
 bec:	fc 01       	movw	r30, r24
 bee:	3d 96       	adiw	r30, 0x0d	; 13
 bf0:	89 e0       	ldi	r24, 0x09	; 9
 bf2:	df 01       	movw	r26, r30
 bf4:	1d 92       	st	X+, r1
 bf6:	8a 95       	dec	r24
 bf8:	e9 f7       	brne	.-6      	; 0xbf4 <CDC_Device_ConfigureEndpoints+0x10>
 bfa:	11 e0       	ldi	r17, 0x01	; 1
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
 bfe:	81 13       	cpse	r24, r17
 c00:	05 c0       	rjmp	.+10     	; 0xc0c <CDC_Device_ConfigureEndpoints+0x28>
 c02:	ea 81       	ldd	r30, Y+2	; 0x02
 c04:	fb 81       	ldd	r31, Y+3	; 0x03
 c06:	8c 81       	ldd	r24, Y+4	; 0x04
 c08:	90 e8       	ldi	r25, 0x80	; 128
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <CDC_Device_ConfigureEndpoints+0x36>
 c0c:	8d 81       	ldd	r24, Y+5	; 0x05
 c0e:	81 13       	cpse	r24, r17
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <CDC_Device_ConfigureEndpoints+0x3a>
 c12:	ee 81       	ldd	r30, Y+6	; 0x06
 c14:	ff 81       	ldd	r31, Y+7	; 0x07
 c16:	88 85       	ldd	r24, Y+8	; 0x08
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	62 e0       	ldi	r22, 0x02	; 2
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <CDC_Device_ConfigureEndpoints+0x54>
 c1e:	89 85       	ldd	r24, Y+9	; 0x09
 c20:	81 17       	cp	r24, r17
 c22:	29 f0       	breq	.+10     	; 0xc2e <CDC_Device_ConfigureEndpoints+0x4a>
 c24:	1f 5f       	subi	r17, 0xFF	; 255
 c26:	15 30       	cpi	r17, 0x05	; 5
 c28:	49 f7       	brne	.-46     	; 0xbfc <CDC_Device_ConfigureEndpoints+0x18>
 c2a:	81 e0       	ldi	r24, 0x01	; 1
 c2c:	24 c0       	rjmp	.+72     	; 0xc76 <CDC_Device_ConfigureEndpoints+0x92>
 c2e:	ea 85       	ldd	r30, Y+10	; 0x0a
 c30:	fb 85       	ldd	r31, Y+11	; 0x0b
 c32:	8c 85       	ldd	r24, Y+12	; 0x0c
 c34:	90 e8       	ldi	r25, 0x80	; 128
 c36:	63 e0       	ldi	r22, 0x03	; 3
 c38:	81 11       	cpse	r24, r1
 c3a:	84 e0       	ldi	r24, 0x04	; 4
 c3c:	28 e0       	ldi	r18, 0x08	; 8
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	40 e0       	ldi	r20, 0x00	; 0
 c42:	2e 17       	cp	r18, r30
 c44:	3f 07       	cpc	r19, r31
 c46:	20 f4       	brcc	.+8      	; 0xc50 <CDC_Device_ConfigureEndpoints+0x6c>
 c48:	4f 5f       	subi	r20, 0xFF	; 255
 c4a:	22 0f       	add	r18, r18
 c4c:	33 1f       	adc	r19, r19
 c4e:	f9 cf       	rjmp	.-14     	; 0xc42 <CDC_Device_ConfigureEndpoints+0x5e>
 c50:	42 95       	swap	r20
 c52:	40 7f       	andi	r20, 0xF0	; 240
 c54:	82 60       	ori	r24, 0x02	; 2
 c56:	48 2b       	or	r20, r24
 c58:	70 e0       	ldi	r23, 0x00	; 0
 c5a:	86 e0       	ldi	r24, 0x06	; 6
 c5c:	66 0f       	add	r22, r22
 c5e:	77 1f       	adc	r23, r23
 c60:	8a 95       	dec	r24
 c62:	e1 f7       	brne	.-8      	; 0xc5c <CDC_Device_ConfigureEndpoints+0x78>
 c64:	81 e0       	ldi	r24, 0x01	; 1
 c66:	91 11       	cpse	r25, r1
 c68:	01 c0       	rjmp	.+2      	; 0xc6c <CDC_Device_ConfigureEndpoints+0x88>
 c6a:	80 e0       	ldi	r24, 0x00	; 0
 c6c:	68 2b       	or	r22, r24
 c6e:	81 2f       	mov	r24, r17
 c70:	23 dc       	rcall	.-1978   	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv>
 c72:	81 11       	cpse	r24, r1
 c74:	d7 cf       	rjmp	.-82     	; 0xc24 <CDC_Device_ConfigureEndpoints+0x40>
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
 c7a:	1f 91       	pop	r17
 c7c:	08 95       	ret

00000c7e <CDC_Device_SendByte>:
 c7e:	0f 93       	push	r16
 c80:	1f 93       	push	r17
 c82:	cf 93       	push	r28
 c84:	2e b3       	in	r18, 0x1e	; 30
 c86:	24 30       	cpi	r18, 0x04	; 4
 c88:	f1 f4       	brne	.+60     	; 0xcc6 <CDC_Device_SendByte+0x48>
 c8a:	fc 01       	movw	r30, r24
 c8c:	07 85       	ldd	r16, Z+15	; 0x0f
 c8e:	10 89       	ldd	r17, Z+16	; 0x10
 c90:	21 89       	ldd	r18, Z+17	; 0x11
 c92:	32 89       	ldd	r19, Z+18	; 0x12
 c94:	01 2b       	or	r16, r17
 c96:	02 2b       	or	r16, r18
 c98:	03 2b       	or	r16, r19
 c9a:	a9 f0       	breq	.+42     	; 0xcc6 <CDC_Device_SendByte+0x48>
 c9c:	c6 2f       	mov	r28, r22
 c9e:	81 81       	ldd	r24, Z+1	; 0x01
 ca0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 ca4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ca8:	85 ff       	sbrs	r24, 5
 caa:	04 c0       	rjmp	.+8      	; 0xcb4 <CDC_Device_SendByte+0x36>
 cac:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	0a c0       	rjmp	.+20     	; 0xcc8 <CDC_Device_SendByte+0x4a>
 cb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 cb8:	8e 77       	andi	r24, 0x7E	; 126
 cba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 cbe:	2c dc       	rcall	.-1960   	; 0x518 <Endpoint_WaitUntilReady>
 cc0:	88 23       	and	r24, r24
 cc2:	a1 f3       	breq	.-24     	; 0xcac <CDC_Device_SendByte+0x2e>
 cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <CDC_Device_SendByte+0x4a>
 cc6:	82 e0       	ldi	r24, 0x02	; 2
 cc8:	cf 91       	pop	r28
 cca:	1f 91       	pop	r17
 ccc:	0f 91       	pop	r16
 cce:	08 95       	ret

00000cd0 <CDC_Device_Flush>:
 cd0:	2e b3       	in	r18, 0x1e	; 30
 cd2:	24 30       	cpi	r18, 0x04	; 4
 cd4:	19 f5       	brne	.+70     	; 0xd1c <CDC_Device_Flush+0x4c>
 cd6:	fc 01       	movw	r30, r24
 cd8:	47 85       	ldd	r20, Z+15	; 0x0f
 cda:	50 89       	ldd	r21, Z+16	; 0x10
 cdc:	61 89       	ldd	r22, Z+17	; 0x11
 cde:	72 89       	ldd	r23, Z+18	; 0x12
 ce0:	45 2b       	or	r20, r21
 ce2:	46 2b       	or	r20, r22
 ce4:	47 2b       	or	r20, r23
 ce6:	d1 f0       	breq	.+52     	; 0xd1c <CDC_Device_Flush+0x4c>
 ce8:	81 81       	ldd	r24, Z+1	; 0x01
 cea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 cee:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 cf2:	88 23       	and	r24, r24
 cf4:	89 f0       	breq	.+34     	; 0xd18 <CDC_Device_Flush+0x48>
 cf6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 cfe:	8e 77       	andi	r24, 0x7E	; 126
 d00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d04:	95 fd       	sbrc	r25, 5
 d06:	08 c0       	rjmp	.+16     	; 0xd18 <CDC_Device_Flush+0x48>
 d08:	07 dc       	rcall	.-2034   	; 0x518 <Endpoint_WaitUntilReady>
 d0a:	81 11       	cpse	r24, r1
 d0c:	08 c0       	rjmp	.+16     	; 0xd1e <CDC_Device_Flush+0x4e>
 d0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d12:	8e 77       	andi	r24, 0x7E	; 126
 d14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d18:	80 e0       	ldi	r24, 0x00	; 0
 d1a:	08 95       	ret
 d1c:	82 e0       	ldi	r24, 0x02	; 2
 d1e:	08 95       	ret

00000d20 <CDC_Device_USBTask>:
 d20:	2e b3       	in	r18, 0x1e	; 30
 d22:	24 30       	cpi	r18, 0x04	; 4
 d24:	51 f4       	brne	.+20     	; 0xd3a <CDC_Device_USBTask+0x1a>
 d26:	fc 01       	movw	r30, r24
 d28:	47 85       	ldd	r20, Z+15	; 0x0f
 d2a:	50 89       	ldd	r21, Z+16	; 0x10
 d2c:	61 89       	ldd	r22, Z+17	; 0x11
 d2e:	72 89       	ldd	r23, Z+18	; 0x12
 d30:	45 2b       	or	r20, r21
 d32:	46 2b       	or	r20, r22
 d34:	47 2b       	or	r20, r23
 d36:	09 f0       	breq	.+2      	; 0xd3a <CDC_Device_USBTask+0x1a>
 d38:	cb cf       	rjmp	.-106    	; 0xcd0 <CDC_Device_Flush>
 d3a:	08 95       	ret

00000d3c <CDC_Device_BytesReceived>:
 d3c:	2e b3       	in	r18, 0x1e	; 30
 d3e:	24 30       	cpi	r18, 0x04	; 4
 d40:	c9 f4       	brne	.+50     	; 0xd74 <CDC_Device_BytesReceived+0x38>
 d42:	fc 01       	movw	r30, r24
 d44:	47 85       	ldd	r20, Z+15	; 0x0f
 d46:	50 89       	ldd	r21, Z+16	; 0x10
 d48:	61 89       	ldd	r22, Z+17	; 0x11
 d4a:	72 89       	ldd	r23, Z+18	; 0x12
 d4c:	45 2b       	or	r20, r21
 d4e:	46 2b       	or	r20, r22
 d50:	47 2b       	or	r20, r23
 d52:	81 f0       	breq	.+32     	; 0xd74 <CDC_Device_BytesReceived+0x38>
 d54:	85 81       	ldd	r24, Z+5	; 0x05
 d56:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 d5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d5e:	82 ff       	sbrs	r24, 2
 d60:	09 c0       	rjmp	.+18     	; 0xd74 <CDC_Device_BytesReceived+0x38>
 d62:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 d66:	81 11       	cpse	r24, r1
 d68:	08 c0       	rjmp	.+16     	; 0xd7a <CDC_Device_BytesReceived+0x3e>
 d6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d6e:	8b 77       	andi	r24, 0x7B	; 123
 d70:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	08 95       	ret
 d7a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	08 95       	ret

00000d82 <CDC_Device_ReceiveByte>:
 d82:	2e b3       	in	r18, 0x1e	; 30
 d84:	24 30       	cpi	r18, 0x04	; 4
 d86:	19 f0       	breq	.+6      	; 0xd8e <CDC_Device_ReceiveByte+0xc>
 d88:	8f ef       	ldi	r24, 0xFF	; 255
 d8a:	9f ef       	ldi	r25, 0xFF	; 255
 d8c:	08 95       	ret
 d8e:	fc 01       	movw	r30, r24
 d90:	47 85       	ldd	r20, Z+15	; 0x0f
 d92:	50 89       	ldd	r21, Z+16	; 0x10
 d94:	61 89       	ldd	r22, Z+17	; 0x11
 d96:	72 89       	ldd	r23, Z+18	; 0x12
 d98:	45 2b       	or	r20, r21
 d9a:	46 2b       	or	r20, r22
 d9c:	47 2b       	or	r20, r23
 d9e:	a1 f3       	breq	.-24     	; 0xd88 <CDC_Device_ReceiveByte+0x6>
 da0:	85 81       	ldd	r24, Z+5	; 0x05
 da2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 da6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 daa:	82 ff       	sbrs	r24, 2
 dac:	ed cf       	rjmp	.-38     	; 0xd88 <CDC_Device_ReceiveByte+0x6>
 dae:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 db2:	88 23       	and	r24, r24
 db4:	21 f0       	breq	.+8      	; 0xdbe <CDC_Device_ReceiveByte+0x3c>
 db6:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 dba:	30 e0       	ldi	r19, 0x00	; 0
 dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <CDC_Device_ReceiveByte+0x40>
 dbe:	2f ef       	ldi	r18, 0xFF	; 255
 dc0:	3f ef       	ldi	r19, 0xFF	; 255
 dc2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 dc6:	81 11       	cpse	r24, r1
 dc8:	05 c0       	rjmp	.+10     	; 0xdd4 <CDC_Device_ReceiveByte+0x52>
 dca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 dce:	8b 77       	andi	r24, 0x7B	; 123
 dd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 dd4:	c9 01       	movw	r24, r18
 dd6:	08 95       	ret

00000dd8 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 dd8:	08 95       	ret

00000dda <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 dda:	cf 93       	push	r28
 ddc:	df 93       	push	r29
 dde:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 de0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (!(Endpoint_IsSETUPReceived()))
 de4:	83 ff       	sbrs	r24, 3
 de6:	95 c0       	rjmp	.+298    	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 de8:	88 81       	ld	r24, Y
 dea:	90 e0       	ldi	r25, 0x00	; 0
 dec:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x4>
 df0:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <USB_ControlRequest+0x5>
 df4:	28 17       	cp	r18, r24
 df6:	39 07       	cpc	r19, r25
 df8:	09 f0       	breq	.+2      	; 0xdfc <CDC_Device_ProcessControlRequest+0x22>
 dfa:	8b c0       	rjmp	.+278    	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
 dfc:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <USB_ControlRequest+0x1>
 e00:	81 32       	cpi	r24, 0x21	; 33
 e02:	59 f0       	breq	.+22     	; 0xe1a <CDC_Device_ProcessControlRequest+0x40>
 e04:	18 f4       	brcc	.+6      	; 0xe0c <CDC_Device_ProcessControlRequest+0x32>
 e06:	80 32       	cpi	r24, 0x20	; 32
 e08:	d1 f1       	breq	.+116    	; 0xe7e <CDC_Device_ProcessControlRequest+0xa4>
 e0a:	83 c0       	rjmp	.+262    	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
 e0c:	82 32       	cpi	r24, 0x22	; 34
 e0e:	09 f4       	brne	.+2      	; 0xe12 <CDC_Device_ProcessControlRequest+0x38>
 e10:	5f c0       	rjmp	.+190    	; 0xed0 <CDC_Device_ProcessControlRequest+0xf6>
 e12:	83 32       	cpi	r24, 0x23	; 35
 e14:	09 f4       	brne	.+2      	; 0xe18 <CDC_Device_ProcessControlRequest+0x3e>
 e16:	6d c0       	rjmp	.+218    	; 0xef2 <CDC_Device_ProcessControlRequest+0x118>
 e18:	7c c0       	rjmp	.+248    	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e1a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_ControlRequest>
 e1e:	81 3a       	cpi	r24, 0xA1	; 161
 e20:	09 f0       	breq	.+2      	; 0xe24 <CDC_Device_ProcessControlRequest+0x4a>
 e22:	77 c0       	rjmp	.+238    	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 e28:	87 7f       	andi	r24, 0xF7	; 247
 e2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
 e30:	98 89       	ldd	r25, Y+16	; 0x10
 e32:	a9 89       	ldd	r26, Y+17	; 0x11
 e34:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
 e3a:	49 2f       	mov	r20, r25
 e3c:	5a 2f       	mov	r21, r26
 e3e:	6b 2f       	mov	r22, r27
 e40:	77 27       	eor	r23, r23
 e42:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 16);
 e46:	ad 01       	movw	r20, r26
 e48:	66 27       	eor	r22, r22
 e4a:	77 27       	eor	r23, r23
 e4c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 24);
 e50:	8b 2f       	mov	r24, r27
 e52:	99 27       	eor	r25, r25
 e54:	aa 27       	eor	r26, r26
 e56:	bb 27       	eor	r27, r27
 e58:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 e5c:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e5e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 e62:	8c 89       	ldd	r24, Y+20	; 0x14
 e64:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 e68:	8d 89       	ldd	r24, Y+21	; 0x15
 e6a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 e72:	8e 77       	andi	r24, 0x7E	; 126
 e74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 e7c:	30 cb       	rjmp	.-2464   	; 0x4de <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e7e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_ControlRequest>
 e82:	81 32       	cpi	r24, 0x21	; 33
 e84:	09 f0       	breq	.+2      	; 0xe88 <CDC_Device_ProcessControlRequest+0xae>
 e86:	45 c0       	rjmp	.+138    	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 e8c:	87 7f       	andi	r24, 0xF7	; 247
 e8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 e92:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[1] = UEDATX;
 e96:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[2] = UEDATX;
 e9a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[3] = UEDATX;
 e9e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 ea2:	3f 87       	std	Y+15, r19	; 0x0f
 ea4:	28 8b       	std	Y+16, r18	; 0x10
 ea6:	99 8b       	std	Y+17, r25	; 0x11
 ea8:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 eaa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 eae:	8b 8b       	std	Y+19, r24	; 0x13
 eb0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 eb4:	8c 8b       	std	Y+20, r24	; 0x14
 eb6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 eba:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ebc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ec0:	8b 77       	andi	r24, 0x7B	; 123
 ec2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 ec6:	0b db       	rcall	.-2538   	; 0x4de <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ec8:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 eca:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ecc:	cf 91       	pop	r28
 ece:	33 ca       	rjmp	.-2970   	; 0x336 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ed0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_ControlRequest>
 ed4:	81 32       	cpi	r24, 0x21	; 33
 ed6:	e9 f4       	brne	.+58     	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ed8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 edc:	87 7f       	andi	r24, 0xF7	; 247
 ede:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 ee2:	fd da       	rcall	.-2566   	; 0x4de <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 ee4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 ee8:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 eea:	ce 01       	movw	r24, r28
 eec:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 eee:	cf 91       	pop	r28
 ef0:	9f ca       	rjmp	.-2754   	; 0x430 <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ef2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_ControlRequest>
 ef6:	81 32       	cpi	r24, 0x21	; 33
 ef8:	61 f4       	brne	.+24     	; 0xf12 <CDC_Device_ProcessControlRequest+0x138>
 efa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 efe:	87 7f       	andi	r24, 0xF7	; 247
 f00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f04:	ec da       	rcall	.-2600   	; 0x4de <Endpoint_ClearStatusStage>
 f06:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <USB_ControlRequest+0x2>
			}

			break;
	}
}
 f0a:	ce 01       	movw	r24, r28
 f0c:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f0e:	cf 91       	pop	r28
 f10:	63 cf       	rjmp	.-314    	; 0xdd8 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f12:	df 91       	pop	r29
 f14:	cf 91       	pop	r28
 f16:	08 95       	ret

00000f18 <__udivmodsi4>:
 f18:	a1 e2       	ldi	r26, 0x21	; 33
 f1a:	1a 2e       	mov	r1, r26
 f1c:	aa 1b       	sub	r26, r26
 f1e:	bb 1b       	sub	r27, r27
 f20:	fd 01       	movw	r30, r26
 f22:	0d c0       	rjmp	.+26     	; 0xf3e <__udivmodsi4_ep>

00000f24 <__udivmodsi4_loop>:
 f24:	aa 1f       	adc	r26, r26
 f26:	bb 1f       	adc	r27, r27
 f28:	ee 1f       	adc	r30, r30
 f2a:	ff 1f       	adc	r31, r31
 f2c:	a2 17       	cp	r26, r18
 f2e:	b3 07       	cpc	r27, r19
 f30:	e4 07       	cpc	r30, r20
 f32:	f5 07       	cpc	r31, r21
 f34:	20 f0       	brcs	.+8      	; 0xf3e <__udivmodsi4_ep>
 f36:	a2 1b       	sub	r26, r18
 f38:	b3 0b       	sbc	r27, r19
 f3a:	e4 0b       	sbc	r30, r20
 f3c:	f5 0b       	sbc	r31, r21

00000f3e <__udivmodsi4_ep>:
 f3e:	66 1f       	adc	r22, r22
 f40:	77 1f       	adc	r23, r23
 f42:	88 1f       	adc	r24, r24
 f44:	99 1f       	adc	r25, r25
 f46:	1a 94       	dec	r1
 f48:	69 f7       	brne	.-38     	; 0xf24 <__udivmodsi4_loop>
 f4a:	60 95       	com	r22
 f4c:	70 95       	com	r23
 f4e:	80 95       	com	r24
 f50:	90 95       	com	r25
 f52:	9b 01       	movw	r18, r22
 f54:	ac 01       	movw	r20, r24
 f56:	bd 01       	movw	r22, r26
 f58:	cf 01       	movw	r24, r30
 f5a:	08 95       	ret

00000f5c <__tablejump2__>:
 f5c:	ee 0f       	add	r30, r30
 f5e:	ff 1f       	adc	r31, r31
 f60:	05 90       	lpm	r0, Z+
 f62:	f4 91       	lpm	r31, Z
 f64:	e0 2d       	mov	r30, r0
 f66:	09 94       	ijmp

00000f68 <_exit>:
 f68:	f8 94       	cli

00000f6a <__stop_program>:
 f6a:	ff cf       	rjmp	.-2      	; 0xf6a <__stop_program>
