   1               		.file	"HID.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.HID_Device_ProcessControlRequest,"ax",@progbits
  12               	.global	HID_Device_ProcessControlRequest
  14               	HID_Device_ProcessControlRequest:
  15               	.LFB97:
  16               		.file 1 "../../LUFA/Drivers/USB/Class/Device/HID.c"
   1:../../LUFA/Drivers/USB/Class/Device/HID.c **** /*
   2:../../LUFA/Drivers/USB/Class/Device/HID.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/HID.c ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
   5:../../LUFA/Drivers/USB/Class/Device/HID.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/HID.c ****            www.lufa-lib.org
   7:../../LUFA/Drivers/USB/Class/Device/HID.c **** */
   8:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
   9:../../LUFA/Drivers/USB/Class/Device/HID.c **** /*
  10:../../LUFA/Drivers/USB/Class/Device/HID.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  12:../../LUFA/Drivers/USB/Class/Device/HID.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/Class/Device/HID.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/HID.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/Class/Device/HID.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/HID.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/Class/Device/HID.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/Class/Device/HID.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/Class/Device/HID.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  21:../../LUFA/Drivers/USB/Class/Device/HID.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/HID.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/HID.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/HID.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/HID.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/HID.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/HID.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/HID.c ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/HID.c **** */
  30:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  31:../../LUFA/Drivers/USB/Class/Device/HID.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/Class/Device/HID.c **** #include "../../Core/USBMode.h"
  33:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  34:../../LUFA/Drivers/USB/Class/Device/HID.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  36:../../LUFA/Drivers/USB/Class/Device/HID.c **** #define  __INCLUDE_FROM_HID_DRIVER
  37:../../LUFA/Drivers/USB/Class/Device/HID.c **** #define  __INCLUDE_FROM_HID_DEVICE_C
  38:../../LUFA/Drivers/USB/Class/Device/HID.c **** #include "HID.h"
  39:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  40:../../LUFA/Drivers/USB/Class/Device/HID.c **** void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
  41:../../LUFA/Drivers/USB/Class/Device/HID.c **** {
  17               		.loc 1 41 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 5F92      		push r5
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 5, -2
  24 0002 6F92      		push r6
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 6, -3
  28 0004 7F92      		push r7
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 7, -4
  32 0006 8F92      		push r8
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 8, -5
  36 0008 9F92      		push r9
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 9, -6
  40 000a AF92      		push r10
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 10, -7
  44 000c BF92      		push r11
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 11, -8
  48 000e CF92      		push r12
  49               	.LCFI7:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 12, -9
  52 0010 DF92      		push r13
  53               	.LCFI8:
  54               		.cfi_def_cfa_offset 11
  55               		.cfi_offset 13, -10
  56 0012 EF92      		push r14
  57               	.LCFI9:
  58               		.cfi_def_cfa_offset 12
  59               		.cfi_offset 14, -11
  60 0014 FF92      		push r15
  61               	.LCFI10:
  62               		.cfi_def_cfa_offset 13
  63               		.cfi_offset 15, -12
  64 0016 0F93      		push r16
  65               	.LCFI11:
  66               		.cfi_def_cfa_offset 14
  67               		.cfi_offset 16, -13
  68 0018 1F93      		push r17
  69               	.LCFI12:
  70               		.cfi_def_cfa_offset 15
  71               		.cfi_offset 17, -14
  72 001a CF93      		push r28
  73               	.LCFI13:
  74               		.cfi_def_cfa_offset 16
  75               		.cfi_offset 28, -15
  76 001c DF93      		push r29
  77               	.LCFI14:
  78               		.cfi_def_cfa_offset 17
  79               		.cfi_offset 29, -16
  80 001e 00D0      		rcall .
  81 0020 1F92      		push __zero_reg__
  82               	.LCFI15:
  83               		.cfi_def_cfa_offset 20
  84 0022 CDB7      		in r28,__SP_L__
  85 0024 DEB7      		in r29,__SP_H__
  86               	.LCFI16:
  87               		.cfi_def_cfa_register 28
  88               	/* prologue: function */
  89               	/* frame size = 3 */
  90               	/* stack size = 18 */
  91               	.L__stack_usage = 18
  92 0026 7C01      		movw r14,r24
  42:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (!(Endpoint_IsSETUPReceived()))
  43:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
  44:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  45:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
  46:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
  47:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  48:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	switch (USB_ControlRequest.bRequest)
  49:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
  50:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_GetReport:
  51:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  52:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
  53:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = 0;
  54:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
  55:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
  56:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
  57:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  58:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				memset(ReportData, 0, sizeof(ReportData));
  59:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  60:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &Repor
  61:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  62:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
  63:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				{
  64:../../LUFA/Drivers/USB/Class/Device/HID.c **** 					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
  65:../../LUFA/Drivers/USB/Class/Device/HID.c **** 					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
  66:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				}
  67:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				
  68:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
  69:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  70:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
  71:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
  72:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearOUT();
  73:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
  74:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  75:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
  76:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_SetReport:
  77:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  78:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
  79:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = USB_ControlRequest.wLength;
  80:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
  81:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
  82:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportData[ReportSize];
  83:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  84:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
  85:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
  86:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
  87:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				
  88:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
  89:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 
  90:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
  91:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  92:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
  93:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_GetProtocol:
  94:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  95:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
  96:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
  97:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
  98:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
  99:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 100:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 101:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 102:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 103:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_SetProtocol:
 104:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 105:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 106:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
 107:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 108:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 109:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 110:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 111:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 112:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 113:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_SetIdle:
 114:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 115:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 116:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
 117:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 118:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 119:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 120:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 121:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 122:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 123:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_GetIdle:
 124:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 125:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 126:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
 127:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 128:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
 129:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 130:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 131:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 132:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 133:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	}
 134:../../LUFA/Drivers/USB/Class/Device/HID.c **** }
  93               		.loc 1 134 0
  94 0028 6DB6      		in r6,__SP_L__
  95 002a 7EB6      		in r7,__SP_H__
  96               	.LBB49:
  97               	.LBB50:
  98               		.file 2 "../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  99               		.loc 2 491 0
 100 002c 8091 E800 		lds r24,232
 101               	.LVL1:
 102               	.LBE50:
 103               	.LBE49:
  42:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (!(Endpoint_IsSETUPReceived()))
 104               		.loc 1 42 0
 105 0030 83FF      		sbrs r24,3
 106 0032 00C0      		rjmp .L1
  45:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
 107               		.loc 1 45 0
 108 0034 F701      		movw r30,r14
 109 0036 8081      		ld r24,Z
 110 0038 90E0      		ldi r25,0
 111 003a 2091 0000 		lds r18,USB_ControlRequest+4
 112 003e 3091 0000 		lds r19,USB_ControlRequest+4+1
 113 0042 2817      		cp r18,r24
 114 0044 3907      		cpc r19,r25
 115 0046 01F0      		breq .+2
 116 0048 00C0      		rjmp .L1
  48:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
 117               		.loc 1 48 0
 118 004a 8091 0000 		lds r24,USB_ControlRequest+1
 119 004e 8330      		cpi r24,lo8(3)
 120 0050 01F4      		brne .+2
 121 0052 00C0      		rjmp .L3
 122 0054 00F4      		brsh .L4
 123 0056 8130      		cpi r24,lo8(1)
 124 0058 01F0      		breq .L5
 125 005a 8230      		cpi r24,lo8(2)
 126 005c 01F4      		brne .+2
 127 005e 00C0      		rjmp .L6
 128 0060 00C0      		rjmp .L1
 129               	.L4:
 130 0062 8A30      		cpi r24,lo8(10)
 131 0064 01F4      		brne .+2
 132 0066 00C0      		rjmp .L7
 133 0068 8B30      		cpi r24,lo8(11)
 134 006a 01F4      		brne .+2
 135 006c 00C0      		rjmp .L8
 136 006e 8930      		cpi r24,lo8(9)
 137 0070 01F0      		breq .+2
 138 0072 00C0      		rjmp .L1
 139 0074 00C0      		rjmp .L21
 140               	.L5:
  51:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 141               		.loc 1 51 0
 142 0076 8091 0000 		lds r24,USB_ControlRequest
 143 007a 813A      		cpi r24,lo8(-95)
 144 007c 01F0      		breq .+2
 145 007e 00C0      		rjmp .L1
 146               	.LBB51:
  52:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = 0;
 147               		.loc 1 52 0
 148 0080 ADB6      		in r10,__SP_L__
 149 0082 BEB6      		in r11,__SP_H__
  53:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 150               		.loc 1 53 0
 151 0084 1A82      		std Y+2,__zero_reg__
 152 0086 1982      		std Y+1,__zero_reg__
  54:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 153               		.loc 1 54 0
 154 0088 0091 0000 		lds r16,USB_ControlRequest+2
 155 008c 1091 0000 		lds r17,USB_ControlRequest+2+1
 156 0090 0B83      		std Y+3,r16
 157               	.LVL2:
  56:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 158               		.loc 1 56 0
 159 0092 F701      		movw r30,r14
 160 0094 4781      		ldd r20,Z+7
 161 0096 50E0      		ldi r21,0
 162 0098 8DB7      		in r24,__SP_L__
 163 009a 9EB7      		in r25,__SP_H__
 164 009c 841B      		sub r24,r20
 165 009e 950B      		sbc r25,r21
 166 00a0 0FB6      		in __tmp_reg__,__SREG__
 167 00a2 F894      		cli
 168 00a4 9EBF      		out __SP_H__,r25
 169 00a6 0FBE      		out __SREG__,__tmp_reg__
 170 00a8 8DBF      		out __SP_L__,r24
 171 00aa EDB7      		in r30,__SP_L__
 172 00ac FEB7      		in r31,__SP_H__
 173 00ae 3196      		adiw r30,1
 174 00b0 6F01      		movw r12,r30
 175               	.LVL3:
  58:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 176               		.loc 1 58 0
 177 00b2 60E0      		ldi r22,0
 178 00b4 70E0      		ldi r23,0
 179 00b6 CF01      		movw r24,r30
 180 00b8 0E94 0000 		call memset
 181               	.LVL4:
  60:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 182               		.loc 1 60 0
 183 00bc 4FEF      		ldi r20,lo8(-1)
 184 00be 410F      		add r20,r17
 185 00c0 8E01      		movw r16,r28
 186               	.LVL5:
 187 00c2 0F5F      		subi r16,-1
 188 00c4 1F4F      		sbci r17,-1
 189 00c6 9601      		movw r18,r12
 190 00c8 BE01      		movw r22,r28
 191 00ca 6D5F      		subi r22,-3
 192 00cc 7F4F      		sbci r23,-1
 193 00ce C701      		movw r24,r14
 194 00d0 0E94 0000 		call CALLBACK_HID_Device_CreateHIDReport
 195               	.LVL6:
  62:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				{
 196               		.loc 1 62 0
 197 00d4 F701      		movw r30,r14
 198 00d6 8581      		ldd r24,Z+5
 199 00d8 9681      		ldd r25,Z+6
 200 00da 0097      		sbiw r24,0
 201 00dc 01F0      		breq .L10
  64:../../LUFA/Drivers/USB/Class/Device/HID.c **** 					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
 202               		.loc 1 64 0
 203 00de 4781      		ldd r20,Z+7
 204 00e0 50E0      		ldi r21,0
 205 00e2 B601      		movw r22,r12
 206 00e4 0E94 0000 		call memcpy
 207               	.LVL7:
 208               	.L10:
 209               	.LBB52:
 210               	.LBB53:
 330:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 211               		.loc 2 330 0
 212 00e8 1092 E900 		sts 233,__zero_reg__
 213               	.LVL8:
 214               	.LBE53:
 215               	.LBE52:
 216               	.LBB54:
 217               	.LBB55:
 492:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 218               		.loc 2 504 0
 219 00ec 8091 E800 		lds r24,232
 220 00f0 877F      		andi r24,lo8(-9)
 221 00f2 8093 E800 		sts 232,r24
 222               	.LBE55:
 223               	.LBE54:
  71:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearOUT();
 224               		.loc 1 71 0
 225 00f6 6981      		ldd r22,Y+1
 226 00f8 7A81      		ldd r23,Y+2
 227 00fa C601      		movw r24,r12
 228 00fc 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 229               	.LVL9:
 230               	.LBB56:
 231               	.LBB57:
 505:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 232               		.loc 2 531 0
 233 0100 8091 E800 		lds r24,232
 234 0104 8B77      		andi r24,lo8(123)
 235 0106 8093 E800 		sts 232,r24
 236               	.LBE57:
 237               	.LBE56:
 238 010a 0FB6      		in __tmp_reg__,__SREG__
 239 010c F894      		cli
 240 010e BEBE      		out __SP_H__,r11
 241 0110 0FBE      		out __SREG__,__tmp_reg__
 242 0112 ADBE      		out __SP_L__,r10
 243 0114 00C0      		rjmp .L1
 244               	.LVL10:
 245               	.L21:
 246               	.LBE51:
  77:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 247               		.loc 1 77 0
 248 0116 8091 0000 		lds r24,USB_ControlRequest
 249 011a 8132      		cpi r24,lo8(33)
 250 011c 01F0      		breq .+2
 251 011e 00C0      		rjmp .L1
 252               	.LBB58:
  78:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = USB_ControlRequest.wLength;
 253               		.loc 1 78 0
 254 0120 8DB6      		in r8,__SP_L__
 255 0122 9EB6      		in r9,__SP_H__
  79:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 256               		.loc 1 79 0
 257 0124 0091 0000 		lds r16,USB_ControlRequest+6
 258 0128 1091 0000 		lds r17,USB_ControlRequest+6+1
 259               	.LVL11:
  80:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 260               		.loc 1 80 0
 261 012c C090 0000 		lds r12,USB_ControlRequest+2
 262 0130 D090 0000 		lds r13,USB_ControlRequest+2+1
 263               	.LVL12:
  82:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 264               		.loc 1 82 0
 265 0134 8DB7      		in r24,__SP_L__
 266 0136 9EB7      		in r25,__SP_H__
 267 0138 801B      		sub r24,r16
 268 013a 910B      		sbc r25,r17
 269 013c 0FB6      		in __tmp_reg__,__SREG__
 270 013e F894      		cli
 271 0140 9EBF      		out __SP_H__,r25
 272 0142 0FBE      		out __SREG__,__tmp_reg__
 273 0144 8DBF      		out __SP_L__,r24
 274 0146 EDB7      		in r30,__SP_L__
 275 0148 FEB7      		in r31,__SP_H__
 276 014a 3196      		adiw r30,1
 277 014c 5F01      		movw r10,r30
 278               	.LVL13:
 279               	.LBB59:
 280               	.LBB60:
 504:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 281               		.loc 2 504 0
 282 014e 8091 E800 		lds r24,232
 283 0152 877F      		andi r24,lo8(-9)
 284 0154 8093 E800 		sts 232,r24
 285               	.LBE60:
 286               	.LBE59:
  85:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
 287               		.loc 1 85 0
 288 0158 B801      		movw r22,r16
 289 015a CF01      		movw r24,r30
 290 015c 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 291               	.LVL14:
 292               	.LBB61:
 293               	.LBB62:
 516:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 294               		.loc 2 516 0
 295 0160 8091 E800 		lds r24,232
 296 0164 8E77      		andi r24,lo8(126)
 297 0166 8093 E800 		sts 232,r24
 298               	.LBE62:
 299               	.LBE61:
  88:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 
 300               		.loc 1 88 0
 301 016a 21E0      		ldi r18,lo8(1)
 302 016c C110      		cpse r12,__zero_reg__
 303 016e 00C0      		rjmp .L11
 304 0170 20E0      		ldi r18,0
 305               	.L11:
 306 0172 30E0      		ldi r19,0
 307 0174 021B      		sub r16,r18
 308 0176 130B      		sbc r17,r19
 309               	.LVL15:
  89:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 310               		.loc 1 89 0
 311 0178 2A0D      		add r18,r10
 312 017a 3B1D      		adc r19,r11
  88:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 
 313               		.loc 1 88 0
 314 017c 4FEF      		ldi r20,lo8(-1)
 315 017e 4D0D      		add r20,r13
 316 0180 6C2D      		mov r22,r12
 317 0182 C701      		movw r24,r14
 318 0184 0E94 0000 		call CALLBACK_HID_Device_ProcessHIDReport
 319               	.LVL16:
 320 0188 0FB6      		in __tmp_reg__,__SREG__
 321 018a F894      		cli
 322 018c 9EBE      		out __SP_H__,r9
 323 018e 0FBE      		out __SREG__,__tmp_reg__
 324 0190 8DBE      		out __SP_L__,r8
 325 0192 00C0      		rjmp .L1
 326               	.LVL17:
 327               	.L3:
 328               	.LBE58:
  94:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 329               		.loc 1 94 0
 330 0194 8091 0000 		lds r24,USB_ControlRequest
 331 0198 813A      		cpi r24,lo8(-95)
 332 019a 01F0      		breq .+2
 333 019c 00C0      		rjmp .L1
 334               	.LBB63:
 335               	.LBB64:
 504:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 336               		.loc 2 504 0
 337 019e 8091 E800 		lds r24,232
 338 01a2 877F      		andi r24,lo8(-9)
 339 01a4 8093 E800 		sts 232,r24
 340               	.LBE64:
 341               	.LBE63:
  97:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
 342               		.loc 1 97 0
 343 01a8 F701      		movw r30,r14
 344 01aa 8085      		ldd r24,Z+8
 345               	.LVL18:
 346 01ac 00C0      		rjmp .L19
 347               	.LVL19:
 348               	.L8:
 104:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 349               		.loc 1 104 0
 350 01ae 8091 0000 		lds r24,USB_ControlRequest
 351 01b2 8132      		cpi r24,lo8(33)
 352 01b4 01F0      		breq .+2
 353 01b6 00C0      		rjmp .L1
 354               	.LBB65:
 355               	.LBB66:
 504:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356               		.loc 2 504 0
 357 01b8 8091 E800 		lds r24,232
 358 01bc 877F      		andi r24,lo8(-9)
 359 01be 8093 E800 		sts 232,r24
 360               	.LBE66:
 361               	.LBE65:
 107:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 362               		.loc 1 107 0
 363 01c2 0E94 0000 		call Endpoint_ClearStatusStage
 364               	.LVL20:
 109:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 365               		.loc 1 109 0
 366 01c6 2091 0000 		lds r18,USB_ControlRequest+2
 367 01ca 3091 0000 		lds r19,USB_ControlRequest+2+1
 368 01ce 81E0      		ldi r24,lo8(1)
 369 01d0 2111      		cpse r18,__zero_reg__
 370 01d2 00C0      		rjmp .L12
 371 01d4 80E0      		ldi r24,0
 372               	.L12:
 373 01d6 F701      		movw r30,r14
 374 01d8 8087      		std Z+8,r24
 375 01da 00C0      		rjmp .L1
 376               	.L7:
 114:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 377               		.loc 1 114 0
 378 01dc 8091 0000 		lds r24,USB_ControlRequest
 379 01e0 8132      		cpi r24,lo8(33)
 380 01e2 01F4      		brne .L1
 381               	.LBB67:
 382               	.LBB68:
 504:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 383               		.loc 2 504 0
 384 01e4 8091 E800 		lds r24,232
 385 01e8 877F      		andi r24,lo8(-9)
 386 01ea 8093 E800 		sts 232,r24
 387               	.LBE68:
 388               	.LBE67:
 117:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 389               		.loc 1 117 0
 390 01ee 0E94 0000 		call Endpoint_ClearStatusStage
 391               	.LVL21:
 119:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 392               		.loc 1 119 0
 393 01f2 8091 0000 		lds r24,USB_ControlRequest+2
 394 01f6 9091 0000 		lds r25,USB_ControlRequest+2+1
 395 01fa 8827      		clr r24
 396 01fc 36E0      		ldi r19,6
 397               		1:
 398 01fe 9695      		lsr r25
 399 0200 8795      		ror r24
 400 0202 3A95      		dec r19
 401 0204 01F4      		brne 1b
 402 0206 F701      		movw r30,r14
 403 0208 9287      		std Z+10,r25
 404 020a 8187      		std Z+9,r24
 405 020c 00C0      		rjmp .L1
 406               	.L6:
 124:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 407               		.loc 1 124 0
 408 020e 8091 0000 		lds r24,USB_ControlRequest
 409 0212 813A      		cpi r24,lo8(-95)
 410 0214 01F4      		brne .L1
 411               	.LBB69:
 412               	.LBB70:
 504:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 413               		.loc 2 504 0
 414 0216 8091 E800 		lds r24,232
 415 021a 877F      		andi r24,lo8(-9)
 416 021c 8093 E800 		sts 232,r24
 417               	.LBE70:
 418               	.LBE69:
 127:../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
 419               		.loc 1 127 0
 420 0220 F701      		movw r30,r14
 421 0222 8185      		ldd r24,Z+9
 422 0224 9285      		ldd r25,Z+10
 423 0226 9695      		lsr r25
 424 0228 8795      		ror r24
 425 022a 9695      		lsr r25
 426 022c 8795      		ror r24
 427               	.L19:
 428               	.LVL22:
 429               	.LBB71:
 430               	.LBB72:
 532:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 613:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 431               		.loc 2 624 0
 432 022e 8093 F100 		sts 241,r24
 433               	.LVL23:
 434               	.LBE72:
 435               	.LBE71:
 436               	.LBB73:
 437               	.LBB74:
 516:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 438               		.loc 2 516 0
 439 0232 8091 E800 		lds r24,232
 440 0236 8E77      		andi r24,lo8(126)
 441 0238 8093 E800 		sts 232,r24
 442               	.LBE74:
 443               	.LBE73:
 129:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 444               		.loc 1 129 0
 445 023c 0E94 0000 		call Endpoint_ClearStatusStage
 446               	.LVL24:
 447               	.L1:
 448               		.loc 1 134 0
 449 0240 0FB6      		in __tmp_reg__,__SREG__
 450 0242 F894      		cli
 451 0244 7EBE      		out __SP_H__,r7
 452 0246 0FBE      		out __SREG__,__tmp_reg__
 453 0248 6DBE      		out __SP_L__,r6
 454               	/* epilogue start */
 455 024a 0F90      		pop __tmp_reg__
 456 024c 0F90      		pop __tmp_reg__
 457 024e 0F90      		pop __tmp_reg__
 458 0250 DF91      		pop r29
 459 0252 CF91      		pop r28
 460 0254 1F91      		pop r17
 461 0256 0F91      		pop r16
 462 0258 FF90      		pop r15
 463 025a EF90      		pop r14
 464               	.LVL25:
 465 025c DF90      		pop r13
 466 025e CF90      		pop r12
 467 0260 BF90      		pop r11
 468 0262 AF90      		pop r10
 469 0264 9F90      		pop r9
 470 0266 8F90      		pop r8
 471 0268 7F90      		pop r7
 472 026a 6F90      		pop r6
 473 026c 5F90      		pop r5
 474 026e 0895      		ret
 475               		.cfi_endproc
 476               	.LFE97:
 478               		.section	.text.HID_Device_ConfigureEndpoints,"ax",@progbits
 479               	.global	HID_Device_ConfigureEndpoints
 481               	HID_Device_ConfigureEndpoints:
 482               	.LFB98:
 135:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 136:../../LUFA/Drivers/USB/Class/Device/HID.c **** bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 137:../../LUFA/Drivers/USB/Class/Device/HID.c **** {
 483               		.loc 1 137 0
 484               		.cfi_startproc
 485               	.LVL26:
 486 0000 CF93      		push r28
 487               	.LCFI17:
 488               		.cfi_def_cfa_offset 3
 489               		.cfi_offset 28, -2
 490 0002 DF93      		push r29
 491               	.LCFI18:
 492               		.cfi_def_cfa_offset 4
 493               		.cfi_offset 29, -3
 494               	/* prologue: function */
 495               	/* frame size = 0 */
 496               	/* stack size = 2 */
 497               	.L__stack_usage = 2
 498 0004 FC01      		movw r30,r24
 138:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 499               		.loc 1 138 0
 500 0006 DC01      		movw r26,r24
 501 0008 1896      		adiw r26,8
 502 000a 85E0      		ldi r24,lo8(5)
 503               	.LVL27:
 504 000c ED01      		movw r28,r26
 505               		0:
 506 000e 1992      		st Y+,__zero_reg__
 507 0010 8A95      		dec r24
 508 0012 01F4      		brne 0b
 139:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	HIDInterfaceInfo->State.UsingReportProtocol = true;
 509               		.loc 1 139 0
 510 0014 81E0      		ldi r24,lo8(1)
 511 0016 8087      		std Z+8,r24
 140:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	HIDInterfaceInfo->State.IdleCount           = 500;
 512               		.loc 1 140 0
 513 0018 84EF      		ldi r24,lo8(-12)
 514 001a 91E0      		ldi r25,lo8(1)
 515 001c 9287      		std Z+10,r25
 516 001e 8187      		std Z+9,r24
 141:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 142:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUP
 517               		.loc 1 142 0
 518 0020 8481      		ldd r24,Z+4
 519 0022 8111      		cpse r24,__zero_reg__
 520 0024 00C0      		rjmp .L26
 521 0026 40E0      		ldi r20,0
 522 0028 00C0      		rjmp .L23
 523               	.L26:
 524 002a 44E0      		ldi r20,lo8(4)
 525               	.L23:
 526               		.loc 1 142 0 is_stmt 0 discriminator 4
 527 002c 6281      		ldd r22,Z+2
 528 002e 7381      		ldd r23,Z+3
 529 0030 8181      		ldd r24,Z+1
 530               	.LVL28:
 531               	.LBB75:
 532               	.LBB76:
 533               	.LBB77:
 534               	.LBB78:
 127:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 535               		.loc 2 127 0 is_stmt 1 discriminator 4
 536 0032 28E0      		ldi r18,lo8(8)
 537 0034 30E0      		ldi r19,0
 126:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 538               		.loc 2 126 0 discriminator 4
 539 0036 90E0      		ldi r25,0
 540               	.LVL29:
 541               	.L24:
 129:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 542               		.loc 2 129 0
 543 0038 2617      		cp r18,r22
 544 003a 3707      		cpc r19,r23
 545 003c 00F4      		brsh .L27
 131:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 546               		.loc 2 131 0
 547 003e 9F5F      		subi r25,lo8(-(1))
 548               	.LVL30:
 132:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 549               		.loc 2 132 0
 550 0040 220F      		lsl r18
 551 0042 331F      		rol r19
 552               	.LVL31:
 553 0044 00C0      		rjmp .L24
 554               	.L27:
 555               	.LVL32:
 556               	.LBE78:
 557               	.LBE77:
 276:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 558               		.loc 2 276 0
 559 0046 4260      		ori r20,lo8(2)
 560               	.LVL33:
 561 0048 9295      		swap r25
 562 004a 907F      		andi r25,lo8(-16)
 563 004c 492B      		or r20,r25
 564 004e 61EC      		ldi r22,lo8(-63)
 565               	.LVL34:
 566               	/* epilogue start */
 567               	.LBE76:
 568               	.LBE75:
 143:../../LUFA/Drivers/USB/Class/Device/HID.c **** 									 ENDPOINT_DIR_IN, HIDInterfaceInfo->Config.ReportINEndpointSize,
 144:../../LUFA/Drivers/USB/Class/Device/HID.c **** 									 HIDInterfaceInfo->Config.ReportINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BAN
 145:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
 146:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		return false;
 147:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	}
 148:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 149:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	return true;
 150:../../LUFA/Drivers/USB/Class/Device/HID.c **** }
 569               		.loc 1 150 0
 570 0050 DF91      		pop r29
 571 0052 CF91      		pop r28
 572               	.LBB80:
 573               	.LBB79:
 276:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 574               		.loc 2 276 0
 575 0054 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 576               	.LVL35:
 577               	.LBE79:
 578               	.LBE80:
 579               		.cfi_endproc
 580               	.LFE98:
 582               		.section	.text.HID_Device_USBTask,"ax",@progbits
 583               	.global	HID_Device_USBTask
 585               	HID_Device_USBTask:
 586               	.LFB99:
 151:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 152:../../LUFA/Drivers/USB/Class/Device/HID.c **** void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 153:../../LUFA/Drivers/USB/Class/Device/HID.c **** {
 587               		.loc 1 153 0
 588               		.cfi_startproc
 589               	.LVL36:
 590 0000 4F92      		push r4
 591               	.LCFI19:
 592               		.cfi_def_cfa_offset 3
 593               		.cfi_offset 4, -2
 594 0002 5F92      		push r5
 595               	.LCFI20:
 596               		.cfi_def_cfa_offset 4
 597               		.cfi_offset 5, -3
 598 0004 6F92      		push r6
 599               	.LCFI21:
 600               		.cfi_def_cfa_offset 5
 601               		.cfi_offset 6, -4
 602 0006 7F92      		push r7
 603               	.LCFI22:
 604               		.cfi_def_cfa_offset 6
 605               		.cfi_offset 7, -5
 606 0008 8F92      		push r8
 607               	.LCFI23:
 608               		.cfi_def_cfa_offset 7
 609               		.cfi_offset 8, -6
 610 000a 9F92      		push r9
 611               	.LCFI24:
 612               		.cfi_def_cfa_offset 8
 613               		.cfi_offset 9, -7
 614 000c AF92      		push r10
 615               	.LCFI25:
 616               		.cfi_def_cfa_offset 9
 617               		.cfi_offset 10, -8
 618 000e BF92      		push r11
 619               	.LCFI26:
 620               		.cfi_def_cfa_offset 10
 621               		.cfi_offset 11, -9
 622 0010 CF92      		push r12
 623               	.LCFI27:
 624               		.cfi_def_cfa_offset 11
 625               		.cfi_offset 12, -10
 626 0012 DF92      		push r13
 627               	.LCFI28:
 628               		.cfi_def_cfa_offset 12
 629               		.cfi_offset 13, -11
 630 0014 EF92      		push r14
 631               	.LCFI29:
 632               		.cfi_def_cfa_offset 13
 633               		.cfi_offset 14, -12
 634 0016 FF92      		push r15
 635               	.LCFI30:
 636               		.cfi_def_cfa_offset 14
 637               		.cfi_offset 15, -13
 638 0018 0F93      		push r16
 639               	.LCFI31:
 640               		.cfi_def_cfa_offset 15
 641               		.cfi_offset 16, -14
 642 001a 1F93      		push r17
 643               	.LCFI32:
 644               		.cfi_def_cfa_offset 16
 645               		.cfi_offset 17, -15
 646 001c CF93      		push r28
 647               	.LCFI33:
 648               		.cfi_def_cfa_offset 17
 649               		.cfi_offset 28, -16
 650 001e DF93      		push r29
 651               	.LCFI34:
 652               		.cfi_def_cfa_offset 18
 653               		.cfi_offset 29, -17
 654 0020 00D0      		rcall .
 655 0022 1F92      		push __zero_reg__
 656               	.LCFI35:
 657               		.cfi_def_cfa_offset 21
 658 0024 CDB7      		in r28,__SP_L__
 659 0026 DEB7      		in r29,__SP_H__
 660               	.LCFI36:
 661               		.cfi_def_cfa_register 28
 662               	/* prologue: function */
 663               	/* frame size = 3 */
 664               	/* stack size = 19 */
 665               	.L__stack_usage = 19
 666 0028 7C01      		movw r14,r24
 154:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 155:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
 156:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 157:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 158:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 159:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (Endpoint_IsReadWriteAllowed())
 160:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
 161:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 162:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportID     = 0;
 163:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint16_t ReportINSize = 0;
 164:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 165:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		memset(ReportINData, 0, sizeof(ReportINData));
 166:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 167:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REP
 168:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		                                                             ReportINData, &ReportINSize);
 169:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool StatesChanged     = false;
 170:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 171:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 172:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 173:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 174:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize)
 175:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevR
 176:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		}
 177:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 178:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 179:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 180:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 181:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 182:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 183:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 184:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (ReportID)
 185:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			  Endpoint_Write_8(ReportID);
 186:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 187:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 188:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 189:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_ClearIN();
 190:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		}
 191:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	}
 192:../../LUFA/Drivers/USB/Class/Device/HID.c **** }
 667               		.loc 1 192 0
 668 002a 6DB6      		in r6,__SP_L__
 669 002c 7EB6      		in r7,__SP_H__
 154:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 670               		.loc 1 154 0
 671 002e 8EB3      		in r24,0x1e
 672               	.LVL37:
 673 0030 8430      		cpi r24,lo8(4)
 674 0032 01F0      		breq .+2
 675 0034 00C0      		rjmp .L28
 157:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 676               		.loc 1 157 0
 677 0036 F701      		movw r30,r14
 678 0038 8181      		ldd r24,Z+1
 679               	.LVL38:
 680               	.LBB81:
 681               	.LBB82:
 330:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 682               		.loc 2 330 0
 683 003a 8093 E900 		sts 233,r24
 684               	.LVL39:
 685               	.LBE82:
 686               	.LBE81:
 687               	.LBB83:
 688               	.LBB84:
 420:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 689               		.loc 2 420 0
 690 003e 8091 E800 		lds r24,232
 691               	.LBE84:
 692               	.LBE83:
 159:../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
 693               		.loc 1 159 0
 694 0042 85FF      		sbrs r24,5
 695 0044 00C0      		rjmp .L28
 696               	.LBB85:
 160:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 697               		.loc 1 160 0
 698 0046 8DB6      		in r8,__SP_L__
 699 0048 9EB6      		in r9,__SP_H__
 700               	.LVL40:
 161:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportID     = 0;
 701               		.loc 1 161 0
 702 004a 4781      		ldd r20,Z+7
 703 004c 50E0      		ldi r21,0
 704 004e 8DB7      		in r24,__SP_L__
 705 0050 9EB7      		in r25,__SP_H__
 706 0052 841B      		sub r24,r20
 707 0054 950B      		sbc r25,r21
 708 0056 0FB6      		in __tmp_reg__,__SREG__
 709 0058 F894      		cli
 710 005a 9EBF      		out __SP_H__,r25
 711 005c 0FBE      		out __SREG__,__tmp_reg__
 712 005e 8DBF      		out __SP_L__,r24
 713 0060 EDB7      		in r30,__SP_L__
 714 0062 FEB7      		in r31,__SP_H__
 715 0064 3196      		adiw r30,1
 716 0066 6F01      		movw r12,r30
 717               	.LVL41:
 162:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint16_t ReportINSize = 0;
 718               		.loc 1 162 0
 719 0068 1B82      		std Y+3,__zero_reg__
 163:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 720               		.loc 1 163 0
 721 006a 1A82      		std Y+2,__zero_reg__
 722 006c 1982      		std Y+1,__zero_reg__
 165:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 723               		.loc 1 165 0
 724 006e 60E0      		ldi r22,0
 725 0070 70E0      		ldi r23,0
 726 0072 CF01      		movw r24,r30
 727 0074 0E94 0000 		call memset
 728               	.LVL42:
 167:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		                                                             ReportINData, &ReportINSize);
 729               		.loc 1 167 0
 730 0078 8E01      		movw r16,r28
 731 007a 0F5F      		subi r16,-1
 732 007c 1F4F      		sbci r17,-1
 733 007e 9601      		movw r18,r12
 734 0080 40E0      		ldi r20,0
 735 0082 BE01      		movw r22,r28
 736 0084 6D5F      		subi r22,-3
 737 0086 7F4F      		sbci r23,-1
 738 0088 C701      		movw r24,r14
 739 008a 0E94 0000 		call CALLBACK_HID_Device_CreateHIDReport
 740               	.LVL43:
 741 008e 482E      		mov r4,r24
 742               	.LVL44:
 170:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 743               		.loc 1 170 0
 744 0090 F701      		movw r30,r14
 745 0092 8185      		ldd r24,Z+9
 746 0094 9285      		ldd r25,Z+10
 747 0096 892B      		or r24,r25
 748 0098 01F0      		breq .L39
 170:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 749               		.loc 1 170 0 is_stmt 0 discriminator 1
 750 009a 01E0      		ldi r16,lo8(1)
 751 009c 10E0      		ldi r17,0
 752 009e 8385      		ldd r24,Z+11
 753 00a0 9485      		ldd r25,Z+12
 754 00a2 892B      		or r24,r25
 755 00a4 01F0      		breq .L32
 756               	.L39:
 170:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 757               		.loc 1 170 0
 758 00a6 00E0      		ldi r16,0
 759 00a8 10E0      		ldi r17,0
 760               	.L32:
 761               	.LVL45:
 172:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 762               		.loc 1 172 0 is_stmt 1 discriminator 6
 763 00aa F701      		movw r30,r14
 764 00ac A580      		ldd r10,Z+5
 765 00ae B680      		ldd r11,Z+6
 766 00b0 A114      		cp r10,__zero_reg__
 767 00b2 B104      		cpc r11,__zero_reg__
 768 00b4 01F0      		breq .L40
 174:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevR
 769               		.loc 1 174 0
 770 00b6 4981      		ldd r20,Y+1
 771 00b8 5A81      		ldd r21,Y+2
 772 00ba B501      		movw r22,r10
 773 00bc C601      		movw r24,r12
 774 00be 0E94 0000 		call memcmp
 775               	.LVL46:
 776 00c2 5524      		clr r5
 777 00c4 5394      		inc r5
 778 00c6 892B      		or r24,r25
 779 00c8 01F4      		brne .L35
 780 00ca 512C      		mov r5,__zero_reg__
 781               	.L35:
 782               	.LVL47:
 175:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		}
 783               		.loc 1 175 0
 784 00cc F701      		movw r30,r14
 785 00ce 4781      		ldd r20,Z+7
 786 00d0 50E0      		ldi r21,0
 787 00d2 B601      		movw r22,r12
 788 00d4 C501      		movw r24,r10
 789 00d6 0E94 0000 		call memcpy
 790               	.LVL48:
 791 00da 00C0      		rjmp .L34
 792               	.LVL49:
 793               	.L40:
 169:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 794               		.loc 1 169 0
 795 00dc 512C      		mov r5,__zero_reg__
 796               	.LVL50:
 797               	.L34:
 178:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 798               		.loc 1 178 0
 799 00de 8981      		ldd r24,Y+1
 800 00e0 9A81      		ldd r25,Y+2
 801 00e2 892B      		or r24,r25
 802 00e4 01F0      		breq .L36
 178:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 803               		.loc 1 178 0 is_stmt 0 discriminator 1
 804 00e6 4110      		cpse r4,__zero_reg__
 805 00e8 00C0      		rjmp .L37
 178:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 806               		.loc 1 178 0 discriminator 2
 807 00ea 5110      		cpse r5,__zero_reg__
 808 00ec 00C0      		rjmp .L37
 178:../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 809               		.loc 1 178 0 discriminator 3
 810 00ee 00FF      		sbrs r16,0
 811 00f0 00C0      		rjmp .L36
 812               	.L37:
 180:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 813               		.loc 1 180 0 is_stmt 1
 814 00f2 F701      		movw r30,r14
 815 00f4 8185      		ldd r24,Z+9
 816 00f6 9285      		ldd r25,Z+10
 817 00f8 9487      		std Z+12,r25
 818 00fa 8387      		std Z+11,r24
 182:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 819               		.loc 1 182 0
 820 00fc 8181      		ldd r24,Z+1
 821               	.LVL51:
 822               	.LBB86:
 823               	.LBB87:
 330:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 824               		.loc 2 330 0
 825 00fe 8093 E900 		sts 233,r24
 826               	.LVL52:
 827               	.LBE87:
 828               	.LBE86:
 184:../../LUFA/Drivers/USB/Class/Device/HID.c **** 			  Endpoint_Write_8(ReportID);
 829               		.loc 1 184 0
 830 0102 8B81      		ldd r24,Y+3
 831 0104 8111      		cpse r24,__zero_reg__
 832               	.LVL53:
 833               	.LBB88:
 834               	.LBB89:
 835               		.loc 2 624 0
 836 0106 8093 F100 		sts 241,r24
 837               	.LVL54:
 838               	.L38:
 839               	.LBE89:
 840               	.LBE88:
 187:../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 841               		.loc 1 187 0
 842 010a 6981      		ldd r22,Y+1
 843 010c 7A81      		ldd r23,Y+2
 844 010e 40E0      		ldi r20,0
 845 0110 50E0      		ldi r21,0
 846 0112 C601      		movw r24,r12
 847 0114 0E94 0000 		call Endpoint_Write_Stream_LE
 848               	.LVL55:
 849               	.LBB90:
 850               	.LBB91:
 516:../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 851               		.loc 2 516 0
 852 0118 8091 E800 		lds r24,232
 853 011c 8E77      		andi r24,lo8(126)
 854 011e 8093 E800 		sts 232,r24
 855               	.L36:
 856               	.LBE91:
 857               	.LBE90:
 858 0122 0FB6      		in __tmp_reg__,__SREG__
 859 0124 F894      		cli
 860 0126 9EBE      		out __SP_H__,r9
 861 0128 0FBE      		out __SREG__,__tmp_reg__
 862 012a 8DBE      		out __SP_L__,r8
 863               	.LVL56:
 864               	.L28:
 865               	.LBE85:
 866               		.loc 1 192 0
 867 012c 0FB6      		in __tmp_reg__,__SREG__
 868 012e F894      		cli
 869 0130 7EBE      		out __SP_H__,r7
 870 0132 0FBE      		out __SREG__,__tmp_reg__
 871 0134 6DBE      		out __SP_L__,r6
 872               	/* epilogue start */
 873 0136 0F90      		pop __tmp_reg__
 874 0138 0F90      		pop __tmp_reg__
 875 013a 0F90      		pop __tmp_reg__
 876 013c DF91      		pop r29
 877 013e CF91      		pop r28
 878 0140 1F91      		pop r17
 879 0142 0F91      		pop r16
 880 0144 FF90      		pop r15
 881 0146 EF90      		pop r14
 882               	.LVL57:
 883 0148 DF90      		pop r13
 884 014a CF90      		pop r12
 885 014c BF90      		pop r11
 886 014e AF90      		pop r10
 887 0150 9F90      		pop r9
 888 0152 8F90      		pop r8
 889 0154 7F90      		pop r7
 890 0156 6F90      		pop r6
 891 0158 5F90      		pop r5
 892 015a 4F90      		pop r4
 893 015c 0895      		ret
 894               		.cfi_endproc
 895               	.LFE99:
 897               		.text
 898               	.Letext0:
 899               		.file 3 "/usr/lib/avr/include/stdint.h"
 900               		.file 4 "../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../StdRequestType.h"
 901               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../Device.h"
 902               		.file 6 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 903               		.file 7 "../../LUFA/Drivers/USB/Class/Device/HID.h"
 904               		.file 8 "../../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 905               		.file 9 "/usr/lib/avr/include/string.h"
 906               		.file 10 "../../LUFA/Drivers/USB/Class/Device/../../Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 HID.c
     /tmp/cccZ8NcM.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccZ8NcM.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccZ8NcM.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccZ8NcM.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cccZ8NcM.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccZ8NcM.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccZ8NcM.s:14     .text.HID_Device_ProcessControlRequest:0000000000000000 HID_Device_ProcessControlRequest
     /tmp/cccZ8NcM.s:481    .text.HID_Device_ConfigureEndpoints:0000000000000000 HID_Device_ConfigureEndpoints
     /tmp/cccZ8NcM.s:585    .text.HID_Device_USBTask:0000000000000000 HID_Device_USBTask

UNDEFINED SYMBOLS
USB_ControlRequest
memset
CALLBACK_HID_Device_CreateHIDReport
memcpy
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
CALLBACK_HID_Device_ProcessHIDReport
Endpoint_ClearStatusStage
Endpoint_ConfigureEndpoint_Prv
memcmp
Endpoint_Write_Stream_LE
