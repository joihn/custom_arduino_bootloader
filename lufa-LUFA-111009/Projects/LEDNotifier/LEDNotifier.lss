
LEDNotifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000dd6  00000e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800116  00800116  00000e80  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bc6  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d94  00000000  00000000  00006d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002feb  00000000  00000000  00008ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000830  00000000  00000000  0000bad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000267d  00000000  00000000  0000c304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003380  00000000  00000000  0000e981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  00011d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
  12:	00 00       	nop
  14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
  22:	00 00       	nop
  24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
  26:	00 00       	nop
  28:	0a c2       	rjmp	.+1044   	; 0x43e <__vector_10>
  2a:	00 00       	nop
  2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
  36:	00 00       	nop
  38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
  3e:	00 00       	nop
  40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
  42:	00 00       	nop
  44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__vector_21>
  56:	00 00       	nop
  58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
  5e:	00 00       	nop
  60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
  62:	00 00       	nop
  64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
  66:	00 00       	nop
  68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
  72:	00 00       	nop
  74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
  76:	00 00       	nop
  78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
  7e:	00 00       	nop
  80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
  82:	00 00       	nop
  84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
  86:	00 00       	nop
  88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
  92:	00 00       	nop
  94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
  96:	00 00       	nop
  98:	b7 03       	fmuls	r19, r23
  9a:	d9 03       	fmulsu	r21, r17
  9c:	c4 04       	cpc	r12, r4
  9e:	d9 03       	fmulsu	r21, r17
  a0:	c4 04       	cpc	r12, r4
  a2:	1e 04       	cpc	r1, r14
  a4:	40 04       	cpc	r4, r0
  a6:	c4 04       	cpc	r12, r4
  a8:	92 04       	cpc	r9, r2
  aa:	a4 04       	cpc	r10, r4

000000ac <ProductString>:
  ac:	1a 03 4c 00 45 00 44 00 20 00 4e 00 6f 00 74 00     ..L.E.D. .N.o.t.
  bc:	69 00 66 00 69 00 65 00 72 00 00 00                 i.f.i.e.r...

000000c8 <ManufacturerString>:
  c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
  e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
  e6:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  f6:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 106:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 116:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000124 <DeviceDescriptor>:
 124:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 134:	dc 01                                               ..

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d0 e2       	ldi	r29, 0x20	; 32
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	e6 ed       	ldi	r30, 0xD6	; 214
 14a:	fd e0       	ldi	r31, 0x0D	; 13
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	0b bf       	out	0x3b, r16	; 59
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
 152:	07 90       	elpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	a6 31       	cpi	r26, 0x16	; 22
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	a6 e1       	ldi	r26, 0x16	; 22
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	a4 33       	cpi	r26, 0x34	; 52
 168:	b2 07       	cpc	r27, r18
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	5a d0       	rcall	.+180    	; 0x222 <main>
 16e:	31 c6       	rjmp	.+3170   	; 0xdd2 <_exit>

00000170 <__bad_interrupt>:
 170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <__vector_21>:
static FILE USBSerialStream;


/** Interrupt handler for managing the software PWM channels for the LEDs */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	uint8_t LEDMask = LEDS_ALL_LEDS;

	if (++SoftPWM_Count == 0b00011111)
 182:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <SoftPWM_Count>
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <SoftPWM_Count>
 18c:	8f 31       	cpi	r24, 0x1F	; 31
 18e:	11 f4       	brne	.+4      	; 0x194 <__vector_21+0x22>
	  SoftPWM_Count = 0;
 190:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <SoftPWM_Count>

	if (SoftPWM_Count >= SoftPWM_Channel1_Duty)
 194:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <SoftPWM_Count>
 198:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <SoftPWM_Channel1_Duty>
 19c:	98 17       	cp	r25, r24
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <__vector_21+0x32>
	  LEDMask &= ~LEDS_LED1;
 1a0:	88 e1       	ldi	r24, 0x18	; 24
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__vector_21+0x34>


/** Interrupt handler for managing the software PWM channels for the LEDs */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
	uint8_t LEDMask = LEDS_ALL_LEDS;
 1a4:	8c e1       	ldi	r24, 0x1C	; 28
	  SoftPWM_Count = 0;

	if (SoftPWM_Count >= SoftPWM_Channel1_Duty)
	  LEDMask &= ~LEDS_LED1;

	if (SoftPWM_Count >= SoftPWM_Channel2_Duty)
 1a6:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <SoftPWM_Count>
 1aa:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <SoftPWM_Channel2_Duty>
 1ae:	29 17       	cp	r18, r25
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <__vector_21+0x42>
	  LEDMask &= ~LEDS_LED2;
 1b2:	87 7f       	andi	r24, 0xF7	; 247

	if (SoftPWM_Count >= SoftPWM_Channel3_Duty)
 1b4:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <SoftPWM_Count>
 1b8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <SoftPWM_Channel3_Duty>
 1bc:	29 17       	cp	r18, r25
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <__vector_21+0x50>
	  LEDMask &= ~LEDS_LED3;
 1c0:	8f 7e       	andi	r24, 0xEF	; 239
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = (PORTC & ~LEDS_ALL_LEDS) | LEDMask;
 1c2:	98 b1       	in	r25, 0x08	; 8
 1c4:	93 7e       	andi	r25, 0xE3	; 227
 1c6:	89 2b       	or	r24, r25
 1c8:	88 b9       	out	0x08, r24	; 8

	LEDs_SetAllLEDs(LEDMask);
}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1da:	84 b7       	in	r24, 0x34	; 52
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	a8 95       	wdr
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ea:	88 61       	ori	r24, 0x18	; 24
 1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1f4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 202:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 206:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC |= LEDS_ALL_LEDS;
 208:	87 b1       	in	r24, 0x07	; 7
 20a:	8c 61       	ori	r24, 0x1C	; 28
 20c:	87 b9       	out	0x07, r24	; 7
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 20e:	01 d1       	rcall	.+514    	; 0x412 <USB_Init>

	/* Timer Initialization */
	OCR0A  = 100;
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00);
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);
 21c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 220:	08 95       	ret

00000222 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 222:	db df       	rcall	.-74     	; 0x1da <SetupHardware>

	/* Create a regular blocking character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateBlockingStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 224:	66 e1       	ldi	r22, 0x16	; 22
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	d8 d4       	rcall	.+2480   	; 0xbde <CDC_Device_CreateBlockingStream>

	sei();
 22e:	78 94       	sei

	for (;;)
	{
		/* Read in next LED colour command from the host */
		uint8_t ColourUpdate = fgetc(&USBSerialStream);
 230:	86 e1       	ldi	r24, 0x16	; 22
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	90 d5       	rcall	.+2848   	; 0xd56 <fgetc>

		/* Top 3 bits select the LED, bottom 5 control the brightness */
		uint8_t Channel = (ColourUpdate & 0b11100000);
 236:	28 2f       	mov	r18, r24
 238:	20 7e       	andi	r18, 0xE0	; 224
		uint8_t Duty    = (ColourUpdate & 0b00011111);
 23a:	98 2f       	mov	r25, r24
 23c:	9f 71       	andi	r25, 0x1F	; 31

		if (Channel & (1 << 5))
 23e:	85 fd       	sbrc	r24, 5
		  SoftPWM_Channel1_Duty = Duty;
 240:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <SoftPWM_Channel1_Duty>

		if (Channel & (1 << 6))
 244:	86 fd       	sbrc	r24, 6
		  SoftPWM_Channel2_Duty = Duty;
 246:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <SoftPWM_Channel2_Duty>

		if (Channel & (1 << 7))
 24a:	27 fd       	sbrc	r18, 7
		  SoftPWM_Channel3_Duty = Duty;
 24c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <SoftPWM_Channel3_Duty>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 254:	72 d4       	rcall	.+2276   	; 0xb3a <CDC_Device_USBTask>
 256:	b2 d3       	rcall	.+1892   	; 0x9bc <USB_USBTask>
	}
 258:	eb cf       	rjmp	.-42     	; 0x230 <main+0xe>

0000025a <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	bf c3       	rjmp	.+1918   	; 0x9de <CDC_Device_ConfigureEndpoints>

00000260 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	d0 c4       	rjmp	.+2464   	; 0xc06 <CDC_Device_ProcessControlRequest>

00000266 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 266:	29 2f       	mov	r18, r25
 268:	33 27       	eor	r19, r19
 26a:	22 30       	cpi	r18, 0x02	; 2
 26c:	31 05       	cpc	r19, r1
 26e:	59 f0       	breq	.+22     	; 0x286 <CALLBACK_USB_GetDescriptor+0x20>
 270:	23 30       	cpi	r18, 0x03	; 3
 272:	31 05       	cpc	r19, r1
 274:	69 f0       	breq	.+26     	; 0x290 <CALLBACK_USB_GetDescriptor+0x2a>
 276:	21 30       	cpi	r18, 0x01	; 1
 278:	31 05       	cpc	r19, r1
 27a:	e9 f4       	brne	.+58     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 27c:	82 e1       	ldi	r24, 0x12	; 18
 27e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 280:	24 e2       	ldi	r18, 0x24	; 36
 282:	31 e0       	ldi	r19, 0x01	; 1
 284:	1c c0       	rjmp	.+56     	; 0x2be <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 286:	8e e3       	ldi	r24, 0x3E	; 62
 288:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 28a:	26 ee       	ldi	r18, 0xE6	; 230
 28c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 28e:	17 c0       	rjmp	.+46     	; 0x2be <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 290:	99 27       	eor	r25, r25
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	91 05       	cpc	r25, r1
 296:	49 f0       	breq	.+18     	; 0x2aa <CALLBACK_USB_GetDescriptor+0x44>
 298:	28 f0       	brcs	.+10     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x3e>
 29a:	02 97       	sbiw	r24, 0x02	; 2
 29c:	61 f4       	brne	.+24     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 29e:	ec ea       	ldi	r30, 0xAC	; 172
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2a4:	e2 ee       	ldi	r30, 0xE2	; 226
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 2aa:	e8 ec       	ldi	r30, 0xC8	; 200
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2ae:	84 91       	lpm	r24, Z
 2b0:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 2b2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2be:	fa 01       	movw	r30, r20
 2c0:	31 83       	std	Z+1, r19	; 0x01
 2c2:	20 83       	st	Z, r18
	return Size;
}
 2c4:	08 95       	ret

000002c6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 2c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 2ca:	eb ee       	ldi	r30, 0xEB	; 235
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	80 83       	st	Z, r24
 2d4:	ed ee       	ldi	r30, 0xED	; 237
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	10 82       	st	Z, r1
 2da:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 2de:	40 83       	st	Z, r20
 2e0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 2e4:	88 1f       	adc	r24, r24
 2e6:	88 27       	eor	r24, r24
 2e8:	88 1f       	adc	r24, r24
 2ea:	08 95       	ret

000002ec <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 2ec:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 2f0:	87 ff       	sbrs	r24, 7
 2f2:	0f c0       	rjmp	.+30     	; 0x312 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 2f8:	82 fd       	sbrc	r24, 2
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 2fc:	8e b3       	in	r24, 0x1e	; 30
 2fe:	81 11       	cpse	r24, r1
 300:	f9 cf       	rjmp	.-14     	; 0x2f4 <Endpoint_ClearStatusStage+0x8>
 302:	10 c0       	rjmp	.+32     	; 0x324 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 304:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 308:	8b 77       	andi	r24, 0x7B	; 123
 30a:	0a c0       	rjmp	.+20     	; 0x320 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 30c:	8e b3       	in	r24, 0x1e	; 30
 30e:	88 23       	and	r24, r24
 310:	49 f0       	breq	.+18     	; 0x324 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 312:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 316:	80 ff       	sbrs	r24, 0
 318:	f9 cf       	rjmp	.-14     	; 0x30c <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 31a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 31e:	8e 77       	andi	r24, 0x7E	; 126
 320:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 324:	08 95       	ret

00000326 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 326:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 32a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 32e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 330:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 334:	84 2f       	mov	r24, r20
 336:	81 70       	andi	r24, 0x01	; 1
 338:	40 ff       	sbrs	r20, 0
 33a:	22 c0       	rjmp	.+68     	; 0x380 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 33c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 340:	80 fd       	sbrc	r24, 0
 342:	1c c0       	rjmp	.+56     	; 0x37c <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 344:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 346:	88 23       	and	r24, r24
 348:	99 f0       	breq	.+38     	; 0x370 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 34a:	85 30       	cpi	r24, 0x05	; 5
 34c:	99 f0       	breq	.+38     	; 0x374 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 34e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 352:	85 fd       	sbrc	r24, 5
 354:	11 c0       	rjmp	.+34     	; 0x378 <Endpoint_WaitUntilReady+0x52>
 356:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 35a:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 35e:	24 17       	cp	r18, r20
 360:	35 07       	cpc	r19, r21
 362:	31 f3       	breq	.-52     	; 0x330 <Endpoint_WaitUntilReady+0xa>
 364:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 366:	11 f0       	breq	.+4      	; 0x36c <Endpoint_WaitUntilReady+0x46>
 368:	9a 01       	movw	r18, r20
 36a:	e2 cf       	rjmp	.-60     	; 0x330 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 380:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 384:	42 ff       	sbrs	r20, 2
 386:	de cf       	rjmp	.-68     	; 0x344 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 388:	08 95       	ret

0000038a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 392:	48 d0       	rcall	.+144    	; 0x424 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 394:	4f d0       	rcall	.+158    	; 0x434 <USB_INT_ClearAllInterrupts>
 396:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	88 81       	ld	r24, Y
 39c:	8f 77       	andi	r24, 0x7F	; 127
 39e:	88 83       	st	Y, r24
 3a0:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	88 83       	st	Y, r24
 3a6:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3a8:	8f 7d       	andi	r24, 0xDF	; 223
 3aa:	88 83       	st	Y, r24
 3ac:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	80 83       	st	Z, r24
 3b6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 3b8:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 3ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 3be:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 3c2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 3c6:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	f8 01       	movw	r30, r16
 3cc:	80 81       	ld	r24, Z
 3ce:	8b 7f       	andi	r24, 0xFB	; 251
 3d0:	80 83       	st	Z, r24
 3d2:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	88 83       	st	Y, r24
 3d8:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	73 df       	rcall	.-282    	; 0x2c6 <Endpoint_ConfigureEndpoint_Prv>
 3e0:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	8e 7f       	andi	r24, 0xFE	; 254
 3e8:	80 83       	st	Z, r24
 3ea:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	81 60       	ori	r24, 0x01	; 1
 3f2:	80 83       	st	Z, r24
 3f4:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 3f6:	88 60       	ori	r24, 0x08	; 8
 3f8:	80 83       	st	Z, r24
 3fa:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 3fc:	80 81       	ld	r24, Z
 3fe:	8e 7f       	andi	r24, 0xFE	; 254
 400:	80 83       	st	Z, r24
 402:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 404:	80 61       	ori	r24, 0x10	; 16
 406:	88 83       	st	Y, r24
 408:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <USB_Init>:
 412:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_IsInitialized>

	USB_ResetInterface();
 422:	b3 cf       	rjmp	.-154    	; 0x38a <USB_ResetInterface>

00000424 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 424:	e8 ed       	ldi	r30, 0xD8	; 216
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	8c 7f       	andi	r24, 0xFC	; 252
 42c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 42e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 432:	08 95       	ret

00000434 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 434:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 438:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 43c:	08 95       	ret

0000043e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	0b b6       	in	r0, 0x3b	; 59
 44a:	0f 92       	push	r0
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 464:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 468:	82 ff       	sbrs	r24, 2
 46a:	0a c0       	rjmp	.+20     	; 0x480 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 46c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 470:	82 ff       	sbrs	r24, 2
 472:	06 c0       	rjmp	.+12     	; 0x480 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 474:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 478:	8b 7f       	andi	r24, 0xFB	; 251
 47a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 47e:	9d d2       	rcall	.+1338   	; 0x9ba <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 480:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 484:	80 ff       	sbrs	r24, 0
 486:	1b c0       	rjmp	.+54     	; 0x4be <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 488:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 48c:	80 ff       	sbrs	r24, 0
 48e:	17 c0       	rjmp	.+46     	; 0x4be <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 490:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 494:	8e 7f       	andi	r24, 0xFE	; 254
 496:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 49a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 49e:	80 ff       	sbrs	r24, 0
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 4a2:	8c e0       	ldi	r24, 0x0C	; 12
 4a4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 4aa:	09 b4       	in	r0, 0x29	; 41
 4ac:	00 fe       	sbrs	r0, 0
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 4b2:	8e bb       	out	0x1e, r24	; 30
 4b4:	82 d2       	rcall	.+1284   	; 0x9ba <USB_Event_Stub>
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <__vector_10+0x80>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 4b8:	19 bc       	out	0x29, r1	; 41
			EVENT_USB_Device_Disconnect();
 4ba:	1e ba       	out	0x1e, r1	; 30
 4bc:	7e d2       	rcall	.+1276   	; 0x9ba <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 4be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 4c2:	80 ff       	sbrs	r24, 0
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 4c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4ca:	80 ff       	sbrs	r24, 0
 4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 4ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4d2:	8e 7f       	andi	r24, 0xFE	; 254
 4d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 4d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4dc:	80 61       	ori	r24, 0x10	; 16
 4de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 4e2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 4e6:	80 62       	ori	r24, 0x20	; 32
 4e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 4ec:	19 bc       	out	0x29, r1	; 41
 4ee:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
 4f0:	8e bb       	out	0x1e, r24	; 30
 4f2:	63 d2       	rcall	.+1222   	; 0x9ba <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 4f4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 4f8:	84 ff       	sbrs	r24, 4
 4fa:	2c c0       	rjmp	.+88     	; 0x554 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 4fc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 500:	84 ff       	sbrs	r24, 4
 502:	28 c0       	rjmp	.+80     	; 0x554 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 504:	8c e0       	ldi	r24, 0x0C	; 12
 506:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 508:	8e e0       	ldi	r24, 0x0E	; 14
 50a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 50c:	09 b4       	in	r0, 0x29	; 41
 50e:	00 fe       	sbrs	r0, 0
 510:	fd cf       	rjmp	.-6      	; 0x50c <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 512:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 516:	8f 7d       	andi	r24, 0xDF	; 223
 518:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 51c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 520:	8f 7e       	andi	r24, 0xEF	; 239
 522:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 526:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 52a:	8f 7e       	andi	r24, 0xEF	; 239
 52c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 530:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 534:	81 60       	ori	r24, 0x01	; 1
 536:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 53a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <USB_Device_ConfigurationNumber>
 53e:	81 11       	cpse	r24, r1
 540:	06 c0       	rjmp	.+12     	; 0x54e <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 542:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 546:	87 fd       	sbrc	r24, 7
 548:	02 c0       	rjmp	.+4      	; 0x54e <__vector_10+0x110>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	01 c0       	rjmp	.+2      	; 0x550 <__vector_10+0x112>
 54e:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 550:	8e bb       	out	0x1e, r24	; 30
 552:	33 d2       	rcall	.+1126   	; 0x9ba <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 554:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 558:	83 ff       	sbrs	r24, 3
 55a:	21 c0       	rjmp	.+66     	; 0x59e <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 55c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 560:	83 ff       	sbrs	r24, 3
 562:	1d c0       	rjmp	.+58     	; 0x59e <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 564:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 568:	87 7f       	andi	r24, 0xF7	; 247
 56a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 572:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 576:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 57a:	8e 7f       	andi	r24, 0xFE	; 254
 57c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 580:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 584:	8e 7f       	andi	r24, 0xFE	; 254
 586:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 58a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 58e:	80 61       	ori	r24, 0x10	; 16
 590:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 594:	42 e0       	ldi	r20, 0x02	; 2
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	95 de       	rcall	.-726    	; 0x2c6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 59c:	0e d2       	rcall	.+1052   	; 0x9ba <USB_Event_Stub>
 59e:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 5a0:	ef 91       	pop	r30
 5a2:	bf 91       	pop	r27
 5a4:	af 91       	pop	r26
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	7f 91       	pop	r23
 5ac:	6f 91       	pop	r22
 5ae:	5f 91       	pop	r21
 5b0:	4f 91       	pop	r20
 5b2:	3f 91       	pop	r19
 5b4:	2f 91       	pop	r18
 5b6:	0f 90       	pop	r0
 5b8:	0b be       	out	0x3b, r0	; 59
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <Endpoint_Write_Control_Stream_LE>:
 5c4:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <USB_ControlRequest+0x6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5c8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <USB_ControlRequest+0x7>
 5cc:	26 17       	cp	r18, r22
 5ce:	37 07       	cpc	r19, r23
 5d0:	48 f0       	brcs	.+18     	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0x20>
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <Endpoint_Write_Control_Stream_LE+0x22>
 5d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5dc:	2e 77       	andi	r18, 0x7E	; 126
 5de:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <Endpoint_Write_Control_Stream_LE+0x22>
 5e4:	b9 01       	movw	r22, r18
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	61 15       	cp	r22, r1
 5ec:	71 05       	cpc	r23, r1
 5ee:	61 f1       	breq	.+88     	; 0x648 <Endpoint_Write_Control_Stream_LE+0x84>
 5f0:	8e b3       	in	r24, 0x1e	; 30
 5f2:	88 23       	and	r24, r24
 5f4:	c9 f1       	breq	.+114    	; 0x668 <Endpoint_Write_Control_Stream_LE+0xa4>
 5f6:	85 30       	cpi	r24, 0x05	; 5
 5f8:	c9 f1       	breq	.+114    	; 0x66c <Endpoint_Write_Control_Stream_LE+0xa8>
 5fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5fe:	83 fd       	sbrc	r24, 3
 600:	31 c0       	rjmp	.+98     	; 0x664 <Endpoint_Write_Control_Stream_LE+0xa0>
 602:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 606:	82 fd       	sbrc	r24, 2
 608:	27 c0       	rjmp	.+78     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x94>
 60a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 60e:	80 ff       	sbrs	r24, 0
 610:	ec cf       	rjmp	.-40     	; 0x5ea <Endpoint_Write_Control_Stream_LE+0x26>
 612:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 616:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 61a:	61 15       	cp	r22, r1
 61c:	71 05       	cpc	r23, r1
 61e:	51 f0       	breq	.+20     	; 0x634 <Endpoint_Write_Control_Stream_LE+0x70>
 620:	88 30       	cpi	r24, 0x08	; 8
 622:	91 05       	cpc	r25, r1
 624:	38 f4       	brcc	.+14     	; 0x634 <Endpoint_Write_Control_Stream_LE+0x70>
 626:	21 91       	ld	r18, Z+
 628:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 62c:	61 50       	subi	r22, 0x01	; 1
 62e:	71 09       	sbc	r23, r1
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	f3 cf       	rjmp	.-26     	; 0x61a <Endpoint_Write_Control_Stream_LE+0x56>
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	08 97       	sbiw	r24, 0x08	; 8
 638:	09 f0       	breq	.+2      	; 0x63c <Endpoint_Write_Control_Stream_LE+0x78>
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 640:	8e 77       	andi	r24, 0x7E	; 126
 642:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 646:	d1 cf       	rjmp	.-94     	; 0x5ea <Endpoint_Write_Control_Stream_LE+0x26>
 648:	21 11       	cpse	r18, r1
 64a:	d2 cf       	rjmp	.-92     	; 0x5f0 <Endpoint_Write_Control_Stream_LE+0x2c>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x94>
 64e:	8e b3       	in	r24, 0x1e	; 30
 650:	88 23       	and	r24, r24
 652:	51 f0       	breq	.+20     	; 0x668 <Endpoint_Write_Control_Stream_LE+0xa4>
 654:	85 30       	cpi	r24, 0x05	; 5
 656:	51 f0       	breq	.+20     	; 0x66c <Endpoint_Write_Control_Stream_LE+0xa8>
 658:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 65c:	82 ff       	sbrs	r24, 2
 65e:	f7 cf       	rjmp	.-18     	; 0x64e <Endpoint_Write_Control_Stream_LE+0x8a>
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	08 95       	ret
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	08 95       	ret
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	08 95       	ret
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	08 95       	ret

00000670 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 670:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <USB_ControlRequest+0x6>
 674:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <USB_ControlRequest+0x7>
 678:	26 17       	cp	r18, r22
 67a:	37 07       	cpc	r19, r23
 67c:	48 f0       	brcs	.+18     	; 0x690 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 67e:	61 15       	cp	r22, r1
 680:	71 05       	cpc	r23, r1
 682:	39 f4       	brne	.+14     	; 0x692 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 684:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 688:	2e 77       	andi	r18, 0x7E	; 126
 68a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 68e:	01 c0       	rjmp	.+2      	; 0x692 <Endpoint_Write_Control_PStream_LE+0x22>
 690:	b9 01       	movw	r22, r18
 692:	fc 01       	movw	r30, r24
 694:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 696:	61 15       	cp	r22, r1
 698:	71 05       	cpc	r23, r1
 69a:	69 f1       	breq	.+90     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 69c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 69e:	88 23       	and	r24, r24
 6a0:	d1 f1       	breq	.+116    	; 0x716 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6a2:	85 30       	cpi	r24, 0x05	; 5
 6a4:	d1 f1       	breq	.+116    	; 0x71a <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6aa:	83 fd       	sbrc	r24, 3
 6ac:	32 c0       	rjmp	.+100    	; 0x712 <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6b2:	82 fd       	sbrc	r24, 2
 6b4:	28 c0       	rjmp	.+80     	; 0x706 <Endpoint_Write_Control_PStream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 6ba:	80 ff       	sbrs	r24, 0
 6bc:	ec cf       	rjmp	.-40     	; 0x696 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 6be:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6c2:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6c6:	61 15       	cp	r22, r1
 6c8:	71 05       	cpc	r23, r1
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <Endpoint_Write_Control_PStream_LE+0x72>
 6cc:	88 30       	cpi	r24, 0x08	; 8
 6ce:	91 05       	cpc	r25, r1
 6d0:	40 f4       	brcc	.+16     	; 0x6e2 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6d2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6d4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 6d8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 6da:	61 50       	subi	r22, 0x01	; 1
 6dc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	f2 cf       	rjmp	.-28     	; 0x6c6 <Endpoint_Write_Control_PStream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	08 97       	sbiw	r24, 0x08	; 8
 6e6:	09 f0       	breq	.+2      	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x7a>
 6e8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ee:	8e 77       	andi	r24, 0x7E	; 126
 6f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f4:	d0 cf       	rjmp	.-96     	; 0x696 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6f6:	21 11       	cpse	r18, r1
 6f8:	d1 cf       	rjmp	.-94     	; 0x69c <Endpoint_Write_Control_PStream_LE+0x2c>
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <Endpoint_Write_Control_PStream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6fc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6fe:	88 23       	and	r24, r24
 700:	51 f0       	breq	.+20     	; 0x716 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 702:	85 30       	cpi	r24, 0x05	; 5
 704:	51 f0       	breq	.+20     	; 0x71a <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 706:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 70a:	82 ff       	sbrs	r24, 2
 70c:	f7 cf       	rjmp	.-18     	; 0x6fc <Endpoint_Write_Control_PStream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 71a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 71c:	08 95       	ret

0000071e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	aa 97       	sbiw	r28, 0x2a	; 42
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	ec e2       	ldi	r30, 0x2C	; 44
 738:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 73a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 73e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	e4 33       	cpi	r30, 0x34	; 52
 744:	f2 07       	cpc	r31, r18
 746:	c9 f7       	brne	.-14     	; 0x73a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 748:	8b dd       	rcall	.-1258   	; 0x260 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 74a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 74e:	83 ff       	sbrs	r24, 3
 750:	1b c1       	rjmp	.+566    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 752:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 756:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_ControlRequest+0x1>
 75a:	49 2f       	mov	r20, r25
 75c:	50 e0       	ldi	r21, 0x00	; 0
 75e:	4a 30       	cpi	r20, 0x0A	; 10
 760:	51 05       	cpc	r21, r1
 762:	08 f0       	brcs	.+2      	; 0x766 <USB_Device_ProcessControlRequest+0x48>
 764:	11 c1       	rjmp	.+546    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
 766:	fa 01       	movw	r30, r20
 768:	e4 5b       	subi	r30, 0xB4	; 180
 76a:	ff 4f       	sbci	r31, 0xFF	; 255
 76c:	eb c2       	rjmp	.+1494   	; 0xd44 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 76e:	80 38       	cpi	r24, 0x80	; 128
 770:	81 f0       	breq	.+32     	; 0x792 <USB_Device_ProcessControlRequest+0x74>
 772:	82 38       	cpi	r24, 0x82	; 130
 774:	09 f0       	breq	.+2      	; 0x778 <USB_Device_ProcessControlRequest+0x5a>
 776:	08 c1       	rjmp	.+528    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 778:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest+0x4>
 77c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 77e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 782:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 786:	85 fb       	bst	r24, 5
 788:	88 27       	eor	r24, r24
 78a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 78c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 790:	06 c0       	rjmp	.+12     	; 0x79e <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 792:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 796:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <USB_Device_RemoteWakeupEnabled>
 79a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 79c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 79e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7a2:	97 7f       	andi	r25, 0xF7	; 247
 7a4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 7a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 7ac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 7b0:	c4 c0       	rjmp	.+392    	; 0x93a <USB_Device_ProcessControlRequest+0x21c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7b2:	28 2f       	mov	r18, r24
 7b4:	2d 7f       	andi	r18, 0xFD	; 253
 7b6:	09 f0       	breq	.+2      	; 0x7ba <USB_Device_ProcessControlRequest+0x9c>
 7b8:	e7 c0       	rjmp	.+462    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7ba:	88 23       	and	r24, r24
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <USB_Device_ProcessControlRequest+0xa6>
 7be:	82 30       	cpi	r24, 0x02	; 2
 7c0:	61 f0       	breq	.+24     	; 0x7da <USB_Device_ProcessControlRequest+0xbc>
 7c2:	e2 c0       	rjmp	.+452    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 7c4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	09 f0       	breq	.+2      	; 0x7ce <USB_Device_ProcessControlRequest+0xb0>
 7cc:	dd c0       	rjmp	.+442    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7ce:	93 30       	cpi	r25, 0x03	; 3
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <USB_Device_ProcessControlRequest+0xb6>
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_Device_RemoteWakeupEnabled>
 7d8:	2b c0       	rjmp	.+86     	; 0x830 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 7da:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 7de:	81 11       	cpse	r24, r1
 7e0:	27 c0       	rjmp	.+78     	; 0x830 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest+0x4>
 7e6:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 7e8:	09 f4       	brne	.+2      	; 0x7ec <USB_Device_ProcessControlRequest+0xce>
 7ea:	ce c0       	rjmp	.+412    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 7f0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 7f4:	20 ff       	sbrs	r18, 0
 7f6:	1c c0       	rjmp	.+56     	; 0x830 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 7f8:	93 30       	cpi	r25, 0x03	; 3
 7fa:	21 f4       	brne	.+8      	; 0x804 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 7fc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 800:	80 62       	ori	r24, 0x20	; 32
 802:	14 c0       	rjmp	.+40     	; 0x82c <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 804:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 808:	90 61       	ori	r25, 0x10	; 16
 80a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	a9 01       	movw	r20, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <USB_Device_ProcessControlRequest+0xfc>
 816:	44 0f       	add	r20, r20
 818:	55 1f       	adc	r21, r21
 81a:	8a 95       	dec	r24
 81c:	e2 f7       	brpl	.-8      	; 0x816 <USB_Device_ProcessControlRequest+0xf8>
 81e:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 822:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 826:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 82a:	88 60       	ori	r24, 0x08	; 8
 82c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 830:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 834:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 838:	87 7f       	andi	r24, 0xF7	; 247
 83a:	82 c0       	rjmp	.+260    	; 0x940 <USB_Device_ProcessControlRequest+0x222>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 83c:	81 11       	cpse	r24, r1
 83e:	a4 c0       	rjmp	.+328    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 840:	10 91 2e 01 	lds	r17, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 844:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 846:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 848:	f8 94       	cli
 84a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 84e:	87 7f       	andi	r24, 0xF7	; 247
 850:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 854:	4b dd       	rcall	.-1386   	; 0x2ec <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 856:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 85a:	80 ff       	sbrs	r24, 0
 85c:	fc cf       	rjmp	.-8      	; 0x856 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 85e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 862:	80 78       	andi	r24, 0x80	; 128
 864:	81 2b       	or	r24, r17

				UDADDR = Temp;
 866:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 86a:	80 68       	ori	r24, 0x80	; 128
 86c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 870:	11 11       	cpse	r17, r1
 872:	02 c0       	rjmp	.+4      	; 0x878 <USB_Device_ProcessControlRequest+0x15a>
 874:	82 e0       	ldi	r24, 0x02	; 2
 876:	01 c0       	rjmp	.+2      	; 0x87a <USB_Device_ProcessControlRequest+0x15c>
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 87c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 87e:	84 c0       	rjmp	.+264    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 880:	80 58       	subi	r24, 0x80	; 128
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	08 f0       	brcs	.+2      	; 0x888 <USB_Device_ProcessControlRequest+0x16a>
 886:	80 c0       	rjmp	.+256    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 888:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 88c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_ControlRequest+0x3>
 890:	8c 3d       	cpi	r24, 0xDC	; 220
 892:	53 e0       	ldi	r21, 0x03	; 3
 894:	95 07       	cpc	r25, r21
 896:	71 f5       	brne	.+92     	; 0x8f4 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 898:	83 e0       	ldi	r24, 0x03	; 3
 89a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 89c:	8a e2       	ldi	r24, 0x2A	; 42
 89e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8a0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8a2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 8a4:	de 01       	movw	r26, r28
 8a6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8a8:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 8aa:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8ac:	51 e2       	ldi	r21, 0x21	; 33
 8ae:	e3 2f       	mov	r30, r19
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 8b6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 8b8:	20 ff       	sbrs	r18, 0
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <USB_Device_ProcessControlRequest+0x1a4>
					{
						SerialByte >>= 4;
 8bc:	e2 95       	swap	r30
 8be:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 8c0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 8c2:	ef 70       	andi	r30, 0x0F	; 15
 8c4:	8e 2f       	mov	r24, r30
 8c6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8c8:	ea 30       	cpi	r30, 0x0A	; 10
 8ca:	10 f0       	brcs	.+4      	; 0x8d0 <USB_Device_ProcessControlRequest+0x1b2>
 8cc:	c7 96       	adiw	r24, 0x37	; 55
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <USB_Device_ProcessControlRequest+0x1b4>
 8d0:	c0 96       	adiw	r24, 0x30	; 48
 8d2:	8d 93       	st	X+, r24
 8d4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8d6:	2f 5f       	subi	r18, 0xFF	; 255
 8d8:	24 31       	cpi	r18, 0x14	; 20
 8da:	49 f7       	brne	.-46     	; 0x8ae <USB_Device_ProcessControlRequest+0x190>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 8dc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e2:	87 7f       	andi	r24, 0xF7	; 247
 8e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 8e8:	6a e2       	ldi	r22, 0x2A	; 42
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	69 de       	rcall	.-814    	; 0x5c4 <Endpoint_Write_Control_Stream_LE>
 8f2:	12 c0       	rjmp	.+36     	; 0x918 <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 8f4:	ae 01       	movw	r20, r28
 8f6:	4f 5f       	subi	r20, 0xFF	; 255
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <USB_ControlRequest+0x4>
 8fe:	b3 dc       	rcall	.-1690   	; 0x266 <CALLBACK_USB_GetDescriptor>
 900:	bc 01       	movw	r22, r24
 902:	89 2b       	or	r24, r25
 904:	09 f4       	brne	.+2      	; 0x908 <USB_Device_ProcessControlRequest+0x1ea>
 906:	40 c0       	rjmp	.+128    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
 908:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 90c:	97 7f       	andi	r25, 0xF7	; 247
 90e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	9a 81       	ldd	r25, Y+2	; 0x02
 916:	ac de       	rcall	.-680    	; 0x670 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 91c:	8b 77       	andi	r24, 0x7B	; 123
 91e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 922:	32 c0       	rjmp	.+100    	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 924:	80 38       	cpi	r24, 0x80	; 128
 926:	81 f5       	brne	.+96     	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 928:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 92c:	87 7f       	andi	r24, 0xF7	; 247
 92e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 932:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 936:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 93a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 93e:	8e 77       	andi	r24, 0x7E	; 126
 940:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 944:	d3 dc       	rcall	.-1626   	; 0x2ec <Endpoint_ClearStatusStage>
 946:	20 c0       	rjmp	.+64     	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 948:	81 11       	cpse	r24, r1
 94a:	1e c0       	rjmp	.+60     	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 94c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 950:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_ControlRequest+0x3>
 954:	99 27       	eor	r25, r25
 956:	02 97       	sbiw	r24, 0x02	; 2
 958:	bc f4       	brge	.+46     	; 0x988 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 95a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 95e:	87 7f       	andi	r24, 0xF7	; 247
 960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 964:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 968:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 96c:	bf dc       	rcall	.-1666   	; 0x2ec <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 96e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <USB_Device_ConfigurationNumber>
 972:	81 11       	cpse	r24, r1
 974:	06 c0       	rjmp	.+12     	; 0x982 <USB_Device_ProcessControlRequest+0x264>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 976:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 97a:	87 fd       	sbrc	r24, 7
 97c:	02 c0       	rjmp	.+4      	; 0x982 <USB_Device_ProcessControlRequest+0x264>
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	01 c0       	rjmp	.+2      	; 0x984 <USB_Device_ProcessControlRequest+0x266>
 982:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
 984:	8e bb       	out	0x1e, r24	; 30
 986:	69 dc       	rcall	.-1838   	; 0x25a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 988:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 98c:	83 ff       	sbrs	r24, 3
 98e:	0a c0       	rjmp	.+20     	; 0x9a4 <USB_Device_ProcessControlRequest+0x286>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 990:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 994:	80 62       	ori	r24, 0x20	; 32
 996:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 99a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 99e:	87 7f       	andi	r24, 0xF7	; 247
 9a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 9a4:	aa 96       	adiw	r28, 0x2a	; 42
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	08 95       	ret

000009ba <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 9ba:	08 95       	ret

000009bc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 9bc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 9be:	8e b3       	in	r24, 0x1e	; 30
 9c0:	88 23       	and	r24, r24
 9c2:	59 f0       	breq	.+22     	; 0x9da <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 9c4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 9c8:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9ca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 9d2:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 9d4:	a4 de       	rcall	.-696    	; 0x71e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9d6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 9da:	cf 91       	pop	r28
 9dc:	08 95       	ret

000009de <CDC_Device_ConfigureEndpoints>:
#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
 9de:	1f 93       	push	r17
 9e0:	cf 93       	push	r28
 9e2:	df 93       	push	r29
 9e4:	ec 01       	movw	r28, r24
 9e6:	fc 01       	movw	r30, r24
 9e8:	3d 96       	adiw	r30, 0x0d	; 13
 9ea:	89 e0       	ldi	r24, 0x09	; 9
 9ec:	df 01       	movw	r26, r30
 9ee:	1d 92       	st	X+, r1
 9f0:	8a 95       	dec	r24
 9f2:	e9 f7       	brne	.-6      	; 0x9ee <CDC_Device_ConfigureEndpoints+0x10>
 9f4:	11 e0       	ldi	r17, 0x01	; 1
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	81 13       	cpse	r24, r17
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <CDC_Device_ConfigureEndpoints+0x28>
 9fc:	ea 81       	ldd	r30, Y+2	; 0x02
 9fe:	fb 81       	ldd	r31, Y+3	; 0x03
 a00:	9c 81       	ldd	r25, Y+4	; 0x04
 a02:	20 e8       	ldi	r18, 0x80	; 128
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <CDC_Device_ConfigureEndpoints+0x36>
 a06:	8d 81       	ldd	r24, Y+5	; 0x05
 a08:	81 13       	cpse	r24, r17
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <CDC_Device_ConfigureEndpoints+0x3a>
 a0c:	ee 81       	ldd	r30, Y+6	; 0x06
 a0e:	ff 81       	ldd	r31, Y+7	; 0x07
 a10:	98 85       	ldd	r25, Y+8	; 0x08
 a12:	20 e0       	ldi	r18, 0x00	; 0
 a14:	82 e0       	ldi	r24, 0x02	; 2
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <CDC_Device_ConfigureEndpoints+0x54>
 a18:	89 85       	ldd	r24, Y+9	; 0x09
 a1a:	81 17       	cp	r24, r17
 a1c:	29 f0       	breq	.+10     	; 0xa28 <CDC_Device_ConfigureEndpoints+0x4a>
 a1e:	1f 5f       	subi	r17, 0xFF	; 255
 a20:	17 30       	cpi	r17, 0x07	; 7
 a22:	49 f7       	brne	.-46     	; 0x9f6 <CDC_Device_ConfigureEndpoints+0x18>
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	22 c0       	rjmp	.+68     	; 0xa6c <CDC_Device_ConfigureEndpoints+0x8e>
 a28:	ea 85       	ldd	r30, Y+10	; 0x0a
 a2a:	fb 85       	ldd	r31, Y+11	; 0x0b
 a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
 a2e:	20 e8       	ldi	r18, 0x80	; 128
 a30:	83 e0       	ldi	r24, 0x03	; 3
 a32:	91 11       	cpse	r25, r1
 a34:	94 e0       	ldi	r25, 0x04	; 4
 a36:	68 e0       	ldi	r22, 0x08	; 8
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	40 e0       	ldi	r20, 0x00	; 0
 a3c:	6e 17       	cp	r22, r30
 a3e:	7f 07       	cpc	r23, r31
 a40:	20 f4       	brcc	.+8      	; 0xa4a <CDC_Device_ConfigureEndpoints+0x6c>
 a42:	4f 5f       	subi	r20, 0xFF	; 255
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	f9 cf       	rjmp	.-14     	; 0xa3c <CDC_Device_ConfigureEndpoints+0x5e>
 a4a:	42 95       	swap	r20
 a4c:	40 7f       	andi	r20, 0xF0	; 240
 a4e:	92 60       	ori	r25, 0x02	; 2
 a50:	49 2b       	or	r20, r25
 a52:	b0 e4       	ldi	r27, 0x40	; 64
 a54:	8b 9f       	mul	r24, r27
 a56:	c0 01       	movw	r24, r0
 a58:	11 24       	eor	r1, r1
 a5a:	61 e0       	ldi	r22, 0x01	; 1
 a5c:	21 11       	cpse	r18, r1
 a5e:	01 c0       	rjmp	.+2      	; 0xa62 <CDC_Device_ConfigureEndpoints+0x84>
 a60:	60 e0       	ldi	r22, 0x00	; 0
 a62:	68 2b       	or	r22, r24
 a64:	81 2f       	mov	r24, r17
 a66:	2f dc       	rcall	.-1954   	; 0x2c6 <Endpoint_ConfigureEndpoint_Prv>
 a68:	81 11       	cpse	r24, r1
 a6a:	d9 cf       	rjmp	.-78     	; 0xa1e <CDC_Device_ConfigureEndpoints+0x40>
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	1f 91       	pop	r17
 a72:	08 95       	ret

00000a74 <CDC_Device_SendByte>:
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	2e b3       	in	r18, 0x1e	; 30
 a7c:	24 30       	cpi	r18, 0x04	; 4
 a7e:	f1 f4       	brne	.+60     	; 0xabc <CDC_Device_SendByte+0x48>
 a80:	fc 01       	movw	r30, r24
 a82:	07 85       	ldd	r16, Z+15	; 0x0f
 a84:	10 89       	ldd	r17, Z+16	; 0x10
 a86:	21 89       	ldd	r18, Z+17	; 0x11
 a88:	32 89       	ldd	r19, Z+18	; 0x12
 a8a:	01 2b       	or	r16, r17
 a8c:	02 2b       	or	r16, r18
 a8e:	03 2b       	or	r16, r19
 a90:	a9 f0       	breq	.+42     	; 0xabc <CDC_Device_SendByte+0x48>
 a92:	c6 2f       	mov	r28, r22
 a94:	81 81       	ldd	r24, Z+1	; 0x01
 a96:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 a9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a9e:	85 ff       	sbrs	r24, 5
 aa0:	04 c0       	rjmp	.+8      	; 0xaaa <CDC_Device_SendByte+0x36>
 aa2:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	0a c0       	rjmp	.+20     	; 0xabe <CDC_Device_SendByte+0x4a>
 aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aae:	8e 77       	andi	r24, 0x7E	; 126
 ab0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ab4:	38 dc       	rcall	.-1936   	; 0x326 <Endpoint_WaitUntilReady>
 ab6:	88 23       	and	r24, r24
 ab8:	a1 f3       	breq	.-24     	; 0xaa2 <CDC_Device_SendByte+0x2e>
 aba:	01 c0       	rjmp	.+2      	; 0xabe <CDC_Device_SendByte+0x4a>
 abc:	82 e0       	ldi	r24, 0x02	; 2
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <CDC_Device_putchar>:
 ac6:	fb 01       	movw	r30, r22
 ac8:	68 2f       	mov	r22, r24
 aca:	84 85       	ldd	r24, Z+12	; 0x0c
 acc:	95 85       	ldd	r25, Z+13	; 0x0d
 ace:	d2 df       	rcall	.-92     	; 0xa74 <CDC_Device_SendByte>
 ad0:	21 e0       	ldi	r18, 0x01	; 1
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	81 11       	cpse	r24, r1
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <CDC_Device_putchar+0x16>
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	88 27       	eor	r24, r24
 ade:	99 27       	eor	r25, r25
 ae0:	82 1b       	sub	r24, r18
 ae2:	93 0b       	sbc	r25, r19
 ae4:	08 95       	ret

00000ae6 <CDC_Device_Flush>:
 ae6:	2e b3       	in	r18, 0x1e	; 30
 ae8:	24 30       	cpi	r18, 0x04	; 4
 aea:	29 f5       	brne	.+74     	; 0xb36 <CDC_Device_Flush+0x50>
 aec:	fc 01       	movw	r30, r24
 aee:	47 85       	ldd	r20, Z+15	; 0x0f
 af0:	50 89       	ldd	r21, Z+16	; 0x10
 af2:	61 89       	ldd	r22, Z+17	; 0x11
 af4:	72 89       	ldd	r23, Z+18	; 0x12
 af6:	45 2b       	or	r20, r21
 af8:	46 2b       	or	r20, r22
 afa:	47 2b       	or	r20, r23
 afc:	e1 f0       	breq	.+56     	; 0xb36 <CDC_Device_Flush+0x50>
 afe:	81 81       	ldd	r24, Z+1	; 0x01
 b00:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b04:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b08:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b0c:	89 2b       	or	r24, r25
 b0e:	89 f0       	breq	.+34     	; 0xb32 <CDC_Device_Flush+0x4c>
 b10:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b18:	8e 77       	andi	r24, 0x7E	; 126
 b1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b1e:	95 fd       	sbrc	r25, 5
 b20:	08 c0       	rjmp	.+16     	; 0xb32 <CDC_Device_Flush+0x4c>
 b22:	01 dc       	rcall	.-2046   	; 0x326 <Endpoint_WaitUntilReady>
 b24:	81 11       	cpse	r24, r1
 b26:	08 c0       	rjmp	.+16     	; 0xb38 <CDC_Device_Flush+0x52>
 b28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b2c:	8e 77       	andi	r24, 0x7E	; 126
 b2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	08 95       	ret
 b36:	82 e0       	ldi	r24, 0x02	; 2
 b38:	08 95       	ret

00000b3a <CDC_Device_USBTask>:
 b3a:	2e b3       	in	r18, 0x1e	; 30
 b3c:	24 30       	cpi	r18, 0x04	; 4
 b3e:	51 f4       	brne	.+20     	; 0xb54 <CDC_Device_USBTask+0x1a>
 b40:	fc 01       	movw	r30, r24
 b42:	47 85       	ldd	r20, Z+15	; 0x0f
 b44:	50 89       	ldd	r21, Z+16	; 0x10
 b46:	61 89       	ldd	r22, Z+17	; 0x11
 b48:	72 89       	ldd	r23, Z+18	; 0x12
 b4a:	45 2b       	or	r20, r21
 b4c:	46 2b       	or	r20, r22
 b4e:	47 2b       	or	r20, r23
 b50:	09 f0       	breq	.+2      	; 0xb54 <CDC_Device_USBTask+0x1a>
 b52:	c9 cf       	rjmp	.-110    	; 0xae6 <CDC_Device_Flush>
 b54:	08 95       	ret

00000b56 <CDC_Device_ReceiveByte>:
 b56:	2e b3       	in	r18, 0x1e	; 30
 b58:	24 30       	cpi	r18, 0x04	; 4
 b5a:	19 f0       	breq	.+6      	; 0xb62 <CDC_Device_ReceiveByte+0xc>
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	08 95       	ret
 b62:	fc 01       	movw	r30, r24
 b64:	47 85       	ldd	r20, Z+15	; 0x0f
 b66:	50 89       	ldd	r21, Z+16	; 0x10
 b68:	61 89       	ldd	r22, Z+17	; 0x11
 b6a:	72 89       	ldd	r23, Z+18	; 0x12
 b6c:	45 2b       	or	r20, r21
 b6e:	46 2b       	or	r20, r22
 b70:	47 2b       	or	r20, r23
 b72:	a1 f3       	breq	.-24     	; 0xb5c <CDC_Device_ReceiveByte+0x6>
 b74:	85 81       	ldd	r24, Z+5	; 0x05
 b76:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b7e:	82 ff       	sbrs	r24, 2
 b80:	ed cf       	rjmp	.-38     	; 0xb5c <CDC_Device_ReceiveByte+0x6>
 b82:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b86:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b8a:	89 2b       	or	r24, r25
 b8c:	21 f0       	breq	.+8      	; 0xb96 <CDC_Device_ReceiveByte+0x40>
 b8e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <CDC_Device_ReceiveByte+0x44>
 b96:	2f ef       	ldi	r18, 0xFF	; 255
 b98:	3f ef       	ldi	r19, 0xFF	; 255
 b9a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b9e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 ba2:	89 2b       	or	r24, r25
 ba4:	29 f4       	brne	.+10     	; 0xbb0 <CDC_Device_ReceiveByte+0x5a>
 ba6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 baa:	8b 77       	andi	r24, 0x7B	; 123
 bac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bb0:	c9 01       	movw	r24, r18
 bb2:	08 95       	ret

00000bb4 <CDC_Device_getchar_Blocking>:
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	ec 01       	movw	r28, r24
 bba:	8c 85       	ldd	r24, Y+12	; 0x0c
 bbc:	9d 85       	ldd	r25, Y+13	; 0x0d
 bbe:	cb df       	rcall	.-106    	; 0xb56 <CDC_Device_ReceiveByte>
 bc0:	97 ff       	sbrs	r25, 7
 bc2:	0a c0       	rjmp	.+20     	; 0xbd8 <CDC_Device_getchar_Blocking+0x24>
 bc4:	8e b3       	in	r24, 0x1e	; 30
 bc6:	88 23       	and	r24, r24
 bc8:	29 f0       	breq	.+10     	; 0xbd4 <CDC_Device_getchar_Blocking+0x20>
 bca:	8c 85       	ldd	r24, Y+12	; 0x0c
 bcc:	9d 85       	ldd	r25, Y+13	; 0x0d
 bce:	b5 df       	rcall	.-150    	; 0xb3a <CDC_Device_USBTask>
 bd0:	f5 de       	rcall	.-534    	; 0x9bc <USB_USBTask>
 bd2:	f3 cf       	rjmp	.-26     	; 0xbba <CDC_Device_getchar_Blocking+0x6>
 bd4:	8e ef       	ldi	r24, 0xFE	; 254
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	08 95       	ret

00000bde <CDC_Device_CreateBlockingStream>:
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
 bde:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
 be0:	2e e0       	ldi	r18, 0x0E	; 14
 be2:	db 01       	movw	r26, r22
 be4:	1d 92       	st	X+, r1
 be6:	2a 95       	dec	r18
 be8:	e9 f7       	brne	.-6      	; 0xbe4 <CDC_Device_CreateBlockingStream+0x6>
 bea:	23 e0       	ldi	r18, 0x03	; 3
 bec:	23 83       	std	Z+3, r18	; 0x03
 bee:	23 e6       	ldi	r18, 0x63	; 99
 bf0:	35 e0       	ldi	r19, 0x05	; 5
 bf2:	31 87       	std	Z+9, r19	; 0x09
 bf4:	20 87       	std	Z+8, r18	; 0x08
 bf6:	2a ed       	ldi	r18, 0xDA	; 218
 bf8:	35 e0       	ldi	r19, 0x05	; 5
 bfa:	33 87       	std	Z+11, r19	; 0x0b
 bfc:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 bfe:	95 87       	std	Z+13, r25	; 0x0d
 c00:	84 87       	std	Z+12, r24	; 0x0c
 c02:	08 95       	ret

00000c04 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 c04:	08 95       	ret

00000c06 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
 c10:	83 ff       	sbrs	r24, 3
 c12:	95 c0       	rjmp	.+298    	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 c14:	88 81       	ld	r24, Y
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_ControlRequest+0x4>
 c1c:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <USB_ControlRequest+0x5>
 c20:	28 17       	cp	r18, r24
 c22:	39 07       	cpc	r19, r25
 c24:	09 f0       	breq	.+2      	; 0xc28 <CDC_Device_ProcessControlRequest+0x22>
 c26:	8b c0       	rjmp	.+278    	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
 c28:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_ControlRequest+0x1>
 c2c:	81 32       	cpi	r24, 0x21	; 33
 c2e:	59 f0       	breq	.+22     	; 0xc46 <CDC_Device_ProcessControlRequest+0x40>
 c30:	18 f4       	brcc	.+6      	; 0xc38 <CDC_Device_ProcessControlRequest+0x32>
 c32:	80 32       	cpi	r24, 0x20	; 32
 c34:	d1 f1       	breq	.+116    	; 0xcaa <CDC_Device_ProcessControlRequest+0xa4>
 c36:	83 c0       	rjmp	.+262    	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
 c38:	82 32       	cpi	r24, 0x22	; 34
 c3a:	09 f4       	brne	.+2      	; 0xc3e <CDC_Device_ProcessControlRequest+0x38>
 c3c:	5f c0       	rjmp	.+190    	; 0xcfc <CDC_Device_ProcessControlRequest+0xf6>
 c3e:	83 32       	cpi	r24, 0x23	; 35
 c40:	09 f4       	brne	.+2      	; 0xc44 <CDC_Device_ProcessControlRequest+0x3e>
 c42:	6d c0       	rjmp	.+218    	; 0xd1e <CDC_Device_ProcessControlRequest+0x118>
 c44:	7c c0       	rjmp	.+248    	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c46:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 c4a:	81 3a       	cpi	r24, 0xA1	; 161
 c4c:	09 f0       	breq	.+2      	; 0xc50 <CDC_Device_ProcessControlRequest+0x4a>
 c4e:	77 c0       	rjmp	.+238    	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c54:	87 7f       	andi	r24, 0xF7	; 247
 c56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
 c5c:	98 89       	ldd	r25, Y+16	; 0x10
 c5e:	a9 89       	ldd	r26, Y+17	; 0x11
 c60:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 c62:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 c66:	49 2f       	mov	r20, r25
 c68:	5a 2f       	mov	r21, r26
 c6a:	6b 2f       	mov	r22, r27
 c6c:	77 27       	eor	r23, r23
 c6e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
 c72:	ad 01       	movw	r20, r26
 c74:	66 27       	eor	r22, r22
 c76:	77 27       	eor	r23, r23
 c78:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
 c7c:	8b 2f       	mov	r24, r27
 c7e:	99 27       	eor	r25, r25
 c80:	aa 27       	eor	r26, r26
 c82:	bb 27       	eor	r27, r27
 c84:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 c88:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c8a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 c8e:	8c 89       	ldd	r24, Y+20	; 0x14
 c90:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 c94:	8d 89       	ldd	r24, Y+21	; 0x15
 c96:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c9e:	8e 77       	andi	r24, 0x7E	; 126
 ca0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 ca4:	df 91       	pop	r29
 ca6:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 ca8:	21 cb       	rjmp	.-2494   	; 0x2ec <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 caa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 cae:	81 32       	cpi	r24, 0x21	; 33
 cb0:	09 f0       	breq	.+2      	; 0xcb4 <CDC_Device_ProcessControlRequest+0xae>
 cb2:	45 c0       	rjmp	.+138    	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cb8:	87 7f       	andi	r24, 0xF7	; 247
 cba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 cbe:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
 cc2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
 cc6:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
 cca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 cce:	3f 87       	std	Y+15, r19	; 0x0f
 cd0:	28 8b       	std	Y+16, r18	; 0x10
 cd2:	99 8b       	std	Y+17, r25	; 0x11
 cd4:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cd6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 cda:	8b 8b       	std	Y+19, r24	; 0x13
 cdc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 ce0:	8c 8b       	std	Y+20, r24	; 0x14
 ce2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 ce6:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ce8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cec:	8b 77       	andi	r24, 0x7B	; 123
 cee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 cf2:	fc da       	rcall	.-2568   	; 0x2ec <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 cf4:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 cf6:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 cf8:	cf 91       	pop	r28
 cfa:	84 cf       	rjmp	.-248    	; 0xc04 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cfc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 d00:	81 32       	cpi	r24, 0x21	; 33
 d02:	e9 f4       	brne	.+58     	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d08:	87 7f       	andi	r24, 0xF7	; 247
 d0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d0e:	ee da       	rcall	.-2596   	; 0x2ec <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 d10:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 d14:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 d16:	ce 01       	movw	r24, r28
 d18:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 d1a:	cf 91       	pop	r28
 d1c:	73 cf       	rjmp	.-282    	; 0xc04 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d1e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 d22:	81 32       	cpi	r24, 0x21	; 33
 d24:	61 f4       	brne	.+24     	; 0xd3e <CDC_Device_ProcessControlRequest+0x138>
 d26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d2a:	87 7f       	andi	r24, 0xF7	; 247
 d2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d30:	dd da       	rcall	.-2630   	; 0x2ec <Endpoint_ClearStatusStage>
 d32:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
			}

			break;
	}
}
 d36:	ce 01       	movw	r24, r28
 d38:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d3a:	cf 91       	pop	r28
 d3c:	63 cf       	rjmp	.-314    	; 0xc04 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	08 95       	ret

00000d44 <__tablejump2__>:
 d44:	ee 0f       	add	r30, r30
 d46:	ff 1f       	adc	r31, r31
 d48:	00 24       	eor	r0, r0
 d4a:	00 1c       	adc	r0, r0
 d4c:	0b be       	out	0x3b, r0	; 59
 d4e:	07 90       	elpm	r0, Z+
 d50:	f6 91       	elpm	r31, Z
 d52:	e0 2d       	mov	r30, r0
 d54:	09 94       	ijmp

00000d56 <fgetc>:
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	ec 01       	movw	r28, r24
 d5c:	2b 81       	ldd	r18, Y+3	; 0x03
 d5e:	20 ff       	sbrs	r18, 0
 d60:	33 c0       	rjmp	.+102    	; 0xdc8 <fgetc+0x72>
 d62:	26 ff       	sbrs	r18, 6
 d64:	0a c0       	rjmp	.+20     	; 0xd7a <fgetc+0x24>
 d66:	2f 7b       	andi	r18, 0xBF	; 191
 d68:	2b 83       	std	Y+3, r18	; 0x03
 d6a:	8e 81       	ldd	r24, Y+6	; 0x06
 d6c:	9f 81       	ldd	r25, Y+7	; 0x07
 d6e:	01 96       	adiw	r24, 0x01	; 1
 d70:	9f 83       	std	Y+7, r25	; 0x07
 d72:	8e 83       	std	Y+6, r24	; 0x06
 d74:	8a 81       	ldd	r24, Y+2	; 0x02
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	29 c0       	rjmp	.+82     	; 0xdcc <fgetc+0x76>
 d7a:	22 ff       	sbrs	r18, 2
 d7c:	0f c0       	rjmp	.+30     	; 0xd9c <fgetc+0x46>
 d7e:	e8 81       	ld	r30, Y
 d80:	f9 81       	ldd	r31, Y+1	; 0x01
 d82:	80 81       	ld	r24, Z
 d84:	08 2e       	mov	r0, r24
 d86:	00 0c       	add	r0, r0
 d88:	99 0b       	sbc	r25, r25
 d8a:	00 97       	sbiw	r24, 0x00	; 0
 d8c:	19 f4       	brne	.+6      	; 0xd94 <fgetc+0x3e>
 d8e:	20 62       	ori	r18, 0x20	; 32
 d90:	2b 83       	std	Y+3, r18	; 0x03
 d92:	1a c0       	rjmp	.+52     	; 0xdc8 <fgetc+0x72>
 d94:	31 96       	adiw	r30, 0x01	; 1
 d96:	f9 83       	std	Y+1, r31	; 0x01
 d98:	e8 83       	st	Y, r30
 d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <fgetc+0x62>
 d9c:	ea 85       	ldd	r30, Y+10	; 0x0a
 d9e:	fb 85       	ldd	r31, Y+11	; 0x0b
 da0:	09 95       	icall
 da2:	97 ff       	sbrs	r25, 7
 da4:	09 c0       	rjmp	.+18     	; 0xdb8 <fgetc+0x62>
 da6:	2b 81       	ldd	r18, Y+3	; 0x03
 da8:	01 96       	adiw	r24, 0x01	; 1
 daa:	11 f0       	breq	.+4      	; 0xdb0 <fgetc+0x5a>
 dac:	80 e2       	ldi	r24, 0x20	; 32
 dae:	01 c0       	rjmp	.+2      	; 0xdb2 <fgetc+0x5c>
 db0:	80 e1       	ldi	r24, 0x10	; 16
 db2:	82 2b       	or	r24, r18
 db4:	8b 83       	std	Y+3, r24	; 0x03
 db6:	08 c0       	rjmp	.+16     	; 0xdc8 <fgetc+0x72>
 db8:	2e 81       	ldd	r18, Y+6	; 0x06
 dba:	3f 81       	ldd	r19, Y+7	; 0x07
 dbc:	2f 5f       	subi	r18, 0xFF	; 255
 dbe:	3f 4f       	sbci	r19, 0xFF	; 255
 dc0:	3f 83       	std	Y+7, r19	; 0x07
 dc2:	2e 83       	std	Y+6, r18	; 0x06
 dc4:	99 27       	eor	r25, r25
 dc6:	02 c0       	rjmp	.+4      	; 0xdcc <fgetc+0x76>
 dc8:	8f ef       	ldi	r24, 0xFF	; 255
 dca:	9f ef       	ldi	r25, 0xFF	; 255
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	08 95       	ret

00000dd2 <_exit>:
 dd2:	f8 94       	cli

00000dd4 <__stop_program>:
 dd4:	ff cf       	rjmp	.-2      	; 0xdd4 <__stop_program>
