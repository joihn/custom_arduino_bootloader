
AudioInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c98  00000d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  00000d30  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005347  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4a  00000000  00000000  00006303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bb2  00000000  00000000  00007d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  0000a900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002694  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b81  00000000  00000000  0000d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00010221  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	f0 c2       	rjmp	.+1504   	; 0x60a <__vector_10>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	b3 c1       	rjmp	.+870    	; 0x3bc <__vector_21>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop
  98:	e4 04       	cpc	r14, r4
  9a:	06 05       	cpc	r16, r6
  9c:	f3 05       	cpc	r31, r3
  9e:	06 05       	cpc	r16, r6
  a0:	f3 05       	cpc	r31, r3
  a2:	4b 05       	cpc	r20, r11
  a4:	6e 05       	cpc	r22, r14
  a6:	f3 05       	cpc	r31, r3
  a8:	c0 05       	cpc	r28, r0
  aa:	d2 05       	cpc	r29, r2

000000ac <ProductString>:
  ac:	26 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     &.L.U.F.A. .A.u.
  bc:	64 00 69 00 6f 00 20 00 49 00 6e 00 20 00 44 00     d.i.o. .I.n. .D.
  cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
 102:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
 112:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
 122:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
 132:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
 142:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
 152:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000162 <DeviceDescriptor>:
 162:	12 01 10 01 00 00 00 08 eb 03 47 20 02 00 01 02     ..........G ....
 172:	00 01                                               ..

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e8 e9       	ldi	r30, 0x98	; 152
 188:	fc e0       	ldi	r31, 0x0C	; 12
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a4 30       	cpi	r26, 0x04	; 4
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	a4 e0       	ldi	r26, 0x04	; 4
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	a5 31       	cpi	r26, 0x15	; 21
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	3c d0       	rcall	.+120    	; 0x224 <main>
 1ac:	73 c5       	rjmp	.+2790   	; 0xc94 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	08 95       	ret

000001ba <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1be:	84 b7       	in	r24, 0x34	; 52
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	a8 95       	wdr
 1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ce:	88 61       	ori	r24, 0x18	; 24
 1d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1d4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1d8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ea:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1ec:	8a b1       	in	r24, 0x0a	; 10
 1ee:	80 6f       	ori	r24, 0xF0	; 240
 1f0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1f8:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1fa:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
 1fc:	ca e7       	ldi	r28, 0x7A	; 122
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	85 ea       	ldi	r24, 0xA5	; 165
 202:	88 83       	st	Y, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
 204:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
 206:	ee e7       	ldi	r30, 0x7E	; 126
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	84 60       	ori	r24, 0x04	; 4
 20e:	80 83       	st	Z, r24
	/* Hardware Initialization */
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
 210:	e6 d1       	rcall	.+972    	; 0x5de <USB_Init>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
 218:	88 81       	ld	r24, Y
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	88 83       	st	Y, r24

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | MIC_IN_ADC_MUX_MASK);
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 224:	ca df       	rcall	.-108    	; 0x1ba <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 226:	80 e1       	ldi	r24, 0x10	; 16
 228:	c3 df       	rcall	.-122    	; 0x1b0 <LEDs_SetAllLEDs>
	sei();
 22a:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
 22c:	f6 d4       	rcall	.+2540   	; 0xc1a <USB_USBTask>
 22e:	fe cf       	rjmp	.-4      	; 0x22c <main+0x8>

00000230 <EVENT_USB_Device_Connect>:
 230:	cf 93       	push	r28
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 232:	80 ea       	ldi	r24, 0xA0	; 160
 234:	bd df       	rcall	.-134    	; 0x1b0 <LEDs_SetAllLEDs>

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
 236:	c2 e0       	ldi	r28, 0x02	; 2
 238:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 23c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 240:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 244:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 248:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 24c:	60 e4       	ldi	r22, 0x40	; 64
 24e:	72 e4       	ldi	r23, 0x42	; 66
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	f4 d4       	rcall	.+2536   	; 0xc3e <__udivmodsi4>
 256:	21 50       	subi	r18, 0x01	; 1
 258:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
 25a:	c4 bd       	out	0x24, r28	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 25c:	c5 bd       	out	0x25, r28	; 37
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the sample reload timer */
	TCCR0B = 0;
 262:	15 bc       	out	0x25, r1	; 37

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
 264:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <StreamingAudioInterfaceSelected>

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	a2 cf       	rjmp	.-188    	; 0x1b0 <LEDs_SetAllLEDs>

0000026c <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 26c:	46 e5       	ldi	r20, 0x56	; 86
 26e:	61 e4       	ldi	r22, 0x41	; 65
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	1d d1       	rcall	.+570    	; 0x4ae <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPNUM, EP_TYPE_ISOCHRONOUS, ENDPOINT_DIR_IN,
	                                            AUDIO_STREAM_EPSIZE, ENDPOINT_BANK_DOUBLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 274:	81 11       	cpse	r24, r1
 276:	02 c0       	rjmp	.+4      	; 0x27c <EVENT_USB_Device_ConfigurationChanged+0x10>
 278:	80 e9       	ldi	r24, 0x90	; 144
 27a:	01 c0       	rjmp	.+2      	; 0x27e <EVENT_USB_Device_ConfigurationChanged+0x12>
 27c:	80 e6       	ldi	r24, 0x60	; 96
 27e:	98 cf       	rjmp	.-208    	; 0x1b0 <LEDs_SetAllLEDs>

00000280 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <EVENT_USB_Device_ControlRequest+0x6>
 286:	1f 92       	push	r1
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 28c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest+0x1>
 290:	8b 30       	cpi	r24, 0x0B	; 11
 292:	51 f0       	breq	.+20     	; 0x2a8 <EVENT_USB_Device_ControlRequest+0x28>
 294:	18 f4       	brcc	.+6      	; 0x29c <EVENT_USB_Device_ControlRequest+0x1c>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	51 f1       	breq	.+84     	; 0x2ee <EVENT_USB_Device_ControlRequest+0x6e>
 29a:	8a c0       	rjmp	.+276    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
 29c:	81 38       	cpi	r24, 0x81	; 129
 29e:	09 f4       	brne	.+2      	; 0x2a2 <EVENT_USB_Device_ControlRequest+0x22>
 2a0:	63 c0       	rjmp	.+198    	; 0x368 <EVENT_USB_Device_ControlRequest+0xe8>
 2a2:	8f 3f       	cpi	r24, 0xFF	; 255
 2a4:	b9 f0       	breq	.+46     	; 0x2d4 <EVENT_USB_Device_ControlRequest+0x54>
 2a6:	84 c0       	rjmp	.+264    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 2a8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_ControlRequest>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <EVENT_USB_Device_ControlRequest+0x32>
 2b0:	7f c0       	rjmp	.+254    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2bc:	2c d1       	rcall	.+600    	; 0x516 <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 2c4:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <USB_ControlRequest+0x3>
 2c8:	23 2b       	or	r18, r19
 2ca:	09 f4       	brne	.+2      	; 0x2ce <EVENT_USB_Device_ControlRequest+0x4e>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <StreamingAudioInterfaceSelected>
 2d2:	6e c0       	rjmp	.+220    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
 2d4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_ControlRequest>
 2d8:	81 52       	subi	r24, 0x21	; 33
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x60>
 2de:	68 c0       	rjmp	.+208    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
 2e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2ea:	15 d1       	rcall	.+554    	; 0x516 <Endpoint_ClearStatusStage>
 2ec:	61 c0       	rjmp	.+194    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 2ee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_ControlRequest>
 2f2:	82 32       	cpi	r24, 0x22	; 34
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <EVENT_USB_Device_ControlRequest+0x78>
 2f6:	5c c0       	rjmp	.+184    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
				
				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == (ENDPOINT_DIR_IN | AUDIO_STREAM_EPNUM)) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 2f8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x4>
 2fc:	81 38       	cpi	r24, 0x81	; 129
 2fe:	09 f0       	breq	.+2      	; 0x302 <EVENT_USB_Device_ControlRequest+0x82>
 300:	57 c0       	rjmp	.+174    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
 302:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x3>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	09 f0       	breq	.+2      	; 0x30c <EVENT_USB_Device_ControlRequest+0x8c>
 30a:	52 c0       	rjmp	.+164    	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
 30c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 310:	87 7f       	andi	r24, 0xF7	; 247
 312:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint8_t SampleRate[3];
				
					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	ce 01       	movw	r24, r28
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	95 d2       	rcall	.+1322   	; 0x84a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 320:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 324:	8e 77       	andi	r24, 0x7E	; 126
 326:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					Endpoint_ClearIN();
					
					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	2a 81       	ldd	r18, Y+2	; 0x02
 32e:	42 2f       	mov	r20, r18
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	76 2f       	mov	r23, r22
 338:	65 2f       	mov	r22, r21
 33a:	54 2f       	mov	r21, r20
 33c:	44 27       	eor	r20, r20
 33e:	68 2b       	or	r22, r24
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	9a 01       	movw	r18, r20
 344:	ab 01       	movw	r20, r22
 346:	28 2b       	or	r18, r24
 348:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 34c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 350:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 354:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 358:	60 e4       	ldi	r22, 0x40	; 64
 35a:	72 e4       	ldi	r23, 0x42	; 66
 35c:	8f e0       	ldi	r24, 0x0F	; 15
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	6e d4       	rcall	.+2268   	; 0xc3e <__udivmodsi4>
 362:	21 50       	subi	r18, 0x01	; 1
 364:	27 bd       	out	0x27, r18	; 39
 366:	24 c0       	rjmp	.+72     	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
				}
			}
			
			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
 368:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_ControlRequest>
 36c:	82 3a       	cpi	r24, 0xA2	; 162
 36e:	01 f5       	brne	.+64     	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
				
				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == (ENDPOINT_DIR_IN | AUDIO_STREAM_EPNUM)) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 370:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x4>
 374:	81 38       	cpi	r24, 0x81	; 129
 376:	e1 f4       	brne	.+56     	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
 378:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x3>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	c1 f4       	brne	.+48     	; 0x3b0 <EVENT_USB_Device_ControlRequest+0x130>
				{
					uint8_t SampleRate[3];
					
					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
 380:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 384:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 388:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 38c:	2b 83       	std	Y+3, r18	; 0x03
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
 38e:	9a 83       	std	Y+2, r25	; 0x02
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
 390:	89 83       	std	Y+1, r24	; 0x01
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 392:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 396:	87 7f       	andi	r24, 0xF7	; 247
 398:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	fa d1       	rcall	.+1012   	; 0x79a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3aa:	8b 77       	andi	r24, 0x7B	; 123
 3ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}

			break;
	}
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <__vector_21>:

/** ISR to handle the reloading of the data endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 3ce:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3d2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3da:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPNUM);

	/* Check if the current endpoint can be written to and that the audio interface is enabled */
	if (Endpoint_IsINReady() && StreamingAudioInterfaceSelected)
 3de:	90 ff       	sbrs	r25, 0
 3e0:	2b c0       	rjmp	.+86     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <StreamingAudioInterfaceSelected>
 3e6:	99 23       	and	r25, r25
 3e8:	39 f1       	breq	.+78     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;
			
			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
 3ea:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SquareWaveSampleCount.4158>
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	29 0f       	add	r18, r25
 3f2:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <SquareWaveSampleCount.4158>
 3f6:	9f 3f       	cpi	r25, 0xFF	; 255
 3f8:	49 f4       	brne	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			  CurrentWaveValue ^= 0x8000;
 3fa:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 3fe:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 402:	30 58       	subi	r19, 0x80	; 128
 404:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 408:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
			
			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
 40c:	62 99       	sbic	0x0c, 2	; 12
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 414:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 41e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 422:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 426:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Write the sample to the buffer */
		Endpoint_Write_16_LE(AudioSample);

		/* Check to see if the bank is now full */
		if (!(Endpoint_IsReadWriteAllowed()))
 42a:	95 fd       	sbrc	r25, 5
 42c:	05 c0       	rjmp	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 42e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 432:	9e 77       	andi	r25, 0x7E	; 126
 434:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 438:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			Endpoint_ClearIN();
		}
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 44e:	29 2f       	mov	r18, r25
 450:	33 27       	eor	r19, r19
 452:	22 30       	cpi	r18, 0x02	; 2
 454:	31 05       	cpc	r19, r1
 456:	59 f0       	breq	.+22     	; 0x46e <CALLBACK_USB_GetDescriptor+0x20>
 458:	23 30       	cpi	r18, 0x03	; 3
 45a:	31 05       	cpc	r19, r1
 45c:	69 f0       	breq	.+26     	; 0x478 <CALLBACK_USB_GetDescriptor+0x2a>
 45e:	21 30       	cpi	r18, 0x01	; 1
 460:	31 05       	cpc	r19, r1
 462:	e9 f4       	brne	.+58     	; 0x49e <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 464:	82 e1       	ldi	r24, 0x12	; 18
 466:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 468:	22 e6       	ldi	r18, 0x62	; 98
 46a:	31 e0       	ldi	r19, 0x01	; 1
 46c:	1c c0       	rjmp	.+56     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 46e:	80 e7       	ldi	r24, 0x70	; 112
 470:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 472:	22 ef       	ldi	r18, 0xF2	; 242
 474:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 476:	17 c0       	rjmp	.+46     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 478:	99 27       	eor	r25, r25
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	91 05       	cpc	r25, r1
 47e:	49 f0       	breq	.+18     	; 0x492 <CALLBACK_USB_GetDescriptor+0x44>
 480:	28 f0       	brcs	.+10     	; 0x48c <CALLBACK_USB_GetDescriptor+0x3e>
 482:	02 97       	sbiw	r24, 0x02	; 2
 484:	61 f4       	brne	.+24     	; 0x49e <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 486:	ec ea       	ldi	r30, 0xAC	; 172
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	05 c0       	rjmp	.+10     	; 0x496 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 48c:	ee ee       	ldi	r30, 0xEE	; 238
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 492:	e4 ed       	ldi	r30, 0xD4	; 212
 494:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 496:	84 91       	lpm	r24, Z
 498:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 49a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 4a6:	fa 01       	movw	r30, r20
 4a8:	31 83       	std	Z+1, r19	; 0x01
 4aa:	20 83       	st	Z, r18
	return Size;
}
 4ac:	08 95       	ret

000004ae <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 4ae:	98 2f       	mov	r25, r24
 4b0:	97 30       	cpi	r25, 0x07	; 7
 4b2:	68 f5       	brcc	.+90     	; 0x50e <Endpoint_ConfigureEndpoint_Prv+0x60>
 4b4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 4b8:	98 17       	cp	r25, r24
 4ba:	39 f0       	breq	.+14     	; 0x4ca <Endpoint_ConfigureEndpoint_Prv+0x1c>
 4bc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 4c0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4c4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <Endpoint_ConfigureEndpoint_Prv+0x22>
 4ca:	24 2f       	mov	r18, r20
 4cc:	76 2f       	mov	r23, r22
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	21 fd       	sbrc	r18, 1
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 4d4:	9f 5f       	subi	r25, 0xFF	; 255
 4d6:	ec cf       	rjmp	.-40     	; 0x4b0 <Endpoint_ConfigureEndpoint_Prv+0x2>
 4d8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4dc:	3e 7f       	andi	r19, 0xFE	; 254
 4de:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4e2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4e6:	3d 7f       	andi	r19, 0xFD	; 253
 4e8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4ec:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4f0:	31 60       	ori	r19, 0x01	; 1
 4f2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4f6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 4fa:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4fe:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 502:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 506:	27 fd       	sbrc	r18, 7
 508:	e5 cf       	rjmp	.-54     	; 0x4d4 <Endpoint_ConfigureEndpoint_Prv+0x26>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
 50e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	08 95       	ret

00000516 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 516:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_ControlRequest>
 51a:	87 ff       	sbrs	r24, 7
 51c:	11 c0       	rjmp	.+34     	; 0x540 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 51e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 522:	82 fd       	sbrc	r24, 2
 524:	05 c0       	rjmp	.+10     	; 0x530 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 526:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 52a:	81 11       	cpse	r24, r1
 52c:	f8 cf       	rjmp	.-16     	; 0x51e <Endpoint_ClearStatusStage+0x8>
 52e:	11 c0       	rjmp	.+34     	; 0x552 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 530:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 534:	8b 77       	andi	r24, 0x7B	; 123
 536:	0b c0       	rjmp	.+22     	; 0x54e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 538:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 53c:	88 23       	and	r24, r24
 53e:	49 f0       	breq	.+18     	; 0x552 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 540:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 544:	80 ff       	sbrs	r24, 0
 546:	f8 cf       	rjmp	.-16     	; 0x538 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 548:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 54c:	8e 77       	andi	r24, 0x7E	; 126
 54e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 552:	08 95       	ret

00000554 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 55c:	49 d0       	rcall	.+146    	; 0x5f0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 55e:	50 d0       	rcall	.+160    	; 0x600 <USB_INT_ClearAllInterrupts>
 560:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	88 81       	ld	r24, Y
 566:	8f 77       	andi	r24, 0x7F	; 127
 568:	88 83       	st	Y, r24
 56a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	88 83       	st	Y, r24
 570:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 572:	8f 7d       	andi	r24, 0xDF	; 223
 574:	88 83       	st	Y, r24
 576:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	80 83       	st	Z, r24
 580:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 582:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 586:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 58a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 58e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 592:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 594:	10 e0       	ldi	r17, 0x00	; 0
 596:	f8 01       	movw	r30, r16
 598:	80 81       	ld	r24, Z
 59a:	8b 7f       	andi	r24, 0xFB	; 251
 59c:	80 83       	st	Z, r24
 59e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	88 83       	st	Y, r24
 5a4:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	81 df       	rcall	.-254    	; 0x4ae <Endpoint_ConfigureEndpoint_Prv>
 5ac:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	8e 7f       	andi	r24, 0xFE	; 254
 5b4:	80 83       	st	Z, r24
 5b6:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	81 60       	ori	r24, 0x01	; 1
 5be:	80 83       	st	Z, r24
 5c0:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5c2:	88 60       	ori	r24, 0x08	; 8
 5c4:	80 83       	st	Z, r24
 5c6:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5c8:	80 81       	ld	r24, Z
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	80 83       	st	Z, r24
 5ce:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 5d0:	80 61       	ori	r24, 0x10	; 16
 5d2:	88 83       	st	Y, r24
 5d4:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	08 95       	ret

000005de <USB_Init>:
 5de:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_IsInitialized>

	USB_ResetInterface();
 5ee:	b2 cf       	rjmp	.-156    	; 0x554 <USB_ResetInterface>

000005f0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 5f0:	e8 ed       	ldi	r30, 0xD8	; 216
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8c 7f       	andi	r24, 0xFC	; 252
 5f8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5fa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5fe:	08 95       	ret

00000600 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 600:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 604:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 608:	08 95       	ret

0000060a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	0b b6       	in	r0, 0x3b	; 59
 616:	0f 92       	push	r0
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 630:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 634:	82 ff       	sbrs	r24, 2
 636:	0a c0       	rjmp	.+20     	; 0x64c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 638:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 63c:	82 ff       	sbrs	r24, 2
 63e:	06 c0       	rjmp	.+12     	; 0x64c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 640:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 644:	8b 7f       	andi	r24, 0xFB	; 251
 646:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 64a:	e6 d2       	rcall	.+1484   	; 0xc18 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 64c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 650:	80 ff       	sbrs	r24, 0
 652:	1d c0       	rjmp	.+58     	; 0x68e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 654:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 658:	80 ff       	sbrs	r24, 0
 65a:	19 c0       	rjmp	.+50     	; 0x68e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 65c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 660:	8e 7f       	andi	r24, 0xFE	; 254
 662:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 666:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 66a:	80 ff       	sbrs	r24, 0
 66c:	0c c0       	rjmp	.+24     	; 0x686 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 66e:	8c e0       	ldi	r24, 0x0C	; 12
 670:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 672:	8e e0       	ldi	r24, 0x0E	; 14
 674:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 676:	09 b4       	in	r0, 0x29	; 41
 678:	00 fe       	sbrs	r0, 0
 67a:	fd cf       	rjmp	.-6      	; 0x676 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_DeviceState>
			EVENT_USB_Device_Connect();
 682:	d6 dd       	rcall	.-1108   	; 0x230 <EVENT_USB_Device_Connect>
 684:	04 c0       	rjmp	.+8      	; 0x68e <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 686:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 688:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 68c:	ea dd       	rcall	.-1068   	; 0x262 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 68e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 692:	80 ff       	sbrs	r24, 0
 694:	18 c0       	rjmp	.+48     	; 0x6c6 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 696:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 69a:	80 ff       	sbrs	r24, 0
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 69e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6a2:	8e 7f       	andi	r24, 0xFE	; 254
 6a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6ac:	80 61       	ori	r24, 0x10	; 16
 6ae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 6b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6b6:	80 62       	ori	r24, 0x20	; 32
 6b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6bc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 6be:	85 e0       	ldi	r24, 0x05	; 5
 6c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 6c4:	a9 d2       	rcall	.+1362   	; 0xc18 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 6c6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6ca:	84 ff       	sbrs	r24, 4
 6cc:	2d c0       	rjmp	.+90     	; 0x728 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 6ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6d2:	84 ff       	sbrs	r24, 4
 6d4:	29 c0       	rjmp	.+82     	; 0x728 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6d6:	8c e0       	ldi	r24, 0x0C	; 12
 6d8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6da:	8e e0       	ldi	r24, 0x0E	; 14
 6dc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6de:	09 b4       	in	r0, 0x29	; 41
 6e0:	00 fe       	sbrs	r0, 0
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6e4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6e8:	8f 7d       	andi	r24, 0xDF	; 223
 6ea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6ee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6f2:	8f 7e       	andi	r24, 0xEF	; 239
 6f4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6fc:	8f 7e       	andi	r24, 0xEF	; 239
 6fe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 702:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 706:	81 60       	ori	r24, 0x01	; 1
 708:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 70c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_Device_ConfigurationNumber>
 710:	81 11       	cpse	r24, r1
 712:	06 c0       	rjmp	.+12     	; 0x720 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 714:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 718:	87 fd       	sbrc	r24, 7
 71a:	02 c0       	rjmp	.+4      	; 0x720 <__vector_10+0x116>
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	01 c0       	rjmp	.+2      	; 0x722 <__vector_10+0x118>
 720:	84 e0       	ldi	r24, 0x04	; 4
 722:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 726:	78 d2       	rcall	.+1264   	; 0xc18 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 728:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 72c:	83 ff       	sbrs	r24, 3
 72e:	22 c0       	rjmp	.+68     	; 0x774 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 730:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 734:	83 ff       	sbrs	r24, 3
 736:	1e c0       	rjmp	.+60     	; 0x774 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 738:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 73c:	87 7f       	andi	r24, 0xF7	; 247
 73e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 748:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 74c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 750:	8e 7f       	andi	r24, 0xFE	; 254
 752:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 756:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 75a:	8e 7f       	andi	r24, 0xFE	; 254
 75c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 760:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 764:	80 61       	ori	r24, 0x10	; 16
 766:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 76a:	42 e0       	ldi	r20, 0x02	; 2
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	9e de       	rcall	.-708    	; 0x4ae <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 772:	52 d2       	rcall	.+1188   	; 0xc18 <USB_Event_Stub>
 774:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	0f 90       	pop	r0
 78e:	0b be       	out	0x3b, r0	; 59
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <Endpoint_Write_Control_Stream_LE>:
 79a:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <USB_ControlRequest+0x6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 79e:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <USB_ControlRequest+0x7>
 7a2:	26 17       	cp	r18, r22
 7a4:	37 07       	cpc	r19, r23
 7a6:	48 f0       	brcs	.+18     	; 0x7ba <Endpoint_Write_Control_Stream_LE+0x20>
 7a8:	61 15       	cp	r22, r1
 7aa:	71 05       	cpc	r23, r1
 7ac:	39 f4       	brne	.+14     	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x22>
 7ae:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b2:	2e 77       	andi	r18, 0x7E	; 126
 7b4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x22>
 7ba:	b9 01       	movw	r22, r18
 7bc:	fc 01       	movw	r30, r24
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	61 15       	cp	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	69 f1       	breq	.+90     	; 0x820 <Endpoint_Write_Control_Stream_LE+0x86>
 7c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 7ca:	88 23       	and	r24, r24
 7cc:	d1 f1       	breq	.+116    	; 0x842 <Endpoint_Write_Control_Stream_LE+0xa8>
 7ce:	85 30       	cpi	r24, 0x05	; 5
 7d0:	d1 f1       	breq	.+116    	; 0x846 <Endpoint_Write_Control_Stream_LE+0xac>
 7d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7d6:	83 fd       	sbrc	r24, 3
 7d8:	32 c0       	rjmp	.+100    	; 0x83e <Endpoint_Write_Control_Stream_LE+0xa4>
 7da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7de:	82 fd       	sbrc	r24, 2
 7e0:	28 c0       	rjmp	.+80     	; 0x832 <Endpoint_Write_Control_Stream_LE+0x98>
 7e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7e6:	80 ff       	sbrs	r24, 0
 7e8:	eb cf       	rjmp	.-42     	; 0x7c0 <Endpoint_Write_Control_Stream_LE+0x26>
 7ea:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 7ee:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 7f2:	61 15       	cp	r22, r1
 7f4:	71 05       	cpc	r23, r1
 7f6:	51 f0       	breq	.+20     	; 0x80c <Endpoint_Write_Control_Stream_LE+0x72>
 7f8:	88 30       	cpi	r24, 0x08	; 8
 7fa:	91 05       	cpc	r25, r1
 7fc:	38 f4       	brcc	.+14     	; 0x80c <Endpoint_Write_Control_Stream_LE+0x72>
 7fe:	21 91       	ld	r18, Z+
 800:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 804:	61 50       	subi	r22, 0x01	; 1
 806:	71 09       	sbc	r23, r1
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	f3 cf       	rjmp	.-26     	; 0x7f2 <Endpoint_Write_Control_Stream_LE+0x58>
 80c:	21 e0       	ldi	r18, 0x01	; 1
 80e:	08 97       	sbiw	r24, 0x08	; 8
 810:	09 f0       	breq	.+2      	; 0x814 <Endpoint_Write_Control_Stream_LE+0x7a>
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 818:	8e 77       	andi	r24, 0x7E	; 126
 81a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 81e:	d0 cf       	rjmp	.-96     	; 0x7c0 <Endpoint_Write_Control_Stream_LE+0x26>
 820:	21 11       	cpse	r18, r1
 822:	d1 cf       	rjmp	.-94     	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0x2c>
 824:	06 c0       	rjmp	.+12     	; 0x832 <Endpoint_Write_Control_Stream_LE+0x98>
 826:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 82a:	88 23       	and	r24, r24
 82c:	51 f0       	breq	.+20     	; 0x842 <Endpoint_Write_Control_Stream_LE+0xa8>
 82e:	85 30       	cpi	r24, 0x05	; 5
 830:	51 f0       	breq	.+20     	; 0x846 <Endpoint_Write_Control_Stream_LE+0xac>
 832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 836:	82 ff       	sbrs	r24, 2
 838:	f6 cf       	rjmp	.-20     	; 0x826 <Endpoint_Write_Control_Stream_LE+0x8c>
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	08 95       	ret
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	08 95       	ret
 842:	82 e0       	ldi	r24, 0x02	; 2
 844:	08 95       	ret
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	08 95       	ret

0000084a <Endpoint_Read_Control_Stream_LE>:
 84a:	61 15       	cp	r22, r1
 84c:	71 05       	cpc	r23, r1
 84e:	29 f4       	brne	.+10     	; 0x85a <Endpoint_Read_Control_Stream_LE+0x10>
 850:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 854:	2b 77       	andi	r18, 0x7B	; 123
 856:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 85a:	fc 01       	movw	r30, r24
 85c:	61 15       	cp	r22, r1
 85e:	71 05       	cpc	r23, r1
 860:	31 f1       	breq	.+76     	; 0x8ae <Endpoint_Read_Control_Stream_LE+0x64>
 862:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 866:	88 23       	and	r24, r24
 868:	51 f1       	breq	.+84     	; 0x8be <Endpoint_Read_Control_Stream_LE+0x74>
 86a:	85 30       	cpi	r24, 0x05	; 5
 86c:	51 f1       	breq	.+84     	; 0x8c2 <Endpoint_Read_Control_Stream_LE+0x78>
 86e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 872:	83 fd       	sbrc	r24, 3
 874:	22 c0       	rjmp	.+68     	; 0x8ba <Endpoint_Read_Control_Stream_LE+0x70>
 876:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 87a:	82 ff       	sbrs	r24, 2
 87c:	ef cf       	rjmp	.-34     	; 0x85c <Endpoint_Read_Control_Stream_LE+0x12>
 87e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 882:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 886:	89 2b       	or	r24, r25
 888:	31 f0       	breq	.+12     	; 0x896 <Endpoint_Read_Control_Stream_LE+0x4c>
 88a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 88e:	81 93       	st	Z+, r24
 890:	61 50       	subi	r22, 0x01	; 1
 892:	71 09       	sbc	r23, r1
 894:	a1 f7       	brne	.-24     	; 0x87e <Endpoint_Read_Control_Stream_LE+0x34>
 896:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 89a:	8b 77       	andi	r24, 0x7B	; 123
 89c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a0:	dd cf       	rjmp	.-70     	; 0x85c <Endpoint_Read_Control_Stream_LE+0x12>
 8a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 8a6:	88 23       	and	r24, r24
 8a8:	51 f0       	breq	.+20     	; 0x8be <Endpoint_Read_Control_Stream_LE+0x74>
 8aa:	85 30       	cpi	r24, 0x05	; 5
 8ac:	51 f0       	breq	.+20     	; 0x8c2 <Endpoint_Read_Control_Stream_LE+0x78>
 8ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b2:	80 ff       	sbrs	r24, 0
 8b4:	f6 cf       	rjmp	.-20     	; 0x8a2 <Endpoint_Read_Control_Stream_LE+0x58>
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	08 95       	ret
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	08 95       	ret
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	08 95       	ret
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	08 95       	ret

000008c6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8c6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <USB_ControlRequest+0x6>
 8ca:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <USB_ControlRequest+0x7>
 8ce:	26 17       	cp	r18, r22
 8d0:	37 07       	cpc	r19, r23
 8d2:	48 f0       	brcs	.+18     	; 0x8e6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8d4:	61 15       	cp	r22, r1
 8d6:	71 05       	cpc	r23, r1
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8da:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8de:	2e 77       	andi	r18, 0x7E	; 126
 8e0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x22>
 8e6:	b9 01       	movw	r22, r18
 8e8:	fc 01       	movw	r30, r24
 8ea:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8ec:	61 15       	cp	r22, r1
 8ee:	71 05       	cpc	r23, r1
 8f0:	71 f1       	breq	.+92     	; 0x94e <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8f6:	88 23       	and	r24, r24
 8f8:	d9 f1       	breq	.+118    	; 0x970 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8fa:	85 30       	cpi	r24, 0x05	; 5
 8fc:	d9 f1       	breq	.+118    	; 0x974 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 902:	83 fd       	sbrc	r24, 3
 904:	33 c0       	rjmp	.+102    	; 0x96c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 906:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 90a:	82 fd       	sbrc	r24, 2
 90c:	29 c0       	rjmp	.+82     	; 0x960 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 90e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 912:	80 ff       	sbrs	r24, 0
 914:	eb cf       	rjmp	.-42     	; 0x8ec <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 916:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 91a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 91e:	61 15       	cp	r22, r1
 920:	71 05       	cpc	r23, r1
 922:	59 f0       	breq	.+22     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x74>
 924:	88 30       	cpi	r24, 0x08	; 8
 926:	91 05       	cpc	r25, r1
 928:	40 f4       	brcc	.+16     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 92a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 92c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 930:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 932:	61 50       	subi	r22, 0x01	; 1
 934:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	f2 cf       	rjmp	.-28     	; 0x91e <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 93a:	21 e0       	ldi	r18, 0x01	; 1
 93c:	08 97       	sbiw	r24, 0x08	; 8
 93e:	09 f0       	breq	.+2      	; 0x942 <Endpoint_Write_Control_PStream_LE+0x7c>
 940:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 942:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 946:	8e 77       	andi	r24, 0x7E	; 126
 948:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 94c:	cf cf       	rjmp	.-98     	; 0x8ec <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 94e:	21 11       	cpse	r18, r1
 950:	d0 cf       	rjmp	.-96     	; 0x8f2 <Endpoint_Write_Control_PStream_LE+0x2c>
 952:	06 c0       	rjmp	.+12     	; 0x960 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 954:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 958:	88 23       	and	r24, r24
 95a:	51 f0       	breq	.+20     	; 0x970 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 95c:	85 30       	cpi	r24, 0x05	; 5
 95e:	51 f0       	breq	.+20     	; 0x974 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 960:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 964:	82 ff       	sbrs	r24, 2
 966:	f6 cf       	rjmp	.-20     	; 0x954 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 974:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 976:	08 95       	ret

00000978 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	aa 97       	sbiw	r28, 0x2a	; 42
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	ed e0       	ldi	r30, 0x0D	; 13
 992:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 994:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 998:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	e5 31       	cpi	r30, 0x15	; 21
 99e:	f2 07       	cpc	r31, r18
 9a0:	c9 f7       	brne	.-14     	; 0x994 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9a2:	6e dc       	rcall	.-1828   	; 0x280 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 9a8:	83 ff       	sbrs	r24, 3
 9aa:	1d c1       	rjmp	.+570    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 9b0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <USB_ControlRequest+0x1>
 9b4:	49 2f       	mov	r20, r25
 9b6:	50 e0       	ldi	r21, 0x00	; 0
 9b8:	4a 30       	cpi	r20, 0x0A	; 10
 9ba:	51 05       	cpc	r21, r1
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0x48>
 9be:	13 c1       	rjmp	.+550    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
 9c0:	fa 01       	movw	r30, r20
 9c2:	e4 5b       	subi	r30, 0xB4	; 180
 9c4:	ff 4f       	sbci	r31, 0xFF	; 255
 9c6:	5d c1       	rjmp	.+698    	; 0xc82 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9c8:	80 38       	cpi	r24, 0x80	; 128
 9ca:	81 f0       	breq	.+32     	; 0x9ec <USB_Device_ProcessControlRequest+0x74>
 9cc:	82 38       	cpi	r24, 0x82	; 130
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <USB_Device_ProcessControlRequest+0x5a>
 9d0:	0a c1       	rjmp	.+532    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x4>
 9d6:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 9e0:	85 fb       	bst	r24, 5
 9e2:	88 27       	eor	r24, r24
 9e4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9e6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 9ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9f0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <USB_Device_RemoteWakeupEnabled>
 9f4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9f6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9f8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9fc:	97 7f       	andi	r25, 0xF7	; 247
 9fe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a02:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 a06:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 a0a:	c5 c0       	rjmp	.+394    	; 0xb96 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a0c:	28 2f       	mov	r18, r24
 a0e:	2d 7f       	andi	r18, 0xFD	; 253
 a10:	09 f0       	breq	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x9c>
 a12:	e9 c0       	rjmp	.+466    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a14:	88 23       	and	r24, r24
 a16:	19 f0       	breq	.+6      	; 0xa1e <USB_Device_ProcessControlRequest+0xa6>
 a18:	82 30       	cpi	r24, 0x02	; 2
 a1a:	61 f0       	breq	.+24     	; 0xa34 <USB_Device_ProcessControlRequest+0xbc>
 a1c:	e4 c0       	rjmp	.+456    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a1e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	09 f0       	breq	.+2      	; 0xa28 <USB_Device_ProcessControlRequest+0xb0>
 a26:	df c0       	rjmp	.+446    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a28:	93 30       	cpi	r25, 0x03	; 3
 a2a:	09 f0       	breq	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0xb6>
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <USB_Device_RemoteWakeupEnabled>
 a32:	2b c0       	rjmp	.+86     	; 0xa8a <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a34:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 a38:	81 11       	cpse	r24, r1
 a3a:	27 c0       	rjmp	.+78     	; 0xa8a <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a3c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x4>
 a40:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a42:	09 f4       	brne	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0xce>
 a44:	d0 c0       	rjmp	.+416    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a46:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a4a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a4e:	20 ff       	sbrs	r18, 0
 a50:	1c c0       	rjmp	.+56     	; 0xa8a <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a52:	93 30       	cpi	r25, 0x03	; 3
 a54:	21 f4       	brne	.+8      	; 0xa5e <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a5a:	80 62       	ori	r24, 0x20	; 32
 a5c:	14 c0       	rjmp	.+40     	; 0xa86 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a5e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a62:	90 61       	ori	r25, 0x10	; 16
 a64:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a68:	21 e0       	ldi	r18, 0x01	; 1
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	a9 01       	movw	r20, r18
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <USB_Device_ProcessControlRequest+0xfc>
 a70:	44 0f       	add	r20, r20
 a72:	55 1f       	adc	r21, r21
 a74:	8a 95       	dec	r24
 a76:	e2 f7       	brpl	.-8      	; 0xa70 <USB_Device_ProcessControlRequest+0xf8>
 a78:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 a7c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a84:	88 60       	ori	r24, 0x08	; 8
 a86:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a92:	87 7f       	andi	r24, 0xF7	; 247
 a94:	83 c0       	rjmp	.+262    	; 0xb9c <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a96:	81 11       	cpse	r24, r1
 a98:	a6 c0       	rjmp	.+332    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a9a:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 a9e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 aa0:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 aa2:	f8 94       	cli
 aa4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aa8:	87 7f       	andi	r24, 0xF7	; 247
 aaa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 aae:	33 dd       	rcall	.-1434   	; 0x516 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ab0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 ab4:	80 ff       	sbrs	r24, 0
 ab6:	fc cf       	rjmp	.-8      	; 0xab0 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ab8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 abc:	80 78       	andi	r24, 0x80	; 128
 abe:	81 2b       	or	r24, r17

				UDADDR = Temp;
 ac0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 ac4:	80 68       	ori	r24, 0x80	; 128
 ac6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 aca:	11 11       	cpse	r17, r1
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <USB_Device_ProcessControlRequest+0x15a>
 ace:	82 e0       	ldi	r24, 0x02	; 2
 ad0:	01 c0       	rjmp	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0x15c>
 ad2:	83 e0       	ldi	r24, 0x03	; 3
 ad4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 ad8:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 ada:	85 c0       	rjmp	.+266    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 adc:	80 58       	subi	r24, 0x80	; 128
 ade:	82 30       	cpi	r24, 0x02	; 2
 ae0:	08 f0       	brcs	.+2      	; 0xae4 <USB_Device_ProcessControlRequest+0x16c>
 ae2:	81 c0       	rjmp	.+258    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ae4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 ae8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <USB_ControlRequest+0x3>
 aec:	8c 3d       	cpi	r24, 0xDC	; 220
 aee:	53 e0       	ldi	r21, 0x03	; 3
 af0:	95 07       	cpc	r25, r21
 af2:	71 f5       	brne	.+92     	; 0xb50 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 af4:	83 e0       	ldi	r24, 0x03	; 3
 af6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 af8:	8a e2       	ldi	r24, 0x2A	; 42
 afa:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 afc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 afe:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b00:	de 01       	movw	r26, r28
 b02:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b04:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b06:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b08:	51 e2       	ldi	r21, 0x21	; 33
 b0a:	e3 2f       	mov	r30, r19
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 b12:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b14:	20 ff       	sbrs	r18, 0
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 b18:	e2 95       	swap	r30
 b1a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b1c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b1e:	ef 70       	andi	r30, 0x0F	; 15
 b20:	8e 2f       	mov	r24, r30
 b22:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b24:	ea 30       	cpi	r30, 0x0A	; 10
 b26:	10 f0       	brcs	.+4      	; 0xb2c <USB_Device_ProcessControlRequest+0x1b4>
 b28:	c7 96       	adiw	r24, 0x37	; 55
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x1b6>
 b2c:	c0 96       	adiw	r24, 0x30	; 48
 b2e:	8d 93       	st	X+, r24
 b30:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b32:	2f 5f       	subi	r18, 0xFF	; 255
 b34:	24 31       	cpi	r18, 0x14	; 20
 b36:	49 f7       	brne	.-46     	; 0xb0a <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b38:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b3e:	87 7f       	andi	r24, 0xF7	; 247
 b40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b44:	6a e2       	ldi	r22, 0x2A	; 42
 b46:	70 e0       	ldi	r23, 0x00	; 0
 b48:	ce 01       	movw	r24, r28
 b4a:	01 96       	adiw	r24, 0x01	; 1
 b4c:	26 de       	rcall	.-948    	; 0x79a <Endpoint_Write_Control_Stream_LE>
 b4e:	12 c0       	rjmp	.+36     	; 0xb74 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b50:	ae 01       	movw	r20, r28
 b52:	4f 5f       	subi	r20, 0xFF	; 255
 b54:	5f 4f       	sbci	r21, 0xFF	; 255
 b56:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <USB_ControlRequest+0x4>
 b5a:	79 dc       	rcall	.-1806   	; 0x44e <CALLBACK_USB_GetDescriptor>
 b5c:	bc 01       	movw	r22, r24
 b5e:	89 2b       	or	r24, r25
 b60:	09 f4       	brne	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x1ec>
 b62:	41 c0       	rjmp	.+130    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
 b64:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b68:	97 7f       	andi	r25, 0xF7	; 247
 b6a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b6e:	89 81       	ldd	r24, Y+1	; 0x01
 b70:	9a 81       	ldd	r25, Y+2	; 0x02
 b72:	a9 de       	rcall	.-686    	; 0x8c6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b78:	8b 77       	andi	r24, 0x7B	; 123
 b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b7e:	33 c0       	rjmp	.+102    	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b80:	80 38       	cpi	r24, 0x80	; 128
 b82:	89 f5       	brne	.+98     	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b88:	87 7f       	andi	r24, 0xF7	; 247
 b8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b8e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b92:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b9a:	8e 77       	andi	r24, 0x7E	; 126
 b9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ba0:	ba dc       	rcall	.-1676   	; 0x516 <Endpoint_ClearStatusStage>
 ba2:	21 c0       	rjmp	.+66     	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ba4:	81 11       	cpse	r24, r1
 ba6:	1f c0       	rjmp	.+62     	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ba8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 bac:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <USB_ControlRequest+0x3>
 bb0:	99 27       	eor	r25, r25
 bb2:	02 97       	sbiw	r24, 0x02	; 2
 bb4:	c4 f4       	brge	.+48     	; 0xbe6 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bba:	87 7f       	andi	r24, 0xF7	; 247
 bbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bc0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x2>
 bc4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 bc8:	a6 dc       	rcall	.-1716   	; 0x516 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_Device_ConfigurationNumber>
 bce:	81 11       	cpse	r24, r1
 bd0:	06 c0       	rjmp	.+12     	; 0xbde <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bd2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bd6:	87 fd       	sbrc	r24, 7
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <USB_Device_ProcessControlRequest+0x266>
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x268>
 bde:	84 e0       	ldi	r24, 0x04	; 4
 be0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 be4:	43 db       	rcall	.-2426   	; 0x26c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 be6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bea:	83 ff       	sbrs	r24, 3
 bec:	0a c0       	rjmp	.+20     	; 0xc02 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bf2:	80 62       	ori	r24, 0x20	; 32
 bf4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bfc:	87 7f       	andi	r24, 0xF7	; 247
 bfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c02:	aa 96       	adiw	r28, 0x2a	; 42
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	f8 94       	cli
 c08:	de bf       	out	0x3e, r29	; 62
 c0a:	0f be       	out	0x3f, r0	; 63
 c0c:	cd bf       	out	0x3d, r28	; 61
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	1f 91       	pop	r17
 c14:	0f 91       	pop	r16
 c16:	08 95       	ret

00000c18 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c18:	08 95       	ret

00000c1a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c1a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c1c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_DeviceState>
 c20:	88 23       	and	r24, r24
 c22:	59 f0       	breq	.+22     	; 0xc3a <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c24:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c28:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c32:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c34:	a1 de       	rcall	.-702    	; 0x978 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c36:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c3a:	cf 91       	pop	r28
 c3c:	08 95       	ret

00000c3e <__udivmodsi4>:
 c3e:	a1 e2       	ldi	r26, 0x21	; 33
 c40:	1a 2e       	mov	r1, r26
 c42:	aa 1b       	sub	r26, r26
 c44:	bb 1b       	sub	r27, r27
 c46:	fd 01       	movw	r30, r26
 c48:	0d c0       	rjmp	.+26     	; 0xc64 <__udivmodsi4_ep>

00000c4a <__udivmodsi4_loop>:
 c4a:	aa 1f       	adc	r26, r26
 c4c:	bb 1f       	adc	r27, r27
 c4e:	ee 1f       	adc	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	a2 17       	cp	r26, r18
 c54:	b3 07       	cpc	r27, r19
 c56:	e4 07       	cpc	r30, r20
 c58:	f5 07       	cpc	r31, r21
 c5a:	20 f0       	brcs	.+8      	; 0xc64 <__udivmodsi4_ep>
 c5c:	a2 1b       	sub	r26, r18
 c5e:	b3 0b       	sbc	r27, r19
 c60:	e4 0b       	sbc	r30, r20
 c62:	f5 0b       	sbc	r31, r21

00000c64 <__udivmodsi4_ep>:
 c64:	66 1f       	adc	r22, r22
 c66:	77 1f       	adc	r23, r23
 c68:	88 1f       	adc	r24, r24
 c6a:	99 1f       	adc	r25, r25
 c6c:	1a 94       	dec	r1
 c6e:	69 f7       	brne	.-38     	; 0xc4a <__udivmodsi4_loop>
 c70:	60 95       	com	r22
 c72:	70 95       	com	r23
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	9b 01       	movw	r18, r22
 c7a:	ac 01       	movw	r20, r24
 c7c:	bd 01       	movw	r22, r26
 c7e:	cf 01       	movw	r24, r30
 c80:	08 95       	ret

00000c82 <__tablejump2__>:
 c82:	ee 0f       	add	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	00 24       	eor	r0, r0
 c88:	00 1c       	adc	r0, r0
 c8a:	0b be       	out	0x3b, r0	; 59
 c8c:	07 90       	elpm	r0, Z+
 c8e:	f6 91       	elpm	r31, Z
 c90:	e0 2d       	mov	r30, r0
 c92:	09 94       	ijmp

00000c94 <_exit>:
 c94:	f8 94       	cli

00000c96 <__stop_program>:
 c96:	ff cf       	rjmp	.-2      	; 0xc96 <__stop_program>
