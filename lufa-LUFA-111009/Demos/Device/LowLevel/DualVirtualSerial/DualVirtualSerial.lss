
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000e40  00000ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800160  00800160  00000f34  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053d3  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a85  00000000  00000000  0000659b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bfa  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000ac1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002666  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d89  00000000  00000000  0000d99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  00010723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c3 c0       	rjmp	.+390    	; 0x188 <__ctors_end>
   2:	00 00       	nop
   4:	de c0       	rjmp	.+444    	; 0x1c2 <__bad_interrupt>
   6:	00 00       	nop
   8:	dc c0       	rjmp	.+440    	; 0x1c2 <__bad_interrupt>
   a:	00 00       	nop
   c:	da c0       	rjmp	.+436    	; 0x1c2 <__bad_interrupt>
   e:	00 00       	nop
  10:	d8 c0       	rjmp	.+432    	; 0x1c2 <__bad_interrupt>
  12:	00 00       	nop
  14:	d6 c0       	rjmp	.+428    	; 0x1c2 <__bad_interrupt>
  16:	00 00       	nop
  18:	d4 c0       	rjmp	.+424    	; 0x1c2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d2 c0       	rjmp	.+420    	; 0x1c2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d0 c0       	rjmp	.+416    	; 0x1c2 <__bad_interrupt>
  22:	00 00       	nop
  24:	ce c0       	rjmp	.+412    	; 0x1c2 <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c3       	rjmp	.+1700   	; 0x6ce <__vector_10>
  2a:	00 00       	nop
  2c:	ca c0       	rjmp	.+404    	; 0x1c2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c8 c0       	rjmp	.+400    	; 0x1c2 <__bad_interrupt>
  32:	00 00       	nop
  34:	c6 c0       	rjmp	.+396    	; 0x1c2 <__bad_interrupt>
  36:	00 00       	nop
  38:	c4 c0       	rjmp	.+392    	; 0x1c2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c2 c0       	rjmp	.+388    	; 0x1c2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c0 c0       	rjmp	.+384    	; 0x1c2 <__bad_interrupt>
  42:	00 00       	nop
  44:	be c0       	rjmp	.+380    	; 0x1c2 <__bad_interrupt>
  46:	00 00       	nop
  48:	bc c0       	rjmp	.+376    	; 0x1c2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ba c0       	rjmp	.+372    	; 0x1c2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b8 c0       	rjmp	.+368    	; 0x1c2 <__bad_interrupt>
  52:	00 00       	nop
  54:	b6 c0       	rjmp	.+364    	; 0x1c2 <__bad_interrupt>
  56:	00 00       	nop
  58:	b4 c0       	rjmp	.+360    	; 0x1c2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b2 c0       	rjmp	.+356    	; 0x1c2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b0 c0       	rjmp	.+352    	; 0x1c2 <__bad_interrupt>
  62:	00 00       	nop
  64:	ae c0       	rjmp	.+348    	; 0x1c2 <__bad_interrupt>
  66:	00 00       	nop
  68:	ac c0       	rjmp	.+344    	; 0x1c2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	aa c0       	rjmp	.+340    	; 0x1c2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a8 c0       	rjmp	.+336    	; 0x1c2 <__bad_interrupt>
  72:	00 00       	nop
  74:	a6 c0       	rjmp	.+332    	; 0x1c2 <__bad_interrupt>
  76:	00 00       	nop
  78:	a4 c0       	rjmp	.+328    	; 0x1c2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a2 c0       	rjmp	.+324    	; 0x1c2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a0 c0       	rjmp	.+320    	; 0x1c2 <__bad_interrupt>
  82:	00 00       	nop
  84:	9e c0       	rjmp	.+316    	; 0x1c2 <__bad_interrupt>
  86:	00 00       	nop
  88:	9c c0       	rjmp	.+312    	; 0x1c2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9a c0       	rjmp	.+308    	; 0x1c2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	98 c0       	rjmp	.+304    	; 0x1c2 <__bad_interrupt>
  92:	00 00       	nop
  94:	96 c0       	rjmp	.+300    	; 0x1c2 <__bad_interrupt>
  96:	00 00       	nop
  98:	da 05       	cpc	r29, r10
  9a:	fc 05       	cpc	r31, r12
  9c:	e9 06       	cpc	r14, r25
  9e:	fc 05       	cpc	r31, r12
  a0:	e9 06       	cpc	r14, r25
  a2:	41 06       	cpc	r4, r17
  a4:	64 06       	cpc	r6, r20
  a6:	e9 06       	cpc	r14, r25
  a8:	b6 06       	cpc	r11, r22
  aa:	c8 06       	cpc	r12, r24

000000ac <ProductString>:
  ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
  bc:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
  cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
 102:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
 112:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
 122:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
 132:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
 142:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 152:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 162:	02 0a 00 00 00 07 05 05 02 10 00 01 07 05 84 02     ................
 172:	10 00 01                                            ...

00000175 <DeviceDescriptor>:
 175:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
 185:	dc 01 00                                            ...

00000188 <__ctors_end>:
 188:	11 24       	eor	r1, r1
 18a:	1f be       	out	0x3f, r1	; 63
 18c:	cf ef       	ldi	r28, 0xFF	; 255
 18e:	d0 e2       	ldi	r29, 0x20	; 32
 190:	de bf       	out	0x3e, r29	; 62
 192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
 194:	11 e0       	ldi	r17, 0x01	; 1
 196:	a0 e0       	ldi	r26, 0x00	; 0
 198:	b1 e0       	ldi	r27, 0x01	; 1
 19a:	e0 e4       	ldi	r30, 0x40	; 64
 19c:	fe e0       	ldi	r31, 0x0E	; 14
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	0b bf       	out	0x3b, r16	; 59
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x14>
 1a4:	07 90       	elpm	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	a0 36       	cpi	r26, 0x60	; 96
 1aa:	b1 07       	cpc	r27, r17
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0x10>

000001ae <__do_clear_bss>:
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	a0 e6       	ldi	r26, 0x60	; 96
 1b2:	b1 e0       	ldi	r27, 0x01	; 1
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
 1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
 1b8:	ae 36       	cpi	r26, 0x6E	; 110
 1ba:	b2 07       	cpc	r27, r18
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
 1be:	6e d1       	rcall	.+732    	; 0x49c <main>
 1c0:	3d c6       	rjmp	.+3194   	; 0xe3c <_exit>

000001c2 <__bad_interrupt>:
 1c2:	1e cf       	rjmp	.-452    	; 0x0 <__vectors>

000001c4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	08 95       	ret

000001ce <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1ce:	84 b7       	in	r24, 0x34	; 52
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	a8 95       	wdr
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1de:	88 61       	ori	r24, 0x18	; 24
 1e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1e8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1fa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	8f 71       	andi	r24, 0x1F	; 31
 200:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 202:	8d b1       	in	r24, 0x0d	; 13
 204:	8f 7c       	andi	r24, 0xCF	; 207
 206:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	80 6e       	ori	r24, 0xE0	; 224
 20c:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 20e:	8e b1       	in	r24, 0x0e	; 14
 210:	80 63       	ori	r24, 0x30	; 48
 212:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 6f       	ori	r24, 0xF0	; 240
 218:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 220:	40 c2       	rjmp	.+1152   	; 0x6a2 <USB_Init>

00000222 <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 222:	80 ea       	ldi	r24, 0xA0	; 160
 224:	cf cf       	rjmp	.-98     	; 0x1c4 <LEDs_SetAllLEDs>

00000226 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 226:	80 e1       	ldi	r24, 0x10	; 16
 228:	cd cf       	rjmp	.-102    	; 0x1c4 <LEDs_SetAllLEDs>

0000022a <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management tasks are started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 22e:	42 e1       	ldi	r20, 0x12	; 18
 230:	61 e8       	ldi	r22, 0x81	; 129
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	6b d1       	rcall	.+726    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 236:	c8 2f       	mov	r28, r24
 238:	42 e1       	ldi	r20, 0x12	; 18
 23a:	60 e8       	ldi	r22, 0x80	; 128
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	66 d1       	rcall	.+716    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 240:	d8 2f       	mov	r29, r24
 242:	42 e0       	ldi	r20, 0x02	; 2
 244:	61 ec       	ldi	r22, 0xC1	; 193
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	61 d1       	rcall	.+706    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 24a:	cd 23       	and	r28, r29
 24c:	c8 23       	and	r28, r24
 24e:	42 e1       	ldi	r20, 0x12	; 18
 250:	61 e8       	ldi	r22, 0x81	; 129
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	5b d1       	rcall	.+694    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 256:	c8 23       	and	r28, r24
 258:	42 e1       	ldi	r20, 0x12	; 18
 25a:	60 e8       	ldi	r22, 0x80	; 128
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	56 d1       	rcall	.+684    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 260:	c8 23       	and	r28, r24
 262:	42 e0       	ldi	r20, 0x02	; 2
 264:	61 ec       	ldi	r22, 0xC1	; 193
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	51 d1       	rcall	.+674    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rates so that the host knows to send new values */
	LineEncoding1.BaudRateBPS = 0;
 26a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <LineEncoding1>
 26e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <LineEncoding1+0x1>
 272:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <LineEncoding1+0x2>
 276:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <LineEncoding1+0x3>
	LineEncoding2.BaudRateBPS = 0;
 27a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 286:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 28a:	cc 23       	and	r28, r28
 28c:	11 f0       	breq	.+4      	; 0x292 <EVENT_USB_Device_ConfigurationChanged+0x68>
 28e:	81 11       	cpse	r24, r1
 290:	02 c0       	rjmp	.+4      	; 0x296 <EVENT_USB_Device_ConfigurationChanged+0x6c>
 292:	80 e9       	ldi	r24, 0x90	; 144
 294:	01 c0       	rjmp	.+2      	; 0x298 <EVENT_USB_Device_ConfigurationChanged+0x6e>
}
 296:	80 e6       	ldi	r24, 0x60	; 96
 298:	df 91       	pop	r29
	/* Reset line encoding baud rates so that the host knows to send new values */
	LineEncoding1.BaudRateBPS = 0;
	LineEncoding2.BaudRateBPS = 0;

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 29a:	cf 91       	pop	r28
 29c:	93 cf       	rjmp	.-218    	; 0x1c4 <LEDs_SetAllLEDs>

0000029e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Determine which interface's Line Coding data is being set from the wIndex parameter */
	void* LineEncodingData = (USB_ControlRequest.wIndex == 0) ? &LineEncoding1 : &LineEncoding2;
 29e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <USB_ControlRequest+0x4>
 2a2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <USB_ControlRequest+0x5>
 2a6:	89 2b       	or	r24, r25
 2a8:	19 f0       	breq	.+6      	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x12>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <EVENT_USB_Device_ControlRequest+0x16>
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	91 e0       	ldi	r25, 0x01	; 1

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 2b4:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <USB_ControlRequest+0x1>
 2b8:	21 32       	cpi	r18, 0x21	; 33
 2ba:	29 f0       	breq	.+10     	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x28>
 2bc:	22 32       	cpi	r18, 0x22	; 34
 2be:	29 f1       	breq	.+74     	; 0x30a <EVENT_USB_Device_ControlRequest+0x6c>
 2c0:	20 32       	cpi	r18, 0x20	; 32
 2c2:	69 f5       	brne	.+90     	; 0x31e <EVENT_USB_Device_ControlRequest+0x80>
 2c4:	10 c0       	rjmp	.+32     	; 0x2e6 <EVENT_USB_Device_ControlRequest+0x48>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2c6:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <USB_ControlRequest>
 2ca:	21 3a       	cpi	r18, 0xA1	; 161
 2cc:	41 f5       	brne	.+80     	; 0x31e <EVENT_USB_Device_ControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2ce:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2d2:	27 7f       	andi	r18, 0xF7	; 247
 2d4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 2d8:	67 e0       	ldi	r22, 0x07	; 7
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	54 d3       	rcall	.+1704   	; 0x986 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2e2:	8b 77       	andi	r24, 0x7B	; 123
 2e4:	0f c0       	rjmp	.+30     	; 0x304 <EVENT_USB_Device_ControlRequest+0x66>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 2e6:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <USB_ControlRequest>
 2ea:	21 32       	cpi	r18, 0x21	; 33
 2ec:	c1 f4       	brne	.+48     	; 0x31e <EVENT_USB_Device_ControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2f2:	27 7f       	andi	r18, 0xF7	; 247
 2f4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 2f8:	67 e0       	ldi	r22, 0x07	; 7
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	9c d3       	rcall	.+1848   	; 0xa36 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 302:	8e 77       	andi	r24, 0x7E	; 126
 304:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 308:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 30a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <USB_ControlRequest>
 30e:	81 32       	cpi	r24, 0x21	; 33
 310:	31 f4       	brne	.+12     	; 0x31e <EVENT_USB_Device_ControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 312:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 31c:	2b c1       	rjmp	.+598    	; 0x574 <Endpoint_ClearStatusStage>
 31e:	08 95       	ret

00000320 <CDC1_Task>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 320:	83 b1       	in	r24, 0x03	; 3
 322:	9c b1       	in	r25, 0x0c	; 12
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 324:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <USB_DeviceState>
 328:	24 30       	cpi	r18, 0x04	; 4
 32a:	09 f0       	breq	.+2      	; 0x32e <CDC1_Task+0xe>
 32c:	59 c0       	rjmp	.+178    	; 0x3e0 <CDC1_Task+0xc0>
 32e:	90 95       	com	r25
 330:	90 73       	andi	r25, 0x30	; 48
 332:	96 95       	lsr	r25
 334:	80 95       	com	r24
 336:	80 7e       	andi	r24, 0xE0	; 224
 338:	89 2b       	or	r24, r25
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 33a:	87 fd       	sbrc	r24, 7
 33c:	0b c0       	rjmp	.+22     	; 0x354 <CDC1_Task+0x34>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 33e:	84 fd       	sbrc	r24, 4
 340:	43 c0       	rjmp	.+134    	; 0x3c8 <CDC1_Task+0xa8>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 342:	86 fd       	sbrc	r24, 6
 344:	44 c0       	rjmp	.+136    	; 0x3ce <CDC1_Task+0xae>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 346:	83 fd       	sbrc	r24, 3
 348:	45 c0       	rjmp	.+138    	; 0x3d4 <CDC1_Task+0xb4>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 34a:	85 fd       	sbrc	r24, 5
 34c:	46 c0       	rjmp	.+140    	; 0x3da <CDC1_Task+0xba>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 34e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
 352:	2d c0       	rjmp	.+90     	; 0x3ae <CDC1_Task+0x8e>
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
 354:	82 e5       	ldi	r24, 0x52	; 82
 356:	91 e0       	ldi	r25, 0x01	; 1
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding1.BaudRateBPS)
 358:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <__data_end>
 35c:	21 11       	cpse	r18, r1
 35e:	27 c0       	rjmp	.+78     	; 0x3ae <CDC1_Task+0x8e>
 360:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <LineEncoding1>
 364:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <LineEncoding1+0x1>
 368:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <LineEncoding1+0x2>
 36c:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <LineEncoding1+0x3>
 370:	45 2b       	or	r20, r21
 372:	46 2b       	or	r20, r22
 374:	47 2b       	or	r20, r23
 376:	d9 f0       	breq	.+54     	; 0x3ae <CDC1_Task+0x8e>
	{
		ActionSent = true;
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <__data_end>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 37e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC1_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString), NULL);
 382:	fc 01       	movw	r30, r24
 384:	01 90       	ld	r0, Z+
 386:	00 20       	and	r0, r0
 388:	e9 f7       	brne	.-6      	; 0x384 <CDC1_Task+0x64>
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	bf 01       	movw	r22, r30
 38e:	68 1b       	sub	r22, r24
 390:	79 0b       	sbc	r23, r25
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	63 d2       	rcall	.+1222   	; 0x85e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 398:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 39c:	8e 77       	andi	r24, 0x7E	; 126
 39e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for another packet */
		Endpoint_WaitUntilReady();
 3a2:	07 d1       	rcall	.+526    	; 0x5b2 <Endpoint_WaitUntilReady>
 3a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3a8:	8e 77       	andi	r24, 0x7E	; 126
 3aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC1_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 3b8:	82 ff       	sbrs	r24, 2
 3ba:	12 c0       	rjmp	.+36     	; 0x3e0 <CDC1_Task+0xc0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3c0:	8b 77       	andi	r24, 0x7B	; 123
 3c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3c6:	08 95       	ret

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
 3c8:	82 e4       	ldi	r24, 0x42	; 66
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	c5 cf       	rjmp	.-118    	; 0x358 <CDC1_Task+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
 3ce:	82 e3       	ldi	r24, 0x32	; 50
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	c2 cf       	rjmp	.-124    	; 0x358 <CDC1_Task+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
 3d4:	81 e2       	ldi	r24, 0x21	; 33
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	bf cf       	rjmp	.-130    	; 0x358 <CDC1_Task+0x38>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
 3da:	8e e0       	ldi	r24, 0x0E	; 14
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	bc cf       	rjmp	.-136    	; 0x358 <CDC1_Task+0x38>
 3e0:	08 95       	ret

000003e2 <CDC2_Task>:

/** Function to manage CDC data transmission and reception to and from the host for the second CDC interface, which echoes back
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
 3e2:	bf 92       	push	r11
 3e4:	cf 92       	push	r12
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
		Endpoint_WaitUntilReady();

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 3f8:	0d b7       	in	r16, 0x3d	; 61
 3fa:	1e b7       	in	r17, 0x3e	; 62
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 3fc:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <USB_DeviceState>
 400:	24 e0       	ldi	r18, 0x04	; 4
 402:	b2 12       	cpse	r11, r18
 404:	3c c0       	rjmp	.+120    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 40c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC2_RX_EPNUM);

	/* Check to see if any data has been received */
	if (Endpoint_IsOUTReceived())
 410:	82 ff       	sbrs	r24, 2
 412:	35 c0       	rjmp	.+106    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 414:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 418:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	{
		/* Create a temp buffer big enough to hold the incoming endpoint packet */
		uint8_t  Buffer[Endpoint_BytesInEndpoint()];
 41c:	2d b7       	in	r18, 0x3d	; 61
 41e:	3e b7       	in	r19, 0x3e	; 62
 420:	28 1b       	sub	r18, r24
 422:	39 0b       	sbc	r19, r25
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	3e bf       	out	0x3e, r19	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	2d bf       	out	0x3d, r18	; 61
 42e:	8d b7       	in	r24, 0x3d	; 61
 430:	9e b7       	in	r25, 0x3e	; 62
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	7c 01       	movw	r14, r24
 436:	c0 90 f2 00 	lds	r12, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 43a:	d0 90 f3 00 	lds	r13, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

		/* Remember how large the incoming packet is */
		uint16_t DataLength = Endpoint_BytesInEndpoint();

		/* Read in the incoming packet into the buffer */
		Endpoint_Read_Stream_LE(&Buffer, DataLength, NULL);
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	b6 01       	movw	r22, r12
 444:	56 d2       	rcall	.+1196   	; 0x8f2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 446:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 44a:	8b 77       	andi	r24, 0x7B	; 123
 44c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 450:	b0 92 e9 00 	sts	0x00E9, r11	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC2_TX_EPNUM);

		/* Write the received data to the endpoint */
		Endpoint_Write_Stream_LE(&Buffer, DataLength, NULL);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	b6 01       	movw	r22, r12
 45a:	c7 01       	movw	r24, r14
 45c:	00 d2       	rcall	.+1024   	; 0x85e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 45e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 462:	8e 77       	andi	r24, 0x7E	; 126
 464:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for the next packet */
		Endpoint_WaitUntilReady();
 468:	a4 d0       	rcall	.+328    	; 0x5b2 <Endpoint_WaitUntilReady>
 46a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 46e:	8e 77       	andi	r24, 0x7E	; 126
 470:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	1e bf       	out	0x3e, r17	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0d bf       	out	0x3d, r16	; 61

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	1e bf       	out	0x3e, r17	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	0d bf       	out	0x3d, r16	; 61
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	ef 90       	pop	r14
 494:	df 90       	pop	r13
 496:	cf 90       	pop	r12
 498:	bf 90       	pop	r11
 49a:	08 95       	ret

0000049c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 49c:	98 de       	rcall	.-720    	; 0x1ce <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 49e:	80 e1       	ldi	r24, 0x10	; 16
 4a0:	91 de       	rcall	.-734    	; 0x1c4 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		CDC1_Task();
 4a2:	78 94       	sei
		CDC2_Task();
 4a4:	3d df       	rcall	.-390    	; 0x320 <CDC1_Task>
 4a6:	9d df       	rcall	.-198    	; 0x3e2 <CDC2_Task>
		USB_USBTask();
 4a8:	ae d4       	rcall	.+2396   	; 0xe06 <USB_USBTask>
 4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <main+0x8>

000004ac <CALLBACK_USB_GetDescriptor>:
 4ac:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4ae:	33 27       	eor	r19, r19
 4b0:	22 30       	cpi	r18, 0x02	; 2
 4b2:	31 05       	cpc	r19, r1
 4b4:	59 f0       	breq	.+22     	; 0x4cc <CALLBACK_USB_GetDescriptor+0x20>
 4b6:	23 30       	cpi	r18, 0x03	; 3
 4b8:	31 05       	cpc	r19, r1
 4ba:	69 f0       	breq	.+26     	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x2a>
 4bc:	21 30       	cpi	r18, 0x01	; 1
 4be:	31 05       	cpc	r19, r1
 4c0:	e9 f4       	brne	.+58     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 4c2:	82 e1       	ldi	r24, 0x12	; 18
 4c4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 4c6:	25 e7       	ldi	r18, 0x75	; 117
 4c8:	31 e0       	ldi	r19, 0x01	; 1
 4ca:	1c c0       	rjmp	.+56     	; 0x504 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 4cc:	83 e8       	ldi	r24, 0x83	; 131
 4ce:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 4d0:	22 ef       	ldi	r18, 0xF2	; 242
 4d2:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 4d4:	17 c0       	rjmp	.+46     	; 0x504 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 4d6:	99 27       	eor	r25, r25
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	91 05       	cpc	r25, r1
 4dc:	49 f0       	breq	.+18     	; 0x4f0 <CALLBACK_USB_GetDescriptor+0x44>
 4de:	28 f0       	brcs	.+10     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x3e>
 4e0:	02 97       	sbiw	r24, 0x02	; 2
 4e2:	61 f4       	brne	.+24     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4e4:	ec ea       	ldi	r30, 0xAC	; 172
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4ea:	ee ee       	ldi	r30, 0xEE	; 238
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4f0:	e4 ed       	ldi	r30, 0xD4	; 212
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4f4:	84 91       	lpm	r24, Z
 4f6:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 4f8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 504:	fa 01       	movw	r30, r20
 506:	31 83       	std	Z+1, r19	; 0x01
 508:	20 83       	st	Z, r18
	return Size;
}
 50a:	08 95       	ret

0000050c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 50c:	98 2f       	mov	r25, r24
 50e:	97 30       	cpi	r25, 0x07	; 7
 510:	68 f5       	brcc	.+90     	; 0x56c <Endpoint_ConfigureEndpoint_Prv+0x60>
 512:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 516:	98 17       	cp	r25, r24
 518:	39 f0       	breq	.+14     	; 0x528 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 51a:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 51e:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 522:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 526:	03 c0       	rjmp	.+6      	; 0x52e <Endpoint_ConfigureEndpoint_Prv+0x22>
 528:	24 2f       	mov	r18, r20
 52a:	76 2f       	mov	r23, r22
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	21 fd       	sbrc	r18, 1
 530:	02 c0       	rjmp	.+4      	; 0x536 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 532:	9f 5f       	subi	r25, 0xFF	; 255
 534:	ec cf       	rjmp	.-40     	; 0x50e <Endpoint_ConfigureEndpoint_Prv+0x2>
 536:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 53a:	3e 7f       	andi	r19, 0xFE	; 254
 53c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 540:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 544:	3d 7f       	andi	r19, 0xFD	; 253
 546:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 54a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 54e:	31 60       	ori	r19, 0x01	; 1
 550:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 554:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 558:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 55c:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 560:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 564:	27 fd       	sbrc	r18, 7
 566:	e5 cf       	rjmp	.-54     	; 0x532 <Endpoint_ConfigureEndpoint_Prv+0x26>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	08 95       	ret
 56c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret

00000574 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 574:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <USB_ControlRequest>
 578:	87 ff       	sbrs	r24, 7
 57a:	11 c0       	rjmp	.+34     	; 0x59e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 57c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 580:	82 fd       	sbrc	r24, 2
 582:	05 c0       	rjmp	.+10     	; 0x58e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 584:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 588:	81 11       	cpse	r24, r1
 58a:	f8 cf       	rjmp	.-16     	; 0x57c <Endpoint_ClearStatusStage+0x8>
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 58e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 592:	8b 77       	andi	r24, 0x7B	; 123
 594:	0b c0       	rjmp	.+22     	; 0x5ac <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 596:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 59a:	88 23       	and	r24, r24
 59c:	49 f0       	breq	.+18     	; 0x5b0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 59e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 5a2:	80 ff       	sbrs	r24, 0
 5a4:	f8 cf       	rjmp	.-16     	; 0x596 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5aa:	8e 77       	andi	r24, 0x7E	; 126
 5ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5b0:	08 95       	ret

000005b2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 5b2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5b6:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 5ba:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 5bc:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 5c0:	84 2f       	mov	r24, r20
 5c2:	81 70       	andi	r24, 0x01	; 1
 5c4:	40 ff       	sbrs	r20, 0
 5c6:	23 c0       	rjmp	.+70     	; 0x60e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 5cc:	80 fd       	sbrc	r24, 0
 5ce:	1d c0       	rjmp	.+58     	; 0x60a <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5d0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5d4:	88 23       	and	r24, r24
 5d6:	99 f0       	breq	.+38     	; 0x5fe <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5d8:	85 30       	cpi	r24, 0x05	; 5
 5da:	99 f0       	breq	.+38     	; 0x602 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5e0:	85 fd       	sbrc	r24, 5
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <Endpoint_WaitUntilReady+0x54>
 5e4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5e8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 5ec:	24 17       	cp	r18, r20
 5ee:	35 07       	cpc	r19, r21
 5f0:	29 f3       	breq	.-54     	; 0x5bc <Endpoint_WaitUntilReady+0xa>
 5f2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 5f4:	11 f0       	breq	.+4      	; 0x5fa <Endpoint_WaitUntilReady+0x48>
 5f6:	9a 01       	movw	r18, r20
 5f8:	e1 cf       	rjmp	.-62     	; 0x5bc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 5fa:	84 e0       	ldi	r24, 0x04	; 4
 5fc:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 60e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 612:	42 ff       	sbrs	r20, 2
 614:	dd cf       	rjmp	.-70     	; 0x5d0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 616:	08 95       	ret

00000618 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 620:	49 d0       	rcall	.+146    	; 0x6b4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 622:	50 d0       	rcall	.+160    	; 0x6c4 <USB_INT_ClearAllInterrupts>
 624:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 626:	d0 e0       	ldi	r29, 0x00	; 0
 628:	88 81       	ld	r24, Y
 62a:	8f 77       	andi	r24, 0x7F	; 127
 62c:	88 83       	st	Y, r24
 62e:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 630:	80 68       	ori	r24, 0x80	; 128
 632:	88 83       	st	Y, r24
 634:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 636:	8f 7d       	andi	r24, 0xDF	; 223
 638:	88 83       	st	Y, r24
 63a:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	80 68       	ori	r24, 0x80	; 128
 642:	80 83       	st	Z, r24
 644:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 646:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 64a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 64e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 652:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 656:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 658:	10 e0       	ldi	r17, 0x00	; 0
 65a:	f8 01       	movw	r30, r16
 65c:	80 81       	ld	r24, Z
 65e:	8b 7f       	andi	r24, 0xFB	; 251
 660:	80 83       	st	Z, r24
 662:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 664:	81 60       	ori	r24, 0x01	; 1
 666:	88 83       	st	Y, r24
 668:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	4e df       	rcall	.-356    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>
 670:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	8e 7f       	andi	r24, 0xFE	; 254
 678:	80 83       	st	Z, r24
 67a:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	81 60       	ori	r24, 0x01	; 1
 682:	80 83       	st	Z, r24
 684:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 686:	88 60       	ori	r24, 0x08	; 8
 688:	80 83       	st	Z, r24
 68a:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 68c:	80 81       	ld	r24, Z
 68e:	8e 7f       	andi	r24, 0xFE	; 254
 690:	80 83       	st	Z, r24
 692:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 694:	80 61       	ori	r24, 0x10	; 16
 696:	88 83       	st	Y, r24
 698:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <USB_Init>:
 6a2:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <USB_IsInitialized>

	USB_ResetInterface();
 6b2:	b2 cf       	rjmp	.-156    	; 0x618 <USB_ResetInterface>

000006b4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 6b4:	e8 ed       	ldi	r30, 0xD8	; 216
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	8c 7f       	andi	r24, 0xFC	; 252
 6bc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 6be:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6c2:	08 95       	ret

000006c4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 6c4:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 6c8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6cc:	08 95       	ret

000006ce <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 6ce:	1f 92       	push	r1
 6d0:	0f 92       	push	r0
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	0f 92       	push	r0
 6d6:	11 24       	eor	r1, r1
 6d8:	0b b6       	in	r0, 0x3b	; 59
 6da:	0f 92       	push	r0
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 6f4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6f8:	82 ff       	sbrs	r24, 2
 6fa:	0a c0       	rjmp	.+20     	; 0x710 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 6fc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 700:	82 ff       	sbrs	r24, 2
 702:	06 c0       	rjmp	.+12     	; 0x710 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 704:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 708:	8b 7f       	andi	r24, 0xFB	; 251
 70a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 70e:	7a d3       	rcall	.+1780   	; 0xe04 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 710:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 714:	80 ff       	sbrs	r24, 0
 716:	1d c0       	rjmp	.+58     	; 0x752 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 718:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 71c:	80 ff       	sbrs	r24, 0
 71e:	19 c0       	rjmp	.+50     	; 0x752 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 720:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 724:	8e 7f       	andi	r24, 0xFE	; 254
 726:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 72a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 72e:	80 ff       	sbrs	r24, 0
 730:	0c c0       	rjmp	.+24     	; 0x74a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 732:	8c e0       	ldi	r24, 0x0C	; 12
 734:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 736:	8e e0       	ldi	r24, 0x0E	; 14
 738:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 73a:	09 b4       	in	r0, 0x29	; 41
 73c:	00 fe       	sbrs	r0, 0
 73e:	fd cf       	rjmp	.-6      	; 0x73a <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 746:	6d dd       	rcall	.-1318   	; 0x222 <EVENT_USB_Device_Connect>
 748:	04 c0       	rjmp	.+8      	; 0x752 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 74a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 74c:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 750:	6a dd       	rcall	.-1324   	; 0x226 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 752:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 756:	80 ff       	sbrs	r24, 0
 758:	18 c0       	rjmp	.+48     	; 0x78a <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 75a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 75e:	80 ff       	sbrs	r24, 0
 760:	14 c0       	rjmp	.+40     	; 0x78a <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 762:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 766:	8e 7f       	andi	r24, 0xFE	; 254
 768:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 76c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 770:	80 61       	ori	r24, 0x10	; 16
 772:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 776:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 77a:	80 62       	ori	r24, 0x20	; 32
 77c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 780:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 782:	85 e0       	ldi	r24, 0x05	; 5
 784:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 788:	3d d3       	rcall	.+1658   	; 0xe04 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 78a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 78e:	84 ff       	sbrs	r24, 4
 790:	2d c0       	rjmp	.+90     	; 0x7ec <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 792:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 796:	84 ff       	sbrs	r24, 4
 798:	29 c0       	rjmp	.+82     	; 0x7ec <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 79a:	8c e0       	ldi	r24, 0x0C	; 12
 79c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 79e:	8e e0       	ldi	r24, 0x0E	; 14
 7a0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7a2:	09 b4       	in	r0, 0x29	; 41
 7a4:	00 fe       	sbrs	r0, 0
 7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 7a8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
 7ae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 7b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 7b6:	8f 7e       	andi	r24, 0xEF	; 239
 7b8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 7bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7c0:	8f 7e       	andi	r24, 0xEF	; 239
 7c2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7ca:	81 60       	ori	r24, 0x01	; 1
 7cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7d0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <USB_Device_ConfigurationNumber>
 7d4:	81 11       	cpse	r24, r1
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7d8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 7dc:	87 fd       	sbrc	r24, 7
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__vector_10+0x116>
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <__vector_10+0x118>
 7e4:	84 e0       	ldi	r24, 0x04	; 4
 7e6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7ea:	0c d3       	rcall	.+1560   	; 0xe04 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7f0:	83 ff       	sbrs	r24, 3
 7f2:	22 c0       	rjmp	.+68     	; 0x838 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7f8:	83 ff       	sbrs	r24, 3
 7fa:	1e c0       	rjmp	.+60     	; 0x838 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7fc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 800:	87 7f       	andi	r24, 0xF7	; 247
 802:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 80c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 810:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 81a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 81e:	8e 7f       	andi	r24, 0xFE	; 254
 820:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 824:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 828:	80 61       	ori	r24, 0x10	; 16
 82a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 82e:	42 e0       	ldi	r20, 0x02	; 2
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	6b de       	rcall	.-810    	; 0x50c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 836:	e6 d2       	rcall	.+1484   	; 0xe04 <USB_Event_Stub>
 838:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 83a:	ef 91       	pop	r30
 83c:	bf 91       	pop	r27
 83e:	af 91       	pop	r26
 840:	9f 91       	pop	r25
 842:	8f 91       	pop	r24
 844:	7f 91       	pop	r23
 846:	6f 91       	pop	r22
 848:	5f 91       	pop	r21
 84a:	4f 91       	pop	r20
 84c:	3f 91       	pop	r19
 84e:	2f 91       	pop	r18
 850:	0f 90       	pop	r0
 852:	0b be       	out	0x3b, r0	; 59
 854:	0f 90       	pop	r0
 856:	0f be       	out	0x3f, r0	; 63
 858:	0f 90       	pop	r0
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <Endpoint_Write_Stream_LE>:
 85e:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 860:	df 92       	push	r13
 862:	ef 92       	push	r14
 864:	ff 92       	push	r15
 866:	0f 93       	push	r16
 868:	1f 93       	push	r17
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	ec 01       	movw	r28, r24
 870:	8b 01       	movw	r16, r22
 872:	7a 01       	movw	r14, r20
 874:	9e de       	rcall	.-708    	; 0x5b2 <Endpoint_WaitUntilReady>
 876:	81 11       	cpse	r24, r1
 878:	33 c0       	rjmp	.+102    	; 0x8e0 <Endpoint_Write_Stream_LE+0x82>
 87a:	e1 14       	cp	r14, r1
 87c:	f1 04       	cpc	r15, r1
 87e:	39 f0       	breq	.+14     	; 0x88e <Endpoint_Write_Stream_LE+0x30>
 880:	f7 01       	movw	r30, r14
 882:	80 81       	ld	r24, Z
 884:	91 81       	ldd	r25, Z+1	; 0x01
 886:	08 1b       	sub	r16, r24
 888:	19 0b       	sbc	r17, r25
 88a:	c8 0f       	add	r28, r24
 88c:	d9 1f       	adc	r29, r25
 88e:	c1 2c       	mov	r12, r1
 890:	d1 2c       	mov	r13, r1
 892:	01 15       	cp	r16, r1
 894:	11 05       	cpc	r17, r1
 896:	19 f1       	breq	.+70     	; 0x8de <Endpoint_Write_Stream_LE+0x80>
 898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 89c:	85 fd       	sbrc	r24, 5
 89e:	16 c0       	rjmp	.+44     	; 0x8cc <Endpoint_Write_Stream_LE+0x6e>
 8a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a4:	8e 77       	andi	r24, 0x7E	; 126
 8a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8aa:	ad d2       	rcall	.+1370   	; 0xe06 <USB_USBTask>
 8ac:	e1 14       	cp	r14, r1
 8ae:	f1 04       	cpc	r15, r1
 8b0:	49 f0       	breq	.+18     	; 0x8c4 <Endpoint_Write_Stream_LE+0x66>
 8b2:	f7 01       	movw	r30, r14
 8b4:	80 81       	ld	r24, Z
 8b6:	91 81       	ldd	r25, Z+1	; 0x01
 8b8:	c8 0e       	add	r12, r24
 8ba:	d9 1e       	adc	r13, r25
 8bc:	d1 82       	std	Z+1, r13	; 0x01
 8be:	c0 82       	st	Z, r12
 8c0:	85 e0       	ldi	r24, 0x05	; 5
 8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <Endpoint_Write_Stream_LE+0x82>
 8c4:	76 de       	rcall	.-788    	; 0x5b2 <Endpoint_WaitUntilReady>
 8c6:	88 23       	and	r24, r24
 8c8:	21 f3       	breq	.-56     	; 0x892 <Endpoint_Write_Stream_LE+0x34>
 8ca:	0a c0       	rjmp	.+20     	; 0x8e0 <Endpoint_Write_Stream_LE+0x82>
 8cc:	89 91       	ld	r24, Y+
 8ce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8d2:	01 50       	subi	r16, 0x01	; 1
 8d4:	11 09       	sbc	r17, r1
 8d6:	ff ef       	ldi	r31, 0xFF	; 255
 8d8:	cf 1a       	sub	r12, r31
 8da:	df 0a       	sbc	r13, r31
 8dc:	da cf       	rjmp	.-76     	; 0x892 <Endpoint_Write_Stream_LE+0x34>
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	1f 91       	pop	r17
 8e6:	0f 91       	pop	r16
 8e8:	ff 90       	pop	r15
 8ea:	ef 90       	pop	r14
 8ec:	df 90       	pop	r13
 8ee:	cf 90       	pop	r12
 8f0:	08 95       	ret

000008f2 <Endpoint_Read_Stream_LE>:
 8f2:	cf 92       	push	r12
 8f4:	df 92       	push	r13
 8f6:	ef 92       	push	r14
 8f8:	ff 92       	push	r15
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	ec 01       	movw	r28, r24
 904:	8b 01       	movw	r16, r22
 906:	7a 01       	movw	r14, r20
 908:	54 de       	rcall	.-856    	; 0x5b2 <Endpoint_WaitUntilReady>
 90a:	81 11       	cpse	r24, r1
 90c:	33 c0       	rjmp	.+102    	; 0x974 <Endpoint_Read_Stream_LE+0x82>
 90e:	e1 14       	cp	r14, r1
 910:	f1 04       	cpc	r15, r1
 912:	39 f0       	breq	.+14     	; 0x922 <Endpoint_Read_Stream_LE+0x30>
 914:	f7 01       	movw	r30, r14
 916:	80 81       	ld	r24, Z
 918:	91 81       	ldd	r25, Z+1	; 0x01
 91a:	08 1b       	sub	r16, r24
 91c:	19 0b       	sbc	r17, r25
 91e:	c8 0f       	add	r28, r24
 920:	d9 1f       	adc	r29, r25
 922:	c1 2c       	mov	r12, r1
 924:	d1 2c       	mov	r13, r1
 926:	01 15       	cp	r16, r1
 928:	11 05       	cpc	r17, r1
 92a:	19 f1       	breq	.+70     	; 0x972 <Endpoint_Read_Stream_LE+0x80>
 92c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 930:	85 fd       	sbrc	r24, 5
 932:	16 c0       	rjmp	.+44     	; 0x960 <Endpoint_Read_Stream_LE+0x6e>
 934:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 938:	8b 77       	andi	r24, 0x7B	; 123
 93a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 93e:	63 d2       	rcall	.+1222   	; 0xe06 <USB_USBTask>
 940:	e1 14       	cp	r14, r1
 942:	f1 04       	cpc	r15, r1
 944:	49 f0       	breq	.+18     	; 0x958 <Endpoint_Read_Stream_LE+0x66>
 946:	f7 01       	movw	r30, r14
 948:	80 81       	ld	r24, Z
 94a:	91 81       	ldd	r25, Z+1	; 0x01
 94c:	c8 0e       	add	r12, r24
 94e:	d9 1e       	adc	r13, r25
 950:	d1 82       	std	Z+1, r13	; 0x01
 952:	c0 82       	st	Z, r12
 954:	85 e0       	ldi	r24, 0x05	; 5
 956:	0e c0       	rjmp	.+28     	; 0x974 <Endpoint_Read_Stream_LE+0x82>
 958:	2c de       	rcall	.-936    	; 0x5b2 <Endpoint_WaitUntilReady>
 95a:	88 23       	and	r24, r24
 95c:	21 f3       	breq	.-56     	; 0x926 <Endpoint_Read_Stream_LE+0x34>
 95e:	0a c0       	rjmp	.+20     	; 0x974 <Endpoint_Read_Stream_LE+0x82>
 960:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 964:	89 93       	st	Y+, r24
 966:	01 50       	subi	r16, 0x01	; 1
 968:	11 09       	sbc	r17, r1
 96a:	ff ef       	ldi	r31, 0xFF	; 255
 96c:	cf 1a       	sub	r12, r31
 96e:	df 0a       	sbc	r13, r31
 970:	da cf       	rjmp	.-76     	; 0x926 <Endpoint_Read_Stream_LE+0x34>
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	df 90       	pop	r13
 982:	cf 90       	pop	r12
 984:	08 95       	ret

00000986 <Endpoint_Write_Control_Stream_LE>:
 986:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <USB_ControlRequest+0x6>
 98a:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <USB_ControlRequest+0x7>
 98e:	26 17       	cp	r18, r22
 990:	37 07       	cpc	r19, r23
 992:	48 f0       	brcs	.+18     	; 0x9a6 <Endpoint_Write_Control_Stream_LE+0x20>
 994:	61 15       	cp	r22, r1
 996:	71 05       	cpc	r23, r1
 998:	39 f4       	brne	.+14     	; 0x9a8 <Endpoint_Write_Control_Stream_LE+0x22>
 99a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 99e:	2e 77       	andi	r18, 0x7E	; 126
 9a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <Endpoint_Write_Control_Stream_LE+0x22>
 9a6:	b9 01       	movw	r22, r18
 9a8:	fc 01       	movw	r30, r24
 9aa:	20 e0       	ldi	r18, 0x00	; 0
 9ac:	61 15       	cp	r22, r1
 9ae:	71 05       	cpc	r23, r1
 9b0:	69 f1       	breq	.+90     	; 0xa0c <Endpoint_Write_Control_Stream_LE+0x86>
 9b2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 9b6:	88 23       	and	r24, r24
 9b8:	d1 f1       	breq	.+116    	; 0xa2e <Endpoint_Write_Control_Stream_LE+0xa8>
 9ba:	85 30       	cpi	r24, 0x05	; 5
 9bc:	d1 f1       	breq	.+116    	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xac>
 9be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9c2:	83 fd       	sbrc	r24, 3
 9c4:	32 c0       	rjmp	.+100    	; 0xa2a <Endpoint_Write_Control_Stream_LE+0xa4>
 9c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9ca:	82 fd       	sbrc	r24, 2
 9cc:	28 c0       	rjmp	.+80     	; 0xa1e <Endpoint_Write_Control_Stream_LE+0x98>
 9ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9d2:	80 ff       	sbrs	r24, 0
 9d4:	eb cf       	rjmp	.-42     	; 0x9ac <Endpoint_Write_Control_Stream_LE+0x26>
 9d6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 9da:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 9de:	61 15       	cp	r22, r1
 9e0:	71 05       	cpc	r23, r1
 9e2:	51 f0       	breq	.+20     	; 0x9f8 <Endpoint_Write_Control_Stream_LE+0x72>
 9e4:	88 30       	cpi	r24, 0x08	; 8
 9e6:	91 05       	cpc	r25, r1
 9e8:	38 f4       	brcc	.+14     	; 0x9f8 <Endpoint_Write_Control_Stream_LE+0x72>
 9ea:	21 91       	ld	r18, Z+
 9ec:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 9f0:	61 50       	subi	r22, 0x01	; 1
 9f2:	71 09       	sbc	r23, r1
 9f4:	01 96       	adiw	r24, 0x01	; 1
 9f6:	f3 cf       	rjmp	.-26     	; 0x9de <Endpoint_Write_Control_Stream_LE+0x58>
 9f8:	21 e0       	ldi	r18, 0x01	; 1
 9fa:	08 97       	sbiw	r24, 0x08	; 8
 9fc:	09 f0       	breq	.+2      	; 0xa00 <Endpoint_Write_Control_Stream_LE+0x7a>
 9fe:	20 e0       	ldi	r18, 0x00	; 0
 a00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a04:	8e 77       	andi	r24, 0x7E	; 126
 a06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a0a:	d0 cf       	rjmp	.-96     	; 0x9ac <Endpoint_Write_Control_Stream_LE+0x26>
 a0c:	21 11       	cpse	r18, r1
 a0e:	d1 cf       	rjmp	.-94     	; 0x9b2 <Endpoint_Write_Control_Stream_LE+0x2c>
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <Endpoint_Write_Control_Stream_LE+0x98>
 a12:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 a16:	88 23       	and	r24, r24
 a18:	51 f0       	breq	.+20     	; 0xa2e <Endpoint_Write_Control_Stream_LE+0xa8>
 a1a:	85 30       	cpi	r24, 0x05	; 5
 a1c:	51 f0       	breq	.+20     	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xac>
 a1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a22:	82 ff       	sbrs	r24, 2
 a24:	f6 cf       	rjmp	.-20     	; 0xa12 <Endpoint_Write_Control_Stream_LE+0x8c>
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	08 95       	ret
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	08 95       	ret
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	08 95       	ret
 a32:	83 e0       	ldi	r24, 0x03	; 3
 a34:	08 95       	ret

00000a36 <Endpoint_Read_Control_Stream_LE>:
 a36:	61 15       	cp	r22, r1
 a38:	71 05       	cpc	r23, r1
 a3a:	29 f4       	brne	.+10     	; 0xa46 <Endpoint_Read_Control_Stream_LE+0x10>
 a3c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a40:	2b 77       	andi	r18, 0x7B	; 123
 a42:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a46:	fc 01       	movw	r30, r24
 a48:	61 15       	cp	r22, r1
 a4a:	71 05       	cpc	r23, r1
 a4c:	31 f1       	breq	.+76     	; 0xa9a <Endpoint_Read_Control_Stream_LE+0x64>
 a4e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 a52:	88 23       	and	r24, r24
 a54:	51 f1       	breq	.+84     	; 0xaaa <Endpoint_Read_Control_Stream_LE+0x74>
 a56:	85 30       	cpi	r24, 0x05	; 5
 a58:	51 f1       	breq	.+84     	; 0xaae <Endpoint_Read_Control_Stream_LE+0x78>
 a5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a5e:	83 fd       	sbrc	r24, 3
 a60:	22 c0       	rjmp	.+68     	; 0xaa6 <Endpoint_Read_Control_Stream_LE+0x70>
 a62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a66:	82 ff       	sbrs	r24, 2
 a68:	ef cf       	rjmp	.-34     	; 0xa48 <Endpoint_Read_Control_Stream_LE+0x12>
 a6a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 a6e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 a72:	89 2b       	or	r24, r25
 a74:	31 f0       	breq	.+12     	; 0xa82 <Endpoint_Read_Control_Stream_LE+0x4c>
 a76:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 a7a:	81 93       	st	Z+, r24
 a7c:	61 50       	subi	r22, 0x01	; 1
 a7e:	71 09       	sbc	r23, r1
 a80:	a1 f7       	brne	.-24     	; 0xa6a <Endpoint_Read_Control_Stream_LE+0x34>
 a82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a86:	8b 77       	andi	r24, 0x7B	; 123
 a88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a8c:	dd cf       	rjmp	.-70     	; 0xa48 <Endpoint_Read_Control_Stream_LE+0x12>
 a8e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 a92:	88 23       	and	r24, r24
 a94:	51 f0       	breq	.+20     	; 0xaaa <Endpoint_Read_Control_Stream_LE+0x74>
 a96:	85 30       	cpi	r24, 0x05	; 5
 a98:	51 f0       	breq	.+20     	; 0xaae <Endpoint_Read_Control_Stream_LE+0x78>
 a9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a9e:	80 ff       	sbrs	r24, 0
 aa0:	f6 cf       	rjmp	.-20     	; 0xa8e <Endpoint_Read_Control_Stream_LE+0x58>
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	08 95       	ret
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	08 95       	ret
 aaa:	82 e0       	ldi	r24, 0x02	; 2
 aac:	08 95       	ret
 aae:	83 e0       	ldi	r24, 0x03	; 3
 ab0:	08 95       	ret

00000ab2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 ab2:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <USB_ControlRequest+0x6>
 ab6:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <USB_ControlRequest+0x7>
 aba:	26 17       	cp	r18, r22
 abc:	37 07       	cpc	r19, r23
 abe:	48 f0       	brcs	.+18     	; 0xad2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 ac0:	61 15       	cp	r22, r1
 ac2:	71 05       	cpc	r23, r1
 ac4:	39 f4       	brne	.+14     	; 0xad4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ac6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aca:	2e 77       	andi	r18, 0x7E	; 126
 acc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ad0:	01 c0       	rjmp	.+2      	; 0xad4 <Endpoint_Write_Control_PStream_LE+0x22>
 ad2:	b9 01       	movw	r22, r18
 ad4:	fc 01       	movw	r30, r24
 ad6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 ad8:	61 15       	cp	r22, r1
 ada:	71 05       	cpc	r23, r1
 adc:	71 f1       	breq	.+92     	; 0xb3a <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 ade:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 ae2:	88 23       	and	r24, r24
 ae4:	d9 f1       	breq	.+118    	; 0xb5c <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 ae6:	85 30       	cpi	r24, 0x05	; 5
 ae8:	d9 f1       	breq	.+118    	; 0xb60 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 aea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 aee:	83 fd       	sbrc	r24, 3
 af0:	33 c0       	rjmp	.+102    	; 0xb58 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 af2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 af6:	82 fd       	sbrc	r24, 2
 af8:	29 c0       	rjmp	.+82     	; 0xb4c <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 afa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 afe:	80 ff       	sbrs	r24, 0
 b00:	eb cf       	rjmp	.-42     	; 0xad8 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b02:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b06:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 b0a:	61 15       	cp	r22, r1
 b0c:	71 05       	cpc	r23, r1
 b0e:	59 f0       	breq	.+22     	; 0xb26 <Endpoint_Write_Control_PStream_LE+0x74>
 b10:	88 30       	cpi	r24, 0x08	; 8
 b12:	91 05       	cpc	r25, r1
 b14:	40 f4       	brcc	.+16     	; 0xb26 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 b16:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b18:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 b1c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 b1e:	61 50       	subi	r22, 0x01	; 1
 b20:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 b22:	01 96       	adiw	r24, 0x01	; 1
 b24:	f2 cf       	rjmp	.-28     	; 0xb0a <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 b26:	21 e0       	ldi	r18, 0x01	; 1
 b28:	08 97       	sbiw	r24, 0x08	; 8
 b2a:	09 f0       	breq	.+2      	; 0xb2e <Endpoint_Write_Control_PStream_LE+0x7c>
 b2c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b32:	8e 77       	andi	r24, 0x7E	; 126
 b34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b38:	cf cf       	rjmp	.-98     	; 0xad8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b3a:	21 11       	cpse	r18, r1
 b3c:	d0 cf       	rjmp	.-96     	; 0xade <Endpoint_Write_Control_PStream_LE+0x2c>
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b40:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b44:	88 23       	and	r24, r24
 b46:	51 f0       	breq	.+20     	; 0xb5c <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b48:	85 30       	cpi	r24, 0x05	; 5
 b4a:	51 f0       	breq	.+20     	; 0xb60 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 b50:	82 ff       	sbrs	r24, 2
 b52:	f6 cf       	rjmp	.-20     	; 0xb40 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 b5c:	82 e0       	ldi	r24, 0x02	; 2
 b5e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 b60:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b62:	08 95       	ret

00000b64 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b64:	0f 93       	push	r16
 b66:	1f 93       	push	r17
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
 b70:	aa 97       	sbiw	r28, 0x2a	; 42
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	f8 94       	cli
 b76:	de bf       	out	0x3e, r29	; 62
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	cd bf       	out	0x3d, r28	; 61
 b7c:	e6 e6       	ldi	r30, 0x66	; 102
 b7e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b80:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b84:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b86:	21 e0       	ldi	r18, 0x01	; 1
 b88:	ee 36       	cpi	r30, 0x6E	; 110
 b8a:	f2 07       	cpc	r31, r18
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b8e:	87 db       	rcall	.-2290   	; 0x29e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 b94:	83 ff       	sbrs	r24, 3
 b96:	1d c1       	rjmp	.+570    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b98:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 b9c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <USB_ControlRequest+0x1>
 ba0:	49 2f       	mov	r20, r25
 ba2:	50 e0       	ldi	r21, 0x00	; 0
 ba4:	4a 30       	cpi	r20, 0x0A	; 10
 ba6:	51 05       	cpc	r21, r1
 ba8:	08 f0       	brcs	.+2      	; 0xbac <USB_Device_ProcessControlRequest+0x48>
 baa:	13 c1       	rjmp	.+550    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
 bac:	fa 01       	movw	r30, r20
 bae:	e4 5b       	subi	r30, 0xB4	; 180
 bb0:	ff 4f       	sbci	r31, 0xFF	; 255
 bb2:	3b c1       	rjmp	.+630    	; 0xe2a <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bb4:	80 38       	cpi	r24, 0x80	; 128
 bb6:	81 f0       	breq	.+32     	; 0xbd8 <USB_Device_ProcessControlRequest+0x74>
 bb8:	82 38       	cpi	r24, 0x82	; 130
 bba:	09 f0       	breq	.+2      	; 0xbbe <USB_Device_ProcessControlRequest+0x5a>
 bbc:	0a c1       	rjmp	.+532    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bbe:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <USB_ControlRequest+0x4>
 bc2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bc4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 bc8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 bcc:	85 fb       	bst	r24, 5
 bce:	88 27       	eor	r24, r24
 bd0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bd2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 bd6:	06 c0       	rjmp	.+12     	; 0xbe4 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 bd8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 bdc:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <USB_Device_RemoteWakeupEnabled>
 be0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 be2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 be4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 be8:	97 7f       	andi	r25, 0xF7	; 247
 bea:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 bee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 bf2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 bf6:	c5 c0       	rjmp	.+394    	; 0xd82 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bf8:	28 2f       	mov	r18, r24
 bfa:	2d 7f       	andi	r18, 0xFD	; 253
 bfc:	09 f0       	breq	.+2      	; 0xc00 <USB_Device_ProcessControlRequest+0x9c>
 bfe:	e9 c0       	rjmp	.+466    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c00:	88 23       	and	r24, r24
 c02:	19 f0       	breq	.+6      	; 0xc0a <USB_Device_ProcessControlRequest+0xa6>
 c04:	82 30       	cpi	r24, 0x02	; 2
 c06:	61 f0       	breq	.+24     	; 0xc20 <USB_Device_ProcessControlRequest+0xbc>
 c08:	e4 c0       	rjmp	.+456    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c0a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_ControlRequest+0x2>
 c0e:	81 30       	cpi	r24, 0x01	; 1
 c10:	09 f0       	breq	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0xb0>
 c12:	df c0       	rjmp	.+446    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c14:	93 30       	cpi	r25, 0x03	; 3
 c16:	09 f0       	breq	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0xb6>
 c18:	80 e0       	ldi	r24, 0x00	; 0
 c1a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <USB_Device_RemoteWakeupEnabled>
 c1e:	2b c0       	rjmp	.+86     	; 0xc76 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c20:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_ControlRequest+0x2>
 c24:	81 11       	cpse	r24, r1
 c26:	27 c0       	rjmp	.+78     	; 0xc76 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c28:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <USB_ControlRequest+0x4>
 c2c:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 c2e:	09 f4       	brne	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0xce>
 c30:	d0 c0       	rjmp	.+416    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c32:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c36:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c3a:	20 ff       	sbrs	r18, 0
 c3c:	1c c0       	rjmp	.+56     	; 0xc76 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c3e:	93 30       	cpi	r25, 0x03	; 3
 c40:	21 f4       	brne	.+8      	; 0xc4a <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c42:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c46:	80 62       	ori	r24, 0x20	; 32
 c48:	14 c0       	rjmp	.+40     	; 0xc72 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c4a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c4e:	90 61       	ori	r25, 0x10	; 16
 c50:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 c54:	21 e0       	ldi	r18, 0x01	; 1
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	a9 01       	movw	r20, r18
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <USB_Device_ProcessControlRequest+0xfc>
 c5c:	44 0f       	add	r20, r20
 c5e:	55 1f       	adc	r21, r21
 c60:	8a 95       	dec	r24
 c62:	e2 f7       	brpl	.-8      	; 0xc5c <USB_Device_ProcessControlRequest+0xf8>
 c64:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 c68:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c6c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c70:	88 60       	ori	r24, 0x08	; 8
 c72:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c76:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c7e:	87 7f       	andi	r24, 0xF7	; 247
 c80:	83 c0       	rjmp	.+262    	; 0xd88 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c82:	81 11       	cpse	r24, r1
 c84:	a6 c0       	rjmp	.+332    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 c86:	10 91 68 01 	lds	r17, 0x0168	; 0x800168 <USB_ControlRequest+0x2>
 c8a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c8c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c8e:	f8 94       	cli
 c90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c94:	87 7f       	andi	r24, 0xF7	; 247
 c96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c9a:	6c dc       	rcall	.-1832   	; 0x574 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 ca0:	80 ff       	sbrs	r24, 0
 ca2:	fc cf       	rjmp	.-8      	; 0xc9c <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ca4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ca8:	80 78       	andi	r24, 0x80	; 128
 caa:	81 2b       	or	r24, r17

				UDADDR = Temp;
 cac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 cb0:	80 68       	ori	r24, 0x80	; 128
 cb2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 cb6:	11 11       	cpse	r17, r1
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <USB_Device_ProcessControlRequest+0x15a>
 cba:	82 e0       	ldi	r24, 0x02	; 2
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <USB_Device_ProcessControlRequest+0x15c>
 cbe:	83 e0       	ldi	r24, 0x03	; 3
 cc0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 cc4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 cc6:	85 c0       	rjmp	.+266    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cc8:	80 58       	subi	r24, 0x80	; 128
 cca:	82 30       	cpi	r24, 0x02	; 2
 ccc:	08 f0       	brcs	.+2      	; 0xcd0 <USB_Device_ProcessControlRequest+0x16c>
 cce:	81 c0       	rjmp	.+258    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cd0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_ControlRequest+0x2>
 cd4:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <USB_ControlRequest+0x3>
 cd8:	8c 3d       	cpi	r24, 0xDC	; 220
 cda:	53 e0       	ldi	r21, 0x03	; 3
 cdc:	95 07       	cpc	r25, r21
 cde:	71 f5       	brne	.+92     	; 0xd3c <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ce0:	83 e0       	ldi	r24, 0x03	; 3
 ce2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ce4:	8a e2       	ldi	r24, 0x2A	; 42
 ce6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ce8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 cea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 cec:	de 01       	movw	r26, r28
 cee:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cf0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 cf2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 cf4:	51 e2       	ldi	r21, 0x21	; 33
 cf6:	e3 2f       	mov	r30, r19
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 cfe:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 d00:	20 ff       	sbrs	r18, 0
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 d04:	e2 95       	swap	r30
 d06:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d08:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 d0a:	ef 70       	andi	r30, 0x0F	; 15
 d0c:	8e 2f       	mov	r24, r30
 d0e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d10:	ea 30       	cpi	r30, 0x0A	; 10
 d12:	10 f0       	brcs	.+4      	; 0xd18 <USB_Device_ProcessControlRequest+0x1b4>
 d14:	c7 96       	adiw	r24, 0x37	; 55
 d16:	01 c0       	rjmp	.+2      	; 0xd1a <USB_Device_ProcessControlRequest+0x1b6>
 d18:	c0 96       	adiw	r24, 0x30	; 48
 d1a:	8d 93       	st	X+, r24
 d1c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d1e:	2f 5f       	subi	r18, 0xFF	; 255
 d20:	24 31       	cpi	r18, 0x14	; 20
 d22:	49 f7       	brne	.-46     	; 0xcf6 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d24:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d2a:	87 7f       	andi	r24, 0xF7	; 247
 d2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d30:	6a e2       	ldi	r22, 0x2A	; 42
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	ce 01       	movw	r24, r28
 d36:	01 96       	adiw	r24, 0x01	; 1
 d38:	26 de       	rcall	.-948    	; 0x986 <Endpoint_Write_Control_Stream_LE>
 d3a:	12 c0       	rjmp	.+36     	; 0xd60 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d3c:	ae 01       	movw	r20, r28
 d3e:	4f 5f       	subi	r20, 0xFF	; 255
 d40:	5f 4f       	sbci	r21, 0xFF	; 255
 d42:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <USB_ControlRequest+0x4>
 d46:	b2 db       	rcall	.-2204   	; 0x4ac <CALLBACK_USB_GetDescriptor>
 d48:	bc 01       	movw	r22, r24
 d4a:	89 2b       	or	r24, r25
 d4c:	09 f4       	brne	.+2      	; 0xd50 <USB_Device_ProcessControlRequest+0x1ec>
 d4e:	41 c0       	rjmp	.+130    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
 d50:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d54:	97 7f       	andi	r25, 0xF7	; 247
 d56:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d5a:	89 81       	ldd	r24, Y+1	; 0x01
 d5c:	9a 81       	ldd	r25, Y+2	; 0x02
 d5e:	a9 de       	rcall	.-686    	; 0xab2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d64:	8b 77       	andi	r24, 0x7B	; 123
 d66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d6a:	33 c0       	rjmp	.+102    	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d6c:	80 38       	cpi	r24, 0x80	; 128
 d6e:	89 f5       	brne	.+98     	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d74:	87 7f       	andi	r24, 0xF7	; 247
 d76:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d7a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d7e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d86:	8e 77       	andi	r24, 0x7E	; 126
 d88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d8c:	f3 db       	rcall	.-2074   	; 0x574 <Endpoint_ClearStatusStage>
 d8e:	21 c0       	rjmp	.+66     	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d90:	81 11       	cpse	r24, r1
 d92:	1f c0       	rjmp	.+62     	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d94:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_ControlRequest+0x2>
 d98:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <USB_ControlRequest+0x3>
 d9c:	99 27       	eor	r25, r25
 d9e:	02 97       	sbiw	r24, 0x02	; 2
 da0:	c4 f4       	brge	.+48     	; 0xdd2 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 da2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 da6:	87 7f       	andi	r24, 0xF7	; 247
 da8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 dac:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_ControlRequest+0x2>
 db0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 db4:	df db       	rcall	.-2114   	; 0x574 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 db6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <USB_Device_ConfigurationNumber>
 dba:	81 11       	cpse	r24, r1
 dbc:	06 c0       	rjmp	.+12     	; 0xdca <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 dbe:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 dc2:	87 fd       	sbrc	r24, 7
 dc4:	02 c0       	rjmp	.+4      	; 0xdca <USB_Device_ProcessControlRequest+0x266>
 dc6:	81 e0       	ldi	r24, 0x01	; 1
 dc8:	01 c0       	rjmp	.+2      	; 0xdcc <USB_Device_ProcessControlRequest+0x268>
 dca:	84 e0       	ldi	r24, 0x04	; 4
 dcc:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 dd0:	2c da       	rcall	.-2984   	; 0x22a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 dd6:	83 ff       	sbrs	r24, 3
 dd8:	0a c0       	rjmp	.+20     	; 0xdee <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 dda:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 dde:	80 62       	ori	r24, 0x20	; 32
 de0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 de4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 de8:	87 7f       	andi	r24, 0xF7	; 247
 dea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 dee:	aa 96       	adiw	r28, 0x2a	; 42
 df0:	0f b6       	in	r0, 0x3f	; 63
 df2:	f8 94       	cli
 df4:	de bf       	out	0x3e, r29	; 62
 df6:	0f be       	out	0x3f, r0	; 63
 df8:	cd bf       	out	0x3d, r28	; 61
 dfa:	df 91       	pop	r29
 dfc:	cf 91       	pop	r28
 dfe:	1f 91       	pop	r17
 e00:	0f 91       	pop	r16
 e02:	08 95       	ret

00000e04 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 e04:	08 95       	ret

00000e06 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e06:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 e08:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_DeviceState>
 e0c:	88 23       	and	r24, r24
 e0e:	59 f0       	breq	.+22     	; 0xe26 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 e10:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 e14:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e16:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 e1e:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 e20:	a1 de       	rcall	.-702    	; 0xb64 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e22:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 e26:	cf 91       	pop	r28
 e28:	08 95       	ret

00000e2a <__tablejump2__>:
 e2a:	ee 0f       	add	r30, r30
 e2c:	ff 1f       	adc	r31, r31
 e2e:	00 24       	eor	r0, r0
 e30:	00 1c       	adc	r0, r0
 e32:	0b be       	out	0x3b, r0	; 59
 e34:	07 90       	elpm	r0, Z+
 e36:	f6 91       	elpm	r31, Z
 e38:	e0 2d       	mov	r30, r0
 e3a:	09 94       	ijmp

00000e3c <_exit>:
 e3c:	f8 94       	cli

00000e3e <__stop_program>:
 e3e:	ff cf       	rjmp	.-2      	; 0xe3e <__stop_program>
