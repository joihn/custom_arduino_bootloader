
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000024b8  0000254c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800120  00800120  0000256c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007318  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002331  00000000  00000000  00009c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003545  00000000  00000000  0000bf61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c54  00000000  00000000  0000f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000293f  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a92  00000000  00000000  00012a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  000174cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c2       	rjmp	.+1056   	; 0x422 <__ctors_end>
       2:	00 00       	nop
       4:	2c c2       	rjmp	.+1112   	; 0x45e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c2       	rjmp	.+1108   	; 0x45e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c2       	rjmp	.+1104   	; 0x45e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c2       	rjmp	.+1100   	; 0x45e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c2       	rjmp	.+1096   	; 0x45e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c2       	rjmp	.+1092   	; 0x45e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c2       	rjmp	.+1088   	; 0x45e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c2       	rjmp	.+1084   	; 0x45e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c2       	rjmp	.+1080   	; 0x45e <__bad_interrupt>
      26:	00 00       	nop
      28:	6b c7       	rjmp	.+3798   	; 0xf00 <__vector_10>
      2a:	00 00       	nop
      2c:	18 c2       	rjmp	.+1072   	; 0x45e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c2       	rjmp	.+1068   	; 0x45e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c2       	rjmp	.+1064   	; 0x45e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c2       	rjmp	.+1060   	; 0x45e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c2       	rjmp	.+1056   	; 0x45e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c2       	rjmp	.+1052   	; 0x45e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c2       	rjmp	.+1048   	; 0x45e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c2       	rjmp	.+1044   	; 0x45e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c2       	rjmp	.+1040   	; 0x45e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c2       	rjmp	.+1036   	; 0x45e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c2       	rjmp	.+1032   	; 0x45e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c2       	rjmp	.+1028   	; 0x45e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c2       	rjmp	.+1024   	; 0x45e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c1       	rjmp	.+1020   	; 0x45e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c1       	rjmp	.+1016   	; 0x45e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c1       	rjmp	.+1012   	; 0x45e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c1       	rjmp	.+1008   	; 0x45e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c1       	rjmp	.+1004   	; 0x45e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c1       	rjmp	.+1000   	; 0x45e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c1       	rjmp	.+996    	; 0x45e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c1       	rjmp	.+992    	; 0x45e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c1       	rjmp	.+988    	; 0x45e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c1       	rjmp	.+984    	; 0x45e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c1       	rjmp	.+980    	; 0x45e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c1       	rjmp	.+976    	; 0x45e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c1       	rjmp	.+972    	; 0x45e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c1       	rjmp	.+968    	; 0x45e <__bad_interrupt>
      96:	00 00       	nop
      98:	44 05       	cpc	r20, r4
      9a:	35 06       	cpc	r3, r21
      9c:	62 05       	cpc	r22, r2
      9e:	6c 05       	cpc	r22, r12
      a0:	97 05       	cpc	r25, r7
      a2:	bf 05       	cpc	r27, r15
      a4:	ca 05       	cpc	r28, r10
      a6:	db 05       	cpc	r29, r11
      a8:	f7 05       	cpc	r31, r7
      aa:	1e 06       	cpc	r1, r30

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4592>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4587>:
     131:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 65 76     Mass Storage Dev
     141:	69 63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d     ice Enumerated..
     151:	0a 00                                               ..

00000153 <__c.4585>:
     153:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     163:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     173:	00                                                  .

00000174 <__c.4583>:
     174:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     184:	20 64 65 76 69 63 65 20 49 6e 71 75 69 72 79 20      device Inquiry 
     194:	64 61 74 61 2e 0d 0a 00                             data....

0000019c <__c.4580>:
     19c:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 50 72     Error setting Pr
     1ac:	65 76 65 6e 74 20 44 65 76 69 63 65 20 52 65 6d     event Device Rem
     1bc:	6f 76 61 6c 20 62 69 74 2e 0d 0a 00                 oval bit....

000001c8 <__c.4578>:
     1c8:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     1d8:	20 64 65 76 69 63 65 20 73 65 6e 73 65 2e 0d 0a      device sense...
     1e8:	00                                                  .

000001e9 <__c.4575>:
     1e9:	45 72 72 6f 72 20 72 65 73 65 74 74 69 6e 67 20     Error resetting 
     1f9:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 69 6e 74     Mass Storage int
     209:	65 72 66 61 63 65 2e 0d 0a 00                       erface....

00000213 <__c.4573>:
     213:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     223:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     233:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

00000241 <__c.4571>:
     241:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     251:	20 6d 61 78 20 4c 55 4e 20 69 6e 64 65 78 2e 0d      max LUN index..
     261:	0a 00                                               ..

00000263 <__c.4568>:
     263:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     273:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     283:	6f 6e 2e 0d 0a 00                                   on....

00000289 <__c.4566>:
     289:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     299:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 61 73 73     Not a Valid Mass
     2a9:	20 53 74 6f 72 61 67 65 20 44 65 76 69 63 65 2e      Storage Device.
     2b9:	0d 0a 00                                            ...

000002bc <__c.4564>:
     2bc:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     2cc:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     2dc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000002e9 <__c.4557>:
     2e9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     2f9:	68 65 64 2e 0d 0a 00                                hed....

00000300 <__c.4552>:
     300:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     310:	0d 0a 00                                            ...

00000313 <__c.4544>:
     313:	0d 0a 00                                            ...

00000316 <__c.4537>:
     316:	20 20 20 20 00                                          .

0000031b <__c.4532>:
     31b:	25 2e 32 58 20 00                                   %.2X .

00000321 <__c.4526>:
     321:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     331:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000033e <__c.4524>:
     33e:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
     34e:	76 69 63 65 20 62 6c 6f 63 6b 2e 0d 0a 00           vice block....

0000035c <__c.4521>:
     35c:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     36c:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

00000377 <__c.4519>:
     377:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     387:	20 64 65 76 69 63 65 20 63 61 70 61 63 69 74 79      device capacity
     397:	2e 0d 0a 00                                         ....

0000039b <__c.4516>:
     39b:	52 65 74 72 69 65 76 69 6e 67 20 43 61 70 61 63     Retrieving Capac
     3ab:	69 74 79 2e 2e 2e 0d 0a 00                          ity......

000003b4 <__c.4513>:
     3b4:	45 72 72 6f 72 20 77 61 69 74 69 6e 67 20 66 6f     Error waiting fo
     3c4:	72 20 64 65 76 69 63 65 20 74 6f 20 62 65 20 72     r device to be r
     3d4:	65 61 64 79 2e 0d 0a 00                             eady....

000003dc <__c.4509>:
     3dc:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     3ec:	61 64 79 2e 2e 2e 0d 0a 00                          ady......

000003f5 <__c.4500>:
     3f5:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     405:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     415:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

00000422 <__ctors_end>:
     422:	11 24       	eor	r1, r1
     424:	1f be       	out	0x3f, r1	; 63
     426:	cf ef       	ldi	r28, 0xFF	; 255
     428:	d0 e2       	ldi	r29, 0x20	; 32
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	cd bf       	out	0x3d, r28	; 61

0000042e <__do_copy_data>:
     42e:	11 e0       	ldi	r17, 0x01	; 1
     430:	a0 e0       	ldi	r26, 0x00	; 0
     432:	b1 e0       	ldi	r27, 0x01	; 1
     434:	e8 eb       	ldi	r30, 0xB8	; 184
     436:	f4 e2       	ldi	r31, 0x24	; 36
     438:	00 e0       	ldi	r16, 0x00	; 0
     43a:	0b bf       	out	0x3b, r16	; 59
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__do_copy_data+0x14>
     43e:	07 90       	elpm	r0, Z+
     440:	0d 92       	st	X+, r0
     442:	a0 32       	cpi	r26, 0x20	; 32
     444:	b1 07       	cpc	r27, r17
     446:	d9 f7       	brne	.-10     	; 0x43e <__do_copy_data+0x10>

00000448 <__do_clear_bss>:
     448:	21 e0       	ldi	r18, 0x01	; 1
     44a:	a0 e2       	ldi	r26, 0x20	; 32
     44c:	b1 e0       	ldi	r27, 0x01	; 1
     44e:	01 c0       	rjmp	.+2      	; 0x452 <.do_clear_bss_start>

00000450 <.do_clear_bss_loop>:
     450:	1d 92       	st	X+, r1

00000452 <.do_clear_bss_start>:
     452:	a2 34       	cpi	r26, 0x42	; 66
     454:	b2 07       	cpc	r27, r18
     456:	e1 f7       	brne	.-8      	; 0x450 <.do_clear_bss_loop>
     458:	69 d1       	rcall	.+722    	; 0x72c <main>
     45a:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <_exit>

0000045e <__bad_interrupt>:
     45e:	d0 cd       	rjmp	.-1120   	; 0x0 <__vectors>

00000460 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     460:	9b b1       	in	r25, 0x0b	; 11
     462:	9f 70       	andi	r25, 0x0F	; 15
     464:	89 2b       	or	r24, r25
     466:	8b b9       	out	0x0b, r24	; 11
     468:	08 95       	ret

0000046a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     46a:	84 b7       	in	r24, 0x34	; 52
     46c:	87 7f       	andi	r24, 0xF7	; 247
     46e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	a8 95       	wdr
     476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     47a:	88 61       	ori	r24, 0x18	; 24
     47c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     480:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     484:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	80 e8       	ldi	r24, 0x80	; 128
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     492:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     496:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     498:	83 e3       	ldi	r24, 0x33	; 51
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     4a0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     4a4:	86 e0       	ldi	r24, 0x06	; 6
     4a6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     4aa:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     4ae:	88 e1       	ldi	r24, 0x18	; 24
     4b0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     4b4:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     4b6:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4b8:	8a b1       	in	r24, 0x0a	; 10
     4ba:	80 6f       	ori	r24, 0xF0	; 240
     4bc:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4be:	8b b1       	in	r24, 0x0b	; 11
     4c0:	8f 70       	andi	r24, 0x0F	; 15
     4c2:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     4c4:	07 d5       	rcall	.+2574   	; 0xed4 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     4c6:	ac e3       	ldi	r26, 0x3C	; 60
     4c8:	b1 e0       	ldi	r27, 0x01	; 1
     4ca:	ee e2       	ldi	r30, 0x2E	; 46
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	11 96       	adiw	r26, 0x01	; 1
     4d0:	fc 93       	st	X, r31
     4d2:	ee 93       	st	-X, r30
					stdout = Stream;
     4d4:	13 96       	adiw	r26, 0x03	; 3
     4d6:	fc 93       	st	X, r31
     4d8:	ee 93       	st	-X, r30
     4da:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     4dc:	8e e0       	ldi	r24, 0x0E	; 14
     4de:	df 01       	movw	r26, r30
     4e0:	1d 92       	st	X+, r1
     4e2:	8a 95       	dec	r24
     4e4:	e9 f7       	brne	.-6      	; 0x4e0 <SetupHardware+0x76>
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	83 83       	std	Z+3, r24	; 0x03
     4ea:	80 e1       	ldi	r24, 0x10	; 16
     4ec:	9f e0       	ldi	r25, 0x0F	; 15
     4ee:	91 87       	std	Z+9, r25	; 0x09
     4f0:	80 87       	std	Z+8, r24	; 0x08
     4f2:	89 e1       	ldi	r24, 0x19	; 25
     4f4:	9f e0       	ldi	r25, 0x0F	; 15
     4f6:	93 87       	std	Z+11, r25	; 0x0b
     4f8:	82 87       	std	Z+10, r24	; 0x0a
     4fa:	08 95       	ret

000004fc <MassStorageHost_Task>:

/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
     4fc:	2f 92       	push	r2
     4fe:	3f 92       	push	r3
     500:	4f 92       	push	r4
     502:	5f 92       	push	r5
     504:	6f 92       	push	r6
     506:	7f 92       	push	r7
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	28 97       	sbiw	r28, 0x08	; 8
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     530:	4d b6       	in	r4, 0x3d	; 61
     532:	5e b6       	in	r5, 0x3e	; 62
/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     534:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_HostState>
     538:	8b 30       	cpi	r24, 0x0B	; 11
     53a:	09 f0       	breq	.+2      	; 0x53e <MassStorageHost_Task+0x42>
     53c:	d9 c0       	rjmp	.+434    	; 0x6f0 <MassStorageHost_Task+0x1f4>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     53e:	80 e2       	ldi	r24, 0x20	; 32
     540:	8f df       	rcall	.-226    	; 0x460 <LEDs_SetAllLEDs>

	puts_P(PSTR("Waiting until ready...\r\n"));
     542:	8c ed       	ldi	r24, 0xDC	; 220
     544:	93 e0       	ldi	r25, 0x03	; 3
     546:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>

	for (;;)
	{
		uint8_t ErrorCode = MS_Host_TestUnitReady(&FlashDisk_MS_Interface, 0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <MS_Host_TestUnitReady>

		if (!(ErrorCode))
     554:	88 23       	and	r24, r24
     556:	29 f0       	breq	.+10     	; 0x562 <MassStorageHost_Task+0x66>
		  break;

		/* Check if an error other than a logical command error (device busy) received */
		if (ErrorCode != MS_ERROR_LOGICAL_CMD_FAILED)
     558:	80 38       	cpi	r24, 0x80	; 128
     55a:	b9 f3       	breq	.-18     	; 0x54a <MassStorageHost_Task+0x4e>
		{
			puts_P(PSTR("Error waiting for device to be ready.\r\n"));
     55c:	84 eb       	ldi	r24, 0xB4	; 180
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	10 c0       	rjmp	.+32     	; 0x582 <MassStorageHost_Task+0x86>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Capacity...\r\n"));
     562:	8b e9       	ldi	r24, 0x9B	; 155
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>

	SCSI_Capacity_t DiskCapacity;
	if (MS_Host_ReadDeviceCapacity(&FlashDisk_MS_Interface, 0, &DiskCapacity))
     56a:	ae 01       	movw	r20, r28
     56c:	4f 5f       	subi	r20, 0xFF	; 255
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <MS_Host_ReadDeviceCapacity>
     57a:	88 23       	and	r24, r24
     57c:	49 f0       	breq	.+18     	; 0x590 <MassStorageHost_Task+0x94>
	{
		puts_P(PSTR("Error retrieving device capacity.\r\n"));
     57e:	87 e7       	ldi	r24, 0x77	; 119
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     586:	80 e9       	ldi	r24, 0x90	; 144
     588:	6b df       	rcall	.-298    	; 0x460 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	b0 d7       	rcall	.+3936   	; 0x14ee <USB_Host_SetDeviceConfiguration>
     58e:	b0 c0       	rjmp	.+352    	; 0x6f0 <MassStorageHost_Task+0x1f4>
		return;
     590:	88 85       	ldd	r24, Y+8	; 0x08
	}

	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     592:	8f 93       	push	r24
     594:	8f 81       	ldd	r24, Y+7	; 0x07
     596:	8f 93       	push	r24
     598:	8e 81       	ldd	r24, Y+6	; 0x06
     59a:	8f 93       	push	r24
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	8f 93       	push	r24
     5a0:	8c 81       	ldd	r24, Y+4	; 0x04
     5a2:	8f 93       	push	r24
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	8f 93       	push	r24
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	8f 93       	push	r24
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	8f 93       	push	r24
     5b0:	8c e5       	ldi	r24, 0x5C	; 92
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>
     5bc:	ed 80       	ldd	r14, Y+5	; 0x05

	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     5be:	fe 80       	ldd	r15, Y+6	; 0x06
     5c0:	0f 81       	ldd	r16, Y+7	; 0x07
     5c2:	18 85       	ldd	r17, Y+8	; 0x08
     5c4:	8d b7       	in	r24, 0x3d	; 61
     5c6:	9e b7       	in	r25, 0x3e	; 62
     5c8:	0a 96       	adiw	r24, 0x0a	; 10
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	9e bf       	out	0x3e, r25	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	8d bf       	out	0x3d, r24	; 61
     5d4:	ad b6       	in	r10, 0x3d	; 61
     5d6:	be b6       	in	r11, 0x3e	; 62
     5d8:	ed b7       	in	r30, 0x3d	; 61
     5da:	fe b7       	in	r31, 0x3e	; 62
     5dc:	ee 19       	sub	r30, r14
     5de:	ff 09       	sbc	r31, r15
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	fe bf       	out	0x3e, r31	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	ed bf       	out	0x3d, r30	; 61
     5ea:	8d b7       	in	r24, 0x3d	; 61
     5ec:	9e b7       	in	r25, 0x3e	; 62
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	1c 01       	movw	r2, r24
     5f2:	6c 01       	movw	r12, r24

	if (MS_Host_ReadDeviceBlocks(&FlashDisk_MS_Interface, 0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer))
     5f4:	01 e0       	ldi	r16, 0x01	; 1
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	a9 01       	movw	r20, r18
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <MS_Host_ReadDeviceBlocks>
     606:	88 23       	and	r24, r24
     608:	31 f0       	breq	.+12     	; 0x616 <MassStorageHost_Task+0x11a>
     60a:	8e e3       	ldi	r24, 0x3E	; 62
	{
		puts_P(PSTR("Error reading device block.\r\n"));
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
     612:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     614:	65 c0       	rjmp	.+202    	; 0x6e0 <MassStorageHost_Task+0x1e4>
     616:	81 e2       	ldi	r24, 0x21	; 33
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
     61e:	c1 2c       	mov	r12, r1

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     620:	d1 2c       	mov	r13, r1
     622:	a6 01       	movw	r20, r12
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	8d 81       	ldd	r24, Y+5	; 0x05
     62a:	9e 81       	ldd	r25, Y+6	; 0x06
     62c:	af 81       	ldd	r26, Y+7	; 0x07
     62e:	b8 85       	ldd	r27, Y+8	; 0x08
     630:	24 e0       	ldi	r18, 0x04	; 4
     632:	b6 95       	lsr	r27
     634:	a7 95       	ror	r26
     636:	97 95       	ror	r25
     638:	87 95       	ror	r24
     63a:	2a 95       	dec	r18
     63c:	d1 f7       	brne	.-12     	; 0x632 <MassStorageHost_Task+0x136>
     63e:	48 17       	cp	r20, r24
     640:	59 07       	cpc	r21, r25
     642:	6a 07       	cpc	r22, r26
     644:	7b 07       	cpc	r23, r27
     646:	08 f0       	brcs	.+2      	; 0x64a <MassStorageHost_Task+0x14e>
     648:	4a c0       	rjmp	.+148    	; 0x6de <MassStorageHost_Task+0x1e2>
     64a:	86 01       	movw	r16, r12
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     64c:	44 e0       	ldi	r20, 0x04	; 4
     64e:	00 0f       	add	r16, r16
     650:	11 1f       	adc	r17, r17
     652:	4a 95       	dec	r20
     654:	e1 f7       	brne	.-8      	; 0x64e <MassStorageHost_Task+0x152>
     656:	02 0d       	add	r16, r2
     658:	13 1d       	adc	r17, r3
     65a:	48 01       	movw	r8, r16
     65c:	90 e1       	ldi	r25, 0x10	; 16
     65e:	89 0e       	add	r8, r25
     660:	91 1c       	adc	r9, r1
     662:	78 01       	movw	r14, r16
     664:	f7 01       	movw	r30, r14

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     666:	81 91       	ld	r24, Z+
     668:	7f 01       	movw	r14, r30
     66a:	1f 92       	push	r1
			printf_P(PSTR("%.2X "), CurrByte);
     66c:	8f 93       	push	r24
     66e:	8b e1       	ldi	r24, 0x1B	; 27
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>
     67a:	0f 90       	pop	r0
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	e8 14       	cp	r14, r8
     684:	f9 04       	cpc	r15, r9
     686:	71 f7       	brne	.-36     	; 0x664 <MassStorageHost_Task+0x168>
     688:	86 e1       	ldi	r24, 0x16	; 22
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
		}

		printf_P(PSTR("    "));
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	f8 01       	movw	r30, r16

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     69a:	e1 90       	ld	r14, Z+
     69c:	8f 01       	movw	r16, r30
     69e:	60 90 3e 01 	lds	r6, 0x013E	; 0x80013e <__iob+0x2>
			putchar(isprint(CurrByte) ? CurrByte : '.');
     6a2:	70 90 3f 01 	lds	r7, 0x013F	; 0x80013f <__iob+0x3>
     6a6:	f1 2c       	mov	r15, r1
     6a8:	c7 01       	movw	r24, r14
     6aa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <isprint>
     6ae:	89 2b       	or	r24, r25
     6b0:	19 f4       	brne	.+6      	; 0x6b8 <MassStorageHost_Task+0x1bc>
     6b2:	3e e2       	ldi	r19, 0x2E	; 46
     6b4:	e3 2e       	mov	r14, r19
     6b6:	f1 2c       	mov	r15, r1
     6b8:	b3 01       	movw	r22, r6
     6ba:	c7 01       	movw	r24, r14
     6bc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <fputc>
     6c0:	80 16       	cp	r8, r16
		}

		printf_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     6c2:	91 06       	cpc	r9, r17
     6c4:	49 f7       	brne	.-46     	; 0x698 <MassStorageHost_Task+0x19c>
     6c6:	83 e1       	ldi	r24, 0x13	; 19
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		printf_P(PSTR("\r\n"));
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>
     6d2:	ff ef       	ldi	r31, 0xFF	; 255
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     6d4:	cf 1a       	sub	r12, r31
     6d6:	df 0a       	sbc	r13, r31
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	a2 cf       	rjmp	.-188    	; 0x622 <MassStorageHost_Task+0x126>
		}

		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     6de:	80 e6       	ldi	r24, 0x60	; 96
     6e0:	bf de       	rcall	.-642    	; 0x460 <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	04 d7       	rcall	.+3592   	; 0x14ee <USB_Host_SetDeviceConfiguration>
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	be be       	out	0x3e, r11	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	ad be       	out	0x3d, r10	; 61
     6f0:	0f b6       	in	r0, 0x3f	; 63
}
     6f2:	f8 94       	cli
     6f4:	5e be       	out	0x3e, r5	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	4d be       	out	0x3d, r4	; 61
     6fa:	28 96       	adiw	r28, 0x08	; 8
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret

0000072c <main>:
     72c:	9e de       	rcall	.-708    	; 0x46a <SetupHardware>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     72e:	85 ef       	ldi	r24, 0xF5	; 245
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     736:	80 e1       	ldi	r24, 0x10	; 16
     738:	93 de       	rcall	.-730    	; 0x460 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		MassStorageHost_Task();
     73a:	78 94       	sei
     73c:	df de       	rcall	.-578    	; 0x4fc <MassStorageHost_Task>
		
		MS_Host_USBTask(&FlashDisk_MS_Interface);
		USB_USBTask();
     73e:	10 d7       	rcall	.+3616   	; 0x1560 <USB_USBTask>
     740:	fd cf       	rjmp	.-6      	; 0x73c <main+0x10>

00000742 <EVENT_USB_Host_DeviceAttached>:
     742:	80 e0       	ldi	r24, 0x00	; 0
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     74a:	80 ea       	ldi	r24, 0xA0	; 160
     74c:	89 ce       	rjmp	.-750    	; 0x460 <LEDs_SetAllLEDs>

0000074e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     74e:	89 ee       	ldi	r24, 0xE9	; 233
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     756:	80 e1       	ldi	r24, 0x10	; 16
     758:	83 ce       	rjmp	.-762    	; 0x460 <LEDs_SetAllLEDs>

0000075a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	c9 53       	subi	r28, 0x39	; 57
     764:	d2 40       	sbci	r29, 0x02	; 2
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     770:	80 ea       	ldi	r24, 0xA0	; 160
     772:	76 de       	rcall	.-788    	; 0x460 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	32 e0       	ldi	r19, 0x02	; 2
     778:	ae 01       	movw	r20, r28
     77a:	4f 5f       	subi	r20, 0xFF	; 255
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	be 01       	movw	r22, r28
     780:	69 5c       	subi	r22, 0xC9	; 201
     782:	7d 4f       	sbci	r23, 0xFD	; 253
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0b d5       	rcall	.+2582   	; 0x119e <USB_Host_GetDeviceConfigDescriptor>
     788:	88 23       	and	r24, r24
     78a:	19 f0       	breq	.+6      	; 0x792 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     78c:	8c eb       	ldi	r24, 0xBC	; 188
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	11 c0       	rjmp	.+34     	; 0x7b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MS_Host_ConfigurePipes(&FlashDisk_MS_Interface,
     792:	c9 5c       	subi	r28, 0xC9	; 201
     794:	dd 4f       	sbci	r29, 0xFD	; 253
     796:	68 81       	ld	r22, Y
     798:	79 81       	ldd	r23, Y+1	; 0x01
     79a:	c7 53       	subi	r28, 0x37	; 55
     79c:	d2 40       	sbci	r29, 0x02	; 2
     79e:	ae 01       	movw	r20, r28
     7a0:	4f 5f       	subi	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 29 0c 	call	0x1852	; 0x1852 <MS_Host_ConfigurePipes>
     7ac:	88 23       	and	r24, r24
     7ae:	39 f0       	breq	.+14     	; 0x7be <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
	                           ConfigDescriptorSize, ConfigDescriptorData) != MS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mass Storage Device.\r\n"));
     7b0:	89 e8       	ldi	r24, 0x89	; 137
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     7b8:	80 e9       	ldi	r24, 0x90	; 144
		return;
     7ba:	52 de       	rcall	.-860    	; 0x460 <LEDs_SetAllLEDs>
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     7bc:	7a c0       	rjmp	.+244    	; 0x8b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x158>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	96 d6       	rcall	.+3372   	; 0x14ee <USB_Host_SetDeviceConfiguration>
     7c2:	88 23       	and	r24, r24
     7c4:	19 f0       	breq	.+6      	; 0x7cc <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     7c6:	83 e6       	ldi	r24, 0x63	; 99
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	f4 cf       	rjmp	.-24     	; 0x7b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint8_t MaxLUNIndex;
	if (MS_Host_GetMaxLUN(&FlashDisk_MS_Interface, &MaxLUNIndex))
     7cc:	be 01       	movw	r22, r28
     7ce:	67 5c       	subi	r22, 0xC7	; 199
     7d0:	7d 4f       	sbci	r23, 0xFD	; 253
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MS_Host_GetMaxLUN>
     7da:	88 23       	and	r24, r24
     7dc:	19 f0       	breq	.+6      	; 0x7e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
	{
		puts_P(PSTR("Error retrieving max LUN index.\r\n"));
     7de:	81 e4       	ldi	r24, 0x41	; 65
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	40 c0       	rjmp	.+128    	; 0x864 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MaxLUNIndex + 1));
     7e4:	c7 5c       	subi	r28, 0xC7	; 199
     7e6:	dd 4f       	sbci	r29, 0xFD	; 253
     7e8:	88 81       	ld	r24, Y
     7ea:	c9 53       	subi	r28, 0x39	; 57
     7ec:	d2 40       	sbci	r29, 0x02	; 2
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	83 e1       	ldi	r24, 0x13	; 19
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	9f 93       	push	r25
     7fc:	8f 93       	push	r24
     7fe:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>

	if (MS_Host_ResetMSInterface(&FlashDisk_MS_Interface))
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <MS_Host_ResetMSInterface>
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	88 23       	and	r24, r24
     814:	19 f0       	breq	.+6      	; 0x81c <EVENT_USB_Host_DeviceEnumerationComplete+0xc2>
	{
		puts_P(PSTR("Error resetting Mass Storage interface.\r\n"));
     816:	89 ee       	ldi	r24, 0xE9	; 233
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	24 c0       	rjmp	.+72     	; 0x864 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Request_Sense_Response_t SenseData;
	if (MS_Host_RequestSense(&FlashDisk_MS_Interface, 0, &SenseData) != 0)
     81c:	ae 01       	movw	r20, r28
     81e:	4b 5d       	subi	r20, 0xDB	; 219
     820:	5d 4f       	sbci	r21, 0xFD	; 253
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <MS_Host_RequestSense>
     82c:	88 23       	and	r24, r24
     82e:	19 f0       	breq	.+6      	; 0x836 <EVENT_USB_Host_DeviceEnumerationComplete+0xdc>
	{
		puts_P(PSTR("Error retrieving device sense.\r\n"));
     830:	88 ec       	ldi	r24, 0xC8	; 200
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	17 c0       	rjmp	.+46     	; 0x864 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	if (MS_Host_PreventAllowMediumRemoval(&FlashDisk_MS_Interface, 0, true))
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MS_Host_PreventAllowMediumRemoval>
     842:	88 23       	and	r24, r24
     844:	19 f0       	breq	.+6      	; 0x84c <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
	{
		puts_P(PSTR("Error setting Prevent Device Removal bit.\r\n"));
     846:	8c e9       	ldi	r24, 0x9C	; 156
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0c c0       	rjmp	.+24     	; 0x864 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Inquiry_Response_t InquiryData;
	if (MS_Host_GetInquiryData(&FlashDisk_MS_Interface, 0, &InquiryData))
     84c:	ae 01       	movw	r20, r28
     84e:	4f 5f       	subi	r20, 0xFF	; 255
     850:	5d 4f       	sbci	r21, 0xFD	; 253
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <MS_Host_GetInquiryData>
     85c:	88 23       	and	r24, r24
     85e:	49 f0       	breq	.+18     	; 0x872 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
	{
		puts_P(PSTR("Error retrieving device Inquiry data.\r\n"));
     860:	84 e7       	ldi	r24, 0x74	; 116
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     868:	80 e9       	ldi	r24, 0x90	; 144
     86a:	fa dd       	rcall	.-1036   	; 0x460 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	3f d6       	rcall	.+3198   	; 0x14ee <USB_Host_SetDeviceConfiguration>
     870:	20 c0       	rjmp	.+64     	; 0x8b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x158>
		return;
     872:	81 e0       	ldi	r24, 0x01	; 1
	}

	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	8c 0f       	add	r24, r28
     878:	9d 1f       	adc	r25, r29
     87a:	40 96       	adiw	r24, 0x10	; 16
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	8c 0f       	add	r24, r28
     886:	9d 1f       	adc	r25, r29
     888:	08 96       	adiw	r24, 0x08	; 8
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	83 e5       	ldi	r24, 0x53	; 83
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>

	puts_P(PSTR("Mass Storage Device Enumerated.\r\n"));
     89a:	81 e3       	ldi	r24, 0x31	; 49
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8a2:	80 e6       	ldi	r24, 0x60	; 96
     8a4:	dd dd       	rcall	.-1094   	; 0x460 <LEDs_SetAllLEDs>
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	c7 5c       	subi	r28, 0xC7	; 199
}
     8b4:	dd 4f       	sbci	r29, 0xFD	; 253
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <EVENT_USB_Host_HostError>:
     8c6:	c8 2f       	mov	r28, r24

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     8c8:	9d d2       	rcall	.+1338   	; 0xe04 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     8ca:	1f 92       	push	r1
     8cc:	cf 93       	push	r28
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     8da:	80 e9       	ldi	r24, 0x90	; 144
     8dc:	c1 dd       	rcall	.-1150   	; 0x460 <LEDs_SetAllLEDs>
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <EVENT_USB_Host_HostError+0x20>

000008e8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     8e8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_HostState>
     8ec:	1f 92       	push	r1
     8ee:	9f 93       	push	r25
     8f0:	1f 92       	push	r1
     8f2:	6f 93       	push	r22
     8f4:	1f 92       	push	r1
     8f6:	8f 93       	push	r24
     8f8:	8c ea       	ldi	r24, 0xAC	; 172
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     904:	8d b7       	in	r24, 0x3d	; 61
     906:	9e b7       	in	r25, 0x3e	; 62
     908:	08 96       	adiw	r24, 0x08	; 8
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	9e bf       	out	0x3e, r25	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	8d bf       	out	0x3d, r24	; 61
     914:	80 e9       	ldi	r24, 0x90	; 144
     916:	a4 cd       	rjmp	.-1208   	; 0x460 <LEDs_SetAllLEDs>

00000918 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     918:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     91c:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     91e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     922:	9d 7f       	andi	r25, 0xFD	; 253
     924:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     928:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     92c:	92 60       	ori	r25, 0x02	; 2
     92e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     932:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     936:	91 fd       	sbrc	r25, 1
     938:	fc cf       	rjmp	.-8      	; 0x932 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     93a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     93e:	91 60       	ori	r25, 0x01	; 1
     940:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     944:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     948:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     94c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     94e:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     952:	2f 7d       	andi	r18, 0xDF	; 223
     954:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     958:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     95c:	2f 7d       	andi	r18, 0xDF	; 223
     95e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     962:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     964:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     968:	35 ff       	sbrs	r19, 5
     96a:	0b c0       	rjmp	.+22     	; 0x982 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     96c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     970:	2f 7d       	andi	r18, 0xDF	; 223
     972:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     976:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     97a:	2d 7f       	andi	r18, 0xFD	; 253
     97c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     980:	08 c0       	rjmp	.+16     	; 0x992 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     982:	ef ec       	ldi	r30, 0xCF	; 207
     984:	f7 e0       	ldi	r31, 0x07	; 7
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <USB_Host_ResetDevice+0x6e>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <USB_Host_ResetDevice+0x74>
     98c:	00 00       	nop
     98e:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     990:	49 f7       	brne	.-46     	; 0x964 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     992:	99 23       	and	r25, r25
     994:	29 f0       	breq	.+10     	; 0x9a0 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     996:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     99a:	90 62       	ori	r25, 0x20	; 32
     99c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     9a0:	81 11       	cpse	r24, r1
     9a2:	05 c0       	rjmp	.+10     	; 0x9ae <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9a4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9a8:	8e 7f       	andi	r24, 0xFE	; 254
     9aa:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     9ae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9b2:	82 60       	ori	r24, 0x02	; 2
     9b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9b8:	08 95       	ret

000009ba <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9ba:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9be:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9c0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9c4:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9c6:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9ca:	3f 7d       	andi	r19, 0xDF	; 223
     9cc:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9d0:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9d4:	3f 7d       	andi	r19, 0xDF	; 223
     9d6:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9da:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9de:	31 60       	ori	r19, 0x01	; 1
     9e0:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9e4:	88 23       	and	r24, r24
     9e6:	39 f1       	breq	.+78     	; 0xa36 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9e8:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9ec:	35 ff       	sbrs	r19, 5
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9f0:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9f4:	3f 7d       	andi	r19, 0xDF	; 223
     9f6:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9fa:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9fc:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <USB_HostState>
     a00:	31 30       	cpi	r19, 0x01	; 1
     a02:	c1 f0       	breq	.+48     	; 0xa34 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a04:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     a08:	34 ff       	sbrs	r19, 4
     a0a:	09 c0       	rjmp	.+18     	; 0xa1e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a0c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     a10:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a14:	8f 7e       	andi	r24, 0xEF	; 239
     a16:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     a1a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     a1c:	0c c0       	rjmp	.+24     	; 0xa36 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a1e:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     a22:	31 ff       	sbrs	r19, 1
     a24:	df cf       	rjmp	.-66     	; 0x9e4 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a26:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a2a:	8d 7f       	andi	r24, 0xFD	; 253
     a2c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     a30:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     a34:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     a36:	21 11       	cpse	r18, r1
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a3a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     a3e:	2e 7f       	andi	r18, 0xFE	; 254
     a40:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a44:	99 23       	and	r25, r25
     a46:	29 f0       	breq	.+10     	; 0xa52 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a48:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a4c:	90 62       	ori	r25, 0x20	; 32
     a4e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a52:	08 95       	ret

00000a54 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a54:	ef 92       	push	r14
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	28 97       	sbiw	r28, 0x08	; 8
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     a6e:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <USB_HostState>
     a72:	8e 2f       	mov	r24, r30
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	8a 30       	cpi	r24, 0x0A	; 10
     a78:	91 05       	cpc	r25, r1
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <USB_Host_ProcessNextHostState+0x2a>
     a7c:	f6 c0       	rjmp	.+492    	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
     a7e:	fc 01       	movw	r30, r24
     a80:	e4 5b       	subi	r30, 0xB4	; 180
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a88:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <WaitMSRemaining.2935>
     a8c:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <WaitMSRemaining.2935+0x1>
     a90:	01 15       	cp	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	09 f4       	brne	.+2      	; 0xa98 <USB_Host_ProcessNextHostState+0x44>
     a96:	e9 c0       	rjmp	.+466    	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	8f df       	rcall	.-226    	; 0x9ba <USB_Host_WaitMS>
     a9c:	88 23       	and	r24, r24
     a9e:	31 f0       	breq	.+12     	; 0xaac <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     aa0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     aa4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     aa8:	91 e0       	ldi	r25, 0x01	; 1
					break;
     aaa:	d1 c0       	rjmp	.+418    	; 0xc4e <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     aac:	01 50       	subi	r16, 0x01	; 1
     aae:	11 09       	sbc	r17, r1
     ab0:	10 93 22 01 	sts	0x0122, r17	; 0x800122 <WaitMSRemaining.2935+0x1>
     ab4:	00 93 21 01 	sts	0x0121, r16	; 0x800121 <WaitMSRemaining.2935>
     ab8:	01 2b       	or	r16, r17
     aba:	09 f0       	breq	.+2      	; 0xabe <USB_Host_ProcessNextHostState+0x6a>
     abc:	d6 c0       	rjmp	.+428    	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     abe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     ac4:	88 ee       	ldi	r24, 0xE8	; 232
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <WaitMSRemaining.2935+0x1>
     acc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_HostState>
			break;
     ad6:	c9 c0       	rjmp	.+402    	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     ad8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <WaitMSRemaining.2935>
     adc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <WaitMSRemaining.2935+0x1>
     ae0:	9c 01       	movw	r18, r24
     ae2:	21 50       	subi	r18, 0x01	; 1
     ae4:	31 09       	sbc	r19, r1
     ae6:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <WaitMSRemaining.2935+0x1>
     aea:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <WaitMSRemaining.2935>
     aee:	89 2b       	or	r24, r25
     af0:	39 f0       	breq	.+14     	; 0xb00 <USB_Host_ProcessNextHostState+0xac>
     af2:	8f ec       	ldi	r24, 0xCF	; 207
     af4:	97 e0       	ldi	r25, 0x07	; 7
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <USB_Host_ProcessNextHostState+0xa2>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <USB_Host_ProcessNextHostState+0xa8>
     afc:	00 00       	nop
     afe:	b5 c0       	rjmp	.+362    	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b00:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b06:	80 61       	ori	r24, 0x10	; 16
     b08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b0c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b10:	8b 7f       	andi	r24, 0xFB	; 251
     b12:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     b16:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b1a:	80 61       	ori	r24, 0x10	; 16
     b1c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b20:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b24:	82 60       	ori	r24, 0x02	; 2
     b26:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	d2 cf       	rjmp	.-92     	; 0xad2 <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b2e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b32:	80 ff       	sbrs	r24, 0
     b34:	9a c0       	rjmp	.+308    	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b36:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b40:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b44:	8d 7f       	andi	r24, 0xFD	; 253
     b46:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b4a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b4e:	8d 7f       	andi	r24, 0xFD	; 253
     b50:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b54:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b5e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b68:	e8 d0       	rcall	.+464    	; 0xd3a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b6a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_HostState>
     b6e:	84 e6       	ldi	r24, 0x64	; 100
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <WaitMSRemaining.2935+0x1>
     b76:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <WaitMSRemaining.2935>
     b7a:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b7c:	5c c0       	rjmp	.+184    	; 0xc36 <USB_Host_ProcessNextHostState+0x1e2>
     b7e:	cc de       	rcall	.-616    	; 0x918 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b80:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_HostState>
     b84:	88 ec       	ldi	r24, 0xC8	; 200
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <WaitMSRemaining.2935+0x1>
     b8c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <WaitMSRemaining.2935>
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	51 c0       	rjmp	.+162    	; 0xc36 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     b94:	e1 2c       	mov	r14, r1
     b96:	00 e4       	ldi	r16, 0x40	; 64
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	6f d0       	rcall	.+222    	; 0xc82 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ba4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     ba8:	87 fd       	sbrc	r24, 7
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	4e c0       	rjmp	.+156    	; 0xc4e <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	8e cf       	rjmp	.-228    	; 0xad2 <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	ef e0       	ldi	r30, 0x0F	; 15
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	a5 e2       	ldi	r26, 0x25	; 37
     bbe:	b1 e0       	ldi	r27, 0x01	; 1
     bc0:	01 90       	ld	r0, Z+
     bc2:	0d 92       	st	X+, r0
     bc4:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <USB_Host_ProcessNextHostState+0x16c>
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	9a d3       	rcall	.+1844   	; 0x1302 <USB_Host_SendControlRequest>
     bce:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     bd0:	3d c0       	rjmp	.+122    	; 0xc4c <USB_Host_ProcessNextHostState+0x1f8>
     bd2:	88 85       	ldd	r24, Y+8	; 0x08
     bd4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     bd8:	9f de       	rcall	.-706    	; 0x918 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     bda:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_HostState>
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <WaitMSRemaining.2935+0x1>
     be6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <WaitMSRemaining.2935>
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	24 c0       	rjmp	.+72     	; 0xc36 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     bee:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <USB_Host_ControlPipeSize>
     bf2:	10 e0       	ldi	r17, 0x00	; 0
     bf4:	e1 2c       	mov	r14, r1
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	41 d0       	rcall	.+130    	; 0xc82 <Pipe_ConfigurePipe>
     c00:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c04:	87 ff       	sbrs	r24, 7
     c06:	d2 cf       	rjmp	.-92     	; 0xbac <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	e7 e1       	ldi	r30, 0x17	; 23
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	a5 e2       	ldi	r26, 0x25	; 37
     c10:	b1 e0       	ldi	r27, 0x01	; 1
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c18:	e1 f7       	brne	.-8      	; 0xc12 <USB_Host_ProcessNextHostState+0x1be>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	71 d3       	rcall	.+1762   	; 0x1302 <USB_Host_SendControlRequest>
     c20:	81 11       	cpse	r24, r1
     c22:	14 c0       	rjmp	.+40     	; 0xc4c <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c24:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_HostState>
     c28:	84 e6       	ldi	r24, 0x64	; 100
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <WaitMSRemaining.2935+0x1>
     c30:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <WaitMSRemaining.2935>
     c34:	89 e0       	ldi	r24, 0x09	; 9
     c36:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     c3a:	17 c0       	rjmp	.+46     	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     c42:	8a e0       	ldi	r24, 0x0A	; 10
     c44:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     c48:	88 dd       	rcall	.-1264   	; 0x75a <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c52:	21 30       	cpi	r18, 0x01	; 1
     c54:	51 f0       	breq	.+20     	; 0xc6a <USB_Host_ProcessNextHostState+0x216>
     c56:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c58:	89 2f       	mov	r24, r25
     c5a:	46 de       	rcall	.-884    	; 0x8e8 <EVENT_USB_Host_DeviceEnumerationFailed>
     c5c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c60:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c62:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     c66:	73 dd       	rcall	.-1306   	; 0x74e <EVENT_USB_Host_DeviceUnattached>
     c68:	e5 d0       	rcall	.+458    	; 0xe34 <USB_ResetInterface>
	}
}
     c6a:	28 96       	adiw	r28, 0x08	; 8
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     c82:	ef 92       	push	r14
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     c88:	2f 70       	andi	r18, 0x0F	; 15
     c8a:	42 2b       	or	r20, r18
     c8c:	90 e4       	ldi	r25, 0x40	; 64
     c8e:	69 9f       	mul	r22, r25
     c90:	b0 01       	movw	r22, r0
     c92:	11 24       	eor	r1, r1
     c94:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c96:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c98:	2e 2d       	mov	r18, r14
     c9a:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c9c:	37 30       	cpi	r19, 0x07	; 7
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <Pipe_ConfigurePipe+0x20>
     ca0:	45 c0       	rjmp	.+138    	; 0xd2c <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ca2:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     ca6:	38 13       	cpse	r19, r24
     ca8:	13 c0       	rjmp	.+38     	; 0xcd0 <Pipe_ConfigurePipe+0x4e>
     caa:	48 e0       	ldi	r20, 0x08	; 8
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     cb0:	40 17       	cp	r20, r16
     cb2:	51 07       	cpc	r21, r17
     cb4:	38 f0       	brcs	.+14     	; 0xcc4 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     cb6:	92 95       	swap	r25
     cb8:	90 7f       	andi	r25, 0xF0	; 240
     cba:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     cbc:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     cbe:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e c0       	rjmp	.+28     	; 0xce0 <Pipe_ConfigurePipe+0x5e>
     cc4:	95 30       	cpi	r25, 0x05	; 5
     cc6:	b9 f3       	breq	.-18     	; 0xcb6 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     cc8:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	f0 cf       	rjmp	.-32     	; 0xcb0 <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     cd0:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     cd4:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     cd8:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     cdc:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ce0:	91 fd       	sbrc	r25, 1
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     ce4:	3f 5f       	subi	r19, 0xFF	; 255
     ce6:	da cf       	rjmp	.-76     	; 0xc9c <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ce8:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cec:	4e 7f       	andi	r20, 0xFE	; 254
     cee:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     cf2:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cf6:	4d 7f       	andi	r20, 0xFD	; 253
     cf8:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     cfc:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d00:	41 60       	ori	r20, 0x01	; 1
     d02:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     d06:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     d0a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     d0e:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     d12:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d16:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d1a:	90 62       	ori	r25, 0x20	; 32
     d1c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d20:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     d24:	97 fd       	sbrc	r25, 7
     d26:	de cf       	rjmp	.-68     	; 0xce4 <Pipe_ConfigurePipe+0x62>
		  return false;		
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d2c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     d30:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d3a:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d44:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     d48:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     d4c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d50:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d54:	9e 7f       	andi	r25, 0xFE	; 254
     d56:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	87 30       	cpi	r24, 0x07	; 7
     d5e:	81 f7       	brne	.-32     	; 0xd40 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     d60:	08 95       	ret

00000d62 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     d62:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d66:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d68:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d6a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d6e:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     d72:	27 ff       	sbrs	r18, 7
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     d76:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d7a:	42 2f       	mov	r20, r18
     d7c:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d7e:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     d82:	20 73       	andi	r18, 0x30	; 48
     d84:	20 31       	cpi	r18, 0x10	; 16
     d86:	11 f0       	breq	.+4      	; 0xd8c <Pipe_IsEndpointBound+0x2a>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <Pipe_IsEndpointBound+0x2c>
     d8c:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     d8e:	24 2b       	or	r18, r20
     d90:	82 17       	cp	r24, r18
     d92:	39 f0       	breq	.+14     	; 0xda2 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	97 30       	cpi	r25, 0x07	; 7
     d98:	41 f7       	brne	.-48     	; 0xd6a <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d9a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     da2:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     da4:	08 95       	ret

00000da6 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     da6:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     daa:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     dae:	89 e8       	ldi	r24, 0x89	; 137
     db0:	93 e1       	ldi	r25, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     db2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     db6:	20 73       	andi	r18, 0x30	; 48
     db8:	20 31       	cpi	r18, 0x10	; 16
     dba:	29 f4       	brne	.+10     	; 0xdc6 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     dbc:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     dc0:	20 ff       	sbrs	r18, 0
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <Pipe_WaitUntilReady+0x28>
     dc4:	19 c0       	rjmp	.+50     	; 0xdf8 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     dc6:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     dca:	22 fd       	sbrc	r18, 2
     dcc:	15 c0       	rjmp	.+42     	; 0xdf8 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     dce:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     dd2:	21 fd       	sbrc	r18, 1
     dd4:	13 c0       	rjmp	.+38     	; 0xdfc <Pipe_WaitUntilReady+0x56>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     dd6:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <USB_HostState>
     dda:	21 30       	cpi	r18, 0x01	; 1
     ddc:	89 f0       	breq	.+34     	; 0xe00 <Pipe_WaitUntilReady+0x5a>
     dde:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     de2:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     de6:	42 17       	cp	r20, r18
     de8:	53 07       	cpc	r21, r19
     dea:	19 f3       	breq	.-58     	; 0xdb2 <Pipe_WaitUntilReady+0xc>
     dec:	01 97       	sbiw	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     dee:	11 f0       	breq	.+4      	; 0xdf4 <Pipe_WaitUntilReady+0x4e>
     df0:	a9 01       	movw	r20, r18
     df2:	df cf       	rjmp	.-66     	; 0xdb2 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     e00:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     e02:	08 95       	ret

00000e04 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     e04:	70 d0       	rcall	.+224    	; 0xee6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e06:	77 d0       	rcall	.+238    	; 0xef6 <USB_INT_ClearAllInterrupts>
     e08:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	80 83       	st	Z, r24
     e12:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 77       	andi	r24, 0x7F	; 127
     e1a:	80 83       	st	Z, r24
     e1c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e1e:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	8c 91       	ld	r24, X
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	8c 93       	st	X, r24
     e28:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     e2a:	8f 7e       	andi	r24, 0xEF	; 239
     e2c:	80 83       	st	Z, r24
     e2e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     e32:	08 95       	ret

00000e34 <USB_ResetInterface>:
     e34:	58 d0       	rcall	.+176    	; 0xee6 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     e36:	5f d0       	rcall	.+190    	; 0xef6 <USB_INT_ClearAllInterrupts>
     e38:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e3c:	8f 77       	andi	r24, 0x7F	; 127
     e3e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e42:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e4c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e50:	8f 7d       	andi	r24, 0xDF	; 223
     e52:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e56:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e5a:	8f 77       	andi	r24, 0x7F	; 127
     e5c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e60:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e62:	89 bd       	out	0x29, r24	; 41
     e64:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e66:	89 bd       	out	0x29, r24	; 41
     e68:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     e6a:	00 fe       	sbrs	r0, 0
     e6c:	fd cf       	rjmp	.-6      	; 0xe68 <USB_ResetInterface+0x34>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e70:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_HostState>
     e74:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     e78:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e7a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <USB_Host_ControlPipeSize>
     e7e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e88:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e92:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e96:	84 60       	ori	r24, 0x04	; 4
     e98:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e9c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     ea0:	8f 7e       	andi	r24, 0xEF	; 239
     ea2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     ea6:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     ea8:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     eaa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     eb4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     eb8:	84 60       	ori	r24, 0x04	; 4
     eba:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ebe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ec2:	8e 7f       	andi	r24, 0xFE	; 254
     ec4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     ec8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ecc:	80 61       	ori	r24, 0x10	; 16
     ece:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ed2:	08 95       	ret

00000ed4 <USB_Init>:
     ed4:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_IsInitialized>

	USB_ResetInterface();
     ee4:	a7 cf       	rjmp	.-178    	; 0xe34 <USB_ResetInterface>

00000ee6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ee6:	e8 ed       	ldi	r30, 0xD8	; 216
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8c 7f       	andi	r24, 0xFC	; 252
     eee:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ef0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ef4:	08 95       	ret

00000ef6 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ef6:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     efa:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     efe:	08 95       	ret

00000f00 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	0b b6       	in	r0, 0x3b	; 59
     f0c:	0f 92       	push	r0
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f26:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f2a:	85 ff       	sbrs	r24, 5
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f2e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f32:	85 ff       	sbrs	r24, 5
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f36:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f3a:	8f 7d       	andi	r24, 0xDF	; 223
     f3c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f40:	b9 d1       	rcall	.+882    	; 0x12b4 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f42:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f46:	81 ff       	sbrs	r24, 1
     f48:	15 c0       	rjmp	.+42     	; 0xf74 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f4a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f4e:	81 ff       	sbrs	r24, 1
     f50:	11 c0       	rjmp	.+34     	; 0xf74 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f52:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f56:	8d 7f       	andi	r24, 0xFD	; 253
     f58:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f5c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f60:	8e 7f       	andi	r24, 0xFE	; 254
     f62:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f66:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f6a:	8d 7f       	andi	r24, 0xFD	; 253
     f6c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     f70:	ee db       	rcall	.-2084   	; 0x74e <EVENT_USB_Host_DeviceUnattached>
     f72:	60 df       	rcall	.-320    	; 0xe34 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     f74:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f78:	81 ff       	sbrs	r24, 1
     f7a:	15 c0       	rjmp	.+42     	; 0xfa6 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     f7c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     f80:	81 ff       	sbrs	r24, 1
     f82:	11 c0       	rjmp	.+34     	; 0xfa6 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f84:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f88:	8d 7f       	andi	r24, 0xFD	; 253
     f8a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     f8e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f90:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	94 dc       	rcall	.-1752   	; 0x8c6 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f9e:	d7 db       	rcall	.-2130   	; 0x74e <EVENT_USB_Host_DeviceUnattached>
     fa0:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     fa2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_HostState>
     fa6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     faa:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     fac:	17 c0       	rjmp	.+46     	; 0xfdc <__vector_10+0xdc>
     fae:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     fb2:	80 ff       	sbrs	r24, 0
     fb4:	13 c0       	rjmp	.+38     	; 0xfdc <__vector_10+0xdc>
     fb6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     fba:	8e 7f       	andi	r24, 0xFE	; 254
     fbc:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     fc0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     fca:	bb db       	rcall	.-2186   	; 0x742 <EVENT_USB_Host_DeviceAttached>
     fcc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     fd0:	82 60       	ori	r24, 0x02	; 2
     fd2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     fd6:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     fd8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_HostState>
     fdc:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     fe0:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fe4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     fe8:	82 ff       	sbrs	r24, 2
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fec:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ff0:	8b 7f       	andi	r24, 0xFB	; 251
     ff2:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	76 dc       	rcall	.-1812   	; 0x8e8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     ffc:	a8 db       	rcall	.-2224   	; 0x74e <EVENT_USB_Host_DeviceUnattached>
     ffe:	1a df       	rcall	.-460    	; 0xe34 <USB_ResetInterface>

		USB_ResetInterface();
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <Pipe_Write_Stream_LE>:
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	8b 01       	movw	r16, r22
    103a:	7a 01       	movw	r14, r20
    103c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1040:	8f 7c       	andi	r24, 0xCF	; 207
    1042:	80 62       	ori	r24, 0x20	; 32
    1044:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1048:	ae de       	rcall	.-676    	; 0xda6 <Pipe_WaitUntilReady>
    104a:	81 11       	cpse	r24, r1
    104c:	32 c0       	rjmp	.+100    	; 0x10b2 <Pipe_Write_Stream_LE+0x8c>
    104e:	e1 14       	cp	r14, r1
    1050:	f1 04       	cpc	r15, r1
    1052:	39 f0       	breq	.+14     	; 0x1062 <Pipe_Write_Stream_LE+0x3c>
    1054:	f7 01       	movw	r30, r14
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	08 1b       	sub	r16, r24
    105c:	19 0b       	sbc	r17, r25
    105e:	c8 0f       	add	r28, r24
    1060:	d9 1f       	adc	r29, r25
    1062:	c1 2c       	mov	r12, r1
    1064:	d1 2c       	mov	r13, r1
    1066:	01 15       	cp	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	11 f1       	breq	.+68     	; 0x10b0 <Pipe_Write_Stream_LE+0x8a>
    106c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1070:	85 fd       	sbrc	r24, 5
    1072:	15 c0       	rjmp	.+42     	; 0x109e <Pipe_Write_Stream_LE+0x78>
    1074:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1078:	8b 77       	andi	r24, 0x7B	; 123
    107a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    107e:	e1 14       	cp	r14, r1
    1080:	f1 04       	cpc	r15, r1
    1082:	49 f0       	breq	.+18     	; 0x1096 <Pipe_Write_Stream_LE+0x70>
    1084:	f7 01       	movw	r30, r14
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	c8 0e       	add	r12, r24
    108c:	d9 1e       	adc	r13, r25
    108e:	d1 82       	std	Z+1, r13	; 0x01
    1090:	c0 82       	st	Z, r12
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	0e c0       	rjmp	.+28     	; 0x10b2 <Pipe_Write_Stream_LE+0x8c>
    1096:	87 de       	rcall	.-754    	; 0xda6 <Pipe_WaitUntilReady>
    1098:	88 23       	and	r24, r24
    109a:	29 f3       	breq	.-54     	; 0x1066 <Pipe_Write_Stream_LE+0x40>
    109c:	0a c0       	rjmp	.+20     	; 0x10b2 <Pipe_Write_Stream_LE+0x8c>
    109e:	89 91       	ld	r24, Y+
    10a0:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    10a4:	01 50       	subi	r16, 0x01	; 1
    10a6:	11 09       	sbc	r17, r1
    10a8:	ff ef       	ldi	r31, 0xFF	; 255
    10aa:	cf 1a       	sub	r12, r31
    10ac:	df 0a       	sbc	r13, r31
    10ae:	db cf       	rjmp	.-74     	; 0x1066 <Pipe_Write_Stream_LE+0x40>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	08 95       	ret

000010c4 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
    10d6:	8b 01       	movw	r16, r22
    10d8:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10da:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10de:	8f 7c       	andi	r24, 0xCF	; 207
    10e0:	80 61       	ori	r24, 0x10	; 16
    10e2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10e6:	5f de       	rcall	.-834    	; 0xda6 <Pipe_WaitUntilReady>
    10e8:	81 11       	cpse	r24, r1
    10ea:	32 c0       	rjmp	.+100    	; 0x1150 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    10ec:	e1 14       	cp	r14, r1
    10ee:	f1 04       	cpc	r15, r1
    10f0:	39 f0       	breq	.+14     	; 0x1100 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
    10f2:	f7 01       	movw	r30, r14
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	08 1b       	sub	r16, r24
    10fa:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10fc:	c8 0f       	add	r28, r24
    10fe:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1100:	c1 2c       	mov	r12, r1
    1102:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1104:	01 15       	cp	r16, r1
    1106:	11 05       	cpc	r17, r1
    1108:	11 f1       	breq	.+68     	; 0x114e <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    110a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    110e:	85 fd       	sbrc	r24, 5
    1110:	15 c0       	rjmp	.+42     	; 0x113c <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1112:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1116:	8e 77       	andi	r24, 0x7E	; 126
    1118:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    111c:	e1 14       	cp	r14, r1
    111e:	f1 04       	cpc	r15, r1
    1120:	49 f0       	breq	.+18     	; 0x1134 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1122:	f7 01       	movw	r30, r14
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	c8 0e       	add	r12, r24
    112a:	d9 1e       	adc	r13, r25
    112c:	d1 82       	std	Z+1, r13	; 0x01
    112e:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    1130:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <Pipe_Read_Stream_LE+0x8c>
    1134:	38 de       	rcall	.-912    	; 0xda6 <Pipe_WaitUntilReady>
    1136:	88 23       	and	r24, r24
    1138:	29 f3       	breq	.-54     	; 0x1104 <Pipe_Read_Stream_LE+0x40>
    113a:	0a c0       	rjmp	.+20     	; 0x1150 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    113c:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1140:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1142:	01 50       	subi	r16, 0x01	; 1
    1144:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1146:	ff ef       	ldi	r31, 0xFF	; 255
    1148:	cf 1a       	sub	r12, r31
    114a:	df 0a       	sbc	r13, r31
    114c:	db cf       	rjmp	.-74     	; 0x1104 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    114e:	80 e0       	ldi	r24, 0x00	; 0
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	dc 01       	movw	r26, r24
    1168:	eb 01       	movw	r28, r22
    116a:	e8 81       	ld	r30, Y
    116c:	f9 81       	ldd	r31, Y+1	; 0x01
    116e:	20 81       	ld	r18, Z
    1170:	8d 91       	ld	r24, X+
    1172:	9c 91       	ld	r25, X
    1174:	11 97       	sbiw	r26, 0x01	; 1
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	82 17       	cp	r24, r18
    117a:	93 07       	cpc	r25, r19
    117c:	08 f4       	brcc	.+2      	; 0x1180 <USB_GetNextDescriptor+0x1e>
    117e:	9c 01       	movw	r18, r24
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	eb 01       	movw	r28, r22
    1186:	f9 83       	std	Y+1, r31	; 0x01
    1188:	e8 83       	st	Y, r30
    118a:	8d 91       	ld	r24, X+
    118c:	9c 91       	ld	r25, X
    118e:	11 97       	sbiw	r26, 0x01	; 1
    1190:	82 1b       	sub	r24, r18
    1192:	93 0b       	sbc	r25, r19
    1194:	8d 93       	st	X+, r24
    1196:	9c 93       	st	X, r25
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <USB_Host_GetDeviceConfigDescriptor>:
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	29 97       	sbiw	r28, 0x09	; 9
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	6b 01       	movw	r12, r22
    11c0:	8a 01       	movw	r16, r20
    11c2:	79 01       	movw	r14, r18
    11c4:	90 e8       	ldi	r25, 0x80	; 128
    11c6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <USB_ControlRequest>
    11ca:	96 e0       	ldi	r25, 0x06	; 6
    11cc:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <USB_ControlRequest+0x1>
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	92 60       	ori	r25, 0x02	; 2
    11d6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <USB_ControlRequest+0x3>
    11da:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <USB_ControlRequest+0x2>
    11de:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_ControlRequest+0x5>
    11e2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_ControlRequest+0x4>
    11e6:	89 e0       	ldi	r24, 0x09	; 9
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x7>
    11ee:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x6>
    11f2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	83 d0       	rcall	.+262    	; 0x1302 <USB_Host_SendControlRequest>
    11fc:	81 11       	cpse	r24, r1
    11fe:	19 c0       	rjmp	.+50     	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	f6 01       	movw	r30, r12
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	e8 16       	cp	r14, r24
    120c:	f9 06       	cpc	r15, r25
    120e:	70 f0       	brcs	.+28     	; 0x122c <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1210:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x7>
    1214:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x6>
    1218:	c8 01       	movw	r24, r16
    121a:	73 d0       	rcall	.+230    	; 0x1302 <USB_Host_SendControlRequest>
    121c:	81 11       	cpse	r24, r1
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1220:	f8 01       	movw	r30, r16
    1222:	81 81       	ldd	r24, Z+1	; 0x01
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	21 f4       	brne	.+8      	; 0x1230 <USB_Host_GetDeviceConfigDescriptor+0x92>
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1230:	86 e0       	ldi	r24, 0x06	; 6
    1232:	29 96       	adiw	r28, 0x09	; 9
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	08 95       	ret

00001250 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	8c 01       	movw	r16, r24
    1266:	eb 01       	movw	r28, r22
    1268:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    126a:	f8 01       	movw	r30, r16
    126c:	e0 80       	ld	r14, Z
    126e:	f1 80       	ldd	r15, Z+1	; 0x01
    1270:	e1 14       	cp	r14, r1
    1272:	f1 04       	cpc	r15, r1
    1274:	99 f0       	breq	.+38     	; 0x129c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1276:	a8 80       	ld	r10, Y
    1278:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    127a:	be 01       	movw	r22, r28
    127c:	c8 01       	movw	r24, r16
    127e:	71 df       	rcall	.-286    	; 0x1162 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1280:	88 81       	ld	r24, Y
    1282:	99 81       	ldd	r25, Y+1	; 0x01
    1284:	f6 01       	movw	r30, r12
    1286:	09 95       	icall
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	79 f3       	breq	.-34     	; 0x126a <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	39 f4       	brne	.+14     	; 0x129e <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    1290:	b9 82       	std	Y+1, r11	; 0x01
    1292:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    1294:	f8 01       	movw	r30, r16
    1296:	f1 82       	std	Z+1, r15	; 0x01
    1298:	e0 82       	st	Z, r14
    129a:	01 c0       	rjmp	.+2      	; 0x129e <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    129c:	82 e0       	ldi	r24, 0x02	; 2
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	08 95       	ret

000012b4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    12b4:	08 95       	ret

000012b6 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(FeatureStatus);
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	18 2f       	mov	r17, r24
    12be:	c9 ee       	ldi	r28, 0xE9	; 233
    12c0:	d3 e0       	ldi	r29, 0x03	; 3
    12c2:	11 11       	cpse	r17, r1
    12c4:	0c c0       	rjmp	.+24     	; 0x12de <USB_Host_WaitForIOS+0x28>
    12c6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12ca:	83 fd       	sbrc	r24, 3
    12cc:	15 c0       	rjmp	.+42     	; 0x12f8 <USB_Host_WaitForIOS+0x42>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	74 db       	rcall	.-2328   	; 0x9ba <USB_Host_WaitMS>
    12d2:	81 11       	cpse	r24, r1
    12d4:	12 c0       	rjmp	.+36     	; 0x12fa <USB_Host_WaitForIOS+0x44>
    12d6:	21 97       	sbiw	r28, 0x01	; 1
    12d8:	a1 f7       	brne	.-24     	; 0x12c2 <USB_Host_WaitForIOS+0xc>
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	0e c0       	rjmp	.+28     	; 0x12fa <USB_Host_WaitForIOS+0x44>
    12de:	11 30       	cpi	r17, 0x01	; 1
    12e0:	29 f4       	brne	.+10     	; 0x12ec <USB_Host_WaitForIOS+0x36>
    12e2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12e6:	80 ff       	sbrs	r24, 0
    12e8:	f2 cf       	rjmp	.-28     	; 0x12ce <USB_Host_WaitForIOS+0x18>
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <USB_Host_WaitForIOS+0x42>
    12ec:	12 30       	cpi	r17, 0x02	; 2
    12ee:	79 f7       	brne	.-34     	; 0x12ce <USB_Host_WaitForIOS+0x18>
    12f0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12f4:	82 ff       	sbrs	r24, 2
    12f6:	eb cf       	rjmp	.-42     	; 0x12ce <USB_Host_WaitForIOS+0x18>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	08 95       	ret

00001302 <USB_Host_SendControlRequest>:
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	8c 01       	movw	r16, r24
    130e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	f8 2e       	mov	r15, r24
    1316:	c0 91 2b 01 	lds	r28, 0x012B	; 0x80012b <USB_ControlRequest+0x6>
    131a:	d0 91 2c 01 	lds	r29, 0x012C	; 0x80012c <USB_ControlRequest+0x7>
    131e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1322:	81 60       	ori	r24, 0x01	; 1
    1324:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	47 db       	rcall	.-2418   	; 0x9ba <USB_Host_WaitMS>
    132c:	81 11       	cpse	r24, r1
    132e:	c8 c0       	rjmp	.+400    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    1330:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1334:	8f 7c       	andi	r24, 0xCF	; 207
    1336:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    133a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
    133e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1342:	8f 7e       	andi	r24, 0xEF	; 239
    1344:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1348:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    134c:	8f 7b       	andi	r24, 0xBF	; 191
    134e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1352:	e5 e2       	ldi	r30, 0x25	; 37
    1354:	f1 e0       	ldi	r31, 0x01	; 1
    1356:	8d e2       	ldi	r24, 0x2D	; 45
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	21 91       	ld	r18, Z+
    135c:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1360:	8e 17       	cp	r24, r30
    1362:	9f 07       	cpc	r25, r31
    1364:	d1 f7       	brne	.-12     	; 0x135a <USB_Host_SendControlRequest+0x58>
    1366:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    136a:	87 77       	andi	r24, 0x77	; 119
    136c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	a1 df       	rcall	.-190    	; 0x12b6 <USB_Host_WaitForIOS>
    1374:	81 11       	cpse	r24, r1
    1376:	a4 c0       	rjmp	.+328    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    1378:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    137c:	80 64       	ori	r24, 0x40	; 64
    137e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	1a db       	rcall	.-2508   	; 0x9ba <USB_Host_WaitMS>
    1386:	81 11       	cpse	r24, r1
    1388:	9b c0       	rjmp	.+310    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    138a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
    138e:	87 ff       	sbrs	r24, 7
    1390:	4e c0       	rjmp	.+156    	; 0x142e <USB_Host_SendControlRequest+0x12c>
    1392:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1396:	8f 7c       	andi	r24, 0xCF	; 207
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    139e:	01 15       	cp	r16, r1
    13a0:	11 05       	cpc	r17, r1
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <USB_Host_SendControlRequest+0xa4>
    13a4:	3a c0       	rjmp	.+116    	; 0x141a <USB_Host_SendControlRequest+0x118>
    13a6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    13aa:	8f 7c       	andi	r24, 0xCF	; 207
    13ac:	80 62       	ori	r24, 0x20	; 32
    13ae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    13b2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13b6:	8f 7b       	andi	r24, 0xBF	; 191
    13b8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	7b df       	rcall	.-266    	; 0x12b6 <USB_Host_WaitForIOS>
    13c0:	81 11       	cpse	r24, r1
    13c2:	7e c0       	rjmp	.+252    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    13c4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13c8:	8b 77       	andi	r24, 0x7B	; 123
    13ca:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	72 df       	rcall	.-284    	; 0x12b6 <USB_Host_WaitForIOS>
    13d2:	76 c0       	rjmp	.+236    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    13d4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13d8:	8f 7b       	andi	r24, 0xBF	; 191
    13da:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	6a df       	rcall	.-300    	; 0x12b6 <USB_Host_WaitForIOS>
    13e2:	81 11       	cpse	r24, r1
    13e4:	6d c0       	rjmp	.+218    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    13e6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    13ea:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    13ee:	89 2b       	or	r24, r25
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <USB_Host_SendControlRequest+0xf4>
    13f2:	c0 e0       	ldi	r28, 0x00	; 0
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
    13f6:	f8 01       	movw	r30, r16
    13f8:	8f 01       	movw	r16, r30
    13fa:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    13fe:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1402:	89 2b       	or	r24, r25
    1404:	69 f4       	brne	.+26     	; 0x1420 <USB_Host_SendControlRequest+0x11e>
    1406:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1410:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1414:	8e 77       	andi	r24, 0x7E	; 126
    1416:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    141a:	20 97       	sbiw	r28, 0x00	; 0
    141c:	d9 f6       	brne	.-74     	; 0x13d4 <USB_Host_SendControlRequest+0xd2>
    141e:	c3 cf       	rjmp	.-122    	; 0x13a6 <USB_Host_SendControlRequest+0xa4>
    1420:	20 97       	sbiw	r28, 0x00	; 0
    1422:	89 f3       	breq	.-30     	; 0x1406 <USB_Host_SendControlRequest+0x104>
    1424:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1428:	81 93       	st	Z+, r24
    142a:	21 97       	sbiw	r28, 0x01	; 1
    142c:	e5 cf       	rjmp	.-54     	; 0x13f8 <USB_Host_SendControlRequest+0xf6>
    142e:	01 15       	cp	r16, r1
    1430:	11 05       	cpc	r17, r1
    1432:	91 f1       	breq	.+100    	; 0x1498 <USB_Host_SendControlRequest+0x196>
    1434:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1438:	8f 7c       	andi	r24, 0xCF	; 207
    143a:	80 62       	ori	r24, 0x20	; 32
    143c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1440:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1444:	8f 7b       	andi	r24, 0xBF	; 191
    1446:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	20 97       	sbiw	r28, 0x00	; 0
    144e:	e1 f0       	breq	.+56     	; 0x1488 <USB_Host_SendControlRequest+0x186>
    1450:	32 df       	rcall	.-412    	; 0x12b6 <USB_Host_WaitForIOS>
    1452:	81 11       	cpse	r24, r1
    1454:	35 c0       	rjmp	.+106    	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    1456:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    145a:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    145e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Host_ControlPipeSize>
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	28 17       	cp	r18, r24
    1466:	39 07       	cpc	r19, r25
    1468:	48 f4       	brcc	.+18     	; 0x147c <USB_Host_SendControlRequest+0x17a>
    146a:	0f 5f       	subi	r16, 0xFF	; 255
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	f8 01       	movw	r30, r16
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	80 81       	ld	r24, Z
    1474:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1478:	21 97       	sbiw	r28, 0x01	; 1
    147a:	69 f7       	brne	.-38     	; 0x1456 <USB_Host_SendControlRequest+0x154>
    147c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1480:	8b 77       	andi	r24, 0x7B	; 123
    1482:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1486:	e1 cf       	rjmp	.-62     	; 0x144a <USB_Host_SendControlRequest+0x148>
    1488:	16 df       	rcall	.-468    	; 0x12b6 <USB_Host_WaitForIOS>
    148a:	81 11       	cpse	r24, r1
    148c:	19 c0       	rjmp	.+50     	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    148e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1492:	80 64       	ori	r24, 0x40	; 64
    1494:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1498:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    149c:	8f 7c       	andi	r24, 0xCF	; 207
    149e:	80 61       	ori	r24, 0x10	; 16
    14a0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    14a4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14a8:	8f 7b       	andi	r24, 0xBF	; 191
    14aa:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	02 df       	rcall	.-508    	; 0x12b6 <USB_Host_WaitForIOS>
    14b2:	81 11       	cpse	r24, r1
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <USB_Host_SendControlRequest+0x1be>
    14b6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    14ba:	9e 77       	andi	r25, 0x7E	; 126
    14bc:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    14c0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14c4:	90 64       	ori	r25, 0x40	; 64
    14c6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14ca:	f1 10       	cpse	r15, r1
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <USB_Host_SendControlRequest+0x1d6>
    14ce:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    14d2:	9e 7f       	andi	r25, 0xFE	; 254
    14d4:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    14de:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	08 95       	ret

000014ee <USB_Host_SetDeviceConfiguration>:
    14ee:	cf 93       	push	r28
    14f0:	c8 2f       	mov	r28, r24
    14f2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_ControlRequest>
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_ControlRequest+0x1>
    14fc:	8c 2f       	mov	r24, r28
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <USB_ControlRequest+0x3>
    1504:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <USB_ControlRequest+0x2>
    1508:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_ControlRequest+0x5>
    150c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_ControlRequest+0x4>
    1510:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x7>
    1514:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_ControlRequest+0x6>
    1518:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	f0 de       	rcall	.-544    	; 0x1302 <USB_Host_SendControlRequest>
    1522:	81 11       	cpse	r24, r1
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <USB_Host_SetDeviceConfiguration+0x4a>
    1526:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <USB_Host_ConfigurationNumber>
    152a:	c1 11       	cpse	r28, r1
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <USB_Host_SetDeviceConfiguration+0x44>
    152e:	9a e0       	ldi	r25, 0x0A	; 10
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <USB_Host_SetDeviceConfiguration+0x46>
    1532:	9b e0       	ldi	r25, 0x0B	; 11
    1534:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <USB_HostState>
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <USB_Host_ClearEndpointStall>:
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    153c:	e5 e2       	ldi	r30, 0x25	; 37
    153e:	f1 e0       	ldi	r31, 0x01	; 1
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	90 83       	st	Z, r25
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	13 82       	std	Z+3, r1	; 0x03
    154a:	12 82       	std	Z+2, r1	; 0x02
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	95 83       	std	Z+5, r25	; 0x05
    1550:	84 83       	std	Z+4, r24	; 0x04
    1552:	17 82       	std	Z+7, r1	; 0x07
    1554:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1556:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	d1 ce       	rjmp	.-606    	; 0x1302 <USB_Host_SendControlRequest>

00001560 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1566:	c7 ea       	ldi	r28, 0xA7	; 167
    1568:	d0 e0       	ldi	r29, 0x00	; 0
    156a:	18 81       	ld	r17, Y
    156c:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    156e:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1570:	71 da       	rcall	.-2846   	; 0xa54 <USB_Host_ProcessNextHostState>
    1572:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	08 95       	ret

0000157c <DCOMP_MS_Host_NextMSInterface>:

	return MS_ENUMERROR_NoError;
}

static uint8_t DCOMP_MS_Host_NextMSInterface(void* const CurrentDescriptor)
{
    157c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	59 f4       	brne	.+22     	; 0x159a <DCOMP_MS_Host_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
    1584:	85 81       	ldd	r24, Z+5	; 0x05
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	41 f4       	brne	.+16     	; 0x159a <DCOMP_MS_Host_NextMSInterface+0x1e>
    158a:	86 81       	ldd	r24, Z+6	; 0x06
    158c:	86 30       	cpi	r24, 0x06	; 6
    158e:	29 f4       	brne	.+10     	; 0x159a <DCOMP_MS_Host_NextMSInterface+0x1e>
		    (Interface->SubClass == MS_CSCP_SCSITransparentSubclass) &&
    1590:	87 81       	ldd	r24, Z+7	; 0x07
    1592:	80 35       	cpi	r24, 0x50	; 80
    1594:	11 f4       	brne	.+4      	; 0x159a <DCOMP_MS_Host_NextMSInterface+0x1e>
		    (Interface->Protocol == MS_CSCP_BulkOnlyTransportProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    159a:	82 e0       	ldi	r24, 0x02	; 2
}
    159c:	08 95       	ret

0000159e <DCOMP_MS_Host_NextMSInterfaceEndpoint>:

static uint8_t DCOMP_MS_Host_NextMSInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    159e:	fc 01       	movw	r30, r24
    15a0:	21 81       	ldd	r18, Z+1	; 0x01
    15a2:	25 30       	cpi	r18, 0x05	; 5
    15a4:	51 f4       	brne	.+20     	; 0x15ba <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    15a6:	23 81       	ldd	r18, Z+3	; 0x03
    15a8:	23 70       	andi	r18, 0x03	; 3
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x18>
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	d8 db       	rcall	.-2128   	; 0xd62 <Pipe_IsEndpointBound>
    15b2:	88 23       	and	r24, r24
    15b4:	31 f0       	breq	.+12     	; 0x15c2 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	08 95       	ret
		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    15ba:	24 30       	cpi	r18, 0x04	; 4
    15bc:	e1 f7       	brne	.-8      	; 0x15b6 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x18>
	{
		return DESCRIPTOR_SEARCH_Fail;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	08 95       	ret

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    15c2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    15c4:	08 95       	ret

000015c6 <MS_Host_WaitForDataReceived>:

	return ErrorCode;
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    15c6:	fc 01       	movw	r30, r24
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    15c8:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    15cc:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    15d0:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15d2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15d6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15da:	8f 7b       	andi	r24, 0xBF	; 191
    15dc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	return ErrorCode;
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
    15e0:	80 e1       	ldi	r24, 0x10	; 16
    15e2:	97 e2       	ldi	r25, 0x27	; 39
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    15e4:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    15e8:	40 fd       	sbrc	r20, 0
    15ea:	45 c0       	rjmp	.+138    	; 0x1676 <MS_Host_WaitForDataReceived+0xb0>
    15ec:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    15f0:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    15f4:	24 17       	cp	r18, r20
    15f6:	35 07       	cpc	r19, r21
    15f8:	39 f0       	breq	.+14     	; 0x1608 <MS_Host_WaitForDataReceived+0x42>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    15fa:	9c 01       	movw	r18, r24
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	31 09       	sbc	r19, r1
    1600:	89 2b       	or	r24, r25
    1602:	09 f4       	brne	.+2      	; 0x1606 <MS_Host_WaitForDataReceived+0x40>
    1604:	4a c0       	rjmp	.+148    	; 0x169a <MS_Host_WaitForDataReceived+0xd4>
    1606:	c9 01       	movw	r24, r18

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1608:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    160c:	20 64       	ori	r18, 0x40	; 64
    160e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1612:	22 81       	ldd	r18, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1614:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1618:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    161c:	2f 7b       	andi	r18, 0xBF	; 191
    161e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1622:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1626:	21 fd       	sbrc	r18, 1
    1628:	11 c0       	rjmp	.+34     	; 0x164c <MS_Host_WaitForDataReceived+0x86>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    162a:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    162e:	20 64       	ori	r18, 0x40	; 64
    1630:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1634:	20 81       	ld	r18, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1636:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    163a:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    163e:	2f 7b       	andi	r18, 0xBF	; 191
    1640:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1644:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1648:	21 ff       	sbrs	r18, 1
    164a:	0f c0       	rjmp	.+30     	; 0x166a <MS_Host_WaitForDataReceived+0xa4>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    164c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1650:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1652:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1656:	90 73       	andi	r25, 0x30	; 48
    1658:	90 31       	cpi	r25, 0x10	; 16
    165a:	11 f0       	breq	.+4      	; 0x1660 <MS_Host_WaitForDataReceived+0x9a>
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <MS_Host_WaitForDataReceived+0x9c>
    1660:	90 e8       	ldi	r25, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    1662:	89 2b       	or	r24, r25
    1664:	6b df       	rcall	.-298    	; 0x153c <USB_Host_ClearEndpointStall>
			return PIPE_RWSTREAM_PipeStalled;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	08 95       	ret
		}

		if (USB_HostState == HOST_STATE_Unattached)
    166a:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <USB_HostState>
    166e:	21 30       	cpi	r18, 0x01	; 1
    1670:	b1 f0       	breq	.+44     	; 0x169e <MS_Host_WaitForDataReceived+0xd8>
    1672:	9a 01       	movw	r18, r20
    1674:	b7 cf       	rjmp	.-146    	; 0x15e4 <MS_Host_WaitForDataReceived+0x1e>
		  return PIPE_RWSTREAM_DeviceDisconnected;
	};

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1676:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1678:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    167c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1680:	80 64       	ori	r24, 0x40	; 64
    1682:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	Pipe_Freeze();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1686:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1688:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    168c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1690:	80 64       	ori	r24, 0x40	; 64
    1692:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	08 95       	ret
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    169e:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    16a0:	08 95       	ret

000016a2 <MS_Host_SendCommand>:
}

static uint8_t MS_Host_SendCommand(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                   const void* const BufferPtr)
{
    16a2:	af 92       	push	r10
    16a4:	bf 92       	push	r11
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
    16b6:	8b 01       	movw	r16, r22
    16b8:	7a 01       	movw	r14, r20
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if (++MSInterfaceInfo->State.TransactionTag == 0xFFFFFFFF)
    16ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    16bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16be:	ac 85       	ldd	r26, Y+12	; 0x0c
    16c0:	bd 85       	ldd	r27, Y+13	; 0x0d
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	a1 1d       	adc	r26, r1
    16c6:	b1 1d       	adc	r27, r1
    16c8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ca:	2f ef       	ldi	r18, 0xFF	; 255
    16cc:	92 07       	cpc	r25, r18
    16ce:	a2 07       	cpc	r26, r18
    16d0:	b2 07       	cpc	r27, r18
    16d2:	21 f4       	brne	.+8      	; 0x16dc <MS_Host_SendCommand+0x3a>
	  MSInterfaceInfo->State.TransactionTag = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	8a 87       	std	Y+10, r24	; 0x0a
    16de:	9b 87       	std	Y+11, r25	; 0x0b
    16e0:	ac 87       	std	Y+12, r26	; 0x0c
    16e2:	bd 87       	std	Y+13, r27	; 0x0d

	SCSICommandBlock->Signature = CPU_TO_LE32(MS_CBW_SIGNATURE);
    16e4:	85 e5       	ldi	r24, 0x55	; 85
    16e6:	93 e5       	ldi	r25, 0x53	; 83
    16e8:	a2 e4       	ldi	r26, 0x42	; 66
    16ea:	b3 e4       	ldi	r27, 0x43	; 67
    16ec:	f8 01       	movw	r30, r16
    16ee:	80 83       	st	Z, r24
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	a2 83       	std	Z+2, r26	; 0x02
    16f4:	b3 83       	std	Z+3, r27	; 0x03
	SCSICommandBlock->Tag       = cpu_to_le32(MSInterfaceInfo->State.TransactionTag);
    16f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16fa:	ac 85       	ldd	r26, Y+12	; 0x0c
    16fc:	bd 85       	ldd	r27, Y+13	; 0x0d
    16fe:	84 83       	std	Z+4, r24	; 0x04
    1700:	95 83       	std	Z+5, r25	; 0x05
    1702:	a6 83       	std	Z+6, r26	; 0x06
    1704:	b7 83       	std	Z+7, r27	; 0x07

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1708:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    170c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t),
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	6f e1       	ldi	r22, 0x1F	; 31
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	c8 01       	movw	r24, r16
    1720:	82 dc       	rcall	.-1788   	; 0x1026 <Pipe_Write_Stream_LE>
    1722:	d8 2e       	mov	r13, r24
    1724:	81 11       	cpse	r24, r1
    1726:	5e c0       	rjmp	.+188    	; 0x17e4 <MS_Host_SendCommand+0x142>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1728:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    172c:	8b 77       	andi	r24, 0x7B	; 123
    172e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	                                      NULL)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	Pipe_ClearOUT();
	Pipe_WaitUntilReady();
    1732:	39 db       	rcall	.-2446   	; 0xda6 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1734:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1738:	80 64       	ori	r24, 0x40	; 64
    173a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	Pipe_Freeze();

	if ((BufferPtr != NULL) &&
    173e:	e1 14       	cp	r14, r1
    1740:	f1 04       	cpc	r15, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <MS_Host_SendCommand+0xa4>
    1744:	4f c0       	rjmp	.+158    	; 0x17e4 <MS_Host_SendCommand+0x142>
static uint8_t MS_Host_SendReceiveData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                       MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                       void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = le32_to_cpu(SCSICommandBlock->DataTransferLength);
    1746:	f8 01       	movw	r30, r16
    1748:	a0 84       	ldd	r10, Z+8	; 0x08
    174a:	b1 84       	ldd	r11, Z+9	; 0x09

	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
    174c:	84 85       	ldd	r24, Z+12	; 0x0c
    174e:	87 ff       	sbrs	r24, 7
	{
		if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    1750:	1f c0       	rjmp	.+62     	; 0x1790 <MS_Host_SendCommand+0xee>
    1752:	ce 01       	movw	r24, r28
    1754:	38 df       	rcall	.-400    	; 0x15c6 <MS_Host_WaitForDataReceived>
    1756:	88 23       	and	r24, r24
    1758:	31 f0       	breq	.+12     	; 0x1766 <MS_Host_SendCommand+0xc4>
    175a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    175e:	90 64       	ori	r25, 0x40	; 64
    1760:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1764:	39 c0       	rjmp	.+114    	; 0x17d8 <MS_Host_SendCommand+0x136>
		{
			Pipe_Freeze();
			return ErrorCode;
		}

		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1766:	88 81       	ld	r24, Y
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1768:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    176c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1770:	8f 7b       	andi	r24, 0xBF	; 191
    1772:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	b5 01       	movw	r22, r10
    177c:	c7 01       	movw	r24, r14
    177e:	a2 dc       	rcall	.-1724   	; 0x10c4 <Pipe_Read_Stream_LE>
    1780:	81 11       	cpse	r24, r1
    1782:	2a c0       	rjmp	.+84     	; 0x17d8 <MS_Host_SendCommand+0x136>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1784:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1788:	8e 77       	andi	r24, 0x7E	; 126
    178a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    178e:	1e c0       	rjmp	.+60     	; 0x17cc <MS_Host_SendCommand+0x12a>

		Pipe_ClearIN();
	}
	else
	{
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1792:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1796:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	b5 01       	movw	r22, r10
    17a6:	c7 01       	movw	r24, r14
    17a8:	3e dc       	rcall	.-1924   	; 0x1026 <Pipe_Write_Stream_LE>
    17aa:	81 11       	cpse	r24, r1
    17ac:	15 c0       	rjmp	.+42     	; 0x17d8 <MS_Host_SendCommand+0x136>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    17ae:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    17b2:	8b 77       	andi	r24, 0x7B	; 123
    17b4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17b8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  return ErrorCode;

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
    17bc:	82 fd       	sbrc	r24, 2
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <MS_Host_SendCommand+0x12a>
		{
			if (USB_HostState == HOST_STATE_Unattached)
    17c0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_HostState>
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	c1 f7       	brne	.-16     	; 0x17b8 <MS_Host_SendCommand+0x116>
			  return PIPE_RWSTREAM_DeviceDisconnected;
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <MS_Host_SendCommand+0x136>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17cc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    17d0:	80 64       	ori	r24, 0x40	; 64
    17d2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <MS_Host_SendCommand+0x142>
    17d8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    17dc:	90 64       	ori	r25, 0x40	; 64
    17de:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	if ((BufferPtr != NULL) &&
	    ((ErrorCode = MS_Host_SendReceiveData(MSInterfaceInfo, SCSICommandBlock, (void*)BufferPtr)) != PIPE_RWSTREAM_NoError))
	{
		Pipe_Freeze();
		return ErrorCode;
    17e2:	d8 2e       	mov	r13, r24
	}

	return ErrorCode;
}
    17e4:	8d 2d       	mov	r24, r13
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	08 95       	ret

000017fa <MS_Host_GetReturnedStatus>:
	return ErrorCode;
}

static uint8_t MS_Host_GetReturnedStatus(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                         MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	8c 01       	movw	r16, r24
    1804:	eb 01       	movw	r28, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    1806:	df de       	rcall	.-578    	; 0x15c6 <MS_Host_WaitForDataReceived>
    1808:	81 11       	cpse	r24, r1
    180a:	1e c0       	rjmp	.+60     	; 0x1848 <MS_Host_GetReturnedStatus+0x4e>
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    180c:	f8 01       	movw	r30, r16
    180e:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1810:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1814:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1818:	8f 7b       	andi	r24, 0xBF	; 191
    181a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	6d e0       	ldi	r22, 0x0D	; 13
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	ce 01       	movw	r24, r28
    1828:	4d dc       	rcall	.-1894   	; 0x10c4 <Pipe_Read_Stream_LE>
    182a:	81 11       	cpse	r24, r1
    182c:	0d c0       	rjmp	.+26     	; 0x1848 <MS_Host_GetReturnedStatus+0x4e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    182e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1832:	8e 77       	andi	r24, 0x7E	; 126
    1834:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1838:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
    1842:	8c 85       	ldd	r24, Y+12	; 0x0c
    1844:	81 11       	cpse	r24, r1
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;
    1846:	80 e8       	ldi	r24, 0x80	; 128

	return ErrorCode;
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <MS_Host_ConfigurePipes>:
#include "MassStorage.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	00 d0       	rcall	.+0      	; 0x1870 <MS_Host_ConfigurePipes+0x1e>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <MS_Host_ConfigurePipes+0x20>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	7a 83       	std	Y+2, r23	; 0x02
    1878:	69 83       	std	Y+1, r22	; 0x01
    187a:	5c 83       	std	Y+4, r21	; 0x04
    187c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    187e:	fc 01       	movw	r30, r24
    1880:	34 96       	adiw	r30, 0x04	; 4
    1882:	2a e0       	ldi	r18, 0x0A	; 10
    1884:	df 01       	movw	r26, r30
    1886:	1d 92       	st	X+, r1
    1888:	2a 95       	dec	r18
    188a:	e9 f7       	brne	.-6      	; 0x1886 <MS_Host_ConfigurePipes+0x34>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    188c:	eb 81       	ldd	r30, Y+3	; 0x03
    188e:	fc 81       	ldd	r31, Y+4	; 0x04
    1890:	11 81       	ldd	r17, Z+1	; 0x01
    1892:	12 30       	cpi	r17, 0x02	; 2
    1894:	09 f0       	breq	.+2      	; 0x1898 <MS_Host_ConfigurePipes+0x46>
    1896:	71 c0       	rjmp	.+226    	; 0x197a <MS_Host_ConfigurePipes+0x128>
    1898:	6c 01       	movw	r12, r24
	{
		if (!(MassStorageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    189a:	4e eb       	ldi	r20, 0xBE	; 190
    189c:	5a e0       	ldi	r21, 0x0A	; 10
    189e:	be 01       	movw	r22, r28
    18a0:	6d 5f       	subi	r22, 0xFD	; 253
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	ce 01       	movw	r24, r28
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	d3 dc       	rcall	.-1626   	; 0x1250 <USB_GetNextDescriptorComp>
    18aa:	81 11       	cpse	r24, r1
    18ac:	67 c0       	rjmp	.+206    	; 0x197c <MS_Host_ConfigurePipes+0x12a>
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    18ae:	6b 80       	ldd	r6, Y+3	; 0x03
    18b0:	7c 80       	ldd	r7, Y+4	; 0x04

			DataINEndpoint  = NULL;
    18b2:	f1 2c       	mov	r15, r1
    18b4:	00 e0       	ldi	r16, 0x00	; 0
			DataOUTEndpoint = NULL;
    18b6:	81 2c       	mov	r8, r1
    18b8:	91 2c       	mov	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    18ba:	61 14       	cp	r6, r1
    18bc:	71 04       	cpc	r7, r1
    18be:	69 f3       	breq	.-38     	; 0x189a <MS_Host_ConfigurePipes+0x48>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    18c0:	4f ec       	ldi	r20, 0xCF	; 207
    18c2:	5a e0       	ldi	r21, 0x0A	; 10
    18c4:	be 01       	movw	r22, r28
    18c6:	6d 5f       	subi	r22, 0xFD	; 253
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	ce 01       	movw	r24, r28
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	c0 dc       	rcall	.-1664   	; 0x1250 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    18d0:	81 11       	cpse	r24, r1
    18d2:	e3 cf       	rjmp	.-58     	; 0x189a <MS_Host_ConfigurePipes+0x48>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    18d4:	ab 80       	ldd	r10, Y+3	; 0x03
    18d6:	bc 80       	ldd	r11, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    18d8:	f5 01       	movw	r30, r10
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	87 fd       	sbrc	r24, 7
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <MS_Host_ConfigurePipes+0x94>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
    18e0:	45 01       	movw	r8, r10
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    18e2:	af 2c       	mov	r10, r15
    18e4:	b0 2e       	mov	r11, r16
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    18e6:	a1 14       	cp	r10, r1
    18e8:	b1 04       	cpc	r11, r1
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <MS_Host_ConfigurePipes+0xa0>
#include "MassStorage.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    18ec:	fa 2c       	mov	r15, r10
    18ee:	0b 2d       	mov	r16, r11
    18f0:	e4 cf       	rjmp	.-56     	; 0x18ba <MS_Host_ConfigurePipes+0x68>
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    18f2:	81 14       	cp	r8, r1
    18f4:	91 04       	cpc	r9, r1
    18f6:	d1 f3       	breq	.-12     	; 0x18ec <MS_Host_ConfigurePipes+0x9a>
    18f8:	ff 24       	eor	r15, r15
    18fa:	f3 94       	inc	r15
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == MSInterfaceInfo->Config.DataINPipeNumber)
    18fc:	d6 01       	movw	r26, r12
    18fe:	8c 91       	ld	r24, X
    1900:	8f 11       	cpse	r24, r15
    1902:	0d c0       	rjmp	.+26     	; 0x191e <MS_Host_ConfigurePipes+0xcc>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1904:	f5 01       	movw	r30, r10
    1906:	04 81       	ldd	r16, Z+4	; 0x04
    1908:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = DataINEndpoint->EndpointAddress;
    190a:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MSInterfaceInfo->Config.DataINPipeDoubleBank;
    190c:	11 96       	adiw	r26, 0x01	; 1
    190e:	8c 91       	ld	r24, X
    1910:	11 97       	sbiw	r26, 0x01	; 1

			MSInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1912:	17 96       	adiw	r26, 0x07	; 7
    1914:	1c 93       	st	X, r17
    1916:	0e 93       	st	-X, r16
    1918:	16 97       	sbiw	r26, 0x06	; 6

		if (PipeNum == MSInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    191a:	40 e1       	ldi	r20, 0x10	; 16
    191c:	21 c0       	rjmp	.+66     	; 0x1960 <MS_Host_ConfigurePipes+0x10e>
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MSInterfaceInfo->Config.DataINPipeDoubleBank;

			MSInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == MSInterfaceInfo->Config.DataOUTPipeNumber)
    191e:	d6 01       	movw	r26, r12
    1920:	12 96       	adiw	r26, 0x02	; 2
    1922:	8c 91       	ld	r24, X
    1924:	8f 15       	cp	r24, r15
    1926:	79 f0       	breq	.+30     	; 0x1946 <MS_Host_ConfigurePipes+0xf4>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1928:	f3 94       	inc	r15
    192a:	b7 e0       	ldi	r27, 0x07	; 7
    192c:	fb 12       	cpse	r15, r27
    192e:	e6 cf       	rjmp	.-52     	; 0x18fc <MS_Host_ConfigurePipes+0xaa>
		{
			return MS_ENUMERROR_PipeConfigurationFailed;
		}
	}

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
    1930:	f3 01       	movw	r30, r6
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	d6 01       	movw	r26, r12
    1936:	15 96       	adiw	r26, 0x05	; 5
    1938:	8c 93       	st	X, r24
    193a:	15 97       	sbiw	r26, 0x05	; 5
	MSInterfaceInfo->State.IsActive = true;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	14 96       	adiw	r26, 0x04	; 4
    1940:	8c 93       	st	X, r24

	return MS_ENUMERROR_NoError;
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	1b c0       	rjmp	.+54     	; 0x197c <MS_Host_ConfigurePipes+0x12a>

			MSInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == MSInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1946:	f4 01       	movw	r30, r8
    1948:	04 81       	ldd	r16, Z+4	; 0x04
    194a:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    194c:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MSInterfaceInfo->Config.DataOUTPipeDoubleBank;
    194e:	d6 01       	movw	r26, r12
    1950:	13 96       	adiw	r26, 0x03	; 3
    1952:	8c 91       	ld	r24, X
    1954:	13 97       	sbiw	r26, 0x03	; 3
			
			MSInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1956:	19 96       	adiw	r26, 0x09	; 9
    1958:	1c 93       	st	X, r17
    195a:	0e 93       	st	-X, r16
    195c:	18 97       	sbiw	r26, 0x08	; 8
		}
		else if (PipeNum == MSInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    195e:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1960:	81 11       	cpse	r24, r1
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <MS_Host_ConfigurePipes+0x116>
    1964:	e1 2c       	mov	r14, r1
    1966:	02 c0       	rjmp	.+4      	; 0x196c <MS_Host_ConfigurePipes+0x11a>
    1968:	84 e0       	ldi	r24, 0x04	; 4
    196a:	e8 2e       	mov	r14, r24
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	8f 2d       	mov	r24, r15
    1970:	88 d9       	rcall	.-3312   	; 0xc82 <Pipe_ConfigurePipe>
    1972:	81 11       	cpse	r24, r1
    1974:	d9 cf       	rjmp	.-78     	; 0x1928 <MS_Host_ConfigurePipes+0xd6>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return MS_ENUMERROR_PipeConfigurationFailed;
    1976:	13 e0       	ldi	r17, 0x03	; 3
    1978:	01 c0       	rjmp	.+2      	; 0x197c <MS_Host_ConfigurePipes+0x12a>
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;
    197a:	11 e0       	ldi	r17, 0x01	; 1

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
	MSInterfaceInfo->State.IsActive = true;

	return MS_ENUMERROR_NoError;
}
    197c:	81 2f       	mov	r24, r17
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	bf 90       	pop	r11
    1998:	af 90       	pop	r10
    199a:	9f 90       	pop	r9
    199c:	8f 90       	pop	r8
    199e:	7f 90       	pop	r7
    19a0:	6f 90       	pop	r6
    19a2:	08 95       	ret

000019a4 <MS_Host_ResetMSInterface>:

	return ErrorCode;
}

uint8_t MS_Host_ResetMSInterface(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	21 e2       	ldi	r18, 0x21	; 33
    19b0:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <USB_ControlRequest>
    19b4:	2f ef       	ldi	r18, 0xFF	; 255
    19b6:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <USB_ControlRequest+0x1>
    19ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_ControlRequest+0x3>
    19be:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_ControlRequest+0x2>
    19c2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x5>
    19c6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x4>
    19ca:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x7>
    19ce:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    19d2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	93 dc       	rcall	.-1754   	; 0x1302 <USB_Host_SendControlRequest>
    19dc:	81 11       	cpse	r24, r1
    19de:	24 c0       	rjmp	.+72     	; 0x1a28 <MS_Host_ResetMSInterface+0x84>
	  return ErrorCode;
	
	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    19e0:	88 81       	ld	r24, Y
    19e2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    19e6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    19ea:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    19ec:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    19f0:	90 73       	andi	r25, 0x30	; 48
    19f2:	90 31       	cpi	r25, 0x10	; 16
    19f4:	11 f0       	breq	.+4      	; 0x19fa <MS_Host_ResetMSInterface+0x56>
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <MS_Host_ResetMSInterface+0x58>
    19fa:	90 e8       	ldi	r25, 0x80	; 128
	
	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    19fc:	89 2b       	or	r24, r25
    19fe:	9e dd       	rcall	.-1220   	; 0x153c <USB_Host_ClearEndpointStall>
    1a00:	81 11       	cpse	r24, r1
    1a02:	12 c0       	rjmp	.+36     	; 0x1a28 <MS_Host_ResetMSInterface+0x84>
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1a06:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1a0a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1a10:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1a14:	90 73       	andi	r25, 0x30	; 48
    1a16:	90 31       	cpi	r25, 0x10	; 16
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <MS_Host_ResetMSInterface+0x7a>
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <MS_Host_ResetMSInterface+0x7c>
    1a1e:	90 e8       	ldi	r25, 0x80	; 128

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1a20:	89 2b       	or	r24, r25
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1a22:	df 91       	pop	r29
	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1a24:	cf 91       	pop	r28
    1a26:	8a cd       	rjmp	.-1260   	; 0x153c <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <MS_Host_GetMaxLUN>:

uint8_t MS_Host_GetMaxLUN(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                          uint8_t* const MaxLUNIndex)
{
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	eb 01       	movw	r28, r22
	uint8_t ErrorCode = HOST_SENDCONTROL_Successful;

	USB_ControlRequest = (USB_Request_Header_t)
    1a34:	fc 01       	movw	r30, r24
    1a36:	85 81       	ldd	r24, Z+5	; 0x05
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	21 ea       	ldi	r18, 0xA1	; 161
    1a3c:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <USB_ControlRequest>
    1a40:	2e ef       	ldi	r18, 0xFE	; 254
    1a42:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <USB_ControlRequest+0x1>
    1a46:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_ControlRequest+0x3>
    1a4a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_ControlRequest+0x2>
    1a4e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x5>
    1a52:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x4>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x7>
    1a5e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1a62:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 1,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    1a66:	cb 01       	movw	r24, r22
    1a68:	4c dc       	rcall	.-1896   	; 0x1302 <USB_Host_SendControlRequest>
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <MS_Host_GetMaxLUN+0x44>
	{
		*MaxLUNIndex = 0;
    1a6e:	18 82       	st	Y, r1
		ErrorCode    = HOST_SENDCONTROL_Successful;
    1a70:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ErrorCode;
}
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <MS_Host_GetInquiryData>:

uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	ac 97       	sbiw	r28, 0x2c	; 44
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1a9a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_HostState>
    1a9e:	8b 30       	cpi	r24, 0x0B	; 11
    1aa0:	49 f5       	brne	.+82     	; 0x1af4 <MS_Host_GetInquiryData+0x7c>
    1aa2:	84 81       	ldd	r24, Z+4	; 0x04
    1aa4:	88 23       	and	r24, r24
    1aa6:	31 f1       	breq	.+76     	; 0x1af4 <MS_Host_GetInquiryData+0x7c>
    1aa8:	96 2f       	mov	r25, r22
    1aaa:	8f 01       	movw	r16, r30
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1aac:	be 01       	movw	r22, r28
    1aae:	6f 5f       	subi	r22, 0xFF	; 255
    1ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab2:	8f e1       	ldi	r24, 0x1F	; 31
    1ab4:	fb 01       	movw	r30, r22
    1ab6:	11 92       	st	Z+, r1
    1ab8:	8a 95       	dec	r24
    1aba:	e9 f7       	brne	.-6      	; 0x1ab6 <MS_Host_GetInquiryData+0x3e>
    1abc:	84 e2       	ldi	r24, 0x24	; 36
    1abe:	c8 2e       	mov	r12, r24
    1ac0:	d1 2c       	mov	r13, r1
    1ac2:	e1 2c       	mov	r14, r1
    1ac4:	f1 2c       	mov	r15, r1
    1ac6:	c9 86       	std	Y+9, r12	; 0x09
    1ac8:	da 86       	std	Y+10, r13	; 0x0a
    1aca:	eb 86       	std	Y+11, r14	; 0x0b
    1acc:	fc 86       	std	Y+12, r15	; 0x0c
    1ace:	80 e8       	ldi	r24, 0x80	; 128
    1ad0:	8d 87       	std	Y+13, r24	; 0x0d
    1ad2:	9e 87       	std	Y+14, r25	; 0x0e
    1ad4:	86 e0       	ldi	r24, 0x06	; 6
    1ad6:	8f 87       	std	Y+15, r24	; 0x0f
    1ad8:	82 e1       	ldi	r24, 0x12	; 18
    1ada:	88 8b       	std	Y+16, r24	; 0x10
    1adc:	84 e2       	ldi	r24, 0x24	; 36
    1ade:	8c 8b       	std	Y+20, r24	; 0x14
				}
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData)) != PIPE_RWSTREAM_NoError)
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	df dd       	rcall	.-1090   	; 0x16a2 <MS_Host_SendCommand>
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <MS_Host_GetInquiryData+0x7e>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1ae8:	be 01       	movw	r22, r28
    1aea:	60 5e       	subi	r22, 0xE0	; 224
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	c8 01       	movw	r24, r16
    1af0:	84 de       	rcall	.-760    	; 0x17fa <MS_Host_GetReturnedStatus>
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <MS_Host_GetInquiryData+0x7e>
uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1af4:	81 e0       	ldi	r24, 0x01	; 1

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1af6:	ac 96       	adiw	r28, 0x2c	; 44
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	ff 90       	pop	r15
    1b0c:	ef 90       	pop	r14
    1b0e:	df 90       	pop	r13
    1b10:	cf 90       	pop	r12
    1b12:	08 95       	ret

00001b14 <MS_Host_TestUnitReady>:

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	ac 97       	sbiw	r28, 0x2c	; 44
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1b2c:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <USB_HostState>
    1b30:	2b 30       	cpi	r18, 0x0B	; 11
    1b32:	f9 f4       	brne	.+62     	; 0x1b72 <MS_Host_TestUnitReady+0x5e>
    1b34:	fc 01       	movw	r30, r24
    1b36:	24 81       	ldd	r18, Z+4	; 0x04
    1b38:	22 23       	and	r18, r18
    1b3a:	d9 f0       	breq	.+54     	; 0x1b72 <MS_Host_TestUnitReady+0x5e>
    1b3c:	26 2f       	mov	r18, r22
    1b3e:	8c 01       	movw	r16, r24
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1b40:	be 01       	movw	r22, r28
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f e1       	ldi	r24, 0x1F	; 31
    1b48:	fb 01       	movw	r30, r22
    1b4a:	11 92       	st	Z+, r1
    1b4c:	8a 95       	dec	r24
    1b4e:	e9 f7       	brne	.-6      	; 0x1b4a <MS_Host_TestUnitReady+0x36>
    1b50:	80 e8       	ldi	r24, 0x80	; 128
    1b52:	8d 87       	std	Y+13, r24	; 0x0d
    1b54:	2e 87       	std	Y+14, r18	; 0x0e
    1b56:	86 e0       	ldi	r24, 0x06	; 6
    1b58:	8f 87       	std	Y+15, r24	; 0x0f
				}
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	c8 01       	movw	r24, r16
    1b60:	a0 dd       	rcall	.-1216   	; 0x16a2 <MS_Host_SendCommand>
    1b62:	81 11       	cpse	r24, r1
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <MS_Host_TestUnitReady+0x60>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1b66:	be 01       	movw	r22, r28
    1b68:	60 5e       	subi	r22, 0xE0	; 224
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	45 de       	rcall	.-886    	; 0x17fa <MS_Host_GetReturnedStatus>
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <MS_Host_TestUnitReady+0x60>

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1b72:	81 e0       	ldi	r24, 0x01	; 1

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1b74:	ac 96       	adiw	r28, 0x2c	; 44
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <MS_Host_ReadDeviceCapacity>:

uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
    1b8a:	8f 92       	push	r8
    1b8c:	9f 92       	push	r9
    1b8e:	af 92       	push	r10
    1b90:	bf 92       	push	r11
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	ac 97       	sbiw	r28, 0x2c	; 44
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1bb0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_HostState>
    1bb4:	8b 30       	cpi	r24, 0x0B	; 11
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <MS_Host_ReadDeviceCapacity+0x30>
    1bb8:	3b c0       	rjmp	.+118    	; 0x1c30 <MS_Host_ReadDeviceCapacity+0xa6>
    1bba:	84 81       	ldd	r24, Z+4	; 0x04
    1bbc:	88 23       	and	r24, r24
    1bbe:	c1 f1       	breq	.+112    	; 0x1c30 <MS_Host_ReadDeviceCapacity+0xa6>
    1bc0:	8a 01       	movw	r16, r20
    1bc2:	96 2f       	mov	r25, r22
    1bc4:	7f 01       	movw	r14, r30
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1bc6:	be 01       	movw	r22, r28
    1bc8:	6f 5f       	subi	r22, 0xFF	; 255
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	8f e1       	ldi	r24, 0x1F	; 31
    1bce:	fb 01       	movw	r30, r22
    1bd0:	11 92       	st	Z+, r1
    1bd2:	8a 95       	dec	r24
    1bd4:	e9 f7       	brne	.-6      	; 0x1bd0 <MS_Host_ReadDeviceCapacity+0x46>
    1bd6:	88 e0       	ldi	r24, 0x08	; 8
    1bd8:	88 2e       	mov	r8, r24
    1bda:	91 2c       	mov	r9, r1
    1bdc:	a1 2c       	mov	r10, r1
    1bde:	b1 2c       	mov	r11, r1
    1be0:	89 86       	std	Y+9, r8	; 0x09
    1be2:	9a 86       	std	Y+10, r9	; 0x0a
    1be4:	ab 86       	std	Y+11, r10	; 0x0b
    1be6:	bc 86       	std	Y+12, r11	; 0x0c
    1be8:	80 e8       	ldi	r24, 0x80	; 128
    1bea:	8d 87       	std	Y+13, r24	; 0x0d
    1bec:	9e 87       	std	Y+14, r25	; 0x0e
    1bee:	8a e0       	ldi	r24, 0x0A	; 10
    1bf0:	8f 87       	std	Y+15, r24	; 0x0f
    1bf2:	85 e2       	ldi	r24, 0x25	; 37
    1bf4:	88 8b       	std	Y+16, r24	; 0x10
				}
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, DeviceCapacity)) != PIPE_RWSTREAM_NoError)
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	54 dd       	rcall	.-1368   	; 0x16a2 <MS_Host_SendCommand>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	1a c0       	rjmp	.+52     	; 0x1c32 <MS_Host_ReadDeviceCapacity+0xa8>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	2f d1       	rcall	.+606    	; 0x1e68 <__bswapsi2>
	  return ErrorCode;

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
    1c0a:	60 83       	st	Z, r22
    1c0c:	71 83       	std	Z+1, r23	; 0x01
    1c0e:	82 83       	std	Z+2, r24	; 0x02
    1c10:	93 83       	std	Z+3, r25	; 0x03
    1c12:	64 81       	ldd	r22, Z+4	; 0x04
    1c14:	75 81       	ldd	r23, Z+5	; 0x05
    1c16:	86 81       	ldd	r24, Z+6	; 0x06
    1c18:	97 81       	ldd	r25, Z+7	; 0x07
    1c1a:	26 d1       	rcall	.+588    	; 0x1e68 <__bswapsi2>
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);
    1c1c:	64 83       	std	Z+4, r22	; 0x04
    1c1e:	75 83       	std	Z+5, r23	; 0x05
    1c20:	86 83       	std	Z+6, r24	; 0x06
    1c22:	97 83       	std	Z+7, r25	; 0x07

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1c24:	be 01       	movw	r22, r28
    1c26:	60 5e       	subi	r22, 0xE0	; 224
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	e6 dd       	rcall	.-1076   	; 0x17fa <MS_Host_GetReturnedStatus>
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <MS_Host_ReadDeviceCapacity+0xa8>
uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1c30:	81 e0       	ldi	r24, 0x01	; 1

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1c32:	ac 96       	adiw	r28, 0x2c	; 44
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	bf 90       	pop	r11
    1c4c:	af 90       	pop	r10
    1c4e:	9f 90       	pop	r9
    1c50:	8f 90       	pop	r8
    1c52:	08 95       	ret

00001c54 <MS_Host_RequestSense>:

uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
    1c54:	cf 92       	push	r12
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	ac 97       	sbiw	r28, 0x2c	; 44
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1c76:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_HostState>
    1c7a:	8b 30       	cpi	r24, 0x0B	; 11
    1c7c:	49 f5       	brne	.+82     	; 0x1cd0 <MS_Host_RequestSense+0x7c>
    1c7e:	84 81       	ldd	r24, Z+4	; 0x04
    1c80:	88 23       	and	r24, r24
    1c82:	31 f1       	breq	.+76     	; 0x1cd0 <MS_Host_RequestSense+0x7c>
    1c84:	96 2f       	mov	r25, r22
    1c86:	8f 01       	movw	r16, r30
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1c88:	be 01       	movw	r22, r28
    1c8a:	6f 5f       	subi	r22, 0xFF	; 255
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	8f e1       	ldi	r24, 0x1F	; 31
    1c90:	fb 01       	movw	r30, r22
    1c92:	11 92       	st	Z+, r1
    1c94:	8a 95       	dec	r24
    1c96:	e9 f7       	brne	.-6      	; 0x1c92 <MS_Host_RequestSense+0x3e>
    1c98:	82 e1       	ldi	r24, 0x12	; 18
    1c9a:	c8 2e       	mov	r12, r24
    1c9c:	d1 2c       	mov	r13, r1
    1c9e:	e1 2c       	mov	r14, r1
    1ca0:	f1 2c       	mov	r15, r1
    1ca2:	c9 86       	std	Y+9, r12	; 0x09
    1ca4:	da 86       	std	Y+10, r13	; 0x0a
    1ca6:	eb 86       	std	Y+11, r14	; 0x0b
    1ca8:	fc 86       	std	Y+12, r15	; 0x0c
    1caa:	80 e8       	ldi	r24, 0x80	; 128
    1cac:	8d 87       	std	Y+13, r24	; 0x0d
    1cae:	9e 87       	std	Y+14, r25	; 0x0e
    1cb0:	86 e0       	ldi	r24, 0x06	; 6
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	88 8b       	std	Y+16, r24	; 0x10
    1cb8:	82 e1       	ldi	r24, 0x12	; 18
    1cba:	8c 8b       	std	Y+20, r24	; 0x14
				}
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData)) != PIPE_RWSTREAM_NoError)
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	f1 dc       	rcall	.-1566   	; 0x16a2 <MS_Host_SendCommand>
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	07 c0       	rjmp	.+14     	; 0x1cd2 <MS_Host_RequestSense+0x7e>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1cc4:	be 01       	movw	r22, r28
    1cc6:	60 5e       	subi	r22, 0xE0	; 224
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	c8 01       	movw	r24, r16
    1ccc:	96 dd       	rcall	.-1236   	; 0x17fa <MS_Host_GetReturnedStatus>
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <MS_Host_RequestSense+0x7e>
uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1cd2:	ac 96       	adiw	r28, 0x2c	; 44
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <MS_Host_PreventAllowMediumRemoval>:

uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	ac 97       	sbiw	r28, 0x2c	; 44
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1d0a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_HostState>
    1d0e:	8b 30       	cpi	r24, 0x0B	; 11
    1d10:	f9 f4       	brne	.+62     	; 0x1d50 <MS_Host_PreventAllowMediumRemoval+0x60>
    1d12:	84 81       	ldd	r24, Z+4	; 0x04
    1d14:	88 23       	and	r24, r24
    1d16:	e1 f0       	breq	.+56     	; 0x1d50 <MS_Host_PreventAllowMediumRemoval+0x60>
    1d18:	96 2f       	mov	r25, r22
    1d1a:	8f 01       	movw	r16, r30
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1d1c:	be 01       	movw	r22, r28
    1d1e:	6f 5f       	subi	r22, 0xFF	; 255
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	8f e1       	ldi	r24, 0x1F	; 31
    1d24:	fb 01       	movw	r30, r22
    1d26:	11 92       	st	Z+, r1
    1d28:	8a 95       	dec	r24
    1d2a:	e9 f7       	brne	.-6      	; 0x1d26 <MS_Host_PreventAllowMediumRemoval+0x36>
    1d2c:	9e 87       	std	Y+14, r25	; 0x0e
    1d2e:	86 e0       	ldi	r24, 0x06	; 6
    1d30:	8f 87       	std	Y+15, r24	; 0x0f
    1d32:	8e e1       	ldi	r24, 0x1E	; 30
    1d34:	88 8b       	std	Y+16, r24	; 0x10
    1d36:	4b 8b       	std	Y+19, r20	; 0x13
				}
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	b1 dc       	rcall	.-1694   	; 0x16a2 <MS_Host_SendCommand>
    1d40:	81 11       	cpse	r24, r1
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <MS_Host_PreventAllowMediumRemoval+0x62>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1d44:	be 01       	movw	r22, r28
    1d46:	60 5e       	subi	r22, 0xE0	; 224
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	56 dd       	rcall	.-1364   	; 0x17fa <MS_Host_GetReturnedStatus>
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <MS_Host_PreventAllowMediumRemoval+0x62>
uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1d50:	81 e0       	ldi	r24, 0x01	; 1

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1d52:	ac 96       	adiw	r28, 0x2c	; 44
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <MS_Host_ReadDeviceBlocks>:
                                 const uint8_t LUNIndex,
                                 const uint32_t BlockAddress,
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
    1d68:	8f 92       	push	r8
    1d6a:	9f 92       	push	r9
    1d6c:	af 92       	push	r10
    1d6e:	bf 92       	push	r11
    1d70:	cf 92       	push	r12
    1d72:	df 92       	push	r13
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	ac 97       	sbiw	r28, 0x2c	; 44
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1d90:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <USB_HostState>
    1d94:	7b 30       	cpi	r23, 0x0B	; 11
    1d96:	81 f5       	brne	.+96     	; 0x1df8 <MS_Host_ReadDeviceBlocks+0x90>
    1d98:	fc 01       	movw	r30, r24
    1d9a:	74 81       	ldd	r23, Z+4	; 0x04
    1d9c:	77 23       	and	r23, r23
    1d9e:	61 f1       	breq	.+88     	; 0x1df8 <MS_Host_ReadDeviceBlocks+0x90>
    1da0:	d7 01       	movw	r26, r14
    1da2:	e3 2e       	mov	r14, r19
    1da4:	f2 2e       	mov	r15, r18
    1da6:	16 2f       	mov	r17, r22
    1da8:	5c 01       	movw	r10, r24
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1daa:	ce 01       	movw	r24, r28
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	4c 01       	movw	r8, r24
    1db0:	8f e1       	ldi	r24, 0x1F	; 31
    1db2:	f4 01       	movw	r30, r8
    1db4:	11 92       	st	Z+, r1
    1db6:	8a 95       	dec	r24
    1db8:	e9 f7       	brne	.-6      	; 0x1db4 <MS_Host_ReadDeviceBlocks+0x4c>
    1dba:	20 2f       	mov	r18, r16
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	5b d0       	rcall	.+182    	; 0x1e76 <__umulhisi3>
    1dc0:	69 87       	std	Y+9, r22	; 0x09
    1dc2:	7a 87       	std	Y+10, r23	; 0x0a
    1dc4:	8b 87       	std	Y+11, r24	; 0x0b
    1dc6:	9c 87       	std	Y+12, r25	; 0x0c
    1dc8:	80 e8       	ldi	r24, 0x80	; 128
    1dca:	8d 87       	std	Y+13, r24	; 0x0d
    1dcc:	1e 87       	std	Y+14, r17	; 0x0e
    1dce:	8a e0       	ldi	r24, 0x0A	; 10
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    1dd2:	88 e2       	ldi	r24, 0x28	; 40
    1dd4:	88 8b       	std	Y+16, r24	; 0x10
    1dd6:	5a 8b       	std	Y+18, r21	; 0x12
    1dd8:	4b 8b       	std	Y+19, r20	; 0x13
    1dda:	ec 8a       	std	Y+20, r14	; 0x14
    1ddc:	fd 8a       	std	Y+21, r15	; 0x15
    1dde:	08 8f       	std	Y+24, r16	; 0x18
				}
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer)) != PIPE_RWSTREAM_NoError)
    1de0:	a6 01       	movw	r20, r12
    1de2:	b4 01       	movw	r22, r8
    1de4:	c5 01       	movw	r24, r10
    1de6:	5d dc       	rcall	.-1862   	; 0x16a2 <MS_Host_SendCommand>
    1de8:	81 11       	cpse	r24, r1
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <MS_Host_ReadDeviceBlocks+0x92>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1dec:	be 01       	movw	r22, r28
    1dee:	60 5e       	subi	r22, 0xE0	; 224
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	c5 01       	movw	r24, r10
    1df4:	02 dd       	rcall	.-1532   	; 0x17fa <MS_Host_GetReturnedStatus>
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <MS_Host_ReadDeviceBlocks+0x92>
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1df8:	81 e0       	ldi	r24, 0x01	; 1

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1dfa:	ac 96       	adiw	r28, 0x2c	; 44
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	df 90       	pop	r13
    1e14:	cf 90       	pop	r12
    1e16:	bf 90       	pop	r11
    1e18:	af 90       	pop	r10
    1e1a:	9f 90       	pop	r9
    1e1c:	8f 90       	pop	r8
    1e1e:	08 95       	ret

00001e20 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e20:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1e24:	95 ff       	sbrs	r25, 5
    1e26:	fc cf       	rjmp	.-8      	; 0x1e20 <Serial_putchar>
				UDR1 = DataByte;
    1e28:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	08 95       	ret

00001e32 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e32:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e36:	87 ff       	sbrs	r24, 7
    1e38:	08 c0       	rjmp	.+16     	; 0x1e4a <Serial_getchar+0x18>
    1e3a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e3e:	87 ff       	sbrs	r24, 7
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1e42:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	08 95       	ret
	  return _FDEV_EOF;
    1e4a:	8e ef       	ldi	r24, 0xFE	; 254
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
    1e4e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e54:	08 95       	ret

00001e56 <__tablejump2__>:
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	00 24       	eor	r0, r0
    1e5c:	00 1c       	adc	r0, r0
    1e5e:	0b be       	out	0x3b, r0	; 59
    1e60:	07 90       	elpm	r0, Z+
    1e62:	f6 91       	elpm	r31, Z
    1e64:	e0 2d       	mov	r30, r0
    1e66:	09 94       	ijmp

00001e68 <__bswapsi2>:
    1e68:	69 27       	eor	r22, r25
    1e6a:	96 27       	eor	r25, r22
    1e6c:	69 27       	eor	r22, r25
    1e6e:	78 27       	eor	r23, r24
    1e70:	87 27       	eor	r24, r23
    1e72:	78 27       	eor	r23, r24
    1e74:	08 95       	ret

00001e76 <__umulhisi3>:
    1e76:	a2 9f       	mul	r26, r18
    1e78:	b0 01       	movw	r22, r0
    1e7a:	b3 9f       	mul	r27, r19
    1e7c:	c0 01       	movw	r24, r0
    1e7e:	a3 9f       	mul	r26, r19
    1e80:	70 0d       	add	r23, r0
    1e82:	81 1d       	adc	r24, r1
    1e84:	11 24       	eor	r1, r1
    1e86:	91 1d       	adc	r25, r1
    1e88:	b2 9f       	mul	r27, r18
    1e8a:	70 0d       	add	r23, r0
    1e8c:	81 1d       	adc	r24, r1
    1e8e:	11 24       	eor	r1, r1
    1e90:	91 1d       	adc	r25, r1
    1e92:	08 95       	ret

00001e94 <isgraph>:
    1e94:	80 32       	cpi	r24, 0x20	; 32
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <isprint+0x2>

00001e98 <isprint>:
    1e98:	91 11       	cpse	r25, r1
    1e9a:	95 c2       	rjmp	.+1322   	; 0x23c6 <__ctype_isfalse>
    1e9c:	80 52       	subi	r24, 0x20	; 32
    1e9e:	8f 55       	subi	r24, 0x5F	; 95
    1ea0:	e0 f7       	brcc	.-8      	; 0x1e9a <isprint+0x2>
    1ea2:	08 95       	ret

00001ea4 <fputc>:
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	fb 01       	movw	r30, r22
    1eae:	23 81       	ldd	r18, Z+3	; 0x03
    1eb0:	21 fd       	sbrc	r18, 1
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <fputc+0x16>
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	9f ef       	ldi	r25, 0xFF	; 255
    1eb8:	2c c0       	rjmp	.+88     	; 0x1f12 <fputc+0x6e>
    1eba:	22 ff       	sbrs	r18, 2
    1ebc:	16 c0       	rjmp	.+44     	; 0x1eea <fputc+0x46>
    1ebe:	46 81       	ldd	r20, Z+6	; 0x06
    1ec0:	57 81       	ldd	r21, Z+7	; 0x07
    1ec2:	24 81       	ldd	r18, Z+4	; 0x04
    1ec4:	35 81       	ldd	r19, Z+5	; 0x05
    1ec6:	42 17       	cp	r20, r18
    1ec8:	53 07       	cpc	r21, r19
    1eca:	44 f4       	brge	.+16     	; 0x1edc <fputc+0x38>
    1ecc:	a0 81       	ld	r26, Z
    1ece:	b1 81       	ldd	r27, Z+1	; 0x01
    1ed0:	9d 01       	movw	r18, r26
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	31 83       	std	Z+1, r19	; 0x01
    1ed8:	20 83       	st	Z, r18
    1eda:	8c 93       	st	X, r24
    1edc:	26 81       	ldd	r18, Z+6	; 0x06
    1ede:	37 81       	ldd	r19, Z+7	; 0x07
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	37 83       	std	Z+7, r19	; 0x07
    1ee6:	26 83       	std	Z+6, r18	; 0x06
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <fputc+0x6e>
    1eea:	8b 01       	movw	r16, r22
    1eec:	ec 01       	movw	r28, r24
    1eee:	fb 01       	movw	r30, r22
    1ef0:	00 84       	ldd	r0, Z+8	; 0x08
    1ef2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	09 95       	icall
    1ef8:	89 2b       	or	r24, r25
    1efa:	e1 f6       	brne	.-72     	; 0x1eb4 <fputc+0x10>
    1efc:	d8 01       	movw	r26, r16
    1efe:	16 96       	adiw	r26, 0x06	; 6
    1f00:	8d 91       	ld	r24, X+
    1f02:	9c 91       	ld	r25, X
    1f04:	17 97       	sbiw	r26, 0x07	; 7
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	17 96       	adiw	r26, 0x07	; 7
    1f0a:	9c 93       	st	X, r25
    1f0c:	8e 93       	st	-X, r24
    1f0e:	16 97       	sbiw	r26, 0x06	; 6
    1f10:	ce 01       	movw	r24, r28
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <printf_P>:
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	ae 01       	movw	r20, r28
    1f2a:	49 5f       	subi	r20, 0xF9	; 249
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	da 01       	movw	r26, r20
    1f30:	6d 91       	ld	r22, X+
    1f32:	7d 91       	ld	r23, X+
    1f34:	ad 01       	movw	r20, r26
    1f36:	0c e3       	ldi	r16, 0x3C	; 60
    1f38:	11 e0       	ldi	r17, 0x01	; 1
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	dc 01       	movw	r26, r24
    1f42:	13 96       	adiw	r26, 0x03	; 3
    1f44:	2c 91       	ld	r18, X
    1f46:	13 97       	sbiw	r26, 0x03	; 3
    1f48:	28 60       	ori	r18, 0x08	; 8
    1f4a:	13 96       	adiw	r26, 0x03	; 3
    1f4c:	2c 93       	st	X, r18
    1f4e:	3e d0       	rcall	.+124    	; 0x1fcc <vfprintf>
    1f50:	d8 01       	movw	r26, r16
    1f52:	12 96       	adiw	r26, 0x02	; 2
    1f54:	ed 91       	ld	r30, X+
    1f56:	fc 91       	ld	r31, X
    1f58:	13 97       	sbiw	r26, 0x03	; 3
    1f5a:	23 81       	ldd	r18, Z+3	; 0x03
    1f5c:	27 7f       	andi	r18, 0xF7	; 247
    1f5e:	23 83       	std	Z+3, r18	; 0x03
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <puts_P>:
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	8c 01       	movw	r16, r24
    1f74:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__iob+0x2>
    1f78:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__iob+0x3>
    1f7c:	83 81       	ldd	r24, Z+3	; 0x03
    1f7e:	81 ff       	sbrs	r24, 1
    1f80:	1b c0       	rjmp	.+54     	; 0x1fb8 <puts_P+0x4e>
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
    1f84:	c0 e0       	ldi	r28, 0x00	; 0
    1f86:	f8 01       	movw	r30, r16
    1f88:	84 91       	lpm	r24, Z
    1f8a:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <__iob+0x2>
    1f8e:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <__iob+0x3>
    1f92:	db 01       	movw	r26, r22
    1f94:	18 96       	adiw	r26, 0x08	; 8
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	19 97       	sbiw	r26, 0x09	; 9
    1f9c:	88 23       	and	r24, r24
    1f9e:	41 f0       	breq	.+16     	; 0x1fb0 <puts_P+0x46>
    1fa0:	09 95       	icall
    1fa2:	89 2b       	or	r24, r25
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <puts_P+0x40>
    1fa6:	df ef       	ldi	r29, 0xFF	; 255
    1fa8:	cf ef       	ldi	r28, 0xFF	; 255
    1faa:	0f 5f       	subi	r16, 0xFF	; 255
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	eb cf       	rjmp	.-42     	; 0x1f86 <puts_P+0x1c>
    1fb0:	8a e0       	ldi	r24, 0x0A	; 10
    1fb2:	09 95       	icall
    1fb4:	89 2b       	or	r24, r25
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <puts_P+0x54>
    1fb8:	8f ef       	ldi	r24, 0xFF	; 255
    1fba:	9f ef       	ldi	r25, 0xFF	; 255
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <puts_P+0x58>
    1fbe:	8d 2f       	mov	r24, r29
    1fc0:	9c 2f       	mov	r25, r28
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	08 95       	ret

00001fcc <vfprintf>:
    1fcc:	2f 92       	push	r2
    1fce:	3f 92       	push	r3
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	6c 01       	movw	r12, r24
    2002:	7b 01       	movw	r14, r22
    2004:	8a 01       	movw	r16, r20
    2006:	fc 01       	movw	r30, r24
    2008:	17 82       	std	Z+7, r1	; 0x07
    200a:	16 82       	std	Z+6, r1	; 0x06
    200c:	83 81       	ldd	r24, Z+3	; 0x03
    200e:	81 ff       	sbrs	r24, 1
    2010:	bf c1       	rjmp	.+894    	; 0x2390 <__stack+0x291>
    2012:	ce 01       	movw	r24, r28
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	3c 01       	movw	r6, r24
    2018:	f6 01       	movw	r30, r12
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	f7 01       	movw	r30, r14
    201e:	93 fd       	sbrc	r25, 3
    2020:	85 91       	lpm	r24, Z+
    2022:	93 ff       	sbrs	r25, 3
    2024:	81 91       	ld	r24, Z+
    2026:	7f 01       	movw	r14, r30
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    202c:	ad c1       	rjmp	.+858    	; 0x2388 <__stack+0x289>
    202e:	85 32       	cpi	r24, 0x25	; 37
    2030:	39 f4       	brne	.+14     	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    2032:	93 fd       	sbrc	r25, 3
    2034:	85 91       	lpm	r24, Z+
    2036:	93 ff       	sbrs	r25, 3
    2038:	81 91       	ld	r24, Z+
    203a:	7f 01       	movw	r14, r30
    203c:	85 32       	cpi	r24, 0x25	; 37
    203e:	21 f4       	brne	.+8      	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    2040:	b6 01       	movw	r22, r12
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	2f df       	rcall	.-418    	; 0x1ea4 <fputc>
    2046:	e8 cf       	rjmp	.-48     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    2048:	91 2c       	mov	r9, r1
    204a:	21 2c       	mov	r2, r1
    204c:	31 2c       	mov	r3, r1
    204e:	ff e1       	ldi	r31, 0x1F	; 31
    2050:	f3 15       	cp	r31, r3
    2052:	d8 f0       	brcs	.+54     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2054:	8b 32       	cpi	r24, 0x2B	; 43
    2056:	79 f0       	breq	.+30     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    2058:	38 f4       	brcc	.+14     	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    205a:	80 32       	cpi	r24, 0x20	; 32
    205c:	79 f0       	breq	.+30     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    205e:	83 32       	cpi	r24, 0x23	; 35
    2060:	a1 f4       	brne	.+40     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2062:	23 2d       	mov	r18, r3
    2064:	20 61       	ori	r18, 0x10	; 16
    2066:	1d c0       	rjmp	.+58     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    2068:	8d 32       	cpi	r24, 0x2D	; 45
    206a:	61 f0       	breq	.+24     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    206c:	80 33       	cpi	r24, 0x30	; 48
    206e:	69 f4       	brne	.+26     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2070:	23 2d       	mov	r18, r3
    2072:	21 60       	ori	r18, 0x01	; 1
    2074:	16 c0       	rjmp	.+44     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    2076:	83 2d       	mov	r24, r3
    2078:	82 60       	ori	r24, 0x02	; 2
    207a:	38 2e       	mov	r3, r24
    207c:	e3 2d       	mov	r30, r3
    207e:	e4 60       	ori	r30, 0x04	; 4
    2080:	3e 2e       	mov	r3, r30
    2082:	2a c0       	rjmp	.+84     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    2084:	f3 2d       	mov	r31, r3
    2086:	f8 60       	ori	r31, 0x08	; 8
    2088:	1d c0       	rjmp	.+58     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    208a:	37 fc       	sbrc	r3, 7
    208c:	2d c0       	rjmp	.+90     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    208e:	20 ed       	ldi	r18, 0xD0	; 208
    2090:	28 0f       	add	r18, r24
    2092:	2a 30       	cpi	r18, 0x0A	; 10
    2094:	40 f0       	brcs	.+16     	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    2096:	8e 32       	cpi	r24, 0x2E	; 46
    2098:	b9 f4       	brne	.+46     	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    209a:	36 fc       	sbrc	r3, 6
    209c:	75 c1       	rjmp	.+746    	; 0x2388 <__stack+0x289>
    209e:	23 2d       	mov	r18, r3
    20a0:	20 64       	ori	r18, 0x40	; 64
    20a2:	32 2e       	mov	r3, r18
    20a4:	19 c0       	rjmp	.+50     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20a6:	36 fe       	sbrs	r3, 6
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    20aa:	8a e0       	ldi	r24, 0x0A	; 10
    20ac:	98 9e       	mul	r9, r24
    20ae:	20 0d       	add	r18, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	92 2e       	mov	r9, r18
    20b4:	11 c0       	rjmp	.+34     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20b6:	ea e0       	ldi	r30, 0x0A	; 10
    20b8:	2e 9e       	mul	r2, r30
    20ba:	20 0d       	add	r18, r0
    20bc:	11 24       	eor	r1, r1
    20be:	22 2e       	mov	r2, r18
    20c0:	f3 2d       	mov	r31, r3
    20c2:	f0 62       	ori	r31, 0x20	; 32
    20c4:	3f 2e       	mov	r3, r31
    20c6:	08 c0       	rjmp	.+16     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20c8:	8c 36       	cpi	r24, 0x6C	; 108
    20ca:	21 f4       	brne	.+8      	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20cc:	83 2d       	mov	r24, r3
    20ce:	80 68       	ori	r24, 0x80	; 128
    20d0:	38 2e       	mov	r3, r24
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20d4:	88 36       	cpi	r24, 0x68	; 104
    20d6:	41 f4       	brne	.+16     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20d8:	f7 01       	movw	r30, r14
    20da:	93 fd       	sbrc	r25, 3
    20dc:	85 91       	lpm	r24, Z+
    20de:	93 ff       	sbrs	r25, 3
    20e0:	81 91       	ld	r24, Z+
    20e2:	7f 01       	movw	r14, r30
    20e4:	81 11       	cpse	r24, r1
    20e6:	b3 cf       	rjmp	.-154    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    20e8:	98 2f       	mov	r25, r24
    20ea:	9f 7d       	andi	r25, 0xDF	; 223
    20ec:	95 54       	subi	r25, 0x45	; 69
    20ee:	93 30       	cpi	r25, 0x03	; 3
    20f0:	28 f4       	brcc	.+10     	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
    20f2:	0c 5f       	subi	r16, 0xFC	; 252
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	9f e3       	ldi	r25, 0x3F	; 63
    20f8:	99 83       	std	Y+1, r25	; 0x01
    20fa:	0d c0       	rjmp	.+26     	; 0x2116 <__stack+0x17>
    20fc:	83 36       	cpi	r24, 0x63	; 99
    20fe:	31 f0       	breq	.+12     	; 0x210c <__stack+0xd>
    2100:	83 37       	cpi	r24, 0x73	; 115
    2102:	71 f0       	breq	.+28     	; 0x2120 <__stack+0x21>
    2104:	83 35       	cpi	r24, 0x53	; 83
    2106:	09 f0       	breq	.+2      	; 0x210a <__stack+0xb>
    2108:	55 c0       	rjmp	.+170    	; 0x21b4 <__stack+0xb5>
    210a:	20 c0       	rjmp	.+64     	; 0x214c <__stack+0x4d>
    210c:	f8 01       	movw	r30, r16
    210e:	80 81       	ld	r24, Z
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	0e 5f       	subi	r16, 0xFE	; 254
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	88 24       	eor	r8, r8
    2118:	83 94       	inc	r8
    211a:	91 2c       	mov	r9, r1
    211c:	53 01       	movw	r10, r6
    211e:	12 c0       	rjmp	.+36     	; 0x2144 <__stack+0x45>
    2120:	28 01       	movw	r4, r16
    2122:	f2 e0       	ldi	r31, 0x02	; 2
    2124:	4f 0e       	add	r4, r31
    2126:	51 1c       	adc	r5, r1
    2128:	f8 01       	movw	r30, r16
    212a:	a0 80       	ld	r10, Z
    212c:	b1 80       	ldd	r11, Z+1	; 0x01
    212e:	36 fe       	sbrs	r3, 6
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <__stack+0x39>
    2132:	69 2d       	mov	r22, r9
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	02 c0       	rjmp	.+4      	; 0x213c <__stack+0x3d>
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	7f ef       	ldi	r23, 0xFF	; 255
    213c:	c5 01       	movw	r24, r10
    213e:	51 d1       	rcall	.+674    	; 0x23e2 <strnlen>
    2140:	4c 01       	movw	r8, r24
    2142:	82 01       	movw	r16, r4
    2144:	f3 2d       	mov	r31, r3
    2146:	ff 77       	andi	r31, 0x7F	; 127
    2148:	3f 2e       	mov	r3, r31
    214a:	15 c0       	rjmp	.+42     	; 0x2176 <__stack+0x77>
    214c:	28 01       	movw	r4, r16
    214e:	22 e0       	ldi	r18, 0x02	; 2
    2150:	42 0e       	add	r4, r18
    2152:	51 1c       	adc	r5, r1
    2154:	f8 01       	movw	r30, r16
    2156:	a0 80       	ld	r10, Z
    2158:	b1 80       	ldd	r11, Z+1	; 0x01
    215a:	36 fe       	sbrs	r3, 6
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <__stack+0x65>
    215e:	69 2d       	mov	r22, r9
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <__stack+0x69>
    2164:	6f ef       	ldi	r22, 0xFF	; 255
    2166:	7f ef       	ldi	r23, 0xFF	; 255
    2168:	c5 01       	movw	r24, r10
    216a:	30 d1       	rcall	.+608    	; 0x23cc <strnlen_P>
    216c:	4c 01       	movw	r8, r24
    216e:	f3 2d       	mov	r31, r3
    2170:	f0 68       	ori	r31, 0x80	; 128
    2172:	3f 2e       	mov	r3, r31
    2174:	82 01       	movw	r16, r4
    2176:	33 fc       	sbrc	r3, 3
    2178:	19 c0       	rjmp	.+50     	; 0x21ac <__stack+0xad>
    217a:	82 2d       	mov	r24, r2
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	88 16       	cp	r8, r24
    2180:	99 06       	cpc	r9, r25
    2182:	a0 f4       	brcc	.+40     	; 0x21ac <__stack+0xad>
    2184:	b6 01       	movw	r22, r12
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	8c de       	rcall	.-744    	; 0x1ea4 <fputc>
    218c:	2a 94       	dec	r2
    218e:	f5 cf       	rjmp	.-22     	; 0x217a <__stack+0x7b>
    2190:	f5 01       	movw	r30, r10
    2192:	37 fc       	sbrc	r3, 7
    2194:	85 91       	lpm	r24, Z+
    2196:	37 fe       	sbrs	r3, 7
    2198:	81 91       	ld	r24, Z+
    219a:	5f 01       	movw	r10, r30
    219c:	b6 01       	movw	r22, r12
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	81 de       	rcall	.-766    	; 0x1ea4 <fputc>
    21a2:	21 10       	cpse	r2, r1
    21a4:	2a 94       	dec	r2
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	82 1a       	sub	r8, r18
    21aa:	91 08       	sbc	r9, r1
    21ac:	81 14       	cp	r8, r1
    21ae:	91 04       	cpc	r9, r1
    21b0:	79 f7       	brne	.-34     	; 0x2190 <__stack+0x91>
    21b2:	e1 c0       	rjmp	.+450    	; 0x2376 <__stack+0x277>
    21b4:	84 36       	cpi	r24, 0x64	; 100
    21b6:	11 f0       	breq	.+4      	; 0x21bc <__stack+0xbd>
    21b8:	89 36       	cpi	r24, 0x69	; 105
    21ba:	39 f5       	brne	.+78     	; 0x220a <__stack+0x10b>
    21bc:	f8 01       	movw	r30, r16
    21be:	37 fe       	sbrs	r3, 7
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <__stack+0xd1>
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	0c 5f       	subi	r16, 0xFC	; 252
    21cc:	1f 4f       	sbci	r17, 0xFF	; 255
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <__stack+0xe1>
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	07 2e       	mov	r0, r23
    21d6:	00 0c       	add	r0, r0
    21d8:	88 0b       	sbc	r24, r24
    21da:	99 0b       	sbc	r25, r25
    21dc:	0e 5f       	subi	r16, 0xFE	; 254
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	f3 2d       	mov	r31, r3
    21e2:	ff 76       	andi	r31, 0x6F	; 111
    21e4:	3f 2e       	mov	r3, r31
    21e6:	97 ff       	sbrs	r25, 7
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <__stack+0xfd>
    21ea:	90 95       	com	r25
    21ec:	80 95       	com	r24
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255
    21f4:	8f 4f       	sbci	r24, 0xFF	; 255
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	f0 68       	ori	r31, 0x80	; 128
    21fa:	3f 2e       	mov	r3, r31
    21fc:	2a e0       	ldi	r18, 0x0A	; 10
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	a3 01       	movw	r20, r6
    2202:	fa d0       	rcall	.+500    	; 0x23f8 <__ultoa_invert>
    2204:	88 2e       	mov	r8, r24
    2206:	86 18       	sub	r8, r6
    2208:	44 c0       	rjmp	.+136    	; 0x2292 <__stack+0x193>
    220a:	85 37       	cpi	r24, 0x75	; 117
    220c:	31 f4       	brne	.+12     	; 0x221a <__stack+0x11b>
    220e:	23 2d       	mov	r18, r3
    2210:	2f 7e       	andi	r18, 0xEF	; 239
    2212:	b2 2e       	mov	r11, r18
    2214:	2a e0       	ldi	r18, 0x0A	; 10
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	25 c0       	rjmp	.+74     	; 0x2264 <__stack+0x165>
    221a:	93 2d       	mov	r25, r3
    221c:	99 7f       	andi	r25, 0xF9	; 249
    221e:	b9 2e       	mov	r11, r25
    2220:	8f 36       	cpi	r24, 0x6F	; 111
    2222:	c1 f0       	breq	.+48     	; 0x2254 <__stack+0x155>
    2224:	18 f4       	brcc	.+6      	; 0x222c <__stack+0x12d>
    2226:	88 35       	cpi	r24, 0x58	; 88
    2228:	79 f0       	breq	.+30     	; 0x2248 <__stack+0x149>
    222a:	ae c0       	rjmp	.+348    	; 0x2388 <__stack+0x289>
    222c:	80 37       	cpi	r24, 0x70	; 112
    222e:	19 f0       	breq	.+6      	; 0x2236 <__stack+0x137>
    2230:	88 37       	cpi	r24, 0x78	; 120
    2232:	21 f0       	breq	.+8      	; 0x223c <__stack+0x13d>
    2234:	a9 c0       	rjmp	.+338    	; 0x2388 <__stack+0x289>
    2236:	e9 2f       	mov	r30, r25
    2238:	e0 61       	ori	r30, 0x10	; 16
    223a:	be 2e       	mov	r11, r30
    223c:	b4 fe       	sbrs	r11, 4
    223e:	0d c0       	rjmp	.+26     	; 0x225a <__stack+0x15b>
    2240:	fb 2d       	mov	r31, r11
    2242:	f4 60       	ori	r31, 0x04	; 4
    2244:	bf 2e       	mov	r11, r31
    2246:	09 c0       	rjmp	.+18     	; 0x225a <__stack+0x15b>
    2248:	34 fe       	sbrs	r3, 4
    224a:	0a c0       	rjmp	.+20     	; 0x2260 <__stack+0x161>
    224c:	29 2f       	mov	r18, r25
    224e:	26 60       	ori	r18, 0x06	; 6
    2250:	b2 2e       	mov	r11, r18
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <__stack+0x161>
    2254:	28 e0       	ldi	r18, 0x08	; 8
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	05 c0       	rjmp	.+10     	; 0x2264 <__stack+0x165>
    225a:	20 e1       	ldi	r18, 0x10	; 16
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <__stack+0x165>
    2260:	20 e1       	ldi	r18, 0x10	; 16
    2262:	32 e0       	ldi	r19, 0x02	; 2
    2264:	f8 01       	movw	r30, r16
    2266:	b7 fe       	sbrs	r11, 7
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <__stack+0x179>
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0c 5f       	subi	r16, 0xFC	; 252
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	06 c0       	rjmp	.+12     	; 0x2284 <__stack+0x185>
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 5f       	subi	r16, 0xFE	; 254
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	a3 01       	movw	r20, r6
    2286:	b8 d0       	rcall	.+368    	; 0x23f8 <__ultoa_invert>
    2288:	88 2e       	mov	r8, r24
    228a:	86 18       	sub	r8, r6
    228c:	fb 2d       	mov	r31, r11
    228e:	ff 77       	andi	r31, 0x7F	; 127
    2290:	3f 2e       	mov	r3, r31
    2292:	36 fe       	sbrs	r3, 6
    2294:	0d c0       	rjmp	.+26     	; 0x22b0 <__stack+0x1b1>
    2296:	23 2d       	mov	r18, r3
    2298:	2e 7f       	andi	r18, 0xFE	; 254
    229a:	a2 2e       	mov	r10, r18
    229c:	89 14       	cp	r8, r9
    229e:	58 f4       	brcc	.+22     	; 0x22b6 <__stack+0x1b7>
    22a0:	34 fe       	sbrs	r3, 4
    22a2:	0b c0       	rjmp	.+22     	; 0x22ba <__stack+0x1bb>
    22a4:	32 fc       	sbrc	r3, 2
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__stack+0x1bb>
    22a8:	83 2d       	mov	r24, r3
    22aa:	8e 7e       	andi	r24, 0xEE	; 238
    22ac:	a8 2e       	mov	r10, r24
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <__stack+0x1bb>
    22b0:	b8 2c       	mov	r11, r8
    22b2:	a3 2c       	mov	r10, r3
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <__stack+0x1bd>
    22b6:	b8 2c       	mov	r11, r8
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <__stack+0x1bd>
    22ba:	b9 2c       	mov	r11, r9
    22bc:	a4 fe       	sbrs	r10, 4
    22be:	0f c0       	rjmp	.+30     	; 0x22de <__stack+0x1df>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e8 0d       	add	r30, r8
    22c4:	f1 1d       	adc	r31, r1
    22c6:	80 81       	ld	r24, Z
    22c8:	80 33       	cpi	r24, 0x30	; 48
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <__stack+0x1d5>
    22cc:	9a 2d       	mov	r25, r10
    22ce:	99 7e       	andi	r25, 0xE9	; 233
    22d0:	a9 2e       	mov	r10, r25
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <__stack+0x1e7>
    22d4:	a2 fe       	sbrs	r10, 2
    22d6:	06 c0       	rjmp	.+12     	; 0x22e4 <__stack+0x1e5>
    22d8:	b3 94       	inc	r11
    22da:	b3 94       	inc	r11
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <__stack+0x1e7>
    22de:	8a 2d       	mov	r24, r10
    22e0:	86 78       	andi	r24, 0x86	; 134
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <__stack+0x1e7>
    22e4:	b3 94       	inc	r11
    22e6:	a3 fc       	sbrc	r10, 3
    22e8:	10 c0       	rjmp	.+32     	; 0x230a <__stack+0x20b>
    22ea:	a0 fe       	sbrs	r10, 0
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <__stack+0x1fb>
    22ee:	b2 14       	cp	r11, r2
    22f0:	80 f4       	brcc	.+32     	; 0x2312 <__stack+0x213>
    22f2:	28 0c       	add	r2, r8
    22f4:	92 2c       	mov	r9, r2
    22f6:	9b 18       	sub	r9, r11
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <__stack+0x215>
    22fa:	b2 14       	cp	r11, r2
    22fc:	58 f4       	brcc	.+22     	; 0x2314 <__stack+0x215>
    22fe:	b6 01       	movw	r22, r12
    2300:	80 e2       	ldi	r24, 0x20	; 32
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	cf dd       	rcall	.-1122   	; 0x1ea4 <fputc>
    2306:	b3 94       	inc	r11
    2308:	f8 cf       	rjmp	.-16     	; 0x22fa <__stack+0x1fb>
    230a:	b2 14       	cp	r11, r2
    230c:	18 f4       	brcc	.+6      	; 0x2314 <__stack+0x215>
    230e:	2b 18       	sub	r2, r11
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <__stack+0x217>
    2312:	98 2c       	mov	r9, r8
    2314:	21 2c       	mov	r2, r1
    2316:	a4 fe       	sbrs	r10, 4
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <__stack+0x239>
    231a:	b6 01       	movw	r22, r12
    231c:	80 e3       	ldi	r24, 0x30	; 48
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	c1 dd       	rcall	.-1150   	; 0x1ea4 <fputc>
    2322:	a2 fe       	sbrs	r10, 2
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <__stack+0x253>
    2326:	a1 fc       	sbrc	r10, 1
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <__stack+0x231>
    232a:	88 e7       	ldi	r24, 0x78	; 120
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <__stack+0x235>
    2330:	88 e5       	ldi	r24, 0x58	; 88
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	b6 01       	movw	r22, r12
    2336:	0c c0       	rjmp	.+24     	; 0x2350 <__stack+0x251>
    2338:	8a 2d       	mov	r24, r10
    233a:	86 78       	andi	r24, 0x86	; 134
    233c:	51 f0       	breq	.+20     	; 0x2352 <__stack+0x253>
    233e:	a1 fe       	sbrs	r10, 1
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <__stack+0x247>
    2342:	8b e2       	ldi	r24, 0x2B	; 43
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <__stack+0x249>
    2346:	80 e2       	ldi	r24, 0x20	; 32
    2348:	a7 fc       	sbrc	r10, 7
    234a:	8d e2       	ldi	r24, 0x2D	; 45
    234c:	b6 01       	movw	r22, r12
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a9 dd       	rcall	.-1198   	; 0x1ea4 <fputc>
    2352:	89 14       	cp	r8, r9
    2354:	30 f4       	brcc	.+12     	; 0x2362 <__stack+0x263>
    2356:	b6 01       	movw	r22, r12
    2358:	80 e3       	ldi	r24, 0x30	; 48
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a3 dd       	rcall	.-1210   	; 0x1ea4 <fputc>
    235e:	9a 94       	dec	r9
    2360:	f8 cf       	rjmp	.-16     	; 0x2352 <__stack+0x253>
    2362:	8a 94       	dec	r8
    2364:	f3 01       	movw	r30, r6
    2366:	e8 0d       	add	r30, r8
    2368:	f1 1d       	adc	r31, r1
    236a:	80 81       	ld	r24, Z
    236c:	b6 01       	movw	r22, r12
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	99 dd       	rcall	.-1230   	; 0x1ea4 <fputc>
    2372:	81 10       	cpse	r8, r1
    2374:	f6 cf       	rjmp	.-20     	; 0x2362 <__stack+0x263>
    2376:	22 20       	and	r2, r2
    2378:	09 f4       	brne	.+2      	; 0x237c <__stack+0x27d>
    237a:	4e ce       	rjmp	.-868    	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    237c:	b6 01       	movw	r22, r12
    237e:	80 e2       	ldi	r24, 0x20	; 32
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	90 dd       	rcall	.-1248   	; 0x1ea4 <fputc>
    2384:	2a 94       	dec	r2
    2386:	f7 cf       	rjmp	.-18     	; 0x2376 <__stack+0x277>
    2388:	f6 01       	movw	r30, r12
    238a:	86 81       	ldd	r24, Z+6	; 0x06
    238c:	97 81       	ldd	r25, Z+7	; 0x07
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <__stack+0x295>
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	9f ef       	ldi	r25, 0xFF	; 255
    2394:	2b 96       	adiw	r28, 0x0b	; 11
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	9f 90       	pop	r9
    23b6:	8f 90       	pop	r8
    23b8:	7f 90       	pop	r7
    23ba:	6f 90       	pop	r6
    23bc:	5f 90       	pop	r5
    23be:	4f 90       	pop	r4
    23c0:	3f 90       	pop	r3
    23c2:	2f 90       	pop	r2
    23c4:	08 95       	ret

000023c6 <__ctype_isfalse>:
    23c6:	99 27       	eor	r25, r25
    23c8:	88 27       	eor	r24, r24

000023ca <__ctype_istrue>:
    23ca:	08 95       	ret

000023cc <strnlen_P>:
    23cc:	fc 01       	movw	r30, r24
    23ce:	05 90       	lpm	r0, Z+
    23d0:	61 50       	subi	r22, 0x01	; 1
    23d2:	70 40       	sbci	r23, 0x00	; 0
    23d4:	01 10       	cpse	r0, r1
    23d6:	d8 f7       	brcc	.-10     	; 0x23ce <strnlen_P+0x2>
    23d8:	80 95       	com	r24
    23da:	90 95       	com	r25
    23dc:	8e 0f       	add	r24, r30
    23de:	9f 1f       	adc	r25, r31
    23e0:	08 95       	ret

000023e2 <strnlen>:
    23e2:	fc 01       	movw	r30, r24
    23e4:	61 50       	subi	r22, 0x01	; 1
    23e6:	70 40       	sbci	r23, 0x00	; 0
    23e8:	01 90       	ld	r0, Z+
    23ea:	01 10       	cpse	r0, r1
    23ec:	d8 f7       	brcc	.-10     	; 0x23e4 <strnlen+0x2>
    23ee:	80 95       	com	r24
    23f0:	90 95       	com	r25
    23f2:	8e 0f       	add	r24, r30
    23f4:	9f 1f       	adc	r25, r31
    23f6:	08 95       	ret

000023f8 <__ultoa_invert>:
    23f8:	fa 01       	movw	r30, r20
    23fa:	aa 27       	eor	r26, r26
    23fc:	28 30       	cpi	r18, 0x08	; 8
    23fe:	51 f1       	breq	.+84     	; 0x2454 <__ultoa_invert+0x5c>
    2400:	20 31       	cpi	r18, 0x10	; 16
    2402:	81 f1       	breq	.+96     	; 0x2464 <__ultoa_invert+0x6c>
    2404:	e8 94       	clt
    2406:	6f 93       	push	r22
    2408:	6e 7f       	andi	r22, 0xFE	; 254
    240a:	6e 5f       	subi	r22, 0xFE	; 254
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	8f 4f       	sbci	r24, 0xFF	; 255
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	af 4f       	sbci	r26, 0xFF	; 255
    2414:	b1 e0       	ldi	r27, 0x01	; 1
    2416:	3e d0       	rcall	.+124    	; 0x2494 <__ultoa_invert+0x9c>
    2418:	b4 e0       	ldi	r27, 0x04	; 4
    241a:	3c d0       	rcall	.+120    	; 0x2494 <__ultoa_invert+0x9c>
    241c:	67 0f       	add	r22, r23
    241e:	78 1f       	adc	r23, r24
    2420:	89 1f       	adc	r24, r25
    2422:	9a 1f       	adc	r25, r26
    2424:	a1 1d       	adc	r26, r1
    2426:	68 0f       	add	r22, r24
    2428:	79 1f       	adc	r23, r25
    242a:	8a 1f       	adc	r24, r26
    242c:	91 1d       	adc	r25, r1
    242e:	a1 1d       	adc	r26, r1
    2430:	6a 0f       	add	r22, r26
    2432:	71 1d       	adc	r23, r1
    2434:	81 1d       	adc	r24, r1
    2436:	91 1d       	adc	r25, r1
    2438:	a1 1d       	adc	r26, r1
    243a:	20 d0       	rcall	.+64     	; 0x247c <__ultoa_invert+0x84>
    243c:	09 f4       	brne	.+2      	; 0x2440 <__ultoa_invert+0x48>
    243e:	68 94       	set
    2440:	3f 91       	pop	r19
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	26 9f       	mul	r18, r22
    2446:	11 24       	eor	r1, r1
    2448:	30 19       	sub	r19, r0
    244a:	30 5d       	subi	r19, 0xD0	; 208
    244c:	31 93       	st	Z+, r19
    244e:	de f6       	brtc	.-74     	; 0x2406 <__ultoa_invert+0xe>
    2450:	cf 01       	movw	r24, r30
    2452:	08 95       	ret
    2454:	46 2f       	mov	r20, r22
    2456:	47 70       	andi	r20, 0x07	; 7
    2458:	40 5d       	subi	r20, 0xD0	; 208
    245a:	41 93       	st	Z+, r20
    245c:	b3 e0       	ldi	r27, 0x03	; 3
    245e:	0f d0       	rcall	.+30     	; 0x247e <__ultoa_invert+0x86>
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__ultoa_invert+0x5c>
    2462:	f6 cf       	rjmp	.-20     	; 0x2450 <__ultoa_invert+0x58>
    2464:	46 2f       	mov	r20, r22
    2466:	4f 70       	andi	r20, 0x0F	; 15
    2468:	40 5d       	subi	r20, 0xD0	; 208
    246a:	4a 33       	cpi	r20, 0x3A	; 58
    246c:	18 f0       	brcs	.+6      	; 0x2474 <__ultoa_invert+0x7c>
    246e:	49 5d       	subi	r20, 0xD9	; 217
    2470:	31 fd       	sbrc	r19, 1
    2472:	40 52       	subi	r20, 0x20	; 32
    2474:	41 93       	st	Z+, r20
    2476:	02 d0       	rcall	.+4      	; 0x247c <__ultoa_invert+0x84>
    2478:	a9 f7       	brne	.-22     	; 0x2464 <__ultoa_invert+0x6c>
    247a:	ea cf       	rjmp	.-44     	; 0x2450 <__ultoa_invert+0x58>
    247c:	b4 e0       	ldi	r27, 0x04	; 4
    247e:	a6 95       	lsr	r26
    2480:	97 95       	ror	r25
    2482:	87 95       	ror	r24
    2484:	77 95       	ror	r23
    2486:	67 95       	ror	r22
    2488:	ba 95       	dec	r27
    248a:	c9 f7       	brne	.-14     	; 0x247e <__ultoa_invert+0x86>
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	61 05       	cpc	r22, r1
    2490:	71 05       	cpc	r23, r1
    2492:	08 95       	ret
    2494:	9b 01       	movw	r18, r22
    2496:	ac 01       	movw	r20, r24
    2498:	0a 2e       	mov	r0, r26
    249a:	06 94       	lsr	r0
    249c:	57 95       	ror	r21
    249e:	47 95       	ror	r20
    24a0:	37 95       	ror	r19
    24a2:	27 95       	ror	r18
    24a4:	ba 95       	dec	r27
    24a6:	c9 f7       	brne	.-14     	; 0x249a <__ultoa_invert+0xa2>
    24a8:	62 0f       	add	r22, r18
    24aa:	73 1f       	adc	r23, r19
    24ac:	84 1f       	adc	r24, r20
    24ae:	95 1f       	adc	r25, r21
    24b0:	a0 1d       	adc	r26, r0
    24b2:	08 95       	ret

000024b4 <_exit>:
    24b4:	f8 94       	cli

000024b6 <__stop_program>:
    24b6:	ff cf       	rjmp	.-2      	; 0x24b6 <__stop_program>
