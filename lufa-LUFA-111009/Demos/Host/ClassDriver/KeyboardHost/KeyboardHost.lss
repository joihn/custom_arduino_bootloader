
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001a78  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001b30  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007152  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024c4  00000000  00000000  00009046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037e8  00000000  00000000  0000b50a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb4  00000000  00000000  0000ecf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c04  00000000  00000000  0000f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ba1  00000000  00000000  000124ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0001704d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1c c1       	rjmp	.+568    	; 0x23a <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c1       	rjmp	.+592    	; 0x276 <__bad_interrupt>
      26:	00 00       	nop
      28:	4b c5       	rjmp	.+2710   	; 0xac0 <__vector_10>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1c c1       	rjmp	.+568    	; 0x276 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c c1       	rjmp	.+536    	; 0x276 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	08 c1       	rjmp	.+528    	; 0x276 <__bad_interrupt>
      66:	00 00       	nop
      68:	06 c1       	rjmp	.+524    	; 0x276 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f2 c0       	rjmp	.+484    	; 0x276 <__bad_interrupt>
      92:	00 00       	nop
      94:	f0 c0       	rjmp	.+480    	; 0x276 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 03       	mulsu	r18, r21
      9a:	16 04       	cpc	r1, r6
      9c:	43 03       	mulsu	r20, r19
      9e:	4d 03       	fmul	r20, r21
      a0:	78 03       	fmul	r23, r16
      a2:	a0 03       	fmuls	r18, r16
      a4:	ab 03       	fmulsu	r18, r19
      a6:	bc 03       	fmulsu	r19, r20
      a8:	d8 03       	fmulsu	r21, r16
      aa:	ff 03       	fmulsu	r23, r23

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4508>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4503>:
     131:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     141:	74 65 64 2e 0d 0a 00                                ted....

00000148 <__c.4501>:
     148:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     158:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     168:	2e 0d 0a 00                                         ....

0000016c <__c.4499>:
     16c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     17c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     18c:	6f 6e 2e 0d 0a 00                                   on....

00000192 <__c.4497>:
     192:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a2:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     1b2:	6f 61 72 64 2e 0d 0a 00                             oard....

000001ba <__c.4495>:
     1ba:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ca:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1da:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e7 <__c.4488>:
     1e7:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f7:	68 65 64 2e 0d 0a 00                                hed....

000001fe <__c.4483>:
     1fe:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20e:	0d 0a 00                                            ...

00000211 <__c.4468>:
     211:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     221:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     231:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

0000023a <__ctors_end>:
     23a:	11 24       	eor	r1, r1
     23c:	1f be       	out	0x3f, r1	; 63
     23e:	cf ef       	ldi	r28, 0xFF	; 255
     240:	d0 e2       	ldi	r29, 0x20	; 32
     242:	de bf       	out	0x3e, r29	; 62
     244:	cd bf       	out	0x3d, r28	; 61

00000246 <__do_copy_data>:
     246:	11 e0       	ldi	r17, 0x01	; 1
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b1 e0       	ldi	r27, 0x01	; 1
     24c:	e8 e7       	ldi	r30, 0x78	; 120
     24e:	fa e1       	ldi	r31, 0x1A	; 26
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0b bf       	out	0x3b, r16	; 59
     254:	02 c0       	rjmp	.+4      	; 0x25a <__do_copy_data+0x14>
     256:	07 90       	elpm	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	a4 32       	cpi	r26, 0x24	; 36
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <__do_copy_data+0x10>

00000260 <__do_clear_bss>:
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	a4 e2       	ldi	r26, 0x24	; 36
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	a6 34       	cpi	r26, 0x46	; 70
     26c:	b2 07       	cpc	r27, r18
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	a0 d0       	rcall	.+320    	; 0x3b2 <main>
     272:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     278:	9b b1       	in	r25, 0x0b	; 11
     27a:	9f 70       	andi	r25, 0x0F	; 15
     27c:	89 2b       	or	r24, r25
     27e:	8b b9       	out	0x0b, r24	; 11
     280:	08 95       	ret

00000282 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     282:	84 b7       	in	r24, 0x34	; 52
     284:	87 7f       	andi	r24, 0xF7	; 247
     286:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	a8 95       	wdr
     28e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     292:	88 61       	ori	r24, 0x18	; 24
     294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     298:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     29c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2ae:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b0:	83 e3       	ldi	r24, 0x33	; 51
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2b8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c6:	88 e1       	ldi	r24, 0x18	; 24
     2c8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2cc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ce:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2d0:	8a b1       	in	r24, 0x0a	; 10
     2d2:	80 6f       	ori	r24, 0xF0	; 240
     2d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2dc:	db d3       	rcall	.+1974   	; 0xa94 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     2de:	a0 e4       	ldi	r26, 0x40	; 64
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	e2 e3       	ldi	r30, 0x32	; 50
     2e4:	f1 e0       	ldi	r31, 0x01	; 1
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	fc 93       	st	X, r31
     2ea:	ee 93       	st	-X, r30
					stdout = Stream;
     2ec:	13 96       	adiw	r26, 0x03	; 3
     2ee:	fc 93       	st	X, r31
     2f0:	ee 93       	st	-X, r30
     2f2:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     2f4:	8e e0       	ldi	r24, 0x0E	; 14
     2f6:	df 01       	movw	r26, r30
     2f8:	1d 92       	st	X+, r1
     2fa:	8a 95       	dec	r24
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <SetupHardware+0x76>
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	83 83       	std	Z+3, r24	; 0x03
     302:	81 e1       	ldi	r24, 0x11	; 17
     304:	9a e0       	ldi	r25, 0x0A	; 10
     306:	91 87       	std	Z+9, r25	; 0x09
     308:	80 87       	std	Z+8, r24	; 0x08
     30a:	8a e1       	ldi	r24, 0x1A	; 26
     30c:	9a e0       	ldi	r25, 0x0A	; 10
     30e:	93 87       	std	Z+11, r25	; 0x0b
     310:	82 87       	std	Z+10, r24	; 0x0a
     312:	08 95       	ret

00000314 <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	28 97       	sbiw	r28, 0x08	; 8
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     328:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
     32c:	8b 30       	cpi	r24, 0x0B	; 11
     32e:	c1 f5       	brne	.+112    	; 0x3a0 <KeyboardHost_Task+0x8c>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 ca 09 	call	0x1394	; 0x1394 <HID_Host_IsReportReceived>
     338:	88 23       	and	r24, r24
     33a:	91 f1       	breq	.+100    	; 0x3a0 <KeyboardHost_Task+0x8c>
	{
		USB_KeyboardReport_Data_t KeyboardReport;
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     33c:	be 01       	movw	r22, r28
     33e:	6f 5f       	subi	r22, 0xFF	; 255
     340:	7f 4f       	sbci	r23, 0xFF	; 255
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	e3 d7       	rcall	.+4038   	; 0x130e <HID_Host_ReceiveReport>

		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	81 11       	cpse	r24, r1
     34c:	80 e1       	ldi	r24, 0x10	; 16
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     34e:	9b b1       	in	r25, 0x0b	; 11
     350:	9f 7e       	andi	r25, 0xEF	; 239
     352:	89 2b       	or	r24, r25
     354:	8b b9       	out	0x0b, r24	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     356:	8b 81       	ldd	r24, Y+3	; 0x03

		if (KeyCode)
     358:	88 23       	and	r24, r24
     35a:	11 f1       	breq	.+68     	; 0x3a0 <KeyboardHost_Task+0x8c>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     35c:	2b b1       	in	r18, 0x0b	; 11
     35e:	90 e2       	ldi	r25, 0x20	; 32
     360:	92 27       	eor	r25, r18
     362:	9b b9       	out	0x0b, r25	; 11
			char PressedKey = 0;

			LEDs_ToggleLEDs(LEDS_LED2);

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     364:	9c ef       	ldi	r25, 0xFC	; 252
     366:	98 0f       	add	r25, r24
     368:	9a 31       	cpi	r25, 0x1A	; 26
     36a:	10 f4       	brcc	.+4      	; 0x370 <KeyboardHost_Task+0x5c>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     36c:	83 5c       	subi	r24, 0xC3	; 195
     36e:	11 c0       	rjmp	.+34     	; 0x392 <KeyboardHost_Task+0x7e>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     370:	92 ee       	ldi	r25, 0xE2	; 226
     372:	98 0f       	add	r25, r24
     374:	99 30       	cpi	r25, 0x09	; 9
     376:	10 f4       	brcc	.+4      	; 0x37c <KeyboardHost_Task+0x68>
			         (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     378:	8d 5e       	subi	r24, 0xED	; 237
     37a:	0b c0       	rjmp	.+22     	; 0x392 <KeyboardHost_Task+0x7e>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     37c:	87 32       	cpi	r24, 0x27	; 39
     37e:	31 f0       	breq	.+12     	; 0x38c <KeyboardHost_Task+0x78>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     380:	8c 32       	cpi	r24, 0x2C	; 44
     382:	31 f0       	breq	.+12     	; 0x390 <KeyboardHost_Task+0x7c>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     384:	88 32       	cpi	r24, 0x28	; 40
     386:	61 f4       	brne	.+24     	; 0x3a0 <KeyboardHost_Task+0x8c>
			{
				PressedKey = '\n';
     388:	8a e0       	ldi	r24, 0x0A	; 10
     38a:	03 c0       	rjmp	.+6      	; 0x392 <KeyboardHost_Task+0x7e>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
			{
				PressedKey = '0';
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	01 c0       	rjmp	.+2      	; 0x392 <KeyboardHost_Task+0x7e>
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
			{
				PressedKey = ' ';
     390:	80 e2       	ldi	r24, 0x20	; 32
			{
				PressedKey = '\n';
			}
			
			if (PressedKey)
			  putchar(PressedKey);
     392:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <__iob+0x2>
     396:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <__iob+0x3>
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 35 0a 	call	0x146a	; 0x146a <fputc>
		}
	}
}
     3a0:	28 96       	adiw	r28, 0x08	; 8
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     3b2:	67 df       	rcall	.-306    	; 0x282 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     3b4:	81 e1       	ldi	r24, 0x11	; 17
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0e 94 98 0a 	call	0x1530	; 0x1530 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3bc:	80 e1       	ldi	r24, 0x10	; 16
     3be:	5c df       	rcall	.-328    	; 0x278 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		KeyboardHost_Task();
     3c0:	78 94       	sei
     3c2:	a8 df       	rcall	.-176    	; 0x314 <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     3c4:	4c d6       	rcall	.+3224   	; 0x105e <USB_USBTask>
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <main+0x10>

000003c8 <EVENT_USB_Host_DeviceAttached>:
     3c8:	8e ef       	ldi	r24, 0xFE	; 254
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 98 0a 	call	0x1530	; 0x1530 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3d0:	80 ea       	ldi	r24, 0xA0	; 160
     3d2:	52 cf       	rjmp	.-348    	; 0x278 <LEDs_SetAllLEDs>

000003d4 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3d4:	87 ee       	ldi	r24, 0xE7	; 231
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 98 0a 	call	0x1530	; 0x1530 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3dc:	80 e1       	ldi	r24, 0x10	; 16
     3de:	4c cf       	rjmp	.-360    	; 0x278 <LEDs_SetAllLEDs>

000003e0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	c2 50       	subi	r28, 0x02	; 2
     3ea:	d2 40       	sbci	r29, 0x02	; 2
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3f6:	80 ea       	ldi	r24, 0xA0	; 160
     3f8:	3f df       	rcall	.-386    	; 0x278 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	32 e0       	ldi	r19, 0x02	; 2
     3fe:	ae 01       	movw	r20, r28
     400:	4f 5f       	subi	r20, 0xFF	; 255
     402:	5f 4f       	sbci	r21, 0xFF	; 255
     404:	be 01       	movw	r22, r28
     406:	6f 5f       	subi	r22, 0xFF	; 255
     408:	7d 4f       	sbci	r23, 0xFD	; 253
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	59 d4       	rcall	.+2226   	; 0xcc0 <USB_Host_GetDeviceConfigDescriptor>
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     412:	8a eb       	ldi	r24, 0xBA	; 186
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	17 c0       	rjmp	.+46     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     418:	cf 5f       	subi	r28, 0xFF	; 255
     41a:	dd 4f       	sbci	r29, 0xFD	; 253
     41c:	68 81       	ld	r22, Y
     41e:	79 81       	ldd	r23, Y+1	; 0x01
     420:	c1 50       	subi	r28, 0x01	; 1
     422:	d2 40       	sbci	r29, 0x02	; 2
     424:	ae 01       	movw	r20, r28
     426:	4f 5f       	subi	r20, 0xFF	; 255
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	77 d6       	rcall	.+3310   	; 0x111e <HID_Host_ConfigurePipes>
     430:	88 23       	and	r24, r24
     432:	19 f0       	breq	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     434:	82 e9       	ldi	r24, 0x92	; 146
     436:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	e9 d5       	rcall	.+3026   	; 0x1010 <USB_Host_SetDeviceConfiguration>
     43e:	88 23       	and	r24, r24
     440:	31 f0       	breq	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     442:	8c e6       	ldi	r24, 0x6C	; 108
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 98 0a 	call	0x1530	; 0x1530 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     44a:	80 e9       	ldi	r24, 0x90	; 144
		return;
	}

	if (HID_Host_SetBootProtocol(&Keyboard_HID_Interface) != 0)
     44c:	13 c0       	rjmp	.+38     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	bb d7       	rcall	.+3958   	; 0x13ca <HID_Host_SetBootProtocol>
     454:	88 23       	and	r24, r24
     456:	49 f0       	breq	.+18     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     458:	88 e4       	ldi	r24, 0x48	; 72
     45a:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     45c:	0e 94 98 0a 	call	0x1530	; 0x1530 <puts_P>
     460:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     462:	0a df       	rcall	.-492    	; 0x278 <LEDs_SetAllLEDs>
     464:	80 e0       	ldi	r24, 0x00	; 0
		return;
     466:	d4 d5       	rcall	.+2984   	; 0x1010 <USB_Host_SetDeviceConfiguration>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     468:	06 c0       	rjmp	.+12     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46a:	81 e3       	ldi	r24, 0x31	; 49
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 98 0a 	call	0x1530	; 0x1530 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     472:	80 e6       	ldi	r24, 0x60	; 96
     474:	01 df       	rcall	.-510    	; 0x278 <LEDs_SetAllLEDs>
}
     476:	ce 5f       	subi	r28, 0xFE	; 254
     478:	dd 4f       	sbci	r29, 0xFD	; 253
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     48a:	c8 2f       	mov	r28, r24
	USB_Disable();
     48c:	9b d2       	rcall	.+1334   	; 0x9c4 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     48e:	1f 92       	push	r1
     490:	cf 93       	push	r28
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     49e:	80 e9       	ldi	r24, 0x90	; 144
     4a0:	eb de       	rcall	.-554    	; 0x278 <LEDs_SetAllLEDs>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	ff cf       	rjmp	.-2      	; 0x4aa <EVENT_USB_Host_HostError+0x20>

000004ac <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4ac:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_HostState>
     4b0:	1f 92       	push	r1
     4b2:	9f 93       	push	r25
     4b4:	1f 92       	push	r1
     4b6:	6f 93       	push	r22
     4b8:	1f 92       	push	r1
     4ba:	8f 93       	push	r24
     4bc:	8c ea       	ldi	r24, 0xAC	; 172
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4c8:	8d b7       	in	r24, 0x3d	; 61
     4ca:	9e b7       	in	r25, 0x3e	; 62
     4cc:	08 96       	adiw	r24, 0x08	; 8
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	9e bf       	out	0x3e, r25	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	8d bf       	out	0x3d, r24	; 61
     4d8:	80 e9       	ldi	r24, 0x90	; 144
     4da:	ce ce       	rjmp	.-612    	; 0x278 <LEDs_SetAllLEDs>

000004dc <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4dc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4e0:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     4e2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4e6:	9d 7f       	andi	r25, 0xFD	; 253
     4e8:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     4ec:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4f0:	92 60       	ori	r25, 0x02	; 2
     4f2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     4f6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     4fa:	91 fd       	sbrc	r25, 1
     4fc:	fc cf       	rjmp	.-8      	; 0x4f6 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     4fe:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     502:	91 60       	ori	r25, 0x01	; 1
     504:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     508:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     50c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     510:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     512:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     516:	2f 7d       	andi	r18, 0xDF	; 223
     518:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     51c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     520:	2f 7d       	andi	r18, 0xDF	; 223
     522:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     526:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     528:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     52c:	35 ff       	sbrs	r19, 5
     52e:	0b c0       	rjmp	.+22     	; 0x546 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     530:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     534:	2f 7d       	andi	r18, 0xDF	; 223
     536:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     53a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     53e:	2d 7f       	andi	r18, 0xFD	; 253
     540:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     544:	08 c0       	rjmp	.+16     	; 0x556 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     546:	ef ec       	ldi	r30, 0xCF	; 207
     548:	f7 e0       	ldi	r31, 0x07	; 7
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <USB_Host_ResetDevice+0x6e>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <USB_Host_ResetDevice+0x74>
     550:	00 00       	nop
     552:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     554:	49 f7       	brne	.-46     	; 0x528 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     556:	99 23       	and	r25, r25
     558:	29 f0       	breq	.+10     	; 0x564 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     55a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     55e:	90 62       	ori	r25, 0x20	; 32
     560:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     564:	81 11       	cpse	r24, r1
     566:	05 c0       	rjmp	.+10     	; 0x572 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     568:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     56c:	8e 7f       	andi	r24, 0xFE	; 254
     56e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     572:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     576:	82 60       	ori	r24, 0x02	; 2
     578:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     57c:	08 95       	ret

0000057e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     57e:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     582:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     584:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     588:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     58a:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     58e:	3f 7d       	andi	r19, 0xDF	; 223
     590:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     594:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     598:	3f 7d       	andi	r19, 0xDF	; 223
     59a:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     59e:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5a2:	31 60       	ori	r19, 0x01	; 1
     5a4:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5a8:	88 23       	and	r24, r24
     5aa:	39 f1       	breq	.+78     	; 0x5fa <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5ac:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5b0:	35 ff       	sbrs	r19, 5
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5b4:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5b8:	3f 7d       	andi	r19, 0xDF	; 223
     5ba:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5be:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5c0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <USB_HostState>
     5c4:	31 30       	cpi	r19, 0x01	; 1
     5c6:	c1 f0       	breq	.+48     	; 0x5f8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5c8:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     5cc:	34 ff       	sbrs	r19, 4
     5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5d0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     5d4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     5d8:	8f 7e       	andi	r24, 0xEF	; 239
     5da:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     5de:	82 e0       	ldi	r24, 0x02	; 2

			break;
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     5e2:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     5e6:	31 ff       	sbrs	r19, 1
     5e8:	df cf       	rjmp	.-66     	; 0x5a8 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5ea:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     5ee:	8d 7f       	andi	r24, 0xFD	; 253
     5f0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     5f4:	83 e0       	ldi	r24, 0x03	; 3

			break;
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     5f8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     5fa:	21 11       	cpse	r18, r1
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5fe:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     602:	2e 7f       	andi	r18, 0xFE	; 254
     604:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     608:	99 23       	and	r25, r25
     60a:	29 f0       	breq	.+10     	; 0x616 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     60c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     610:	90 62       	ori	r25, 0x20	; 32
     612:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     616:	08 95       	ret

00000618 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     618:	ef 92       	push	r14
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	28 97       	sbiw	r28, 0x08	; 8
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     632:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <USB_HostState>
     636:	8e 2f       	mov	r24, r30
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	8a 30       	cpi	r24, 0x0A	; 10
     63c:	91 05       	cpc	r25, r1
     63e:	08 f0       	brcs	.+2      	; 0x642 <USB_Host_ProcessNextHostState+0x2a>
     640:	f5 c0       	rjmp	.+490    	; 0x82c <USB_Host_ProcessNextHostState+0x214>
     642:	fc 01       	movw	r30, r24
     644:	e4 5b       	subi	r30, 0xB4	; 180
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	07 c7       	rjmp	.+3598   	; 0x1458 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     64a:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <WaitMSRemaining.2935>
     64e:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <WaitMSRemaining.2935+0x1>
     652:	01 15       	cp	r16, r1
     654:	11 05       	cpc	r17, r1
     656:	09 f4       	brne	.+2      	; 0x65a <USB_Host_ProcessNextHostState+0x42>
     658:	e9 c0       	rjmp	.+466    	; 0x82c <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 df       	rcall	.-224    	; 0x57e <USB_Host_WaitMS>
     65e:	88 23       	and	r24, r24
     660:	31 f0       	breq	.+12     	; 0x66e <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     662:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
     666:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     66a:	91 e0       	ldi	r25, 0x01	; 1
					break;
     66c:	d1 c0       	rjmp	.+418    	; 0x810 <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     66e:	01 50       	subi	r16, 0x01	; 1
     670:	11 09       	sbc	r17, r1
     672:	10 93 26 01 	sts	0x0126, r17	; 0x800126 <WaitMSRemaining.2935+0x1>
     676:	00 93 25 01 	sts	0x0125, r16	; 0x800125 <WaitMSRemaining.2935>
     67a:	01 2b       	or	r16, r17
     67c:	09 f0       	breq	.+2      	; 0x680 <USB_Host_ProcessNextHostState+0x68>
     67e:	d6 c0       	rjmp	.+428    	; 0x82c <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     680:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     684:	07 c0       	rjmp	.+14     	; 0x694 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     686:	88 ee       	ldi	r24, 0xE8	; 232
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     68e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
			break;
     698:	c9 c0       	rjmp	.+402    	; 0x82c <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     69a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <WaitMSRemaining.2935>
     69e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <WaitMSRemaining.2935+0x1>
     6a2:	9c 01       	movw	r18, r24
     6a4:	21 50       	subi	r18, 0x01	; 1
     6a6:	31 09       	sbc	r19, r1
     6a8:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <WaitMSRemaining.2935+0x1>
     6ac:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <WaitMSRemaining.2935>
     6b0:	89 2b       	or	r24, r25
     6b2:	39 f0       	breq	.+14     	; 0x6c2 <USB_Host_ProcessNextHostState+0xaa>
     6b4:	8f ec       	ldi	r24, 0xCF	; 207
     6b6:	97 e0       	ldi	r25, 0x07	; 7
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <USB_Host_ProcessNextHostState+0xa0>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <USB_Host_ProcessNextHostState+0xa6>
     6be:	00 00       	nop
     6c0:	b5 c0       	rjmp	.+362    	; 0x82c <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     6c2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     6c4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6c8:	80 61       	ori	r24, 0x10	; 16
     6ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     6ce:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     6d2:	8b 7f       	andi	r24, 0xFB	; 251
     6d4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     6d8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     6dc:	80 61       	ori	r24, 0x10	; 16
     6de:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     6e2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     6e6:	82 60       	ori	r24, 0x02	; 2
     6e8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	d2 cf       	rjmp	.-92     	; 0x694 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6f0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6f4:	80 ff       	sbrs	r24, 0
     6f6:	9a c0       	rjmp	.+308    	; 0x82c <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     6f8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6fc:	8e 7f       	andi	r24, 0xFE	; 254
     6fe:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     702:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     706:	8d 7f       	andi	r24, 0xFD	; 253
     708:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     70c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     710:	8d 7f       	andi	r24, 0xFD	; 253
     712:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     716:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     71a:	82 60       	ori	r24, 0x02	; 2
     71c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     720:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     724:	81 60       	ori	r24, 0x01	; 1
     726:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     72a:	e8 d0       	rcall	.+464    	; 0x8fc <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     72c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     730:	84 e6       	ldi	r24, 0x64	; 100
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     738:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     73c:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     73e:	5c c0       	rjmp	.+184    	; 0x7f8 <USB_Host_ProcessNextHostState+0x1e0>
     740:	cd de       	rcall	.-614    	; 0x4dc <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     742:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     746:	88 ec       	ldi	r24, 0xC8	; 200
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     74e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	51 c0       	rjmp	.+162    	; 0x7f8 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     756:	e1 2c       	mov	r14, r1
     758:	00 e4       	ldi	r16, 0x40	; 64
     75a:	10 e0       	ldi	r17, 0x00	; 0
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	6f d0       	rcall	.+222    	; 0x844 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     766:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     76a:	87 fd       	sbrc	r24, 7
     76c:	03 c0       	rjmp	.+6      	; 0x774 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     76e:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     770:	94 e0       	ldi	r25, 0x04	; 4
     772:	4e c0       	rjmp	.+156    	; 0x810 <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     774:	87 e0       	ldi	r24, 0x07	; 7
     776:	8e cf       	rjmp	.-228    	; 0x694 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	e4 e1       	ldi	r30, 0x14	; 20
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	a9 e2       	ldi	r26, 0x29	; 41
     780:	b1 e0       	ldi	r27, 0x01	; 1
     782:	01 90       	ld	r0, Z+
     784:	0d 92       	st	X+, r0
     786:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     788:	e1 f7       	brne	.-8      	; 0x782 <USB_Host_ProcessNextHostState+0x16a>
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	4a d3       	rcall	.+1684   	; 0xe24 <USB_Host_SendControlRequest>
     790:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     792:	3d c0       	rjmp	.+122    	; 0x80e <USB_Host_ProcessNextHostState+0x1f6>
     794:	88 85       	ldd	r24, Y+8	; 0x08
     796:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     79a:	a0 de       	rcall	.-704    	; 0x4dc <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     79c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     7a0:	88 ec       	ldi	r24, 0xC8	; 200
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     7a8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     7ac:	88 e0       	ldi	r24, 0x08	; 8
     7ae:	24 c0       	rjmp	.+72     	; 0x7f8 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7b0:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	e1 2c       	mov	r14, r1
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	41 d0       	rcall	.+130    	; 0x844 <Pipe_ConfigurePipe>
     7c2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     7c6:	87 ff       	sbrs	r24, 7
     7c8:	d2 cf       	rjmp	.-92     	; 0x76e <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	ec e1       	ldi	r30, 0x1C	; 28
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	a9 e2       	ldi	r26, 0x29	; 41
     7d2:	b1 e0       	ldi	r27, 0x01	; 1
     7d4:	01 90       	ld	r0, Z+
     7d6:	0d 92       	st	X+, r0
     7d8:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <USB_Host_ProcessNextHostState+0x1bc>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	21 d3       	rcall	.+1602   	; 0xe24 <USB_Host_SendControlRequest>
     7e2:	81 11       	cpse	r24, r1
     7e4:	14 c0       	rjmp	.+40     	; 0x80e <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     7e6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     7ea:	84 e6       	ldi	r24, 0x64	; 100
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     7f2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7fc:	17 c0       	rjmp	.+46     	; 0x82c <USB_Host_ProcessNextHostState+0x214>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     80a:	ea dd       	rcall	.-1068   	; 0x3e0 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     80c:	0f c0       	rjmp	.+30     	; 0x82c <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     814:	21 30       	cpi	r18, 0x01	; 1
     816:	51 f0       	breq	.+20     	; 0x82c <USB_Host_ProcessNextHostState+0x214>
     818:	68 2f       	mov	r22, r24
     81a:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     81c:	47 de       	rcall	.-882    	; 0x4ac <EVENT_USB_Host_DeviceEnumerationFailed>
     81e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     828:	d5 dd       	rcall	.-1110   	; 0x3d4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     82a:	e4 d0       	rcall	.+456    	; 0x9f4 <USB_ResetInterface>
     82c:	28 96       	adiw	r28, 0x08	; 8
	}
}
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     844:	ef 92       	push	r14
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     84a:	2f 70       	andi	r18, 0x0F	; 15
     84c:	42 2b       	or	r20, r18
     84e:	90 e4       	ldi	r25, 0x40	; 64
     850:	69 9f       	mul	r22, r25
     852:	b0 01       	movw	r22, r0
     854:	11 24       	eor	r1, r1
     856:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     858:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     85a:	2e 2d       	mov	r18, r14
     85c:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     85e:	37 30       	cpi	r19, 0x07	; 7
     860:	08 f0       	brcs	.+2      	; 0x864 <Pipe_ConfigurePipe+0x20>
     862:	45 c0       	rjmp	.+138    	; 0x8ee <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     864:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     868:	38 13       	cpse	r19, r24
     86a:	13 c0       	rjmp	.+38     	; 0x892 <Pipe_ConfigurePipe+0x4e>
     86c:	48 e0       	ldi	r20, 0x08	; 8
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     872:	40 17       	cp	r20, r16
     874:	51 07       	cpc	r21, r17
     876:	38 f0       	brcs	.+14     	; 0x886 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     878:	92 95       	swap	r25
     87a:	90 7f       	andi	r25, 0xF0	; 240
     87c:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     87e:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     880:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	0e c0       	rjmp	.+28     	; 0x8a2 <Pipe_ConfigurePipe+0x5e>
     886:	95 30       	cpi	r25, 0x05	; 5
     888:	b9 f3       	breq	.-18     	; 0x878 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     88a:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     88c:	44 0f       	add	r20, r20
     88e:	55 1f       	adc	r21, r21
     890:	f0 cf       	rjmp	.-32     	; 0x872 <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     892:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     896:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     89a:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     89e:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     8a2:	91 fd       	sbrc	r25, 1
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8a6:	3f 5f       	subi	r19, 0xFF	; 255
     8a8:	da cf       	rjmp	.-76     	; 0x85e <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     8aa:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8ae:	4e 7f       	andi	r20, 0xFE	; 254
     8b0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     8b4:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     8b8:	4d 7f       	andi	r20, 0xFD	; 253
     8ba:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     8be:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8c2:	41 60       	ori	r20, 0x01	; 1
     8c4:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     8c8:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     8cc:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     8d0:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     8d4:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     8d8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8dc:	90 62       	ori	r25, 0x20	; 32
     8de:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8e2:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     8e6:	97 fd       	sbrc	r25, 7
     8e8:	de cf       	rjmp	.-68     	; 0x8a6 <Pipe_ConfigurePipe+0x62>
		  return false;		
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ee:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     8fc:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     906:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     90a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     90e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     912:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     916:	9e 7f       	andi	r25, 0xFE	; 254
     918:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	87 30       	cpi	r24, 0x07	; 7
     920:	81 f7       	brne	.-32     	; 0x902 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     922:	08 95       	ret

00000924 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     924:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     928:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     92a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     92c:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     930:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     934:	27 ff       	sbrs	r18, 7
     936:	0f c0       	rjmp	.+30     	; 0x956 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     938:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     93c:	42 2f       	mov	r20, r18
     93e:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     940:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     944:	20 73       	andi	r18, 0x30	; 48
     946:	20 31       	cpi	r18, 0x10	; 16
     948:	11 f0       	breq	.+4      	; 0x94e <Pipe_IsEndpointBound+0x2a>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <Pipe_IsEndpointBound+0x2c>
     94e:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     950:	24 2b       	or	r18, r20
     952:	82 17       	cp	r24, r18
     954:	39 f0       	breq	.+14     	; 0x964 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     956:	9f 5f       	subi	r25, 0xFF	; 255
     958:	97 30       	cpi	r25, 0x07	; 7
     95a:	41 f7       	brne	.-48     	; 0x92c <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     95c:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     964:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     966:	08 95       	ret

00000968 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     968:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     96c:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     970:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     972:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     976:	90 73       	andi	r25, 0x30	; 48
     978:	90 31       	cpi	r25, 0x10	; 16
     97a:	29 f4       	brne	.+10     	; 0x986 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     97c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     980:	90 ff       	sbrs	r25, 0
     982:	05 c0       	rjmp	.+10     	; 0x98e <Pipe_WaitUntilReady+0x26>
     984:	19 c0       	rjmp	.+50     	; 0x9b8 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     986:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     98a:	92 fd       	sbrc	r25, 2
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     98e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     992:	91 fd       	sbrc	r25, 1
     994:	13 c0       	rjmp	.+38     	; 0x9bc <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     996:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_HostState>
     99a:	91 30       	cpi	r25, 0x01	; 1
     99c:	89 f0       	breq	.+34     	; 0x9c0 <Pipe_WaitUntilReady+0x58>
     99e:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     9a2:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9a6:	42 17       	cp	r20, r18
     9a8:	53 07       	cpc	r21, r19
     9aa:	19 f3       	breq	.-58     	; 0x972 <Pipe_WaitUntilReady+0xa>
     9ac:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <Pipe_WaitUntilReady+0x4c>
     9b0:	a9 01       	movw	r20, r18
     9b2:	df cf       	rjmp	.-66     	; 0x972 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     9c0:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     9c2:	08 95       	ret

000009c4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     9c4:	70 d0       	rcall	.+224    	; 0xaa6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9c6:	77 d0       	rcall	.+238    	; 0xab6 <USB_INT_ClearAllInterrupts>
     9c8:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	81 60       	ori	r24, 0x01	; 1
     9d0:	80 83       	st	Z, r24
     9d2:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	8f 77       	andi	r24, 0x7F	; 127
     9da:	80 83       	st	Z, r24
     9dc:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9de:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	8c 91       	ld	r24, X
     9e4:	8e 7f       	andi	r24, 0xFE	; 254
     9e6:	8c 93       	st	X, r24
     9e8:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     9ea:	8f 7e       	andi	r24, 0xEF	; 239
     9ec:	80 83       	st	Z, r24
     9ee:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     9f2:	08 95       	ret

000009f4 <USB_ResetInterface>:
     9f4:	58 d0       	rcall	.+176    	; 0xaa6 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     9f6:	5f d0       	rcall	.+190    	; 0xab6 <USB_INT_ClearAllInterrupts>
     9f8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9fc:	8f 77       	andi	r24, 0x7F	; 127
     9fe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a10:	8f 7d       	andi	r24, 0xDF	; 223
     a12:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a16:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a1a:	8f 77       	andi	r24, 0x7F	; 127
     a1c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     a20:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a22:	89 bd       	out	0x29, r24	; 41
     a24:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a26:	89 bd       	out	0x29, r24	; 41
     a28:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     a2a:	00 fe       	sbrs	r0, 0
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <USB_ResetInterface+0x34>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a30:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     a34:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     a38:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a3a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     a3e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a42:	80 64       	ori	r24, 0x40	; 64
     a44:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a48:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a4c:	81 60       	ori	r24, 0x01	; 1
     a4e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a52:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     a56:	84 60       	ori	r24, 0x04	; 4
     a58:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a5c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     a60:	8f 7e       	andi	r24, 0xEF	; 239
     a62:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     a66:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     a68:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     a6a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a74:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     a78:	84 60       	ori	r24, 0x04	; 4
     a7a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a7e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a82:	8e 7f       	andi	r24, 0xFE	; 254
     a84:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     a88:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a8c:	80 61       	ori	r24, 0x10	; 16
     a8e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a92:	08 95       	ret

00000a94 <USB_Init>:
     a94:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	81 60       	ori	r24, 0x01	; 1
     a9c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <USB_IsInitialized>

	USB_ResetInterface();
     aa4:	a7 cf       	rjmp	.-178    	; 0x9f4 <USB_ResetInterface>

00000aa6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     aa6:	e8 ed       	ldi	r30, 0xD8	; 216
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	8c 7f       	andi	r24, 0xFC	; 252
     aae:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ab0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ab4:	08 95       	ret

00000ab6 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ab6:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     aba:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     abe:	08 95       	ret

00000ac0 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	0b b6       	in	r0, 0x3b	; 59
     acc:	0f 92       	push	r0
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	6f 93       	push	r22
     ad8:	7f 93       	push	r23
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ae6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     aea:	85 ff       	sbrs	r24, 5
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     aee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     af2:	85 ff       	sbrs	r24, 5
     af4:	06 c0       	rjmp	.+12     	; 0xb02 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     af6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     afa:	8f 7d       	andi	r24, 0xDF	; 223
     afc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b00:	6a d1       	rcall	.+724    	; 0xdd6 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b02:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b06:	81 ff       	sbrs	r24, 1
     b08:	15 c0       	rjmp	.+42     	; 0xb34 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b0a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b0e:	81 ff       	sbrs	r24, 1
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b12:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b16:	8d 7f       	andi	r24, 0xFD	; 253
     b18:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b1c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b20:	8e 7f       	andi	r24, 0xFE	; 254
     b22:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b26:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b2a:	8d 7f       	andi	r24, 0xFD	; 253
     b2c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     b30:	51 dc       	rcall	.-1886   	; 0x3d4 <EVENT_USB_Host_DeviceUnattached>
     b32:	60 df       	rcall	.-320    	; 0x9f4 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     b34:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     b38:	81 ff       	sbrs	r24, 1
     b3a:	15 c0       	rjmp	.+42     	; 0xb66 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     b3c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b40:	81 ff       	sbrs	r24, 1
     b42:	11 c0       	rjmp	.+34     	; 0xb66 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b44:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b4e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b50:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	96 dc       	rcall	.-1748   	; 0x48a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     b5e:	3a dc       	rcall	.-1932   	; 0x3d4 <EVENT_USB_Host_DeviceUnattached>
     b60:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     b62:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     b66:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     b6a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     b6c:	17 c0       	rjmp	.+46     	; 0xb9c <__vector_10+0xdc>
     b6e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     b72:	80 ff       	sbrs	r24, 0
     b74:	13 c0       	rjmp	.+38     	; 0xb9c <__vector_10+0xdc>
     b76:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     b7a:	8e 7f       	andi	r24, 0xFE	; 254
     b7c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b80:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     b8a:	1e dc       	rcall	.-1988   	; 0x3c8 <EVENT_USB_Host_DeviceAttached>
     b8c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b96:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     b98:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     b9c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ba0:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <__vector_10+0x100>
     ba4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ba8:	82 ff       	sbrs	r24, 2
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <__vector_10+0x100>
     bac:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	78 dc       	rcall	.-1808   	; 0x4ac <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     bbc:	0b dc       	rcall	.-2026   	; 0x3d4 <EVENT_USB_Host_DeviceUnattached>
     bbe:	1a df       	rcall	.-460    	; 0x9f4 <USB_ResetInterface>

		USB_ResetInterface();
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <Pipe_Read_Stream_LE>:
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
     bf8:	8b 01       	movw	r16, r22
     bfa:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     bfc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     c00:	8f 7c       	andi	r24, 0xCF	; 207
     c02:	80 61       	ori	r24, 0x10	; 16
     c04:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c08:	af de       	rcall	.-674    	; 0x968 <Pipe_WaitUntilReady>
     c0a:	81 11       	cpse	r24, r1
     c0c:	32 c0       	rjmp	.+100    	; 0xc72 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c0e:	e1 14       	cp	r14, r1
     c10:	f1 04       	cpc	r15, r1
     c12:	39 f0       	breq	.+14     	; 0xc22 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     c14:	f7 01       	movw	r30, r14
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	08 1b       	sub	r16, r24
     c1c:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c1e:	c8 0f       	add	r28, r24
     c20:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c22:	c1 2c       	mov	r12, r1
     c24:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     c26:	01 15       	cp	r16, r1
     c28:	11 05       	cpc	r17, r1
     c2a:	11 f1       	breq	.+68     	; 0xc70 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     c2c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     c30:	85 fd       	sbrc	r24, 5
     c32:	15 c0       	rjmp	.+42     	; 0xc5e <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c34:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     c38:	8e 77       	andi	r24, 0x7E	; 126
     c3a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	49 f0       	breq	.+18     	; 0xc56 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     c44:	f7 01       	movw	r30, r14
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	c8 0e       	add	r12, r24
     c4c:	d9 1e       	adc	r13, r25
     c4e:	d1 82       	std	Z+1, r13	; 0x01
     c50:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     c52:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <Pipe_Read_Stream_LE+0x8c>
     c56:	88 de       	rcall	.-752    	; 0x968 <Pipe_WaitUntilReady>
     c58:	88 23       	and	r24, r24
     c5a:	29 f3       	breq	.-54     	; 0xc26 <Pipe_Read_Stream_LE+0x40>
     c5c:	0a c0       	rjmp	.+20     	; 0xc72 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c5e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c62:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c64:	01 50       	subi	r16, 0x01	; 1
     c66:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     c68:	ff ef       	ldi	r31, 0xFF	; 255
     c6a:	cf 1a       	sub	r12, r31
     c6c:	df 0a       	sbc	r13, r31
     c6e:	db cf       	rjmp	.-74     	; 0xc26 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     c70:	80 e0       	ldi	r24, 0x00	; 0
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	08 95       	ret

00000c84 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	dc 01       	movw	r26, r24
     c8a:	eb 01       	movw	r28, r22
     c8c:	e8 81       	ld	r30, Y
     c8e:	f9 81       	ldd	r31, Y+1	; 0x01
     c90:	20 81       	ld	r18, Z
     c92:	8d 91       	ld	r24, X+
     c94:	9c 91       	ld	r25, X
     c96:	11 97       	sbiw	r26, 0x01	; 1
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	82 17       	cp	r24, r18
     c9c:	93 07       	cpc	r25, r19
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <USB_GetNextDescriptor+0x1e>
     ca0:	9c 01       	movw	r18, r24
     ca2:	e2 0f       	add	r30, r18
     ca4:	f3 1f       	adc	r31, r19
     ca6:	eb 01       	movw	r28, r22
     ca8:	f9 83       	std	Y+1, r31	; 0x01
     caa:	e8 83       	st	Y, r30
     cac:	8d 91       	ld	r24, X+
     cae:	9c 91       	ld	r25, X
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	82 1b       	sub	r24, r18
     cb4:	93 0b       	sbc	r25, r19
     cb6:	8d 93       	st	X+, r24
     cb8:	9c 93       	st	X, r25
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <USB_Host_GetDeviceConfigDescriptor>:
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	29 97       	sbiw	r28, 0x09	; 9
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	6b 01       	movw	r12, r22
     ce2:	8a 01       	movw	r16, r20
     ce4:	79 01       	movw	r14, r18
     ce6:	90 e8       	ldi	r25, 0x80	; 128
     ce8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <USB_ControlRequest>
     cec:	96 e0       	ldi	r25, 0x06	; 6
     cee:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x1>
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	92 60       	ori	r25, 0x02	; 2
     cf8:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x3>
     cfc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x2>
     d00:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x5>
     d04:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x4>
     d08:	89 e0       	ldi	r24, 0x09	; 9
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x7>
     d10:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x6>
     d14:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	83 d0       	rcall	.+262    	; 0xe24 <USB_Host_SendControlRequest>
     d1e:	81 11       	cpse	r24, r1
     d20:	19 c0       	rjmp	.+50     	; 0xd54 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	f6 01       	movw	r30, r12
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	e8 16       	cp	r14, r24
     d2e:	f9 06       	cpc	r15, r25
     d30:	70 f0       	brcs	.+28     	; 0xd4e <USB_Host_GetDeviceConfigDescriptor+0x8e>
     d32:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x7>
     d36:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x6>
     d3a:	c8 01       	movw	r24, r16
     d3c:	73 d0       	rcall	.+230    	; 0xe24 <USB_Host_SendControlRequest>
     d3e:	81 11       	cpse	r24, r1
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d42:	f8 01       	movw	r30, r16
     d44:	81 81       	ldd	r24, Z+1	; 0x01
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	21 f4       	brne	.+8      	; 0xd52 <USB_Host_GetDeviceConfigDescriptor+0x92>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	29 96       	adiw	r28, 0x09	; 9
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	08 95       	ret

00000d72 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	8c 01       	movw	r16, r24
     d88:	eb 01       	movw	r28, r22
     d8a:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d8c:	f8 01       	movw	r30, r16
     d8e:	e0 80       	ld	r14, Z
     d90:	f1 80       	ldd	r15, Z+1	; 0x01
     d92:	e1 14       	cp	r14, r1
     d94:	f1 04       	cpc	r15, r1
     d96:	99 f0       	breq	.+38     	; 0xdbe <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d98:	a8 80       	ld	r10, Y
     d9a:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     d9c:	be 01       	movw	r22, r28
     d9e:	c8 01       	movw	r24, r16
     da0:	71 df       	rcall	.-286    	; 0xc84 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     da2:	88 81       	ld	r24, Y
     da4:	99 81       	ldd	r25, Y+1	; 0x01
     da6:	f6 01       	movw	r30, r12
     da8:	09 95       	icall
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	79 f3       	breq	.-34     	; 0xd8c <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	39 f4       	brne	.+14     	; 0xdc0 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     db2:	b9 82       	std	Y+1, r11	; 0x01
     db4:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     db6:	f8 01       	movw	r30, r16
     db8:	f1 82       	std	Z+1, r15	; 0x01
     dba:	e0 82       	st	Z, r14
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	08 95       	ret

00000dd6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     dd6:	08 95       	ret

00000dd8 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     de0:	c9 ee       	ldi	r28, 0xE9	; 233
     de2:	d3 e0       	ldi	r29, 0x03	; 3
     de4:	11 11       	cpse	r17, r1
     de6:	0c c0       	rjmp	.+24     	; 0xe00 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     de8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     dec:	83 fd       	sbrc	r24, 3
     dee:	15 c0       	rjmp	.+42     	; 0xe1a <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	c5 db       	rcall	.-2166   	; 0x57e <USB_Host_WaitMS>
     df4:	81 11       	cpse	r24, r1
     df6:	12 c0       	rjmp	.+36     	; 0xe1c <USB_Host_WaitForIOS+0x44>
     df8:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     dfa:	a1 f7       	brne	.-24     	; 0xde4 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e00:	11 30       	cpi	r17, 0x01	; 1
     e02:	29 f4       	brne	.+10     	; 0xe0e <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e04:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e08:	80 ff       	sbrs	r24, 0
     e0a:	f2 cf       	rjmp	.-28     	; 0xdf0 <USB_Host_WaitForIOS+0x18>
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e0e:	12 30       	cpi	r17, 0x02	; 2
     e10:	79 f7       	brne	.-34     	; 0xdf0 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e12:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e16:	82 ff       	sbrs	r24, 2
     e18:	eb cf       	rjmp	.-42     	; 0xdf0 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e1a:	80 e0       	ldi	r24, 0x00	; 0
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	08 95       	ret

00000e24 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e30:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e34:	81 70       	andi	r24, 0x01	; 1
     e36:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e38:	c0 91 2f 01 	lds	r28, 0x012F	; 0x80012f <USB_ControlRequest+0x6>
     e3c:	d0 91 30 01 	lds	r29, 0x0130	; 0x800130 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e40:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	98 db       	rcall	.-2256   	; 0x57e <USB_Host_WaitMS>
     e4e:	81 11       	cpse	r24, r1
     e50:	c8 c0       	rjmp	.+400    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e52:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e56:	8f 7c       	andi	r24, 0xCF	; 207
     e58:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e5c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     e60:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e64:	8f 7e       	andi	r24, 0xEF	; 239
     e66:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e6a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e6e:	8f 7b       	andi	r24, 0xBF	; 191
     e70:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e74:	e9 e2       	ldi	r30, 0x29	; 41
     e76:	f1 e0       	ldi	r31, 0x01	; 1
     e78:	81 e3       	ldi	r24, 0x31	; 49
     e7a:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     e7c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e7e:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e82:	8e 17       	cp	r24, r30
     e84:	9f 07       	cpc	r25, r31
     e86:	d1 f7       	brne	.-12     	; 0xe7c <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e88:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e8c:	87 77       	andi	r24, 0x77	; 119
     e8e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	a1 df       	rcall	.-190    	; 0xdd8 <USB_Host_WaitForIOS>
     e96:	81 11       	cpse	r24, r1
     e98:	a4 c0       	rjmp	.+328    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e9a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	6b db       	rcall	.-2346   	; 0x57e <USB_Host_WaitMS>
     ea8:	81 11       	cpse	r24, r1
     eaa:	9b c0       	rjmp	.+310    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eac:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_ControlRequest>
     eb0:	87 ff       	sbrs	r24, 7
     eb2:	4e c0       	rjmp	.+156    	; 0xf50 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eb4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     eb8:	8f 7c       	andi	r24, 0xCF	; 207
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	09 f0       	breq	.+2      	; 0xec8 <USB_Host_SendControlRequest+0xa4>
     ec6:	3a c0       	rjmp	.+116    	; 0xf3c <USB_Host_SendControlRequest+0x118>
     ec8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ecc:	8f 7c       	andi	r24, 0xCF	; 207
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ed4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ed8:	8f 7b       	andi	r24, 0xBF	; 191
     eda:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	7b df       	rcall	.-266    	; 0xdd8 <USB_Host_WaitForIOS>
     ee2:	81 11       	cpse	r24, r1
     ee4:	7e c0       	rjmp	.+252    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ee6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     eea:	8b 77       	andi	r24, 0x7B	; 123
     eec:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	72 df       	rcall	.-284    	; 0xdd8 <USB_Host_WaitForIOS>
     ef4:	76 c0       	rjmp	.+236    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ef6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	6a df       	rcall	.-300    	; 0xdd8 <USB_Host_WaitForIOS>
     f04:	81 11       	cpse	r24, r1
     f06:	6d c0       	rjmp	.+218    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f08:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f0c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     f10:	89 2b       	or	r24, r25
     f12:	11 f4       	brne	.+4      	; 0xf18 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
     f14:	c0 e0       	ldi	r28, 0x00	; 0
     f16:	d0 e0       	ldi	r29, 0x00	; 0
     f18:	f8 01       	movw	r30, r16
     f1a:	8f 01       	movw	r16, r30
     f1c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f20:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
     f24:	89 2b       	or	r24, r25
     f26:	69 f4       	brne	.+26     	; 0xf42 <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f28:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f32:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f36:	8e 77       	andi	r24, 0x7E	; 126
     f38:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f3c:	20 97       	sbiw	r28, 0x00	; 0
     f3e:	d9 f6       	brne	.-74     	; 0xef6 <USB_Host_SendControlRequest+0xd2>
     f40:	c3 cf       	rjmp	.-122    	; 0xec8 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f42:	20 97       	sbiw	r28, 0x00	; 0
     f44:	89 f3       	breq	.-30     	; 0xf28 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f46:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
     f4a:	81 93       	st	Z+, r24
					DataLen--;
     f4c:	21 97       	sbiw	r28, 0x01	; 1
     f4e:	e5 cf       	rjmp	.-54     	; 0xf1a <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f50:	01 15       	cp	r16, r1
     f52:	11 05       	cpc	r17, r1
     f54:	91 f1       	breq	.+100    	; 0xfba <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f56:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f5a:	8f 7c       	andi	r24, 0xCF	; 207
     f5c:	80 62       	ori	r24, 0x20	; 32
     f5e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f62:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f66:	8f 7b       	andi	r24, 0xBF	; 191
     f68:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f70:	e1 f0       	breq	.+56     	; 0xfaa <USB_Host_SendControlRequest+0x186>
     f72:	32 df       	rcall	.-412    	; 0xdd8 <USB_Host_WaitForIOS>
     f74:	81 11       	cpse	r24, r1
     f76:	35 c0       	rjmp	.+106    	; 0xfe2 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f78:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f7c:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f80:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	48 f4       	brcc	.+18     	; 0xf9e <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
     f8c:	0f 5f       	subi	r16, 0xFF	; 255
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	f8 01       	movw	r30, r16
     f92:	31 97       	sbiw	r30, 0x01	; 1
     f94:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f96:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
     f9a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f9c:	69 f7       	brne	.-38     	; 0xf78 <USB_Host_SendControlRequest+0x154>
     f9e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fa2:	8b 77       	andi	r24, 0x7B	; 123
     fa4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fa8:	e1 cf       	rjmp	.-62     	; 0xf6c <USB_Host_SendControlRequest+0x148>
     faa:	16 df       	rcall	.-468    	; 0xdd8 <USB_Host_WaitForIOS>
     fac:	81 11       	cpse	r24, r1
     fae:	19 c0       	rjmp	.+50     	; 0xfe2 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fb0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fb4:	80 64       	ori	r24, 0x40	; 64
     fb6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fba:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fbe:	8f 7c       	andi	r24, 0xCF	; 207
     fc0:	80 61       	ori	r24, 0x10	; 16
     fc2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fc6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fca:	8f 7b       	andi	r24, 0xBF	; 191
     fcc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	02 df       	rcall	.-508    	; 0xdd8 <USB_Host_WaitForIOS>
     fd4:	81 11       	cpse	r24, r1
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fd8:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fdc:	9e 77       	andi	r25, 0x7E	; 126
     fde:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe2:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fe6:	90 64       	ori	r25, 0x40	; 64
     fe8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     fec:	f1 10       	cpse	r15, r1
     fee:	05 c0       	rjmp	.+10     	; 0xffa <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ff0:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ff4:	9e 7f       	andi	r25, 0xFE	; 254
     ff6:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    1000:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	08 95       	ret

00001010 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1010:	cf 93       	push	r28
    1012:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1014:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_ControlRequest>
    1018:	89 e0       	ldi	r24, 0x09	; 9
    101a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_ControlRequest+0x1>
    101e:	8c 2f       	mov	r24, r28
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x3>
    1026:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x2>
    102a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x5>
    102e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x4>
    1032:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x7>
    1036:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    103a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	f0 de       	rcall	.-544    	; 0xe24 <USB_Host_SendControlRequest>
    1044:	81 11       	cpse	r24, r1
    1046:	09 c0       	rjmp	.+18     	; 0x105a <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1048:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    104c:	c1 11       	cpse	r28, r1
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <USB_Host_SetDeviceConfiguration+0x44>
    1050:	9a e0       	ldi	r25, 0x0A	; 10
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <USB_Host_SetDeviceConfiguration+0x46>
    1054:	9b e0       	ldi	r25, 0x0B	; 11
    1056:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <USB_HostState>
	}

	return ErrorCode;
}
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1064:	c7 ea       	ldi	r28, 0xA7	; 167
    1066:	d0 e0       	ldi	r29, 0x00	; 0
    1068:	18 81       	ld	r17, Y
    106a:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    106c:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    106e:	d4 da       	rcall	.-2648   	; 0x618 <USB_Host_ProcessNextHostState>
    1070:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	08 95       	ret

0000107a <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    107a:	fc 01       	movw	r30, r24
    107c:	ea 5b       	subi	r30, 0xBA	; 186
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1086:	4f 56       	subi	r20, 0x6F	; 111
    1088:	5c 4f       	sbci	r21, 0xFC	; 252
    108a:	dc 01       	movw	r26, r24
    108c:	a4 0f       	add	r26, r20
    108e:	b5 1f       	adc	r27, r21
    1090:	2d 91       	ld	r18, X+
    1092:	3c 91       	ld	r19, X

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1094:	dc 01       	movw	r26, r24
    1096:	a0 57       	subi	r26, 0x70	; 112
    1098:	bc 4f       	sbci	r27, 0xFC	; 252
    109a:	7c 91       	ld	r23, X
    109c:	76 13       	cpse	r23, r22
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <USB_GetHIDReportSize+0x48>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a9 01       	movw	r20, r18
    10a6:	47 70       	andi	r20, 0x07	; 7
    10a8:	55 27       	eor	r21, r21
    10aa:	45 2b       	or	r20, r21
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <USB_GetHIDReportSize+0x38>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	43 e0       	ldi	r20, 0x03	; 3
    10b4:	36 95       	lsr	r19
    10b6:	27 95       	ror	r18
    10b8:	4a 95       	dec	r20
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <USB_GetHIDReportSize+0x3a>
    10bc:	82 0f       	add	r24, r18
    10be:	93 1f       	adc	r25, r19
    10c0:	08 95       	ret
    10c2:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    10c4:	8e 17       	cp	r24, r30
    10c6:	9f 07       	cpc	r25, r31
    10c8:	01 f7       	brne	.-64     	; 0x108a <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
}
    10ce:	08 95       	ret

000010d0 <DCOMP_HID_Host_NextHIDInterface>:

		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		return USB_Host_SendControlRequest(Buffer);
	}
}
    10d0:	fc 01       	movw	r30, r24
    10d2:	21 81       	ldd	r18, Z+1	; 0x01
    10d4:	24 30       	cpi	r18, 0x04	; 4
    10d6:	29 f4       	brne	.+10     	; 0x10e2 <DCOMP_HID_Host_NextHIDInterface+0x12>
    10d8:	85 81       	ldd	r24, Z+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <DCOMP_HID_Host_NextHIDInterface+0x12>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	08 95       	ret
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	08 95       	ret

000010e6 <DCOMP_HID_Host_NextHIDDescriptor>:
    10e6:	fc 01       	movw	r30, r24
    10e8:	81 81       	ldd	r24, Z+1	; 0x01
    10ea:	81 32       	cpi	r24, 0x21	; 33
    10ec:	21 f0       	breq	.+8      	; 0x10f6 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	21 f0       	breq	.+8      	; 0x10fa <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	08 95       	ret
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	08 95       	ret

000010fe <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    10fe:	fc 01       	movw	r30, r24
    1100:	21 81       	ldd	r18, Z+1	; 0x01
    1102:	25 30       	cpi	r18, 0x05	; 5
    1104:	31 f4       	brne	.+12     	; 0x1112 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	0d dc       	rcall	.-2022   	; 0x924 <Pipe_IsEndpointBound>
    110a:	88 23       	and	r24, r24
    110c:	31 f0       	breq	.+12     	; 0x111a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	08 95       	ret
    1112:	24 30       	cpi	r18, 0x04	; 4
    1114:	e1 f7       	brne	.-8      	; 0x110e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	08 95       	ret
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret

0000111e <HID_Host_ConfigurePipes>:
    111e:	2f 92       	push	r2
    1120:	3f 92       	push	r3
    1122:	4f 92       	push	r4
    1124:	5f 92       	push	r5
    1126:	6f 92       	push	r6
    1128:	7f 92       	push	r7
    112a:	8f 92       	push	r8
    112c:	9f 92       	push	r9
    112e:	af 92       	push	r10
    1130:	bf 92       	push	r11
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	00 d0       	rcall	.+0      	; 0x1144 <HID_Host_ConfigurePipes+0x26>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <HID_Host_ConfigurePipes+0x28>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	7a 83       	std	Y+2, r23	; 0x02
    114c:	69 83       	std	Y+1, r22	; 0x01
    114e:	5c 83       	std	Y+4, r21	; 0x04
    1150:	4b 83       	std	Y+3, r20	; 0x03
    1152:	fc 01       	movw	r30, r24
    1154:	37 96       	adiw	r30, 0x07	; 7
    1156:	2c e0       	ldi	r18, 0x0C	; 12
    1158:	df 01       	movw	r26, r30
    115a:	1d 92       	st	X+, r1
    115c:	2a 95       	dec	r18
    115e:	e9 f7       	brne	.-6      	; 0x115a <HID_Host_ConfigurePipes+0x3c>
    1160:	eb 81       	ldd	r30, Y+3	; 0x03
    1162:	fc 81       	ldd	r31, Y+4	; 0x04
    1164:	11 81       	ldd	r17, Z+1	; 0x01
    1166:	12 30       	cpi	r17, 0x02	; 2
    1168:	09 f0       	breq	.+2      	; 0x116c <HID_Host_ConfigurePipes+0x4e>
    116a:	7d c0       	rjmp	.+250    	; 0x1266 <HID_Host_ConfigurePipes+0x148>
    116c:	6c 01       	movw	r12, r24
    116e:	41 2c       	mov	r4, r1
    1170:	51 2c       	mov	r5, r1
    1172:	61 2c       	mov	r6, r1
    1174:	71 2c       	mov	r7, r1
    1176:	81 2c       	mov	r8, r1
    1178:	91 2c       	mov	r9, r1
    117a:	a1 2c       	mov	r10, r1
    117c:	b1 2c       	mov	r11, r1
    117e:	a1 14       	cp	r10, r1
    1180:	b1 04       	cpc	r11, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <HID_Host_ConfigurePipes+0x68>
    1184:	74 c0       	rjmp	.+232    	; 0x126e <HID_Host_ConfigurePipes+0x150>
    1186:	81 14       	cp	r8, r1
    1188:	91 04       	cpc	r9, r1
    118a:	91 f4       	brne	.+36     	; 0x11b0 <HID_Host_ConfigurePipes+0x92>
    118c:	61 14       	cp	r6, r1
    118e:	71 04       	cpc	r7, r1
    1190:	79 f0       	breq	.+30     	; 0x11b0 <HID_Host_ConfigurePipes+0x92>
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	58 e0       	ldi	r21, 0x08	; 8
    1196:	be 01       	movw	r22, r28
    1198:	6d 5f       	subi	r22, 0xFD	; 253
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	e8 dd       	rcall	.-1072   	; 0xd72 <USB_GetNextDescriptorComp>
    11a2:	88 23       	and	r24, r24
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <HID_Host_ConfigurePipes+0x8a>
    11a6:	8f c0       	rjmp	.+286    	; 0x12c6 <HID_Host_ConfigurePipes+0x1a8>
    11a8:	a1 14       	cp	r10, r1
    11aa:	b1 04       	cpc	r11, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <HID_Host_ConfigurePipes+0x92>
    11ae:	63 c0       	rjmp	.+198    	; 0x1276 <HID_Host_ConfigurePipes+0x158>
    11b0:	ff 24       	eor	r15, r15
    11b2:	f3 94       	inc	r15
    11b4:	22 24       	eor	r2, r2
    11b6:	23 94       	inc	r2
    11b8:	f6 01       	movw	r30, r12
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 11       	cpse	r24, r15
    11be:	0f c0       	rjmp	.+30     	; 0x11de <HID_Host_ConfigurePipes+0xc0>
    11c0:	d5 01       	movw	r26, r10
    11c2:	14 96       	adiw	r26, 0x04	; 4
    11c4:	0d 91       	ld	r16, X+
    11c6:	1c 91       	ld	r17, X
    11c8:	15 97       	sbiw	r26, 0x05	; 5
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	2c 91       	ld	r18, X
    11ce:	12 97       	sbiw	r26, 0x02	; 2
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	16 96       	adiw	r26, 0x06	; 6
    11d4:	3c 90       	ld	r3, X
    11d6:	12 87       	std	Z+10, r17	; 0x0a
    11d8:	01 87       	std	Z+9, r16	; 0x09
    11da:	40 e1       	ldi	r20, 0x10	; 16
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <HID_Host_ConfigurePipes+0xec>
    11de:	f6 01       	movw	r30, r12
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	8f 11       	cpse	r24, r15
    11e4:	20 c0       	rjmp	.+64     	; 0x1226 <HID_Host_ConfigurePipes+0x108>
    11e6:	81 14       	cp	r8, r1
    11e8:	91 04       	cpc	r9, r1
    11ea:	e9 f0       	breq	.+58     	; 0x1226 <HID_Host_ConfigurePipes+0x108>
    11ec:	d4 01       	movw	r26, r8
    11ee:	14 96       	adiw	r26, 0x04	; 4
    11f0:	0d 91       	ld	r16, X+
    11f2:	1c 91       	ld	r17, X
    11f4:	15 97       	sbiw	r26, 0x05	; 5
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	2c 91       	ld	r18, X
    11fa:	12 97       	sbiw	r26, 0x02	; 2
    11fc:	83 81       	ldd	r24, Z+3	; 0x03
    11fe:	16 96       	adiw	r26, 0x06	; 6
    1200:	3c 90       	ld	r3, X
    1202:	14 87       	std	Z+12, r17	; 0x0c
    1204:	03 87       	std	Z+11, r16	; 0x0b
    1206:	26 86       	std	Z+14, r2	; 0x0e
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	81 11       	cpse	r24, r1
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <HID_Host_ConfigurePipes+0xf4>
    120e:	e1 2c       	mov	r14, r1
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <HID_Host_ConfigurePipes+0xf8>
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	e8 2e       	mov	r14, r24
    1216:	63 e0       	ldi	r22, 0x03	; 3
    1218:	8f 2d       	mov	r24, r15
    121a:	14 db       	rcall	.-2520   	; 0x844 <Pipe_ConfigurePipe>
    121c:	88 23       	and	r24, r24
    121e:	29 f1       	breq	.+74     	; 0x126a <HID_Host_ConfigurePipes+0x14c>
    1220:	31 10       	cpse	r3, r1
    1222:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1226:	f3 94       	inc	r15
    1228:	b7 e0       	ldi	r27, 0x07	; 7
    122a:	fb 12       	cpse	r15, r27
    122c:	c5 cf       	rjmp	.-118    	; 0x11b8 <HID_Host_ConfigurePipes+0x9a>
    122e:	f3 01       	movw	r30, r6
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	d6 01       	movw	r26, r12
    1234:	18 96       	adiw	r26, 0x08	; 8
    1236:	8c 93       	st	X, r24
    1238:	18 97       	sbiw	r26, 0x08	; 8
    123a:	f2 01       	movw	r30, r4
    123c:	87 81       	ldd	r24, Z+7	; 0x07
    123e:	90 85       	ldd	r25, Z+8	; 0x08
    1240:	51 96       	adiw	r26, 0x11	; 17
    1242:	9c 93       	st	X, r25
    1244:	8e 93       	st	-X, r24
    1246:	50 97       	sbiw	r26, 0x10	; 16
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	d3 01       	movw	r26, r6
    124c:	16 96       	adiw	r26, 0x06	; 6
    124e:	9c 91       	ld	r25, X
    1250:	91 11       	cpse	r25, r1
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <HID_Host_ConfigurePipes+0x138>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	f6 01       	movw	r30, r12
    1258:	85 87       	std	Z+13, r24	; 0x0d
    125a:	88 e0       	ldi	r24, 0x08	; 8
    125c:	82 8b       	std	Z+18, r24	; 0x12
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	87 83       	std	Z+7, r24	; 0x07
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	3c c0       	rjmp	.+120    	; 0x12de <HID_Host_ConfigurePipes+0x1c0>
    1266:	11 e0       	ldi	r17, 0x01	; 1
    1268:	3a c0       	rjmp	.+116    	; 0x12de <HID_Host_ConfigurePipes+0x1c0>
    126a:	13 e0       	ldi	r17, 0x03	; 3
    126c:	38 c0       	rjmp	.+112    	; 0x12de <HID_Host_ConfigurePipes+0x1c0>
    126e:	61 14       	cp	r6, r1
    1270:	71 04       	cpc	r7, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <HID_Host_ConfigurePipes+0x158>
    1274:	8e cf       	rjmp	.-228    	; 0x1192 <HID_Host_ConfigurePipes+0x74>
    1276:	81 14       	cp	r8, r1
    1278:	91 04       	cpc	r9, r1
    127a:	71 f5       	brne	.+92     	; 0x12d8 <HID_Host_ConfigurePipes+0x1ba>
    127c:	48 e6       	ldi	r20, 0x68	; 104
    127e:	58 e0       	ldi	r21, 0x08	; 8
    1280:	be 01       	movw	r22, r28
    1282:	6d 5f       	subi	r22, 0xFD	; 253
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	73 dd       	rcall	.-1306   	; 0xd72 <USB_GetNextDescriptorComp>
    128c:	81 11       	cpse	r24, r1
    128e:	27 c0       	rjmp	.+78     	; 0x12de <HID_Host_ConfigurePipes+0x1c0>
    1290:	6b 80       	ldd	r6, Y+3	; 0x03
    1292:	7c 80       	ldd	r7, Y+4	; 0x04
    1294:	f6 01       	movw	r30, r12
    1296:	84 81       	ldd	r24, Z+4	; 0x04
    1298:	81 11       	cpse	r24, r1
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <HID_Host_ConfigurePipes+0x19c>
    129c:	43 e7       	ldi	r20, 0x73	; 115
    129e:	58 e0       	ldi	r21, 0x08	; 8
    12a0:	be 01       	movw	r22, r28
    12a2:	6d 5f       	subi	r22, 0xFD	; 253
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	63 dd       	rcall	.-1338   	; 0xd72 <USB_GetNextDescriptorComp>
    12ac:	81 11       	cpse	r24, r1
    12ae:	17 c0       	rjmp	.+46     	; 0x12de <HID_Host_ConfigurePipes+0x1c0>
    12b0:	4b 80       	ldd	r4, Y+3	; 0x03
    12b2:	5c 80       	ldd	r5, Y+4	; 0x04
    12b4:	e0 e0       	ldi	r30, 0x00	; 0
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	0d c0       	rjmp	.+26     	; 0x12d4 <HID_Host_ConfigurePipes+0x1b6>
    12ba:	d3 01       	movw	r26, r6
    12bc:	17 96       	adiw	r26, 0x07	; 7
    12be:	9c 91       	ld	r25, X
    12c0:	89 13       	cpse	r24, r25
    12c2:	dc cf       	rjmp	.-72     	; 0x127c <HID_Host_ConfigurePipes+0x15e>
    12c4:	eb cf       	rjmp	.-42     	; 0x129c <HID_Host_ConfigurePipes+0x17e>
    12c6:	eb 81       	ldd	r30, Y+3	; 0x03
    12c8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	87 fd       	sbrc	r24, 7
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <HID_Host_ConfigurePipes+0x1b6>
    12d0:	4f 01       	movw	r8, r30
    12d2:	f5 01       	movw	r30, r10
    12d4:	5f 01       	movw	r10, r30
    12d6:	53 cf       	rjmp	.-346    	; 0x117e <HID_Host_ConfigurePipes+0x60>
    12d8:	a1 2c       	mov	r10, r1
    12da:	b1 2c       	mov	r11, r1
    12dc:	69 cf       	rjmp	.-302    	; 0x11b0 <HID_Host_ConfigurePipes+0x92>
    12de:	81 2f       	mov	r24, r17
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	5f 90       	pop	r5
    1306:	4f 90       	pop	r4
    1308:	3f 90       	pop	r3
    130a:	2f 90       	pop	r2
    130c:	08 95       	ret

0000130e <HID_Host_ReceiveReport>:
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	fc 01       	movw	r30, r24
    1314:	eb 01       	movw	r28, r22
    1316:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
    131a:	8b 30       	cpi	r24, 0x0B	; 11
    131c:	b9 f5       	brne	.+110    	; 0x138c <HID_Host_ReceiveReport+0x7e>
    131e:	87 81       	ldd	r24, Z+7	; 0x07
    1320:	88 23       	and	r24, r24
    1322:	a1 f1       	breq	.+104    	; 0x138c <HID_Host_ReceiveReport+0x7e>
    1324:	80 81       	ld	r24, Z
    1326:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    132a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    132e:	8f 7b       	andi	r24, 0xBF	; 191
    1330:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1334:	87 85       	ldd	r24, Z+15	; 0x0f
    1336:	81 11       	cpse	r24, r1
    1338:	12 c0       	rjmp	.+36     	; 0x135e <HID_Host_ReceiveReport+0x50>
    133a:	a5 81       	ldd	r26, Z+5	; 0x05
    133c:	b6 81       	ldd	r27, Z+6	; 0x06
    133e:	a8 52       	subi	r26, 0x28	; 40
    1340:	bc 4f       	sbci	r27, 0xFC	; 252
    1342:	8c 91       	ld	r24, X
    1344:	88 23       	and	r24, r24
    1346:	29 f0       	breq	.+10     	; 0x1352 <HID_Host_ReceiveReport+0x44>
    1348:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    134c:	68 83       	st	Y, r22
    134e:	21 96       	adiw	r28, 0x01	; 1
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <HID_Host_ReceiveReport+0x46>
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	85 81       	ldd	r24, Z+5	; 0x05
    1358:	96 81       	ldd	r25, Z+6	; 0x06
    135a:	8f de       	rcall	.-738    	; 0x107a <USB_GetHIDReportSize>
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <HID_Host_ReceiveReport+0x58>
    135e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1362:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	bc 01       	movw	r22, r24
    136c:	ce 01       	movw	r24, r28
    136e:	3b dc       	rcall	.-1930   	; 0xbe6 <Pipe_Read_Stream_LE>
    1370:	81 11       	cpse	r24, r1
    1372:	0d c0       	rjmp	.+26     	; 0x138e <HID_Host_ReceiveReport+0x80>
    1374:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1378:	8e 77       	andi	r24, 0x7E	; 126
    137a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    137e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	01 c0       	rjmp	.+2      	; 0x138e <HID_Host_ReceiveReport+0x80>
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <HID_Host_IsReportReceived>:

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1394:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1396:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
    139a:	8b 30       	cpi	r24, 0x0B	; 11
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <HID_Host_IsReportReceived+0x32>
    139e:	87 81       	ldd	r24, Z+7	; 0x07
    13a0:	88 23       	and	r24, r24
    13a2:	91 f0       	breq	.+36     	; 0x13c8 <HID_Host_IsReportReceived+0x34>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    13a4:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13a6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13aa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13ae:	8f 7b       	andi	r24, 0xBF	; 191
    13b0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13b4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13b8:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ba:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13be:	90 64       	ori	r25, 0x40	; 64
    13c0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    13c4:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    13c8:	08 95       	ret

000013ca <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    13ce:	fc 01       	movw	r30, r24
    13d0:	25 85       	ldd	r18, Z+13	; 0x0d
    13d2:	22 23       	and	r18, r18
    13d4:	11 f1       	breq	.+68     	; 0x141a <HID_Host_SetBootProtocol+0x50>
    13d6:	ec 01       	movw	r28, r24
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    13d8:	80 85       	ldd	r24, Z+8	; 0x08
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	21 e2       	ldi	r18, 0x21	; 33
    13de:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <USB_ControlRequest>
    13e2:	2b e0       	ldi	r18, 0x0B	; 11
    13e4:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <USB_ControlRequest+0x1>
    13e8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x3>
    13ec:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_ControlRequest+0x2>
    13f0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <USB_ControlRequest+0x5>
    13f4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_ControlRequest+0x4>
    13f8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x7>
    13fc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1400:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0d dd       	rcall	.-1510   	; 0xe24 <USB_Host_SendControlRequest>
    140a:	81 11       	cpse	r24, r1
    140c:	07 c0       	rjmp	.+14     	; 0x141c <HID_Host_SetBootProtocol+0x52>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    140e:	88 e0       	ldi	r24, 0x08	; 8
    1410:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	01 c0       	rjmp	.+2      	; 0x141c <HID_Host_SetBootProtocol+0x52>
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    141a:	80 e8       	ldi	r24, 0x80	; 128

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1422:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1426:	95 ff       	sbrs	r25, 5
    1428:	fc cf       	rjmp	.-8      	; 0x1422 <Serial_putchar>
				UDR1 = DataByte;
    142a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	08 95       	ret

00001434 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1434:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1438:	87 ff       	sbrs	r24, 7
    143a:	08 c0       	rjmp	.+16     	; 0x144c <Serial_getchar+0x18>
    143c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1440:	87 ff       	sbrs	r24, 7
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1444:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	08 95       	ret
	  return _FDEV_EOF;
    144c:	8e ef       	ldi	r24, 0xFE	; 254
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1456:	08 95       	ret

00001458 <__tablejump2__>:
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	00 24       	eor	r0, r0
    145e:	00 1c       	adc	r0, r0
    1460:	0b be       	out	0x3b, r0	; 59
    1462:	07 90       	elpm	r0, Z+
    1464:	f6 91       	elpm	r31, Z
    1466:	e0 2d       	mov	r30, r0
    1468:	09 94       	ijmp

0000146a <fputc>:
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	fb 01       	movw	r30, r22
    1474:	23 81       	ldd	r18, Z+3	; 0x03
    1476:	21 fd       	sbrc	r18, 1
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <fputc+0x16>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	2c c0       	rjmp	.+88     	; 0x14d8 <fputc+0x6e>
    1480:	22 ff       	sbrs	r18, 2
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <fputc+0x46>
    1484:	46 81       	ldd	r20, Z+6	; 0x06
    1486:	57 81       	ldd	r21, Z+7	; 0x07
    1488:	24 81       	ldd	r18, Z+4	; 0x04
    148a:	35 81       	ldd	r19, Z+5	; 0x05
    148c:	42 17       	cp	r20, r18
    148e:	53 07       	cpc	r21, r19
    1490:	44 f4       	brge	.+16     	; 0x14a2 <fputc+0x38>
    1492:	a0 81       	ld	r26, Z
    1494:	b1 81       	ldd	r27, Z+1	; 0x01
    1496:	9d 01       	movw	r18, r26
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	31 83       	std	Z+1, r19	; 0x01
    149e:	20 83       	st	Z, r18
    14a0:	8c 93       	st	X, r24
    14a2:	26 81       	ldd	r18, Z+6	; 0x06
    14a4:	37 81       	ldd	r19, Z+7	; 0x07
    14a6:	2f 5f       	subi	r18, 0xFF	; 255
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	37 83       	std	Z+7, r19	; 0x07
    14ac:	26 83       	std	Z+6, r18	; 0x06
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <fputc+0x6e>
    14b0:	8b 01       	movw	r16, r22
    14b2:	ec 01       	movw	r28, r24
    14b4:	fb 01       	movw	r30, r22
    14b6:	00 84       	ldd	r0, Z+8	; 0x08
    14b8:	f1 85       	ldd	r31, Z+9	; 0x09
    14ba:	e0 2d       	mov	r30, r0
    14bc:	09 95       	icall
    14be:	89 2b       	or	r24, r25
    14c0:	e1 f6       	brne	.-72     	; 0x147a <fputc+0x10>
    14c2:	d8 01       	movw	r26, r16
    14c4:	16 96       	adiw	r26, 0x06	; 6
    14c6:	8d 91       	ld	r24, X+
    14c8:	9c 91       	ld	r25, X
    14ca:	17 97       	sbiw	r26, 0x07	; 7
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	17 96       	adiw	r26, 0x07	; 7
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24
    14d4:	16 97       	sbiw	r26, 0x06	; 6
    14d6:	ce 01       	movw	r24, r28
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <printf_P>:
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	ae 01       	movw	r20, r28
    14f0:	49 5f       	subi	r20, 0xF9	; 249
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	da 01       	movw	r26, r20
    14f6:	6d 91       	ld	r22, X+
    14f8:	7d 91       	ld	r23, X+
    14fa:	ad 01       	movw	r20, r26
    14fc:	00 e4       	ldi	r16, 0x40	; 64
    14fe:	11 e0       	ldi	r17, 0x01	; 1
    1500:	f8 01       	movw	r30, r16
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	dc 01       	movw	r26, r24
    1508:	13 96       	adiw	r26, 0x03	; 3
    150a:	2c 91       	ld	r18, X
    150c:	13 97       	sbiw	r26, 0x03	; 3
    150e:	28 60       	ori	r18, 0x08	; 8
    1510:	13 96       	adiw	r26, 0x03	; 3
    1512:	2c 93       	st	X, r18
    1514:	3e d0       	rcall	.+124    	; 0x1592 <vfprintf>
    1516:	d8 01       	movw	r26, r16
    1518:	12 96       	adiw	r26, 0x02	; 2
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	13 97       	sbiw	r26, 0x03	; 3
    1520:	23 81       	ldd	r18, Z+3	; 0x03
    1522:	27 7f       	andi	r18, 0xF7	; 247
    1524:	23 83       	std	Z+3, r18	; 0x03
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	08 95       	ret

00001530 <puts_P>:
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	8c 01       	movw	r16, r24
    153a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__iob+0x2>
    153e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__iob+0x3>
    1542:	83 81       	ldd	r24, Z+3	; 0x03
    1544:	81 ff       	sbrs	r24, 1
    1546:	1b c0       	rjmp	.+54     	; 0x157e <puts_P+0x4e>
    1548:	d0 e0       	ldi	r29, 0x00	; 0
    154a:	c0 e0       	ldi	r28, 0x00	; 0
    154c:	f8 01       	movw	r30, r16
    154e:	84 91       	lpm	r24, Z
    1550:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <__iob+0x2>
    1554:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <__iob+0x3>
    1558:	db 01       	movw	r26, r22
    155a:	18 96       	adiw	r26, 0x08	; 8
    155c:	ed 91       	ld	r30, X+
    155e:	fc 91       	ld	r31, X
    1560:	19 97       	sbiw	r26, 0x09	; 9
    1562:	88 23       	and	r24, r24
    1564:	41 f0       	breq	.+16     	; 0x1576 <puts_P+0x46>
    1566:	09 95       	icall
    1568:	89 2b       	or	r24, r25
    156a:	11 f0       	breq	.+4      	; 0x1570 <puts_P+0x40>
    156c:	df ef       	ldi	r29, 0xFF	; 255
    156e:	cf ef       	ldi	r28, 0xFF	; 255
    1570:	0f 5f       	subi	r16, 0xFF	; 255
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	eb cf       	rjmp	.-42     	; 0x154c <puts_P+0x1c>
    1576:	8a e0       	ldi	r24, 0x0A	; 10
    1578:	09 95       	icall
    157a:	89 2b       	or	r24, r25
    157c:	19 f0       	breq	.+6      	; 0x1584 <puts_P+0x54>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <puts_P+0x58>
    1584:	8d 2f       	mov	r24, r29
    1586:	9c 2f       	mov	r25, r28
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <vfprintf>:
    1592:	2f 92       	push	r2
    1594:	3f 92       	push	r3
    1596:	4f 92       	push	r4
    1598:	5f 92       	push	r5
    159a:	6f 92       	push	r6
    159c:	7f 92       	push	r7
    159e:	8f 92       	push	r8
    15a0:	9f 92       	push	r9
    15a2:	af 92       	push	r10
    15a4:	bf 92       	push	r11
    15a6:	cf 92       	push	r12
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	2b 97       	sbiw	r28, 0x0b	; 11
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	6c 01       	movw	r12, r24
    15c8:	7b 01       	movw	r14, r22
    15ca:	8a 01       	movw	r16, r20
    15cc:	fc 01       	movw	r30, r24
    15ce:	17 82       	std	Z+7, r1	; 0x07
    15d0:	16 82       	std	Z+6, r1	; 0x06
    15d2:	83 81       	ldd	r24, Z+3	; 0x03
    15d4:	81 ff       	sbrs	r24, 1
    15d6:	bf c1       	rjmp	.+894    	; 0x1956 <vfprintf+0x3c4>
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	3c 01       	movw	r6, r24
    15de:	f6 01       	movw	r30, r12
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	f7 01       	movw	r30, r14
    15e4:	93 fd       	sbrc	r25, 3
    15e6:	85 91       	lpm	r24, Z+
    15e8:	93 ff       	sbrs	r25, 3
    15ea:	81 91       	ld	r24, Z+
    15ec:	7f 01       	movw	r14, r30
    15ee:	88 23       	and	r24, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <vfprintf+0x62>
    15f2:	ad c1       	rjmp	.+858    	; 0x194e <vfprintf+0x3bc>
    15f4:	85 32       	cpi	r24, 0x25	; 37
    15f6:	39 f4       	brne	.+14     	; 0x1606 <vfprintf+0x74>
    15f8:	93 fd       	sbrc	r25, 3
    15fa:	85 91       	lpm	r24, Z+
    15fc:	93 ff       	sbrs	r25, 3
    15fe:	81 91       	ld	r24, Z+
    1600:	7f 01       	movw	r14, r30
    1602:	85 32       	cpi	r24, 0x25	; 37
    1604:	21 f4       	brne	.+8      	; 0x160e <vfprintf+0x7c>
    1606:	b6 01       	movw	r22, r12
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	2f df       	rcall	.-418    	; 0x146a <fputc>
    160c:	e8 cf       	rjmp	.-48     	; 0x15de <vfprintf+0x4c>
    160e:	91 2c       	mov	r9, r1
    1610:	21 2c       	mov	r2, r1
    1612:	31 2c       	mov	r3, r1
    1614:	ff e1       	ldi	r31, 0x1F	; 31
    1616:	f3 15       	cp	r31, r3
    1618:	d8 f0       	brcs	.+54     	; 0x1650 <vfprintf+0xbe>
    161a:	8b 32       	cpi	r24, 0x2B	; 43
    161c:	79 f0       	breq	.+30     	; 0x163c <vfprintf+0xaa>
    161e:	38 f4       	brcc	.+14     	; 0x162e <vfprintf+0x9c>
    1620:	80 32       	cpi	r24, 0x20	; 32
    1622:	79 f0       	breq	.+30     	; 0x1642 <vfprintf+0xb0>
    1624:	83 32       	cpi	r24, 0x23	; 35
    1626:	a1 f4       	brne	.+40     	; 0x1650 <vfprintf+0xbe>
    1628:	23 2d       	mov	r18, r3
    162a:	20 61       	ori	r18, 0x10	; 16
    162c:	1d c0       	rjmp	.+58     	; 0x1668 <vfprintf+0xd6>
    162e:	8d 32       	cpi	r24, 0x2D	; 45
    1630:	61 f0       	breq	.+24     	; 0x164a <vfprintf+0xb8>
    1632:	80 33       	cpi	r24, 0x30	; 48
    1634:	69 f4       	brne	.+26     	; 0x1650 <vfprintf+0xbe>
    1636:	23 2d       	mov	r18, r3
    1638:	21 60       	ori	r18, 0x01	; 1
    163a:	16 c0       	rjmp	.+44     	; 0x1668 <vfprintf+0xd6>
    163c:	83 2d       	mov	r24, r3
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	38 2e       	mov	r3, r24
    1642:	e3 2d       	mov	r30, r3
    1644:	e4 60       	ori	r30, 0x04	; 4
    1646:	3e 2e       	mov	r3, r30
    1648:	2a c0       	rjmp	.+84     	; 0x169e <vfprintf+0x10c>
    164a:	f3 2d       	mov	r31, r3
    164c:	f8 60       	ori	r31, 0x08	; 8
    164e:	1d c0       	rjmp	.+58     	; 0x168a <vfprintf+0xf8>
    1650:	37 fc       	sbrc	r3, 7
    1652:	2d c0       	rjmp	.+90     	; 0x16ae <vfprintf+0x11c>
    1654:	20 ed       	ldi	r18, 0xD0	; 208
    1656:	28 0f       	add	r18, r24
    1658:	2a 30       	cpi	r18, 0x0A	; 10
    165a:	40 f0       	brcs	.+16     	; 0x166c <vfprintf+0xda>
    165c:	8e 32       	cpi	r24, 0x2E	; 46
    165e:	b9 f4       	brne	.+46     	; 0x168e <vfprintf+0xfc>
    1660:	36 fc       	sbrc	r3, 6
    1662:	75 c1       	rjmp	.+746    	; 0x194e <vfprintf+0x3bc>
    1664:	23 2d       	mov	r18, r3
    1666:	20 64       	ori	r18, 0x40	; 64
    1668:	32 2e       	mov	r3, r18
    166a:	19 c0       	rjmp	.+50     	; 0x169e <vfprintf+0x10c>
    166c:	36 fe       	sbrs	r3, 6
    166e:	06 c0       	rjmp	.+12     	; 0x167c <vfprintf+0xea>
    1670:	8a e0       	ldi	r24, 0x0A	; 10
    1672:	98 9e       	mul	r9, r24
    1674:	20 0d       	add	r18, r0
    1676:	11 24       	eor	r1, r1
    1678:	92 2e       	mov	r9, r18
    167a:	11 c0       	rjmp	.+34     	; 0x169e <vfprintf+0x10c>
    167c:	ea e0       	ldi	r30, 0x0A	; 10
    167e:	2e 9e       	mul	r2, r30
    1680:	20 0d       	add	r18, r0
    1682:	11 24       	eor	r1, r1
    1684:	22 2e       	mov	r2, r18
    1686:	f3 2d       	mov	r31, r3
    1688:	f0 62       	ori	r31, 0x20	; 32
    168a:	3f 2e       	mov	r3, r31
    168c:	08 c0       	rjmp	.+16     	; 0x169e <vfprintf+0x10c>
    168e:	8c 36       	cpi	r24, 0x6C	; 108
    1690:	21 f4       	brne	.+8      	; 0x169a <vfprintf+0x108>
    1692:	83 2d       	mov	r24, r3
    1694:	80 68       	ori	r24, 0x80	; 128
    1696:	38 2e       	mov	r3, r24
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x10c>
    169a:	88 36       	cpi	r24, 0x68	; 104
    169c:	41 f4       	brne	.+16     	; 0x16ae <vfprintf+0x11c>
    169e:	f7 01       	movw	r30, r14
    16a0:	93 fd       	sbrc	r25, 3
    16a2:	85 91       	lpm	r24, Z+
    16a4:	93 ff       	sbrs	r25, 3
    16a6:	81 91       	ld	r24, Z+
    16a8:	7f 01       	movw	r14, r30
    16aa:	81 11       	cpse	r24, r1
    16ac:	b3 cf       	rjmp	.-154    	; 0x1614 <vfprintf+0x82>
    16ae:	98 2f       	mov	r25, r24
    16b0:	9f 7d       	andi	r25, 0xDF	; 223
    16b2:	95 54       	subi	r25, 0x45	; 69
    16b4:	93 30       	cpi	r25, 0x03	; 3
    16b6:	28 f4       	brcc	.+10     	; 0x16c2 <vfprintf+0x130>
    16b8:	0c 5f       	subi	r16, 0xFC	; 252
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	9f e3       	ldi	r25, 0x3F	; 63
    16be:	99 83       	std	Y+1, r25	; 0x01
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <vfprintf+0x14a>
    16c2:	83 36       	cpi	r24, 0x63	; 99
    16c4:	31 f0       	breq	.+12     	; 0x16d2 <vfprintf+0x140>
    16c6:	83 37       	cpi	r24, 0x73	; 115
    16c8:	71 f0       	breq	.+28     	; 0x16e6 <vfprintf+0x154>
    16ca:	83 35       	cpi	r24, 0x53	; 83
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <vfprintf+0x13e>
    16ce:	55 c0       	rjmp	.+170    	; 0x177a <vfprintf+0x1e8>
    16d0:	20 c0       	rjmp	.+64     	; 0x1712 <vfprintf+0x180>
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 81       	ld	r24, Z
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	0e 5f       	subi	r16, 0xFE	; 254
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	88 24       	eor	r8, r8
    16de:	83 94       	inc	r8
    16e0:	91 2c       	mov	r9, r1
    16e2:	53 01       	movw	r10, r6
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <vfprintf+0x178>
    16e6:	28 01       	movw	r4, r16
    16e8:	f2 e0       	ldi	r31, 0x02	; 2
    16ea:	4f 0e       	add	r4, r31
    16ec:	51 1c       	adc	r5, r1
    16ee:	f8 01       	movw	r30, r16
    16f0:	a0 80       	ld	r10, Z
    16f2:	b1 80       	ldd	r11, Z+1	; 0x01
    16f4:	36 fe       	sbrs	r3, 6
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <vfprintf+0x16c>
    16f8:	69 2d       	mov	r22, r9
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <vfprintf+0x170>
    16fe:	6f ef       	ldi	r22, 0xFF	; 255
    1700:	7f ef       	ldi	r23, 0xFF	; 255
    1702:	c5 01       	movw	r24, r10
    1704:	4e d1       	rcall	.+668    	; 0x19a2 <strnlen>
    1706:	4c 01       	movw	r8, r24
    1708:	82 01       	movw	r16, r4
    170a:	f3 2d       	mov	r31, r3
    170c:	ff 77       	andi	r31, 0x7F	; 127
    170e:	3f 2e       	mov	r3, r31
    1710:	15 c0       	rjmp	.+42     	; 0x173c <vfprintf+0x1aa>
    1712:	28 01       	movw	r4, r16
    1714:	22 e0       	ldi	r18, 0x02	; 2
    1716:	42 0e       	add	r4, r18
    1718:	51 1c       	adc	r5, r1
    171a:	f8 01       	movw	r30, r16
    171c:	a0 80       	ld	r10, Z
    171e:	b1 80       	ldd	r11, Z+1	; 0x01
    1720:	36 fe       	sbrs	r3, 6
    1722:	03 c0       	rjmp	.+6      	; 0x172a <vfprintf+0x198>
    1724:	69 2d       	mov	r22, r9
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x19c>
    172a:	6f ef       	ldi	r22, 0xFF	; 255
    172c:	7f ef       	ldi	r23, 0xFF	; 255
    172e:	c5 01       	movw	r24, r10
    1730:	2d d1       	rcall	.+602    	; 0x198c <strnlen_P>
    1732:	4c 01       	movw	r8, r24
    1734:	f3 2d       	mov	r31, r3
    1736:	f0 68       	ori	r31, 0x80	; 128
    1738:	3f 2e       	mov	r3, r31
    173a:	82 01       	movw	r16, r4
    173c:	33 fc       	sbrc	r3, 3
    173e:	19 c0       	rjmp	.+50     	; 0x1772 <vfprintf+0x1e0>
    1740:	82 2d       	mov	r24, r2
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	88 16       	cp	r8, r24
    1746:	99 06       	cpc	r9, r25
    1748:	a0 f4       	brcc	.+40     	; 0x1772 <vfprintf+0x1e0>
    174a:	b6 01       	movw	r22, r12
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	8c de       	rcall	.-744    	; 0x146a <fputc>
    1752:	2a 94       	dec	r2
    1754:	f5 cf       	rjmp	.-22     	; 0x1740 <vfprintf+0x1ae>
    1756:	f5 01       	movw	r30, r10
    1758:	37 fc       	sbrc	r3, 7
    175a:	85 91       	lpm	r24, Z+
    175c:	37 fe       	sbrs	r3, 7
    175e:	81 91       	ld	r24, Z+
    1760:	5f 01       	movw	r10, r30
    1762:	b6 01       	movw	r22, r12
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	81 de       	rcall	.-766    	; 0x146a <fputc>
    1768:	21 10       	cpse	r2, r1
    176a:	2a 94       	dec	r2
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	82 1a       	sub	r8, r18
    1770:	91 08       	sbc	r9, r1
    1772:	81 14       	cp	r8, r1
    1774:	91 04       	cpc	r9, r1
    1776:	79 f7       	brne	.-34     	; 0x1756 <vfprintf+0x1c4>
    1778:	e1 c0       	rjmp	.+450    	; 0x193c <vfprintf+0x3aa>
    177a:	84 36       	cpi	r24, 0x64	; 100
    177c:	11 f0       	breq	.+4      	; 0x1782 <vfprintf+0x1f0>
    177e:	89 36       	cpi	r24, 0x69	; 105
    1780:	39 f5       	brne	.+78     	; 0x17d0 <vfprintf+0x23e>
    1782:	f8 01       	movw	r30, r16
    1784:	37 fe       	sbrs	r3, 7
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <vfprintf+0x204>
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	0c 5f       	subi	r16, 0xFC	; 252
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	08 c0       	rjmp	.+16     	; 0x17a6 <vfprintf+0x214>
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	07 2e       	mov	r0, r23
    179c:	00 0c       	add	r0, r0
    179e:	88 0b       	sbc	r24, r24
    17a0:	99 0b       	sbc	r25, r25
    17a2:	0e 5f       	subi	r16, 0xFE	; 254
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	f3 2d       	mov	r31, r3
    17a8:	ff 76       	andi	r31, 0x6F	; 111
    17aa:	3f 2e       	mov	r3, r31
    17ac:	97 ff       	sbrs	r25, 7
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <vfprintf+0x230>
    17b0:	90 95       	com	r25
    17b2:	80 95       	com	r24
    17b4:	70 95       	com	r23
    17b6:	61 95       	neg	r22
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	f0 68       	ori	r31, 0x80	; 128
    17c0:	3f 2e       	mov	r3, r31
    17c2:	2a e0       	ldi	r18, 0x0A	; 10
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	a3 01       	movw	r20, r6
    17c8:	f7 d0       	rcall	.+494    	; 0x19b8 <__ultoa_invert>
    17ca:	88 2e       	mov	r8, r24
    17cc:	86 18       	sub	r8, r6
    17ce:	44 c0       	rjmp	.+136    	; 0x1858 <vfprintf+0x2c6>
    17d0:	85 37       	cpi	r24, 0x75	; 117
    17d2:	31 f4       	brne	.+12     	; 0x17e0 <vfprintf+0x24e>
    17d4:	23 2d       	mov	r18, r3
    17d6:	2f 7e       	andi	r18, 0xEF	; 239
    17d8:	b2 2e       	mov	r11, r18
    17da:	2a e0       	ldi	r18, 0x0A	; 10
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	25 c0       	rjmp	.+74     	; 0x182a <vfprintf+0x298>
    17e0:	93 2d       	mov	r25, r3
    17e2:	99 7f       	andi	r25, 0xF9	; 249
    17e4:	b9 2e       	mov	r11, r25
    17e6:	8f 36       	cpi	r24, 0x6F	; 111
    17e8:	c1 f0       	breq	.+48     	; 0x181a <vfprintf+0x288>
    17ea:	18 f4       	brcc	.+6      	; 0x17f2 <vfprintf+0x260>
    17ec:	88 35       	cpi	r24, 0x58	; 88
    17ee:	79 f0       	breq	.+30     	; 0x180e <vfprintf+0x27c>
    17f0:	ae c0       	rjmp	.+348    	; 0x194e <vfprintf+0x3bc>
    17f2:	80 37       	cpi	r24, 0x70	; 112
    17f4:	19 f0       	breq	.+6      	; 0x17fc <vfprintf+0x26a>
    17f6:	88 37       	cpi	r24, 0x78	; 120
    17f8:	21 f0       	breq	.+8      	; 0x1802 <vfprintf+0x270>
    17fa:	a9 c0       	rjmp	.+338    	; 0x194e <vfprintf+0x3bc>
    17fc:	e9 2f       	mov	r30, r25
    17fe:	e0 61       	ori	r30, 0x10	; 16
    1800:	be 2e       	mov	r11, r30
    1802:	b4 fe       	sbrs	r11, 4
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <vfprintf+0x28e>
    1806:	fb 2d       	mov	r31, r11
    1808:	f4 60       	ori	r31, 0x04	; 4
    180a:	bf 2e       	mov	r11, r31
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <vfprintf+0x28e>
    180e:	34 fe       	sbrs	r3, 4
    1810:	0a c0       	rjmp	.+20     	; 0x1826 <vfprintf+0x294>
    1812:	29 2f       	mov	r18, r25
    1814:	26 60       	ori	r18, 0x06	; 6
    1816:	b2 2e       	mov	r11, r18
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0x294>
    181a:	28 e0       	ldi	r18, 0x08	; 8
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	05 c0       	rjmp	.+10     	; 0x182a <vfprintf+0x298>
    1820:	20 e1       	ldi	r18, 0x10	; 16
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x298>
    1826:	20 e1       	ldi	r18, 0x10	; 16
    1828:	32 e0       	ldi	r19, 0x02	; 2
    182a:	f8 01       	movw	r30, r16
    182c:	b7 fe       	sbrs	r11, 7
    182e:	07 c0       	rjmp	.+14     	; 0x183e <vfprintf+0x2ac>
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	0c 5f       	subi	r16, 0xFC	; 252
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x2b8>
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 5f       	subi	r16, 0xFE	; 254
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	a3 01       	movw	r20, r6
    184c:	b5 d0       	rcall	.+362    	; 0x19b8 <__ultoa_invert>
    184e:	88 2e       	mov	r8, r24
    1850:	86 18       	sub	r8, r6
    1852:	fb 2d       	mov	r31, r11
    1854:	ff 77       	andi	r31, 0x7F	; 127
    1856:	3f 2e       	mov	r3, r31
    1858:	36 fe       	sbrs	r3, 6
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <vfprintf+0x2e4>
    185c:	23 2d       	mov	r18, r3
    185e:	2e 7f       	andi	r18, 0xFE	; 254
    1860:	a2 2e       	mov	r10, r18
    1862:	89 14       	cp	r8, r9
    1864:	58 f4       	brcc	.+22     	; 0x187c <vfprintf+0x2ea>
    1866:	34 fe       	sbrs	r3, 4
    1868:	0b c0       	rjmp	.+22     	; 0x1880 <vfprintf+0x2ee>
    186a:	32 fc       	sbrc	r3, 2
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <vfprintf+0x2ee>
    186e:	83 2d       	mov	r24, r3
    1870:	8e 7e       	andi	r24, 0xEE	; 238
    1872:	a8 2e       	mov	r10, r24
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x2ee>
    1876:	b8 2c       	mov	r11, r8
    1878:	a3 2c       	mov	r10, r3
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x2f0>
    187c:	b8 2c       	mov	r11, r8
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <vfprintf+0x2f0>
    1880:	b9 2c       	mov	r11, r9
    1882:	a4 fe       	sbrs	r10, 4
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <vfprintf+0x312>
    1886:	fe 01       	movw	r30, r28
    1888:	e8 0d       	add	r30, r8
    188a:	f1 1d       	adc	r31, r1
    188c:	80 81       	ld	r24, Z
    188e:	80 33       	cpi	r24, 0x30	; 48
    1890:	21 f4       	brne	.+8      	; 0x189a <vfprintf+0x308>
    1892:	9a 2d       	mov	r25, r10
    1894:	99 7e       	andi	r25, 0xE9	; 233
    1896:	a9 2e       	mov	r10, r25
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <vfprintf+0x31a>
    189a:	a2 fe       	sbrs	r10, 2
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x318>
    189e:	b3 94       	inc	r11
    18a0:	b3 94       	inc	r11
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <vfprintf+0x31a>
    18a4:	8a 2d       	mov	r24, r10
    18a6:	86 78       	andi	r24, 0x86	; 134
    18a8:	09 f0       	breq	.+2      	; 0x18ac <vfprintf+0x31a>
    18aa:	b3 94       	inc	r11
    18ac:	a3 fc       	sbrc	r10, 3
    18ae:	10 c0       	rjmp	.+32     	; 0x18d0 <vfprintf+0x33e>
    18b0:	a0 fe       	sbrs	r10, 0
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <vfprintf+0x32e>
    18b4:	b2 14       	cp	r11, r2
    18b6:	80 f4       	brcc	.+32     	; 0x18d8 <vfprintf+0x346>
    18b8:	28 0c       	add	r2, r8
    18ba:	92 2c       	mov	r9, r2
    18bc:	9b 18       	sub	r9, r11
    18be:	0d c0       	rjmp	.+26     	; 0x18da <vfprintf+0x348>
    18c0:	b2 14       	cp	r11, r2
    18c2:	58 f4       	brcc	.+22     	; 0x18da <vfprintf+0x348>
    18c4:	b6 01       	movw	r22, r12
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	cf dd       	rcall	.-1122   	; 0x146a <fputc>
    18cc:	b3 94       	inc	r11
    18ce:	f8 cf       	rjmp	.-16     	; 0x18c0 <vfprintf+0x32e>
    18d0:	b2 14       	cp	r11, r2
    18d2:	18 f4       	brcc	.+6      	; 0x18da <vfprintf+0x348>
    18d4:	2b 18       	sub	r2, r11
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x34a>
    18d8:	98 2c       	mov	r9, r8
    18da:	21 2c       	mov	r2, r1
    18dc:	a4 fe       	sbrs	r10, 4
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <vfprintf+0x36c>
    18e0:	b6 01       	movw	r22, r12
    18e2:	80 e3       	ldi	r24, 0x30	; 48
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	c1 dd       	rcall	.-1150   	; 0x146a <fputc>
    18e8:	a2 fe       	sbrs	r10, 2
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <vfprintf+0x386>
    18ec:	a1 fc       	sbrc	r10, 1
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <vfprintf+0x364>
    18f0:	88 e7       	ldi	r24, 0x78	; 120
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x368>
    18f6:	88 e5       	ldi	r24, 0x58	; 88
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	b6 01       	movw	r22, r12
    18fc:	0c c0       	rjmp	.+24     	; 0x1916 <vfprintf+0x384>
    18fe:	8a 2d       	mov	r24, r10
    1900:	86 78       	andi	r24, 0x86	; 134
    1902:	51 f0       	breq	.+20     	; 0x1918 <vfprintf+0x386>
    1904:	a1 fe       	sbrs	r10, 1
    1906:	02 c0       	rjmp	.+4      	; 0x190c <vfprintf+0x37a>
    1908:	8b e2       	ldi	r24, 0x2B	; 43
    190a:	01 c0       	rjmp	.+2      	; 0x190e <vfprintf+0x37c>
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	a7 fc       	sbrc	r10, 7
    1910:	8d e2       	ldi	r24, 0x2D	; 45
    1912:	b6 01       	movw	r22, r12
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a9 dd       	rcall	.-1198   	; 0x146a <fputc>
    1918:	89 14       	cp	r8, r9
    191a:	30 f4       	brcc	.+12     	; 0x1928 <vfprintf+0x396>
    191c:	b6 01       	movw	r22, r12
    191e:	80 e3       	ldi	r24, 0x30	; 48
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a3 dd       	rcall	.-1210   	; 0x146a <fputc>
    1924:	9a 94       	dec	r9
    1926:	f8 cf       	rjmp	.-16     	; 0x1918 <vfprintf+0x386>
    1928:	8a 94       	dec	r8
    192a:	f3 01       	movw	r30, r6
    192c:	e8 0d       	add	r30, r8
    192e:	f1 1d       	adc	r31, r1
    1930:	80 81       	ld	r24, Z
    1932:	b6 01       	movw	r22, r12
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	99 dd       	rcall	.-1230   	; 0x146a <fputc>
    1938:	81 10       	cpse	r8, r1
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <vfprintf+0x396>
    193c:	22 20       	and	r2, r2
    193e:	09 f4       	brne	.+2      	; 0x1942 <vfprintf+0x3b0>
    1940:	4e ce       	rjmp	.-868    	; 0x15de <vfprintf+0x4c>
    1942:	b6 01       	movw	r22, r12
    1944:	80 e2       	ldi	r24, 0x20	; 32
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	90 dd       	rcall	.-1248   	; 0x146a <fputc>
    194a:	2a 94       	dec	r2
    194c:	f7 cf       	rjmp	.-18     	; 0x193c <vfprintf+0x3aa>
    194e:	f6 01       	movw	r30, r12
    1950:	86 81       	ldd	r24, Z+6	; 0x06
    1952:	97 81       	ldd	r25, Z+7	; 0x07
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x3c8>
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	2b 96       	adiw	r28, 0x0b	; 11
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	5f 90       	pop	r5
    1984:	4f 90       	pop	r4
    1986:	3f 90       	pop	r3
    1988:	2f 90       	pop	r2
    198a:	08 95       	ret

0000198c <strnlen_P>:
    198c:	fc 01       	movw	r30, r24
    198e:	05 90       	lpm	r0, Z+
    1990:	61 50       	subi	r22, 0x01	; 1
    1992:	70 40       	sbci	r23, 0x00	; 0
    1994:	01 10       	cpse	r0, r1
    1996:	d8 f7       	brcc	.-10     	; 0x198e <strnlen_P+0x2>
    1998:	80 95       	com	r24
    199a:	90 95       	com	r25
    199c:	8e 0f       	add	r24, r30
    199e:	9f 1f       	adc	r25, r31
    19a0:	08 95       	ret

000019a2 <strnlen>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	61 50       	subi	r22, 0x01	; 1
    19a6:	70 40       	sbci	r23, 0x00	; 0
    19a8:	01 90       	ld	r0, Z+
    19aa:	01 10       	cpse	r0, r1
    19ac:	d8 f7       	brcc	.-10     	; 0x19a4 <strnlen+0x2>
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	8e 0f       	add	r24, r30
    19b4:	9f 1f       	adc	r25, r31
    19b6:	08 95       	ret

000019b8 <__ultoa_invert>:
    19b8:	fa 01       	movw	r30, r20
    19ba:	aa 27       	eor	r26, r26
    19bc:	28 30       	cpi	r18, 0x08	; 8
    19be:	51 f1       	breq	.+84     	; 0x1a14 <__ultoa_invert+0x5c>
    19c0:	20 31       	cpi	r18, 0x10	; 16
    19c2:	81 f1       	breq	.+96     	; 0x1a24 <__ultoa_invert+0x6c>
    19c4:	e8 94       	clt
    19c6:	6f 93       	push	r22
    19c8:	6e 7f       	andi	r22, 0xFE	; 254
    19ca:	6e 5f       	subi	r22, 0xFE	; 254
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	8f 4f       	sbci	r24, 0xFF	; 255
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	af 4f       	sbci	r26, 0xFF	; 255
    19d4:	b1 e0       	ldi	r27, 0x01	; 1
    19d6:	3e d0       	rcall	.+124    	; 0x1a54 <__ultoa_invert+0x9c>
    19d8:	b4 e0       	ldi	r27, 0x04	; 4
    19da:	3c d0       	rcall	.+120    	; 0x1a54 <__ultoa_invert+0x9c>
    19dc:	67 0f       	add	r22, r23
    19de:	78 1f       	adc	r23, r24
    19e0:	89 1f       	adc	r24, r25
    19e2:	9a 1f       	adc	r25, r26
    19e4:	a1 1d       	adc	r26, r1
    19e6:	68 0f       	add	r22, r24
    19e8:	79 1f       	adc	r23, r25
    19ea:	8a 1f       	adc	r24, r26
    19ec:	91 1d       	adc	r25, r1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	6a 0f       	add	r22, r26
    19f2:	71 1d       	adc	r23, r1
    19f4:	81 1d       	adc	r24, r1
    19f6:	91 1d       	adc	r25, r1
    19f8:	a1 1d       	adc	r26, r1
    19fa:	20 d0       	rcall	.+64     	; 0x1a3c <__ultoa_invert+0x84>
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <__ultoa_invert+0x48>
    19fe:	68 94       	set
    1a00:	3f 91       	pop	r19
    1a02:	2a e0       	ldi	r18, 0x0A	; 10
    1a04:	26 9f       	mul	r18, r22
    1a06:	11 24       	eor	r1, r1
    1a08:	30 19       	sub	r19, r0
    1a0a:	30 5d       	subi	r19, 0xD0	; 208
    1a0c:	31 93       	st	Z+, r19
    1a0e:	de f6       	brtc	.-74     	; 0x19c6 <__ultoa_invert+0xe>
    1a10:	cf 01       	movw	r24, r30
    1a12:	08 95       	ret
    1a14:	46 2f       	mov	r20, r22
    1a16:	47 70       	andi	r20, 0x07	; 7
    1a18:	40 5d       	subi	r20, 0xD0	; 208
    1a1a:	41 93       	st	Z+, r20
    1a1c:	b3 e0       	ldi	r27, 0x03	; 3
    1a1e:	0f d0       	rcall	.+30     	; 0x1a3e <__ultoa_invert+0x86>
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__ultoa_invert+0x5c>
    1a22:	f6 cf       	rjmp	.-20     	; 0x1a10 <__ultoa_invert+0x58>
    1a24:	46 2f       	mov	r20, r22
    1a26:	4f 70       	andi	r20, 0x0F	; 15
    1a28:	40 5d       	subi	r20, 0xD0	; 208
    1a2a:	4a 33       	cpi	r20, 0x3A	; 58
    1a2c:	18 f0       	brcs	.+6      	; 0x1a34 <__ultoa_invert+0x7c>
    1a2e:	49 5d       	subi	r20, 0xD9	; 217
    1a30:	31 fd       	sbrc	r19, 1
    1a32:	40 52       	subi	r20, 0x20	; 32
    1a34:	41 93       	st	Z+, r20
    1a36:	02 d0       	rcall	.+4      	; 0x1a3c <__ultoa_invert+0x84>
    1a38:	a9 f7       	brne	.-22     	; 0x1a24 <__ultoa_invert+0x6c>
    1a3a:	ea cf       	rjmp	.-44     	; 0x1a10 <__ultoa_invert+0x58>
    1a3c:	b4 e0       	ldi	r27, 0x04	; 4
    1a3e:	a6 95       	lsr	r26
    1a40:	97 95       	ror	r25
    1a42:	87 95       	ror	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	ba 95       	dec	r27
    1a4a:	c9 f7       	brne	.-14     	; 0x1a3e <__ultoa_invert+0x86>
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	61 05       	cpc	r22, r1
    1a50:	71 05       	cpc	r23, r1
    1a52:	08 95       	ret
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
    1a58:	0a 2e       	mov	r0, r26
    1a5a:	06 94       	lsr	r0
    1a5c:	57 95       	ror	r21
    1a5e:	47 95       	ror	r20
    1a60:	37 95       	ror	r19
    1a62:	27 95       	ror	r18
    1a64:	ba 95       	dec	r27
    1a66:	c9 f7       	brne	.-14     	; 0x1a5a <__ultoa_invert+0xa2>
    1a68:	62 0f       	add	r22, r18
    1a6a:	73 1f       	adc	r23, r19
    1a6c:	84 1f       	adc	r24, r20
    1a6e:	95 1f       	adc	r25, r21
    1a70:	a0 1d       	adc	r26, r0
    1a72:	08 95       	ret

00001a74 <_exit>:
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>
