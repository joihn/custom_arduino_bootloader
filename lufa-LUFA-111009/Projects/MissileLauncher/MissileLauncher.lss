
MissileLauncher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000f92  00001026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800152  00800152  00001078  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000543e  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ef4  00000000  00000000  000067da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029f9  00000000  00000000  000086ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a4  00000000  00000000  0000b0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000228a  00000000  00000000  0000b96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030ab  00000000  00000000  0000dbf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00010ca1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	cf c4       	rjmp	.+2462   	; 0x9c8 <__vector_10>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2c c0       	rjmp	.+88     	; 0xe6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	2a c0       	rjmp	.+84     	; 0xe6 <__bad_interrupt>
  92:	00 00       	nop
  94:	28 c0       	rjmp	.+80     	; 0xe6 <__bad_interrupt>
  96:	00 00       	nop
  98:	fb 02       	muls	r31, r27
  9a:	e4 03       	fmuls	r22, r20
  9c:	18 03       	fmul	r17, r16
  9e:	21 03       	mulsu	r18, r17
  a0:	4c 03       	fmul	r20, r20
  a2:	73 03       	mulsu	r23, r19
  a4:	7d 03       	fmul	r23, r21
  a6:	8e 03       	fmulsu	r16, r22
  a8:	a9 03       	fmulsu	r18, r17
  aa:	cf 03       	fmulsu	r20, r23

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e2       	ldi	r29, 0x20	; 32
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e2 e9       	ldi	r30, 0x92	; 146
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a2 35       	cpi	r26, 0x52	; 82
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a2 e5       	ldi	r26, 0x52	; 82
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a1 3a       	cpi	r26, 0xA1	; 161
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	03 d1       	rcall	.+518    	; 0x2ea <main>
  e4:	54 c7       	rjmp	.+3752   	; 0xf8e <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	08 95       	ret

000000f2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
  f2:	84 b7       	in	r24, 0x34	; 52
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	a8 95       	wdr
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 102:	88 61       	ori	r24, 0x18	; 24
 104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 108:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 10c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 11a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 11e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	80 6f       	ori	r24, 0xF0	; 240
 124:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 12c:	37 d4       	rcall	.+2158   	; 0x99c <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	8f 71       	andi	r24, 0x1F	; 31
 132:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 134:	8d b1       	in	r24, 0x0d	; 13
 136:	8f 7c       	andi	r24, 0xCF	; 207
 138:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	80 6e       	ori	r24, 0xE0	; 224
 13e:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 140:	8e b1       	in	r24, 0x0e	; 14
 142:	80 63       	ori	r24, 0x30	; 48
 144:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 146:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 148:	72 9a       	sbi	0x0e, 2	; 14
 14a:	08 95       	ret

0000014c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 14c:	80 ea       	ldi	r24, 0xA0	; 160
 14e:	cc cf       	rjmp	.-104    	; 0xe8 <LEDs_SetAllLEDs>

00000150 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	ca cf       	rjmp	.-108    	; 0xe8 <LEDs_SetAllLEDs>

00000154 <EVENT_USB_Host_DeviceEnumerationComplete>:
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 154:	80 ea       	ldi	r24, 0xA0	; 160
 156:	c8 df       	rcall	.-112    	; 0xe8 <LEDs_SetAllLEDs>

	/* Get and process the configuration descriptor data */
	if (ProcessConfigurationDescriptor() != SuccessfulConfigRead)
 158:	ed d0       	rcall	.+474    	; 0x334 <ProcessConfigurationDescriptor>
 15a:	88 23       	and	r24, r24
 15c:	11 f0       	breq	.+4      	; 0x162 <EVENT_USB_Host_DeviceEnumerationComplete+0xe>
 15e:	80 e9       	ldi	r24, 0x90	; 144
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
 160:	05 c0       	rjmp	.+10     	; 0x16c <EVENT_USB_Host_DeviceEnumerationComplete+0x18>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	d7 d6       	rcall	.+3502   	; 0xf14 <USB_Host_SetDeviceConfiguration>
 166:	81 11       	cpse	r24, r1
 168:	fa cf       	rjmp	.-12     	; 0x15e <EVENT_USB_Host_DeviceEnumerationComplete+0xa>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	bd cf       	rjmp	.-134    	; 0xe8 <LEDs_SetAllLEDs>

0000016e <EVENT_USB_Host_HostError>:
 16e:	af d3       	rcall	.+1886   	; 0x8ce <USB_Disable>
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
 170:	80 e9       	ldi	r24, 0x90	; 144
 172:	ba df       	rcall	.-140    	; 0xe8 <LEDs_SetAllLEDs>
 174:	ff cf       	rjmp	.-2      	; 0x174 <EVENT_USB_Host_HostError+0x6>

00000176 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
 176:	80 e9       	ldi	r24, 0x90	; 144
 178:	b7 cf       	rjmp	.-146    	; 0xe8 <LEDs_SetAllLEDs>

0000017a <DiscardNextReport>:
}

/** Reads in and discards the next report from the attached device. */
void DiscardNextReport(void)
{
	if (USB_HostState != HOST_STATE_Configured)
 17a:	8e b3       	in	r24, 0x1e	; 30
 17c:	8b 30       	cpi	r24, 0x0B	; 11
 17e:	b1 f4       	brne	.+44     	; 0x1ac <DiscardNextReport+0x32>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 186:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 18a:	8f 7b       	andi	r24, 0xBF	; 191
 18c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
 190:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	/* Select and unfreeze HID data IN pipe */
	Pipe_SelectPipe(HID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
 194:	80 ff       	sbrs	r24, 0
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <DiscardNextReport+0x28>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
 198:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 19c:	8e 77       	andi	r24, 0x7E	; 126
 19e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 1a2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1ac:	08 95       	ret

000001ae <WriteNextReport>:
 *  \param[in] ReportLength  Length of the report to send
 */
void WriteNextReport(uint8_t* const ReportOUTData,
                     const uint16_t ReportLength)
{
	if (USB_HostState != HOST_STATE_Configured)
 1ae:	2e b3       	in	r18, 0x1e	; 30
 1b0:	2b 30       	cpi	r18, 0x0B	; 11
 1b2:	b9 f5       	brne	.+110    	; 0x222 <WriteNextReport+0x74>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
 1b4:	22 e0       	ldi	r18, 0x02	; 2
 1b6:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
 1ba:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	/* Select and unfreeze HID data OUT pipe */
	Pipe_SelectPipe(HID_DATA_OUT_PIPE);

	/* Not all HID devices have an OUT endpoint (some require OUT reports to be sent over the
	 * control endpoint instead) - check to see if the OUT endpoint has been initialized */
	if (Pipe_IsConfigured())
 1be:	27 ff       	sbrs	r18, 7
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <WriteNextReport+0x42>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 1c2:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1c6:	2f 7b       	andi	r18, 0xBF	; 191
 1c8:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
 1cc:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_Unfreeze();

		/* Ensure pipe is ready to be written to before continuing */
		if (!(Pipe_IsOUTReady()))
 1d0:	22 ff       	sbrs	r18, 2
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <WriteNextReport+0x36>

			return;
		}

		/* Write out HID report data */
		Pipe_Write_Stream_LE(ReportOUTData, ReportLength, NULL);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	88 d4       	rcall	.+2320   	; 0xaea <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 1da:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 1de:	8b 77       	andi	r24, 0x7B	; 123
 1e0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 1e4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1ee:	08 95       	ret
		Pipe_Freeze();
	}
	else
	{
		/* Class specific request to send a HID report to the device */
		USB_ControlRequest = (USB_Request_Header_t)
 1f0:	21 e2       	ldi	r18, 0x21	; 33
 1f2:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <USB_ControlRequest>
 1f6:	29 e0       	ldi	r18, 0x09	; 9
 1f8:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <USB_ControlRequest+0x1>
 1fc:	22 e0       	ldi	r18, 0x02	; 2
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <USB_ControlRequest+0x3>
 204:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <USB_ControlRequest+0x2>
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <USB_ControlRequest+0x5>
 210:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <USB_ControlRequest+0x4>
 214:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <USB_ControlRequest+0x7>
 218:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
 21c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

		/* Select the control pipe for the request transfer */
		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		/* Send the request to the device */
		USB_Host_SendControlRequest(ReportOUTData);
 220:	83 c5       	rjmp	.+2822   	; 0xd28 <USB_Host_SendControlRequest>
 222:	08 95       	ret

00000224 <Send_Command_Report>:
 *  \param[in] Report  Report data to send.
 *  \param[in] ReportSize  Report length in bytes.
 */
void Send_Command_Report(const uint8_t* const Report,
                         const uint16_t ReportSize)
{
 224:	fc 01       	movw	r30, r24
	memcpy(CmdBuffer, Report, 8);
 226:	98 e0       	ldi	r25, 0x08	; 8
 228:	a2 e5       	ldi	r26, 0x52	; 82
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 90       	ld	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	9a 95       	dec	r25
 232:	e1 f7       	brne	.-8      	; 0x22c <Send_Command_Report+0x8>
	WriteNextReport(CmdBuffer, ReportSize);
 234:	82 e5       	ldi	r24, 0x52	; 82
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	ba cf       	rjmp	.-140    	; 0x1ae <WriteNextReport>

0000023a <Send_Command>:
/** Sends one of the CMD_* command constants to the attached device.
 *
 *  \param[in] Command  One of the command constants.
 */
void Send_Command(const uint8_t* const Command)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	if ((CmdState == CMD_STOP && Command != CMD_STOP) ||
 240:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <CmdState>
 244:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <CmdState+0x1>
 248:	89 52       	subi	r24, 0x29	; 41
 24a:	91 40       	sbci	r25, 0x01	; 1
 24c:	29 f4       	brne	.+10     	; 0x258 <Send_Command+0x1e>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	c9 32       	cpi	r28, 0x29	; 41
 252:	d8 07       	cpc	r29, r24
 254:	29 f4       	brne	.+10     	; 0x260 <Send_Command+0x26>
 256:	16 c0       	rjmp	.+44     	; 0x284 <Send_Command+0x4a>
		(CmdState != CMD_STOP && Command == CMD_STOP))
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	c9 32       	cpi	r28, 0x29	; 41
 25c:	d2 07       	cpc	r29, r18
 25e:	91 f4       	brne	.+36     	; 0x284 <Send_Command+0x4a>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
 260:	9b b1       	in	r25, 0x0b	; 11
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	89 27       	eor	r24, r25
 266:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_ToggleLEDs(LEDS_LED4);

		Send_Command_Report(CMD_INITA, 8);
 268:	68 e0       	ldi	r22, 0x08	; 8
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	89 e3       	ldi	r24, 0x39	; 57
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	d9 df       	rcall	.-78     	; 0x224 <Send_Command_Report>
		Send_Command_Report(CMD_INITB, 8);
 272:	68 e0       	ldi	r22, 0x08	; 8
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	81 e3       	ldi	r24, 0x31	; 49
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	d4 df       	rcall	.-88     	; 0x224 <Send_Command_Report>
		Send_Command_Report(Command, LAUNCHER_CMD_BUFFER_SIZE);
 27c:	60 e4       	ldi	r22, 0x40	; 64
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	ce 01       	movw	r24, r28
 282:	d0 df       	rcall	.-96     	; 0x224 <Send_Command_Report>
	}

	CmdState = Command;
 284:	d0 93 93 01 	sts	0x0193, r29	; 0x800193 <CmdState+0x1>
 288:	c0 93 92 01 	sts	0x0192, r28	; 0x800192 <CmdState>
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <Read_Joystick_Status>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 292:	83 b1       	in	r24, 0x03	; 3
 294:	9c b1       	in	r25, 0x0c	; 12
 296:	90 95       	com	r25
 298:	90 73       	andi	r25, 0x30	; 48
 29a:	96 95       	lsr	r25
 29c:	80 95       	com	r24
 29e:	80 7e       	andi	r24, 0xE0	; 224
 2a0:	89 2b       	or	r24, r25
void Read_Joystick_Status(void)
{
	uint8_t JoyStatus_LCL = Joystick_GetStatus();
	uint8_t Buttons_LCL   = Buttons_GetStatus();

	if (Buttons_LCL & BUTTONS_BUTTON1)
 2a2:	62 99       	sbic	0x0c, 2	; 12
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <Read_Joystick_Status+0x1a>
	  Send_Command(CMD_FIRE);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	1d c0       	rjmp	.+58     	; 0x2e6 <Read_Joystick_Status+0x54>
	else if (JoyStatus_LCL & JOY_UP)
 2ac:	87 ff       	sbrs	r24, 7
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <Read_Joystick_Status+0x24>
	  Send_Command(CMD_UP);
 2b0:	81 e1       	ldi	r24, 0x11	; 17
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	18 c0       	rjmp	.+48     	; 0x2e6 <Read_Joystick_Status+0x54>
	else if (JoyStatus_LCL & JOY_DOWN)
 2b6:	84 ff       	sbrs	r24, 4
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <Read_Joystick_Status+0x2e>
	  Send_Command(CMD_DOWN);
 2ba:	89 e0       	ldi	r24, 0x09	; 9
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	13 c0       	rjmp	.+38     	; 0x2e6 <Read_Joystick_Status+0x54>
	else if (JoyStatus_LCL & JOY_LEFT)
 2c0:	86 ff       	sbrs	r24, 6
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <Read_Joystick_Status+0x38>
	  Send_Command(CMD_LEFT);
 2c4:	81 e2       	ldi	r24, 0x21	; 33
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e c0       	rjmp	.+28     	; 0x2e6 <Read_Joystick_Status+0x54>
	else if (JoyStatus_LCL & JOY_RIGHT)
 2ca:	83 ff       	sbrs	r24, 3
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <Read_Joystick_Status+0x42>
	  Send_Command(CMD_RIGHT);
 2ce:	89 e1       	ldi	r24, 0x19	; 25
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <Read_Joystick_Status+0x54>
	else if (CmdState != CMD_STOP)
 2d4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <CmdState>
 2d8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <CmdState+0x1>
 2dc:	89 52       	subi	r24, 0x29	; 41
 2de:	91 40       	sbci	r25, 0x01	; 1
 2e0:	19 f0       	breq	.+6      	; 0x2e8 <Read_Joystick_Status+0x56>
	  Send_Command(CMD_STOP);
 2e2:	89 e2       	ldi	r24, 0x29	; 41
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	a9 cf       	rjmp	.-174    	; 0x23a <Send_Command>
 2e8:	08 95       	ret

000002ea <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 2ea:	03 df       	rcall	.-506    	; 0xf2 <SetupHardware>

	CmdState = CMD_STOP;
 2ec:	89 e2       	ldi	r24, 0x29	; 41
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <CmdState+0x1>
 2f4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <CmdState>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	f6 de       	rcall	.-532    	; 0xe8 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		Read_Joystick_Status();
 2fc:	78 94       	sei
		DiscardNextReport();
 2fe:	c9 df       	rcall	.-110    	; 0x292 <Read_Joystick_Status>
 300:	3c df       	rcall	.-392    	; 0x17a <DiscardNextReport>
		
		USB_USBTask();
 302:	2e d6       	rcall	.+3164   	; 0xf60 <USB_USBTask>
 304:	fc cf       	rjmp	.-8      	; 0x2fe <main+0x14>

00000306 <DComp_NextHIDInterface>:
uint8_t DComp_NextHIDInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
 306:	fc 01       	movw	r30, r24
 308:	21 81       	ldd	r18, Z+1	; 0x01
 30a:	24 30       	cpi	r18, 0x04	; 4
 30c:	29 f4       	brne	.+10     	; 0x318 <DComp_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if (Interface->Class == HID_CLASS)
 30e:	85 81       	ldd	r24, Z+5	; 0x05
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	11 f4       	brne	.+4      	; 0x318 <DComp_NextHIDInterface+0x12>
		{
			/* Indicate that the descriptor being searched for has been found */
			return DESCRIPTOR_SEARCH_Found;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
 318:	82 e0       	ldi	r24, 0x02	; 2
}
 31a:	08 95       	ret

0000031c <DComp_NextHIDInterfaceDataEndpoint>:
uint8_t DComp_NextHIDInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
 31c:	fc 01       	movw	r30, r24
 31e:	81 81       	ldd	r24, Z+1	; 0x01
 320:	85 30       	cpi	r24, 0x05	; 5
 322:	21 f0       	breq	.+8      	; 0x32c <DComp_NextHIDInterfaceDataEndpoint+0x10>
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
 324:	84 30       	cpi	r24, 0x04	; 4
 326:	21 f0       	breq	.+8      	; 0x330 <DComp_NextHIDInterfaceDataEndpoint+0x14>
		return DESCRIPTOR_SEARCH_Fail;
	}
	else
	{
		/* Current descriptor does not match what this comparator is looking for */
		return DESCRIPTOR_SEARCH_NotFound;
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	08 95       	ret

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		/* Indicate that the search has failed prematurely and should be aborted */
		return DESCRIPTOR_SEARCH_Fail;
 330:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/* Current descriptor does not match what this comparator is looking for */
		return DESCRIPTOR_SEARCH_NotFound;
	}
}
 332:	08 95       	ret

00000334 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the GenericHIDHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
 334:	af 92       	push	r10
 336:	bf 92       	push	r11
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	c4 50       	subi	r28, 0x04	; 4
 34e:	d2 40       	sbci	r29, 0x02	; 2
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
 35a:	ae 01       	movw	r20, r28
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	cd 5f       	subi	r28, 0xFD	; 253
 362:	dd 4f       	sbci	r29, 0xFD	; 253
 364:	59 83       	std	Y+1, r21	; 0x01
 366:	48 83       	st	Y, r20
 368:	c3 50       	subi	r28, 0x03	; 3
 36a:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	32 e0       	ldi	r19, 0x02	; 2
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7d 4f       	sbci	r23, 0xFD	; 253
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	25 d4       	rcall	.+2122   	; 0xbc4 <USB_Host_GetDeviceConfigDescriptor>
 37a:	f8 2e       	mov	r15, r24
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	f8 16       	cp	r15, r24
 380:	69 f0       	breq	.+26     	; 0x39c <ProcessConfigurationDescriptor+0x68>
 382:	e6 e0       	ldi	r30, 0x06	; 6
 384:	fe 16       	cp	r15, r30
 386:	09 f4       	brne	.+2      	; 0x38a <ProcessConfigurationDescriptor+0x56>
 388:	57 c0       	rjmp	.+174    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 38a:	f1 10       	cpse	r15, r1
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <ProcessConfigurationDescriptor+0x6e>
 38e:	a1 2c       	mov	r10, r1
 390:	b1 2c       	mov	r11, r1
 392:	c1 2c       	mov	r12, r1
 394:	d1 2c       	mov	r13, r1
 396:	00 e0       	ldi	r16, 0x00	; 0
 398:	10 e0       	ldi	r17, 0x00	; 0
 39a:	2e c0       	rjmp	.+92     	; 0x3f8 <ProcessConfigurationDescriptor+0xc4>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
 39c:	22 e0       	ldi	r18, 0x02	; 2
 39e:	f2 2e       	mov	r15, r18
 3a0:	62 c0       	rjmp	.+196    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		default:
			return ControlError;
 3a2:	ff 24       	eor	r15, r15
 3a4:	f3 94       	inc	r15
 3a6:	5f c0       	rjmp	.+190    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
 3a8:	01 15       	cp	r16, r1
 3aa:	11 05       	cpc	r17, r1
 3ac:	79 f0       	breq	.+30     	; 0x3cc <ProcessConfigurationDescriptor+0x98>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
 3ae:	4e e8       	ldi	r20, 0x8E	; 142
 3b0:	51 e0       	ldi	r21, 0x01	; 1
 3b2:	be 01       	movw	r22, r28
 3b4:	6d 5f       	subi	r22, 0xFD	; 253
 3b6:	7d 4f       	sbci	r23, 0xFD	; 253
 3b8:	ce 01       	movw	r24, r28
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	9d 4f       	sbci	r25, 0xFD	; 253
 3be:	5b d4       	rcall	.+2230   	; 0xc76 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
 3c0:	88 23       	and	r24, r24
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <ProcessConfigurationDescriptor+0x92>
 3c4:	3c c0       	rjmp	.+120    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextHIDInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Not all HID devices have an OUT endpoint - if we've reached the end of the HID descriptor
			 * but only found the mandatory IN endpoint, it's safe to continue with the device enumeration */
			if (DataINEndpoint)
 3c6:	c1 14       	cp	r12, r1
 3c8:	d1 04       	cpc	r13, r1
 3ca:	e1 f4       	brne	.+56     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			  break;

			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
 3cc:	43 e8       	ldi	r20, 0x83	; 131
 3ce:	51 e0       	ldi	r21, 0x01	; 1
 3d0:	be 01       	movw	r22, r28
 3d2:	6d 5f       	subi	r22, 0xFD	; 253
 3d4:	7d 4f       	sbci	r23, 0xFD	; 253
 3d6:	ce 01       	movw	r24, r28
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	9d 4f       	sbci	r25, 0xFD	; 253
 3dc:	4c d4       	rcall	.+2200   	; 0xc76 <USB_GetNextDescriptorComp>
 3de:	81 11       	cpse	r24, r1
 3e0:	3a c0       	rjmp	.+116    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
 3e2:	cd 5f       	subi	r28, 0xFD	; 253
 3e4:	dd 4f       	sbci	r29, 0xFD	; 253
 3e6:	08 81       	ld	r16, Y
 3e8:	19 81       	ldd	r17, Y+1	; 0x01
 3ea:	c3 50       	subi	r28, 0x03	; 3
 3ec:	d2 40       	sbci	r29, 0x02	; 2

			/* Clear any found endpoints */
			DataOUTEndpoint = NULL;
 3ee:	a1 2c       	mov	r10, r1
 3f0:	b1 2c       	mov	r11, r1

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	f0 e0       	ldi	r31, 0x00	; 0

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
 3f6:	6f 01       	movw	r12, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
 3f8:	c1 14       	cp	r12, r1
 3fa:	d1 04       	cpc	r13, r1
 3fc:	a9 f2       	breq	.-86     	; 0x3a8 <ProcessConfigurationDescriptor+0x74>
 3fe:	a1 14       	cp	r10, r1
 400:	b1 04       	cpc	r11, r1
 402:	61 f1       	breq	.+88     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(HID_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
 404:	f6 01       	movw	r30, r12
 406:	04 81       	ldd	r16, Z+4	; 0x04
 408:	15 81       	ldd	r17, Z+5	; 0x05
 40a:	e1 2c       	mov	r14, r1
 40c:	22 81       	ldd	r18, Z+2	; 0x02
 40e:	40 e1       	ldi	r20, 0x10	; 16
 410:	63 e0       	ldi	r22, 0x03	; 3
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	e5 d1       	rcall	.+970    	; 0x7e0 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
 416:	f6 01       	movw	r30, r12
 418:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
 41a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Check if the HID interface contained an optional OUT data endpoint */
	if (DataOUTEndpoint)
 41e:	a1 14       	cp	r10, r1
 420:	b1 04       	cpc	r11, r1
 422:	09 f1       	breq	.+66     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		/* Configure the HID data OUT pipe */
		Pipe_ConfigurePipe(HID_DATA_OUT_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
 424:	f5 01       	movw	r30, r10
 426:	04 81       	ldd	r16, Z+4	; 0x04
 428:	15 81       	ldd	r17, Z+5	; 0x05
 42a:	e1 2c       	mov	r14, r1
 42c:	22 81       	ldd	r18, Z+2	; 0x02
 42e:	40 e2       	ldi	r20, 0x20	; 32
 430:	63 e0       	ldi	r22, 0x03	; 3
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	d5 d1       	rcall	.+938    	; 0x7e0 <Pipe_ConfigurePipe>
 436:	17 c0       	rjmp	.+46     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
 438:	93 e0       	ldi	r25, 0x03	; 3
 43a:	f9 2e       	mov	r15, r25
 43c:	14 c0       	rjmp	.+40     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
 43e:	cd 5f       	subi	r28, 0xFD	; 253
 440:	dd 4f       	sbci	r29, 0xFD	; 253
 442:	e8 81       	ld	r30, Y
 444:	f9 81       	ldd	r31, Y+1	; 0x01
 446:	c3 50       	subi	r28, 0x03	; 3
 448:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
 44a:	82 81       	ldd	r24, Z+2	; 0x02
 44c:	87 fd       	sbrc	r24, 7
 44e:	d3 cf       	rjmp	.-90     	; 0x3f6 <ProcessConfigurationDescriptor+0xc2>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
 450:	5f 01       	movw	r10, r30

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
 452:	f6 01       	movw	r30, r12
 454:	d0 cf       	rjmp	.-96     	; 0x3f6 <ProcessConfigurationDescriptor+0xc2>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	f8 2e       	mov	r15, r24
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
 45c:	01 15       	cp	r16, r1
 45e:	11 05       	cpc	r17, r1
 460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	a5 cf       	rjmp	.-182    	; 0x3ae <ProcessConfigurationDescriptor+0x7a>
 464:	cf cf       	rjmp	.-98     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
						   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	}

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
 466:	8f 2d       	mov	r24, r15
 468:	cc 5f       	subi	r28, 0xFC	; 252
 46a:	dd 4f       	sbci	r29, 0xFD	; 253
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	08 95       	ret

0000048c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
 48c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 490:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
 492:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 496:	9d 7f       	andi	r25, 0xFD	; 253
 498:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
 49c:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 4a0:	92 60       	ori	r25, 0x02	; 2
 4a2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
 4a6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
 4aa:	91 fd       	sbrc	r25, 1
 4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
 4ae:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 4b2:	91 60       	ori	r25, 0x01	; 1
 4b4:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
 4b8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
 4bc:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 4c0:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
 4c2:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 4c6:	2f 7d       	andi	r18, 0xDF	; 223
 4c8:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
 4cc:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 4d0:	2f 7d       	andi	r18, 0xDF	; 223
 4d2:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 4d6:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
 4d8:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
 4dc:	35 ff       	sbrs	r19, 5
 4de:	0b c0       	rjmp	.+22     	; 0x4f6 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
 4e0:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 4e4:	2f 7d       	andi	r18, 0xDF	; 223
 4e6:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
 4ea:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 4ee:	2d 7f       	andi	r18, 0xFD	; 253
 4f0:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	ef ec       	ldi	r30, 0xCF	; 207
 4f8:	f7 e0       	ldi	r31, 0x07	; 7
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <USB_Host_ResetDevice+0x6e>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <USB_Host_ResetDevice+0x74>
 500:	00 00       	nop
 502:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
 504:	49 f7       	brne	.-46     	; 0x4d8 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
 506:	99 23       	and	r25, r25
 508:	29 f0       	breq	.+10     	; 0x514 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
 50a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 50e:	90 62       	ori	r25, 0x20	; 32
 510:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
 514:	81 11       	cpse	r24, r1
 516:	05 c0       	rjmp	.+10     	; 0x522 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
 518:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 51c:	8e 7f       	andi	r24, 0xFE	; 254
 51e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
 522:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 526:	82 60       	ori	r24, 0x02	; 2
 528:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 52c:	08 95       	ret

0000052e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
 52e:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 532:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
 534:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 538:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
 53a:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 53e:	3f 7d       	andi	r19, 0xDF	; 223
 540:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
 544:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 548:	3f 7d       	andi	r19, 0xDF	; 223
 54a:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
 54e:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 552:	31 60       	ori	r19, 0x01	; 1
 554:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
 558:	88 23       	and	r24, r24
 55a:	31 f1       	breq	.+76     	; 0x5a8 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
 55c:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
 560:	35 ff       	sbrs	r19, 5
 562:	06 c0       	rjmp	.+12     	; 0x570 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
 564:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 568:	3f 7d       	andi	r19, 0xDF	; 223
 56a:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
 56e:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
 570:	3e b3       	in	r19, 0x1e	; 30
 572:	31 30       	cpi	r19, 0x01	; 1
 574:	c1 f0       	breq	.+48     	; 0x5a6 <USB_Host_WaitMS+0x78>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
 576:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
 57a:	34 ff       	sbrs	r19, 4
 57c:	09 c0       	rjmp	.+18     	; 0x590 <USB_Host_WaitMS+0x62>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
 57e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
 582:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 586:	8f 7e       	andi	r24, 0xEF	; 239
 588:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
 58c:	82 e0       	ldi	r24, 0x02	; 2

			break;
 58e:	0c c0       	rjmp	.+24     	; 0x5a8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
 590:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
 594:	31 ff       	sbrs	r19, 1
 596:	e0 cf       	rjmp	.-64     	; 0x558 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
 598:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 59c:	8d 7f       	andi	r24, 0xFD	; 253
 59e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
 5a2:	83 e0       	ldi	r24, 0x03	; 3

			break;
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <USB_Host_WaitMS+0x7a>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
 5a6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
 5a8:	21 11       	cpse	r18, r1
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <USB_Host_WaitMS+0x88>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
 5ac:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 5b0:	2e 7f       	andi	r18, 0xFE	; 254
 5b2:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
 5b6:	99 23       	and	r25, r25
 5b8:	29 f0       	breq	.+10     	; 0x5c4 <USB_Host_WaitMS+0x96>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
 5ba:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 5be:	90 62       	ori	r25, 0x20	; 32
 5c0:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
 5c4:	08 95       	ret

000005c6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
 5c6:	ef 92       	push	r14
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	28 97       	sbiw	r28, 0x08	; 8
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
 5e0:	ee b3       	in	r30, 0x1e	; 30
 5e2:	8e 2f       	mov	r24, r30
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	91 05       	cpc	r25, r1
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <USB_Host_ProcessNextHostState+0x28>
 5ec:	ed c0       	rjmp	.+474    	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
 5ee:	fc 01       	movw	r30, r24
 5f0:	e4 5b       	subi	r30, 0xB4	; 180
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	c3 c4       	rjmp	.+2438   	; 0xf7c <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
 5f6:	00 91 95 01 	lds	r16, 0x0195	; 0x800195 <WaitMSRemaining.2934>
 5fa:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <WaitMSRemaining.2934+0x1>
 5fe:	01 15       	cp	r16, r1
 600:	11 05       	cpc	r17, r1
 602:	09 f4       	brne	.+2      	; 0x606 <USB_Host_ProcessNextHostState+0x40>
 604:	e1 c0       	rjmp	.+450    	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	92 df       	rcall	.-220    	; 0x52e <USB_Host_WaitMS>
 60a:	88 23       	and	r24, r24
 60c:	29 f0       	breq	.+10     	; 0x618 <USB_Host_ProcessNextHostState+0x52>
				{
					USB_HostState = PostWaitState;
 60e:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <PostWaitState.2935>
 612:	9e bb       	out	0x1e, r25	; 30
					ErrorCode     = HOST_ENUMERROR_WaitStage;
 614:	91 e0       	ldi	r25, 0x01	; 1
					break;
 616:	cb c0       	rjmp	.+406    	; 0x7ae <USB_Host_ProcessNextHostState+0x1e8>
				}

				if (!(--WaitMSRemaining))
 618:	01 50       	subi	r16, 0x01	; 1
 61a:	11 09       	sbc	r17, r1
 61c:	10 93 96 01 	sts	0x0196, r17	; 0x800196 <WaitMSRemaining.2934+0x1>
 620:	00 93 95 01 	sts	0x0195, r16	; 0x800195 <WaitMSRemaining.2934>
 624:	01 2b       	or	r16, r17
 626:	09 f0       	breq	.+2      	; 0x62a <USB_Host_ProcessNextHostState+0x64>
 628:	cf c0       	rjmp	.+414    	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
				  USB_HostState = PostWaitState;
 62a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <PostWaitState.2935>
 62e:	07 c0       	rjmp	.+14     	; 0x63e <USB_Host_ProcessNextHostState+0x78>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
 630:	88 ee       	ldi	r24, 0xE8	; 232
 632:	93 e0       	ldi	r25, 0x03	; 3
 634:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <WaitMSRemaining.2934+0x1>
 638:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <WaitMSRemaining.2934>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	8e bb       	out	0x1e, r24	; 30
			break;
 640:	c3 c0       	rjmp	.+390    	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
 642:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <WaitMSRemaining.2934>
 646:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <WaitMSRemaining.2934+0x1>
 64a:	9c 01       	movw	r18, r24
 64c:	21 50       	subi	r18, 0x01	; 1
 64e:	31 09       	sbc	r19, r1
 650:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <WaitMSRemaining.2934+0x1>
 654:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <WaitMSRemaining.2934>
 658:	89 2b       	or	r24, r25
 65a:	39 f0       	breq	.+14     	; 0x66a <USB_Host_ProcessNextHostState+0xa4>
 65c:	8f ec       	ldi	r24, 0xCF	; 207
 65e:	97 e0       	ldi	r25, 0x07	; 7
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <USB_Host_ProcessNextHostState+0x9a>
 664:	00 c0       	rjmp	.+0      	; 0x666 <USB_Host_ProcessNextHostState+0xa0>
 666:	00 00       	nop
 668:	af c0       	rjmp	.+350    	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
 66a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 66c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 670:	80 61       	ori	r24, 0x10	; 16
 672:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
 676:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 67a:	8b 7f       	andi	r24, 0xFB	; 251
 67c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
 680:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 684:	80 61       	ori	r24, 0x10	; 16
 686:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
 68a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 68e:	82 60       	ori	r24, 0x02	; 2
 690:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
 694:	84 e0       	ldi	r24, 0x04	; 4
 696:	d3 cf       	rjmp	.-90     	; 0x63e <USB_Host_ProcessNextHostState+0x78>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
 698:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
 69c:	80 ff       	sbrs	r24, 0
 69e:	94 c0       	rjmp	.+296    	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
 6a0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 6a4:	8e 7f       	andi	r24, 0xFE	; 254
 6a6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
 6aa:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 6ae:	8d 7f       	andi	r24, 0xFD	; 253
 6b0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
 6b4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
 6b8:	8d 7f       	andi	r24, 0xFD	; 253
 6ba:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
 6be:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 6c2:	82 60       	ori	r24, 0x02	; 2
 6c4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
 6c8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
 6d2:	bc d0       	rcall	.+376    	; 0x84c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
 6d4:	1e ba       	out	0x1e, r1	; 30
 6d6:	84 e6       	ldi	r24, 0x64	; 100
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <WaitMSRemaining.2934+0x1>
 6de:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <WaitMSRemaining.2934>
 6e2:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
 6e4:	59 c0       	rjmp	.+178    	; 0x798 <USB_Host_ProcessNextHostState+0x1d2>
 6e6:	d2 de       	rcall	.-604    	; 0x48c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
 6e8:	1e ba       	out	0x1e, r1	; 30
 6ea:	88 ec       	ldi	r24, 0xC8	; 200
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <WaitMSRemaining.2934+0x1>
 6f2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <WaitMSRemaining.2934>
 6f6:	86 e0       	ldi	r24, 0x06	; 6
 6f8:	4f c0       	rjmp	.+158    	; 0x798 <USB_Host_ProcessNextHostState+0x1d2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
 6fa:	e1 2c       	mov	r14, r1
 6fc:	00 e4       	ldi	r16, 0x40	; 64
 6fe:	10 e0       	ldi	r17, 0x00	; 0
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	40 e0       	ldi	r20, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	6b d0       	rcall	.+214    	; 0x7e0 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
 70a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
 70e:	87 fd       	sbrc	r24, 7
 710:	03 c0       	rjmp	.+6      	; 0x718 <USB_Host_ProcessNextHostState+0x152>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
 712:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
 714:	94 e0       	ldi	r25, 0x04	; 4
 716:	4b c0       	rjmp	.+150    	; 0x7ae <USB_Host_ProcessNextHostState+0x1e8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
 718:	87 e0       	ldi	r24, 0x07	; 7
 71a:	91 cf       	rjmp	.-222    	; 0x63e <USB_Host_ProcessNextHostState+0x78>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
 71c:	88 e0       	ldi	r24, 0x08	; 8
 71e:	e1 e4       	ldi	r30, 0x41	; 65
 720:	f1 e0       	ldi	r31, 0x01	; 1
 722:	a9 e9       	ldi	r26, 0x99	; 153
 724:	b1 e0       	ldi	r27, 0x01	; 1
 726:	01 90       	ld	r0, Z+
 728:	0d 92       	st	X+, r0
 72a:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
 72c:	e1 f7       	brne	.-8      	; 0x726 <USB_Host_ProcessNextHostState+0x160>
 72e:	ce 01       	movw	r24, r28
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	fa d2       	rcall	.+1524   	; 0xd28 <USB_Host_SendControlRequest>
 734:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
 736:	3a c0       	rjmp	.+116    	; 0x7ac <USB_Host_ProcessNextHostState+0x1e6>
 738:	88 85       	ldd	r24, Y+8	; 0x08
 73a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
 73e:	a6 de       	rcall	.-692    	; 0x48c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
 740:	1e ba       	out	0x1e, r1	; 30
 742:	88 ec       	ldi	r24, 0xC8	; 200
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <WaitMSRemaining.2934+0x1>
 74a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <WaitMSRemaining.2934>
 74e:	88 e0       	ldi	r24, 0x08	; 8
 750:	23 c0       	rjmp	.+70     	; 0x798 <USB_Host_ProcessNextHostState+0x1d2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
 752:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 756:	10 e0       	ldi	r17, 0x00	; 0
 758:	e1 2c       	mov	r14, r1
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	3e d0       	rcall	.+124    	; 0x7e0 <Pipe_ConfigurePipe>
 764:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
 768:	87 ff       	sbrs	r24, 7
 76a:	d3 cf       	rjmp	.-90     	; 0x712 <USB_Host_ProcessNextHostState+0x14c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
 76c:	88 e0       	ldi	r24, 0x08	; 8
 76e:	e9 e4       	ldi	r30, 0x49	; 73
 770:	f1 e0       	ldi	r31, 0x01	; 1
 772:	a9 e9       	ldi	r26, 0x99	; 153
 774:	b1 e0       	ldi	r27, 0x01	; 1
 776:	01 90       	ld	r0, Z+
 778:	0d 92       	st	X+, r0
 77a:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
 77c:	e1 f7       	brne	.-8      	; 0x776 <USB_Host_ProcessNextHostState+0x1b0>
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	d2 d2       	rcall	.+1444   	; 0xd28 <USB_Host_SendControlRequest>
 784:	81 11       	cpse	r24, r1
 786:	12 c0       	rjmp	.+36     	; 0x7ac <USB_Host_ProcessNextHostState+0x1e6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
 788:	1e ba       	out	0x1e, r1	; 30
 78a:	84 e6       	ldi	r24, 0x64	; 100
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <WaitMSRemaining.2934+0x1>
 792:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <WaitMSRemaining.2934>
 796:	89 e0       	ldi	r24, 0x09	; 9
 798:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <PostWaitState.2935>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
 79c:	15 c0       	rjmp	.+42     	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;

			EVENT_USB_Host_DeviceEnumerationComplete();
 7a4:	8a e0       	ldi	r24, 0x0A	; 10
 7a6:	8e bb       	out	0x1e, r24	; 30
			break;
 7a8:	d5 dc       	rcall	.-1622   	; 0x154 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
 7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
 7ac:	93 e0       	ldi	r25, 0x03	; 3
 7ae:	2e b3       	in	r18, 0x1e	; 30
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
 7b0:	21 30       	cpi	r18, 0x01	; 1
 7b2:	51 f0       	breq	.+20     	; 0x7c8 <USB_Host_ProcessNextHostState+0x202>
 7b4:	68 2f       	mov	r22, r24
 7b6:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
 7b8:	de dc       	rcall	.-1604   	; 0x176 <EVENT_USB_Host_DeviceEnumerationFailed>
 7ba:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 7be:	81 60       	ori	r24, 0x01	; 1
 7c0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
 7c4:	c5 dc       	rcall	.-1654   	; 0x150 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
 7c6:	9b d0       	rcall	.+310    	; 0x8fe <USB_ResetInterface>
 7c8:	28 96       	adiw	r28, 0x08	; 8
	}
}
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ef 90       	pop	r14
 7de:	08 95       	ret

000007e0 <Pipe_ConfigurePipe>:
 7e0:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 7ea:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 7ee:	81 60       	ori	r24, 0x01	; 1
 7f0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 7f4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 7f8:	2f 70       	andi	r18, 0x0F	; 15
 7fa:	42 2b       	or	r20, r18
 7fc:	80 e4       	ldi	r24, 0x40	; 64
 7fe:	68 9f       	mul	r22, r24
 800:	b0 01       	movw	r22, r0
 802:	11 24       	eor	r1, r1
 804:	64 2b       	or	r22, r20
 806:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 80a:	28 e0       	ldi	r18, 0x08	; 8
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	20 17       	cp	r18, r16
 812:	31 07       	cpc	r19, r17
 814:	a8 f0       	brcs	.+42     	; 0x840 <Pipe_ConfigurePipe+0x60>
 816:	82 95       	swap	r24
 818:	80 7f       	andi	r24, 0xF0	; 240
 81a:	9e 2d       	mov	r25, r14
 81c:	92 60       	ori	r25, 0x02	; 2
 81e:	89 2b       	or	r24, r25
 820:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 824:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 828:	80 62       	ori	r24, 0x20	; 32
 82a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 82e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 832:	88 1f       	adc	r24, r24
 834:	88 27       	eor	r24, r24
 836:	88 1f       	adc	r24, r24
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	ef 90       	pop	r14
 83e:	08 95       	ret
 840:	85 30       	cpi	r24, 0x05	; 5
 842:	49 f3       	breq	.-46     	; 0x816 <Pipe_ConfigurePipe+0x36>
 844:	8f 5f       	subi	r24, 0xFF	; 255
 846:	22 0f       	add	r18, r18
 848:	33 1f       	adc	r19, r19
 84a:	e2 cf       	rjmp	.-60     	; 0x810 <Pipe_ConfigurePipe+0x30>

0000084c <Pipe_ClearPipes>:
 84c:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 856:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 85a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 85e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 862:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 866:	9e 7f       	andi	r25, 0xFE	; 254
 868:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 86c:	8f 5f       	subi	r24, 0xFF	; 255
 86e:	87 30       	cpi	r24, 0x07	; 7
 870:	81 f7       	brne	.-32     	; 0x852 <Pipe_ClearPipes+0x6>
 872:	08 95       	ret

00000874 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
 874:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
 878:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
 87c:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
 87e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
 882:	90 73       	andi	r25, 0x30	; 48
 884:	90 31       	cpi	r25, 0x10	; 16
 886:	29 f4       	brne	.+10     	; 0x892 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
 888:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
 88c:	90 ff       	sbrs	r25, 0
 88e:	05 c0       	rjmp	.+10     	; 0x89a <Pipe_WaitUntilReady+0x26>
 890:	18 c0       	rjmp	.+48     	; 0x8c2 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
 892:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
 896:	92 fd       	sbrc	r25, 2
 898:	14 c0       	rjmp	.+40     	; 0x8c2 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
 89a:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
 89e:	91 fd       	sbrc	r25, 1
 8a0:	12 c0       	rjmp	.+36     	; 0x8c6 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
 8a2:	9e b3       	in	r25, 0x1e	; 30
 8a4:	91 30       	cpi	r25, 0x01	; 1
 8a6:	89 f0       	breq	.+34     	; 0x8ca <Pipe_WaitUntilReady+0x56>
 8a8:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
 8ac:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8b0:	42 17       	cp	r20, r18
 8b2:	53 07       	cpc	r21, r19
 8b4:	21 f3       	breq	.-56     	; 0x87e <Pipe_WaitUntilReady+0xa>
 8b6:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8b8:	11 f0       	breq	.+4      	; 0x8be <Pipe_WaitUntilReady+0x4a>
 8ba:	a9 01       	movw	r20, r18
 8bc:	e0 cf       	rjmp	.-64     	; 0x87e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
 8be:	83 e0       	ldi	r24, 0x03	; 3
 8c0:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
 8ca:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
 8cc:	08 95       	ret

000008ce <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
 8ce:	6f d0       	rcall	.+222    	; 0x9ae <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 8d0:	76 d0       	rcall	.+236    	; 0x9be <USB_INT_ClearAllInterrupts>
 8d2:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	80 83       	st	Z, r24
 8dc:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	8f 77       	andi	r24, 0x7F	; 127
 8e4:	80 83       	st	Z, r24
 8e6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 8e8:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
 8ea:	b0 e0       	ldi	r27, 0x00	; 0
 8ec:	8c 91       	ld	r24, X
 8ee:	8e 7f       	andi	r24, 0xFE	; 254
 8f0:	8c 93       	st	X, r24
 8f2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
 8f4:	8f 7e       	andi	r24, 0xEF	; 239
 8f6:	80 83       	st	Z, r24
 8f8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
 8fc:	08 95       	ret

000008fe <USB_ResetInterface>:
 8fe:	57 d0       	rcall	.+174    	; 0x9ae <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 900:	5e d0       	rcall	.+188    	; 0x9be <USB_INT_ClearAllInterrupts>
 902:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 906:	8f 77       	andi	r24, 0x7F	; 127
 908:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 90c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
 910:	80 68       	ori	r24, 0x80	; 128
 912:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 916:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 91a:	8f 7d       	andi	r24, 0xDF	; 223
 91c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 920:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
 924:	8f 77       	andi	r24, 0x7F	; 127
 926:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 92a:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 92c:	89 bd       	out	0x29, r24	; 41
 92e:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 930:	89 bd       	out	0x29, r24	; 41
 932:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
 934:	00 fe       	sbrs	r0, 0
 936:	fd cf       	rjmp	.-6      	; 0x932 <USB_ResetInterface+0x34>
 938:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
 93a:	8e bb       	out	0x1e, r24	; 30
 93c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
 940:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
 942:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 946:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
 94a:	80 64       	ori	r24, 0x40	; 64
 94c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 950:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 95a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
 95e:	84 60       	ori	r24, 0x04	; 4
 960:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 964:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
 968:	8f 7e       	andi	r24, 0xEF	; 239
 96a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 96e:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
 970:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
 972:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
 976:	81 60       	ori	r24, 0x01	; 1
 978:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 97c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
 980:	84 60       	ori	r24, 0x04	; 4
 982:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 986:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 98a:	8e 7f       	andi	r24, 0xFE	; 254
 98c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 990:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 994:	80 61       	ori	r24, 0x10	; 16
 996:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 99a:	08 95       	ret

0000099c <USB_Init>:
 99c:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	81 60       	ori	r24, 0x01	; 1
 9a4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <USB_IsInitialized>

	USB_ResetInterface();
 9ac:	a8 cf       	rjmp	.-176    	; 0x8fe <USB_ResetInterface>

000009ae <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 9ae:	e8 ed       	ldi	r30, 0xD8	; 216
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	8c 7f       	andi	r24, 0xFC	; 252
 9b6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
 9b8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 9bc:	08 95       	ret

000009be <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 9be:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
 9c2:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 9c6:	08 95       	ret

000009c8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	0b b6       	in	r0, 0x3b	; 59
 9d4:	0f 92       	push	r0
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	ef 93       	push	r30
 9ec:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
 9ee:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
 9f2:	85 ff       	sbrs	r24, 5
 9f4:	0a c0       	rjmp	.+20     	; 0xa0a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
 9f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 9fa:	85 ff       	sbrs	r24, 5
 9fc:	06 c0       	rjmp	.+12     	; 0xa0a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
 9fe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 a02:	8f 7d       	andi	r24, 0xDF	; 223
 a04:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
 a08:	68 d1       	rcall	.+720    	; 0xcda <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
 a0a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
 a0e:	81 ff       	sbrs	r24, 1
 a10:	15 c0       	rjmp	.+42     	; 0xa3c <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
 a12:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 a16:	81 ff       	sbrs	r24, 1
 a18:	11 c0       	rjmp	.+34     	; 0xa3c <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
 a1a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 a1e:	8d 7f       	andi	r24, 0xFD	; 253
 a20:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
 a24:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
 a28:	8e 7f       	andi	r24, 0xFE	; 254
 a2a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
 a2e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 a32:	8d 7f       	andi	r24, 0xFD	; 253
 a34:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
 a38:	8b db       	rcall	.-2282   	; 0x150 <EVENT_USB_Host_DeviceUnattached>
 a3a:	61 df       	rcall	.-318    	; 0x8fe <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
 a3c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
 a40:	81 ff       	sbrs	r24, 1
 a42:	14 c0       	rjmp	.+40     	; 0xa6c <__vector_10+0xa4>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
 a44:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 a48:	81 ff       	sbrs	r24, 1
 a4a:	10 c0       	rjmp	.+32     	; 0xa6c <__vector_10+0xa4>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
 a4c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
 a50:	8d 7f       	andi	r24, 0xFD	; 253
 a52:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
 a56:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
 a58:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 a5c:	81 60       	ori	r24, 0x01	; 1
 a5e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	84 db       	rcall	.-2296   	; 0x16e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
 a66:	74 db       	rcall	.-2328   	; 0x150 <EVENT_USB_Host_DeviceUnattached>
 a68:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
 a6a:	8e bb       	out	0x1e, r24	; 30
 a6c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
 a70:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
 a72:	16 c0       	rjmp	.+44     	; 0xaa0 <__vector_10+0xd8>
 a74:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
 a78:	80 ff       	sbrs	r24, 0
 a7a:	12 c0       	rjmp	.+36     	; 0xaa0 <__vector_10+0xd8>
 a7c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
 a80:	8e 7f       	andi	r24, 0xFE	; 254
 a82:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
 a86:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
 a8a:	8e 7f       	andi	r24, 0xFE	; 254
 a8c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
 a90:	5d db       	rcall	.-2374   	; 0x14c <EVENT_USB_Host_DeviceAttached>
 a92:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
 a96:	82 60       	ori	r24, 0x02	; 2
 a98:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 a9c:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
 a9e:	8e bb       	out	0x1e, r24	; 30
 aa0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
 aa4:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
 aa6:	0e c0       	rjmp	.+28     	; 0xac4 <__vector_10+0xfc>
 aa8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
 aac:	82 ff       	sbrs	r24, 2
 aae:	0a c0       	rjmp	.+20     	; 0xac4 <__vector_10+0xfc>
 ab0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
 ab4:	8b 7f       	andi	r24, 0xFB	; 251
 ab6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
 aba:	60 e0       	ldi	r22, 0x00	; 0
 abc:	82 e0       	ldi	r24, 0x02	; 2
 abe:	5b db       	rcall	.-2378   	; 0x176 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
 ac0:	47 db       	rcall	.-2418   	; 0x150 <EVENT_USB_Host_DeviceUnattached>
 ac2:	1d df       	rcall	.-454    	; 0x8fe <USB_ResetInterface>

		USB_ResetInterface();
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0b be       	out	0x3b, r0	; 59
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <Pipe_Write_Stream_LE>:
 aea:	cf 92       	push	r12
 aec:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 aee:	ef 92       	push	r14
 af0:	ff 92       	push	r15
 af2:	0f 93       	push	r16
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	ec 01       	movw	r28, r24
 afc:	8b 01       	movw	r16, r22
 afe:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 b00:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 b04:	8f 7c       	andi	r24, 0xCF	; 207
 b06:	80 62       	ori	r24, 0x20	; 32
 b08:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
 b0c:	b3 de       	rcall	.-666    	; 0x874 <Pipe_WaitUntilReady>
 b0e:	81 11       	cpse	r24, r1
 b10:	32 c0       	rjmp	.+100    	; 0xb76 <Pipe_Write_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
 b12:	e1 14       	cp	r14, r1
 b14:	f1 04       	cpc	r15, r1
 b16:	39 f0       	breq	.+14     	; 0xb26 <Pipe_Write_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
 b18:	f7 01       	movw	r30, r14
 b1a:	80 81       	ld	r24, Z
 b1c:	91 81       	ldd	r25, Z+1	; 0x01
 b1e:	08 1b       	sub	r16, r24
 b20:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 b22:	c8 0f       	add	r28, r24
 b24:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 b26:	c1 2c       	mov	r12, r1
 b28:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
 b2a:	01 15       	cp	r16, r1
 b2c:	11 05       	cpc	r17, r1
 b2e:	11 f1       	breq	.+68     	; 0xb74 <Pipe_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
 b30:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
 b34:	85 fd       	sbrc	r24, 5
 b36:	15 c0       	rjmp	.+42     	; 0xb62 <Pipe_Write_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 b38:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 b3c:	8b 77       	andi	r24, 0x7B	; 123
 b3e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
 b42:	e1 14       	cp	r14, r1
 b44:	f1 04       	cpc	r15, r1
 b46:	49 f0       	breq	.+18     	; 0xb5a <Pipe_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
 b48:	f7 01       	movw	r30, r14
 b4a:	80 81       	ld	r24, Z
 b4c:	91 81       	ldd	r25, Z+1	; 0x01
 b4e:	c8 0e       	add	r12, r24
 b50:	d9 1e       	adc	r13, r25
 b52:	d1 82       	std	Z+1, r13	; 0x01
 b54:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
 b56:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
 b58:	0e c0       	rjmp	.+28     	; 0xb76 <Pipe_Write_Stream_LE+0x8c>
 b5a:	8c de       	rcall	.-744    	; 0x874 <Pipe_WaitUntilReady>
 b5c:	88 23       	and	r24, r24
 b5e:	29 f3       	breq	.-54     	; 0xb2a <Pipe_Write_Stream_LE+0x40>
 b60:	0a c0       	rjmp	.+20     	; 0xb76 <Pipe_Write_Stream_LE+0x8c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 b62:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
 b64:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 b68:	01 50       	subi	r16, 0x01	; 1
 b6a:	11 09       	sbc	r17, r1
			BytesInTransfer++;
 b6c:	ff ef       	ldi	r31, 0xFF	; 255
 b6e:	cf 1a       	sub	r12, r31
 b70:	df 0a       	sbc	r13, r31
 b72:	db cf       	rjmp	.-74     	; 0xb2a <Pipe_Write_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
 b74:	80 e0       	ldi	r24, 0x00	; 0
}
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	1f 91       	pop	r17
 b7c:	0f 91       	pop	r16
 b7e:	ff 90       	pop	r15
 b80:	ef 90       	pop	r14
 b82:	df 90       	pop	r13
 b84:	cf 90       	pop	r12
 b86:	08 95       	ret

00000b88 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
 b8c:	dc 01       	movw	r26, r24
 b8e:	eb 01       	movw	r28, r22
 b90:	e8 81       	ld	r30, Y
 b92:	f9 81       	ldd	r31, Y+1	; 0x01
 b94:	20 81       	ld	r18, Z
 b96:	8d 91       	ld	r24, X+
 b98:	9c 91       	ld	r25, X
 b9a:	11 97       	sbiw	r26, 0x01	; 1
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	82 17       	cp	r24, r18
 ba0:	93 07       	cpc	r25, r19
 ba2:	08 f4       	brcc	.+2      	; 0xba6 <USB_GetNextDescriptor+0x1e>
 ba4:	9c 01       	movw	r18, r24
 ba6:	e2 0f       	add	r30, r18
 ba8:	f3 1f       	adc	r31, r19
 baa:	eb 01       	movw	r28, r22
 bac:	f9 83       	std	Y+1, r31	; 0x01
 bae:	e8 83       	st	Y, r30
 bb0:	8d 91       	ld	r24, X+
 bb2:	9c 91       	ld	r25, X
 bb4:	11 97       	sbiw	r26, 0x01	; 1
 bb6:	82 1b       	sub	r24, r18
 bb8:	93 0b       	sbc	r25, r19
 bba:	8d 93       	st	X+, r24
 bbc:	9c 93       	st	X, r25
 bbe:	df 91       	pop	r29
 bc0:	cf 91       	pop	r28
 bc2:	08 95       	ret

00000bc4 <USB_Host_GetDeviceConfigDescriptor>:
 bc4:	cf 92       	push	r12
 bc6:	df 92       	push	r13
 bc8:	ef 92       	push	r14
 bca:	ff 92       	push	r15
 bcc:	0f 93       	push	r16
 bce:	1f 93       	push	r17
 bd0:	cf 93       	push	r28
 bd2:	df 93       	push	r29
 bd4:	cd b7       	in	r28, 0x3d	; 61
 bd6:	de b7       	in	r29, 0x3e	; 62
 bd8:	29 97       	sbiw	r28, 0x09	; 9
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	6b 01       	movw	r12, r22
 be6:	8a 01       	movw	r16, r20
 be8:	79 01       	movw	r14, r18
 bea:	90 e8       	ldi	r25, 0x80	; 128
 bec:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <USB_ControlRequest>
 bf0:	96 e0       	ldi	r25, 0x06	; 6
 bf2:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <USB_ControlRequest+0x1>
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	01 97       	sbiw	r24, 0x01	; 1
 bfa:	92 60       	ori	r25, 0x02	; 2
 bfc:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <USB_ControlRequest+0x3>
 c00:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USB_ControlRequest+0x2>
 c04:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <USB_ControlRequest+0x5>
 c08:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <USB_ControlRequest+0x4>
 c0c:	89 e0       	ldi	r24, 0x09	; 9
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <USB_ControlRequest+0x7>
 c14:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <USB_ControlRequest+0x6>
 c18:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 c1c:	ce 01       	movw	r24, r28
 c1e:	01 96       	adiw	r24, 0x01	; 1
 c20:	83 d0       	rcall	.+262    	; 0xd28 <USB_Host_SendControlRequest>
 c22:	81 11       	cpse	r24, r1
 c24:	19 c0       	rjmp	.+50     	; 0xc58 <USB_Host_GetDeviceConfigDescriptor+0x94>
 c26:	8b 81       	ldd	r24, Y+3	; 0x03
 c28:	9c 81       	ldd	r25, Y+4	; 0x04
 c2a:	f6 01       	movw	r30, r12
 c2c:	91 83       	std	Z+1, r25	; 0x01
 c2e:	80 83       	st	Z, r24
 c30:	e8 16       	cp	r14, r24
 c32:	f9 06       	cpc	r15, r25
 c34:	70 f0       	brcs	.+28     	; 0xc52 <USB_Host_GetDeviceConfigDescriptor+0x8e>
 c36:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <USB_ControlRequest+0x7>
 c3a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <USB_ControlRequest+0x6>
 c3e:	c8 01       	movw	r24, r16
 c40:	73 d0       	rcall	.+230    	; 0xd28 <USB_Host_SendControlRequest>
 c42:	81 11       	cpse	r24, r1
 c44:	09 c0       	rjmp	.+18     	; 0xc58 <USB_Host_GetDeviceConfigDescriptor+0x94>
 c46:	f8 01       	movw	r30, r16
 c48:	81 81       	ldd	r24, Z+1	; 0x01
 c4a:	82 30       	cpi	r24, 0x02	; 2
 c4c:	21 f4       	brne	.+8      	; 0xc56 <USB_Host_GetDeviceConfigDescriptor+0x92>
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	03 c0       	rjmp	.+6      	; 0xc58 <USB_Host_GetDeviceConfigDescriptor+0x94>
 c52:	85 e0       	ldi	r24, 0x05	; 5
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <USB_Host_GetDeviceConfigDescriptor+0x94>
 c56:	86 e0       	ldi	r24, 0x06	; 6
 c58:	29 96       	adiw	r28, 0x09	; 9
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	de bf       	out	0x3e, r29	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	cd bf       	out	0x3d, r28	; 61
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	1f 91       	pop	r17
 c6a:	0f 91       	pop	r16
 c6c:	ff 90       	pop	r15
 c6e:	ef 90       	pop	r14
 c70:	df 90       	pop	r13
 c72:	cf 90       	pop	r12
 c74:	08 95       	ret

00000c76 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
 c76:	af 92       	push	r10
 c78:	bf 92       	push	r11
 c7a:	cf 92       	push	r12
 c7c:	df 92       	push	r13
 c7e:	ef 92       	push	r14
 c80:	ff 92       	push	r15
 c82:	0f 93       	push	r16
 c84:	1f 93       	push	r17
 c86:	cf 93       	push	r28
 c88:	df 93       	push	r29
 c8a:	8c 01       	movw	r16, r24
 c8c:	eb 01       	movw	r28, r22
 c8e:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
 c90:	f8 01       	movw	r30, r16
 c92:	e0 80       	ld	r14, Z
 c94:	f1 80       	ldd	r15, Z+1	; 0x01
 c96:	e1 14       	cp	r14, r1
 c98:	f1 04       	cpc	r15, r1
 c9a:	99 f0       	breq	.+38     	; 0xcc2 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
 c9c:	a8 80       	ld	r10, Y
 c9e:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 ca0:	be 01       	movw	r22, r28
 ca2:	c8 01       	movw	r24, r16
 ca4:	71 df       	rcall	.-286    	; 0xb88 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 ca6:	88 81       	ld	r24, Y
 ca8:	99 81       	ldd	r25, Y+1	; 0x01
 caa:	f6 01       	movw	r30, r12
 cac:	09 95       	icall
 cae:	82 30       	cpi	r24, 0x02	; 2
 cb0:	79 f3       	breq	.-34     	; 0xc90 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 cb2:	81 30       	cpi	r24, 0x01	; 1
 cb4:	39 f4       	brne	.+14     	; 0xcc4 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
 cb6:	b9 82       	std	Y+1, r11	; 0x01
 cb8:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
 cba:	f8 01       	movw	r30, r16
 cbc:	f1 82       	std	Z+1, r15	; 0x01
 cbe:	e0 82       	st	Z, r14
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 cc2:	82 e0       	ldi	r24, 0x02	; 2
}
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	1f 91       	pop	r17
 cca:	0f 91       	pop	r16
 ccc:	ff 90       	pop	r15
 cce:	ef 90       	pop	r14
 cd0:	df 90       	pop	r13
 cd2:	cf 90       	pop	r12
 cd4:	bf 90       	pop	r11
 cd6:	af 90       	pop	r10
 cd8:	08 95       	ret

00000cda <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 cda:	08 95       	ret

00000cdc <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
 cdc:	1f 93       	push	r17
 cde:	cf 93       	push	r28
 ce0:	df 93       	push	r29
 ce2:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
 ce4:	c9 ee       	ldi	r28, 0xE9	; 233
 ce6:	d3 e0       	ldi	r29, 0x03	; 3
 ce8:	11 11       	cpse	r17, r1
 cea:	0c c0       	rjmp	.+24     	; 0xd04 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
 cec:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 cf0:	83 fd       	sbrc	r24, 3
 cf2:	15 c0       	rjmp	.+42     	; 0xd1e <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 cf4:	81 e0       	ldi	r24, 0x01	; 1
 cf6:	1b dc       	rcall	.-1994   	; 0x52e <USB_Host_WaitMS>
 cf8:	81 11       	cpse	r24, r1
 cfa:	12 c0       	rjmp	.+36     	; 0xd20 <USB_Host_WaitForIOS+0x44>
 cfc:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
 cfe:	a1 f7       	brne	.-24     	; 0xce8 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
 d00:	84 e0       	ldi	r24, 0x04	; 4
 d02:	0e c0       	rjmp	.+28     	; 0xd20 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
 d04:	11 30       	cpi	r17, 0x01	; 1
 d06:	29 f4       	brne	.+10     	; 0xd12 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
 d08:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
 d0c:	80 ff       	sbrs	r24, 0
 d0e:	f2 cf       	rjmp	.-28     	; 0xcf4 <USB_Host_WaitForIOS+0x18>
 d10:	06 c0       	rjmp	.+12     	; 0xd1e <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
 d12:	12 30       	cpi	r17, 0x02	; 2
 d14:	79 f7       	brne	.-34     	; 0xcf4 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
 d16:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
 d1a:	82 ff       	sbrs	r24, 2
 d1c:	eb cf       	rjmp	.-42     	; 0xcf4 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
 d1e:	80 e0       	ldi	r24, 0x00	; 0
}
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	1f 91       	pop	r17
 d26:	08 95       	ret

00000d28 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
 d28:	ff 92       	push	r15
 d2a:	0f 93       	push	r16
 d2c:	1f 93       	push	r17
 d2e:	cf 93       	push	r28
 d30:	df 93       	push	r29
 d32:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
 d34:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 d38:	81 70       	andi	r24, 0x01	; 1
 d3a:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
 d3c:	c0 91 9f 01 	lds	r28, 0x019F	; 0x80019f <USB_ControlRequest+0x6>
 d40:	d0 91 a0 01 	lds	r29, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
 d44:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 d48:	81 60       	ori	r24, 0x01	; 1
 d4a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 d4e:	81 e0       	ldi	r24, 0x01	; 1
 d50:	ee db       	rcall	.-2084   	; 0x52e <USB_Host_WaitMS>
 d52:	81 11       	cpse	r24, r1
 d54:	c8 c0       	rjmp	.+400    	; 0xee6 <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 d56:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 d5a:	8f 7c       	andi	r24, 0xCF	; 207
 d5c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
 d60:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
 d64:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 d68:	8f 7e       	andi	r24, 0xEF	; 239
 d6a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 d6e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 d72:	8f 7b       	andi	r24, 0xBF	; 191
 d74:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 d78:	e9 e9       	ldi	r30, 0x99	; 153
 d7a:	f1 e0       	ldi	r31, 0x01	; 1
 d7c:	81 ea       	ldi	r24, 0xA1	; 161
 d7e:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
 d80:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
 d82:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
 d86:	8e 17       	cp	r24, r30
 d88:	9f 07       	cpc	r25, r31
 d8a:	d1 f7       	brne	.-12     	; 0xd80 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
 d8c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 d90:	87 77       	andi	r24, 0x77	; 119
 d92:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
 d96:	80 e0       	ldi	r24, 0x00	; 0
 d98:	a1 df       	rcall	.-190    	; 0xcdc <USB_Host_WaitForIOS>
 d9a:	81 11       	cpse	r24, r1
 d9c:	a4 c0       	rjmp	.+328    	; 0xee6 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 d9e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 da2:	80 64       	ori	r24, 0x40	; 64
 da4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 da8:	81 e0       	ldi	r24, 0x01	; 1
 daa:	c1 db       	rcall	.-2174   	; 0x52e <USB_Host_WaitMS>
 dac:	81 11       	cpse	r24, r1
 dae:	9b c0       	rjmp	.+310    	; 0xee6 <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
 db0:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <USB_ControlRequest>
 db4:	87 ff       	sbrs	r24, 7
 db6:	4e c0       	rjmp	.+156    	; 0xe54 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 db8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 dbc:	8f 7c       	andi	r24, 0xCF	; 207
 dbe:	80 61       	ori	r24, 0x10	; 16
 dc0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
 dc4:	01 15       	cp	r16, r1
 dc6:	11 05       	cpc	r17, r1
 dc8:	09 f0       	breq	.+2      	; 0xdcc <USB_Host_SendControlRequest+0xa4>
 dca:	3a c0       	rjmp	.+116    	; 0xe40 <USB_Host_SendControlRequest+0x118>
 dcc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 dd0:	8f 7c       	andi	r24, 0xCF	; 207
 dd2:	80 62       	ori	r24, 0x20	; 32
 dd4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 dd8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 ddc:	8f 7b       	andi	r24, 0xBF	; 191
 dde:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 de2:	82 e0       	ldi	r24, 0x02	; 2
 de4:	7b df       	rcall	.-266    	; 0xcdc <USB_Host_WaitForIOS>
 de6:	81 11       	cpse	r24, r1
 de8:	7e c0       	rjmp	.+252    	; 0xee6 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 dea:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 dee:	8b 77       	andi	r24, 0x7B	; 123
 df0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 df4:	82 e0       	ldi	r24, 0x02	; 2
 df6:	72 df       	rcall	.-284    	; 0xcdc <USB_Host_WaitForIOS>
 df8:	76 c0       	rjmp	.+236    	; 0xee6 <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 dfa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 dfe:	8f 7b       	andi	r24, 0xBF	; 191
 e00:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
 e04:	81 e0       	ldi	r24, 0x01	; 1
 e06:	6a df       	rcall	.-300    	; 0xcdc <USB_Host_WaitForIOS>
 e08:	81 11       	cpse	r24, r1
 e0a:	6d c0       	rjmp	.+218    	; 0xee6 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
 e0c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 e10:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
 e14:	89 2b       	or	r24, r25
 e16:	11 f4       	brne	.+4      	; 0xe1c <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
 e18:	c0 e0       	ldi	r28, 0x00	; 0
 e1a:	d0 e0       	ldi	r29, 0x00	; 0
 e1c:	f8 01       	movw	r30, r16
 e1e:	8f 01       	movw	r16, r30
 e20:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 e24:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
 e28:	89 2b       	or	r24, r25
 e2a:	69 f4       	brne	.+26     	; 0xe46 <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 e2c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 e30:	80 64       	ori	r24, 0x40	; 64
 e32:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
 e36:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 e3a:	8e 77       	andi	r24, 0x7E	; 126
 e3c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
 e40:	20 97       	sbiw	r28, 0x00	; 0
 e42:	d9 f6       	brne	.-74     	; 0xdfa <USB_Host_SendControlRequest+0xd2>
 e44:	c3 cf       	rjmp	.-122    	; 0xdcc <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
 e46:	20 97       	sbiw	r28, 0x00	; 0
 e48:	89 f3       	breq	.-30     	; 0xe2c <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
 e4a:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
 e4e:	81 93       	st	Z+, r24
					DataLen--;
 e50:	21 97       	sbiw	r28, 0x01	; 1
 e52:	e5 cf       	rjmp	.-54     	; 0xe1e <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
 e54:	01 15       	cp	r16, r1
 e56:	11 05       	cpc	r17, r1
 e58:	91 f1       	breq	.+100    	; 0xebe <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 e5a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 e5e:	8f 7c       	andi	r24, 0xCF	; 207
 e60:	80 62       	ori	r24, 0x20	; 32
 e62:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 e66:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 e6a:	8f 7b       	andi	r24, 0xBF	; 191
 e6c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
 e70:	82 e0       	ldi	r24, 0x02	; 2
 e72:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 e74:	e1 f0       	breq	.+56     	; 0xeae <USB_Host_SendControlRequest+0x186>
 e76:	32 df       	rcall	.-412    	; 0xcdc <USB_Host_WaitForIOS>
 e78:	81 11       	cpse	r24, r1
 e7a:	35 c0       	rjmp	.+106    	; 0xee6 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
 e7c:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 e80:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
 e84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 e88:	90 e0       	ldi	r25, 0x00	; 0
 e8a:	28 17       	cp	r18, r24
 e8c:	39 07       	cpc	r19, r25
 e8e:	48 f4       	brcc	.+18     	; 0xea2 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
 e90:	0f 5f       	subi	r16, 0xFF	; 255
 e92:	1f 4f       	sbci	r17, 0xFF	; 255
 e94:	f8 01       	movw	r30, r16
 e96:	31 97       	sbiw	r30, 0x01	; 1
 e98:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
 e9a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
 e9e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 ea0:	69 f7       	brne	.-38     	; 0xe7c <USB_Host_SendControlRequest+0x154>
 ea2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 ea6:	8b 77       	andi	r24, 0x7B	; 123
 ea8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 eac:	e1 cf       	rjmp	.-62     	; 0xe70 <USB_Host_SendControlRequest+0x148>
 eae:	16 df       	rcall	.-468    	; 0xcdc <USB_Host_WaitForIOS>
 eb0:	81 11       	cpse	r24, r1
 eb2:	19 c0       	rjmp	.+50     	; 0xee6 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 eb4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 eb8:	80 64       	ori	r24, 0x40	; 64
 eba:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 ebe:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 ec2:	8f 7c       	andi	r24, 0xCF	; 207
 ec4:	80 61       	ori	r24, 0x10	; 16
 ec6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 eca:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 ece:	8f 7b       	andi	r24, 0xBF	; 191
 ed0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
 ed4:	81 e0       	ldi	r24, 0x01	; 1
 ed6:	02 df       	rcall	.-508    	; 0xcdc <USB_Host_WaitForIOS>
 ed8:	81 11       	cpse	r24, r1
 eda:	05 c0       	rjmp	.+10     	; 0xee6 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
 edc:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 ee0:	9e 77       	andi	r25, 0x7E	; 126
 ee2:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 ee6:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 eea:	90 64       	ori	r25, 0x40	; 64
 eec:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
 ef0:	f1 10       	cpse	r15, r1
 ef2:	05 c0       	rjmp	.+10     	; 0xefe <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
 ef4:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
 ef8:	9e 7f       	andi	r25, 0xFE	; 254
 efa:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
 efe:	91 e0       	ldi	r25, 0x01	; 1
 f00:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
 f04:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
 f08:	df 91       	pop	r29
 f0a:	cf 91       	pop	r28
 f0c:	1f 91       	pop	r17
 f0e:	0f 91       	pop	r16
 f10:	ff 90       	pop	r15
 f12:	08 95       	ret

00000f14 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
 f14:	cf 93       	push	r28
 f16:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
 f18:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <USB_ControlRequest>
 f1c:	89 e0       	ldi	r24, 0x09	; 9
 f1e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <USB_ControlRequest+0x1>
 f22:	8c 2f       	mov	r24, r28
 f24:	90 e0       	ldi	r25, 0x00	; 0
 f26:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <USB_ControlRequest+0x3>
 f2a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USB_ControlRequest+0x2>
 f2e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <USB_ControlRequest+0x5>
 f32:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <USB_ControlRequest+0x4>
 f36:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <USB_ControlRequest+0x7>
 f3a:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
 f3e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
 f42:	80 e0       	ldi	r24, 0x00	; 0
 f44:	90 e0       	ldi	r25, 0x00	; 0
 f46:	f0 de       	rcall	.-544    	; 0xd28 <USB_Host_SendControlRequest>
 f48:	81 11       	cpse	r24, r1
 f4a:	08 c0       	rjmp	.+16     	; 0xf5c <USB_Host_SetDeviceConfiguration+0x48>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
 f4c:	c0 93 97 01 	sts	0x0197, r28	; 0x800197 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
 f50:	c1 11       	cpse	r28, r1
 f52:	02 c0       	rjmp	.+4      	; 0xf58 <USB_Host_SetDeviceConfiguration+0x44>
 f54:	9a e0       	ldi	r25, 0x0A	; 10
 f56:	01 c0       	rjmp	.+2      	; 0xf5a <USB_Host_SetDeviceConfiguration+0x46>
 f58:	9b e0       	ldi	r25, 0x0B	; 11
 f5a:	9e bb       	out	0x1e, r25	; 30
	}

	return ErrorCode;
}
 f5c:	cf 91       	pop	r28
 f5e:	08 95       	ret

00000f60 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 f60:	1f 93       	push	r17
 f62:	cf 93       	push	r28
 f64:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
 f66:	c7 ea       	ldi	r28, 0xA7	; 167
 f68:	d0 e0       	ldi	r29, 0x00	; 0
 f6a:	18 81       	ld	r17, Y
 f6c:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
 f6e:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
 f70:	2a db       	rcall	.-2476   	; 0x5c6 <USB_Host_ProcessNextHostState>
 f72:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 f74:	df 91       	pop	r29
 f76:	cf 91       	pop	r28
 f78:	1f 91       	pop	r17
 f7a:	08 95       	ret

00000f7c <__tablejump2__>:
 f7c:	ee 0f       	add	r30, r30
 f7e:	ff 1f       	adc	r31, r31
 f80:	00 24       	eor	r0, r0
 f82:	00 1c       	adc	r0, r0
 f84:	0b be       	out	0x3b, r0	; 59
 f86:	07 90       	elpm	r0, Z+
 f88:	f6 91       	elpm	r31, Z
 f8a:	e0 2d       	mov	r30, r0
 f8c:	09 94       	ijmp

00000f8e <_exit>:
 f8e:	f8 94       	cli

00000f90 <__stop_program>:
 f90:	ff cf       	rjmp	.-2      	; 0xf90 <__stop_program>
