   1               		.file	"XPROGProtocol.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.SwapEndian_32,"ax",@progbits
  13               	SwapEndian_32:
  14               	.LFB9:
  15               		.file 1 "../../LUFA/Drivers/USB/../../Common/Endianness.h"
   1:../../LUFA/Drivers/USB/../../Common/Endianness.h **** /*
   2:../../LUFA/Drivers/USB/../../Common/Endianness.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/../../Common/Endianness.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
   5:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/../../Common/Endianness.h ****            www.lufa-lib.org
   7:../../LUFA/Drivers/USB/../../Common/Endianness.h **** */
   8:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
   9:../../LUFA/Drivers/USB/../../Common/Endianness.h **** /*
  10:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  12:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  21:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/../../Common/Endianness.h ****   this software.
  29:../../LUFA/Drivers/USB/../../Common/Endianness.h **** */
  30:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  31:../../LUFA/Drivers/USB/../../Common/Endianness.h **** /** \file
  32:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \brief Endianness and Byte Ordering macros and functions.
  33:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *
  34:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \copydetails Group_Endianness
  35:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  */
  36:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  37:../../LUFA/Drivers/USB/../../Common/Endianness.h **** /** \ingroup Group_Endianness
  38:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \defgroup Group_ByteSwapping Byte Reordering
  39:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \brief Macros and functions for forced byte reordering.
  40:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  */
  41:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  42:../../LUFA/Drivers/USB/../../Common/Endianness.h **** /** \ingroup Group_Endianness
  43:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \defgroup Group_EndianConversion Endianness Conversion
  44:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \brief Macros and functions for automatic endianness conversion.
  45:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  */
  46:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  47:../../LUFA/Drivers/USB/../../Common/Endianness.h **** /** \ingroup Group_Common
  48:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \defgroup Group_Endianness Endianness and Byte Ordering
  49:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  \brief Convenience macros and functions relating to byte (re-)ordering
  50:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *
  51:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  Common library convenience macros and functions relating to byte (re-)ordering.
  52:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *
  53:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  *  @{
  54:../../LUFA/Drivers/USB/../../Common/Endianness.h ****  */
  55:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  56:../../LUFA/Drivers/USB/../../Common/Endianness.h **** #ifndef __LUFA_ENDIANNESS_H__
  57:../../LUFA/Drivers/USB/../../Common/Endianness.h **** #define __LUFA_ENDIANNESS_H__
  58:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  59:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 	/* Enable C linkage for C++ Compilers: */
  60:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		#if defined(__cplusplus)
  61:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			extern "C" {
  62:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		#endif
  63:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  64:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 	/* Preprocessor Checks: */
  65:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		#if !defined(__INCLUDE_FROM_COMMON_H)
  66:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#error Do not include this file directly. Include LUFA/Common/Common.h instead to gain this func
  67:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		#endif
  68:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		
  69:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		#if !(defined(ARCH_BIG_ENDIAN) || defined(ARCH_LITTLE_ENDIAN))
  70:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#error ARCH_BIG_ENDIAN or ARCH_LITTLE_ENDIAN not set for the specified architecture.
  71:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		#endif
  72:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  73:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 	/* Public Interface - May be used in end-application: */
  74:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		/* Macros: */
  75:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			/** Swaps the byte ordering of a 16-bit value at compile-time. Do not use this macro for swappin
  76:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  of dynamic values computed at runtime, use \ref SwapEndian_16() instead. The result of this 
  77:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  inside struct or other variable initializers outside of a function, something that is not po
  78:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  inline function variant.
  79:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
  80:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
  81:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
  82:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \param[in] x  16-bit value whose byte ordering is to be swapped.
  83:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
  84:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \return Input value with the byte ordering reversed.
  85:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 */
  86:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#define SWAPENDIAN_16(x)            (uint16_t)((((x) & 0xFF00) >> 8) | (((x) & 0x00FF) << 8))
  87:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
  88:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			/** Swaps the byte ordering of a 32-bit value at compile-time. Do not use this macro for swappin
  89:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  of dynamic values computed at runtime- use \ref SwapEndian_32() instead. The result of this 
  90:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  inside struct or other variable initializers outside of a function, something that is not po
  91:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  inline function variant.
  92:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
  93:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
  94:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
  95:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \param[in] x  32-bit value whose byte ordering is to be swapped.
  96:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
  97:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \return Input value with the byte ordering reversed.
  98:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 */
  99:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#define SWAPENDIAN_32(x)            (uint32_t)((((x) & 0xFF000000UL) >> 24UL) | (((x) & 0x00FF00
 100:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			                                               (((x) & 0x0000FF00UL) << 8UL)  | (((x) & 0x000000
 101:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 102:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#if defined(ARCH_BIG_ENDIAN) && !defined(le16_to_cpu)
 103:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define le16_to_cpu(x)           SwapEndian_16(x)
 104:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define le32_to_cpu(x)           SwapEndian_32(x)
 105:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define be16_to_cpu(x)           (x)
 106:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define be32_to_cpu(x)           (x)
 107:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_le16(x)           SwapEndian_16(x)
 108:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_le32(x)           SwapEndian_32(x)
 109:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_be16(x)           (x)
 110:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_be32(x)           (x)
 111:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define LE16_TO_CPU(x)           SWAPENDIAN_16(x)
 112:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define LE32_TO_CPU(x)           SWAPENDIAN_32(x)
 113:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define BE16_TO_CPU(x)           (x)
 114:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define BE32_TO_CPU(x)           (x)
 115:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_LE16(x)           SWAPENDIAN_16(x)
 116:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_LE32(x)           SWAPENDIAN_32(x)
 117:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_BE16(x)           (x)
 118:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_BE32(x)           (x)			
 119:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#elif !defined(le16_to_cpu)
 120:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** \name Run-time endianness conversion */
 121:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				//@{
 122:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			
 123:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 16-bit piece of data and the
 124:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 125:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 126:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 127:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 128:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 129:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref LE16_TO_CPU instead.
 130:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 131:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 132:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 133:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 134:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 135:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 136:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 137:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define le16_to_cpu(x)           (x)
 138:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 139:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 32-bit piece of data and the
 140:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 141:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 142:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 143:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 144:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 145:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref LE32_TO_CPU instead.
 146:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 147:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 148:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 149:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 150:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 151:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 152:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 153:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define le32_to_cpu(x)           (x)
 154:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 155:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 16-bit piece of data and the
 156:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 157:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 158:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 159:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 160:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 161:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref BE16_TO_CPU instead.
 162:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 163:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 164:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 165:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 166:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 167:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 168:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 169:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define be16_to_cpu(x)           SwapEndian_16(x)
 170:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 171:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 32-bit piece of data and the
 172:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 173:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 174:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 175:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 176:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 177:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref BE32_TO_CPU instead.
 178:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 179:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 180:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 181:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 182:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 183:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 184:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 185:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define be32_to_cpu(x)           SwapEndian_32(x)
 186:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 187:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 188:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 189:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 190:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 191:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 192:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 193:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_LE16 instead.
 194:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 195:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 196:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 197:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 198:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 199:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 200:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 201:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_le16(x)           (x)
 202:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 203:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 204:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 205:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 206:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 207:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 208:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 209:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_LE32 instead.
 210:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 211:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 212:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 213:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 214:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 215:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 216:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 217:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_le32(x)           (x)
 218:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 219:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 220:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 221:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 222:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 223:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 224:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 225:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_BE16 instead.
 226:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 227:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 228:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 229:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 230:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 231:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 232:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 233:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_be16(x)           SwapEndian_16(x)
 234:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 235:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 236:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 237:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 238:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 239:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 240:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 241:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_BE32 instead.
 242:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 243:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 244:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 245:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 246:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 247:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 248:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 249:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define cpu_to_be32(x)           SwapEndian_32(x)
 250:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 251:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				//@}
 252:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 253:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** \name Compile-time endianness conversion */
 254:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				//@{
 255:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 256:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 16-bit piece of data and the
 257:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 258:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 259:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 260:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 261:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run time endianness
 262:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref le16_to_cpu instead.
 263:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 264:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 265:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 266:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 267:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 268:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 269:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 270:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define LE16_TO_CPU(x)           (x)
 271:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 272:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 32-bit piece of data and the
 273:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 274:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 275:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 276:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 277:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run time endianness
 278:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref le32_to_cpu instead.
 279:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 280:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 281:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 282:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 283:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 284:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 285:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 286:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define LE32_TO_CPU(x)           (x)
 287:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 288:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 16-bit piece of data and the
 289:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 290:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 291:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 292:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 293:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 294:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref be16_to_cpu instead.
 295:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 296:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 297:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 298:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 299:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 300:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 301:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 302:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define BE16_TO_CPU(x)           SWAPENDIAN_16(x)
 303:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 304:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 32-bit piece of data and the
 305:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 306:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 307:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 308:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 309:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 310:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref be32_to_cpu instead.
 311:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 312:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 313:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 314:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 315:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 316:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 317:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 318:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define BE32_TO_CPU(x)           SWAPENDIAN_32(x)
 319:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 320:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 321:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 322:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 323:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 324:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 325:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 326:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_le16 instead.
 327:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 328:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 329:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 330:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 331:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 332:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 333:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 334:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_LE16(x)           (x)
 335:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 336:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 337:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 338:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 339:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 340:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 341:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 342:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_le32 instead.
 343:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 344:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 345:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 346:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 347:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 348:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 349:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 350:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_LE32(x)           (x)
 351:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 352:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 353:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 354:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 355:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 356:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 357:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 358:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_be16 instead.
 359:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 360:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 361:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 362:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 363:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 364:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 365:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 366:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_BE16(x)           SWAPENDIAN_16(x)
 367:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 368:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 369:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 370:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 371:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 372:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 373:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 374:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_be32 instead.
 375:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 376:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 377:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 378:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 379:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *
 380:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 381:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				 */
 382:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				#define CPU_TO_BE32(x)           SWAPENDIAN_32(x)
 383:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 384:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				//! @}
 385:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			#endif
 386:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 387:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 		/* Inline Functions: */
 388:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			/** Function to reverse the byte ordering of the individual bytes in a 16 bit value.
 389:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
 390:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
 391:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
 392:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \param[in] Word  Word of data whose bytes are to be swapped.
 393:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
 394:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \return Input data with the individual bytes reversed.
 395:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 */
 396:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 397:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			static inline uint16_t SwapEndian_16(const uint16_t Word)
 398:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			{
 399:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				if (GCC_IS_COMPILE_CONST(Word))
 400:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				  return SWAPENDIAN_16(Word);
 401:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			
 402:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				uint8_t Temp;
 403:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 404:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				union
 405:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				{
 406:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 					uint16_t Word;
 407:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 					uint8_t  Bytes[2];
 408:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				} Data;
 409:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 410:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Word = Word;
 411:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 412:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Temp = Data.Bytes[0];
 413:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[1];
 414:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[1] = Temp;
 415:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 416:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				return Data.Word;
 417:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			}
 418:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 419:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			/** Function to reverse the byte ordering of the individual bytes in a 32 bit value.
 420:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
 421:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
 422:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
 423:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \param[in] DWord  Double word of data whose bytes are to be swapped.
 424:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *
 425:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 *  \return Input data with the individual bytes reversed.
 426:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			 */
 427:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 428:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			static inline uint32_t SwapEndian_32(const uint32_t DWord)
 429:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			{
  16               		.loc 1 429 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 8B01      		movw r16,r22
  32 0006 9C01      		movw r18,r24
  33               	.LVL1:
  34               	.LBB134:
  35               	.LBB135:
 430:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				if (GCC_IS_COMPILE_CONST(DWord))
 431:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				  return SWAPENDIAN_32(DWord);
 432:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 433:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				uint8_t Temp;
 434:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 435:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				union
 436:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				{
 437:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 					uint32_t DWord;
 438:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 					uint8_t  Bytes[4];
 439:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				} Data;
 440:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 441:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.DWord = DWord;
  36               		.loc 1 441 0
  37 0008 C901      		movw r24,r18
  38 000a B801      		movw r22,r16
  39               	.LVL2:
 442:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 443:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Temp = Data.Bytes[0];
 444:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[3];
  40               		.loc 1 444 0
  41 000c 632F      		mov r22,r19
 445:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[3] = Temp;
  42               		.loc 1 445 0
  43 000e 902F      		mov r25,r16
  44               	.LVL3:
 446:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 447:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Temp = Data.Bytes[1];
  45               		.loc 1 447 0
  46 0010 272F      		mov r18,r23
  47               	.LVL4:
 448:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[1] = Data.Bytes[2];
  48               		.loc 1 448 0
  49 0012 782F      		mov r23,r24
 449:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[2] = Temp;
  50               		.loc 1 449 0
  51 0014 822F      		mov r24,r18
  52               	.LVL5:
  53               	.LVL6:
  54               	/* epilogue start */
  55               	.LBE135:
  56               	.LBE134:
 450:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 451:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				return Data.DWord;
 452:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 			}
  57               		.loc 1 452 0
  58 0016 1F91      		pop r17
  59 0018 0F91      		pop r16
  60               	.LVL7:
  61 001a 0895      		ret
  62               		.cfi_endproc
  63               	.LFE9:
  65               		.section	.text.XPROGProtocol_WriteMemory,"ax",@progbits
  67               	XPROGProtocol_WriteMemory:
  68               	.LFB122:
  69               		.file 2 "../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c"
   1:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /*
   2:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****              LUFA Library
   3:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****      Copyright (C) Dean Camera, 2011.
   4:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
   5:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   dean [at] fourwalledcubicle [dot] com
   6:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****            www.lufa-lib.org
   7:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** */
   8:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
   9:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /*
  10:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  12:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   software and its documentation for any purpose is hereby granted
  14:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   without fee, provided that the above copyright notice appear in
  15:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   all copies and that both that the copyright notice and this
  16:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   permission notice and warranty disclaimer appear in supporting
  17:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   documentation, and that the name of the author not be used in
  18:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   advertising or publicity pertaining to distribution of the
  19:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   software without specific, written prior permission.
  20:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  21:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   The author disclaim all warranties with regard to this
  22:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   software, including all implied warranties of merchantability
  23:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   and fitness.  In no event shall the author be liable for any
  24:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   special, indirect or consequential damages or any damages
  25:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   in an action of contract, negligence or other tortious action,
  27:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   arising out of or in connection with the use or performance of
  28:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****   this software.
  29:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** */
  30:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  31:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** \file
  32:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *
  33:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  XPROG Protocol handler, to process V2 Protocol wrapped XPROG commands used in Atmel programmer 
  34:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
  35:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  36:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** #define  INCLUDE_FROM_XPROGPROTOCOL_C
  37:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** #include "XPROGProtocol.h"
  38:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  39:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** #if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)
  40:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Base absolute address for the target's NVM controller for PDI programming */
  41:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** uint32_t XPROG_Param_NVMBase       = 0x010001C0;
  42:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  43:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Size in bytes of the target's EEPROM page */
  44:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** uint16_t XPROG_Param_EEPageSize    = 32;
  45:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  46:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Address of the TPI device's NVMCMD register for TPI programming */
  47:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** uint8_t  XPROG_Param_NVMCMDRegAddr = 0x33;
  48:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  49:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Address of the TPI device's NVMCSR register for TPI programming */
  50:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** uint8_t  XPROG_Param_NVMCSRRegAddr = 0x32;
  51:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  52:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Currently selected XPROG programming protocol */
  53:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** uint8_t  XPROG_SelectedProtocol    = XPRG_PROTOCOL_PDI;
  54:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  55:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used fo
  56:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  programming.
  57:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
  58:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** void XPROGProtocol_SetMode(void)
  59:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
  60:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	struct
  61:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
  62:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t Protocol;
  63:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	} SetMode_XPROG_Params;
  64:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  65:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
  66:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  67:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
  68:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
  69:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
  70:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  71:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
  72:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  73:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG_SETMODE);
  74:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CM
  75:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
  76:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
  77:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  78:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to 
  79:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  removed and processed so that the underlying XPROG command can be handled.
  80:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
  81:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** void XPROGProtocol_Command(void)
  82:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
  83:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t XPROGCommand = Endpoint_Read_8();
  84:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
  85:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	switch (XPROGCommand)
  86:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
  87:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_ENTER_PROGMODE:
  88:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_EnterXPROGMode();
  89:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
  90:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_LEAVE_PROGMODE:
  91:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_LeaveXPROGMode();
  92:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
  93:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_ERASE:
  94:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_Erase();
  95:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
  96:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_WRITE_MEM:
  97:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_WriteMemory();
  98:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
  99:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_READ_MEM:
 100:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_ReadMemory();
 101:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 102:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_CRC:
 103:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_ReadCRC();
 104:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 105:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_SET_PARAM:
 106:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROGProtocol_SetParam();
 107:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 108:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 109:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 110:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 111:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device
 112:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_EnterXPROGMode(void)
 113:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
 114:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
 115:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
 116:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 117:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 118:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	bool NVMBusEnabled = false;
 119:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 120:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
 121:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  NVMBusEnabled = XMEGANVM_EnablePDI();
 122:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
 123:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  NVMBusEnabled = TINYNVM_EnableTPI();
 124:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 125:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG);
 126:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_CMD_ENTER_PROGMODE);
 127:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(NVMBusEnabled ? XPRG_ERR_OK : XPRG_ERR_FAILED);
 128:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 129:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 130:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 131:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 132:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  the attached device.
 133:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
 134:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_LeaveXPROGMode(void)
 135:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
 136:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
 137:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
 138:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 139:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 140:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
 141:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  XMEGANVM_DisablePDI();
 142:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else
 143:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  TINYNVM_DisableTPI();
 144:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 145:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	#if defined(XCK_RESCUE_CLOCK_ENABLE) && defined(ENABLE_ISP_PROTOCOL)
 146:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	/* If the XCK rescue clock option is enabled, we need to restart it once the 
 147:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	 * XPROG mode has been exited, since the XPROG protocol stops it after use. */
 148:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	ISPTarget_ConfigureRescueClock();
 149:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	#endif
 150:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 151:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG);
 152:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_CMD_LEAVE_PROGMODE);
 153:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_ERR_OK);
 154:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 155:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 156:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 157:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPRG ERASE command to erase a specific memory address space in the attached dev
 158:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_Erase(void)
 159:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
 160:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t ReturnStatus = XPRG_ERR_OK;
 161:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 162:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	struct
 163:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 164:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t  MemoryType;
 165:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint32_t Address;
 166:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	} Erase_XPROG_Params;
 167:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 168:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
 169:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
 170:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 171:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
 172:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
 173:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 174:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 175:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t EraseCommand;
 176:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 177:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
 178:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 179:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Determine which NVM command to send to the device depending on the memory to erase */
 180:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		switch (Erase_XPROG_Params.MemoryType)
 181:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 182:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_CHIP:
 183:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
 184:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 185:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_APP:
 186:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
 187:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 188:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_BOOT:
 189:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
 190:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 191:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_EEPROM:
 192:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
 193:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 194:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_APP_PAGE:
 195:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
 196:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 197:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_BOOT_PAGE:
 198:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
 199:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 200:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_EEPROM_PAGE:
 201:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
 202:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 203:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_ERASE_USERSIG:
 204:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
 205:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 206:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			default:
 207:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseCommand = XMEGA_NVM_CMD_NOOP;
 208:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 209:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		}
 210:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 211:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Erase the target memory, indicate timeout if occurred */
 212:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
 213:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 214:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 215:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else
 216:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 217:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
 218:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
 219:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		else
 220:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
 221:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 222:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Erase the target memory, indicate timeout if occurred */
 223:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
 224:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 225:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 226:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 227:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG);
 228:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_CMD_ERASE);
 229:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(ReturnStatus);
 230:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 231:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 232:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 233:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attac
 234:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_WriteMemory(void)
 235:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
  70               		.loc 2 235 0
  71               		.cfi_startproc
  72 0000 AF92      		push r10
  73               	.LCFI2:
  74               		.cfi_def_cfa_offset 3
  75               		.cfi_offset 10, -2
  76 0002 BF92      		push r11
  77               	.LCFI3:
  78               		.cfi_def_cfa_offset 4
  79               		.cfi_offset 11, -3
  80 0004 CF92      		push r12
  81               	.LCFI4:
  82               		.cfi_def_cfa_offset 5
  83               		.cfi_offset 12, -4
  84 0006 DF92      		push r13
  85               	.LCFI5:
  86               		.cfi_def_cfa_offset 6
  87               		.cfi_offset 13, -5
  88 0008 EF92      		push r14
  89               	.LCFI6:
  90               		.cfi_def_cfa_offset 7
  91               		.cfi_offset 14, -6
  92 000a FF92      		push r15
  93               	.LCFI7:
  94               		.cfi_def_cfa_offset 8
  95               		.cfi_offset 15, -7
  96 000c 0F93      		push r16
  97               	.LCFI8:
  98               		.cfi_def_cfa_offset 9
  99               		.cfi_offset 16, -8
 100 000e 1F93      		push r17
 101               	.LCFI9:
 102               		.cfi_def_cfa_offset 10
 103               		.cfi_offset 17, -9
 104 0010 CF93      		push r28
 105               	.LCFI10:
 106               		.cfi_def_cfa_offset 11
 107               		.cfi_offset 28, -10
 108 0012 DF93      		push r29
 109               	.LCFI11:
 110               		.cfi_def_cfa_offset 12
 111               		.cfi_offset 29, -11
 112 0014 CDB7      		in r28,__SP_L__
 113 0016 DEB7      		in r29,__SP_H__
 114               	.LCFI12:
 115               		.cfi_def_cfa_register 28
 116 0018 C850      		subi r28,8
 117 001a D140      		sbci r29,1
 118               	.LCFI13:
 119               		.cfi_def_cfa_offset 276
 120 001c 0FB6      		in __tmp_reg__,__SREG__
 121 001e F894      		cli
 122 0020 DEBF      		out __SP_H__,r29
 123 0022 0FBE      		out __SREG__,__tmp_reg__
 124 0024 CDBF      		out __SP_L__,r28
 125               	/* prologue: function */
 126               	/* frame size = 264 */
 127               	/* stack size = 274 */
 128               	.L__stack_usage = 274
 129               	.LVL8:
 236:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t ReturnStatus = XPRG_ERR_OK;
 237:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 238:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	struct
 239:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 240:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t  MemoryType;
 241:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t  PageMode;
 242:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint32_t Address;
 243:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint16_t Length;
 244:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t  ProgData[256];
 245:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	} WriteMemory_XPROG_Params;
 246:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 247:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
 130               		.loc 2 247 0
 131 0026 40E0      		ldi r20,0
 132 0028 50E0      		ldi r21,0
 133 002a 68E0      		ldi r22,lo8(8)
 134 002c 70E0      		ldi r23,0
 135 002e CE01      		movw r24,r28
 136 0030 0196      		adiw r24,1
 137 0032 0E94 0000 		call Endpoint_Read_Stream_LE
 138               	.LVL9:
 248:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NU
 249:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
 139               		.loc 2 249 0
 140 0036 6B81      		ldd r22,Y+3
 141 0038 7C81      		ldd r23,Y+4
 142 003a 8D81      		ldd r24,Y+5
 143 003c 9E81      		ldd r25,Y+6
 144 003e 0E94 0000 		call SwapEndian_32
 145               	.LVL10:
 146 0042 6B83      		std Y+3,r22
 147 0044 7C83      		std Y+4,r23
 148 0046 8D83      		std Y+5,r24
 149 0048 9E83      		std Y+6,r25
 150               	.LVL11:
 151               	.LBB157:
 152               	.LBB158:
 153               	.LBB159:
 154               	.LBB160:
 410:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 155               		.loc 1 410 0
 156 004a 6F81      		ldd r22,Y+7
 157 004c 7885      		ldd r23,Y+8
 158               	.LVL12:
 412:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[1];
 159               		.loc 1 412 0
 160 004e 862F      		mov r24,r22
 161               	.LVL13:
 413:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[1] = Temp;
 162               		.loc 1 413 0
 163 0050 672F      		mov r22,r23
 164               	.LVL14:
 414:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 165               		.loc 1 414 0
 166 0052 782F      		mov r23,r24
 167               	.LVL15:
 168               	.LBE160:
 169               	.LBE159:
 170               	.LBE158:
 171               	.LBE157:
 250:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
 172               		.loc 2 250 0
 173 0054 7887      		std Y+8,r23
 174 0056 6F83      		std Y+7,r22
 251:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL)
 175               		.loc 2 251 0
 176 0058 40E0      		ldi r20,0
 177 005a 50E0      		ldi r21,0
 178 005c CE01      		movw r24,r28
 179 005e 0996      		adiw r24,9
 180 0060 0E94 0000 		call Endpoint_Read_Stream_LE
 181               	.LVL16:
 252:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 253:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with
 254:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	// to catch this and discard it before continuing on with packet processing to prevent communicati
 255:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgDat
 182               		.loc 2 255 0
 183 0064 8F81      		ldd r24,Y+7
 184 0066 9885      		ldd r25,Y+8
 185 0068 0996      		adiw r24,9
 186 006a 8F73      		andi r24,63
 187 006c 9927      		clr r25
 188 006e 892B      		or r24,r25
 189 0070 01F4      		brne .L3
 190               	.LBB161:
 191               	.LBB162:
 192               		.file 3 "../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 193               		.loc 3 531 0
 194 0072 8091 E800 		lds r24,232
 195 0076 8B77      		andi r24,lo8(123)
 196 0078 8093 E800 		sts 232,r24
 197               	.LBE162:
 198               	.LBE161:
 256:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
 257:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 258:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		Endpoint_ClearOUT();
 259:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		Endpoint_WaitUntilReady();
 199               		.loc 2 259 0
 200 007c 0E94 0000 		call Endpoint_WaitUntilReady
 201               	.LVL17:
 202               	.L3:
 203               	.LBB163:
 204               	.LBB164:
 205               		.loc 3 531 0
 206 0080 8091 E800 		lds r24,232
 207 0084 8B77      		andi r24,lo8(123)
 208 0086 8093 E800 		sts 232,r24
 209               	.LVL18:
 210               	.LBE164:
 211               	.LBE163:
 212               	.LBB165:
 213               	.LBB166:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 214               		.loc 3 330 0
 215 008a 82E0      		ldi r24,lo8(2)
 216 008c 8093 E900 		sts 233,r24
 217               	.LVL19:
 218               	.LBE166:
 219               	.LBE165:
 220               	.LBB167:
 221               	.LBB168:
 532:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 222               		.loc 3 600 0
 223 0090 8091 EC00 		lds r24,236
 224 0094 8160      		ori r24,lo8(1)
 225 0096 8093 EC00 		sts 236,r24
 226               	.LVL20:
 227               	.LBE168:
 228               	.LBE167:
 260:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 261:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	
 262:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
 263:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
 264:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 265:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 266:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
 229               		.loc 2 266 0
 230 009a 8091 0000 		lds r24,XPROG_SelectedProtocol
 231 009e 8111      		cpse r24,__zero_reg__
 232 00a0 00C0      		rjmp .L4
 233               	.LVL21:
 234 00a2 2981      		ldd r18,Y+1
 235 00a4 2150      		subi r18,lo8(-(-1))
 236 00a6 4B81      		ldd r20,Y+3
 237 00a8 5C81      		ldd r21,Y+4
 238 00aa 6D81      		ldd r22,Y+5
 239 00ac 7E81      		ldd r23,Y+6
 240 00ae 2630      		cpi r18,lo8(6)
 241 00b0 00F4      		brsh .L10
 242 00b2 30E0      		ldi r19,0
 243 00b4 F901      		movw r30,r18
 244 00b6 E050      		subi r30,lo8(-(CSWTCH.31))
 245 00b8 F040      		sbci r31,hi8(-(CSWTCH.31))
 246 00ba 8081      		ld r24,Z
 247 00bc F901      		movw r30,r18
 248 00be E050      		subi r30,lo8(-(CSWTCH.32))
 249 00c0 F040      		sbci r31,hi8(-(CSWTCH.32))
 250 00c2 9081      		ld r25,Z
 251 00c4 F901      		movw r30,r18
 252 00c6 E050      		subi r30,lo8(-(CSWTCH.33))
 253 00c8 F040      		sbci r31,hi8(-(CSWTCH.33))
 254 00ca E081      		ld r30,Z
 255               	.LVL22:
 256 00cc D901      		movw r26,r18
 257 00ce A050      		subi r26,lo8(-(CSWTCH.34))
 258 00d0 B040      		sbci r27,hi8(-(CSWTCH.34))
 259               	.LBB169:
 267:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 268:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Assume FLASH page programming by default, as it is the common case */
 269:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
 270:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
 271:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
 272:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		bool    PagedMemory      = true;
 273:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 274:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		switch (WriteMemory_XPROG_Params.MemoryType)
 275:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 276:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_MEM_TYPE_APPL:
 277:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
 278:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 279:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_MEM_TYPE_BOOT:
 280:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
 281:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 282:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_MEM_TYPE_EEPROM:
 283:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
 284:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
 285:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
 286:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 287:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_MEM_TYPE_USERSIG:
 288:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
 289:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 290:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_MEM_TYPE_FUSE:
 291:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
 292:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				PagedMemory      = false;
 293:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 294:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_MEM_TYPE_LOCKBITS:
 295:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
 296:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				PagedMemory      = false;
 297:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 298:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		}
 299:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 300:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
 301:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
 260               		.loc 2 301 0
 261 00d2 2C91      		ld r18,X
 262               	.LVL23:
 263 00d4 2223      		tst r18
 264 00d6 01F4      		brne .+2
 265 00d8 00C0      		rjmp .L6
 266 00da 00C0      		rjmp .L5
 267               	.LVL24:
 268               	.L10:
 274:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 269               		.loc 2 274 0
 270 00dc E6E2      		ldi r30,lo8(38)
 271 00de 93E2      		ldi r25,lo8(35)
 272 00e0 8EE2      		ldi r24,lo8(46)
 273               	.LVL25:
 274               	.L5:
 275               		.loc 2 301 0 discriminator 1
 276 00e2 AF80      		ldd r10,Y+7
 277 00e4 B884      		ldd r11,Y+8
 278 00e6 9E01      		movw r18,r28
 279 00e8 275F      		subi r18,-9
 280 00ea 3F4F      		sbci r19,-1
 281 00ec 6901      		movw r12,r18
 282 00ee 7A01      		movw r14,r20
 283 00f0 8B01      		movw r16,r22
 284 00f2 2A81      		ldd r18,Y+2
 285 00f4 482F      		mov r20,r24
 286 00f6 6E2F      		mov r22,r30
 287 00f8 892F      		mov r24,r25
 288               	.LVL26:
 289 00fa 0E94 0000 		call XMEGANVM_WritePageMemory
 290               	.LVL27:
 291               	.L12:
 292 00fe 8111      		cpse r24,__zero_reg__
 293 0100 00C0      		rjmp .L7
 302:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
 303:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
 304:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
 305:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 													   WriteMemory_XPROG_Params.ProgData[0]))))
 306:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 307:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			ReturnStatus = XPRG_ERR_TIMEOUT;
 294               		.loc 2 307 0
 295 0102 83E0      		ldi r24,lo8(3)
 296 0104 00C0      		rjmp .L8
 297               	.L4:
 298               	.LBE169:
 308:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		}
 309:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 310:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else
 311:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 312:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Send write command to the TPI device, indicate timeout if occurred */
 313:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
 299               		.loc 2 313 0
 300 0106 4F81      		ldd r20,Y+7
 301 0108 5885      		ldd r21,Y+8
 302 010a BE01      		movw r22,r28
 303 010c 675F      		subi r22,-9
 304 010e 7F4F      		sbci r23,-1
 305 0110 8B81      		ldd r24,Y+3
 306 0112 9C81      		ldd r25,Y+4
 307 0114 0E94 0000 		call TINYNVM_WriteMemory
 308               	.LVL28:
 309 0118 00C0      		rjmp .L12
 310               	.L7:
 236:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 311               		.loc 2 236 0
 312 011a 80E0      		ldi r24,0
 313               	.L8:
 314               	.LVL29:
 315               	.LBB170:
 316               	.LBB171:
 601:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 613:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 317               		.loc 3 624 0
 318 011c 90E5      		ldi r25,lo8(80)
 319 011e 9093 F100 		sts 241,r25
 320               	.LVL30:
 321               	.LBE171:
 322               	.LBE170:
 323               	.LBB172:
 324               	.LBB173:
 325 0122 94E0      		ldi r25,lo8(4)
 326 0124 9093 F100 		sts 241,r25
 327               	.LVL31:
 328               	.LBE173:
 329               	.LBE172:
 330               	.LBB174:
 331               	.LBB175:
 332 0128 8093 F100 		sts 241,r24
 333               	.LVL32:
 334               	.LBE175:
 335               	.LBE174:
 336               	.LBB176:
 337               	.LBB177:
 516:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 338               		.loc 3 516 0
 339 012c 8091 E800 		lds r24,232
 340               	.LVL33:
 341 0130 8E77      		andi r24,lo8(126)
 342 0132 8093 E800 		sts 232,r24
 343               	.LVL34:
 344               	/* epilogue start */
 345               	.LBE177:
 346               	.LBE176:
 314:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		      WriteMemory_XPROG_Params.Length)))
 315:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 316:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			ReturnStatus = XPRG_ERR_TIMEOUT;
 317:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		}
 318:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 319:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 320:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG);
 321:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
 322:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(ReturnStatus);
 323:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 324:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 347               		.loc 2 324 0
 348 0136 C85F      		subi r28,-8
 349 0138 DE4F      		sbci r29,-2
 350 013a 0FB6      		in __tmp_reg__,__SREG__
 351 013c F894      		cli
 352 013e DEBF      		out __SP_H__,r29
 353 0140 0FBE      		out __SREG__,__tmp_reg__
 354 0142 CDBF      		out __SP_L__,r28
 355 0144 DF91      		pop r29
 356 0146 CF91      		pop r28
 357 0148 1F91      		pop r17
 358 014a 0F91      		pop r16
 359 014c FF90      		pop r15
 360 014e EF90      		pop r14
 361 0150 DF90      		pop r13
 362 0152 CF90      		pop r12
 363 0154 BF90      		pop r11
 364 0156 AF90      		pop r10
 365 0158 0895      		ret
 366               	.LVL35:
 367               	.L6:
 368               	.LBB178:
 304:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 													   WriteMemory_XPROG_Params.ProgData[0]))))
 369               		.loc 2 304 0
 370 015a 2985      		ldd r18,Y+9
 371 015c 0E94 0000 		call XMEGANVM_WriteByteMemory
 372               	.LVL36:
 373 0160 00C0      		rjmp .L12
 374               	.LBE178:
 375               		.cfi_endproc
 376               	.LFE122:
 378               		.section	.text.XPROGProtocol_ReadMemory,"ax",@progbits
 380               	XPROGProtocol_ReadMemory:
 381               	.LFB123:
 325:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 326:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 327:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  attached device.
 328:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
 329:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_ReadMemory(void)
 330:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
 382               		.loc 2 330 0
 383               		.cfi_startproc
 384 0000 CF93      		push r28
 385               	.LCFI14:
 386               		.cfi_def_cfa_offset 3
 387               		.cfi_offset 28, -2
 388 0002 DF93      		push r29
 389               	.LCFI15:
 390               		.cfi_def_cfa_offset 4
 391               		.cfi_offset 29, -3
 392 0004 CDB7      		in r28,__SP_L__
 393 0006 DEB7      		in r29,__SP_H__
 394               	.LCFI16:
 395               		.cfi_def_cfa_register 28
 396 0008 C750      		subi r28,7
 397 000a D140      		sbci r29,1
 398               	.LCFI17:
 399               		.cfi_def_cfa_offset 267
 400 000c 0FB6      		in __tmp_reg__,__SREG__
 401 000e F894      		cli
 402 0010 DEBF      		out __SP_H__,r29
 403 0012 0FBE      		out __SREG__,__tmp_reg__
 404 0014 CDBF      		out __SP_L__,r28
 405               	/* prologue: function */
 406               	/* frame size = 263 */
 407               	/* stack size = 265 */
 408               	.L__stack_usage = 265
 409               	.LVL37:
 331:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t ReturnStatus = XPRG_ERR_OK;
 332:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 333:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	struct
 334:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 335:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t  MemoryType;
 336:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint32_t Address;
 337:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint16_t Length;
 338:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	} ReadMemory_XPROG_Params;
 339:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 340:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
 410               		.loc 2 340 0
 411 0016 40E0      		ldi r20,0
 412 0018 50E0      		ldi r21,0
 413 001a 67E0      		ldi r22,lo8(7)
 414 001c 70E0      		ldi r23,0
 415 001e CE01      		movw r24,r28
 416 0020 8F5F      		subi r24,-1
 417 0022 9E4F      		sbci r25,-2
 418 0024 0E94 0000 		call Endpoint_Read_Stream_LE
 419               	.LVL38:
 341:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
 420               		.loc 2 341 0
 421 0028 CE5F      		subi r28,lo8(-258)
 422 002a DE4F      		sbci r29,hi8(-258)
 423 002c 6881      		ld r22,Y
 424 002e 7981      		ldd r23,Y+1
 425 0030 8A81      		ldd r24,Y+2
 426 0032 9B81      		ldd r25,Y+3
 427 0034 C250      		subi r28,lo8(258)
 428 0036 D140      		sbci r29,hi8(258)
 429 0038 0E94 0000 		call SwapEndian_32
 430               	.LVL39:
 431 003c CE5F      		subi r28,lo8(-258)
 432 003e DE4F      		sbci r29,hi8(-258)
 433 0040 6883      		st Y,r22
 434 0042 7983      		std Y+1,r23
 435 0044 8A83      		std Y+2,r24
 436 0046 9B83      		std Y+3,r25
 437 0048 C250      		subi r28,lo8(258)
 438 004a D140      		sbci r29,hi8(258)
 439               	.LBB197:
 440               	.LBB198:
 441               	.LBB199:
 442               	.LBB200:
 410:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 443               		.loc 1 410 0
 444 004c CA5F      		subi r28,lo8(-262)
 445 004e DE4F      		sbci r29,hi8(-262)
 446 0050 8881      		ld r24,Y
 447 0052 9981      		ldd r25,Y+1
 448 0054 C650      		subi r28,lo8(262)
 449 0056 D140      		sbci r29,hi8(262)
 450               	.LVL40:
 412:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[1];
 451               		.loc 1 412 0
 452 0058 282F      		mov r18,r24
 453               	.LVL41:
 413:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 				Data.Bytes[1] = Temp;
 454               		.loc 1 413 0
 455 005a 892F      		mov r24,r25
 456               	.LVL42:
 414:../../LUFA/Drivers/USB/../../Common/Endianness.h **** 
 457               		.loc 1 414 0
 458 005c 922F      		mov r25,r18
 459               	.LVL43:
 460               	.LBE200:
 461               	.LBE199:
 462               	.LBE198:
 463               	.LBE197:
 342:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
 464               		.loc 2 342 0
 465 005e CA5F      		subi r28,lo8(-262)
 466 0060 DE4F      		sbci r29,hi8(-262)
 467 0062 9983      		std Y+1,r25
 468 0064 8883      		st Y,r24
 469 0066 C650      		subi r28,lo8(262)
 470 0068 D140      		sbci r29,hi8(262)
 471               	.LBB201:
 472               	.LBB202:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473               		.loc 3 531 0
 474 006a 8091 E800 		lds r24,232
 475               	.LVL44:
 476 006e 8B77      		andi r24,lo8(123)
 477 0070 8093 E800 		sts 232,r24
 478               	.LVL45:
 479               	.LBE202:
 480               	.LBE201:
 481               	.LBB203:
 482               	.LBB204:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 483               		.loc 3 330 0
 484 0074 82E0      		ldi r24,lo8(2)
 485 0076 8093 E900 		sts 233,r24
 486               	.LVL46:
 487               	.LBE204:
 488               	.LBE203:
 489               	.LBB205:
 490               	.LBB206:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 491               		.loc 3 600 0
 492 007a 8091 EC00 		lds r24,236
 493 007e 8160      		ori r24,lo8(1)
 494 0080 8093 EC00 		sts 236,r24
 495               	.LVL47:
 496               	.LBE206:
 497               	.LBE205:
 343:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 344:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
 345:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
 346:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 347:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 348:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t ReadBuffer[256];
 349:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 350:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
 498               		.loc 2 350 0
 499 0084 8091 0000 		lds r24,XPROG_SelectedProtocol
 500 0088 CA5F      		subi r28,lo8(-262)
 501 008a DE4F      		sbci r29,hi8(-262)
 502 008c 2881      		ld r18,Y
 503 008e 3981      		ldd r19,Y+1
 504 0090 C650      		subi r28,lo8(262)
 505 0092 D140      		sbci r29,hi8(262)
 506 0094 8111      		cpse r24,__zero_reg__
 507 0096 00C0      		rjmp .L16
 351:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 352:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Read the PDI target's memory, indicate timeout if occurred */
 353:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Le
 508               		.loc 2 353 0
 509 0098 CE5F      		subi r28,lo8(-258)
 510 009a DE4F      		sbci r29,hi8(-258)
 511 009c 6881      		ld r22,Y
 512 009e 7981      		ldd r23,Y+1
 513 00a0 8A81      		ldd r24,Y+2
 514 00a2 9B81      		ldd r25,Y+3
 515 00a4 C250      		subi r28,lo8(258)
 516 00a6 D140      		sbci r29,hi8(258)
 517 00a8 AE01      		movw r20,r28
 518 00aa 4F5F      		subi r20,-1
 519 00ac 5F4F      		sbci r21,-1
 520 00ae 0E94 0000 		call XMEGANVM_ReadMemory
 521               	.LVL48:
 522               	.L24:
 523 00b2 8823      		tst r24
 524 00b4 01F0      		breq .L17
 331:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 525               		.loc 2 331 0
 526 00b6 80E0      		ldi r24,0
 527 00b8 00C0      		rjmp .L18
 528               	.L17:
 529               	.LVL49:
 354:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 530               		.loc 2 354 0
 531 00ba 83E0      		ldi r24,lo8(3)
 532 00bc 00C0      		rjmp .L18
 533               	.LVL50:
 534               	.L16:
 355:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 356:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else
 357:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 358:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Read the TPI target's memory, indicate timeout if occurred */
 359:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Len
 535               		.loc 2 359 0
 536 00be A901      		movw r20,r18
 537 00c0 BE01      		movw r22,r28
 538 00c2 6F5F      		subi r22,-1
 539 00c4 7F4F      		sbci r23,-1
 540 00c6 CE5F      		subi r28,lo8(-258)
 541 00c8 DE4F      		sbci r29,hi8(-258)
 542 00ca 8881      		ld r24,Y
 543 00cc 9981      		ldd r25,Y+1
 544 00ce C250      		subi r28,lo8(258)
 545 00d0 D140      		sbci r29,hi8(258)
 546 00d2 0E94 0000 		call TINYNVM_ReadMemory
 547               	.LVL51:
 548 00d6 00C0      		rjmp .L24
 549               	.LVL52:
 550               	.L18:
 551               	.LBB207:
 552               	.LBB208:
 553               		.loc 3 624 0
 554 00d8 90E5      		ldi r25,lo8(80)
 555 00da 9093 F100 		sts 241,r25
 556               	.LVL53:
 557               	.LBE208:
 558               	.LBE207:
 559               	.LBB209:
 560               	.LBB210:
 561 00de 95E0      		ldi r25,lo8(5)
 562 00e0 9093 F100 		sts 241,r25
 563               	.LVL54:
 564               	.LBE210:
 565               	.LBE209:
 566               	.LBB211:
 567               	.LBB212:
 568 00e4 8093 F100 		sts 241,r24
 569               	.LVL55:
 570               	.LBE212:
 571               	.LBE211:
 360:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 361:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 362:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 363:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG);
 364:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_CMD_READ_MEM);
 365:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(ReturnStatus);
 366:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 367:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (ReturnStatus == XPRG_ERR_OK)
 572               		.loc 2 367 0
 573 00e8 8111      		cpse r24,__zero_reg__
 574 00ea 00C0      		rjmp .L20
 575               	.LVL56:
 368:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
 576               		.loc 2 368 0
 577 00ec CA5F      		subi r28,lo8(-262)
 578 00ee DE4F      		sbci r29,hi8(-262)
 579 00f0 6881      		ld r22,Y
 580 00f2 7981      		ldd r23,Y+1
 581 00f4 C650      		subi r28,lo8(262)
 582 00f6 D140      		sbci r29,hi8(262)
 583 00f8 40E0      		ldi r20,0
 584 00fa 50E0      		ldi r21,0
 585 00fc CE01      		movw r24,r28
 586 00fe 0196      		adiw r24,1
 587 0100 0E94 0000 		call Endpoint_Write_Stream_LE
 588               	.LVL57:
 589               	.L20:
 590               	.LBB213:
 591               	.LBB214:
 516:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 592               		.loc 3 516 0
 593 0104 8091 E800 		lds r24,232
 594 0108 8E77      		andi r24,lo8(126)
 595 010a 8093 E800 		sts 232,r24
 596               	/* epilogue start */
 597               	.LBE214:
 598               	.LBE213:
 369:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 370:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 371:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 599               		.loc 2 371 0
 600 010e C95F      		subi r28,-7
 601 0110 DE4F      		sbci r29,-2
 602 0112 0FB6      		in __tmp_reg__,__SREG__
 603 0114 F894      		cli
 604 0116 DEBF      		out __SP_H__,r29
 605 0118 0FBE      		out __SREG__,__tmp_reg__
 606 011a CDBF      		out __SP_L__,r28
 607 011c DF91      		pop r29
 608 011e CF91      		pop r28
 609 0120 0895      		ret
 610               		.cfi_endproc
 611               	.LFE123:
 613               		.section	.text.XPROGProtocol_SetMode,"ax",@progbits
 614               	.global	XPROGProtocol_SetMode
 616               	XPROGProtocol_SetMode:
 617               	.LFB117:
  59:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	struct
 618               		.loc 2 59 0
 619               		.cfi_startproc
 620 0000 CF93      		push r28
 621               	.LCFI18:
 622               		.cfi_def_cfa_offset 3
 623               		.cfi_offset 28, -2
 624 0002 DF93      		push r29
 625               	.LCFI19:
 626               		.cfi_def_cfa_offset 4
 627               		.cfi_offset 29, -3
 628 0004 1F92      		push __zero_reg__
 629               	.LCFI20:
 630               		.cfi_def_cfa_offset 5
 631 0006 CDB7      		in r28,__SP_L__
 632 0008 DEB7      		in r29,__SP_H__
 633               	.LCFI21:
 634               		.cfi_def_cfa_register 28
 635               	/* prologue: function */
 636               	/* frame size = 1 */
 637               	/* stack size = 3 */
 638               	.L__stack_usage = 3
  65:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 639               		.loc 2 65 0
 640 000a 40E0      		ldi r20,0
 641 000c 50E0      		ldi r21,0
 642 000e 61E0      		ldi r22,lo8(1)
 643 0010 70E0      		ldi r23,0
 644 0012 CE01      		movw r24,r28
 645 0014 0196      		adiw r24,1
 646 0016 0E94 0000 		call Endpoint_Read_Stream_LE
 647               	.LVL58:
 648               	.LBB215:
 649               	.LBB216:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 650               		.loc 3 531 0
 651 001a 8091 E800 		lds r24,232
 652 001e 8B77      		andi r24,lo8(123)
 653 0020 8093 E800 		sts 232,r24
 654               	.LVL59:
 655               	.LBE216:
 656               	.LBE215:
 657               	.LBB217:
 658               	.LBB218:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 659               		.loc 3 330 0
 660 0024 82E0      		ldi r24,lo8(2)
 661 0026 8093 E900 		sts 233,r24
 662               	.LVL60:
 663               	.LBE218:
 664               	.LBE217:
 665               	.LBB219:
 666               	.LBB220:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 667               		.loc 3 600 0
 668 002a 8091 EC00 		lds r24,236
 669 002e 8160      		ori r24,lo8(1)
 670 0030 8093 EC00 		sts 236,r24
 671               	.LVL61:
 672               	.LBE220:
 673               	.LBE219:
  71:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 674               		.loc 2 71 0
 675 0034 8981      		ldd r24,Y+1
 676 0036 8093 0000 		sts XPROG_SelectedProtocol,r24
 677               	.LVL62:
 678               	.LBB221:
 679               	.LBB222:
 680               		.loc 3 624 0
 681 003a 81E5      		ldi r24,lo8(81)
 682 003c 8093 F100 		sts 241,r24
 683               	.LVL63:
 684               	.LBE222:
 685               	.LBE221:
  74:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 686               		.loc 2 74 0
 687 0040 8981      		ldd r24,Y+1
 688 0042 8130      		cpi r24,lo8(1)
 689 0044 01F4      		brne .L27
 690 0046 80EC      		ldi r24,lo8(-64)
 691 0048 00C0      		rjmp .L26
 692               	.L27:
 693 004a 80E0      		ldi r24,0
 694               	.L26:
 695               	.LVL64:
 696               	.LBB223:
 697               	.LBB224:
 698               		.loc 3 624 0 discriminator 4
 699 004c 8093 F100 		sts 241,r24
 700               	.LVL65:
 701               	.LBE224:
 702               	.LBE223:
 703               	.LBB225:
 704               	.LBB226:
 516:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 705               		.loc 3 516 0 discriminator 4
 706 0050 8091 E800 		lds r24,232
 707 0054 8E77      		andi r24,lo8(126)
 708 0056 8093 E800 		sts 232,r24
 709               	/* epilogue start */
 710               	.LBE226:
 711               	.LBE225:
  76:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 712               		.loc 2 76 0 discriminator 4
 713 005a 0F90      		pop __tmp_reg__
 714 005c DF91      		pop r29
 715 005e CF91      		pop r28
 716 0060 0895      		ret
 717               		.cfi_endproc
 718               	.LFE117:
 720               		.section	.text.XPROGProtocol_Command,"ax",@progbits
 721               	.global	XPROGProtocol_Command
 723               	XPROGProtocol_Command:
 724               	.LFB118:
  82:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t XPROGCommand = Endpoint_Read_8();
 725               		.loc 2 82 0
 726               		.cfi_startproc
 727 0000 CF93      		push r28
 728               	.LCFI22:
 729               		.cfi_def_cfa_offset 3
 730               		.cfi_offset 28, -2
 731 0002 DF93      		push r29
 732               	.LCFI23:
 733               		.cfi_def_cfa_offset 4
 734               		.cfi_offset 29, -3
 735 0004 00D0      		rcall .
 736 0006 00D0      		rcall .
 737 0008 00D0      		rcall .
 738               	.LCFI24:
 739               		.cfi_def_cfa_offset 10
 740 000a CDB7      		in r28,__SP_L__
 741 000c DEB7      		in r29,__SP_H__
 742               	.LCFI25:
 743               		.cfi_def_cfa_register 28
 744               	/* prologue: function */
 745               	/* frame size = 6 */
 746               	/* stack size = 8 */
 747               	.L__stack_usage = 8
 748               	.LBB324:
 749               	.LBB325:
 612:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 750               		.loc 3 612 0
 751 000e E091 F100 		lds r30,241
 752               	.LBE325:
 753               	.LBE324:
  85:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 754               		.loc 2 85 0
 755 0012 8E2F      		mov r24,r30
 756 0014 90E0      		ldi r25,0
 757 0016 FC01      		movw r30,r24
 758 0018 3197      		sbiw r30,1
 759 001a E730      		cpi r30,7
 760 001c F105      		cpc r31,__zero_reg__
 761 001e 00F0      		brlo .+2
 762 0020 00C0      		rjmp .L28
 763 0022 E050      		subi r30,lo8(-(gs(.L31)))
 764 0024 F040      		sbci r31,hi8(-(gs(.L31)))
 765 0026 0C94 0000 		jmp __tablejump2__
 766               		.section	.progmem.gcc_sw_table.XPROGProtocol_Command,"a",@progbits
 767               		.p2align	1
 768               	.L31:
 769 0000 0000      		.word gs(.L30)
 770 0002 0000      		.word gs(.L32)
 771 0004 0000      		.word gs(.L33)
 772 0006 0000      		.word gs(.L34)
 773 0008 0000      		.word gs(.L35)
 774 000a 0000      		.word gs(.L36)
 775 000c 0000      		.word gs(.L37)
 776               		.section	.text.XPROGProtocol_Command
 777               	.L30:
 778               	.LBB326:
 779               	.LBB327:
 780               	.LBB328:
 781               	.LBB329:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 782               		.loc 3 531 0
 783 002a 8091 E800 		lds r24,232
 784 002e 8B77      		andi r24,lo8(123)
 785 0030 8093 E800 		sts 232,r24
 786               	.LVL66:
 787               	.LBE329:
 788               	.LBE328:
 789               	.LBB330:
 790               	.LBB331:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 791               		.loc 3 330 0
 792 0034 82E0      		ldi r24,lo8(2)
 793 0036 8093 E900 		sts 233,r24
 794               	.LVL67:
 795               	.LBE331:
 796               	.LBE330:
 797               	.LBB332:
 798               	.LBB333:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 799               		.loc 3 600 0
 800 003a 8091 EC00 		lds r24,236
 801 003e 8160      		ori r24,lo8(1)
 802 0040 8093 EC00 		sts 236,r24
 803               	.LVL68:
 804               	.LBE333:
 805               	.LBE332:
 120:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  NVMBusEnabled = XMEGANVM_EnablePDI();
 806               		.loc 2 120 0
 807 0044 8091 0000 		lds r24,XPROG_SelectedProtocol
 808 0048 8111      		cpse r24,__zero_reg__
 809 004a 00C0      		rjmp .L38
 121:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
 810               		.loc 2 121 0
 811 004c 0E94 0000 		call XMEGANVM_EnablePDI
 812               	.LVL69:
 813 0050 00C0      		rjmp .L39
 814               	.LVL70:
 815               	.L38:
 122:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  NVMBusEnabled = TINYNVM_EnableTPI();
 816               		.loc 2 122 0
 817 0052 8230      		cpi r24,lo8(2)
 818 0054 01F4      		brne .L59
 123:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 819               		.loc 2 123 0
 820 0056 0E94 0000 		call TINYNVM_EnableTPI
 821               	.LVL71:
 822 005a 00C0      		rjmp .L39
 823               	.LVL72:
 824               	.L59:
 118:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 825               		.loc 2 118 0
 826 005c 80E0      		ldi r24,0
 827               	.LVL73:
 828               	.L39:
 829               	.LBB334:
 830               	.LBB335:
 831               		.loc 3 624 0
 832 005e 90E5      		ldi r25,lo8(80)
 833 0060 9093 F100 		sts 241,r25
 834               	.LVL74:
 835               	.LBE335:
 836               	.LBE334:
 837               	.LBB336:
 838               	.LBB337:
 839 0064 91E0      		ldi r25,lo8(1)
 840 0066 9093 F100 		sts 241,r25
 841               	.LVL75:
 842               	.LBE337:
 843               	.LBE336:
 127:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 844               		.loc 2 127 0
 845 006a 9827      		eor r25,r24
 846               	.LVL76:
 847               	.LBB338:
 848               	.LBB339:
 849               		.loc 3 624 0
 850 006c 9093 F100 		sts 241,r25
 851               	.LVL77:
 852 0070 00C0      		rjmp .L73
 853               	.LVL78:
 854               	.L32:
 855               	.LBE339:
 856               	.LBE338:
 857               	.LBE327:
 858               	.LBE326:
 859               	.LBB340:
 860               	.LBB341:
 861               	.LBB342:
 862               	.LBB343:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 863               		.loc 3 531 0
 864 0072 8091 E800 		lds r24,232
 865 0076 8B77      		andi r24,lo8(123)
 866 0078 8093 E800 		sts 232,r24
 867               	.LVL79:
 868               	.LBE343:
 869               	.LBE342:
 870               	.LBB344:
 871               	.LBB345:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 872               		.loc 3 330 0
 873 007c 82E0      		ldi r24,lo8(2)
 874 007e 8093 E900 		sts 233,r24
 875               	.LVL80:
 876               	.LBE345:
 877               	.LBE344:
 878               	.LBB346:
 879               	.LBB347:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 880               		.loc 3 600 0
 881 0082 8091 EC00 		lds r24,236
 882 0086 8160      		ori r24,lo8(1)
 883 0088 8093 EC00 		sts 236,r24
 884               	.LVL81:
 885               	.LBE347:
 886               	.LBE346:
 140:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	  XMEGANVM_DisablePDI();
 887               		.loc 2 140 0
 888 008c 8091 0000 		lds r24,XPROG_SelectedProtocol
 889 0090 8111      		cpse r24,__zero_reg__
 890 0092 00C0      		rjmp .L40
 141:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else
 891               		.loc 2 141 0
 892 0094 0E94 0000 		call XMEGANVM_DisablePDI
 893               	.LVL82:
 894 0098 00C0      		rjmp .L41
 895               	.L40:
 143:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 896               		.loc 2 143 0
 897 009a 0E94 0000 		call TINYNVM_DisableTPI
 898               	.LVL83:
 899               	.L41:
 900               	.LBB348:
 901               	.LBB349:
 902               		.loc 3 624 0
 903 009e 80E5      		ldi r24,lo8(80)
 904 00a0 8093 F100 		sts 241,r24
 905               	.LVL84:
 906               	.LBE349:
 907               	.LBE348:
 908               	.LBB350:
 909               	.LBB351:
 910 00a4 82E0      		ldi r24,lo8(2)
 911 00a6 8093 F100 		sts 241,r24
 912               	.LVL85:
 913               	.LBE351:
 914               	.LBE350:
 915               	.LBB352:
 916               	.LBB353:
 917 00aa 1092 F100 		sts 241,__zero_reg__
 918               	.LVL86:
 919 00ae 00C0      		rjmp .L73
 920               	.L33:
 921               	.LVL87:
 922               	.LBE353:
 923               	.LBE352:
 924               	.LBE341:
 925               	.LBE340:
 926               	.LBB354:
 927               	.LBB355:
 168:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
 928               		.loc 2 168 0
 929 00b0 40E0      		ldi r20,0
 930 00b2 50E0      		ldi r21,0
 931 00b4 65E0      		ldi r22,lo8(5)
 932 00b6 70E0      		ldi r23,0
 933 00b8 CE01      		movw r24,r28
 934 00ba 0196      		adiw r24,1
 935 00bc 0E94 0000 		call Endpoint_Read_Stream_LE
 936               	.LVL88:
 169:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 937               		.loc 2 169 0
 938 00c0 6A81      		ldd r22,Y+2
 939 00c2 7B81      		ldd r23,Y+3
 940 00c4 8C81      		ldd r24,Y+4
 941 00c6 9D81      		ldd r25,Y+5
 942 00c8 0E94 0000 		call SwapEndian_32
 943               	.LVL89:
 944 00cc 6A83      		std Y+2,r22
 945 00ce 7B83      		std Y+3,r23
 946 00d0 8C83      		std Y+4,r24
 947 00d2 9D83      		std Y+5,r25
 948               	.LBB356:
 949               	.LBB357:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 950               		.loc 3 531 0
 951 00d4 8091 E800 		lds r24,232
 952 00d8 8B77      		andi r24,lo8(123)
 953 00da 8093 E800 		sts 232,r24
 954               	.LVL90:
 955               	.LBE357:
 956               	.LBE356:
 957               	.LBB358:
 958               	.LBB359:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 959               		.loc 3 330 0
 960 00de 82E0      		ldi r24,lo8(2)
 961 00e0 8093 E900 		sts 233,r24
 962               	.LVL91:
 963               	.LBE359:
 964               	.LBE358:
 965               	.LBB360:
 966               	.LBB361:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 967               		.loc 3 600 0
 968 00e4 8091 EC00 		lds r24,236
 969 00e8 8160      		ori r24,lo8(1)
 970 00ea 8093 EC00 		sts 236,r24
 971               	.LVL92:
 972               	.LBE361:
 973               	.LBE360:
 177:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 974               		.loc 2 177 0
 975 00ee 8091 0000 		lds r24,XPROG_SelectedProtocol
 976 00f2 E981      		ldd r30,Y+1
 977 00f4 8111      		cpse r24,__zero_reg__
 978 00f6 00C0      		rjmp .L42
 979 00f8 E150      		subi r30,lo8(-(-1))
 980 00fa E830      		cpi r30,lo8(8)
 981 00fc 00F4      		brsh .L60
 982 00fe F0E0      		ldi r31,0
 983 0100 E050      		subi r30,lo8(-(CSWTCH.28))
 984 0102 F040      		sbci r31,hi8(-(CSWTCH.28))
 985 0104 8081      		ld r24,Z
 986 0106 00C0      		rjmp .L43
 987               	.L60:
 180:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 988               		.loc 2 180 0
 989 0108 80E0      		ldi r24,0
 990               	.L43:
 991               	.LVL93:
 212:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 992               		.loc 2 212 0
 993 010a 4A81      		ldd r20,Y+2
 994 010c 5B81      		ldd r21,Y+3
 995 010e 6C81      		ldd r22,Y+4
 996 0110 7D81      		ldd r23,Y+5
 997 0112 0E94 0000 		call XMEGANVM_EraseMemory
 998               	.LVL94:
 999               	.L71:
 1000 0116 8823      		tst r24
 1001 0118 01F0      		breq .L44
 160:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 1002               		.loc 2 160 0
 1003 011a 80E0      		ldi r24,0
 1004 011c 00C0      		rjmp .L45
 1005               	.L44:
 1006               	.LVL95:
 213:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 1007               		.loc 2 213 0
 1008 011e 83E0      		ldi r24,lo8(3)
 1009 0120 00C0      		rjmp .L45
 1010               	.LVL96:
 1011               	.L42:
 217:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
 1012               		.loc 2 217 0
 1013 0122 E130      		cpi r30,lo8(1)
 1014 0124 01F0      		breq .L61
 220:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 1015               		.loc 2 220 0
 1016 0126 84E1      		ldi r24,lo8(20)
 1017 0128 00C0      		rjmp .L46
 1018               	.L61:
 218:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		else
 1019               		.loc 2 218 0
 1020 012a 80E1      		ldi r24,lo8(16)
 1021               	.L46:
 1022               	.LVL97:
 223:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 1023               		.loc 2 223 0
 1024 012c 6A81      		ldd r22,Y+2
 1025 012e 7B81      		ldd r23,Y+3
 1026 0130 0E94 0000 		call TINYNVM_EraseMemory
 1027               	.LVL98:
 1028 0134 00C0      		rjmp .L71
 1029               	.LVL99:
 1030               	.L45:
 1031               	.LBB362:
 1032               	.LBB363:
 1033               		.loc 3 624 0
 1034 0136 90E5      		ldi r25,lo8(80)
 1035 0138 9093 F100 		sts 241,r25
 1036               	.LVL100:
 1037               	.LBE363:
 1038               	.LBE362:
 1039               	.LBB364:
 1040               	.LBB365:
 1041 013c 93E0      		ldi r25,lo8(3)
 1042 013e 00C0      		rjmp .L74
 1043               	.LVL101:
 1044               	.L34:
 1045               	.LBE365:
 1046               	.LBE364:
 1047               	.LBE355:
 1048               	.LBE354:
  97:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 1049               		.loc 2 97 0
 1050 0140 0E94 0000 		call XPROGProtocol_WriteMemory
 1051               	.LVL102:
  98:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_READ_MEM:
 1052               		.loc 2 98 0
 1053 0144 00C0      		rjmp .L28
 1054               	.L35:
 100:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 1055               		.loc 2 100 0
 1056 0146 0E94 0000 		call XPROGProtocol_ReadMemory
 1057               	.LVL103:
 101:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_CMD_CRC:
 1058               		.loc 2 101 0
 1059 014a 00C0      		rjmp .L28
 1060               	.L36:
 1061               	.LVL104:
 1062               	.LBB366:
 1063               	.LBB367:
 372:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 373:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison be
 374:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  attached device's memory and a data set on the host.
 375:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
 376:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_ReadCRC(void)
 377:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
 378:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t ReturnStatus = XPRG_ERR_OK;
 379:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 380:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	struct
 381:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 382:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t CRCType;
 383:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	} ReadCRC_XPROG_Params;
 384:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 385:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
 1064               		.loc 2 385 0
 1065 014c 40E0      		ldi r20,0
 1066 014e 50E0      		ldi r21,0
 1067 0150 61E0      		ldi r22,lo8(1)
 1068 0152 70E0      		ldi r23,0
 1069 0154 CE01      		movw r24,r28
 1070 0156 0696      		adiw r24,6
 1071 0158 0E94 0000 		call Endpoint_Read_Stream_LE
 1072               	.LVL105:
 1073               	.LBB368:
 1074               	.LBB369:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1075               		.loc 3 531 0
 1076 015c 8091 E800 		lds r24,232
 1077 0160 8B77      		andi r24,lo8(123)
 1078 0162 8093 E800 		sts 232,r24
 1079               	.LVL106:
 1080               	.LBE369:
 1081               	.LBE368:
 1082               	.LBB370:
 1083               	.LBB371:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1084               		.loc 3 330 0
 1085 0166 82E0      		ldi r24,lo8(2)
 1086 0168 8093 E900 		sts 233,r24
 1087               	.LVL107:
 1088               	.LBE371:
 1089               	.LBE370:
 1090               	.LBB372:
 1091               	.LBB373:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1092               		.loc 3 600 0
 1093 016c 8091 EC00 		lds r24,236
 1094 0170 8160      		ori r24,lo8(1)
 1095 0172 8093 EC00 		sts 236,r24
 1096               	.LVL108:
 1097               	.LBE373:
 1098               	.LBE372:
 386:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 387:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearOUT();
 388:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
 389:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 390:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 391:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint32_t MemoryCRC;
 392:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 393:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
 1099               		.loc 2 393 0
 1100 0176 8091 0000 		lds r24,XPROG_SelectedProtocol
 1101 017a 8111      		cpse r24,__zero_reg__
 1102 017c 00C0      		rjmp .L62
 1103               	.LBB374:
 394:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 395:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		uint8_t CRCCommand;
 396:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 397:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Determine which NVM command to send to the device depending on the memory to CRC */
 398:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		switch (ReadCRC_XPROG_Params.CRCType)
 1104               		.loc 2 398 0
 1105 017e 8E81      		ldd r24,Y+6
 1106 0180 8130      		cpi r24,lo8(1)
 1107 0182 01F0      		breq .L63
 1108 0184 8230      		cpi r24,lo8(2)
 1109 0186 01F4      		brne .L69
 399:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		{
 400:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_CRC_APP:
 401:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				CRCCommand = XMEGA_NVM_CMD_APPCRC;
 402:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 403:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			case XPRG_CRC_BOOT:
 404:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
 1110               		.loc 2 404 0
 1111 0188 89E3      		ldi r24,lo8(57)
 1112 018a 00C0      		rjmp .L50
 1113               	.L69:
 1114               	.LVL109:
 405:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 406:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			default:
 407:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
 1115               		.loc 2 407 0
 1116 018c 88E7      		ldi r24,lo8(120)
 1117 018e 00C0      		rjmp .L50
 1118               	.LVL110:
 1119               	.L63:
 401:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 1120               		.loc 2 401 0
 1121 0190 88E3      		ldi r24,lo8(56)
 1122               	.L50:
 1123               	.LVL111:
 408:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 				break;
 409:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		}
 410:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 411:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
 412:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
 1124               		.loc 2 412 0
 1125 0192 BE01      		movw r22,r28
 1126 0194 6F5F      		subi r22,-1
 1127 0196 7F4F      		sbci r23,-1
 1128 0198 0E94 0000 		call XMEGANVM_GetMemoryCRC
 1129               	.LVL112:
 1130 019c 8111      		cpse r24,__zero_reg__
 1131 019e 00C0      		rjmp .L64
 413:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		  ReturnStatus = XPRG_ERR_TIMEOUT;
 1132               		.loc 2 413 0
 1133 01a0 83E0      		ldi r24,lo8(3)
 1134 01a2 00C0      		rjmp .L48
 1135               	.L62:
 1136               	.LBE374:
 414:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 415:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	else
 416:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 417:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		/* TPI does not support memory CRC */
 418:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		ReturnStatus = XPRG_ERR_FAILED;
 1137               		.loc 2 418 0
 1138 01a4 81E0      		ldi r24,lo8(1)
 1139 01a6 00C0      		rjmp .L48
 1140               	.L64:
 378:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 1141               		.loc 2 378 0
 1142 01a8 80E0      		ldi r24,0
 1143               	.L48:
 1144               	.LVL113:
 1145               	.LBB375:
 1146               	.LBB376:
 1147               		.loc 3 624 0
 1148 01aa 90E5      		ldi r25,lo8(80)
 1149 01ac 9093 F100 		sts 241,r25
 1150               	.LVL114:
 1151               	.LBE376:
 1152               	.LBE375:
 1153               	.LBB377:
 1154               	.LBB378:
 1155 01b0 96E0      		ldi r25,lo8(6)
 1156 01b2 9093 F100 		sts 241,r25
 1157               	.LVL115:
 1158               	.LBE378:
 1159               	.LBE377:
 1160               	.LBB379:
 1161               	.LBB380:
 1162 01b6 8093 F100 		sts 241,r24
 1163               	.LVL116:
 1164               	.LBE380:
 1165               	.LBE379:
 419:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 420:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 421:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(CMD_XPROG);
 422:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(XPRG_CMD_CRC);
 423:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_Write_8(ReturnStatus);
 424:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 425:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	if (ReturnStatus == XPRG_ERR_OK)
 1166               		.loc 2 425 0
 1167 01ba 8111      		cpse r24,__zero_reg__
 1168 01bc 00C0      		rjmp .L73
 1169               	.LVL117:
 426:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 427:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		Endpoint_Write_8(MemoryCRC >> 16);
 1170               		.loc 2 427 0
 1171 01be 8981      		ldd r24,Y+1
 1172 01c0 9A81      		ldd r25,Y+2
 1173 01c2 AB81      		ldd r26,Y+3
 1174 01c4 BC81      		ldd r27,Y+4
 1175 01c6 CD01      		movw r24,r26
 1176 01c8 AA27      		clr r26
 1177 01ca BB27      		clr r27
 1178               	.LVL118:
 1179               	.LBB381:
 1180               	.LBB382:
 1181               		.loc 3 624 0
 1182 01cc 8093 F100 		sts 241,r24
 1183               	.LVL119:
 1184               	.LBE382:
 1185               	.LBE381:
 428:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
 1186               		.loc 2 428 0
 1187 01d0 8981      		ldd r24,Y+1
 1188 01d2 9A81      		ldd r25,Y+2
 1189 01d4 AB81      		ldd r26,Y+3
 1190 01d6 BC81      		ldd r27,Y+4
 1191               	.LVL120:
 1192               	.LBB383:
 1193               	.LBB384:
 625:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 626:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 627:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 628:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 629:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 630:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 631:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
 632:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void)
 633:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 634:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Dummy;
 635:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 636:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 637:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 638:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				(void)Dummy;
 639:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 640:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 641:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 642:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 643:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 644:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 645:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 646:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 647:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 648:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 649:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void)
 650:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 651:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 652:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 653:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 654:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 655:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 656:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 657:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 658:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 659:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 660:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 661:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 662:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 663:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 664:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 665:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 666:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 667:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 668:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 669:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 670:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 671:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void)
 672:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 673:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 674:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 675:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 676:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 677:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 678:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 679:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 680:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 681:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 682:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 683:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 684:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 685:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 686:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 687:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 688:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 689:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 690:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 691:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 692:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
 693:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data)
 694:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 695:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data & 0xFF);
 1194               		.loc 3 695 0
 1195 01d8 8093 F100 		sts 241,r24
 696:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 1196               		.loc 3 696 0
 1197 01dc 892F      		mov r24,r25
 1198 01de 9927      		clr r25
 1199               	.LVL121:
 1200 01e0 00C0      		rjmp .L75
 1201               	.LVL122:
 1202               	.L37:
 1203               	.LBE384:
 1204               	.LBE383:
 1205               	.LBE367:
 1206               	.LBE366:
 1207               	.LBB385:
 1208               	.LBB386:
 1209               	.LBB387:
 1210               	.LBB388:
 612:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1211               		.loc 3 612 0
 1212 01e2 8091 F100 		lds r24,241
 1213               	.LBE388:
 1214               	.LBE387:
 429:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	}
 430:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 431:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	Endpoint_ClearIN();
 432:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** }
 433:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 434:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** /** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating wit
 435:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  *  attached device.
 436:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c ****  */
 437:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** static void XPROGProtocol_SetParam(void)
 438:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** {
 439:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t ReturnStatus = XPRG_ERR_OK;
 440:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 441:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	uint8_t XPROGParam = Endpoint_Read_8();
 442:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 443:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	/* Determine which parameter is being set, store the new parameter value */
 444:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	switch (XPROGParam)
 1215               		.loc 2 444 0
 1216 01e6 8230      		cpi r24,lo8(2)
 1217 01e8 01F0      		breq .L54
 1218 01ea 00F4      		brsh .L55
 1219 01ec 8130      		cpi r24,lo8(1)
 1220 01ee 01F4      		brne .L65
 1221               	.LBB389:
 1222               	.LBB390:
 697:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 698:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 699:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes two bytes to the currently selected endpoint's bank in big endian format, for IN
 700:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 701:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 702:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 703:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 704:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 705:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 706:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_BE(const uint16_t Data) ATTR_ALWAYS_INLINE;
 707:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_BE(const uint16_t Data)
 708:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 709:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 710:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data & 0xFF);
 711:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 712:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 713:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Discards two bytes from the currently selected endpoint's bank, for OUT direction endpoints.
 714:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 715:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 716:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 717:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
 718:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_16(void)
 719:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 720:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Dummy;
 721:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 722:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 723:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 724:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 725:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				(void)Dummy;
 726:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 727:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 728:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads four bytes from the currently selected endpoint's bank in little endian format, for OU
 729:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 730:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 731:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 732:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 733:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
 734:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 735:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 736:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_LE(void)
 737:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 738:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 739:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 740:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint32_t Value;
 741:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[4];
 742:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 743:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 744:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 745:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 746:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[2] = UEDATX;
 747:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[3] = UEDATX;
 748:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 749:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 750:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 751:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 752:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads four bytes from the currently selected endpoint's bank in big endian format, for OUT
 753:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 754:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 755:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 756:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 757:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
 758:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 759:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 760:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_BE(void)
 761:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 762:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 763:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 764:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint32_t Value;
 765:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[4];
 766:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 767:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 768:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[3] = UEDATX;
 1223               		.loc 3 768 0
 1224 01f0 2091 F100 		lds r18,241
 1225 01f4 B22F      		mov r27,r18
 1226               	.LVL123:
 769:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[2] = UEDATX;
 1227               		.loc 3 769 0
 1228 01f6 2091 F100 		lds r18,241
 1229 01fa A22F      		mov r26,r18
 770:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 1230               		.loc 3 770 0
 1231 01fc 2091 F100 		lds r18,241
 1232 0200 922F      		mov r25,r18
 771:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 1233               		.loc 3 771 0
 1234 0202 2091 F100 		lds r18,241
 1235 0206 822F      		mov r24,r18
 1236               	.LVL124:
 1237               	.LBE390:
 1238               	.LBE389:
 445:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 446:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_PARAM_NVMBASE:
 447:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
 1239               		.loc 2 447 0
 1240 0208 8093 0000 		sts XPROG_Param_NVMBase,r24
 1241 020c 9093 0000 		sts XPROG_Param_NVMBase+1,r25
 1242 0210 A093 0000 		sts XPROG_Param_NVMBase+2,r26
 1243 0214 B093 0000 		sts XPROG_Param_NVMBase+3,r27
 1244 0218 00C0      		rjmp .L72
 1245               	.LVL125:
 1246               	.L55:
 444:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 	{
 1247               		.loc 2 444 0
 1248 021a 8330      		cpi r24,lo8(3)
 1249 021c 01F0      		breq .L57
 1250 021e 8430      		cpi r24,lo8(4)
 1251 0220 01F4      		brne .L65
 1252               	.LBB391:
 1253               	.LBB392:
 612:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1254               		.loc 3 612 0
 1255 0222 8091 F100 		lds r24,241
 1256               	.LBE392:
 1257               	.LBE391:
 448:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 449:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_PARAM_EEPPAGESIZE:
 450:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROG_Param_EEPageSize = Endpoint_Read_16_BE();
 451:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 452:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_PARAM_NVMCMD_REG:
 453:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
 454:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 455:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		case XPRG_PARAM_NVMCSR_REG:
 456:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
 1258               		.loc 2 456 0
 1259 0226 8093 0000 		sts XPROG_Param_NVMCSRRegAddr,r24
 1260 022a 00C0      		rjmp .L72
 1261               	.L54:
 1262               	.LBB393:
 1263               	.LBB394:
 679:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 1264               		.loc 3 679 0
 1265 022c 2091 F100 		lds r18,241
 1266 0230 922F      		mov r25,r18
 1267               	.LVL126:
 680:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 1268               		.loc 3 680 0
 1269 0232 2091 F100 		lds r18,241
 1270 0236 822F      		mov r24,r18
 1271               	.LVL127:
 1272               	.LBE394:
 1273               	.LBE393:
 450:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 1274               		.loc 2 450 0
 1275 0238 9093 0000 		sts XPROG_Param_EEPageSize+1,r25
 1276 023c 8093 0000 		sts XPROG_Param_EEPageSize,r24
 1277 0240 00C0      		rjmp .L72
 1278               	.LVL128:
 1279               	.L57:
 1280               	.LBB395:
 1281               	.LBB396:
 612:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1282               		.loc 3 612 0
 1283 0242 8091 F100 		lds r24,241
 1284               	.LBE396:
 1285               	.LBE395:
 453:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 1286               		.loc 2 453 0
 1287 0246 8093 0000 		sts XPROG_Param_NVMCMDRegAddr,r24
 1288               	.LVL129:
 1289               	.L72:
 439:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 1290               		.loc 2 439 0
 1291 024a 80E0      		ldi r24,0
 1292               	.LVL130:
 1293 024c 00C0      		rjmp .L53
 1294               	.L65:
 457:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			break;
 458:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 		default:
 459:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 			ReturnStatus = XPRG_ERR_FAILED;
 1295               		.loc 2 459 0
 1296 024e 81E0      		ldi r24,lo8(1)
 1297               	.L53:
 1298               	.LVL131:
 1299               	.LBB397:
 1300               	.LBB398:
 531:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1301               		.loc 3 531 0
 1302 0250 9091 E800 		lds r25,232
 1303 0254 9B77      		andi r25,lo8(123)
 1304 0256 9093 E800 		sts 232,r25
 1305               	.LVL132:
 1306               	.LBE398:
 1307               	.LBE397:
 1308               	.LBB399:
 1309               	.LBB400:
 330:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1310               		.loc 3 330 0
 1311 025a 92E0      		ldi r25,lo8(2)
 1312 025c 9093 E900 		sts 233,r25
 1313               	.LVL133:
 1314               	.LBE400:
 1315               	.LBE399:
 1316               	.LBB401:
 1317               	.LBB402:
 600:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1318               		.loc 3 600 0
 1319 0260 9091 EC00 		lds r25,236
 1320 0264 9160      		ori r25,lo8(1)
 1321 0266 9093 EC00 		sts 236,r25
 1322               	.LVL134:
 1323               	.LBE402:
 1324               	.LBE401:
 1325               	.LBB403:
 1326               	.LBB404:
 624:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1327               		.loc 3 624 0
 1328 026a 90E5      		ldi r25,lo8(80)
 1329 026c 9093 F100 		sts 241,r25
 1330               	.LVL135:
 1331               	.LBE404:
 1332               	.LBE403:
 1333               	.LBB405:
 1334               	.LBB406:
 1335 0270 97E0      		ldi r25,lo8(7)
 1336               	.LVL136:
 1337               	.L74:
 1338 0272 9093 F100 		sts 241,r25
 1339               	.L75:
 1340               	.LVL137:
 1341               	.LBE406:
 1342               	.LBE405:
 1343               	.LBB407:
 1344               	.LBB408:
 1345 0276 8093 F100 		sts 241,r24
 1346               	.LVL138:
 1347               	.L73:
 1348               	.LBE408:
 1349               	.LBE407:
 1350               	.LBB409:
 1351               	.LBB410:
 516:../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1352               		.loc 3 516 0
 1353 027a 8091 E800 		lds r24,232
 1354 027e 8E77      		andi r24,lo8(126)
 1355 0280 8093 E800 		sts 232,r24
 1356               	.L28:
 1357               	/* epilogue start */
 1358               	.LBE410:
 1359               	.LBE409:
 1360               	.LBE386:
 1361               	.LBE385:
 109:../AVRISP-MKII/Lib/XPROG/XPROGProtocol.c **** 
 1362               		.loc 2 109 0
 1363 0284 2696      		adiw r28,6
 1364 0286 0FB6      		in __tmp_reg__,__SREG__
 1365 0288 F894      		cli
 1366 028a DEBF      		out __SP_H__,r29
 1367 028c 0FBE      		out __SREG__,__tmp_reg__
 1368 028e CDBF      		out __SP_L__,r28
 1369 0290 DF91      		pop r29
 1370 0292 CF91      		pop r28
 1371 0294 0895      		ret
 1372               		.cfi_endproc
 1373               	.LFE118:
 1375               		.section	.rodata
 1378               	CSWTCH.34:
 1379 0000 01        		.byte	1
 1380 0001 01        		.byte	1
 1381 0002 01        		.byte	1
 1382 0003 00        		.byte	0
 1383 0004 00        		.byte	0
 1384 0005 01        		.byte	1
 1387               	CSWTCH.33:
 1388 0006 26        		.byte	38
 1389 0007 26        		.byte	38
 1390 0008 36        		.byte	54
 1391 0009 26        		.byte	38
 1392 000a 26        		.byte	38
 1393 000b 26        		.byte	38
 1396               	CSWTCH.32:
 1397 000c 23        		.byte	35
 1398 000d 23        		.byte	35
 1399 000e 33        		.byte	51
 1400 000f 23        		.byte	35
 1401 0010 23        		.byte	35
 1402 0011 23        		.byte	35
 1405               	CSWTCH.31:
 1406 0012 24        		.byte	36
 1407 0013 2C        		.byte	44
 1408 0014 35        		.byte	53
 1409 0015 4C        		.byte	76
 1410 0016 08        		.byte	8
 1411 0017 1A        		.byte	26
 1414               	CSWTCH.28:
 1415 0018 40        		.byte	64
 1416 0019 20        		.byte	32
 1417 001a 68        		.byte	104
 1418 001b 30        		.byte	48
 1419 001c 22        		.byte	34
 1420 001d 2A        		.byte	42
 1421 001e 32        		.byte	50
 1422 001f 18        		.byte	24
 1423               	.global	XPROG_SelectedProtocol
 1424               		.section .bss
 1427               	XPROG_SelectedProtocol:
 1428 0000 00        		.zero	1
 1429               	.global	XPROG_Param_NVMCSRRegAddr
 1430               		.data
 1433               	XPROG_Param_NVMCSRRegAddr:
 1434 0000 32        		.byte	50
 1435               	.global	XPROG_Param_NVMCMDRegAddr
 1438               	XPROG_Param_NVMCMDRegAddr:
 1439 0001 33        		.byte	51
 1440               	.global	XPROG_Param_EEPageSize
 1443               	XPROG_Param_EEPageSize:
 1444 0002 2000      		.word	32
 1445               	.global	XPROG_Param_NVMBase
 1448               	XPROG_Param_NVMBase:
 1449 0004 C0        		.byte	-64
 1450 0005 01        		.byte	1
 1451 0006 00        		.byte	0
 1452 0007 01        		.byte	1
 1453               		.text
 1454               	.Letext0:
 1455               		.file 4 "/usr/lib/avr/include/stdint.h"
 1456               		.file 5 "../AVRISP-MKII/Lib/XPROG/../ISP/ISPTarget.h"
 1457               		.file 6 "../AVRISP-MKII/Lib/XPROG/XMEGANVM.h"
 1458               		.file 7 "../../LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1459               		.file 8 "../AVRISP-MKII/Lib/XPROG/TINYNVM.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XPROGProtocol.c
     /tmp/ccb050SZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccb050SZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccb050SZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccb050SZ.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccb050SZ.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccb050SZ.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccb050SZ.s:13     .text.SwapEndian_32:0000000000000000 SwapEndian_32
     /tmp/ccb050SZ.s:67     .text.XPROGProtocol_WriteMemory:0000000000000000 XPROGProtocol_WriteMemory
     /tmp/ccb050SZ.s:1427   .bss:0000000000000000 XPROG_SelectedProtocol
     /tmp/ccb050SZ.s:1405   .rodata:0000000000000012 CSWTCH.31
     /tmp/ccb050SZ.s:1396   .rodata:000000000000000c CSWTCH.32
     /tmp/ccb050SZ.s:1387   .rodata:0000000000000006 CSWTCH.33
     /tmp/ccb050SZ.s:1378   .rodata:0000000000000000 CSWTCH.34
     /tmp/ccb050SZ.s:380    .text.XPROGProtocol_ReadMemory:0000000000000000 XPROGProtocol_ReadMemory
     /tmp/ccb050SZ.s:616    .text.XPROGProtocol_SetMode:0000000000000000 XPROGProtocol_SetMode
     /tmp/ccb050SZ.s:723    .text.XPROGProtocol_Command:0000000000000000 XPROGProtocol_Command
     /tmp/ccb050SZ.s:1414   .rodata:0000000000000018 CSWTCH.28
     /tmp/ccb050SZ.s:1448   .data:0000000000000004 XPROG_Param_NVMBase
     /tmp/ccb050SZ.s:1433   .data:0000000000000000 XPROG_Param_NVMCSRRegAddr
     /tmp/ccb050SZ.s:1443   .data:0000000000000002 XPROG_Param_EEPageSize
     /tmp/ccb050SZ.s:1438   .data:0000000000000001 XPROG_Param_NVMCMDRegAddr

UNDEFINED SYMBOLS
Endpoint_Read_Stream_LE
Endpoint_WaitUntilReady
XMEGANVM_WritePageMemory
TINYNVM_WriteMemory
XMEGANVM_WriteByteMemory
XMEGANVM_ReadMemory
TINYNVM_ReadMemory
Endpoint_Write_Stream_LE
__tablejump2__
XMEGANVM_EnablePDI
TINYNVM_EnableTPI
XMEGANVM_DisablePDI
TINYNVM_DisableTPI
XMEGANVM_EraseMemory
TINYNVM_EraseMemory
XMEGANVM_GetMemoryCRC
__do_copy_data
__do_clear_bss
