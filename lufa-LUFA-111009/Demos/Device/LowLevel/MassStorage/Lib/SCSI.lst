   1               		.file	"SCSI.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.SCSI_Command_ReadWrite_10,"ax",@progbits
  13               	SCSI_Command_ReadWrite_10:
  14               	.LFB131:
  15               		.file 1 "Lib/SCSI.c"
   1:Lib/SCSI.c    **** /*
   2:Lib/SCSI.c    ****              LUFA Library
   3:Lib/SCSI.c    ****      Copyright (C) Dean Camera, 2011.
   4:Lib/SCSI.c    **** 
   5:Lib/SCSI.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/SCSI.c    ****            www.lufa-lib.org
   7:Lib/SCSI.c    **** */
   8:Lib/SCSI.c    **** 
   9:Lib/SCSI.c    **** /*
  10:Lib/SCSI.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/SCSI.c    **** 
  12:Lib/SCSI.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Lib/SCSI.c    ****   software and its documentation for any purpose is hereby granted
  14:Lib/SCSI.c    ****   without fee, provided that the above copyright notice appear in
  15:Lib/SCSI.c    ****   all copies and that both that the copyright notice and this
  16:Lib/SCSI.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Lib/SCSI.c    ****   documentation, and that the name of the author not be used in
  18:Lib/SCSI.c    ****   advertising or publicity pertaining to distribution of the
  19:Lib/SCSI.c    ****   software without specific, written prior permission.
  20:Lib/SCSI.c    **** 
  21:Lib/SCSI.c    ****   The author disclaim all warranties with regard to this
  22:Lib/SCSI.c    ****   software, including all implied warranties of merchantability
  23:Lib/SCSI.c    ****   and fitness.  In no event shall the author be liable for any
  24:Lib/SCSI.c    ****   special, indirect or consequential damages or any damages
  25:Lib/SCSI.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/SCSI.c    ****   in an action of contract, negligence or other tortious action,
  27:Lib/SCSI.c    ****   arising out of or in connection with the use or performance of
  28:Lib/SCSI.c    ****   this software.
  29:Lib/SCSI.c    **** */
  30:Lib/SCSI.c    **** 
  31:Lib/SCSI.c    **** /** \file
  32:Lib/SCSI.c    ****  *
  33:Lib/SCSI.c    ****  *  SCSI command processing routines, for SCSI commands issued by the host. Mass Storage
  34:Lib/SCSI.c    ****  *  devices use a thin "Bulk-Only Transport" protocol for issuing commands and status information,
  35:Lib/SCSI.c    ****  *  which wrap around standard SCSI device commands for controlling the actual storage medium.
  36:Lib/SCSI.c    ****  */
  37:Lib/SCSI.c    **** 
  38:Lib/SCSI.c    **** #define  INCLUDE_FROM_SCSI_C
  39:Lib/SCSI.c    **** #include "SCSI.h"
  40:Lib/SCSI.c    **** 
  41:Lib/SCSI.c    **** /** Structure to hold the SCSI response data to a SCSI INQUIRY command. This gives information abou
  42:Lib/SCSI.c    ****  *  features and capabilities.
  43:Lib/SCSI.c    ****  */
  44:Lib/SCSI.c    **** static const SCSI_Inquiry_Response_t InquiryData =
  45:Lib/SCSI.c    **** 	{
  46:Lib/SCSI.c    **** 		.DeviceType          = DEVICE_TYPE_BLOCK,
  47:Lib/SCSI.c    **** 		.PeripheralQualifier = 0,
  48:Lib/SCSI.c    **** 
  49:Lib/SCSI.c    **** 		.Removable           = true,
  50:Lib/SCSI.c    **** 
  51:Lib/SCSI.c    **** 		.Version             = 0,
  52:Lib/SCSI.c    **** 
  53:Lib/SCSI.c    **** 		.ResponseDataFormat  = 2,
  54:Lib/SCSI.c    **** 		.NormACA             = false,
  55:Lib/SCSI.c    **** 		.TrmTsk              = false,
  56:Lib/SCSI.c    **** 		.AERC                = false,
  57:Lib/SCSI.c    **** 
  58:Lib/SCSI.c    **** 		.AdditionalLength    = 0x1F,
  59:Lib/SCSI.c    **** 
  60:Lib/SCSI.c    **** 		.SoftReset           = false,
  61:Lib/SCSI.c    **** 		.CmdQue              = false,
  62:Lib/SCSI.c    **** 		.Linked              = false,
  63:Lib/SCSI.c    **** 		.Sync                = false,
  64:Lib/SCSI.c    **** 		.WideBus16Bit        = false,
  65:Lib/SCSI.c    **** 		.WideBus32Bit        = false,
  66:Lib/SCSI.c    **** 		.RelAddr             = false,
  67:Lib/SCSI.c    **** 
  68:Lib/SCSI.c    **** 		.VendorID            = "LUFA",
  69:Lib/SCSI.c    **** 		.ProductID           = "Dataflash Disk",
  70:Lib/SCSI.c    **** 		.RevisionID          = {'0','.','0','0'},
  71:Lib/SCSI.c    **** 	};
  72:Lib/SCSI.c    **** 
  73:Lib/SCSI.c    **** /** Structure to hold the sense data for the last issued SCSI command, which is returned to the hos
  74:Lib/SCSI.c    ****  *  command is issued. This gives information on exactly why the last command failed to complete.
  75:Lib/SCSI.c    ****  */
  76:Lib/SCSI.c    **** static SCSI_Request_Sense_Response_t SenseData =
  77:Lib/SCSI.c    **** 	{
  78:Lib/SCSI.c    **** 		.ResponseCode        = 0x70,
  79:Lib/SCSI.c    **** 		.AdditionalLength    = 0x0A,
  80:Lib/SCSI.c    **** 	};
  81:Lib/SCSI.c    **** 
  82:Lib/SCSI.c    **** 
  83:Lib/SCSI.c    **** /** Main routine to process the SCSI command located in the Command Block Wrapper read from the hos
  84:Lib/SCSI.c    ****  *  to the appropriate SCSI command handling routine if the issued command is supported by the devi
  85:Lib/SCSI.c    ****  *  a command failure due to a ILLEGAL REQUEST.
  86:Lib/SCSI.c    ****  *
  87:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise
  88:Lib/SCSI.c    ****  */
  89:Lib/SCSI.c    **** bool SCSI_DecodeSCSICommand(void)
  90:Lib/SCSI.c    **** {
  91:Lib/SCSI.c    **** 	bool CommandSuccess = false;
  92:Lib/SCSI.c    **** 
  93:Lib/SCSI.c    **** 	/* Run the appropriate SCSI command hander function based on the passed command */
  94:Lib/SCSI.c    **** 	switch (CommandBlock.SCSICommandData[0])
  95:Lib/SCSI.c    **** 	{
  96:Lib/SCSI.c    **** 		case SCSI_CMD_INQUIRY:
  97:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_Inquiry();
  98:Lib/SCSI.c    **** 			break;
  99:Lib/SCSI.c    **** 		case SCSI_CMD_REQUEST_SENSE:
 100:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_Request_Sense();
 101:Lib/SCSI.c    **** 			break;
 102:Lib/SCSI.c    **** 		case SCSI_CMD_READ_CAPACITY_10:
 103:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_Read_Capacity_10();
 104:Lib/SCSI.c    **** 			break;
 105:Lib/SCSI.c    **** 		case SCSI_CMD_SEND_DIAGNOSTIC:
 106:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_Send_Diagnostic();
 107:Lib/SCSI.c    **** 			break;
 108:Lib/SCSI.c    **** 		case SCSI_CMD_WRITE_10:
 109:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
 110:Lib/SCSI.c    **** 			break;
 111:Lib/SCSI.c    **** 		case SCSI_CMD_READ_10:
 112:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
 113:Lib/SCSI.c    **** 			break;
 114:Lib/SCSI.c    **** 		case SCSI_CMD_MODE_SENSE_6:
 115:Lib/SCSI.c    **** 			CommandSuccess = SCSI_Command_ModeSense_6();
 116:Lib/SCSI.c    **** 			break;
 117:Lib/SCSI.c    **** 		case SCSI_CMD_TEST_UNIT_READY:
 118:Lib/SCSI.c    **** 		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
 119:Lib/SCSI.c    **** 		case SCSI_CMD_VERIFY_10:
 120:Lib/SCSI.c    **** 			/* These commands should just succeed, no handling required */
 121:Lib/SCSI.c    **** 			CommandSuccess = true;
 122:Lib/SCSI.c    **** 			CommandBlock.DataTransferLength = 0;
 123:Lib/SCSI.c    **** 			break;
 124:Lib/SCSI.c    **** 		default:
 125:Lib/SCSI.c    **** 			/* Update the SENSE key to reflect the invalid command */
 126:Lib/SCSI.c    **** 			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
 127:Lib/SCSI.c    **** 		                   SCSI_ASENSE_INVALID_COMMAND,
 128:Lib/SCSI.c    **** 		                   SCSI_ASENSEQ_NO_QUALIFIER);
 129:Lib/SCSI.c    **** 			break;
 130:Lib/SCSI.c    **** 	}
 131:Lib/SCSI.c    **** 
 132:Lib/SCSI.c    **** 	/* Check if command was successfully processed */
 133:Lib/SCSI.c    **** 	if (CommandSuccess)
 134:Lib/SCSI.c    **** 	{
 135:Lib/SCSI.c    **** 		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
 136:Lib/SCSI.c    **** 		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
 137:Lib/SCSI.c    **** 		               SCSI_ASENSEQ_NO_QUALIFIER);
 138:Lib/SCSI.c    **** 
 139:Lib/SCSI.c    **** 		return true;
 140:Lib/SCSI.c    **** 	}
 141:Lib/SCSI.c    **** 
 142:Lib/SCSI.c    **** 	return false;
 143:Lib/SCSI.c    **** }
 144:Lib/SCSI.c    **** 
 145:Lib/SCSI.c    **** /** Command processing for an issued SCSI INQUIRY command. This command returns information about t
 146:Lib/SCSI.c    ****  *  and capabilities to the host.
 147:Lib/SCSI.c    ****  *
 148:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise.
 149:Lib/SCSI.c    ****  */
 150:Lib/SCSI.c    **** static bool SCSI_Command_Inquiry(void)
 151:Lib/SCSI.c    **** {
 152:Lib/SCSI.c    **** 	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
 153:Lib/SCSI.c    **** 	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
 154:Lib/SCSI.c    **** 
 155:Lib/SCSI.c    **** 	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
 156:Lib/SCSI.c    **** 	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
 157:Lib/SCSI.c    **** 	     CommandBlock.SCSICommandData[2])
 158:Lib/SCSI.c    **** 	{
 159:Lib/SCSI.c    **** 		/* Optional but unsupported bits set - update the SENSE key and fail the request */
 160:Lib/SCSI.c    **** 		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
 161:Lib/SCSI.c    **** 		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
 162:Lib/SCSI.c    **** 		               SCSI_ASENSEQ_NO_QUALIFIER);
 163:Lib/SCSI.c    **** 
 164:Lib/SCSI.c    **** 		return false;
 165:Lib/SCSI.c    **** 	}
 166:Lib/SCSI.c    **** 
 167:Lib/SCSI.c    **** 	/* Write the INQUIRY data to the endpoint */
 168:Lib/SCSI.c    **** 	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
 169:Lib/SCSI.c    **** 
 170:Lib/SCSI.c    **** 	/* Pad out remaining bytes with 0x00 */
 171:Lib/SCSI.c    **** 	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
 172:Lib/SCSI.c    **** 
 173:Lib/SCSI.c    **** 	/* Finalize the stream transfer to send the last packet */
 174:Lib/SCSI.c    **** 	Endpoint_ClearIN();
 175:Lib/SCSI.c    **** 
 176:Lib/SCSI.c    **** 	/* Succeed the command and update the bytes transferred counter */
 177:Lib/SCSI.c    **** 	CommandBlock.DataTransferLength -= BytesTransferred;
 178:Lib/SCSI.c    **** 
 179:Lib/SCSI.c    **** 	return true;
 180:Lib/SCSI.c    **** }
 181:Lib/SCSI.c    **** 
 182:Lib/SCSI.c    **** /** Command processing for an issued SCSI REQUEST SENSE command. This command returns information a
 183:Lib/SCSI.c    ****  *  including the error code and additional error information so that the host can determine why a 
 184:Lib/SCSI.c    ****  *
 185:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise.
 186:Lib/SCSI.c    ****  */
 187:Lib/SCSI.c    **** static bool SCSI_Command_Request_Sense(void)
 188:Lib/SCSI.c    **** {
 189:Lib/SCSI.c    **** 	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
 190:Lib/SCSI.c    **** 	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
 191:Lib/SCSI.c    **** 
 192:Lib/SCSI.c    **** 	/* Send the SENSE data - this indicates to the host the status of the last command */
 193:Lib/SCSI.c    **** 	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
 194:Lib/SCSI.c    **** 
 195:Lib/SCSI.c    **** 	/* Pad out remaining bytes with 0x00 */
 196:Lib/SCSI.c    **** 	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
 197:Lib/SCSI.c    **** 
 198:Lib/SCSI.c    **** 	/* Finalize the stream transfer to send the last packet */
 199:Lib/SCSI.c    **** 	Endpoint_ClearIN();
 200:Lib/SCSI.c    **** 
 201:Lib/SCSI.c    **** 	/* Succeed the command and update the bytes transferred counter */
 202:Lib/SCSI.c    **** 	CommandBlock.DataTransferLength -= BytesTransferred;
 203:Lib/SCSI.c    **** 
 204:Lib/SCSI.c    **** 	return true;
 205:Lib/SCSI.c    **** }
 206:Lib/SCSI.c    **** 
 207:Lib/SCSI.c    **** /** Command processing for an issued SCSI READ CAPACITY (10) command. This command returns informat
 208:Lib/SCSI.c    ****  *  on the selected Logical Unit (drive), as a number of OS-sized blocks.
 209:Lib/SCSI.c    ****  *
 210:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise.
 211:Lib/SCSI.c    ****  */
 212:Lib/SCSI.c    **** static bool SCSI_Command_Read_Capacity_10(void)
 213:Lib/SCSI.c    **** {
 214:Lib/SCSI.c    **** 	/* Send the total number of logical blocks in the current LUN */
 215:Lib/SCSI.c    **** 	Endpoint_Write_32_BE(LUN_MEDIA_BLOCKS - 1);
 216:Lib/SCSI.c    **** 
 217:Lib/SCSI.c    **** 	/* Send the logical block size of the device (must be 512 bytes) */
 218:Lib/SCSI.c    **** 	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);
 219:Lib/SCSI.c    **** 
 220:Lib/SCSI.c    **** 	/* Check if the current command is being aborted by the host */
 221:Lib/SCSI.c    **** 	if (IsMassStoreReset)
 222:Lib/SCSI.c    **** 	  return false;
 223:Lib/SCSI.c    **** 
 224:Lib/SCSI.c    **** 	/* Send the endpoint data packet to the host */
 225:Lib/SCSI.c    **** 	Endpoint_ClearIN();
 226:Lib/SCSI.c    **** 
 227:Lib/SCSI.c    **** 	/* Succeed the command and update the bytes transferred counter */
 228:Lib/SCSI.c    **** 	CommandBlock.DataTransferLength -= 8;
 229:Lib/SCSI.c    **** 
 230:Lib/SCSI.c    **** 	return true;
 231:Lib/SCSI.c    **** }
 232:Lib/SCSI.c    **** 
 233:Lib/SCSI.c    **** /** Command processing for an issued SCSI SEND DIAGNOSTIC command. This command performs a quick ch
 234:Lib/SCSI.c    ****  *  board, and indicates if they are present and functioning correctly. Only the Self-Test portion 
 235:Lib/SCSI.c    ****  *  supported.
 236:Lib/SCSI.c    ****  *
 237:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise.
 238:Lib/SCSI.c    ****  */
 239:Lib/SCSI.c    **** static bool SCSI_Command_Send_Diagnostic(void)
 240:Lib/SCSI.c    **** {
 241:Lib/SCSI.c    **** 	/* Check to see if the SELF TEST bit is not set */
 242:Lib/SCSI.c    **** 	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
 243:Lib/SCSI.c    **** 	{
 244:Lib/SCSI.c    **** 		/* Only self-test supported - update SENSE key and fail the command */
 245:Lib/SCSI.c    **** 		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
 246:Lib/SCSI.c    **** 		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
 247:Lib/SCSI.c    **** 		               SCSI_ASENSEQ_NO_QUALIFIER);
 248:Lib/SCSI.c    **** 
 249:Lib/SCSI.c    **** 		return false;
 250:Lib/SCSI.c    **** 	}
 251:Lib/SCSI.c    **** 
 252:Lib/SCSI.c    **** 	/* Check to see if all attached Dataflash ICs are functional */
 253:Lib/SCSI.c    **** 	if (!(DataflashManager_CheckDataflashOperation()))
 254:Lib/SCSI.c    **** 	{
 255:Lib/SCSI.c    **** 		/* Update SENSE key with a hardware error condition and return command fail */
 256:Lib/SCSI.c    **** 		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
 257:Lib/SCSI.c    **** 		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
 258:Lib/SCSI.c    **** 		               SCSI_ASENSEQ_NO_QUALIFIER);
 259:Lib/SCSI.c    **** 
 260:Lib/SCSI.c    **** 		return false;
 261:Lib/SCSI.c    **** 	}
 262:Lib/SCSI.c    **** 
 263:Lib/SCSI.c    **** 	/* Succeed the command and update the bytes transferred counter */
 264:Lib/SCSI.c    **** 	CommandBlock.DataTransferLength = 0;
 265:Lib/SCSI.c    **** 
 266:Lib/SCSI.c    **** 	return true;
 267:Lib/SCSI.c    **** }
 268:Lib/SCSI.c    **** 
 269:Lib/SCSI.c    **** /** Command processing for an issued SCSI READ (10) or WRITE (10) command. This command reads in th
 270:Lib/SCSI.c    ****  *  and total number of blocks to process, then calls the appropriate low-level Dataflash routine t
 271:Lib/SCSI.c    ****  *  reading and writing of the data.
 272:Lib/SCSI.c    ****  *
 273:Lib/SCSI.c    ****  *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (D
 274:Lib/SCSI.c    ****  *
 275:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise.
 276:Lib/SCSI.c    ****  */
 277:Lib/SCSI.c    **** static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
 278:Lib/SCSI.c    **** {
  16               		.loc 1 278 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 282F      		mov r18,r24
  32               	.LVL1:
  33               	.LBB28:
  34               	.LBB29:
  35               		.file 2 "../../../../LUFA/Common/Endianness.h"
   1:../../../../LUFA/Common/Endianness.h **** /*
   2:../../../../LUFA/Common/Endianness.h ****              LUFA Library
   3:../../../../LUFA/Common/Endianness.h ****      Copyright (C) Dean Camera, 2011.
   4:../../../../LUFA/Common/Endianness.h **** 
   5:../../../../LUFA/Common/Endianness.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Common/Endianness.h ****            www.lufa-lib.org
   7:../../../../LUFA/Common/Endianness.h **** */
   8:../../../../LUFA/Common/Endianness.h **** 
   9:../../../../LUFA/Common/Endianness.h **** /*
  10:../../../../LUFA/Common/Endianness.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Common/Endianness.h **** 
  12:../../../../LUFA/Common/Endianness.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../../LUFA/Common/Endianness.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Common/Endianness.h ****   without fee, provided that the above copyright notice appear in
  15:../../../../LUFA/Common/Endianness.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Common/Endianness.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../../LUFA/Common/Endianness.h ****   documentation, and that the name of the author not be used in
  18:../../../../LUFA/Common/Endianness.h ****   advertising or publicity pertaining to distribution of the
  19:../../../../LUFA/Common/Endianness.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Common/Endianness.h **** 
  21:../../../../LUFA/Common/Endianness.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Common/Endianness.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Common/Endianness.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Common/Endianness.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Common/Endianness.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Common/Endianness.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Common/Endianness.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Common/Endianness.h ****   this software.
  29:../../../../LUFA/Common/Endianness.h **** */
  30:../../../../LUFA/Common/Endianness.h **** 
  31:../../../../LUFA/Common/Endianness.h **** /** \file
  32:../../../../LUFA/Common/Endianness.h ****  *  \brief Endianness and Byte Ordering macros and functions.
  33:../../../../LUFA/Common/Endianness.h ****  *
  34:../../../../LUFA/Common/Endianness.h ****  *  \copydetails Group_Endianness
  35:../../../../LUFA/Common/Endianness.h ****  */
  36:../../../../LUFA/Common/Endianness.h **** 
  37:../../../../LUFA/Common/Endianness.h **** /** \ingroup Group_Endianness
  38:../../../../LUFA/Common/Endianness.h ****  *  \defgroup Group_ByteSwapping Byte Reordering
  39:../../../../LUFA/Common/Endianness.h ****  *  \brief Macros and functions for forced byte reordering.
  40:../../../../LUFA/Common/Endianness.h ****  */
  41:../../../../LUFA/Common/Endianness.h **** 
  42:../../../../LUFA/Common/Endianness.h **** /** \ingroup Group_Endianness
  43:../../../../LUFA/Common/Endianness.h ****  *  \defgroup Group_EndianConversion Endianness Conversion
  44:../../../../LUFA/Common/Endianness.h ****  *  \brief Macros and functions for automatic endianness conversion.
  45:../../../../LUFA/Common/Endianness.h ****  */
  46:../../../../LUFA/Common/Endianness.h **** 
  47:../../../../LUFA/Common/Endianness.h **** /** \ingroup Group_Common
  48:../../../../LUFA/Common/Endianness.h ****  *  \defgroup Group_Endianness Endianness and Byte Ordering
  49:../../../../LUFA/Common/Endianness.h ****  *  \brief Convenience macros and functions relating to byte (re-)ordering
  50:../../../../LUFA/Common/Endianness.h ****  *
  51:../../../../LUFA/Common/Endianness.h ****  *  Common library convenience macros and functions relating to byte (re-)ordering.
  52:../../../../LUFA/Common/Endianness.h ****  *
  53:../../../../LUFA/Common/Endianness.h ****  *  @{
  54:../../../../LUFA/Common/Endianness.h ****  */
  55:../../../../LUFA/Common/Endianness.h **** 
  56:../../../../LUFA/Common/Endianness.h **** #ifndef __LUFA_ENDIANNESS_H__
  57:../../../../LUFA/Common/Endianness.h **** #define __LUFA_ENDIANNESS_H__
  58:../../../../LUFA/Common/Endianness.h **** 
  59:../../../../LUFA/Common/Endianness.h **** 	/* Enable C linkage for C++ Compilers: */
  60:../../../../LUFA/Common/Endianness.h **** 		#if defined(__cplusplus)
  61:../../../../LUFA/Common/Endianness.h **** 			extern "C" {
  62:../../../../LUFA/Common/Endianness.h **** 		#endif
  63:../../../../LUFA/Common/Endianness.h **** 
  64:../../../../LUFA/Common/Endianness.h **** 	/* Preprocessor Checks: */
  65:../../../../LUFA/Common/Endianness.h **** 		#if !defined(__INCLUDE_FROM_COMMON_H)
  66:../../../../LUFA/Common/Endianness.h **** 			#error Do not include this file directly. Include LUFA/Common/Common.h instead to gain this func
  67:../../../../LUFA/Common/Endianness.h **** 		#endif
  68:../../../../LUFA/Common/Endianness.h **** 		
  69:../../../../LUFA/Common/Endianness.h **** 		#if !(defined(ARCH_BIG_ENDIAN) || defined(ARCH_LITTLE_ENDIAN))
  70:../../../../LUFA/Common/Endianness.h **** 			#error ARCH_BIG_ENDIAN or ARCH_LITTLE_ENDIAN not set for the specified architecture.
  71:../../../../LUFA/Common/Endianness.h **** 		#endif
  72:../../../../LUFA/Common/Endianness.h **** 
  73:../../../../LUFA/Common/Endianness.h **** 	/* Public Interface - May be used in end-application: */
  74:../../../../LUFA/Common/Endianness.h **** 		/* Macros: */
  75:../../../../LUFA/Common/Endianness.h **** 			/** Swaps the byte ordering of a 16-bit value at compile-time. Do not use this macro for swappin
  76:../../../../LUFA/Common/Endianness.h **** 			 *  of dynamic values computed at runtime, use \ref SwapEndian_16() instead. The result of this 
  77:../../../../LUFA/Common/Endianness.h **** 			 *  inside struct or other variable initializers outside of a function, something that is not po
  78:../../../../LUFA/Common/Endianness.h **** 			 *  inline function variant.
  79:../../../../LUFA/Common/Endianness.h **** 			 *
  80:../../../../LUFA/Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
  81:../../../../LUFA/Common/Endianness.h **** 			 *
  82:../../../../LUFA/Common/Endianness.h **** 			 *  \param[in] x  16-bit value whose byte ordering is to be swapped.
  83:../../../../LUFA/Common/Endianness.h **** 			 *
  84:../../../../LUFA/Common/Endianness.h **** 			 *  \return Input value with the byte ordering reversed.
  85:../../../../LUFA/Common/Endianness.h **** 			 */
  86:../../../../LUFA/Common/Endianness.h **** 			#define SWAPENDIAN_16(x)            (uint16_t)((((x) & 0xFF00) >> 8) | (((x) & 0x00FF) << 8))
  87:../../../../LUFA/Common/Endianness.h **** 
  88:../../../../LUFA/Common/Endianness.h **** 			/** Swaps the byte ordering of a 32-bit value at compile-time. Do not use this macro for swappin
  89:../../../../LUFA/Common/Endianness.h **** 			 *  of dynamic values computed at runtime- use \ref SwapEndian_32() instead. The result of this 
  90:../../../../LUFA/Common/Endianness.h **** 			 *  inside struct or other variable initializers outside of a function, something that is not po
  91:../../../../LUFA/Common/Endianness.h **** 			 *  inline function variant.
  92:../../../../LUFA/Common/Endianness.h **** 			 *
  93:../../../../LUFA/Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
  94:../../../../LUFA/Common/Endianness.h **** 			 *
  95:../../../../LUFA/Common/Endianness.h **** 			 *  \param[in] x  32-bit value whose byte ordering is to be swapped.
  96:../../../../LUFA/Common/Endianness.h **** 			 *
  97:../../../../LUFA/Common/Endianness.h **** 			 *  \return Input value with the byte ordering reversed.
  98:../../../../LUFA/Common/Endianness.h **** 			 */
  99:../../../../LUFA/Common/Endianness.h **** 			#define SWAPENDIAN_32(x)            (uint32_t)((((x) & 0xFF000000UL) >> 24UL) | (((x) & 0x00FF00
 100:../../../../LUFA/Common/Endianness.h **** 			                                               (((x) & 0x0000FF00UL) << 8UL)  | (((x) & 0x000000
 101:../../../../LUFA/Common/Endianness.h **** 
 102:../../../../LUFA/Common/Endianness.h **** 			#if defined(ARCH_BIG_ENDIAN) && !defined(le16_to_cpu)
 103:../../../../LUFA/Common/Endianness.h **** 				#define le16_to_cpu(x)           SwapEndian_16(x)
 104:../../../../LUFA/Common/Endianness.h **** 				#define le32_to_cpu(x)           SwapEndian_32(x)
 105:../../../../LUFA/Common/Endianness.h **** 				#define be16_to_cpu(x)           (x)
 106:../../../../LUFA/Common/Endianness.h **** 				#define be32_to_cpu(x)           (x)
 107:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_le16(x)           SwapEndian_16(x)
 108:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_le32(x)           SwapEndian_32(x)
 109:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_be16(x)           (x)
 110:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_be32(x)           (x)
 111:../../../../LUFA/Common/Endianness.h **** 				#define LE16_TO_CPU(x)           SWAPENDIAN_16(x)
 112:../../../../LUFA/Common/Endianness.h **** 				#define LE32_TO_CPU(x)           SWAPENDIAN_32(x)
 113:../../../../LUFA/Common/Endianness.h **** 				#define BE16_TO_CPU(x)           (x)
 114:../../../../LUFA/Common/Endianness.h **** 				#define BE32_TO_CPU(x)           (x)
 115:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_LE16(x)           SWAPENDIAN_16(x)
 116:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_LE32(x)           SWAPENDIAN_32(x)
 117:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_BE16(x)           (x)
 118:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_BE32(x)           (x)			
 119:../../../../LUFA/Common/Endianness.h **** 			#elif !defined(le16_to_cpu)
 120:../../../../LUFA/Common/Endianness.h **** 				/** \name Run-time endianness conversion */
 121:../../../../LUFA/Common/Endianness.h **** 				//@{
 122:../../../../LUFA/Common/Endianness.h **** 			
 123:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 16-bit piece of data and the
 124:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 125:../../../../LUFA/Common/Endianness.h **** 				 *
 126:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 127:../../../../LUFA/Common/Endianness.h **** 				 *
 128:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 129:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref LE16_TO_CPU instead.
 130:../../../../LUFA/Common/Endianness.h **** 				 *
 131:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 132:../../../../LUFA/Common/Endianness.h **** 				 *
 133:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 134:../../../../LUFA/Common/Endianness.h **** 				 *
 135:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 136:../../../../LUFA/Common/Endianness.h **** 				 */
 137:../../../../LUFA/Common/Endianness.h **** 				#define le16_to_cpu(x)           (x)
 138:../../../../LUFA/Common/Endianness.h **** 
 139:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 32-bit piece of data and the
 140:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 141:../../../../LUFA/Common/Endianness.h **** 				 *
 142:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 143:../../../../LUFA/Common/Endianness.h **** 				 *
 144:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 145:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref LE32_TO_CPU instead.
 146:../../../../LUFA/Common/Endianness.h **** 				 *
 147:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 148:../../../../LUFA/Common/Endianness.h **** 				 *
 149:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 150:../../../../LUFA/Common/Endianness.h **** 				 *
 151:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 152:../../../../LUFA/Common/Endianness.h **** 				 */
 153:../../../../LUFA/Common/Endianness.h **** 				#define le32_to_cpu(x)           (x)
 154:../../../../LUFA/Common/Endianness.h **** 
 155:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 16-bit piece of data and the
 156:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 157:../../../../LUFA/Common/Endianness.h **** 				 *
 158:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 159:../../../../LUFA/Common/Endianness.h **** 				 *
 160:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 161:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref BE16_TO_CPU instead.
 162:../../../../LUFA/Common/Endianness.h **** 				 *
 163:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 164:../../../../LUFA/Common/Endianness.h **** 				 *
 165:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 166:../../../../LUFA/Common/Endianness.h **** 				 *
 167:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 168:../../../../LUFA/Common/Endianness.h **** 				 */
 169:../../../../LUFA/Common/Endianness.h **** 				#define be16_to_cpu(x)           SwapEndian_16(x)
 170:../../../../LUFA/Common/Endianness.h **** 
 171:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 32-bit piece of data and the
 172:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 173:../../../../LUFA/Common/Endianness.h **** 				 *
 174:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 175:../../../../LUFA/Common/Endianness.h **** 				 *
 176:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 177:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref BE32_TO_CPU instead.
 178:../../../../LUFA/Common/Endianness.h **** 				 *
 179:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 180:../../../../LUFA/Common/Endianness.h **** 				 *
 181:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 182:../../../../LUFA/Common/Endianness.h **** 				 *
 183:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 184:../../../../LUFA/Common/Endianness.h **** 				 */
 185:../../../../LUFA/Common/Endianness.h **** 				#define be32_to_cpu(x)           SwapEndian_32(x)
 186:../../../../LUFA/Common/Endianness.h **** 
 187:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 188:../../../../LUFA/Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 189:../../../../LUFA/Common/Endianness.h **** 				 *
 190:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 191:../../../../LUFA/Common/Endianness.h **** 				 *
 192:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 193:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_LE16 instead.
 194:../../../../LUFA/Common/Endianness.h **** 				 *
 195:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 196:../../../../LUFA/Common/Endianness.h **** 				 *
 197:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 198:../../../../LUFA/Common/Endianness.h **** 				 *
 199:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 200:../../../../LUFA/Common/Endianness.h **** 				 */
 201:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_le16(x)           (x)
 202:../../../../LUFA/Common/Endianness.h **** 
 203:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 204:../../../../LUFA/Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 205:../../../../LUFA/Common/Endianness.h **** 				 *
 206:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 207:../../../../LUFA/Common/Endianness.h **** 				 *
 208:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 209:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_LE32 instead.
 210:../../../../LUFA/Common/Endianness.h **** 				 *
 211:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 212:../../../../LUFA/Common/Endianness.h **** 				 *
 213:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 214:../../../../LUFA/Common/Endianness.h **** 				 *
 215:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 216:../../../../LUFA/Common/Endianness.h **** 				 */
 217:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_le32(x)           (x)
 218:../../../../LUFA/Common/Endianness.h **** 
 219:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 220:../../../../LUFA/Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 221:../../../../LUFA/Common/Endianness.h **** 				 *
 222:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 223:../../../../LUFA/Common/Endianness.h **** 				 *
 224:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 225:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_BE16 instead.
 226:../../../../LUFA/Common/Endianness.h **** 				 *
 227:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 228:../../../../LUFA/Common/Endianness.h **** 				 *
 229:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 230:../../../../LUFA/Common/Endianness.h **** 				 *
 231:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 232:../../../../LUFA/Common/Endianness.h **** 				 */
 233:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_be16(x)           SwapEndian_16(x)
 234:../../../../LUFA/Common/Endianness.h **** 
 235:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 236:../../../../LUFA/Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 237:../../../../LUFA/Common/Endianness.h **** 				 *
 238:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 239:../../../../LUFA/Common/Endianness.h **** 				 *
 240:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 241:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_BE32 instead.
 242:../../../../LUFA/Common/Endianness.h **** 				 *
 243:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 244:../../../../LUFA/Common/Endianness.h **** 				 *
 245:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 246:../../../../LUFA/Common/Endianness.h **** 				 *
 247:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 248:../../../../LUFA/Common/Endianness.h **** 				 */
 249:../../../../LUFA/Common/Endianness.h **** 				#define cpu_to_be32(x)           SwapEndian_32(x)
 250:../../../../LUFA/Common/Endianness.h **** 
 251:../../../../LUFA/Common/Endianness.h **** 				//@}
 252:../../../../LUFA/Common/Endianness.h **** 
 253:../../../../LUFA/Common/Endianness.h **** 				/** \name Compile-time endianness conversion */
 254:../../../../LUFA/Common/Endianness.h **** 				//@{
 255:../../../../LUFA/Common/Endianness.h **** 
 256:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 16-bit piece of data and the
 257:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 258:../../../../LUFA/Common/Endianness.h **** 				 *
 259:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 260:../../../../LUFA/Common/Endianness.h **** 				 *
 261:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run time endianness
 262:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref le16_to_cpu instead.
 263:../../../../LUFA/Common/Endianness.h **** 				 *
 264:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 265:../../../../LUFA/Common/Endianness.h **** 				 *
 266:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 267:../../../../LUFA/Common/Endianness.h **** 				 *
 268:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 269:../../../../LUFA/Common/Endianness.h **** 				 */
 270:../../../../LUFA/Common/Endianness.h **** 				#define LE16_TO_CPU(x)           (x)
 271:../../../../LUFA/Common/Endianness.h **** 
 272:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 32-bit piece of data and the
 273:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 274:../../../../LUFA/Common/Endianness.h **** 				 *
 275:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 276:../../../../LUFA/Common/Endianness.h **** 				 *
 277:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run time endianness
 278:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref le32_to_cpu instead.
 279:../../../../LUFA/Common/Endianness.h **** 				 *
 280:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 281:../../../../LUFA/Common/Endianness.h **** 				 *
 282:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 283:../../../../LUFA/Common/Endianness.h **** 				 *
 284:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 285:../../../../LUFA/Common/Endianness.h **** 				 */
 286:../../../../LUFA/Common/Endianness.h **** 				#define LE32_TO_CPU(x)           (x)
 287:../../../../LUFA/Common/Endianness.h **** 
 288:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 16-bit piece of data and the
 289:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 290:../../../../LUFA/Common/Endianness.h **** 				 *
 291:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 292:../../../../LUFA/Common/Endianness.h **** 				 *
 293:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 294:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref be16_to_cpu instead.
 295:../../../../LUFA/Common/Endianness.h **** 				 *
 296:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 297:../../../../LUFA/Common/Endianness.h **** 				 *
 298:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 299:../../../../LUFA/Common/Endianness.h **** 				 *
 300:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 301:../../../../LUFA/Common/Endianness.h **** 				 */
 302:../../../../LUFA/Common/Endianness.h **** 				#define BE16_TO_CPU(x)           SWAPENDIAN_16(x)
 303:../../../../LUFA/Common/Endianness.h **** 
 304:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 32-bit piece of data and the
 305:../../../../LUFA/Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 306:../../../../LUFA/Common/Endianness.h **** 				 *
 307:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 308:../../../../LUFA/Common/Endianness.h **** 				 *
 309:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 310:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref be32_to_cpu instead.
 311:../../../../LUFA/Common/Endianness.h **** 				 *
 312:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 313:../../../../LUFA/Common/Endianness.h **** 				 *
 314:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 315:../../../../LUFA/Common/Endianness.h **** 				 *
 316:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 317:../../../../LUFA/Common/Endianness.h **** 				 */
 318:../../../../LUFA/Common/Endianness.h **** 				#define BE32_TO_CPU(x)           SWAPENDIAN_32(x)
 319:../../../../LUFA/Common/Endianness.h **** 
 320:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 321:../../../../LUFA/Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 322:../../../../LUFA/Common/Endianness.h **** 				 *
 323:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 324:../../../../LUFA/Common/Endianness.h **** 				 *
 325:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 326:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_le16 instead.
 327:../../../../LUFA/Common/Endianness.h **** 				 *
 328:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 329:../../../../LUFA/Common/Endianness.h **** 				 *
 330:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 331:../../../../LUFA/Common/Endianness.h **** 				 *
 332:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 333:../../../../LUFA/Common/Endianness.h **** 				 */
 334:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_LE16(x)           (x)
 335:../../../../LUFA/Common/Endianness.h **** 
 336:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 337:../../../../LUFA/Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 338:../../../../LUFA/Common/Endianness.h **** 				 *
 339:../../../../LUFA/Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 340:../../../../LUFA/Common/Endianness.h **** 				 *
 341:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 342:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_le32 instead.
 343:../../../../LUFA/Common/Endianness.h **** 				 *
 344:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 345:../../../../LUFA/Common/Endianness.h **** 				 *
 346:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 347:../../../../LUFA/Common/Endianness.h **** 				 *
 348:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 349:../../../../LUFA/Common/Endianness.h **** 				 */
 350:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_LE32(x)           (x)
 351:../../../../LUFA/Common/Endianness.h **** 
 352:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 353:../../../../LUFA/Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 354:../../../../LUFA/Common/Endianness.h **** 				 *
 355:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 356:../../../../LUFA/Common/Endianness.h **** 				 *
 357:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 358:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_be16 instead.
 359:../../../../LUFA/Common/Endianness.h **** 				 *
 360:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 361:../../../../LUFA/Common/Endianness.h **** 				 *
 362:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 363:../../../../LUFA/Common/Endianness.h **** 				 *
 364:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 365:../../../../LUFA/Common/Endianness.h **** 				 */
 366:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_BE16(x)           SWAPENDIAN_16(x)
 367:../../../../LUFA/Common/Endianness.h **** 
 368:../../../../LUFA/Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 369:../../../../LUFA/Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 370:../../../../LUFA/Common/Endianness.h **** 				 *
 371:../../../../LUFA/Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 372:../../../../LUFA/Common/Endianness.h **** 				 *
 373:../../../../LUFA/Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 374:../../../../LUFA/Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_be32 instead.
 375:../../../../LUFA/Common/Endianness.h **** 				 *
 376:../../../../LUFA/Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 377:../../../../LUFA/Common/Endianness.h **** 				 *
 378:../../../../LUFA/Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 379:../../../../LUFA/Common/Endianness.h **** 				 *
 380:../../../../LUFA/Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 381:../../../../LUFA/Common/Endianness.h **** 				 */
 382:../../../../LUFA/Common/Endianness.h **** 				#define CPU_TO_BE32(x)           SWAPENDIAN_32(x)
 383:../../../../LUFA/Common/Endianness.h **** 
 384:../../../../LUFA/Common/Endianness.h **** 				//! @}
 385:../../../../LUFA/Common/Endianness.h **** 			#endif
 386:../../../../LUFA/Common/Endianness.h **** 
 387:../../../../LUFA/Common/Endianness.h **** 		/* Inline Functions: */
 388:../../../../LUFA/Common/Endianness.h **** 			/** Function to reverse the byte ordering of the individual bytes in a 16 bit value.
 389:../../../../LUFA/Common/Endianness.h **** 			 *
 390:../../../../LUFA/Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
 391:../../../../LUFA/Common/Endianness.h **** 			 *
 392:../../../../LUFA/Common/Endianness.h **** 			 *  \param[in] Word  Word of data whose bytes are to be swapped.
 393:../../../../LUFA/Common/Endianness.h **** 			 *
 394:../../../../LUFA/Common/Endianness.h **** 			 *  \return Input data with the individual bytes reversed.
 395:../../../../LUFA/Common/Endianness.h **** 			 */
 396:../../../../LUFA/Common/Endianness.h **** 			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 397:../../../../LUFA/Common/Endianness.h **** 			static inline uint16_t SwapEndian_16(const uint16_t Word)
 398:../../../../LUFA/Common/Endianness.h **** 			{
 399:../../../../LUFA/Common/Endianness.h **** 				if (GCC_IS_COMPILE_CONST(Word))
 400:../../../../LUFA/Common/Endianness.h **** 				  return SWAPENDIAN_16(Word);
 401:../../../../LUFA/Common/Endianness.h **** 			
 402:../../../../LUFA/Common/Endianness.h **** 				uint8_t Temp;
 403:../../../../LUFA/Common/Endianness.h **** 
 404:../../../../LUFA/Common/Endianness.h **** 				union
 405:../../../../LUFA/Common/Endianness.h **** 				{
 406:../../../../LUFA/Common/Endianness.h **** 					uint16_t Word;
 407:../../../../LUFA/Common/Endianness.h **** 					uint8_t  Bytes[2];
 408:../../../../LUFA/Common/Endianness.h **** 				} Data;
 409:../../../../LUFA/Common/Endianness.h **** 
 410:../../../../LUFA/Common/Endianness.h **** 				Data.Word = Word;
 411:../../../../LUFA/Common/Endianness.h **** 
 412:../../../../LUFA/Common/Endianness.h **** 				Temp = Data.Bytes[0];
 413:../../../../LUFA/Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[1];
 414:../../../../LUFA/Common/Endianness.h **** 				Data.Bytes[1] = Temp;
 415:../../../../LUFA/Common/Endianness.h **** 
 416:../../../../LUFA/Common/Endianness.h **** 				return Data.Word;
 417:../../../../LUFA/Common/Endianness.h **** 			}
 418:../../../../LUFA/Common/Endianness.h **** 
 419:../../../../LUFA/Common/Endianness.h **** 			/** Function to reverse the byte ordering of the individual bytes in a 32 bit value.
 420:../../../../LUFA/Common/Endianness.h **** 			 *
 421:../../../../LUFA/Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
 422:../../../../LUFA/Common/Endianness.h **** 			 *
 423:../../../../LUFA/Common/Endianness.h **** 			 *  \param[in] DWord  Double word of data whose bytes are to be swapped.
 424:../../../../LUFA/Common/Endianness.h **** 			 *
 425:../../../../LUFA/Common/Endianness.h **** 			 *  \return Input data with the individual bytes reversed.
 426:../../../../LUFA/Common/Endianness.h **** 			 */
 427:../../../../LUFA/Common/Endianness.h **** 			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 428:../../../../LUFA/Common/Endianness.h **** 			static inline uint32_t SwapEndian_32(const uint32_t DWord)
 429:../../../../LUFA/Common/Endianness.h **** 			{
 430:../../../../LUFA/Common/Endianness.h **** 				if (GCC_IS_COMPILE_CONST(DWord))
 431:../../../../LUFA/Common/Endianness.h **** 				  return SWAPENDIAN_32(DWord);
 432:../../../../LUFA/Common/Endianness.h **** 
 433:../../../../LUFA/Common/Endianness.h **** 				uint8_t Temp;
 434:../../../../LUFA/Common/Endianness.h **** 
 435:../../../../LUFA/Common/Endianness.h **** 				union
 436:../../../../LUFA/Common/Endianness.h **** 				{
 437:../../../../LUFA/Common/Endianness.h **** 					uint32_t DWord;
 438:../../../../LUFA/Common/Endianness.h **** 					uint8_t  Bytes[4];
 439:../../../../LUFA/Common/Endianness.h **** 				} Data;
 440:../../../../LUFA/Common/Endianness.h **** 
 441:../../../../LUFA/Common/Endianness.h **** 				Data.DWord = DWord;
 442:../../../../LUFA/Common/Endianness.h **** 
 443:../../../../LUFA/Common/Endianness.h **** 				Temp = Data.Bytes[0];
 444:../../../../LUFA/Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[3];
 445:../../../../LUFA/Common/Endianness.h **** 				Data.Bytes[3] = Temp;
 446:../../../../LUFA/Common/Endianness.h **** 
 447:../../../../LUFA/Common/Endianness.h **** 				Temp = Data.Bytes[1];
 448:../../../../LUFA/Common/Endianness.h **** 				Data.Bytes[1] = Data.Bytes[2];
 449:../../../../LUFA/Common/Endianness.h **** 				Data.Bytes[2] = Temp;
 450:../../../../LUFA/Common/Endianness.h **** 
 451:../../../../LUFA/Common/Endianness.h **** 				return Data.DWord;
  36               		.loc 2 451 0
  37 0006 6091 0000 		lds r22,CommandBlock+20
  38 000a 7091 0000 		lds r23,CommandBlock+19
  39 000e 8091 0000 		lds r24,CommandBlock+18
  40               	.LVL2:
  41 0012 9091 0000 		lds r25,CommandBlock+17
  42               	.LVL3:
  43               	.LBE29:
  44               	.LBE28:
  45               	.LBB30:
  46               	.LBB31:
  47               	.LBB32:
  48               	.LBB33:
 416:../../../../LUFA/Common/Endianness.h **** 			}
  49               		.loc 2 416 0
  50 0016 3091 0000 		lds r19,CommandBlock+23
  51 001a C32F      		mov r28,r19
  52 001c 3091 0000 		lds r19,CommandBlock+22
  53 0020 D32F      		mov r29,r19
  54               	.LVL4:
  55               	.LBE33:
  56               	.LBE32:
  57               	.LBE31:
  58               	.LBE30:
 279:Lib/SCSI.c    **** 	uint32_t BlockAddress;
 280:Lib/SCSI.c    **** 	uint16_t TotalBlocks;
 281:Lib/SCSI.c    **** 
 282:Lib/SCSI.c    **** 	/* Check if the disk is write protected or not */
 283:Lib/SCSI.c    **** 	if ((IsDataRead == DATA_WRITE) && DISK_READ_ONLY)
 284:Lib/SCSI.c    **** 	{
 285:Lib/SCSI.c    **** 		/* Block address is invalid, update SENSE key and return command fail */
 286:Lib/SCSI.c    **** 		SCSI_SET_SENSE(SCSI_SENSE_KEY_DATA_PROTECT,
 287:Lib/SCSI.c    **** 		               SCSI_ASENSE_WRITE_PROTECTED,
 288:Lib/SCSI.c    **** 		               SCSI_ASENSEQ_NO_QUALIFIER);
 289:Lib/SCSI.c    **** 
 290:Lib/SCSI.c    **** 		return false;		
 291:Lib/SCSI.c    **** 	}
 292:Lib/SCSI.c    **** 
 293:Lib/SCSI.c    **** 	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
 294:Lib/SCSI.c    **** 	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);
 295:Lib/SCSI.c    **** 	
 296:Lib/SCSI.c    **** 	/* Check if the block address is outside the maximum allowable value for the LUN */
 297:Lib/SCSI.c    **** 	if (BlockAddress >= LUN_MEDIA_BLOCKS)
  59               		.loc 1 297 0
  60 0022 6115      		cp r22,__zero_reg__
  61 0024 30E8      		ldi r19,-128
  62 0026 7307      		cpc r23,r19
  63 0028 8105      		cpc r24,__zero_reg__
  64 002a 9105      		cpc r25,__zero_reg__
  65 002c 00F0      		brlo .L2
 298:Lib/SCSI.c    **** 	{
 299:Lib/SCSI.c    **** 		/* Block address is invalid, update SENSE key and return command fail */
 300:Lib/SCSI.c    **** 		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
  66               		.loc 1 300 0
  67 002e 8091 0000 		lds r24,SenseData+2
  68 0032 807F      		andi r24,lo8(-16)
  69 0034 8560      		ori r24,lo8(5)
  70 0036 8093 0000 		sts SenseData+2,r24
  71 003a 81E2      		ldi r24,lo8(33)
  72 003c 8093 0000 		sts SenseData+12,r24
  73 0040 1092 0000 		sts SenseData+13,__zero_reg__
 301:Lib/SCSI.c    **** 		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
 302:Lib/SCSI.c    **** 		               SCSI_ASENSEQ_NO_QUALIFIER);
 303:Lib/SCSI.c    **** 
 304:Lib/SCSI.c    **** 		return false;
  74               		.loc 1 304 0
  75 0044 80E0      		ldi r24,0
  76 0046 00C0      		rjmp .L3
  77               	.L2:
 305:Lib/SCSI.c    **** 	}
 306:Lib/SCSI.c    **** 
 307:Lib/SCSI.c    **** 	#if (TOTAL_LUNS > 1)
 308:Lib/SCSI.c    **** 	/* Adjust the given block address to the real media address based on the selected LUN */
 309:Lib/SCSI.c    **** 	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
 310:Lib/SCSI.c    **** 	#endif
 311:Lib/SCSI.c    **** 
 312:Lib/SCSI.c    **** 	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
 313:Lib/SCSI.c    **** 	if (IsDataRead == DATA_READ)
 314:Lib/SCSI.c    **** 	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
  78               		.loc 1 314 0
  79 0048 AE01      		movw r20,r28
 313:Lib/SCSI.c    **** 	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
  80               		.loc 1 313 0
  81 004a 2223      		tst r18
  82 004c 01F0      		breq .L4
  83               		.loc 1 314 0
  84 004e 0E94 0000 		call DataflashManager_ReadBlocks
  85               	.LVL5:
  86 0052 00C0      		rjmp .L5
  87               	.LVL6:
  88               	.L4:
 315:Lib/SCSI.c    **** 	else
 316:Lib/SCSI.c    **** 	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
  89               		.loc 1 316 0
  90 0054 0E94 0000 		call DataflashManager_WriteBlocks
  91               	.LVL7:
  92               	.L5:
 317:Lib/SCSI.c    **** 
 318:Lib/SCSI.c    **** 	/* Update the bytes transferred counter and succeed the command */
 319:Lib/SCSI.c    **** 	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
  93               		.loc 1 319 0
  94 0058 AE01      		movw r20,r28
  95 005a 60E0      		ldi r22,0
  96 005c 70E0      		ldi r23,0
  97 005e 89E0      		ldi r24,9
  98               		1:
  99 0060 440F      		lsl r20
 100 0062 551F      		rol r21
 101 0064 661F      		rol r22
 102 0066 771F      		rol r23
 103 0068 8A95      		dec r24
 104 006a 01F4      		brne 1b
 105 006c 8091 0000 		lds r24,CommandBlock+8
 106 0070 9091 0000 		lds r25,CommandBlock+8+1
 107 0074 A091 0000 		lds r26,CommandBlock+8+2
 108 0078 B091 0000 		lds r27,CommandBlock+8+3
 109 007c 841B      		sub r24,r20
 110 007e 950B      		sbc r25,r21
 111 0080 A60B      		sbc r26,r22
 112 0082 B70B      		sbc r27,r23
 113 0084 8093 0000 		sts CommandBlock+8,r24
 114 0088 9093 0000 		sts CommandBlock+8+1,r25
 115 008c A093 0000 		sts CommandBlock+8+2,r26
 116 0090 B093 0000 		sts CommandBlock+8+3,r27
 320:Lib/SCSI.c    **** 
 321:Lib/SCSI.c    **** 	return true;
 117               		.loc 1 321 0
 118 0094 81E0      		ldi r24,lo8(1)
 119               	.L3:
 120               	/* epilogue start */
 322:Lib/SCSI.c    **** }
 121               		.loc 1 322 0
 122 0096 DF91      		pop r29
 123 0098 CF91      		pop r28
 124 009a 0895      		ret
 125               		.cfi_endproc
 126               	.LFE131:
 128               		.section	.text.SCSI_DecodeSCSICommand,"ax",@progbits
 129               	.global	SCSI_DecodeSCSICommand
 131               	SCSI_DecodeSCSICommand:
 132               	.LFB126:
  90:Lib/SCSI.c    **** 	bool CommandSuccess = false;
 133               		.loc 1 90 0
 134               		.cfi_startproc
 135 0000 0F93      		push r16
 136               	.LCFI2:
 137               		.cfi_def_cfa_offset 3
 138               		.cfi_offset 16, -2
 139 0002 1F93      		push r17
 140               	.LCFI3:
 141               		.cfi_def_cfa_offset 4
 142               		.cfi_offset 17, -3
 143 0004 CF93      		push r28
 144               	.LCFI4:
 145               		.cfi_def_cfa_offset 5
 146               		.cfi_offset 28, -4
 147 0006 DF93      		push r29
 148               	.LCFI5:
 149               		.cfi_def_cfa_offset 6
 150               		.cfi_offset 29, -5
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 4 */
 154               	.L__stack_usage = 4
 155               	.LVL8:
  94:Lib/SCSI.c    **** 	{
 156               		.loc 1 94 0
 157 0008 8091 0000 		lds r24,CommandBlock+15
 158 000c 8D31      		cpi r24,lo8(29)
 159 000e 01F4      		brne .+2
 160 0010 00C0      		rjmp .L9
 161 0012 00F4      		brsh .L10
 162 0014 8330      		cpi r24,lo8(3)
 163 0016 01F4      		brne .+2
 164 0018 00C0      		rjmp .L11
 165 001a 00F4      		brsh .L12
 166 001c 8823      		tst r24
 167 001e 01F4      		brne .+2
 168 0020 00C0      		rjmp .L13
 169 0022 00C0      		rjmp .L8
 170               	.L12:
 171 0024 8231      		cpi r24,lo8(18)
 172 0026 01F0      		breq .L14
 173 0028 8A31      		cpi r24,lo8(26)
 174 002a 01F0      		breq .+2
 175 002c 00C0      		rjmp .L8
 176               	.LVL9:
 177               	.LBB68:
 178               	.LBB69:
 179               	.LBB70:
 180               	.LBB71:
 181               		.file 3 "../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 532:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 613:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 182               		.loc 3 624 0
 183 002e 1092 F100 		sts 241,__zero_reg__
 184               	.LVL10:
 185               	.LBE71:
 186               	.LBE70:
 187               	.LBB72:
 188               	.LBB73:
 189 0032 1092 F100 		sts 241,__zero_reg__
 190               	.LVL11:
 191               	.LBE73:
 192               	.LBE72:
 193               	.LBB74:
 194               	.LBB75:
 195 0036 1092 F100 		sts 241,__zero_reg__
 196               	.LVL12:
 197               	.LBE75:
 198               	.LBE74:
 199               	.LBB76:
 200               	.LBB77:
 201 003a 1092 F100 		sts 241,__zero_reg__
 202               	.LVL13:
 203               	.LBE77:
 204               	.LBE76:
 205               	.LBB78:
 206               	.LBB79:
 516:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 207               		.loc 3 516 0
 208 003e 8091 E800 		lds r24,232
 209 0042 8E77      		andi r24,lo8(126)
 210 0044 8093 E800 		sts 232,r24
 211               	.LBE79:
 212               	.LBE78:
 323:Lib/SCSI.c    **** 
 324:Lib/SCSI.c    **** /** Command processing for an issued SCSI MODE SENSE (6) command. This command returns various info
 325:Lib/SCSI.c    ****  *  the SCSI device, as well as the device's Write Protect status.
 326:Lib/SCSI.c    ****  *
 327:Lib/SCSI.c    ****  *  \return Boolean true if the command completed successfully, false otherwise.
 328:Lib/SCSI.c    ****  */
 329:Lib/SCSI.c    **** static bool SCSI_Command_ModeSense_6(void)
 330:Lib/SCSI.c    **** {
 331:Lib/SCSI.c    **** 	/* Send an empty header response with the Write Protect flag status */
 332:Lib/SCSI.c    **** 	Endpoint_Write_8(0x00);
 333:Lib/SCSI.c    **** 	Endpoint_Write_8(0x00);
 334:Lib/SCSI.c    **** 	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
 335:Lib/SCSI.c    **** 	Endpoint_Write_8(0x00);
 336:Lib/SCSI.c    **** 	Endpoint_ClearIN();
 337:Lib/SCSI.c    **** 
 338:Lib/SCSI.c    **** 	/* Update the bytes transferred counter and succeed the command */
 339:Lib/SCSI.c    **** 	CommandBlock.DataTransferLength -= 4;
 213               		.loc 1 339 0
 214 0048 8091 0000 		lds r24,CommandBlock+8
 215 004c 9091 0000 		lds r25,CommandBlock+8+1
 216 0050 A091 0000 		lds r26,CommandBlock+8+2
 217 0054 B091 0000 		lds r27,CommandBlock+8+3
 218 0058 0497      		sbiw r24,4
 219 005a A109      		sbc r26,__zero_reg__
 220 005c B109      		sbc r27,__zero_reg__
 221 005e 00C0      		rjmp .L44
 222               	.L10:
 223               	.LBE69:
 224               	.LBE68:
  94:Lib/SCSI.c    **** 	{
 225               		.loc 1 94 0
 226 0060 8832      		cpi r24,lo8(40)
 227 0062 01F4      		brne .+2
 228 0064 00C0      		rjmp .L16
 229 0066 00F4      		brsh .L17
 230 0068 8E31      		cpi r24,lo8(30)
 231 006a 01F4      		brne .+2
 232 006c 00C0      		rjmp .L13
 233 006e 8532      		cpi r24,lo8(37)
 234 0070 01F4      		brne .+2
 235 0072 00C0      		rjmp .L18
 236 0074 00C0      		rjmp .L8
 237               	.L17:
 238 0076 8A32      		cpi r24,lo8(42)
 239 0078 01F4      		brne .+2
 240 007a 00C0      		rjmp .L19
 241 007c 8F32      		cpi r24,lo8(47)
 242 007e 01F4      		brne .+2
 243 0080 00C0      		rjmp .L13
 244 0082 00C0      		rjmp .L8
 245               	.L14:
 246               	.LVL14:
 247               	.LBB81:
 248               	.LBB82:
 249               	.LBB83:
 250               	.LBB84:
 251               	.LBB85:
 252               	.LBB86:
 416:../../../../LUFA/Common/Endianness.h **** 			}
 253               		.loc 2 416 0
 254 0084 8091 0000 		lds r24,CommandBlock+19
 255 0088 C82F      		mov r28,r24
 256 008a 8091 0000 		lds r24,CommandBlock+18
 257 008e D82F      		mov r29,r24
 258               	.LVL15:
 259               	.LBE86:
 260               	.LBE85:
 261               	.LBE84:
 262               	.LBE83:
 156:Lib/SCSI.c    **** 	     CommandBlock.SCSICommandData[2])
 263               		.loc 1 156 0
 264 0090 8091 0000 		lds r24,CommandBlock+16
 265 0094 8370      		andi r24,lo8(3)
 266 0096 01F4      		brne .L20
 267 0098 8091 0000 		lds r24,CommandBlock+17
 268 009c 8823      		tst r24
 269 009e 01F0      		breq .L21
 270               	.LVL16:
 271               	.L20:
 160:Lib/SCSI.c    **** 		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
 272               		.loc 1 160 0
 273 00a0 8091 0000 		lds r24,SenseData+2
 274 00a4 807F      		andi r24,lo8(-16)
 275 00a6 8560      		ori r24,lo8(5)
 276 00a8 8093 0000 		sts SenseData+2,r24
 277 00ac 84E2      		ldi r24,lo8(36)
 278 00ae 00C0      		rjmp .L45
 279               	.LVL17:
 280               	.L21:
 153:Lib/SCSI.c    **** 
 281               		.loc 1 153 0
 282 00b0 8E01      		movw r16,r28
 283 00b2 C532      		cpi r28,37
 284 00b4 D105      		cpc r29,__zero_reg__
 285 00b6 00F0      		brlo .L23
 286               	.LVL18:
 287 00b8 04E2      		ldi r16,lo8(36)
 288 00ba 10E0      		ldi r17,0
 289               	.LVL19:
 290               	.L23:
 168:Lib/SCSI.c    **** 
 291               		.loc 1 168 0
 292 00bc 40E0      		ldi r20,0
 293 00be 50E0      		ldi r21,0
 294 00c0 B801      		movw r22,r16
 295 00c2 80E0      		ldi r24,lo8(InquiryData)
 296 00c4 90E0      		ldi r25,hi8(InquiryData)
 297 00c6 0E94 0000 		call Endpoint_Write_Stream_LE
 298               	.LVL20:
 171:Lib/SCSI.c    **** 
 299               		.loc 1 171 0
 300 00ca 60E0      		ldi r22,0
 301 00cc 70E0      		ldi r23,0
 302 00ce CE01      		movw r24,r28
 303 00d0 801B      		sub r24,r16
 304 00d2 910B      		sbc r25,r17
 305 00d4 0E94 0000 		call Endpoint_Null_Stream
 306               	.LVL21:
 307               	.LBB87:
 308               	.LBB88:
 516:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 309               		.loc 3 516 0
 310 00d8 8091 E800 		lds r24,232
 311 00dc 8E77      		andi r24,lo8(126)
 312 00de 8093 E800 		sts 232,r24
 313               	.LBE88:
 314               	.LBE87:
 177:Lib/SCSI.c    **** 
 315               		.loc 1 177 0
 316 00e2 8091 0000 		lds r24,CommandBlock+8
 317 00e6 9091 0000 		lds r25,CommandBlock+8+1
 318 00ea A091 0000 		lds r26,CommandBlock+8+2
 319 00ee B091 0000 		lds r27,CommandBlock+8+3
 320 00f2 801B      		sub r24,r16
 321 00f4 910B      		sbc r25,r17
 322 00f6 A109      		sbc r26,__zero_reg__
 323 00f8 B109      		sbc r27,__zero_reg__
 324 00fa 00C0      		rjmp .L44
 325               	.LVL22:
 326               	.L11:
 327               	.LBE82:
 328               	.LBE81:
 329               	.LBB89:
 330               	.LBB90:
 189:Lib/SCSI.c    **** 	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
 331               		.loc 1 189 0
 332 00fc C091 0000 		lds r28,CommandBlock+19
 333               	.LVL23:
 190:Lib/SCSI.c    **** 
 334               		.loc 1 190 0
 335 0100 DC2F      		mov r29,r28
 336 0102 C331      		cpi r28,lo8(19)
 337 0104 00F0      		brlo .L25
 338 0106 D2E1      		ldi r29,lo8(18)
 339               	.L25:
 340               	.LVL24:
 193:Lib/SCSI.c    **** 
 341               		.loc 1 193 0
 342 0108 0D2F      		mov r16,r29
 343 010a 10E0      		ldi r17,0
 344 010c 40E0      		ldi r20,0
 345 010e 50E0      		ldi r21,0
 346 0110 B801      		movw r22,r16
 347 0112 80E0      		ldi r24,lo8(SenseData)
 348 0114 90E0      		ldi r25,hi8(SenseData)
 349 0116 0E94 0000 		call Endpoint_Write_Stream_LE
 350               	.LVL25:
 196:Lib/SCSI.c    **** 
 351               		.loc 1 196 0
 352 011a 8C2F      		mov r24,r28
 353 011c 90E0      		ldi r25,0
 354 011e 60E0      		ldi r22,0
 355 0120 70E0      		ldi r23,0
 356 0122 801B      		sub r24,r16
 357 0124 910B      		sbc r25,r17
 358 0126 0E94 0000 		call Endpoint_Null_Stream
 359               	.LVL26:
 360               	.LBB91:
 361               	.LBB92:
 516:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 362               		.loc 3 516 0
 363 012a 8091 E800 		lds r24,232
 364 012e 8E77      		andi r24,lo8(126)
 365 0130 8093 E800 		sts 232,r24
 366               	.LBE92:
 367               	.LBE91:
 202:Lib/SCSI.c    **** 
 368               		.loc 1 202 0
 369 0134 8091 0000 		lds r24,CommandBlock+8
 370 0138 9091 0000 		lds r25,CommandBlock+8+1
 371 013c A091 0000 		lds r26,CommandBlock+8+2
 372 0140 B091 0000 		lds r27,CommandBlock+8+3
 373 0144 8D1B      		sub r24,r29
 374 0146 9109      		sbc r25,__zero_reg__
 375 0148 A109      		sbc r26,__zero_reg__
 376 014a B109      		sbc r27,__zero_reg__
 377 014c 00C0      		rjmp .L44
 378               	.LVL27:
 379               	.L18:
 380               	.LBE90:
 381               	.LBE89:
 382               	.LBB93:
 383               	.LBB94:
 384               	.LBB95:
 385               	.LBB96:
 625:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 626:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 627:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 628:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 629:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 630:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 631:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
 632:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void)
 633:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 634:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Dummy;
 635:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 636:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 637:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 638:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				(void)Dummy;
 639:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 640:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 641:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 642:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 643:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 644:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 645:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 646:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 647:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 648:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 649:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void)
 650:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 651:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 652:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 653:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 654:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 655:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 656:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 657:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 658:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 659:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 660:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 661:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 662:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 663:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 664:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 665:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 666:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 667:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 668:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 669:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 670:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 671:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void)
 672:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 673:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 674:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 675:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 676:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 677:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 678:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 679:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 680:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 681:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 682:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 683:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 684:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 685:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 686:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 687:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 688:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 689:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 690:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 691:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 692:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
 693:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data)
 694:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 695:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data & 0xFF);
 696:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 697:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 698:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 699:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes two bytes to the currently selected endpoint's bank in big endian format, for IN
 700:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 701:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 702:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 703:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 704:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 705:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 706:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_BE(const uint16_t Data) ATTR_ALWAYS_INLINE;
 707:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_BE(const uint16_t Data)
 708:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 709:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 710:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data & 0xFF);
 711:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 712:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 713:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Discards two bytes from the currently selected endpoint's bank, for OUT direction endpoints.
 714:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 715:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 716:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 717:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
 718:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_16(void)
 719:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 720:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Dummy;
 721:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 722:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 723:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 724:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 725:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				(void)Dummy;
 726:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 727:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 728:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads four bytes from the currently selected endpoint's bank in little endian format, for OU
 729:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 730:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 731:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 732:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 733:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
 734:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 735:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 736:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_LE(void)
 737:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 738:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 739:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 740:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint32_t Value;
 741:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[4];
 742:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 743:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 744:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 745:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 746:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[2] = UEDATX;
 747:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[3] = UEDATX;
 748:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 749:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 750:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 751:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 752:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads four bytes from the currently selected endpoint's bank in big endian format, for OUT
 753:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 754:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 755:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 756:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 757:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
 758:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 759:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 760:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint32_t Endpoint_Read_32_BE(void)
 761:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 762:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 763:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 764:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint32_t Value;
 765:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[4];
 766:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 767:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 768:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[3] = UEDATX;
 769:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[2] = UEDATX;
 770:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 771:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 772:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 773:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 774:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 775:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 776:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes four bytes to the currently selected endpoint's bank in little endian format, for IN
 777:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 778:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 779:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 780:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 781:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 782:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 783:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
 784:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_32_LE(const uint32_t Data)
 785:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 786:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data &  0xFF);
 787:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 788:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 16);
 789:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 24);
 790:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 791:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 792:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes four bytes to the currently selected endpoint's bank in big endian format, for IN
 793:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 794:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 795:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 796:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 797:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 798:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 799:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
 800:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_32_BE(const uint32_t Data)
 801:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 802:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 24);
 386               		.loc 3 802 0
 387 014e 1092 F100 		sts 241,__zero_reg__
 803:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 16);
 388               		.loc 3 803 0
 389 0152 1092 F100 		sts 241,__zero_reg__
 804:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 390               		.loc 3 804 0
 391 0156 8FE7      		ldi r24,lo8(127)
 392 0158 8093 F100 		sts 241,r24
 805:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data &  0xFF);
 393               		.loc 3 805 0
 394 015c 8FEF      		ldi r24,lo8(-1)
 395 015e 8093 F100 		sts 241,r24
 396               	.LVL28:
 397               	.LBE96:
 398               	.LBE95:
 399               	.LBB97:
 400               	.LBB98:
 802:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 16);
 401               		.loc 3 802 0
 402 0162 1092 F100 		sts 241,__zero_reg__
 803:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 403               		.loc 3 803 0
 404 0166 1092 F100 		sts 241,__zero_reg__
 804:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data &  0xFF);
 405               		.loc 3 804 0
 406 016a 82E0      		ldi r24,lo8(2)
 407 016c 8093 F100 		sts 241,r24
 408               		.loc 3 805 0
 409 0170 1092 F100 		sts 241,__zero_reg__
 410               	.LVL29:
 411               	.LBE98:
 412               	.LBE97:
 221:Lib/SCSI.c    **** 	  return false;
 413               		.loc 1 221 0
 414 0174 8091 0000 		lds r24,IsMassStoreReset
 415 0178 8111      		cpse r24,__zero_reg__
 416 017a 00C0      		rjmp .L22
 417               	.LBB99:
 418               	.LBB100:
 516:../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 419               		.loc 3 516 0
 420 017c 8091 E800 		lds r24,232
 421 0180 8E77      		andi r24,lo8(126)
 422 0182 8093 E800 		sts 232,r24
 423               	.LBE100:
 424               	.LBE99:
 228:Lib/SCSI.c    **** 
 425               		.loc 1 228 0
 426 0186 8091 0000 		lds r24,CommandBlock+8
 427 018a 9091 0000 		lds r25,CommandBlock+8+1
 428 018e A091 0000 		lds r26,CommandBlock+8+2
 429 0192 B091 0000 		lds r27,CommandBlock+8+3
 430 0196 0897      		sbiw r24,8
 431 0198 A109      		sbc r26,__zero_reg__
 432 019a B109      		sbc r27,__zero_reg__
 433 019c 00C0      		rjmp .L44
 434               	.L9:
 435               	.LBE94:
 436               	.LBE93:
 437               	.LBB101:
 438               	.LBB102:
 242:Lib/SCSI.c    **** 	{
 439               		.loc 1 242 0
 440 019e 8091 0000 		lds r24,CommandBlock+16
 441 01a2 82FF      		sbrs r24,2
 442 01a4 00C0      		rjmp .L20
 253:Lib/SCSI.c    **** 	{
 443               		.loc 1 253 0
 444 01a6 0E94 0000 		call DataflashManager_CheckDataflashOperation
 445               	.LVL30:
 446 01aa 8111      		cpse r24,__zero_reg__
 447 01ac 00C0      		rjmp .L13
 256:Lib/SCSI.c    **** 		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
 448               		.loc 1 256 0
 449 01ae 8091 0000 		lds r24,SenseData+2
 450 01b2 807F      		andi r24,lo8(-16)
 451 01b4 8460      		ori r24,lo8(4)
 452 01b6 8093 0000 		sts SenseData+2,r24
 453 01ba 1092 0000 		sts SenseData+12,__zero_reg__
 454               	.L43:
 455 01be 1092 0000 		sts SenseData+13,__zero_reg__
 456 01c2 00C0      		rjmp .L22
 457               	.L19:
 458               	.LBE102:
 459               	.LBE101:
 109:Lib/SCSI.c    **** 			break;
 460               		.loc 1 109 0
 461 01c4 80E0      		ldi r24,0
 462 01c6 00C0      		rjmp .L42
 463               	.L16:
 112:Lib/SCSI.c    **** 			break;
 464               		.loc 1 112 0
 465 01c8 81E0      		ldi r24,lo8(1)
 466               	.L42:
 467 01ca 0E94 0000 		call SCSI_Command_ReadWrite_10
 468               	.LVL31:
 133:Lib/SCSI.c    **** 	{
 469               		.loc 1 133 0
 470 01ce 8111      		cpse r24,__zero_reg__
 471 01d0 00C0      		rjmp .L24
 472 01d2 00C0      		rjmp .L22
 473               	.LVL32:
 474               	.L44:
 475               	.LBB103:
 476               	.LBB80:
 477               		.loc 1 339 0
 478 01d4 8093 0000 		sts CommandBlock+8,r24
 479 01d8 9093 0000 		sts CommandBlock+8+1,r25
 480 01dc A093 0000 		sts CommandBlock+8+2,r26
 481 01e0 B093 0000 		sts CommandBlock+8+3,r27
 482               	.LVL33:
 483               	.LBE80:
 484               	.LBE103:
 116:Lib/SCSI.c    **** 		case SCSI_CMD_TEST_UNIT_READY:
 485               		.loc 1 116 0
 486 01e4 00C0      		rjmp .L24
 487               	.LVL34:
 488               	.L13:
 122:Lib/SCSI.c    **** 			break;
 489               		.loc 1 122 0
 490 01e6 1092 0000 		sts CommandBlock+8,__zero_reg__
 491 01ea 1092 0000 		sts CommandBlock+8+1,__zero_reg__
 492 01ee 1092 0000 		sts CommandBlock+8+2,__zero_reg__
 493 01f2 1092 0000 		sts CommandBlock+8+3,__zero_reg__
 123:Lib/SCSI.c    **** 		default:
 494               		.loc 1 123 0
 495 01f6 00C0      		rjmp .L24
 496               	.LVL35:
 497               	.L8:
 126:Lib/SCSI.c    **** 		                   SCSI_ASENSE_INVALID_COMMAND,
 498               		.loc 1 126 0
 499 01f8 8091 0000 		lds r24,SenseData+2
 500 01fc 807F      		andi r24,lo8(-16)
 501 01fe 8560      		ori r24,lo8(5)
 502 0200 8093 0000 		sts SenseData+2,r24
 503 0204 80E2      		ldi r24,lo8(32)
 504               	.L45:
 505 0206 8093 0000 		sts SenseData+12,r24
 506 020a 00C0      		rjmp .L43
 507               	.LVL36:
 508               	.L22:
 142:Lib/SCSI.c    **** }
 509               		.loc 1 142 0
 510 020c 80E0      		ldi r24,0
 511 020e 00C0      		rjmp .L41
 512               	.LVL37:
 513               	.L24:
 135:Lib/SCSI.c    **** 		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
 514               		.loc 1 135 0
 515 0210 8091 0000 		lds r24,SenseData+2
 516 0214 807F      		andi r24,lo8(-16)
 517 0216 8093 0000 		sts SenseData+2,r24
 518 021a 1092 0000 		sts SenseData+12,__zero_reg__
 519 021e 1092 0000 		sts SenseData+13,__zero_reg__
 139:Lib/SCSI.c    **** 	}
 520               		.loc 1 139 0
 521 0222 81E0      		ldi r24,lo8(1)
 522               	.L41:
 523               	/* epilogue start */
 143:Lib/SCSI.c    **** 
 524               		.loc 1 143 0
 525 0224 DF91      		pop r29
 526 0226 CF91      		pop r28
 527 0228 1F91      		pop r17
 528 022a 0F91      		pop r16
 529 022c 0895      		ret
 530               		.cfi_endproc
 531               	.LFE126:
 533               		.data
 536               	SenseData:
 537 0000 70        		.byte	112
 538 0001 0000 0000 		.zero	6
 538      0000 
 539 0007 0A        		.byte	10
 540 0008 0000 0000 		.zero	10
 540      0000 0000 
 540      0000 
 541               		.section	.rodata
 544               	InquiryData:
 545 0000 00        		.byte	0
 546 0001 80        		.byte	128
 547 0002 00        		.byte	0
 548 0003 02        		.byte	2
 549 0004 1F        		.byte	31
 550 0005 0000      		.zero	2
 551 0007 00        		.byte	0
 552 0008 4C55 4641 		.string	"LUFA"
 552      00
 553 000d 0000 00   		.zero	3
 554 0010 4461 7461 		.string	"Dataflash Disk"
 554      666C 6173 
 554      6820 4469 
 554      736B 00
 555 001f 00        		.zero	1
 556 0020 30        		.byte	48
 557 0021 2E        		.byte	46
 558 0022 30        		.byte	48
 559 0023 30        		.byte	48
 560               		.text
 561               	.Letext0:
 562               		.file 4 "/usr/lib/avr/include/stdint.h"
 563               		.file 5 "../../../../LUFA/Drivers/USB/Class/Device/../Common/MassStorage.h"
 564               		.file 6 "../../../../LUFA/Drivers/USB/Core/USBTask.h"
 565               		.file 7 "./MassStorage.h"
 566               		.file 8 "./Lib/DataflashManager.h"
 567               		.file 9 "../../../../LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 SCSI.c
     /tmp/ccIzZX1f.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccIzZX1f.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccIzZX1f.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccIzZX1f.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccIzZX1f.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccIzZX1f.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccIzZX1f.s:13     .text.SCSI_Command_ReadWrite_10:0000000000000000 SCSI_Command_ReadWrite_10
     /tmp/ccIzZX1f.s:536    .data:0000000000000000 SenseData
     /tmp/ccIzZX1f.s:131    .text.SCSI_DecodeSCSICommand:0000000000000000 SCSI_DecodeSCSICommand
     /tmp/ccIzZX1f.s:544    .rodata:0000000000000000 InquiryData

UNDEFINED SYMBOLS
CommandBlock
DataflashManager_ReadBlocks
DataflashManager_WriteBlocks
Endpoint_Write_Stream_LE
Endpoint_Null_Stream
IsMassStoreReset
DataflashManager_CheckDataflashOperation
__do_copy_data
