   1               		.file	"XPROGTarget.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.XPROGTarget_SetTxMode,"ax",@progbits
  13               	XPROGTarget_SetTxMode:
  14               	.LFB124:
  15               		.file 1 "../AVRISP-MKII/Lib/XPROG/XPROGTarget.c"
   1:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /*
   2:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****              LUFA Library
   3:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****      Copyright (C) Dean Camera, 2011.
   4:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
   5:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   dean [at] fourwalledcubicle [dot] com
   6:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****            www.lufa-lib.org
   7:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** */
   8:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
   9:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /*
  10:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  12:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   software and its documentation for any purpose is hereby granted
  14:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   without fee, provided that the above copyright notice appear in
  15:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   all copies and that both that the copyright notice and this
  16:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   permission notice and warranty disclaimer appear in supporting
  17:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   documentation, and that the name of the author not be used in
  18:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   advertising or publicity pertaining to distribution of the
  19:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   software without specific, written prior permission.
  20:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  21:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   The author disclaim all warranties with regard to this
  22:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   software, including all implied warranties of merchantability
  23:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   and fitness.  In no event shall the author be liable for any
  24:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   special, indirect or consequential damages or any damages
  25:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   in an action of contract, negligence or other tortious action,
  27:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   arising out of or in connection with the use or performance of
  28:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****   this software.
  29:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** */
  30:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  31:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** \file
  32:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  *
  33:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  *  Target-related functions for the PDI Protocol decoder.
  34:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  */
  35:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  36:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** #define  INCLUDE_FROM_XPROGTARGET_C
  37:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** #include "XPROGTarget.h"
  38:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  39:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** #if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)
  40:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  41:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Flag to indicate if the USART is currently in Tx or Rx mode. */
  42:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** bool IsSending;
  43:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  44:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
  45:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** void XPROGTarget_EnableTargetPDI(void)
  46:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
  47:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	IsSending = false;
  48:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  49:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set Tx and XCK as outputs, Rx as input */
  50:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD |=  (1 << 5) | (1 << 3);
  51:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD &= ~(1 << 2);
  52:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  53:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set DATA line high for at least 90ns to disable /RESET functionality */
  54:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD |= (1 << 3);
  55:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	_delay_us(1);
  56:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  57:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits *
  58:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
  59:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B = (1 << TXEN1);
  60:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPO
  61:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  62:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
  63:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SendIdle();
  64:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SendIdle();
  65:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
  66:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  67:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
  68:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** void XPROGTarget_EnableTargetTPI(void)
  69:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
  70:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	IsSending = false;
  71:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  72:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set /RESET line low for at least 400ns to enable TPI functionality */
  73:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	AUX_LINE_DDR  |=  AUX_LINE_MASK;
  74:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	AUX_LINE_PORT &= ~AUX_LINE_MASK;
  75:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	_delay_us(1);
  76:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  77:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set Tx and XCK as outputs, Rx as input */
  78:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD |=  (1 << 5) | (1 << 3);
  79:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD &= ~(1 << 2);
  80:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  81:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
  82:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
  83:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B = (1 << TXEN1);
  84:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPO
  85:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  86:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
  87:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SendIdle();
  88:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SendIdle();
  89:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
  90:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  91:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Disables the target's PDI interface, exits programming mode and starts the target's application
  92:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** void XPROGTarget_DisableTargetPDI(void)
  93:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
  94:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Rx mode to ensure that all pending transmissions are complete */
  95:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SetRxMode();
  96:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
  97:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Turn off receiver and transmitter of the USART, clear settings */
  98:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
  99:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B  = 0;
 100:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C  = 0;
 101:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 102:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Tristate all pins */
 103:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD  &= ~((1 << 5) | (1 << 3));
 104:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
 105:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 106:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 107:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Disables the target's TPI interface, exits programming mode and starts the target's application
 108:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** void XPROGTarget_DisableTargetTPI(void)
 109:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
 110:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Rx mode to ensure that all pending transmissions are complete */
 111:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SetRxMode();
 112:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 113:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Turn off receiver and transmitter of the USART, clear settings */
 114:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1A |= (1 << TXC1) | (1 << RXC1);
 115:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B  = 0;
 116:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C  = 0;
 117:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 118:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Set all USART lines as inputs, tristate */
 119:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD  &= ~((1 << 5) | (1 << 3));
 120:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
 121:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	
 122:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Tristate target /RESET line */
 123:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
 124:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	AUX_LINE_PORT &= ~AUX_LINE_MASK;
 125:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 126:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 127:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Sends a byte via the USART.
 128:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  *
 129:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  *  \param[in] Byte  Byte to send through the USART
 130:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  */
 131:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** void XPROGTarget_SendByte(const uint8_t Byte)
 132:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
 133:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Tx mode if currently in Rx mode */
 134:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	if (!(IsSending))
 135:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	  XPROGTarget_SetTxMode();
 136:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 137:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Wait until there is space in the hardware Tx buffer before writing */
 138:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	while (!(UCSR1A & (1 << UDRE1)));
 139:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1A |= (1 << TXC1);
 140:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UDR1    = Byte;
 141:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 142:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 143:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Receives a byte via the hardware USART, blocking until data is received or timeout expired.
 144:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  *
 145:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  *  \return Received byte from the USART
 146:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****  */
 147:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** uint8_t XPROGTarget_ReceiveByte(void)
 148:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
 149:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Rx mode if currently in Tx mode */
 150:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	if (IsSending)
 151:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	  XPROGTarget_SetRxMode();
 152:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 153:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Wait until a byte has been received before reading */
 154:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	while (!(UCSR1A & (1 << RXC1)) && !(TimeoutExpired));
 155:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 156:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	return UDR1;
 157:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 158:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 159:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** /** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
 160:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** void XPROGTarget_SendIdle(void)
 161:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
 162:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Tx mode if currently in Rx mode */
 163:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	if (!(IsSending))
 164:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	  XPROGTarget_SetTxMode();
 165:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	
 166:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Need to do nothing for a full frame to send an IDLE */
 167:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
 168:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	{
 169:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 		/* Wait for a full cycle of the clock */
 170:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 		while (PIND & (1 << 5));
 171:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 		while (!(PIND & (1 << 5)));
 172:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	}
 173:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 174:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 175:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** static void XPROGTarget_SetTxMode(void)
 176:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
  16               		.loc 1 176 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  23               		.loc 1 176 0
  24 0000 8CE0      		ldi r24,lo8(12)
  25               	.LVL1:
  26               	.L2:
  27               	.LBB6:
 177:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****     /* Need to do nothing for a full frame to send a BREAK - only one cycle should be needed, howev
 178:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	 * there are reports that sometimes the interface will get stuck in some environments. */
 179:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****     for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
 180:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****     {
 181:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****         /* Wait for a full cycle of the clock */
 182:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****         while (PIND & (1 << 5));
  28               		.loc 1 182 0 discriminator 1
  29 0002 4D99      		sbic 0x9,5
  30 0004 00C0      		rjmp .L2
  31               	.L3:
 183:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****         while (!(PIND & (1 << 5)));
  32               		.loc 1 183 0 discriminator 1
  33 0006 4D9B      		sbis 0x9,5
  34 0008 00C0      		rjmp .L3
  35               	.LVL2:
  36 000a 8150      		subi r24,lo8(-(-1))
  37               	.LVL3:
 179:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****     {
  38               		.loc 1 179 0 discriminator 2
  39 000c 01F4      		brne .L2
  40               	.LBE6:
 184:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c ****     }
 185:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 186:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD  |=  (1 << 3);
  41               		.loc 1 186 0
  42 000e 5B9A      		sbi 0xb,3
 187:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD   |=  (1 << 3);
  43               		.loc 1 187 0
  44 0010 539A      		sbi 0xa,3
 188:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 189:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B &= ~(1 << RXEN1);
  45               		.loc 1 189 0
  46 0012 8091 C900 		lds r24,201
  47               	.LVL4:
  48 0016 8F7E      		andi r24,lo8(-17)
  49 0018 8093 C900 		sts 201,r24
 190:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B |=  (1 << TXEN1);
  50               		.loc 1 190 0
  51 001c 8091 C900 		lds r24,201
  52 0020 8860      		ori r24,lo8(8)
  53 0022 8093 C900 		sts 201,r24
 191:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 192:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	IsSending = true;
  54               		.loc 1 192 0
  55 0026 81E0      		ldi r24,lo8(1)
  56 0028 8093 0000 		sts IsSending,r24
  57 002c 0895      		ret
  58               		.cfi_endproc
  59               	.LFE124:
  61               		.section	.text.XPROGTarget_SetRxMode,"ax",@progbits
  63               	XPROGTarget_SetRxMode:
  64               	.LFB125:
 193:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 194:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 195:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** static void XPROGTarget_SetRxMode(void)
 196:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** {
  65               		.loc 1 196 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
  71               	.L11:
 197:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	while (!(UCSR1A & (1 << TXC1)));
  72               		.loc 1 197 0 discriminator 1
  73 0000 8091 C800 		lds r24,200
  74 0004 86FF      		sbrs r24,6
  75 0006 00C0      		rjmp .L11
 198:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1A |=  (1 << TXC1);
  76               		.loc 1 198 0
  77 0008 8091 C800 		lds r24,200
  78 000c 8064      		ori r24,lo8(64)
  79 000e 8093 C800 		sts 200,r24
 199:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 200:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B &= ~(1 << TXEN1);
  80               		.loc 1 200 0
  81 0012 8091 C900 		lds r24,201
  82 0016 877F      		andi r24,lo8(-9)
  83 0018 8093 C900 		sts 201,r24
 201:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B |=  (1 << RXEN1);
  84               		.loc 1 201 0
  85 001c 8091 C900 		lds r24,201
  86 0020 8061      		ori r24,lo8(16)
  87 0022 8093 C900 		sts 201,r24
 202:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 203:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD   &= ~(1 << 3);
  88               		.loc 1 203 0
  89 0026 5398      		cbi 0xa,3
 204:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD  &= ~(1 << 3);
  90               		.loc 1 204 0
  91 0028 5B98      		cbi 0xb,3
 205:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 206:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	IsSending = false;
  92               		.loc 1 206 0
  93 002a 1092 0000 		sts IsSending,__zero_reg__
  94 002e 0895      		ret
  95               		.cfi_endproc
  96               	.LFE125:
  98               		.section	.text.XPROGTarget_DisableTargetPDI,"ax",@progbits
  99               	.global	XPROGTarget_DisableTargetPDI
 101               	XPROGTarget_DisableTargetPDI:
 102               	.LFB119:
  93:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Rx mode to ensure that all pending transmissions are complete */
 103               		.loc 1 93 0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  95:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 109               		.loc 1 95 0
 110 0000 0E94 0000 		call XPROGTarget_SetRxMode
 111               	.LVL5:
  98:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B  = 0;
 112               		.loc 1 98 0
 113 0004 80EC      		ldi r24,lo8(-64)
 114 0006 8093 C800 		sts 200,r24
  99:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C  = 0;
 115               		.loc 1 99 0
 116 000a 1092 C900 		sts 201,__zero_reg__
 100:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 117               		.loc 1 100 0
 118 000e 1092 CA00 		sts 202,__zero_reg__
 103:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
 119               		.loc 1 103 0
 120 0012 8AB1      		in r24,0xa
 121 0014 877D      		andi r24,lo8(-41)
 122 0016 8AB9      		out 0xa,r24
 104:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 123               		.loc 1 104 0
 124 0018 8BB1      		in r24,0xb
 125 001a 837D      		andi r24,lo8(-45)
 126 001c 8BB9      		out 0xb,r24
 127 001e 0895      		ret
 128               		.cfi_endproc
 129               	.LFE119:
 131               		.section	.text.XPROGTarget_DisableTargetTPI,"ax",@progbits
 132               	.global	XPROGTarget_DisableTargetTPI
 134               	XPROGTarget_DisableTargetTPI:
 135               	.LFB120:
 109:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Rx mode to ensure that all pending transmissions are complete */
 136               		.loc 1 109 0
 137               		.cfi_startproc
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
 111:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 142               		.loc 1 111 0
 143 0000 0E94 0000 		call XPROGTarget_SetRxMode
 144               	.LVL6:
 114:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B  = 0;
 145               		.loc 1 114 0
 146 0004 E8EC      		ldi r30,lo8(-56)
 147 0006 F0E0      		ldi r31,0
 148 0008 8081      		ld r24,Z
 149 000a 806C      		ori r24,lo8(-64)
 150 000c 8083      		st Z,r24
 115:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C  = 0;
 151               		.loc 1 115 0
 152 000e 1092 C900 		sts 201,__zero_reg__
 116:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 153               		.loc 1 116 0
 154 0012 1092 CA00 		sts 202,__zero_reg__
 119:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
 155               		.loc 1 119 0
 156 0016 8AB1      		in r24,0xa
 157 0018 877D      		andi r24,lo8(-41)
 158 001a 8AB9      		out 0xa,r24
 120:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	
 159               		.loc 1 120 0
 160 001c 8BB1      		in r24,0xb
 161 001e 837D      		andi r24,lo8(-45)
 162 0020 8BB9      		out 0xb,r24
 123:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	AUX_LINE_PORT &= ~AUX_LINE_MASK;
 163               		.loc 1 123 0
 164 0022 2498      		cbi 0x4,4
 124:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 165               		.loc 1 124 0
 166 0024 2C98      		cbi 0x5,4
 167 0026 0895      		ret
 168               		.cfi_endproc
 169               	.LFE120:
 171               		.section	.text.XPROGTarget_SendByte,"ax",@progbits
 172               	.global	XPROGTarget_SendByte
 174               	XPROGTarget_SendByte:
 175               	.LFB121:
 132:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Tx mode if currently in Rx mode */
 176               		.loc 1 132 0
 177               		.cfi_startproc
 178               	.LVL7:
 179 0000 CF93      		push r28
 180               	.LCFI0:
 181               		.cfi_def_cfa_offset 3
 182               		.cfi_offset 28, -2
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 1 */
 186               	.L__stack_usage = 1
 187 0002 C82F      		mov r28,r24
 134:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	  XPROGTarget_SetTxMode();
 188               		.loc 1 134 0
 189 0004 8091 0000 		lds r24,IsSending
 190               	.LVL8:
 191 0008 8111      		cpse r24,__zero_reg__
 192 000a 00C0      		rjmp .L18
 135:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 193               		.loc 1 135 0
 194 000c 0E94 0000 		call XPROGTarget_SetTxMode
 195               	.LVL9:
 196               	.L18:
 138:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1A |= (1 << TXC1);
 197               		.loc 1 138 0 discriminator 1
 198 0010 8091 C800 		lds r24,200
 199 0014 85FF      		sbrs r24,5
 200 0016 00C0      		rjmp .L18
 139:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UDR1    = Byte;
 201               		.loc 1 139 0
 202 0018 8091 C800 		lds r24,200
 203 001c 8064      		ori r24,lo8(64)
 204 001e 8093 C800 		sts 200,r24
 140:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 205               		.loc 1 140 0
 206 0022 C093 CE00 		sts 206,r28
 207               	/* epilogue start */
 141:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 208               		.loc 1 141 0
 209 0026 CF91      		pop r28
 210               	.LVL10:
 211 0028 0895      		ret
 212               		.cfi_endproc
 213               	.LFE121:
 215               		.section	.text.XPROGTarget_ReceiveByte,"ax",@progbits
 216               	.global	XPROGTarget_ReceiveByte
 218               	XPROGTarget_ReceiveByte:
 219               	.LFB122:
 148:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Rx mode if currently in Tx mode */
 220               		.loc 1 148 0
 221               		.cfi_startproc
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
 150:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	  XPROGTarget_SetRxMode();
 226               		.loc 1 150 0
 227 0000 8091 0000 		lds r24,IsSending
 228 0004 8111      		cpse r24,__zero_reg__
 151:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 229               		.loc 1 151 0
 230 0006 0E94 0000 		call XPROGTarget_SetRxMode
 231               	.LVL11:
 232               	.L24:
 154:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 233               		.loc 1 154 0 discriminator 2
 234 000a 8091 C800 		lds r24,200
 235 000e 87FD      		sbrc r24,7
 236 0010 00C0      		rjmp .L23
 154:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 237               		.loc 1 154 0 is_stmt 0 discriminator 1
 238 0012 8AB5      		in r24,0x2a
 239 0014 8823      		tst r24
 240 0016 01F0      		breq .L24
 241               	.L23:
 156:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 242               		.loc 1 156 0 is_stmt 1
 243 0018 8091 CE00 		lds r24,206
 157:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 244               		.loc 1 157 0
 245 001c 0895      		ret
 246               		.cfi_endproc
 247               	.LFE122:
 249               		.section	.text.XPROGTarget_SendIdle,"ax",@progbits
 250               	.global	XPROGTarget_SendIdle
 252               	XPROGTarget_SendIdle:
 253               	.LFB123:
 161:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Tx mode if currently in Rx mode */
 254               		.loc 1 161 0
 255               		.cfi_startproc
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 0 */
 259               	.L__stack_usage = 0
 163:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	  XPROGTarget_SetTxMode();
 260               		.loc 1 163 0
 261 0000 8091 0000 		lds r24,IsSending
 262 0004 8111      		cpse r24,__zero_reg__
 263 0006 00C0      		rjmp .L31
 164:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	
 264               		.loc 1 164 0
 265 0008 0E94 0000 		call XPROGTarget_SetTxMode
 266               	.LVL12:
 267               	.L31:
 161:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	/* Switch to Tx mode if currently in Rx mode */
 268               		.loc 1 161 0
 269 000c 8CE0      		ldi r24,lo8(12)
 270               	.LVL13:
 271               	.L32:
 272               	.LBB7:
 170:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 		while (!(PIND & (1 << 5)));
 273               		.loc 1 170 0 discriminator 1
 274 000e 4D99      		sbic 0x9,5
 275 0010 00C0      		rjmp .L32
 276               	.L33:
 171:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	}
 277               		.loc 1 171 0 discriminator 1
 278 0012 4D9B      		sbis 0x9,5
 279 0014 00C0      		rjmp .L33
 280               	.LVL14:
 281 0016 8150      		subi r24,lo8(-(-1))
 282               	.LVL15:
 167:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	{
 283               		.loc 1 167 0 discriminator 2
 284 0018 01F4      		brne .L32
 285               	/* epilogue start */
 286               	.LBE7:
 173:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 287               		.loc 1 173 0
 288 001a 0895      		ret
 289               		.cfi_endproc
 290               	.LFE123:
 292               		.section	.text.XPROGTarget_EnableTargetPDI,"ax",@progbits
 293               	.global	XPROGTarget_EnableTargetPDI
 295               	XPROGTarget_EnableTargetPDI:
 296               	.LFB117:
  46:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	IsSending = false;
 297               		.loc 1 46 0
 298               		.cfi_startproc
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
  47:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 303               		.loc 1 47 0
 304 0000 1092 0000 		sts IsSending,__zero_reg__
  50:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD &= ~(1 << 2);
 305               		.loc 1 50 0
 306 0004 8AB1      		in r24,0xa
 307 0006 8862      		ori r24,lo8(40)
 308 0008 8AB9      		out 0xa,r24
  51:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 309               		.loc 1 51 0
 310 000a 5298      		cbi 0xa,2
  54:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	_delay_us(1);
 311               		.loc 1 54 0
 312 000c 5B9A      		sbi 0xb,3
 313               	.LVL16:
 314               	.LBB8:
 315               	.LBB9:
 316               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 317               		.loc 2 276 0
 318 000e 82E0      		ldi r24,lo8(2)
 319 0010 8A95      	1:	dec r24
 320 0012 01F4      		brne 1b
 321 0014 00C0      		rjmp .
 322               	.LVL17:
 323               	.LBE9:
 324               	.LBE8:
  58:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B = (1 << TXEN1);
 325               		.loc 1 58 0
 326 0016 8FE0      		ldi r24,lo8(15)
 327 0018 90E0      		ldi r25,0
 328 001a 9093 CD00 		sts 204+1,r25
 329 001e 8093 CC00 		sts 204,r24
  59:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPO
 330               		.loc 1 59 0
 331 0022 88E0      		ldi r24,lo8(8)
 332 0024 8093 C900 		sts 201,r24
  60:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 333               		.loc 1 60 0
 334 0028 8FE6      		ldi r24,lo8(111)
 335 002a 8093 CA00 		sts 202,r24
  63:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SendIdle();
 336               		.loc 1 63 0
 337 002e 0E94 0000 		call XPROGTarget_SendIdle
 338               	.LVL18:
  64:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 339               		.loc 1 64 0
 340 0032 0C94 0000 		jmp XPROGTarget_SendIdle
 341               	.LVL19:
 342               		.cfi_endproc
 343               	.LFE117:
 345               		.section	.text.XPROGTarget_EnableTargetTPI,"ax",@progbits
 346               	.global	XPROGTarget_EnableTargetTPI
 348               	XPROGTarget_EnableTargetTPI:
 349               	.LFB118:
  69:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	IsSending = false;
 350               		.loc 1 69 0
 351               		.cfi_startproc
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
  70:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 356               		.loc 1 70 0
 357 0000 1092 0000 		sts IsSending,__zero_reg__
  73:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	AUX_LINE_PORT &= ~AUX_LINE_MASK;
 358               		.loc 1 73 0
 359 0004 249A      		sbi 0x4,4
  74:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	_delay_us(1);
 360               		.loc 1 74 0
 361 0006 2C98      		cbi 0x5,4
 362               	.LVL20:
 363               	.LBB10:
 364               	.LBB11:
 365               		.loc 2 276 0
 366 0008 82E0      		ldi r24,lo8(2)
 367 000a 8A95      	1:	dec r24
 368 000c 01F4      		brne 1b
 369 000e 00C0      		rjmp .
 370               	.LVL21:
 371               	.LBE11:
 372               	.LBE10:
  78:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	DDRD &= ~(1 << 2);
 373               		.loc 1 78 0
 374 0010 8AB1      		in r24,0xa
 375 0012 8862      		ori r24,lo8(40)
 376 0014 8AB9      		out 0xa,r24
  79:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 377               		.loc 1 79 0
 378 0016 5298      		cbi 0xa,2
  82:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1B = (1 << TXEN1);
 379               		.loc 1 82 0
 380 0018 8FE0      		ldi r24,lo8(15)
 381 001a 90E0      		ldi r25,0
 382 001c 9093 CD00 		sts 204+1,r25
 383 0020 8093 CC00 		sts 204,r24
  83:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPO
 384               		.loc 1 83 0
 385 0024 88E0      		ldi r24,lo8(8)
 386 0026 8093 C900 		sts 201,r24
  84:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 
 387               		.loc 1 84 0
 388 002a 8FE6      		ldi r24,lo8(111)
 389 002c 8093 CA00 		sts 202,r24
  87:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** 	XPROGTarget_SendIdle();
 390               		.loc 1 87 0
 391 0030 0E94 0000 		call XPROGTarget_SendIdle
 392               	.LVL22:
  88:../AVRISP-MKII/Lib/XPROG/XPROGTarget.c **** }
 393               		.loc 1 88 0
 394 0034 0C94 0000 		jmp XPROGTarget_SendIdle
 395               	.LVL23:
 396               		.cfi_endproc
 397               	.LFE118:
 399               		.comm	IsSending,1,1
 400               		.text
 401               	.Letext0:
 402               		.file 3 "/usr/lib/avr/include/stdint.h"
 403               		.file 4 "../AVRISP-MKII/Lib/XPROG/../ISP/ISPTarget.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XPROGTarget.c
     /tmp/ccjye3PV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccjye3PV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccjye3PV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccjye3PV.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccjye3PV.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccjye3PV.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccjye3PV.s:13     .text.XPROGTarget_SetTxMode:0000000000000000 XPROGTarget_SetTxMode
                            *COM*:0000000000000001 IsSending
     /tmp/ccjye3PV.s:63     .text.XPROGTarget_SetRxMode:0000000000000000 XPROGTarget_SetRxMode
     /tmp/ccjye3PV.s:101    .text.XPROGTarget_DisableTargetPDI:0000000000000000 XPROGTarget_DisableTargetPDI
     /tmp/ccjye3PV.s:134    .text.XPROGTarget_DisableTargetTPI:0000000000000000 XPROGTarget_DisableTargetTPI
     /tmp/ccjye3PV.s:174    .text.XPROGTarget_SendByte:0000000000000000 XPROGTarget_SendByte
     /tmp/ccjye3PV.s:218    .text.XPROGTarget_ReceiveByte:0000000000000000 XPROGTarget_ReceiveByte
     /tmp/ccjye3PV.s:252    .text.XPROGTarget_SendIdle:0000000000000000 XPROGTarget_SendIdle
     /tmp/ccjye3PV.s:295    .text.XPROGTarget_EnableTargetPDI:0000000000000000 XPROGTarget_EnableTargetPDI
     /tmp/ccjye3PV.s:348    .text.XPROGTarget_EnableTargetTPI:0000000000000000 XPROGTarget_EnableTargetTPI

UNDEFINED SYMBOLS
__do_clear_bss
