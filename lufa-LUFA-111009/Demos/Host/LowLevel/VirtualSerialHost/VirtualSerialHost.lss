
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000018c6  0000195a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800112  00800112  0000196c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059f9  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002190  00000000  00000000  000076b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e9d  00000000  00000000  00009849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  0000c6e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023e8  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003610  00000000  00000000  0000f444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00012a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2f c1       	rjmp	.+606    	; 0x260 <__ctors_end>
       2:	00 00       	nop
       4:	4b c1       	rjmp	.+662    	; 0x29c <__bad_interrupt>
       6:	00 00       	nop
       8:	49 c1       	rjmp	.+658    	; 0x29c <__bad_interrupt>
       a:	00 00       	nop
       c:	47 c1       	rjmp	.+654    	; 0x29c <__bad_interrupt>
       e:	00 00       	nop
      10:	45 c1       	rjmp	.+650    	; 0x29c <__bad_interrupt>
      12:	00 00       	nop
      14:	43 c1       	rjmp	.+646    	; 0x29c <__bad_interrupt>
      16:	00 00       	nop
      18:	41 c1       	rjmp	.+642    	; 0x29c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3f c1       	rjmp	.+638    	; 0x29c <__bad_interrupt>
      1e:	00 00       	nop
      20:	3d c1       	rjmp	.+634    	; 0x29c <__bad_interrupt>
      22:	00 00       	nop
      24:	3b c1       	rjmp	.+630    	; 0x29c <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c6       	rjmp	.+3212   	; 0xcb6 <__vector_10>
      2a:	00 00       	nop
      2c:	37 c1       	rjmp	.+622    	; 0x29c <__bad_interrupt>
      2e:	00 00       	nop
      30:	35 c1       	rjmp	.+618    	; 0x29c <__bad_interrupt>
      32:	00 00       	nop
      34:	33 c1       	rjmp	.+614    	; 0x29c <__bad_interrupt>
      36:	00 00       	nop
      38:	31 c1       	rjmp	.+610    	; 0x29c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2f c1       	rjmp	.+606    	; 0x29c <__bad_interrupt>
      3e:	00 00       	nop
      40:	2d c1       	rjmp	.+602    	; 0x29c <__bad_interrupt>
      42:	00 00       	nop
      44:	2b c1       	rjmp	.+598    	; 0x29c <__bad_interrupt>
      46:	00 00       	nop
      48:	29 c1       	rjmp	.+594    	; 0x29c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	27 c1       	rjmp	.+590    	; 0x29c <__bad_interrupt>
      4e:	00 00       	nop
      50:	25 c1       	rjmp	.+586    	; 0x29c <__bad_interrupt>
      52:	00 00       	nop
      54:	23 c1       	rjmp	.+582    	; 0x29c <__bad_interrupt>
      56:	00 00       	nop
      58:	21 c1       	rjmp	.+578    	; 0x29c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1f c1       	rjmp	.+574    	; 0x29c <__bad_interrupt>
      5e:	00 00       	nop
      60:	1d c1       	rjmp	.+570    	; 0x29c <__bad_interrupt>
      62:	00 00       	nop
      64:	1b c1       	rjmp	.+566    	; 0x29c <__bad_interrupt>
      66:	00 00       	nop
      68:	19 c1       	rjmp	.+562    	; 0x29c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	17 c1       	rjmp	.+558    	; 0x29c <__bad_interrupt>
      6e:	00 00       	nop
      70:	15 c1       	rjmp	.+554    	; 0x29c <__bad_interrupt>
      72:	00 00       	nop
      74:	13 c1       	rjmp	.+550    	; 0x29c <__bad_interrupt>
      76:	00 00       	nop
      78:	11 c1       	rjmp	.+546    	; 0x29c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0f c1       	rjmp	.+542    	; 0x29c <__bad_interrupt>
      7e:	00 00       	nop
      80:	0d c1       	rjmp	.+538    	; 0x29c <__bad_interrupt>
      82:	00 00       	nop
      84:	0b c1       	rjmp	.+534    	; 0x29c <__bad_interrupt>
      86:	00 00       	nop
      88:	09 c1       	rjmp	.+530    	; 0x29c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	07 c1       	rjmp	.+526    	; 0x29c <__bad_interrupt>
      8e:	00 00       	nop
      90:	05 c1       	rjmp	.+522    	; 0x29c <__bad_interrupt>
      92:	00 00       	nop
      94:	03 c1       	rjmp	.+518    	; 0x29c <__bad_interrupt>
      96:	00 00       	nop
      98:	42 04       	cpc	r4, r2
      9a:	33 05       	cpc	r19, r3
      9c:	60 04       	cpc	r6, r0
      9e:	6a 04       	cpc	r6, r10
      a0:	95 04       	cpc	r9, r5
      a2:	bd 04       	cpc	r11, r13
      a4:	c8 04       	cpc	r12, r8
      a6:	d9 04       	cpc	r13, r9
      a8:	f5 04       	cpc	r15, r5
      aa:	1c 05       	cpc	r17, r12

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4516>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4511>:
     131:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     141:	72 61 74 65 64 2e 0d 0a 00                          rated....

0000014a <__c.4509>:
     14a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     15a:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     16a:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     17a:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     18a:	37 6d 00                                            7m.

0000018d <__c.4507>:
     18d:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     19d:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001a7 <__c.4505>:
     1a7:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1b7:	69 63 65 2e 0d 0a 00                                ice....

000001be <__c.4503>:
     1be:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ce:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1de:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001e8 <__c.4500>:
     1e8:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     1f8:	61 74 61 2e 0d 0a 00                                ata....

000001ff <__c.4495>:
     1ff:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     20f:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     21f:	00                                                  .

00000220 <__c.4490>:
     220:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     230:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000023d <__c.4481>:
     23d:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     24d:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     25d:	37 6d 00                                            7m.

00000260 <__ctors_end>:
     260:	11 24       	eor	r1, r1
     262:	1f be       	out	0x3f, r1	; 63
     264:	cf ef       	ldi	r28, 0xFF	; 255
     266:	d0 e2       	ldi	r29, 0x20	; 32
     268:	de bf       	out	0x3e, r29	; 62
     26a:	cd bf       	out	0x3d, r28	; 61

0000026c <__do_copy_data>:
     26c:	11 e0       	ldi	r17, 0x01	; 1
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b1 e0       	ldi	r27, 0x01	; 1
     272:	e6 ec       	ldi	r30, 0xC6	; 198
     274:	f8 e1       	ldi	r31, 0x18	; 24
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	0b bf       	out	0x3b, r16	; 59
     27a:	02 c0       	rjmp	.+4      	; 0x280 <__do_copy_data+0x14>
     27c:	07 90       	elpm	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	a2 31       	cpi	r26, 0x12	; 18
     282:	b1 07       	cpc	r27, r17
     284:	d9 f7       	brne	.-10     	; 0x27c <__do_copy_data+0x10>

00000286 <__do_clear_bss>:
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	a2 e1       	ldi	r26, 0x12	; 18
     28a:	b1 e0       	ldi	r27, 0x01	; 1
     28c:	01 c0       	rjmp	.+2      	; 0x290 <.do_clear_bss_start>

0000028e <.do_clear_bss_loop>:
     28e:	1d 92       	st	X+, r1

00000290 <.do_clear_bss_start>:
     290:	a4 33       	cpi	r26, 0x34	; 52
     292:	b2 07       	cpc	r27, r18
     294:	e1 f7       	brne	.-8      	; 0x28e <.do_clear_bss_loop>
     296:	36 d1       	rcall	.+620    	; 0x504 <main>
     298:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <_exit>

0000029c <__bad_interrupt>:
     29c:	b1 ce       	rjmp	.-670    	; 0x0 <__vectors>

0000029e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     29e:	9b b1       	in	r25, 0x0b	; 11
     2a0:	9f 70       	andi	r25, 0x0F	; 15
     2a2:	89 2b       	or	r24, r25
     2a4:	8b b9       	out	0x0b, r24	; 11
     2a6:	08 95       	ret

000002a8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2a8:	84 b7       	in	r24, 0x34	; 52
     2aa:	87 7f       	andi	r24, 0xF7	; 247
     2ac:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	a8 95       	wdr
     2b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2b8:	88 61       	ori	r24, 0x18	; 24
     2ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2c2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	80 e8       	ldi	r24, 0x80	; 128
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2d0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2d4:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2d6:	83 e3       	ldi	r24, 0x33	; 51
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2de:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2e2:	86 e0       	ldi	r24, 0x06	; 6
     2e4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2e8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2ec:	88 e1       	ldi	r24, 0x18	; 24
     2ee:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2f2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2f4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2f6:	8a b1       	in	r24, 0x0a	; 10
     2f8:	80 6f       	ori	r24, 0xF0	; 240
     2fa:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     302:	c3 d4       	rcall	.+2438   	; 0xc8a <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     304:	ae e2       	ldi	r26, 0x2E	; 46
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	e0 e2       	ldi	r30, 0x20	; 32
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	fc 93       	st	X, r31
     310:	ee 93       	st	-X, r30
					stdout = Stream;
     312:	13 96       	adiw	r26, 0x03	; 3
     314:	fc 93       	st	X, r31
     316:	ee 93       	st	-X, r30
     318:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     31a:	8e e0       	ldi	r24, 0x0E	; 14
     31c:	df 01       	movw	r26, r30
     31e:	1d 92       	st	X+, r1
     320:	8a 95       	dec	r24
     322:	e9 f7       	brne	.-6      	; 0x31e <SetupHardware+0x76>
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	83 83       	std	Z+3, r24	; 0x03
     328:	88 e3       	ldi	r24, 0x38	; 56
     32a:	99 e0       	ldi	r25, 0x09	; 9
     32c:	91 87       	std	Z+9, r25	; 0x09
     32e:	80 87       	std	Z+8, r24	; 0x08
     330:	81 e4       	ldi	r24, 0x41	; 65
     332:	99 e0       	ldi	r25, 0x09	; 9
     334:	93 87       	std	Z+11, r25	; 0x0b
     336:	82 87       	std	Z+10, r24	; 0x0a
     338:	08 95       	ret

0000033a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     33a:	80 e2       	ldi	r24, 0x20	; 32
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 bf 09 	call	0x137e	; 0x137e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     342:	80 ea       	ldi	r24, 0xA0	; 160
     344:	ac cf       	rjmp	.-168    	; 0x29e <LEDs_SetAllLEDs>

00000346 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 bf 09 	call	0x137e	; 0x137e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	a6 cf       	rjmp	.-180    	; 0x29e <LEDs_SetAllLEDs>

00000352 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     352:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     354:	88 ee       	ldi	r24, 0xE8	; 232
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 bf 09 	call	0x137e	; 0x137e <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     35c:	10 d1       	rcall	.+544    	; 0x57e <ProcessConfigurationDescriptor>
     35e:	c8 2f       	mov	r28, r24
     360:	88 23       	and	r24, r24
     362:	b1 f0       	breq	.+44     	; 0x390 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	19 f4       	brne	.+6      	; 0x36e <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     368:	8e eb       	ldi	r24, 0xBE	; 190
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	02 c0       	rjmp	.+4      	; 0x372 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     36e:	87 ea       	ldi	r24, 0xA7	; 167
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 bf 09 	call	0x137e	; 0x137e <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     376:	1f 92       	push	r1
     378:	cf 93       	push	r28
     37a:	8d e8       	ldi	r24, 0x8D	; 141
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	9f 93       	push	r25
     380:	8f 93       	push	r24
     382:	d6 d7       	rcall	.+4012   	; 0x1330 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	80 e9       	ldi	r24, 0x90	; 144
     38e:	0d c0       	rjmp	.+26     	; 0x3aa <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	39 d7       	rcall	.+3698   	; 0x1206 <USB_Host_SetDeviceConfiguration>
     394:	88 23       	and	r24, r24
     396:	29 f0       	breq	.+10     	; 0x3a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     398:	1f 92       	push	r1
     39a:	8f 93       	push	r24
     39c:	8a e4       	ldi	r24, 0x4A	; 74
     39e:	91 e0       	ldi	r25, 0x01	; 1

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     3a0:	ee cf       	rjmp	.-36     	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     3a2:	81 e3       	ldi	r24, 0x31	; 49
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	eb d7       	rcall	.+4054   	; 0x137e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3a8:	80 e6       	ldi	r24, 0x60	; 96
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3aa:	cf 91       	pop	r28
     3ac:	78 cf       	rjmp	.-272    	; 0x29e <LEDs_SetAllLEDs>

000003ae <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3ae:	c8 2f       	mov	r28, r24
	USB_Disable();
     3b0:	04 d4       	rcall	.+2056   	; 0xbba <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3b2:	1f 92       	push	r1
     3b4:	cf 93       	push	r28
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	9f 93       	push	r25
     3bc:	8f 93       	push	r24
     3be:	b8 d7       	rcall	.+3952   	; 0x1330 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3c0:	80 e9       	ldi	r24, 0x90	; 144
     3c2:	6d df       	rcall	.-294    	; 0x29e <LEDs_SetAllLEDs>
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	ff cf       	rjmp	.-2      	; 0x3cc <EVENT_USB_Host_HostError+0x1e>

000003ce <EVENT_USB_Host_DeviceEnumerationFailed>:
     3ce:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3d2:	1f 92       	push	r1
     3d4:	9f 93       	push	r25
     3d6:	1f 92       	push	r1
     3d8:	6f 93       	push	r22
     3da:	1f 92       	push	r1
     3dc:	8f 93       	push	r24
     3de:	8c ea       	ldi	r24, 0xAC	; 172
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	a4 d7       	rcall	.+3912   	; 0x1330 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3e8:	8d b7       	in	r24, 0x3d	; 61
     3ea:	9e b7       	in	r25, 0x3e	; 62
     3ec:	08 96       	adiw	r24, 0x08	; 8
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	9e bf       	out	0x3e, r25	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	8d bf       	out	0x3d, r24	; 61
     3f8:	80 e9       	ldi	r24, 0x90	; 144
     3fa:	51 cf       	rjmp	.-350    	; 0x29e <LEDs_SetAllLEDs>

000003fc <CDCHost_Task>:
}

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     414:	ed b6       	in	r14, 0x3d	; 61
     416:	fe b6       	in	r15, 0x3e	; 62

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     418:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_HostState>
     41c:	8b 30       	cpi	r24, 0x0B	; 11
     41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	61 c0       	rjmp	.+194    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     428:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     42c:	8f 7b       	andi	r24, 0xBF	; 191
     42e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     432:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	/* Select the data IN pipe */
	Pipe_SelectPipe(CDC_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     436:	80 ff       	sbrs	r24, 0
     438:	3a c0       	rjmp	.+116    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     43a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     43e:	80 64       	ori	r24, 0x40	; 64
     440:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     444:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		/* Re-freeze IN pipe after the packet has been received */
		Pipe_Freeze();

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
     448:	85 ff       	sbrs	r24, 5
     44a:	2c c0       	rjmp	.+88     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		{
     44c:	ad b6       	in	r10, 0x3d	; 61
     44e:	be b6       	in	r11, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     450:	c0 90 f6 00 	lds	r12, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     454:	d0 90 f7 00 	lds	r13, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
			/* Get the length of the pipe data, and create a new buffer to hold it */
			uint16_t BufferLength = Pipe_BytesInPipe();
			uint8_t  Buffer[BufferLength];
     458:	8d b7       	in	r24, 0x3d	; 61
     45a:	9e b7       	in	r25, 0x3e	; 62
     45c:	8c 19       	sub	r24, r12
     45e:	9d 09       	sbc	r25, r13
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	9e bf       	out	0x3e, r25	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	8d bf       	out	0x3d, r24	; 61
     46a:	0d b7       	in	r16, 0x3d	; 61
     46c:	1e b7       	in	r17, 0x3e	; 62
     46e:	0f 5f       	subi	r16, 0xFF	; 255
     470:	1f 4f       	sbci	r17, 0xFF	; 255

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	b6 01       	movw	r22, r12
     478:	c8 01       	movw	r24, r16
     47a:	b0 d4       	rcall	.+2400   	; 0xddc <Pipe_Read_Stream_LE>
     47c:	c0 0e       	add	r12, r16
     47e:	d1 1e       	adc	r13, r17

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
     480:	0c 15       	cp	r16, r12
     482:	1d 05       	cpc	r17, r13
     484:	51 f0       	breq	.+20     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			  putchar(Buffer[BufferByte]);
     486:	f8 01       	movw	r30, r16
     488:	81 91       	ld	r24, Z+
     48a:	8f 01       	movw	r16, r30
     48c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__iob+0x2>
     490:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__iob+0x3>
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	10 d7       	rcall	.+3616   	; 0x12b8 <fputc>
     498:	f3 cf       	rjmp	.-26     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	be be       	out	0x3e, r11	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	ad be       	out	0x3d, r10	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     4a4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     4a8:	8e 77       	andi	r24, 0x7E	; 126
     4aa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4ae:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     4be:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     4c2:	8f 7b       	andi	r24, 0xBF	; 191
     4c4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     4c8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	/* Select and unfreeze the notification pipe */
	Pipe_SelectPipe(CDC_NOTIFICATION_PIPE);
	Pipe_Unfreeze();

	/* Check if a packet has been received */
	if (Pipe_IsINReceived())
     4cc:	80 ff       	sbrs	r24, 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     4d0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     4d4:	8e 77       	andi	r24, 0x7E	; 126
     4d6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4da:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	fe be       	out	0x3e, r15	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	ed be       	out	0x3d, r14	; 61
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	08 95       	ret

00000504 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     504:	d1 de       	rcall	.-606    	; 0x2a8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     506:	8d e3       	ldi	r24, 0x3D	; 61
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	39 d7       	rcall	.+3698   	; 0x137e <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     50c:	80 e1       	ldi	r24, 0x10	; 16
     50e:	c7 de       	rcall	.-626    	; 0x29e <LEDs_SetAllLEDs>
	sei();
     510:	78 94       	sei

	for (;;)
	{
		CDCHost_Task();
     512:	74 df       	rcall	.-280    	; 0x3fc <CDCHost_Task>
     514:	9f d6       	rcall	.+3390   	; 0x1254 <USB_USBTask>

		USB_USBTask();
     516:	fd cf       	rjmp	.-6      	; 0x512 <main+0xe>

00000518 <DComp_NextCDCControlInterface>:
     518:	fc 01       	movw	r30, r24
     51a:	81 81       	ldd	r24, Z+1	; 0x01
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     51c:	84 30       	cpi	r24, 0x04	; 4
     51e:	59 f4       	brne	.+22     	; 0x536 <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     520:	85 81       	ldd	r24, Z+5	; 0x05
     522:	82 30       	cpi	r24, 0x02	; 2
     524:	41 f4       	brne	.+16     	; 0x536 <DComp_NextCDCControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     526:	86 81       	ldd	r24, Z+6	; 0x06
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	29 f4       	brne	.+10     	; 0x536 <DComp_NextCDCControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     52c:	97 81       	ldd	r25, Z+7	; 0x07
     52e:	91 30       	cpi	r25, 0x01	; 1
     530:	19 f4       	brne	.+6      	; 0x538 <DComp_NextCDCControlInterface+0x20>
		    (Interface->Protocol == CDC_CSCP_ATCommandProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     536:	82 e0       	ldi	r24, 0x02	; 2
}
     538:	08 95       	ret

0000053a <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     53a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     53c:	81 81       	ldd	r24, Z+1	; 0x01
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	51 f4       	brne	.+20     	; 0x556 <DComp_NextCDCDataInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     542:	85 81       	ldd	r24, Z+5	; 0x05
     544:	8a 30       	cpi	r24, 0x0A	; 10
     546:	39 f4       	brne	.+14     	; 0x556 <DComp_NextCDCDataInterface+0x1c>
     548:	86 81       	ldd	r24, Z+6	; 0x06
     54a:	81 11       	cpse	r24, r1
     54c:	04 c0       	rjmp	.+8      	; 0x556 <DComp_NextCDCDataInterface+0x1c>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
     54e:	87 81       	ldd	r24, Z+7	; 0x07
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     550:	81 11       	cpse	r24, r1
     552:	01 c0       	rjmp	.+2      	; 0x556 <DComp_NextCDCDataInterface+0x1c>
     554:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     556:	82 e0       	ldi	r24, 0x02	; 2
}
     558:	08 95       	ret

0000055a <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     55a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     55c:	91 81       	ldd	r25, Z+1	; 0x01
     55e:	95 30       	cpi	r25, 0x05	; 5
     560:	41 f4       	brne	.+16     	; 0x572 <DComp_NextCDCDataInterfaceEndpoint+0x18>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     562:	83 81       	ldd	r24, Z+3	; 0x03
     564:	83 70       	andi	r24, 0x03	; 3
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 97       	sbiw	r24, 0x02	; 2
     56a:	02 97       	sbiw	r24, 0x02	; 2
     56c:	30 f4       	brcc	.+12     	; 0x57a <DComp_NextCDCDataInterfaceEndpoint+0x20>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
     572:	94 30       	cpi	r25, 0x04	; 4
     574:	11 f4       	brne	.+4      	; 0x57a <DComp_NextCDCDataInterfaceEndpoint+0x20>
	{
		return DESCRIPTOR_SEARCH_Fail;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     57a:	82 e0       	ldi	r24, 0x02	; 2
}
     57c:	08 95       	ret

0000057e <ProcessConfigurationDescriptor>:
 *  This routine searches for a CDC interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref CDCHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	c4 50       	subi	r28, 0x04	; 4
     59c:	d2 40       	sbci	r29, 0x02	; 2
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     5a8:	ae 01       	movw	r20, r28
     5aa:	4f 5f       	subi	r20, 0xFF	; 255
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	cd 5f       	subi	r28, 0xFD	; 253
     5b0:	dd 4f       	sbci	r29, 0xFD	; 253
     5b2:	59 83       	std	Y+1, r21	; 0x01
     5b4:	48 83       	st	Y, r20
     5b6:	c3 50       	subi	r28, 0x03	; 3
     5b8:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	32 e0       	ldi	r19, 0x02	; 2
     5be:	be 01       	movw	r22, r28
     5c0:	6f 5f       	subi	r22, 0xFF	; 255
     5c2:	7d 4f       	sbci	r23, 0xFD	; 253
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	77 d4       	rcall	.+2286   	; 0xeb6 <USB_Host_GetDeviceConfigDescriptor>
     5c8:	f8 2e       	mov	r15, r24
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	f8 16       	cp	r15, r24
     5ce:	79 f0       	breq	.+30     	; 0x5ee <ProcessConfigurationDescriptor+0x70>
     5d0:	e6 e0       	ldi	r30, 0x06	; 6
     5d2:	fe 16       	cp	r15, r30
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <ProcessConfigurationDescriptor+0x5a>
     5d6:	88 c0       	rjmp	.+272    	; 0x6e8 <ProcessConfigurationDescriptor+0x16a>
     5d8:	f1 10       	cpse	r15, r1
     5da:	0c c0       	rjmp	.+24     	; 0x5f4 <ProcessConfigurationDescriptor+0x76>
     5dc:	c1 2c       	mov	r12, r1
     5de:	d1 2c       	mov	r13, r1
     5e0:	81 2c       	mov	r8, r1
     5e2:	91 2c       	mov	r9, r1
     5e4:	a1 2c       	mov	r10, r1
     5e6:	b1 2c       	mov	r11, r1
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	23 c0       	rjmp	.+70     	; 0x634 <ProcessConfigurationDescriptor+0xb6>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	f2 2e       	mov	r15, r18
     5f2:	7c c0       	rjmp	.+248    	; 0x6ec <ProcessConfigurationDescriptor+0x16e>
		default:
			return ControlError;
     5f4:	ff 24       	eor	r15, r15
     5f6:	f3 94       	inc	r15
     5f8:	79 c0       	rjmp	.+242    	; 0x6ec <ProcessConfigurationDescriptor+0x16e>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     5fa:	81 14       	cp	r8, r1
     5fc:	91 04       	cpc	r9, r1
     5fe:	09 f0       	breq	.+2      	; 0x602 <ProcessConfigurationDescriptor+0x84>
     600:	52 c0       	rjmp	.+164    	; 0x6a6 <ProcessConfigurationDescriptor+0x128>
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     602:	01 15       	cp	r16, r1
     604:	11 05       	cpc	r17, r1
     606:	e9 f4       	brne	.+58     	; 0x642 <ProcessConfigurationDescriptor+0xc4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     608:	c1 14       	cp	r12, r1
     60a:	d1 04       	cpc	r13, r1
     60c:	31 f5       	brne	.+76     	; 0x65a <ProcessConfigurationDescriptor+0xdc>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next CDC control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     60e:	4c e8       	ldi	r20, 0x8C	; 140
     610:	52 e0       	ldi	r21, 0x02	; 2
     612:	be 01       	movw	r22, r28
     614:	6d 5f       	subi	r22, 0xFD	; 253
     616:	7d 4f       	sbci	r23, 0xFD	; 253
     618:	ce 01       	movw	r24, r28
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	9d 4f       	sbci	r25, 0xFD	; 253
     61e:	a4 d4       	rcall	.+2376   	; 0xf68 <USB_GetNextDescriptorComp>
     620:	81 11       	cpse	r24, r1
     622:	26 c0       	rjmp	.+76     	; 0x670 <ProcessConfigurationDescriptor+0xf2>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				CDCControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     624:	cd 5f       	subi	r28, 0xFD	; 253
     626:	dd 4f       	sbci	r29, 0xFD	; 253
     628:	08 81       	ld	r16, Y
     62a:	19 81       	ldd	r17, Y+1	; 0x01
     62c:	c3 50       	subi	r28, 0x03	; 3
     62e:	d2 40       	sbci	r29, 0x02	; 2

				/* Clear any found endpoints */
				NotificationEndpoint = NULL;
     630:	c1 2c       	mov	r12, r1
     632:	d1 2c       	mov	r13, r1
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     634:	a1 14       	cp	r10, r1
     636:	b1 04       	cpc	r11, r1
     638:	01 f7       	brne	.-64     	; 0x5fa <ProcessConfigurationDescriptor+0x7c>
     63a:	e3 cf       	rjmp	.-58     	; 0x602 <ProcessConfigurationDescriptor+0x84>
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     63c:	01 15       	cp	r16, r1
     63e:	11 05       	cpc	r17, r1
     640:	31 f3       	breq	.-52     	; 0x60e <ProcessConfigurationDescriptor+0x90>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     642:	4d ea       	ldi	r20, 0xAD	; 173
     644:	52 e0       	ldi	r21, 0x02	; 2
     646:	be 01       	movw	r22, r28
     648:	6d 5f       	subi	r22, 0xFD	; 253
     64a:	7d 4f       	sbci	r23, 0xFD	; 253
     64c:	ce 01       	movw	r24, r28
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	9d 4f       	sbci	r25, 0xFD	; 253
     652:	8a d4       	rcall	.+2324   	; 0xf68 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     654:	81 11       	cpse	r24, r1
     656:	d8 cf       	rjmp	.-80     	; 0x608 <ProcessConfigurationDescriptor+0x8a>
     658:	0e c0       	rjmp	.+28     	; 0x676 <ProcessConfigurationDescriptor+0xf8>
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     65a:	4d e9       	ldi	r20, 0x9D	; 157
     65c:	52 e0       	ldi	r21, 0x02	; 2
     65e:	be 01       	movw	r22, r28
     660:	6d 5f       	subi	r22, 0xFD	; 253
     662:	7d 4f       	sbci	r23, 0xFD	; 253
     664:	ce 01       	movw	r24, r28
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	9d 4f       	sbci	r25, 0xFD	; 253
     66a:	7e d4       	rcall	.+2300   	; 0xf68 <USB_GetNextDescriptorComp>
     66c:	88 23       	and	r24, r24
     66e:	91 f0       	breq	.+36     	; 0x694 <ProcessConfigurationDescriptor+0x116>
											  DComp_NextCDCDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	f9 2e       	mov	r15, r25
     674:	3b c0       	rjmp	.+118    	; 0x6ec <ProcessConfigurationDescriptor+0x16e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     676:	cd 5f       	subi	r28, 0xFD	; 253
     678:	dd 4f       	sbci	r29, 0xFD	; 253
     67a:	e8 81       	ld	r30, Y
     67c:	f9 81       	ldd	r31, Y+1	; 0x01
     67e:	c3 50       	subi	r28, 0x03	; 3
     680:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	87 ff       	sbrs	r24, 7
     686:	0b c0       	rjmp	.+22     	; 0x69e <ProcessConfigurationDescriptor+0x120>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     688:	83 81       	ldd	r24, Z+3	; 0x03
     68a:	83 70       	andi	r24, 0x03	; 3
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	49 f0       	breq	.+18     	; 0x6a2 <ProcessConfigurationDescriptor+0x124>
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     690:	5f 01       	movw	r10, r30
     692:	d0 cf       	rjmp	.-96     	; 0x634 <ProcessConfigurationDescriptor+0xb6>
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
				DataOUTEndpoint      = NULL;
     694:	81 2c       	mov	r8, r1
     696:	91 2c       	mov	r9, r1
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
     698:	a1 2c       	mov	r10, r1
     69a:	b1 2c       	mov	r11, r1
     69c:	cb cf       	rjmp	.-106    	; 0x634 <ProcessConfigurationDescriptor+0xb6>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     69e:	4f 01       	movw	r8, r30
     6a0:	c9 cf       	rjmp	.-110    	; 0x634 <ProcessConfigurationDescriptor+0xb6>
		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
     6a2:	6f 01       	movw	r12, r30
     6a4:	c7 cf       	rjmp	.-114    	; 0x634 <ProcessConfigurationDescriptor+0xb6>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     6a6:	c1 14       	cp	r12, r1
     6a8:	d1 04       	cpc	r13, r1
     6aa:	41 f2       	breq	.-112    	; 0x63c <ProcessConfigurationDescriptor+0xbe>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the CDC data IN pipe */
	Pipe_ConfigurePipe(CDC_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     6ac:	f5 01       	movw	r30, r10
     6ae:	04 81       	ldd	r16, Z+4	; 0x04
     6b0:	15 81       	ldd	r17, Z+5	; 0x05
     6b2:	e1 2c       	mov	r14, r1
     6b4:	22 81       	ldd	r18, Z+2	; 0x02
     6b6:	40 e1       	ldi	r20, 0x10	; 16
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	e0 d1       	rcall	.+960    	; 0xa7e <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the CDC data OUT pipe */
	Pipe_ConfigurePipe(CDC_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     6be:	f4 01       	movw	r30, r8
     6c0:	04 81       	ldd	r16, Z+4	; 0x04
     6c2:	15 81       	ldd	r17, Z+5	; 0x05
     6c4:	22 81       	ldd	r18, Z+2	; 0x02
     6c6:	40 e2       	ldi	r20, 0x20	; 32
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	d8 d1       	rcall	.+944    	; 0xa7e <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the CDC notification pipe */
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     6ce:	f6 01       	movw	r30, r12
     6d0:	04 81       	ldd	r16, Z+4	; 0x04
     6d2:	15 81       	ldd	r17, Z+5	; 0x05
     6d4:	22 81       	ldd	r18, Z+2	; 0x02
     6d6:	40 e1       	ldi	r20, 0x10	; 16
     6d8:	63 e0       	ldi	r22, 0x03	; 3
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	d0 d1       	rcall	.+928    	; 0xa7e <Pipe_ConfigurePipe>
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     6de:	f6 01       	movw	r30, r12
     6e0:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     6e2:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <ProcessConfigurationDescriptor+0x16e>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	f8 2e       	mov	r15, r24
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6ec:	8f 2d       	mov	r24, r15
     6ee:	cc 5f       	subi	r28, 0xFC	; 252
     6f0:	dd 4f       	sbci	r29, 0xFD	; 253
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	9f 90       	pop	r9
     712:	8f 90       	pop	r8
     714:	08 95       	ret

00000716 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     716:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     71a:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     71c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     720:	9d 7f       	andi	r25, 0xFD	; 253
     722:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     726:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     72a:	92 60       	ori	r25, 0x02	; 2
     72c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     730:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     734:	91 fd       	sbrc	r25, 1
     736:	fc cf       	rjmp	.-8      	; 0x730 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     738:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     73c:	91 60       	ori	r25, 0x01	; 1
     73e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     742:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     746:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     74a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     74c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     750:	2f 7d       	andi	r18, 0xDF	; 223
     752:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     756:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     75a:	2f 7d       	andi	r18, 0xDF	; 223
     75c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     760:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     762:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     766:	35 ff       	sbrs	r19, 5
     768:	0b c0       	rjmp	.+22     	; 0x780 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     76a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     76e:	2f 7d       	andi	r18, 0xDF	; 223
     770:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     774:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     778:	2d 7f       	andi	r18, 0xFD	; 253
     77a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     77e:	08 c0       	rjmp	.+16     	; 0x790 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     780:	ef ec       	ldi	r30, 0xCF	; 207
     782:	f7 e0       	ldi	r31, 0x07	; 7
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <USB_Host_ResetDevice+0x6e>
     788:	00 c0       	rjmp	.+0      	; 0x78a <USB_Host_ResetDevice+0x74>
     78a:	00 00       	nop
     78c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     78e:	49 f7       	brne	.-46     	; 0x762 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     790:	99 23       	and	r25, r25
     792:	29 f0       	breq	.+10     	; 0x79e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     794:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     798:	90 62       	ori	r25, 0x20	; 32
     79a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     79e:	81 11       	cpse	r24, r1
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7a2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7a6:	8e 7f       	andi	r24, 0xFE	; 254
     7a8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     7ac:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7b6:	08 95       	ret

000007b8 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7b8:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7bc:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7be:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7c2:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7c4:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7c8:	3f 7d       	andi	r19, 0xDF	; 223
     7ca:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7ce:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7d2:	3f 7d       	andi	r19, 0xDF	; 223
     7d4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7d8:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7dc:	31 60       	ori	r19, 0x01	; 1
     7de:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7e2:	88 23       	and	r24, r24
     7e4:	39 f1       	breq	.+78     	; 0x834 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7e6:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7ea:	35 ff       	sbrs	r19, 5
     7ec:	06 c0       	rjmp	.+12     	; 0x7fa <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7ee:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7f2:	3f 7d       	andi	r19, 0xDF	; 223
     7f4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     7f8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     7fa:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <USB_HostState>
     7fe:	31 30       	cpi	r19, 0x01	; 1
     800:	c1 f0       	breq	.+48     	; 0x832 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     802:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     806:	34 ff       	sbrs	r19, 4
     808:	09 c0       	rjmp	.+18     	; 0x81c <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     80a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     80e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     812:	8f 7e       	andi	r24, 0xEF	; 239
     814:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     818:	82 e0       	ldi	r24, 0x02	; 2

			break;
     81a:	0c c0       	rjmp	.+24     	; 0x834 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     81c:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     820:	31 ff       	sbrs	r19, 1
     822:	df cf       	rjmp	.-66     	; 0x7e2 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     824:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     828:	8d 7f       	andi	r24, 0xFD	; 253
     82a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     82e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     830:	01 c0       	rjmp	.+2      	; 0x834 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     832:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     834:	21 11       	cpse	r18, r1
     836:	05 c0       	rjmp	.+10     	; 0x842 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     838:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     83c:	2e 7f       	andi	r18, 0xFE	; 254
     83e:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     842:	99 23       	and	r25, r25
     844:	29 f0       	breq	.+10     	; 0x850 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     846:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     84a:	90 62       	ori	r25, 0x20	; 32
     84c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     850:	08 95       	ret

00000852 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     852:	ef 92       	push	r14
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	28 97       	sbiw	r28, 0x08	; 8
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     86c:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <USB_HostState>
     870:	8e 2f       	mov	r24, r30
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	8a 30       	cpi	r24, 0x0A	; 10
     876:	91 05       	cpc	r25, r1
     878:	08 f0       	brcs	.+2      	; 0x87c <USB_Host_ProcessNextHostState+0x2a>
     87a:	f5 c0       	rjmp	.+490    	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
     87c:	fc 01       	movw	r30, r24
     87e:	e4 5b       	subi	r30, 0xB4	; 180
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	11 c5       	rjmp	.+2594   	; 0x12a6 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     884:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     888:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     88c:	01 15       	cp	r16, r1
     88e:	11 05       	cpc	r17, r1
     890:	09 f4       	brne	.+2      	; 0x894 <USB_Host_ProcessNextHostState+0x42>
     892:	e9 c0       	rjmp	.+466    	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 df       	rcall	.-224    	; 0x7b8 <USB_Host_WaitMS>
     898:	88 23       	and	r24, r24
     89a:	31 f0       	breq	.+12     	; 0x8a8 <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     89c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
     8a0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     8a4:	91 e0       	ldi	r25, 0x01	; 1
					break;
     8a6:	d1 c0       	rjmp	.+418    	; 0xa4a <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     8a8:	01 50       	subi	r16, 0x01	; 1
     8aa:	11 09       	sbc	r17, r1
     8ac:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <WaitMSRemaining.2935+0x1>
     8b0:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <WaitMSRemaining.2935>
     8b4:	01 2b       	or	r16, r17
     8b6:	09 f0       	breq	.+2      	; 0x8ba <USB_Host_ProcessNextHostState+0x68>
     8b8:	d6 c0       	rjmp	.+428    	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     8ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     8be:	07 c0       	rjmp	.+14     	; 0x8ce <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8c0:	88 ee       	ldi	r24, 0xE8	; 232
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     8c8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
			break;
     8d2:	c9 c0       	rjmp	.+402    	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8d4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     8d8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     8dc:	9c 01       	movw	r18, r24
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	31 09       	sbc	r19, r1
     8e2:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <WaitMSRemaining.2935+0x1>
     8e6:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <WaitMSRemaining.2935>
     8ea:	89 2b       	or	r24, r25
     8ec:	39 f0       	breq	.+14     	; 0x8fc <USB_Host_ProcessNextHostState+0xaa>
     8ee:	8f ec       	ldi	r24, 0xCF	; 207
     8f0:	97 e0       	ldi	r25, 0x07	; 7
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <USB_Host_ProcessNextHostState+0xa0>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <USB_Host_ProcessNextHostState+0xa6>
     8f8:	00 00       	nop
     8fa:	b5 c0       	rjmp	.+362    	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     8fc:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     8fe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     902:	80 61       	ori	r24, 0x10	; 16
     904:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     908:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     90c:	8b 7f       	andi	r24, 0xFB	; 251
     90e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     912:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     916:	80 61       	ori	r24, 0x10	; 16
     918:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     91c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     920:	82 60       	ori	r24, 0x02	; 2
     922:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	d2 cf       	rjmp	.-92     	; 0x8ce <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     92a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     92e:	80 ff       	sbrs	r24, 0
     930:	9a c0       	rjmp	.+308    	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     932:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     93c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     940:	8d 7f       	andi	r24, 0xFD	; 253
     942:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     946:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     94a:	8d 7f       	andi	r24, 0xFD	; 253
     94c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     950:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     954:	82 60       	ori	r24, 0x02	; 2
     956:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     95a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     95e:	81 60       	ori	r24, 0x01	; 1
     960:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     964:	e8 d0       	rcall	.+464    	; 0xb36 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     966:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     96a:	84 e6       	ldi	r24, 0x64	; 100
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     972:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     976:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     978:	5c c0       	rjmp	.+184    	; 0xa32 <USB_Host_ProcessNextHostState+0x1e0>
     97a:	cd de       	rcall	.-614    	; 0x716 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     97c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     980:	88 ec       	ldi	r24, 0xC8	; 200
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     988:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     98c:	86 e0       	ldi	r24, 0x06	; 6
     98e:	51 c0       	rjmp	.+162    	; 0xa32 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     990:	e1 2c       	mov	r14, r1
     992:	00 e4       	ldi	r16, 0x40	; 64
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	6f d0       	rcall	.+222    	; 0xa7e <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9a0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9a4:	87 fd       	sbrc	r24, 7
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	4e c0       	rjmp	.+156    	; 0xa4a <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	8e cf       	rjmp	.-228    	; 0x8ce <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9b2:	88 e0       	ldi	r24, 0x08	; 8
     9b4:	e1 e0       	ldi	r30, 0x01	; 1
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	a7 e1       	ldi	r26, 0x17	; 23
     9ba:	b1 e0       	ldi	r27, 0x01	; 1
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <USB_Host_ProcessNextHostState+0x16a>
     9c4:	ce 01       	movw	r24, r28
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	28 d3       	rcall	.+1616   	; 0x101a <USB_Host_SendControlRequest>
     9ca:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9cc:	3d c0       	rjmp	.+122    	; 0xa48 <USB_Host_ProcessNextHostState+0x1f6>
     9ce:	88 85       	ldd	r24, Y+8	; 0x08
     9d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     9d4:	a0 de       	rcall	.-704    	; 0x716 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9d6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     9da:	88 ec       	ldi	r24, 0xC8	; 200
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     9e2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9ea:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	e1 2c       	mov	r14, r1
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	41 d0       	rcall	.+130    	; 0xa7e <Pipe_ConfigurePipe>
     9fc:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a00:	87 ff       	sbrs	r24, 7
     a02:	d2 cf       	rjmp	.-92     	; 0x9a8 <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a04:	88 e0       	ldi	r24, 0x08	; 8
     a06:	e9 e0       	ldi	r30, 0x09	; 9
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	a7 e1       	ldi	r26, 0x17	; 23
     a0c:	b1 e0       	ldi	r27, 0x01	; 1
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a14:	e1 f7       	brne	.-8      	; 0xa0e <USB_Host_ProcessNextHostState+0x1bc>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	ff d2       	rcall	.+1534   	; 0x101a <USB_Host_SendControlRequest>
     a1c:	81 11       	cpse	r24, r1
     a1e:	14 c0       	rjmp	.+40     	; 0xa48 <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a20:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     a24:	84 e6       	ldi	r24, 0x64	; 100
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     a2c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     a30:	89 e0       	ldi	r24, 0x09	; 9
     a32:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a36:	17 c0       	rjmp	.+46     	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a3e:	8a e0       	ldi	r24, 0x0A	; 10
     a40:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     a44:	86 dc       	rcall	.-1780   	; 0x352 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a4e:	21 30       	cpi	r18, 0x01	; 1
     a50:	51 f0       	breq	.+20     	; 0xa66 <USB_Host_ProcessNextHostState+0x214>
     a52:	68 2f       	mov	r22, r24
     a54:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a56:	bb dc       	rcall	.-1674   	; 0x3ce <EVENT_USB_Host_DeviceEnumerationFailed>
     a58:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a62:	71 dc       	rcall	.-1822   	; 0x346 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a64:	c2 d0       	rcall	.+388    	; 0xbea <USB_ResetInterface>
     a66:	28 96       	adiw	r28, 0x08	; 8
	}
}
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ef 90       	pop	r14
     a7c:	08 95       	ret

00000a7e <Pipe_ConfigurePipe>:
     a7e:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	2f 70       	andi	r18, 0x0F	; 15
     a86:	42 2b       	or	r20, r18
     a88:	90 e4       	ldi	r25, 0x40	; 64
     a8a:	69 9f       	mul	r22, r25
     a8c:	b0 01       	movw	r22, r0
     a8e:	11 24       	eor	r1, r1
     a90:	64 2b       	or	r22, r20
     a92:	38 2f       	mov	r19, r24
     a94:	2e 2d       	mov	r18, r14
     a96:	22 60       	ori	r18, 0x02	; 2
     a98:	37 30       	cpi	r19, 0x07	; 7
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <Pipe_ConfigurePipe+0x20>
     a9c:	45 c0       	rjmp	.+138    	; 0xb28 <Pipe_ConfigurePipe+0xaa>
     a9e:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     aa2:	38 13       	cpse	r19, r24
     aa4:	13 c0       	rjmp	.+38     	; 0xacc <Pipe_ConfigurePipe+0x4e>
     aa6:	48 e0       	ldi	r20, 0x08	; 8
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	40 17       	cp	r20, r16
     aae:	51 07       	cpc	r21, r17
     ab0:	38 f0       	brcs	.+14     	; 0xac0 <Pipe_ConfigurePipe+0x42>
     ab2:	92 95       	swap	r25
     ab4:	90 7f       	andi	r25, 0xF0	; 240
     ab6:	92 2b       	or	r25, r18
     ab8:	e6 2f       	mov	r30, r22
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	0e c0       	rjmp	.+28     	; 0xadc <Pipe_ConfigurePipe+0x5e>
     ac0:	95 30       	cpi	r25, 0x05	; 5
     ac2:	b9 f3       	breq	.-18     	; 0xab2 <Pipe_ConfigurePipe+0x34>
     ac4:	9f 5f       	subi	r25, 0xFF	; 255
     ac6:	44 0f       	add	r20, r20
     ac8:	55 1f       	adc	r21, r21
     aca:	f0 cf       	rjmp	.-32     	; 0xaac <Pipe_ConfigurePipe+0x2e>
     acc:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ad0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     ad4:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     ad8:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     adc:	91 fd       	sbrc	r25, 1
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <Pipe_ConfigurePipe+0x66>
     ae0:	3f 5f       	subi	r19, 0xFF	; 255
     ae2:	da cf       	rjmp	.-76     	; 0xa98 <Pipe_ConfigurePipe+0x1a>
     ae4:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ae8:	4e 7f       	andi	r20, 0xFE	; 254
     aea:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     aee:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     af2:	4d 7f       	andi	r20, 0xFD	; 253
     af4:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     af8:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     afc:	41 60       	ori	r20, 0x01	; 1
     afe:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b02:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     b06:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     b0a:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     b0e:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     b12:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b16:	90 62       	ori	r25, 0x20	; 32
     b18:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b1c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     b20:	97 fd       	sbrc	r25, 7
     b22:	de cf       	rjmp	.-68     	; 0xae0 <Pipe_ConfigurePipe+0x62>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <Pipe_ConfigurePipe+0xb0>
     b28:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ef 90       	pop	r14
     b34:	08 95       	ret

00000b36 <Pipe_ClearPipes>:
     b36:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b40:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     b44:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b48:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     b4c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b50:	9e 7f       	andi	r25, 0xFE	; 254
     b52:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b56:	8f 5f       	subi	r24, 0xFF	; 255
     b58:	87 30       	cpi	r24, 0x07	; 7
     b5a:	81 f7       	brne	.-32     	; 0xb3c <Pipe_ClearPipes+0x6>
     b5c:	08 95       	ret

00000b5e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b5e:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b62:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     b66:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b68:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b6c:	90 73       	andi	r25, 0x30	; 48
     b6e:	90 31       	cpi	r25, 0x10	; 16
     b70:	29 f4       	brne	.+10     	; 0xb7c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b72:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     b76:	90 ff       	sbrs	r25, 0
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <Pipe_WaitUntilReady+0x26>
     b7a:	19 c0       	rjmp	.+50     	; 0xbae <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b7c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b80:	92 fd       	sbrc	r25, 2
     b82:	15 c0       	rjmp	.+42     	; 0xbae <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b84:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b88:	91 fd       	sbrc	r25, 1
     b8a:	13 c0       	rjmp	.+38     	; 0xbb2 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b8c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_HostState>
     b90:	91 30       	cpi	r25, 0x01	; 1
     b92:	89 f0       	breq	.+34     	; 0xbb6 <Pipe_WaitUntilReady+0x58>
     b94:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b98:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b9c:	42 17       	cp	r20, r18
     b9e:	53 07       	cpc	r21, r19
     ba0:	19 f3       	breq	.-58     	; 0xb68 <Pipe_WaitUntilReady+0xa>
     ba2:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ba4:	11 f0       	breq	.+4      	; 0xbaa <Pipe_WaitUntilReady+0x4c>
     ba6:	a9 01       	movw	r20, r18
     ba8:	df cf       	rjmp	.-66     	; 0xb68 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     bb6:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bb8:	08 95       	ret

00000bba <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bba:	70 d0       	rcall	.+224    	; 0xc9c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bbc:	77 d0       	rcall	.+238    	; 0xcac <USB_INT_ClearAllInterrupts>
     bbe:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24
     bc8:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	80 83       	st	Z, r24
     bd2:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd4:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	8c 91       	ld	r24, X
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	8c 93       	st	X, r24
     bde:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	80 83       	st	Z, r24
     be4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be8:	08 95       	ret

00000bea <USB_ResetInterface>:
     bea:	58 d0       	rcall	.+176    	; 0xc9c <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bec:	5f d0       	rcall	.+190    	; 0xcac <USB_INT_ClearAllInterrupts>
     bee:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bf8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c0c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c16:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c18:	89 bd       	out	0x29, r24	; 41
     c1a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c1c:	89 bd       	out	0x29, r24	; 41
     c1e:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c20:	00 fe       	sbrs	r0, 0
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <USB_ResetInterface+0x34>
     c24:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c26:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
     c2a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     c2e:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c30:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c34:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c38:	80 64       	ori	r24, 0x40	; 64
     c3a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c3e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c48:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c52:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     c56:	8f 7e       	andi	r24, 0xEF	; 239
     c58:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c5c:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     c5e:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c60:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c6a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c74:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c78:	8e 7f       	andi	r24, 0xFE	; 254
     c7a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     c7e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c82:	80 61       	ori	r24, 0x10	; 16
     c84:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c88:	08 95       	ret

00000c8a <USB_Init>:
     c8a:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	81 60       	ori	r24, 0x01	; 1
     c92:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_IsInitialized>

	USB_ResetInterface();
     c9a:	a7 cf       	rjmp	.-178    	; 0xbea <USB_ResetInterface>

00000c9c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c9c:	e8 ed       	ldi	r30, 0xD8	; 216
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8c 7f       	andi	r24, 0xFC	; 252
     ca4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ca6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     caa:	08 95       	ret

00000cac <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cac:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cb0:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cb4:	08 95       	ret

00000cb6 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	0b b6       	in	r0, 0x3b	; 59
     cc2:	0f 92       	push	r0
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cdc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ce0:	85 ff       	sbrs	r24, 5
     ce2:	0a c0       	rjmp	.+20     	; 0xcf8 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ce4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ce8:	85 ff       	sbrs	r24, 5
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cec:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cf0:	8f 7d       	andi	r24, 0xDF	; 223
     cf2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cf6:	6a d1       	rcall	.+724    	; 0xfcc <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cf8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cfc:	81 ff       	sbrs	r24, 1
     cfe:	15 c0       	rjmp	.+42     	; 0xd2a <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d00:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d04:	81 ff       	sbrs	r24, 1
     d06:	11 c0       	rjmp	.+34     	; 0xd2a <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d08:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d0c:	8d 7f       	andi	r24, 0xFD	; 253
     d0e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d12:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d16:	8e 7f       	andi	r24, 0xFE	; 254
     d18:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d1c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d20:	8d 7f       	andi	r24, 0xFD	; 253
     d22:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     d26:	0f db       	rcall	.-2530   	; 0x346 <EVENT_USB_Host_DeviceUnattached>
     d28:	60 df       	rcall	.-320    	; 0xbea <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d2a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d2e:	81 ff       	sbrs	r24, 1
     d30:	15 c0       	rjmp	.+42     	; 0xd5c <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d32:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     d36:	81 ff       	sbrs	r24, 1
     d38:	11 c0       	rjmp	.+34     	; 0xd5c <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d3a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d44:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d46:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	2d db       	rcall	.-2470   	; 0x3ae <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d54:	f8 da       	rcall	.-2576   	; 0x346 <EVENT_USB_Host_DeviceUnattached>
     d56:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     d58:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
     d5c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d60:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d62:	17 c0       	rjmp	.+46     	; 0xd92 <__vector_10+0xdc>
     d64:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d68:	80 ff       	sbrs	r24, 0
     d6a:	13 c0       	rjmp	.+38     	; 0xd92 <__vector_10+0xdc>
     d6c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d70:	8e 7f       	andi	r24, 0xFE	; 254
     d72:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d76:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d80:	dc da       	rcall	.-2632   	; 0x33a <EVENT_USB_Host_DeviceAttached>
     d82:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d86:	82 60       	ori	r24, 0x02	; 2
     d88:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d8c:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d8e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
     d92:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d96:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d98:	0e c0       	rjmp	.+28     	; 0xdb6 <__vector_10+0x100>
     d9a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d9e:	82 ff       	sbrs	r24, 2
     da0:	0a c0       	rjmp	.+20     	; 0xdb6 <__vector_10+0x100>
     da2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	0e db       	rcall	.-2532   	; 0x3ce <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     db2:	c9 da       	rcall	.-2670   	; 0x346 <EVENT_USB_Host_DeviceUnattached>
     db4:	1a df       	rcall	.-460    	; 0xbea <USB_ResetInterface>

		USB_ResetInterface();
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0b be       	out	0x3b, r0	; 59
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <Pipe_Read_Stream_LE>:
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
     dee:	8b 01       	movw	r16, r22
     df0:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     df2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     df6:	8f 7c       	andi	r24, 0xCF	; 207
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     dfe:	af de       	rcall	.-674    	; 0xb5e <Pipe_WaitUntilReady>
     e00:	81 11       	cpse	r24, r1
     e02:	32 c0       	rjmp	.+100    	; 0xe68 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e04:	e1 14       	cp	r14, r1
     e06:	f1 04       	cpc	r15, r1
     e08:	39 f0       	breq	.+14     	; 0xe18 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     e0a:	f7 01       	movw	r30, r14
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	08 1b       	sub	r16, r24
     e12:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e14:	c8 0f       	add	r28, r24
     e16:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e18:	c1 2c       	mov	r12, r1
     e1a:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e1c:	01 15       	cp	r16, r1
     e1e:	11 05       	cpc	r17, r1
     e20:	11 f1       	breq	.+68     	; 0xe66 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e22:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e26:	85 fd       	sbrc	r24, 5
     e28:	15 c0       	rjmp	.+42     	; 0xe54 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e2a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e2e:	8e 77       	andi	r24, 0x7E	; 126
     e30:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e34:	e1 14       	cp	r14, r1
     e36:	f1 04       	cpc	r15, r1
     e38:	49 f0       	breq	.+18     	; 0xe4c <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     e3a:	f7 01       	movw	r30, r14
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	c8 0e       	add	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d1 82       	std	Z+1, r13	; 0x01
     e46:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     e48:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e4a:	0e c0       	rjmp	.+28     	; 0xe68 <Pipe_Read_Stream_LE+0x8c>
     e4c:	88 de       	rcall	.-752    	; 0xb5e <Pipe_WaitUntilReady>
     e4e:	88 23       	and	r24, r24
     e50:	29 f3       	breq	.-54     	; 0xe1c <Pipe_Read_Stream_LE+0x40>
     e52:	0a c0       	rjmp	.+20     	; 0xe68 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e54:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e58:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e5a:	01 50       	subi	r16, 0x01	; 1
     e5c:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     e5e:	ff ef       	ldi	r31, 0xFF	; 255
     e60:	cf 1a       	sub	r12, r31
     e62:	df 0a       	sbc	r13, r31
     e64:	db cf       	rjmp	.-74     	; 0xe1c <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     e66:	80 e0       	ldi	r24, 0x00	; 0
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	08 95       	ret

00000e7a <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	dc 01       	movw	r26, r24
     e80:	eb 01       	movw	r28, r22
     e82:	e8 81       	ld	r30, Y
     e84:	f9 81       	ldd	r31, Y+1	; 0x01
     e86:	20 81       	ld	r18, Z
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	11 97       	sbiw	r26, 0x01	; 1
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	82 17       	cp	r24, r18
     e92:	93 07       	cpc	r25, r19
     e94:	08 f4       	brcc	.+2      	; 0xe98 <USB_GetNextDescriptor+0x1e>
     e96:	9c 01       	movw	r18, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	eb 01       	movw	r28, r22
     e9e:	f9 83       	std	Y+1, r31	; 0x01
     ea0:	e8 83       	st	Y, r30
     ea2:	8d 91       	ld	r24, X+
     ea4:	9c 91       	ld	r25, X
     ea6:	11 97       	sbiw	r26, 0x01	; 1
     ea8:	82 1b       	sub	r24, r18
     eaa:	93 0b       	sbc	r25, r19
     eac:	8d 93       	st	X+, r24
     eae:	9c 93       	st	X, r25
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <USB_Host_GetDeviceConfigDescriptor>:
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	29 97       	sbiw	r28, 0x09	; 9
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	6b 01       	movw	r12, r22
     ed8:	8a 01       	movw	r16, r20
     eda:	79 01       	movw	r14, r18
     edc:	90 e8       	ldi	r25, 0x80	; 128
     ede:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <USB_ControlRequest>
     ee2:	96 e0       	ldi	r25, 0x06	; 6
     ee4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <USB_ControlRequest+0x1>
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	92 60       	ori	r25, 0x02	; 2
     eee:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <USB_ControlRequest+0x3>
     ef2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_ControlRequest+0x2>
     ef6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_ControlRequest+0x5>
     efa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USB_ControlRequest+0x4>
     efe:	89 e0       	ldi	r24, 0x09	; 9
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <USB_ControlRequest+0x7>
     f06:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_ControlRequest+0x6>
     f0a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	83 d0       	rcall	.+262    	; 0x101a <USB_Host_SendControlRequest>
     f14:	81 11       	cpse	r24, r1
     f16:	19 c0       	rjmp	.+50     	; 0xf4a <USB_Host_GetDeviceConfigDescriptor+0x94>
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	f6 01       	movw	r30, r12
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	e8 16       	cp	r14, r24
     f24:	f9 06       	cpc	r15, r25
     f26:	70 f0       	brcs	.+28     	; 0xf44 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     f28:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <USB_ControlRequest+0x7>
     f2c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_ControlRequest+0x6>
     f30:	c8 01       	movw	r24, r16
     f32:	73 d0       	rcall	.+230    	; 0x101a <USB_Host_SendControlRequest>
     f34:	81 11       	cpse	r24, r1
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <USB_Host_GetDeviceConfigDescriptor+0x94>
     f38:	f8 01       	movw	r30, r16
     f3a:	81 81       	ldd	r24, Z+1	; 0x01
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	21 f4       	brne	.+8      	; 0xf48 <USB_Host_GetDeviceConfigDescriptor+0x92>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <USB_Host_GetDeviceConfigDescriptor+0x94>
     f44:	85 e0       	ldi	r24, 0x05	; 5
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <USB_Host_GetDeviceConfigDescriptor+0x94>
     f48:	86 e0       	ldi	r24, 0x06	; 6
     f4a:	29 96       	adiw	r28, 0x09	; 9
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	08 95       	ret

00000f68 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	8c 01       	movw	r16, r24
     f7e:	eb 01       	movw	r28, r22
     f80:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f82:	f8 01       	movw	r30, r16
     f84:	e0 80       	ld	r14, Z
     f86:	f1 80       	ldd	r15, Z+1	; 0x01
     f88:	e1 14       	cp	r14, r1
     f8a:	f1 04       	cpc	r15, r1
     f8c:	99 f0       	breq	.+38     	; 0xfb4 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f8e:	a8 80       	ld	r10, Y
     f90:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     f92:	be 01       	movw	r22, r28
     f94:	c8 01       	movw	r24, r16
     f96:	71 df       	rcall	.-286    	; 0xe7a <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f98:	88 81       	ld	r24, Y
     f9a:	99 81       	ldd	r25, Y+1	; 0x01
     f9c:	f6 01       	movw	r30, r12
     f9e:	09 95       	icall
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	79 f3       	breq	.-34     	; 0xf82 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     fa8:	b9 82       	std	Y+1, r11	; 0x01
     faa:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     fac:	f8 01       	movw	r30, r16
     fae:	f1 82       	std	Z+1, r15	; 0x01
     fb0:	e0 82       	st	Z, r14
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	08 95       	ret

00000fcc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     fcc:	08 95       	ret

00000fce <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fd6:	c9 ee       	ldi	r28, 0xE9	; 233
     fd8:	d3 e0       	ldi	r29, 0x03	; 3
     fda:	11 11       	cpse	r17, r1
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     fde:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fe2:	83 fd       	sbrc	r24, 3
     fe4:	15 c0       	rjmp	.+42     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	e7 db       	rcall	.-2098   	; 0x7b8 <USB_Host_WaitMS>
     fea:	81 11       	cpse	r24, r1
     fec:	12 c0       	rjmp	.+36     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     fee:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ff0:	a1 f7       	brne	.-24     	; 0xfda <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ff6:	11 30       	cpi	r17, 0x01	; 1
     ff8:	29 f4       	brne	.+10     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ffa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ffe:	80 ff       	sbrs	r24, 0
    1000:	f2 cf       	rjmp	.-28     	; 0xfe6 <USB_Host_WaitForIOS+0x18>
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1004:	12 30       	cpi	r17, 0x02	; 2
    1006:	79 f7       	brne	.-34     	; 0xfe6 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1008:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    100c:	82 ff       	sbrs	r24, 2
    100e:	eb cf       	rjmp	.-42     	; 0xfe6 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1010:	80 e0       	ldi	r24, 0x00	; 0
}
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	08 95       	ret

0000101a <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1026:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    102a:	81 70       	andi	r24, 0x01	; 1
    102c:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    102e:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <USB_ControlRequest+0x6>
    1032:	d0 91 1e 01 	lds	r29, 0x011E	; 0x80011e <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1036:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	ba db       	rcall	.-2188   	; 0x7b8 <USB_Host_WaitMS>
    1044:	81 11       	cpse	r24, r1
    1046:	c8 c0       	rjmp	.+400    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1048:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    104c:	8f 7c       	andi	r24, 0xCF	; 207
    104e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1052:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    1056:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    105a:	8f 7e       	andi	r24, 0xEF	; 239
    105c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1060:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1064:	8f 7b       	andi	r24, 0xBF	; 191
    1066:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    106a:	e7 e1       	ldi	r30, 0x17	; 23
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	8f e1       	ldi	r24, 0x1F	; 31
    1070:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1072:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1074:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1078:	8e 17       	cp	r24, r30
    107a:	9f 07       	cpc	r25, r31
    107c:	d1 f7       	brne	.-12     	; 0x1072 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    107e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1082:	87 77       	andi	r24, 0x77	; 119
    1084:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	a1 df       	rcall	.-190    	; 0xfce <USB_Host_WaitForIOS>
    108c:	81 11       	cpse	r24, r1
    108e:	a4 c0       	rjmp	.+328    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1090:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8d db       	rcall	.-2278   	; 0x7b8 <USB_Host_WaitMS>
    109e:	81 11       	cpse	r24, r1
    10a0:	9b c0       	rjmp	.+310    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10a2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest>
    10a6:	87 ff       	sbrs	r24, 7
    10a8:	4e c0       	rjmp	.+156    	; 0x1146 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10aa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10ae:	8f 7c       	andi	r24, 0xCF	; 207
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10b6:	01 15       	cp	r16, r1
    10b8:	11 05       	cpc	r17, r1
    10ba:	09 f0       	breq	.+2      	; 0x10be <USB_Host_SendControlRequest+0xa4>
    10bc:	3a c0       	rjmp	.+116    	; 0x1132 <USB_Host_SendControlRequest+0x118>
    10be:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10c2:	8f 7c       	andi	r24, 0xCF	; 207
    10c4:	80 62       	ori	r24, 0x20	; 32
    10c6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ca:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	7b df       	rcall	.-266    	; 0xfce <USB_Host_WaitForIOS>
    10d8:	81 11       	cpse	r24, r1
    10da:	7e c0       	rjmp	.+252    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10dc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10e0:	8b 77       	andi	r24, 0x7B	; 123
    10e2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	72 df       	rcall	.-284    	; 0xfce <USB_Host_WaitForIOS>
    10ea:	76 c0       	rjmp	.+236    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ec:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10f0:	8f 7b       	andi	r24, 0xBF	; 191
    10f2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	6a df       	rcall	.-300    	; 0xfce <USB_Host_WaitForIOS>
    10fa:	81 11       	cpse	r24, r1
    10fc:	6d c0       	rjmp	.+218    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10fe:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1102:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1106:	89 2b       	or	r24, r25
    1108:	11 f4       	brne	.+4      	; 0x110e <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    110a:	c0 e0       	ldi	r28, 0x00	; 0
    110c:	d0 e0       	ldi	r29, 0x00	; 0
    110e:	f8 01       	movw	r30, r16
    1110:	8f 01       	movw	r16, r30
    1112:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1116:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    111a:	89 2b       	or	r24, r25
    111c:	69 f4       	brne	.+26     	; 0x1138 <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    111e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1122:	80 64       	ori	r24, 0x40	; 64
    1124:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1128:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    112c:	8e 77       	andi	r24, 0x7E	; 126
    112e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1132:	20 97       	sbiw	r28, 0x00	; 0
    1134:	d9 f6       	brne	.-74     	; 0x10ec <USB_Host_SendControlRequest+0xd2>
    1136:	c3 cf       	rjmp	.-122    	; 0x10be <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1138:	20 97       	sbiw	r28, 0x00	; 0
    113a:	89 f3       	breq	.-30     	; 0x111e <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    113c:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    1140:	81 93       	st	Z+, r24
					DataLen--;
    1142:	21 97       	sbiw	r28, 0x01	; 1
    1144:	e5 cf       	rjmp	.-54     	; 0x1110 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1146:	01 15       	cp	r16, r1
    1148:	11 05       	cpc	r17, r1
    114a:	91 f1       	breq	.+100    	; 0x11b0 <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    114c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1150:	8f 7c       	andi	r24, 0xCF	; 207
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1158:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    115c:	8f 7b       	andi	r24, 0xBF	; 191
    115e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1166:	e1 f0       	breq	.+56     	; 0x11a0 <USB_Host_SendControlRequest+0x186>
    1168:	32 df       	rcall	.-412    	; 0xfce <USB_Host_WaitForIOS>
    116a:	81 11       	cpse	r24, r1
    116c:	35 c0       	rjmp	.+106    	; 0x11d8 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    116e:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1172:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	28 17       	cp	r18, r24
    117e:	39 07       	cpc	r19, r25
    1180:	48 f4       	brcc	.+18     	; 0x1194 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    1182:	0f 5f       	subi	r16, 0xFF	; 255
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
    1186:	f8 01       	movw	r30, r16
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    118c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    1190:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1192:	69 f7       	brne	.-38     	; 0x116e <USB_Host_SendControlRequest+0x154>
    1194:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1198:	8b 77       	andi	r24, 0x7B	; 123
    119a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    119e:	e1 cf       	rjmp	.-62     	; 0x1162 <USB_Host_SendControlRequest+0x148>
    11a0:	16 df       	rcall	.-468    	; 0xfce <USB_Host_WaitForIOS>
    11a2:	81 11       	cpse	r24, r1
    11a4:	19 c0       	rjmp	.+50     	; 0x11d8 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11a6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11aa:	80 64       	ori	r24, 0x40	; 64
    11ac:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11b0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    11b4:	8f 7c       	andi	r24, 0xCF	; 207
    11b6:	80 61       	ori	r24, 0x10	; 16
    11b8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11bc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11c0:	8f 7b       	andi	r24, 0xBF	; 191
    11c2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	02 df       	rcall	.-508    	; 0xfce <USB_Host_WaitForIOS>
    11ca:	81 11       	cpse	r24, r1
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11ce:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11d2:	9e 77       	andi	r25, 0x7E	; 126
    11d4:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11d8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11dc:	90 64       	ori	r25, 0x40	; 64
    11de:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    11e2:	f1 10       	cpse	r15, r1
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11e6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    11ea:	9e 7f       	andi	r25, 0xFE	; 254
    11ec:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    11f6:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	08 95       	ret

00001206 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1206:	cf 93       	push	r28
    1208:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    120a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_ControlRequest>
    120e:	89 e0       	ldi	r24, 0x09	; 9
    1210:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_ControlRequest+0x1>
    1214:	8c 2f       	mov	r24, r28
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <USB_ControlRequest+0x3>
    121c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_ControlRequest+0x2>
    1220:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_ControlRequest+0x5>
    1224:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USB_ControlRequest+0x4>
    1228:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_ControlRequest+0x7>
    122c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1230:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	f0 de       	rcall	.-544    	; 0x101a <USB_Host_SendControlRequest>
    123a:	81 11       	cpse	r24, r1
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    123e:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1242:	c1 11       	cpse	r28, r1
    1244:	02 c0       	rjmp	.+4      	; 0x124a <USB_Host_SetDeviceConfiguration+0x44>
    1246:	9a e0       	ldi	r25, 0x0A	; 10
    1248:	01 c0       	rjmp	.+2      	; 0x124c <USB_Host_SetDeviceConfiguration+0x46>
    124a:	9b e0       	ldi	r25, 0x0B	; 11
    124c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_HostState>
	}

	return ErrorCode;
}
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    125a:	c7 ea       	ldi	r28, 0xA7	; 167
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    125e:	18 81       	ld	r17, Y
    1260:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1262:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1264:	f6 da       	rcall	.-2580   	; 0x852 <USB_Host_ProcessNextHostState>
    1266:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	08 95       	ret

00001270 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1270:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1274:	95 ff       	sbrs	r25, 5
    1276:	fc cf       	rjmp	.-8      	; 0x1270 <Serial_putchar>
				UDR1 = DataByte;
    1278:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	08 95       	ret

00001282 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1282:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1286:	87 ff       	sbrs	r24, 7
    1288:	08 c0       	rjmp	.+16     	; 0x129a <Serial_getchar+0x18>
    128a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    128e:	87 ff       	sbrs	r24, 7
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1292:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	08 95       	ret
	  return _FDEV_EOF;
    129a:	8e ef       	ldi	r24, 0xFE	; 254
    129c:	9f ef       	ldi	r25, 0xFF	; 255
    129e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    12a4:	08 95       	ret

000012a6 <__tablejump2__>:
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	00 24       	eor	r0, r0
    12ac:	00 1c       	adc	r0, r0
    12ae:	0b be       	out	0x3b, r0	; 59
    12b0:	07 90       	elpm	r0, Z+
    12b2:	f6 91       	elpm	r31, Z
    12b4:	e0 2d       	mov	r30, r0
    12b6:	09 94       	ijmp

000012b8 <fputc>:
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	fb 01       	movw	r30, r22
    12c2:	23 81       	ldd	r18, Z+3	; 0x03
    12c4:	21 fd       	sbrc	r18, 1
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <fputc+0x16>
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	9f ef       	ldi	r25, 0xFF	; 255
    12cc:	2c c0       	rjmp	.+88     	; 0x1326 <fputc+0x6e>
    12ce:	22 ff       	sbrs	r18, 2
    12d0:	16 c0       	rjmp	.+44     	; 0x12fe <fputc+0x46>
    12d2:	46 81       	ldd	r20, Z+6	; 0x06
    12d4:	57 81       	ldd	r21, Z+7	; 0x07
    12d6:	24 81       	ldd	r18, Z+4	; 0x04
    12d8:	35 81       	ldd	r19, Z+5	; 0x05
    12da:	42 17       	cp	r20, r18
    12dc:	53 07       	cpc	r21, r19
    12de:	44 f4       	brge	.+16     	; 0x12f0 <fputc+0x38>
    12e0:	a0 81       	ld	r26, Z
    12e2:	b1 81       	ldd	r27, Z+1	; 0x01
    12e4:	9d 01       	movw	r18, r26
    12e6:	2f 5f       	subi	r18, 0xFF	; 255
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	31 83       	std	Z+1, r19	; 0x01
    12ec:	20 83       	st	Z, r18
    12ee:	8c 93       	st	X, r24
    12f0:	26 81       	ldd	r18, Z+6	; 0x06
    12f2:	37 81       	ldd	r19, Z+7	; 0x07
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	37 83       	std	Z+7, r19	; 0x07
    12fa:	26 83       	std	Z+6, r18	; 0x06
    12fc:	14 c0       	rjmp	.+40     	; 0x1326 <fputc+0x6e>
    12fe:	8b 01       	movw	r16, r22
    1300:	ec 01       	movw	r28, r24
    1302:	fb 01       	movw	r30, r22
    1304:	00 84       	ldd	r0, Z+8	; 0x08
    1306:	f1 85       	ldd	r31, Z+9	; 0x09
    1308:	e0 2d       	mov	r30, r0
    130a:	09 95       	icall
    130c:	89 2b       	or	r24, r25
    130e:	e1 f6       	brne	.-72     	; 0x12c8 <fputc+0x10>
    1310:	d8 01       	movw	r26, r16
    1312:	16 96       	adiw	r26, 0x06	; 6
    1314:	8d 91       	ld	r24, X+
    1316:	9c 91       	ld	r25, X
    1318:	17 97       	sbiw	r26, 0x07	; 7
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	17 96       	adiw	r26, 0x07	; 7
    131e:	9c 93       	st	X, r25
    1320:	8e 93       	st	-X, r24
    1322:	16 97       	sbiw	r26, 0x06	; 6
    1324:	ce 01       	movw	r24, r28
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <printf_P>:
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	ae 01       	movw	r20, r28
    133e:	49 5f       	subi	r20, 0xF9	; 249
    1340:	5f 4f       	sbci	r21, 0xFF	; 255
    1342:	da 01       	movw	r26, r20
    1344:	6d 91       	ld	r22, X+
    1346:	7d 91       	ld	r23, X+
    1348:	ad 01       	movw	r20, r26
    134a:	0e e2       	ldi	r16, 0x2E	; 46
    134c:	11 e0       	ldi	r17, 0x01	; 1
    134e:	f8 01       	movw	r30, r16
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	dc 01       	movw	r26, r24
    1356:	13 96       	adiw	r26, 0x03	; 3
    1358:	2c 91       	ld	r18, X
    135a:	13 97       	sbiw	r26, 0x03	; 3
    135c:	28 60       	ori	r18, 0x08	; 8
    135e:	13 96       	adiw	r26, 0x03	; 3
    1360:	2c 93       	st	X, r18
    1362:	3e d0       	rcall	.+124    	; 0x13e0 <vfprintf>
    1364:	d8 01       	movw	r26, r16
    1366:	12 96       	adiw	r26, 0x02	; 2
    1368:	ed 91       	ld	r30, X+
    136a:	fc 91       	ld	r31, X
    136c:	13 97       	sbiw	r26, 0x03	; 3
    136e:	23 81       	ldd	r18, Z+3	; 0x03
    1370:	27 7f       	andi	r18, 0xF7	; 247
    1372:	23 83       	std	Z+3, r18	; 0x03
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <puts_P>:
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	8c 01       	movw	r16, r24
    1388:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__iob+0x2>
    138c:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__iob+0x3>
    1390:	83 81       	ldd	r24, Z+3	; 0x03
    1392:	81 ff       	sbrs	r24, 1
    1394:	1b c0       	rjmp	.+54     	; 0x13cc <puts_P+0x4e>
    1396:	d0 e0       	ldi	r29, 0x00	; 0
    1398:	c0 e0       	ldi	r28, 0x00	; 0
    139a:	f8 01       	movw	r30, r16
    139c:	84 91       	lpm	r24, Z
    139e:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__iob+0x2>
    13a2:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__iob+0x3>
    13a6:	db 01       	movw	r26, r22
    13a8:	18 96       	adiw	r26, 0x08	; 8
    13aa:	ed 91       	ld	r30, X+
    13ac:	fc 91       	ld	r31, X
    13ae:	19 97       	sbiw	r26, 0x09	; 9
    13b0:	88 23       	and	r24, r24
    13b2:	41 f0       	breq	.+16     	; 0x13c4 <puts_P+0x46>
    13b4:	09 95       	icall
    13b6:	89 2b       	or	r24, r25
    13b8:	11 f0       	breq	.+4      	; 0x13be <puts_P+0x40>
    13ba:	df ef       	ldi	r29, 0xFF	; 255
    13bc:	cf ef       	ldi	r28, 0xFF	; 255
    13be:	0f 5f       	subi	r16, 0xFF	; 255
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	eb cf       	rjmp	.-42     	; 0x139a <puts_P+0x1c>
    13c4:	8a e0       	ldi	r24, 0x0A	; 10
    13c6:	09 95       	icall
    13c8:	89 2b       	or	r24, r25
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <puts_P+0x54>
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <puts_P+0x58>
    13d2:	8d 2f       	mov	r24, r29
    13d4:	9c 2f       	mov	r25, r28
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <vfprintf>:
    13e0:	2f 92       	push	r2
    13e2:	3f 92       	push	r3
    13e4:	4f 92       	push	r4
    13e6:	5f 92       	push	r5
    13e8:	6f 92       	push	r6
    13ea:	7f 92       	push	r7
    13ec:	8f 92       	push	r8
    13ee:	9f 92       	push	r9
    13f0:	af 92       	push	r10
    13f2:	bf 92       	push	r11
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	2b 97       	sbiw	r28, 0x0b	; 11
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	6c 01       	movw	r12, r24
    1416:	7b 01       	movw	r14, r22
    1418:	8a 01       	movw	r16, r20
    141a:	fc 01       	movw	r30, r24
    141c:	17 82       	std	Z+7, r1	; 0x07
    141e:	16 82       	std	Z+6, r1	; 0x06
    1420:	83 81       	ldd	r24, Z+3	; 0x03
    1422:	81 ff       	sbrs	r24, 1
    1424:	bf c1       	rjmp	.+894    	; 0x17a4 <vfprintf+0x3c4>
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	3c 01       	movw	r6, r24
    142c:	f6 01       	movw	r30, r12
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	f7 01       	movw	r30, r14
    1432:	93 fd       	sbrc	r25, 3
    1434:	85 91       	lpm	r24, Z+
    1436:	93 ff       	sbrs	r25, 3
    1438:	81 91       	ld	r24, Z+
    143a:	7f 01       	movw	r14, r30
    143c:	88 23       	and	r24, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <vfprintf+0x62>
    1440:	ad c1       	rjmp	.+858    	; 0x179c <vfprintf+0x3bc>
    1442:	85 32       	cpi	r24, 0x25	; 37
    1444:	39 f4       	brne	.+14     	; 0x1454 <vfprintf+0x74>
    1446:	93 fd       	sbrc	r25, 3
    1448:	85 91       	lpm	r24, Z+
    144a:	93 ff       	sbrs	r25, 3
    144c:	81 91       	ld	r24, Z+
    144e:	7f 01       	movw	r14, r30
    1450:	85 32       	cpi	r24, 0x25	; 37
    1452:	21 f4       	brne	.+8      	; 0x145c <vfprintf+0x7c>
    1454:	b6 01       	movw	r22, r12
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	2f df       	rcall	.-418    	; 0x12b8 <fputc>
    145a:	e8 cf       	rjmp	.-48     	; 0x142c <vfprintf+0x4c>
    145c:	91 2c       	mov	r9, r1
    145e:	21 2c       	mov	r2, r1
    1460:	31 2c       	mov	r3, r1
    1462:	ff e1       	ldi	r31, 0x1F	; 31
    1464:	f3 15       	cp	r31, r3
    1466:	d8 f0       	brcs	.+54     	; 0x149e <vfprintf+0xbe>
    1468:	8b 32       	cpi	r24, 0x2B	; 43
    146a:	79 f0       	breq	.+30     	; 0x148a <vfprintf+0xaa>
    146c:	38 f4       	brcc	.+14     	; 0x147c <vfprintf+0x9c>
    146e:	80 32       	cpi	r24, 0x20	; 32
    1470:	79 f0       	breq	.+30     	; 0x1490 <vfprintf+0xb0>
    1472:	83 32       	cpi	r24, 0x23	; 35
    1474:	a1 f4       	brne	.+40     	; 0x149e <vfprintf+0xbe>
    1476:	23 2d       	mov	r18, r3
    1478:	20 61       	ori	r18, 0x10	; 16
    147a:	1d c0       	rjmp	.+58     	; 0x14b6 <vfprintf+0xd6>
    147c:	8d 32       	cpi	r24, 0x2D	; 45
    147e:	61 f0       	breq	.+24     	; 0x1498 <vfprintf+0xb8>
    1480:	80 33       	cpi	r24, 0x30	; 48
    1482:	69 f4       	brne	.+26     	; 0x149e <vfprintf+0xbe>
    1484:	23 2d       	mov	r18, r3
    1486:	21 60       	ori	r18, 0x01	; 1
    1488:	16 c0       	rjmp	.+44     	; 0x14b6 <vfprintf+0xd6>
    148a:	83 2d       	mov	r24, r3
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	38 2e       	mov	r3, r24
    1490:	e3 2d       	mov	r30, r3
    1492:	e4 60       	ori	r30, 0x04	; 4
    1494:	3e 2e       	mov	r3, r30
    1496:	2a c0       	rjmp	.+84     	; 0x14ec <vfprintf+0x10c>
    1498:	f3 2d       	mov	r31, r3
    149a:	f8 60       	ori	r31, 0x08	; 8
    149c:	1d c0       	rjmp	.+58     	; 0x14d8 <vfprintf+0xf8>
    149e:	37 fc       	sbrc	r3, 7
    14a0:	2d c0       	rjmp	.+90     	; 0x14fc <vfprintf+0x11c>
    14a2:	20 ed       	ldi	r18, 0xD0	; 208
    14a4:	28 0f       	add	r18, r24
    14a6:	2a 30       	cpi	r18, 0x0A	; 10
    14a8:	40 f0       	brcs	.+16     	; 0x14ba <vfprintf+0xda>
    14aa:	8e 32       	cpi	r24, 0x2E	; 46
    14ac:	b9 f4       	brne	.+46     	; 0x14dc <vfprintf+0xfc>
    14ae:	36 fc       	sbrc	r3, 6
    14b0:	75 c1       	rjmp	.+746    	; 0x179c <vfprintf+0x3bc>
    14b2:	23 2d       	mov	r18, r3
    14b4:	20 64       	ori	r18, 0x40	; 64
    14b6:	32 2e       	mov	r3, r18
    14b8:	19 c0       	rjmp	.+50     	; 0x14ec <vfprintf+0x10c>
    14ba:	36 fe       	sbrs	r3, 6
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <vfprintf+0xea>
    14be:	8a e0       	ldi	r24, 0x0A	; 10
    14c0:	98 9e       	mul	r9, r24
    14c2:	20 0d       	add	r18, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	92 2e       	mov	r9, r18
    14c8:	11 c0       	rjmp	.+34     	; 0x14ec <vfprintf+0x10c>
    14ca:	ea e0       	ldi	r30, 0x0A	; 10
    14cc:	2e 9e       	mul	r2, r30
    14ce:	20 0d       	add	r18, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	22 2e       	mov	r2, r18
    14d4:	f3 2d       	mov	r31, r3
    14d6:	f0 62       	ori	r31, 0x20	; 32
    14d8:	3f 2e       	mov	r3, r31
    14da:	08 c0       	rjmp	.+16     	; 0x14ec <vfprintf+0x10c>
    14dc:	8c 36       	cpi	r24, 0x6C	; 108
    14de:	21 f4       	brne	.+8      	; 0x14e8 <vfprintf+0x108>
    14e0:	83 2d       	mov	r24, r3
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	38 2e       	mov	r3, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0x10c>
    14e8:	88 36       	cpi	r24, 0x68	; 104
    14ea:	41 f4       	brne	.+16     	; 0x14fc <vfprintf+0x11c>
    14ec:	f7 01       	movw	r30, r14
    14ee:	93 fd       	sbrc	r25, 3
    14f0:	85 91       	lpm	r24, Z+
    14f2:	93 ff       	sbrs	r25, 3
    14f4:	81 91       	ld	r24, Z+
    14f6:	7f 01       	movw	r14, r30
    14f8:	81 11       	cpse	r24, r1
    14fa:	b3 cf       	rjmp	.-154    	; 0x1462 <vfprintf+0x82>
    14fc:	98 2f       	mov	r25, r24
    14fe:	9f 7d       	andi	r25, 0xDF	; 223
    1500:	95 54       	subi	r25, 0x45	; 69
    1502:	93 30       	cpi	r25, 0x03	; 3
    1504:	28 f4       	brcc	.+10     	; 0x1510 <vfprintf+0x130>
    1506:	0c 5f       	subi	r16, 0xFC	; 252
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	9f e3       	ldi	r25, 0x3F	; 63
    150c:	99 83       	std	Y+1, r25	; 0x01
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x14a>
    1510:	83 36       	cpi	r24, 0x63	; 99
    1512:	31 f0       	breq	.+12     	; 0x1520 <vfprintf+0x140>
    1514:	83 37       	cpi	r24, 0x73	; 115
    1516:	71 f0       	breq	.+28     	; 0x1534 <vfprintf+0x154>
    1518:	83 35       	cpi	r24, 0x53	; 83
    151a:	09 f0       	breq	.+2      	; 0x151e <vfprintf+0x13e>
    151c:	55 c0       	rjmp	.+170    	; 0x15c8 <vfprintf+0x1e8>
    151e:	20 c0       	rjmp	.+64     	; 0x1560 <vfprintf+0x180>
    1520:	f8 01       	movw	r30, r16
    1522:	80 81       	ld	r24, Z
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	0e 5f       	subi	r16, 0xFE	; 254
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	88 24       	eor	r8, r8
    152c:	83 94       	inc	r8
    152e:	91 2c       	mov	r9, r1
    1530:	53 01       	movw	r10, r6
    1532:	12 c0       	rjmp	.+36     	; 0x1558 <vfprintf+0x178>
    1534:	28 01       	movw	r4, r16
    1536:	f2 e0       	ldi	r31, 0x02	; 2
    1538:	4f 0e       	add	r4, r31
    153a:	51 1c       	adc	r5, r1
    153c:	f8 01       	movw	r30, r16
    153e:	a0 80       	ld	r10, Z
    1540:	b1 80       	ldd	r11, Z+1	; 0x01
    1542:	36 fe       	sbrs	r3, 6
    1544:	03 c0       	rjmp	.+6      	; 0x154c <vfprintf+0x16c>
    1546:	69 2d       	mov	r22, r9
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x170>
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	7f ef       	ldi	r23, 0xFF	; 255
    1550:	c5 01       	movw	r24, r10
    1552:	4e d1       	rcall	.+668    	; 0x17f0 <strnlen>
    1554:	4c 01       	movw	r8, r24
    1556:	82 01       	movw	r16, r4
    1558:	f3 2d       	mov	r31, r3
    155a:	ff 77       	andi	r31, 0x7F	; 127
    155c:	3f 2e       	mov	r3, r31
    155e:	15 c0       	rjmp	.+42     	; 0x158a <vfprintf+0x1aa>
    1560:	28 01       	movw	r4, r16
    1562:	22 e0       	ldi	r18, 0x02	; 2
    1564:	42 0e       	add	r4, r18
    1566:	51 1c       	adc	r5, r1
    1568:	f8 01       	movw	r30, r16
    156a:	a0 80       	ld	r10, Z
    156c:	b1 80       	ldd	r11, Z+1	; 0x01
    156e:	36 fe       	sbrs	r3, 6
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <vfprintf+0x198>
    1572:	69 2d       	mov	r22, r9
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x19c>
    1578:	6f ef       	ldi	r22, 0xFF	; 255
    157a:	7f ef       	ldi	r23, 0xFF	; 255
    157c:	c5 01       	movw	r24, r10
    157e:	2d d1       	rcall	.+602    	; 0x17da <strnlen_P>
    1580:	4c 01       	movw	r8, r24
    1582:	f3 2d       	mov	r31, r3
    1584:	f0 68       	ori	r31, 0x80	; 128
    1586:	3f 2e       	mov	r3, r31
    1588:	82 01       	movw	r16, r4
    158a:	33 fc       	sbrc	r3, 3
    158c:	19 c0       	rjmp	.+50     	; 0x15c0 <vfprintf+0x1e0>
    158e:	82 2d       	mov	r24, r2
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	88 16       	cp	r8, r24
    1594:	99 06       	cpc	r9, r25
    1596:	a0 f4       	brcc	.+40     	; 0x15c0 <vfprintf+0x1e0>
    1598:	b6 01       	movw	r22, r12
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	8c de       	rcall	.-744    	; 0x12b8 <fputc>
    15a0:	2a 94       	dec	r2
    15a2:	f5 cf       	rjmp	.-22     	; 0x158e <vfprintf+0x1ae>
    15a4:	f5 01       	movw	r30, r10
    15a6:	37 fc       	sbrc	r3, 7
    15a8:	85 91       	lpm	r24, Z+
    15aa:	37 fe       	sbrs	r3, 7
    15ac:	81 91       	ld	r24, Z+
    15ae:	5f 01       	movw	r10, r30
    15b0:	b6 01       	movw	r22, r12
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	81 de       	rcall	.-766    	; 0x12b8 <fputc>
    15b6:	21 10       	cpse	r2, r1
    15b8:	2a 94       	dec	r2
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	82 1a       	sub	r8, r18
    15be:	91 08       	sbc	r9, r1
    15c0:	81 14       	cp	r8, r1
    15c2:	91 04       	cpc	r9, r1
    15c4:	79 f7       	brne	.-34     	; 0x15a4 <vfprintf+0x1c4>
    15c6:	e1 c0       	rjmp	.+450    	; 0x178a <vfprintf+0x3aa>
    15c8:	84 36       	cpi	r24, 0x64	; 100
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <vfprintf+0x1f0>
    15cc:	89 36       	cpi	r24, 0x69	; 105
    15ce:	39 f5       	brne	.+78     	; 0x161e <vfprintf+0x23e>
    15d0:	f8 01       	movw	r30, r16
    15d2:	37 fe       	sbrs	r3, 7
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x204>
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	0c 5f       	subi	r16, 0xFC	; 252
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <vfprintf+0x214>
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	07 2e       	mov	r0, r23
    15ea:	00 0c       	add	r0, r0
    15ec:	88 0b       	sbc	r24, r24
    15ee:	99 0b       	sbc	r25, r25
    15f0:	0e 5f       	subi	r16, 0xFE	; 254
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	f3 2d       	mov	r31, r3
    15f6:	ff 76       	andi	r31, 0x6F	; 111
    15f8:	3f 2e       	mov	r3, r31
    15fa:	97 ff       	sbrs	r25, 7
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <vfprintf+0x230>
    15fe:	90 95       	com	r25
    1600:	80 95       	com	r24
    1602:	70 95       	com	r23
    1604:	61 95       	neg	r22
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	f0 68       	ori	r31, 0x80	; 128
    160e:	3f 2e       	mov	r3, r31
    1610:	2a e0       	ldi	r18, 0x0A	; 10
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	a3 01       	movw	r20, r6
    1616:	f7 d0       	rcall	.+494    	; 0x1806 <__ultoa_invert>
    1618:	88 2e       	mov	r8, r24
    161a:	86 18       	sub	r8, r6
    161c:	44 c0       	rjmp	.+136    	; 0x16a6 <vfprintf+0x2c6>
    161e:	85 37       	cpi	r24, 0x75	; 117
    1620:	31 f4       	brne	.+12     	; 0x162e <vfprintf+0x24e>
    1622:	23 2d       	mov	r18, r3
    1624:	2f 7e       	andi	r18, 0xEF	; 239
    1626:	b2 2e       	mov	r11, r18
    1628:	2a e0       	ldi	r18, 0x0A	; 10
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	25 c0       	rjmp	.+74     	; 0x1678 <vfprintf+0x298>
    162e:	93 2d       	mov	r25, r3
    1630:	99 7f       	andi	r25, 0xF9	; 249
    1632:	b9 2e       	mov	r11, r25
    1634:	8f 36       	cpi	r24, 0x6F	; 111
    1636:	c1 f0       	breq	.+48     	; 0x1668 <vfprintf+0x288>
    1638:	18 f4       	brcc	.+6      	; 0x1640 <vfprintf+0x260>
    163a:	88 35       	cpi	r24, 0x58	; 88
    163c:	79 f0       	breq	.+30     	; 0x165c <vfprintf+0x27c>
    163e:	ae c0       	rjmp	.+348    	; 0x179c <vfprintf+0x3bc>
    1640:	80 37       	cpi	r24, 0x70	; 112
    1642:	19 f0       	breq	.+6      	; 0x164a <vfprintf+0x26a>
    1644:	88 37       	cpi	r24, 0x78	; 120
    1646:	21 f0       	breq	.+8      	; 0x1650 <vfprintf+0x270>
    1648:	a9 c0       	rjmp	.+338    	; 0x179c <vfprintf+0x3bc>
    164a:	e9 2f       	mov	r30, r25
    164c:	e0 61       	ori	r30, 0x10	; 16
    164e:	be 2e       	mov	r11, r30
    1650:	b4 fe       	sbrs	r11, 4
    1652:	0d c0       	rjmp	.+26     	; 0x166e <vfprintf+0x28e>
    1654:	fb 2d       	mov	r31, r11
    1656:	f4 60       	ori	r31, 0x04	; 4
    1658:	bf 2e       	mov	r11, r31
    165a:	09 c0       	rjmp	.+18     	; 0x166e <vfprintf+0x28e>
    165c:	34 fe       	sbrs	r3, 4
    165e:	0a c0       	rjmp	.+20     	; 0x1674 <vfprintf+0x294>
    1660:	29 2f       	mov	r18, r25
    1662:	26 60       	ori	r18, 0x06	; 6
    1664:	b2 2e       	mov	r11, r18
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <vfprintf+0x294>
    1668:	28 e0       	ldi	r18, 0x08	; 8
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <vfprintf+0x298>
    166e:	20 e1       	ldi	r18, 0x10	; 16
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <vfprintf+0x298>
    1674:	20 e1       	ldi	r18, 0x10	; 16
    1676:	32 e0       	ldi	r19, 0x02	; 2
    1678:	f8 01       	movw	r30, r16
    167a:	b7 fe       	sbrs	r11, 7
    167c:	07 c0       	rjmp	.+14     	; 0x168c <vfprintf+0x2ac>
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	0c 5f       	subi	r16, 0xFC	; 252
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <vfprintf+0x2b8>
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 5f       	subi	r16, 0xFE	; 254
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	a3 01       	movw	r20, r6
    169a:	b5 d0       	rcall	.+362    	; 0x1806 <__ultoa_invert>
    169c:	88 2e       	mov	r8, r24
    169e:	86 18       	sub	r8, r6
    16a0:	fb 2d       	mov	r31, r11
    16a2:	ff 77       	andi	r31, 0x7F	; 127
    16a4:	3f 2e       	mov	r3, r31
    16a6:	36 fe       	sbrs	r3, 6
    16a8:	0d c0       	rjmp	.+26     	; 0x16c4 <vfprintf+0x2e4>
    16aa:	23 2d       	mov	r18, r3
    16ac:	2e 7f       	andi	r18, 0xFE	; 254
    16ae:	a2 2e       	mov	r10, r18
    16b0:	89 14       	cp	r8, r9
    16b2:	58 f4       	brcc	.+22     	; 0x16ca <vfprintf+0x2ea>
    16b4:	34 fe       	sbrs	r3, 4
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <vfprintf+0x2ee>
    16b8:	32 fc       	sbrc	r3, 2
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <vfprintf+0x2ee>
    16bc:	83 2d       	mov	r24, r3
    16be:	8e 7e       	andi	r24, 0xEE	; 238
    16c0:	a8 2e       	mov	r10, r24
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <vfprintf+0x2ee>
    16c4:	b8 2c       	mov	r11, r8
    16c6:	a3 2c       	mov	r10, r3
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <vfprintf+0x2f0>
    16ca:	b8 2c       	mov	r11, r8
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <vfprintf+0x2f0>
    16ce:	b9 2c       	mov	r11, r9
    16d0:	a4 fe       	sbrs	r10, 4
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <vfprintf+0x312>
    16d4:	fe 01       	movw	r30, r28
    16d6:	e8 0d       	add	r30, r8
    16d8:	f1 1d       	adc	r31, r1
    16da:	80 81       	ld	r24, Z
    16dc:	80 33       	cpi	r24, 0x30	; 48
    16de:	21 f4       	brne	.+8      	; 0x16e8 <vfprintf+0x308>
    16e0:	9a 2d       	mov	r25, r10
    16e2:	99 7e       	andi	r25, 0xE9	; 233
    16e4:	a9 2e       	mov	r10, r25
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <vfprintf+0x31a>
    16e8:	a2 fe       	sbrs	r10, 2
    16ea:	06 c0       	rjmp	.+12     	; 0x16f8 <vfprintf+0x318>
    16ec:	b3 94       	inc	r11
    16ee:	b3 94       	inc	r11
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <vfprintf+0x31a>
    16f2:	8a 2d       	mov	r24, r10
    16f4:	86 78       	andi	r24, 0x86	; 134
    16f6:	09 f0       	breq	.+2      	; 0x16fa <vfprintf+0x31a>
    16f8:	b3 94       	inc	r11
    16fa:	a3 fc       	sbrc	r10, 3
    16fc:	10 c0       	rjmp	.+32     	; 0x171e <vfprintf+0x33e>
    16fe:	a0 fe       	sbrs	r10, 0
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0x32e>
    1702:	b2 14       	cp	r11, r2
    1704:	80 f4       	brcc	.+32     	; 0x1726 <vfprintf+0x346>
    1706:	28 0c       	add	r2, r8
    1708:	92 2c       	mov	r9, r2
    170a:	9b 18       	sub	r9, r11
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <vfprintf+0x348>
    170e:	b2 14       	cp	r11, r2
    1710:	58 f4       	brcc	.+22     	; 0x1728 <vfprintf+0x348>
    1712:	b6 01       	movw	r22, r12
    1714:	80 e2       	ldi	r24, 0x20	; 32
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	cf dd       	rcall	.-1122   	; 0x12b8 <fputc>
    171a:	b3 94       	inc	r11
    171c:	f8 cf       	rjmp	.-16     	; 0x170e <vfprintf+0x32e>
    171e:	b2 14       	cp	r11, r2
    1720:	18 f4       	brcc	.+6      	; 0x1728 <vfprintf+0x348>
    1722:	2b 18       	sub	r2, r11
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x34a>
    1726:	98 2c       	mov	r9, r8
    1728:	21 2c       	mov	r2, r1
    172a:	a4 fe       	sbrs	r10, 4
    172c:	0f c0       	rjmp	.+30     	; 0x174c <vfprintf+0x36c>
    172e:	b6 01       	movw	r22, r12
    1730:	80 e3       	ldi	r24, 0x30	; 48
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	c1 dd       	rcall	.-1150   	; 0x12b8 <fputc>
    1736:	a2 fe       	sbrs	r10, 2
    1738:	16 c0       	rjmp	.+44     	; 0x1766 <vfprintf+0x386>
    173a:	a1 fc       	sbrc	r10, 1
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <vfprintf+0x364>
    173e:	88 e7       	ldi	r24, 0x78	; 120
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x368>
    1744:	88 e5       	ldi	r24, 0x58	; 88
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	b6 01       	movw	r22, r12
    174a:	0c c0       	rjmp	.+24     	; 0x1764 <vfprintf+0x384>
    174c:	8a 2d       	mov	r24, r10
    174e:	86 78       	andi	r24, 0x86	; 134
    1750:	51 f0       	breq	.+20     	; 0x1766 <vfprintf+0x386>
    1752:	a1 fe       	sbrs	r10, 1
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x37a>
    1756:	8b e2       	ldi	r24, 0x2B	; 43
    1758:	01 c0       	rjmp	.+2      	; 0x175c <vfprintf+0x37c>
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	a7 fc       	sbrc	r10, 7
    175e:	8d e2       	ldi	r24, 0x2D	; 45
    1760:	b6 01       	movw	r22, r12
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a9 dd       	rcall	.-1198   	; 0x12b8 <fputc>
    1766:	89 14       	cp	r8, r9
    1768:	30 f4       	brcc	.+12     	; 0x1776 <vfprintf+0x396>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a3 dd       	rcall	.-1210   	; 0x12b8 <fputc>
    1772:	9a 94       	dec	r9
    1774:	f8 cf       	rjmp	.-16     	; 0x1766 <vfprintf+0x386>
    1776:	8a 94       	dec	r8
    1778:	f3 01       	movw	r30, r6
    177a:	e8 0d       	add	r30, r8
    177c:	f1 1d       	adc	r31, r1
    177e:	80 81       	ld	r24, Z
    1780:	b6 01       	movw	r22, r12
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	99 dd       	rcall	.-1230   	; 0x12b8 <fputc>
    1786:	81 10       	cpse	r8, r1
    1788:	f6 cf       	rjmp	.-20     	; 0x1776 <vfprintf+0x396>
    178a:	22 20       	and	r2, r2
    178c:	09 f4       	brne	.+2      	; 0x1790 <vfprintf+0x3b0>
    178e:	4e ce       	rjmp	.-868    	; 0x142c <vfprintf+0x4c>
    1790:	b6 01       	movw	r22, r12
    1792:	80 e2       	ldi	r24, 0x20	; 32
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	90 dd       	rcall	.-1248   	; 0x12b8 <fputc>
    1798:	2a 94       	dec	r2
    179a:	f7 cf       	rjmp	.-18     	; 0x178a <vfprintf+0x3aa>
    179c:	f6 01       	movw	r30, r12
    179e:	86 81       	ldd	r24, Z+6	; 0x06
    17a0:	97 81       	ldd	r25, Z+7	; 0x07
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x3c8>
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	2b 96       	adiw	r28, 0x0b	; 11
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	bf 90       	pop	r11
    17c6:	af 90       	pop	r10
    17c8:	9f 90       	pop	r9
    17ca:	8f 90       	pop	r8
    17cc:	7f 90       	pop	r7
    17ce:	6f 90       	pop	r6
    17d0:	5f 90       	pop	r5
    17d2:	4f 90       	pop	r4
    17d4:	3f 90       	pop	r3
    17d6:	2f 90       	pop	r2
    17d8:	08 95       	ret

000017da <strnlen_P>:
    17da:	fc 01       	movw	r30, r24
    17dc:	05 90       	lpm	r0, Z+
    17de:	61 50       	subi	r22, 0x01	; 1
    17e0:	70 40       	sbci	r23, 0x00	; 0
    17e2:	01 10       	cpse	r0, r1
    17e4:	d8 f7       	brcc	.-10     	; 0x17dc <strnlen_P+0x2>
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	8e 0f       	add	r24, r30
    17ec:	9f 1f       	adc	r25, r31
    17ee:	08 95       	ret

000017f0 <strnlen>:
    17f0:	fc 01       	movw	r30, r24
    17f2:	61 50       	subi	r22, 0x01	; 1
    17f4:	70 40       	sbci	r23, 0x00	; 0
    17f6:	01 90       	ld	r0, Z+
    17f8:	01 10       	cpse	r0, r1
    17fa:	d8 f7       	brcc	.-10     	; 0x17f2 <strnlen+0x2>
    17fc:	80 95       	com	r24
    17fe:	90 95       	com	r25
    1800:	8e 0f       	add	r24, r30
    1802:	9f 1f       	adc	r25, r31
    1804:	08 95       	ret

00001806 <__ultoa_invert>:
    1806:	fa 01       	movw	r30, r20
    1808:	aa 27       	eor	r26, r26
    180a:	28 30       	cpi	r18, 0x08	; 8
    180c:	51 f1       	breq	.+84     	; 0x1862 <__ultoa_invert+0x5c>
    180e:	20 31       	cpi	r18, 0x10	; 16
    1810:	81 f1       	breq	.+96     	; 0x1872 <__ultoa_invert+0x6c>
    1812:	e8 94       	clt
    1814:	6f 93       	push	r22
    1816:	6e 7f       	andi	r22, 0xFE	; 254
    1818:	6e 5f       	subi	r22, 0xFE	; 254
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	8f 4f       	sbci	r24, 0xFF	; 255
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	af 4f       	sbci	r26, 0xFF	; 255
    1822:	b1 e0       	ldi	r27, 0x01	; 1
    1824:	3e d0       	rcall	.+124    	; 0x18a2 <__ultoa_invert+0x9c>
    1826:	b4 e0       	ldi	r27, 0x04	; 4
    1828:	3c d0       	rcall	.+120    	; 0x18a2 <__ultoa_invert+0x9c>
    182a:	67 0f       	add	r22, r23
    182c:	78 1f       	adc	r23, r24
    182e:	89 1f       	adc	r24, r25
    1830:	9a 1f       	adc	r25, r26
    1832:	a1 1d       	adc	r26, r1
    1834:	68 0f       	add	r22, r24
    1836:	79 1f       	adc	r23, r25
    1838:	8a 1f       	adc	r24, r26
    183a:	91 1d       	adc	r25, r1
    183c:	a1 1d       	adc	r26, r1
    183e:	6a 0f       	add	r22, r26
    1840:	71 1d       	adc	r23, r1
    1842:	81 1d       	adc	r24, r1
    1844:	91 1d       	adc	r25, r1
    1846:	a1 1d       	adc	r26, r1
    1848:	20 d0       	rcall	.+64     	; 0x188a <__ultoa_invert+0x84>
    184a:	09 f4       	brne	.+2      	; 0x184e <__ultoa_invert+0x48>
    184c:	68 94       	set
    184e:	3f 91       	pop	r19
    1850:	2a e0       	ldi	r18, 0x0A	; 10
    1852:	26 9f       	mul	r18, r22
    1854:	11 24       	eor	r1, r1
    1856:	30 19       	sub	r19, r0
    1858:	30 5d       	subi	r19, 0xD0	; 208
    185a:	31 93       	st	Z+, r19
    185c:	de f6       	brtc	.-74     	; 0x1814 <__ultoa_invert+0xe>
    185e:	cf 01       	movw	r24, r30
    1860:	08 95       	ret
    1862:	46 2f       	mov	r20, r22
    1864:	47 70       	andi	r20, 0x07	; 7
    1866:	40 5d       	subi	r20, 0xD0	; 208
    1868:	41 93       	st	Z+, r20
    186a:	b3 e0       	ldi	r27, 0x03	; 3
    186c:	0f d0       	rcall	.+30     	; 0x188c <__ultoa_invert+0x86>
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__ultoa_invert+0x5c>
    1870:	f6 cf       	rjmp	.-20     	; 0x185e <__ultoa_invert+0x58>
    1872:	46 2f       	mov	r20, r22
    1874:	4f 70       	andi	r20, 0x0F	; 15
    1876:	40 5d       	subi	r20, 0xD0	; 208
    1878:	4a 33       	cpi	r20, 0x3A	; 58
    187a:	18 f0       	brcs	.+6      	; 0x1882 <__ultoa_invert+0x7c>
    187c:	49 5d       	subi	r20, 0xD9	; 217
    187e:	31 fd       	sbrc	r19, 1
    1880:	40 52       	subi	r20, 0x20	; 32
    1882:	41 93       	st	Z+, r20
    1884:	02 d0       	rcall	.+4      	; 0x188a <__ultoa_invert+0x84>
    1886:	a9 f7       	brne	.-22     	; 0x1872 <__ultoa_invert+0x6c>
    1888:	ea cf       	rjmp	.-44     	; 0x185e <__ultoa_invert+0x58>
    188a:	b4 e0       	ldi	r27, 0x04	; 4
    188c:	a6 95       	lsr	r26
    188e:	97 95       	ror	r25
    1890:	87 95       	ror	r24
    1892:	77 95       	ror	r23
    1894:	67 95       	ror	r22
    1896:	ba 95       	dec	r27
    1898:	c9 f7       	brne	.-14     	; 0x188c <__ultoa_invert+0x86>
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	61 05       	cpc	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	08 95       	ret
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	0a 2e       	mov	r0, r26
    18a8:	06 94       	lsr	r0
    18aa:	57 95       	ror	r21
    18ac:	47 95       	ror	r20
    18ae:	37 95       	ror	r19
    18b0:	27 95       	ror	r18
    18b2:	ba 95       	dec	r27
    18b4:	c9 f7       	brne	.-14     	; 0x18a8 <__ultoa_invert+0xa2>
    18b6:	62 0f       	add	r22, r18
    18b8:	73 1f       	adc	r23, r19
    18ba:	84 1f       	adc	r24, r20
    18bc:	95 1f       	adc	r25, r21
    18be:	a0 1d       	adc	r26, r0
    18c0:	08 95       	ret

000018c2 <_exit>:
    18c2:	f8 94       	cli

000018c4 <__stop_program>:
    18c4:	ff cf       	rjmp	.-2      	; 0x18c4 <__stop_program>
