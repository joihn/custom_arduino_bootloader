
AVRISP-MKII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000025a8  0000265c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025a8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800162  00800162  000026be  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000026be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000500  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008da6  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000255a  00000000  00000000  0000b9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000049d7  00000000  00000000  0000df10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001000  00000000  00000000  000128e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002a7a  00000000  00000000  000138e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056ae  00000000  00000000  00016362  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c8  00000000  00000000  0001ba10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c1       	rjmp	.+628    	; 0x276 <__ctors_end>
       2:	00 00       	nop
       4:	54 c1       	rjmp	.+680    	; 0x2ae <__bad_interrupt>
       6:	00 00       	nop
       8:	52 c1       	rjmp	.+676    	; 0x2ae <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c1       	rjmp	.+672    	; 0x2ae <__bad_interrupt>
       e:	00 00       	nop
      10:	4e c1       	rjmp	.+668    	; 0x2ae <__bad_interrupt>
      12:	00 00       	nop
      14:	4c c1       	rjmp	.+664    	; 0x2ae <__bad_interrupt>
      16:	00 00       	nop
      18:	4a c1       	rjmp	.+660    	; 0x2ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	48 c1       	rjmp	.+656    	; 0x2ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	46 c1       	rjmp	.+652    	; 0x2ae <__bad_interrupt>
      22:	00 00       	nop
      24:	44 c1       	rjmp	.+648    	; 0x2ae <__bad_interrupt>
      26:	00 00       	nop
      28:	42 c1       	rjmp	.+644    	; 0x2ae <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_11>
      30:	3e c1       	rjmp	.+636    	; 0x2ae <__bad_interrupt>
      32:	00 00       	nop
      34:	c9 c1       	rjmp	.+914    	; 0x3c8 <__vector_13>
      36:	00 00       	nop
      38:	3a c1       	rjmp	.+628    	; 0x2ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c7       	rjmp	.+3816   	; 0xf26 <__vector_15>
      3e:	00 00       	nop
      40:	36 c1       	rjmp	.+620    	; 0x2ae <__bad_interrupt>
      42:	00 00       	nop
      44:	34 c1       	rjmp	.+616    	; 0x2ae <__bad_interrupt>
      46:	00 00       	nop
      48:	32 c1       	rjmp	.+612    	; 0x2ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	30 c1       	rjmp	.+608    	; 0x2ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	2e c1       	rjmp	.+604    	; 0x2ae <__bad_interrupt>
      52:	00 00       	nop
      54:	2c c1       	rjmp	.+600    	; 0x2ae <__bad_interrupt>
      56:	00 00       	nop
      58:	2a c1       	rjmp	.+596    	; 0x2ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	28 c1       	rjmp	.+592    	; 0x2ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	26 c1       	rjmp	.+588    	; 0x2ae <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c1       	rjmp	.+584    	; 0x2ae <__bad_interrupt>
      66:	00 00       	nop
      68:	22 c1       	rjmp	.+580    	; 0x2ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	20 c1       	rjmp	.+576    	; 0x2ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	1e c1       	rjmp	.+572    	; 0x2ae <__bad_interrupt>
      72:	00 00       	nop
      74:	56 0a       	sbc	r5, r22
      76:	78 0a       	sbc	r7, r24
      78:	95 0a       	sbc	r9, r21
      7a:	d9 0a       	sbc	r13, r25
      7c:	db 0a       	sbc	r13, r27
      7e:	dd 0a       	sbc	r13, r29
      80:	26 0b       	sbc	r18, r22
      82:	c2 11       	cpse	r28, r2
      84:	db 11       	cpse	r29, r11
      86:	8b 12       	cpse	r8, r27
      88:	db 11       	cpse	r29, r11
      8a:	8b 12       	cpse	r8, r27
      8c:	15 12       	cpse	r1, r21
      8e:	37 12       	cpse	r3, r23
      90:	8b 12       	cpse	r8, r27
      92:	58 12       	cpse	r5, r24
      94:	6a 12       	cpse	r6, r26

00000096 <SerialString>:
      96:	1c 03 30 00 30 00 30 00 30 00 41 00 30 00 30 00     ..0.0.0.0.A.0.0.
      a6:	31 00 32 00 38 00 32 00 35 00 35 00 00 00           1.2.8.2.5.5...

000000b4 <ProductString>:
      b4:	2e 03 4c 00 55 00 46 00 41 00 20 00 41 00 56 00     ..L.U.F.A. .A.V.
      c4:	52 00 49 00 53 00 50 00 20 00 4d 00 6b 00 49 00     R.I.S.P. .M.k.I.
      d4:	49 00 20 00 43 00 6c 00 6f 00 6e 00 65 00 00 00     I. .C.l.o.n.e...

000000e4 <ManufacturerString>:
      e4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      f4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000fe <LanguageString>:
      fe:	04 03 09 04                                         ....

00000102 <ConfigurationDescriptor>:
     102:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
     112:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

00000122 <DeviceDescriptor>:
     122:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
     132:	03 01                                               ..

00000134 <TimerCompareFromSCKDuration>:
     134:	09 00 0a 00 0a 00 0b 00 0c 00 0d 00 0d 00 0e 00     ................
     144:	0f 00 10 00 10 00 12 00 13 00 13 00 14 00 16 00     ................
     154:	16 00 18 00 19 00 1a 00 1c 00 1d 00 1f 00 20 00     .............. .
     164:	22 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     ".#.%.'.).+...0.
     174:	32 00 34 00 37 00 3a 00 3d 00 40 00 43 00 46 00     2.4.7.:.=.@.C.F.
     184:	4a 00 4e 00 52 00 55 00 5a 00 5e 00 63 00 68 00     J.N.R.U.Z.^.c.h.
     194:	6d 00 73 00 78 00 7e 00 84 00 8b 00 91 00 99 00     m.s.x.~.........
     1a4:	a0 00 a9 00 b1 00 b9 00 c3 00 cc 00 d6 00 e1 00     ................
     1b4:	ec 00 f7 00 04 01 11 01 1e 01 2d 01 3b 01 4b 01     ..........-.;.K.
     1c4:	5b 01 6c 01 7d 01 91 01 a5 01 ba 01 cf 01 e6 01     [.l.}...........
     1d4:	fe 01 16 02 31 02 4c 02 6a 02 88 02 a8 02 ca 02     ....1.L.j.......
     1e4:	ed 02 11 03 38 03 60 03 8b 03 b8 03 e7 03 18 04     ....8.`.........
     1f4:	4b 04 81 04 b9 04 f5 04 34 05 75 05 b9 05 01 06     K.......4.u.....
     204:	4e 06 9d 06 ef 06 48 07 a3 07 04 08 65 08 d0 08     N.....H.....e...
     214:	40 09 b6 09 2b 0a ab 0a 30 0b c3 0b 51 0c ee 0c     @...+...0...Q...
     224:	8f 0d 40 0e f6 0e af 0f 68 10 47 11 14 12 f5 12     ..@.....h.G.....
     234:	ed 13 e2 14 f0 15 f9 16 1b 18 5c 19 91 1a e5 1b     ..........\.....
     244:	25 1d 83 1e 03 20 ab 21 30 23 32 25 0f 27 f1 28     %.... .!0#2%.'.(
     254:	f8 2a 1a 2d 49 2f a1 31 14 34 a1 36 45 39 17 3c     .*.-I/.1.4.6E9.<
     264:	1a 3f 34 42 60 45 df 48 70 4c                       .?4B`E.HpL

0000026e <SPIMaskFromSCKDuration>:
     26e:	40 00 41 01 42 43 03 00                             @.A.BC..

00000276 <__ctors_end>:
     276:	11 24       	eor	r1, r1
     278:	1f be       	out	0x3f, r1	; 63
     27a:	cf ef       	ldi	r28, 0xFF	; 255
     27c:	d2 e0       	ldi	r29, 0x02	; 2
     27e:	de bf       	out	0x3e, r29	; 62
     280:	cd bf       	out	0x3d, r28	; 61

00000282 <__do_copy_data>:
     282:	11 e0       	ldi	r17, 0x01	; 1
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	e8 ea       	ldi	r30, 0xA8	; 168
     28a:	f5 e2       	ldi	r31, 0x25	; 37
     28c:	02 c0       	rjmp	.+4      	; 0x292 <__do_copy_data+0x10>
     28e:	05 90       	lpm	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	a2 36       	cpi	r26, 0x62	; 98
     294:	b1 07       	cpc	r27, r17
     296:	d9 f7       	brne	.-10     	; 0x28e <__do_copy_data+0xc>

00000298 <__do_clear_bss>:
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	a2 e6       	ldi	r26, 0x62	; 98
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <.do_clear_bss_start>

000002a0 <.do_clear_bss_loop>:
     2a0:	1d 92       	st	X+, r1

000002a2 <.do_clear_bss_start>:
     2a2:	a5 37       	cpi	r26, 0x75	; 117
     2a4:	b2 07       	cpc	r27, r18
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <.do_clear_bss_loop>
     2a8:	47 d0       	rcall	.+142    	; 0x338 <main>
     2aa:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <_exit>

000002ae <__bad_interrupt>:
     2ae:	a8 ce       	rjmp	.-688    	; 0x0 <__vectors>

000002b0 <LEDs_SetAllLEDs>:
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     2b0:	95 b1       	in	r25, 0x05	; 5
     2b2:	9f 71       	andi	r25, 0x1F	; 31
     2b4:	89 2b       	or	r24, r25
     2b6:	85 b9       	out	0x05, r24	; 5
     2b8:	08 95       	ret

000002ba <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ba:	84 b7       	in	r24, 0x34	; 52
     2bc:	87 7f       	andi	r24, 0xF7	; 247
     2be:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	a8 95       	wdr
     2c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     2ca:	88 61       	ori	r24, 0x18	; 24
     2cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     2d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     2d4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	80 e8       	ldi	r24, 0x80	; 128
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     2e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     2e6:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     2e8:	84 b1       	in	r24, 0x04	; 4
     2ea:	80 6e       	ori	r24, 0xE0	; 224
     2ec:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     2ee:	85 b1       	in	r24, 0x05	; 5
     2f0:	8f 71       	andi	r24, 0x1F	; 31
     2f2:	85 b9       	out	0x05, r24	; 5
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     2f4:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <USB_Init>

000002f8 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2f8:	80 ec       	ldi	r24, 0xC0	; 192
     2fa:	da cf       	rjmp	.-76     	; 0x2b0 <LEDs_SetAllLEDs>

000002fc <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2fc:	80 e4       	ldi	r24, 0x40	; 64
     2fe:	d8 cf       	rjmp	.-80     	; 0x2b0 <LEDs_SetAllLEDs>

00000300 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     300:	42 e3       	ldi	r20, 0x32	; 50
     302:	60 e8       	ldi	r22, 0x80	; 128
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            AVRISP_DATA_EPSIZE, ENDPOINT_BANK_SINGLE);
	#endif

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     30a:	81 11       	cpse	r24, r1
     30c:	02 c0       	rjmp	.+4      	; 0x312 <EVENT_USB_Device_ConfigurationChanged+0x12>
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	01 c0       	rjmp	.+2      	; 0x314 <EVENT_USB_Device_ConfigurationChanged+0x14>
     312:	80 e8       	ldi	r24, 0x80	; 128
     314:	cd cf       	rjmp	.-102    	; 0x2b0 <LEDs_SetAllLEDs>

00000316 <AVRISP_Task>:

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     316:	8e b3       	in	r24, 0x1e	; 30
     318:	84 30       	cpi	r24, 0x04	; 4
     31a:	69 f4       	brne	.+26     	; 0x336 <AVRISP_Task+0x20>
	  return;

	V2Params_UpdateParamValues();
     31c:	b1 d1       	rcall	.+866    	; 0x680 <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     324:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     328:	82 ff       	sbrs	r24, 2
     32a:	05 c0       	rjmp	.+10     	; 0x336 <AVRISP_Task+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     32c:	80 ec       	ldi	r24, 0xC0	; 192

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     32e:	c0 df       	rcall	.-128    	; 0x2b0 <LEDs_SetAllLEDs>

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     330:	66 d0       	rcall	.+204    	; 0x3fe <V2Protocol_ProcessCommand>
     332:	80 e8       	ldi	r24, 0x80	; 128
     334:	bd cf       	rjmp	.-134    	; 0x2b0 <LEDs_SetAllLEDs>
     336:	08 95       	ret

00000338 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     338:	c0 df       	rcall	.-128    	; 0x2ba <SetupHardware>
	V2Protocol_Init();
     33a:	5f d0       	rcall	.+190    	; 0x3fa <V2Protocol_Init>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     33c:	80 e4       	ldi	r24, 0x40	; 64
     33e:	b8 df       	rcall	.-144    	; 0x2b0 <LEDs_SetAllLEDs>
     340:	78 94       	sei
	sei();
     342:	48 99       	sbic	0x09, 0	; 9
	for (;;)
	{
		#if (BOARD == BOARD_USBTINYMKII)
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
     344:	02 c0       	rjmp	.+4      	; 0x34a <main+0x12>
     346:	80 e2       	ldi	r24, 0x20	; 32
     348:	01 c0       	rjmp	.+2      	; 0x34c <main+0x14>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	95 b1       	in	r25, 0x05	; 5
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LedMask,
			                                   const uint8_t ActiveMask)
			{
				PORTB = ((PORTB & ~LedMask) | ActiveMask);
     34e:	9f 7d       	andi	r25, 0xDF	; 223
     350:	89 2b       	or	r24, r25
     352:	85 b9       	out	0x05, r24	; 5
		#endif

		AVRISP_Task();
     354:	e0 df       	rcall	.-64     	; 0x316 <AVRISP_Task>
     356:	0e 94 a1 12 	call	0x2542	; 0x2542 <USB_USBTask>
		USB_USBTask();
     35a:	f3 cf       	rjmp	.-26     	; 0x342 <main+0xa>

0000035c <CALLBACK_USB_GetDescriptor>:
	}
     35c:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     35e:	33 27       	eor	r19, r19
     360:	22 30       	cpi	r18, 0x02	; 2
     362:	31 05       	cpc	r19, r1
     364:	59 f0       	breq	.+22     	; 0x37c <CALLBACK_USB_GetDescriptor+0x20>
     366:	23 30       	cpi	r18, 0x03	; 3
     368:	31 05       	cpc	r19, r1
     36a:	69 f0       	breq	.+26     	; 0x386 <CALLBACK_USB_GetDescriptor+0x2a>
     36c:	21 30       	cpi	r18, 0x01	; 1
     36e:	31 05       	cpc	r19, r1
     370:	19 f5       	brne	.+70     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x5c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     372:	82 e1       	ldi	r24, 0x12	; 18
     374:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     376:	22 e2       	ldi	r18, 0x22	; 34
     378:	31 e0       	ldi	r19, 0x01	; 1
     37a:	22 c0       	rjmp	.+68     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x64>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     37c:	80 e2       	ldi	r24, 0x20	; 32
     37e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     384:	1d c0       	rjmp	.+58     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x64>
		case DTYPE_String:
			switch (DescriptorNumber)
     386:	99 27       	eor	r25, r25
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	91 05       	cpc	r25, r1
     38c:	61 f0       	breq	.+24     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x4a>
     38e:	40 f0       	brcs	.+16     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x44>
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	91 05       	cpc	r25, r1
     394:	59 f0       	breq	.+22     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x50>
     396:	03 97       	sbiw	r24, 0x03	; 3
     398:	79 f4       	brne	.+30     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x5c>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case 0x03:
					Address = &SerialString;
					Size    = pgm_read_byte(&SerialString.Header.Size);
     39a:	e6 e9       	ldi	r30, 0x96	; 150
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	08 c0       	rjmp	.+16     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3a0:	ee ef       	ldi	r30, 0xFE	; 254
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3a6:	e4 ee       	ldi	r30, 0xE4	; 228
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ac:	e4 eb       	ldi	r30, 0xB4	; 180
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x03:
					Address = &SerialString;
					Size    = pgm_read_byte(&SerialString.Header.Size);
     3b0:	84 91       	lpm	r24, Z
     3b2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case 0x03:
					Address = &SerialString;
     3b4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&SerialString.Header.Size);
					break;
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x64>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3c0:	fa 01       	movw	r30, r20
     3c2:	31 83       	std	Z+1, r19	; 0x01
     3c4:	20 83       	st	Z, r18
	return Size;
}
     3c6:	08 95       	ret

000003c8 <__vector_13>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(WDT_vect, ISR_BLOCK)
{
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	8f 93       	push	r24
	TimeoutExpired = true;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	8a bd       	out	0x2a, r24	; 42
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	a8 95       	wdr
     3de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     3e2:	88 61       	ori	r24, 0x18	; 24
     3e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     3e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     3ec:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
}
     3ee:	8f 91       	pop	r24
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <V2Protocol_Init>:
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	V2Params_LoadNonVolatileParamValues();
     3fa:	35 d1       	rcall	.+618    	; 0x666 <V2Params_LoadNonVolatileParamValues>
	
	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
     3fc:	c3 c5       	rjmp	.+2950   	; 0xf84 <ISPTarget_ConfigureRescueClock>

000003fe <V2Protocol_ProcessCommand>:
     3fe:	1f 93       	push	r17
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     404:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	uint8_t V2Command = Endpoint_Read_8();

	/* Start the watchdog with timeout interrupt enabled to manage the timeout */
	TimeoutExpired = false;
     408:	1a bc       	out	0x2a, r1	; 42
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     40a:	9e e0       	ldi	r25, 0x0E	; 14
     40c:	88 e1       	ldi	r24, 0x18	; 24
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	a8 95       	wdr
     414:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     418:	0f be       	out	0x3f, r0	; 63
     41a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
	wdt_enable(WDTO_1S);
	WDTCSR |= (1 << WDIE);
     41e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     422:	80 64       	ori	r24, 0x40	; 64
     424:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>

	switch (V2Command)
     428:	c4 31       	cpi	r28, 0x14	; 20
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	c2 c0       	rjmp	.+388    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     42e:	e8 f5       	brcc	.+122    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     430:	ca 30       	cpi	r28, 0x0A	; 10
     432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	a7 c0       	rjmp	.+334    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     436:	48 f5       	brcc	.+82     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     438:	c4 30       	cpi	r28, 0x04	; 4
     43a:	18 f5       	brcc	.+70     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     43c:	c2 30       	cpi	r28, 0x02	; 2
     43e:	08 f0       	brcs	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	51 c0       	rjmp	.+162    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     442:	c1 30       	cpi	r28, 0x01	; 1
     444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	c4 c0       	rjmp	.+392    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     448:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     44c:	8b 77       	andi	r24, 0x7B	; 123
     44e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     458:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     462:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     466:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	6a e0       	ldi	r22, 0x0A	; 10
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	87 e5       	ldi	r24, 0x57	; 87
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <Endpoint_Write_Stream_LE>
     480:	c5 c0       	rjmp	.+394    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
	/* Start the watchdog with timeout interrupt enabled to manage the timeout */
	TimeoutExpired = false;
	wdt_enable(WDTO_1S);
	WDTCSR |= (1 << WDIE);

	switch (V2Command)
     482:	c6 30       	cpi	r28, 0x06	; 6
     484:	09 f4       	brne	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	58 c0       	rjmp	.+176    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     488:	a3 c0       	rjmp	.+326    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     48a:	c1 31       	cpi	r28, 0x11	; 17
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	8c c0       	rjmp	.+280    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     490:	28 f4       	brcc	.+10     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     492:	c0 31       	cpi	r28, 0x10	; 16
     494:	09 f0       	breq	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	9c c0       	rjmp	.+312    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
     498:	46 d4       	rcall	.+2188   	; 0xd26 <ISPProtocol_EnterISPMode>
			break;
     49a:	bd c0       	rjmp	.+378    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
	/* Start the watchdog with timeout interrupt enabled to manage the timeout */
	TimeoutExpired = false;
	wdt_enable(WDTO_1S);
	WDTCSR |= (1 << WDIE);

	switch (V2Command)
     49c:	c2 31       	cpi	r28, 0x12	; 18
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	8b c0       	rjmp	.+278    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     4a2:	c3 31       	cpi	r28, 0x13	; 19
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	82 c0       	rjmp	.+260    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     4a8:	93 c0       	rjmp	.+294    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     4aa:	c9 31       	cpi	r28, 0x19	; 25
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ae:	89 c0       	rjmp	.+274    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     4b0:	60 f4       	brcc	.+24     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4b2:	c6 31       	cpi	r28, 0x16	; 22
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b6:	7d c0       	rjmp	.+250    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     4b8:	08 f4       	brcc	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	78 c0       	rjmp	.+240    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     4bc:	c7 31       	cpi	r28, 0x17	; 23
     4be:	09 f4       	brne	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c0:	80 c0       	rjmp	.+256    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     4c2:	c8 31       	cpi	r28, 0x18	; 24
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	7a c0       	rjmp	.+244    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     4c8:	83 c0       	rjmp	.+262    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     4ca:	cd 31       	cpi	r28, 0x1D	; 29
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ce:	7c c0       	rjmp	.+248    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     4d0:	08 f4       	brcc	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	74 c0       	rjmp	.+232    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     4d4:	c0 35       	cpi	r28, 0x50	; 80
     4d6:	09 f4       	brne	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	79 c0       	rjmp	.+242    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     4da:	c1 35       	cpi	r28, 0x51	; 81
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     4de:	78 c0       	rjmp	.+240    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     4e0:	a0 d7       	rcall	.+3904   	; 0x1422 <XPROGProtocol_SetMode>
			break;
     4e2:	99 c0       	rjmp	.+306    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4e4:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     4e8:	c2 30       	cpi	r28, 0x02	; 2
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4f4:	8b 77       	andi	r24, 0x7B	; 123
     4f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     500:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     504:	81 60       	ori	r24, 0x01	; 1
     506:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     50a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     50e:	8d 2f       	mov	r24, r29
     510:	b8 d0       	rcall	.+368    	; 0x682 <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     512:	c2 30       	cpi	r28, 0x02	; 2
     514:	41 f4       	brne	.+16     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     516:	81 ff       	sbrs	r24, 1
     518:	0d c0       	rjmp	.+26     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     51a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     51e:	61 2f       	mov	r22, r17
     520:	8d 2f       	mov	r24, r29
     522:	bf d0       	rcall	.+382    	; 0x6a2 <V2Params_SetParameterValue>
     524:	73 c0       	rjmp	.+230    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     526:	80 ff       	sbrs	r24, 0
     528:	05 c0       	rjmp	.+10     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     52a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     52e:	8d 2f       	mov	r24, r29
     530:	b0 d0       	rcall	.+352    	; 0x692 <V2Params_GetParameterValue>
     532:	6a c0       	rjmp	.+212    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     534:	80 ec       	ldi	r24, 0xC0	; 192
     536:	68 c0       	rjmp	.+208    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	86 e6       	ldi	r24, 0x66	; 102
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 f7 10 	call	0x21ee	; 0x21ee <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     548:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     54c:	8b 77       	andi	r24, 0x7B	; 123
     54e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     558:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     55c:	81 60       	ori	r24, 0x01	; 1
     55e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     562:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <CurrentAddress>
     566:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <CurrentAddress+0x1>
     56a:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <CurrentAddress+0x2>
     56e:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <CurrentAddress+0x3>
     572:	b7 ff       	sbrs	r27, 7
     574:	03 c0       	rjmp	.+6      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
	  MustLoadExtendedAddress = true;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <MustLoadExtendedAddress>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     57c:	86 e0       	ldi	r24, 0x06	; 6
     57e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     582:	0f c0       	rjmp	.+30     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     584:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     588:	8b 77       	andi	r24, 0x7B	; 123
     58a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     594:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     598:	81 60       	ori	r24, 0x01	; 1
     59a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     59e:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     5a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
			break;
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
			break;
     5a6:	32 c0       	rjmp	.+100    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
     5a8:	3d d4       	rcall	.+2170   	; 0xe24 <ISPProtocol_LeaveISPMode>
     5aa:	35 c0       	rjmp	.+106    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
     5ac:	8c 2f       	mov	r24, r28
     5ae:	af d0       	rcall	.+350    	; 0x70e <ISPProtocol_ProgramMemory>
			break;
     5b0:	32 c0       	rjmp	.+100    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
     5b2:	8c 2f       	mov	r24, r28
			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
     5b4:	df d1       	rcall	.+958    	; 0x974 <ISPProtocol_ReadMemory>
     5b6:	2f c0       	rjmp	.+94     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     5b8:	69 d4       	rcall	.+2258   	; 0xe8c <ISPProtocol_ChipErase>
			break;
     5ba:	2d c0       	rjmp	.+90     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
     5bc:	8c 2f       	mov	r24, r28
     5be:	7a d2       	rcall	.+1268   	; 0xab4 <ISPProtocol_ReadFuseLockSigOSCCAL>
     5c0:	2a c0       	rjmp	.+84     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
			break;
     5c2:	8c 2f       	mov	r24, r28
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
     5c4:	d2 d2       	rcall	.+1444   	; 0xb6a <ISPProtocol_WriteFuseLock>
     5c6:	27 c0       	rjmp	.+78     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
			break;
     5c8:	16 d3       	rcall	.+1580   	; 0xbf6 <ISPProtocol_SPIMulti>
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
			break;
		case CMD_XPROG:
			XPROGProtocol_Command();
     5ca:	25 c0       	rjmp	.+74     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     5cc:	5a d7       	rcall	.+3764   	; 0x1482 <XPROGProtocol_Command>
			break;
     5ce:	23 c0       	rjmp	.+70     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5d0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     5d4:	80 34       	cpi	r24, 0x40	; 64
     5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5dc:	8b 77       	andi	r24, 0x7B	; 123
     5de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     5e2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
     5e6:	f4 cf       	rjmp	.-24     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5ec:	8b 77       	andi	r24, 0x7B	; 123
     5ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     5f8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     602:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     606:	89 ec       	ldi	r24, 0xC9	; 201
     608:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     60c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     610:	8e 77       	andi	r24, 0x7E	; 126
     612:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	a8 95       	wdr
     61c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     620:	88 61       	ori	r24, 0x18	; 24
     622:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     626:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     62a:	0f be       	out	0x3f, r0	; 63
	}

	/* Disable the timeout management watchdog timer */
	wdt_disable();

	Endpoint_WaitUntilReady();
     62c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     636:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     63a:	8e 7f       	andi	r24, 0xFE	; 254
     63c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	08 95       	ret

00000648 <V2Params_GetParamFromTable>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
     648:	e0 e0       	ldi	r30, 0x00	; 0
     64a:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     64c:	90 81       	ld	r25, Z
     64e:	98 17       	cp	r25, r24
     650:	41 f0       	breq	.+16     	; 0x662 <V2Params_GetParamFromTable+0x1a>
		  return CurrTableItem;

		CurrTableItem++;
     652:	33 96       	adiw	r30, 0x03	; 3
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	ee 31       	cpi	r30, 0x1E	; 30
     658:	f9 07       	cpc	r31, r25
     65a:	c1 f7       	brne	.-16     	; 0x64c <V2Params_GetParamFromTable+0x4>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	08 95       	ret
     662:	cf 01       	movw	r24, r30
}
     664:	08 95       	ret

00000666 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	/* Target RESET line polarity is a non-volatile value, retrieve current parameter value from EEPROM */
	V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = eeprom_read_byte(&EEPROM_Rest_Polarity);
     66a:	8e e9       	ldi	r24, 0x9E	; 158
     66c:	ed df       	rcall	.-38     	; 0x648 <V2Params_GetParamFromTable>
     66e:	ec 01       	movw	r28, r24
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 b8 12 	call	0x2570	; 0x2570 <eeprom_read_byte>
     678:	8a 83       	std	Y+2, r24	; 0x02
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <V2Params_UpdateParamValues>:

/** Updates any parameter values that are sourced from hardware rather than explicitly set by the host, such as
 *  VTARGET levels from the ADC on supported AVR models.
 */
void V2Params_UpdateParamValues(void)
{
     680:	08 95       	ret

00000682 <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     682:	e2 df       	rcall	.-60     	; 0x648 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     684:	00 97       	sbiw	r24, 0x00	; 0
     686:	19 f0       	breq	.+6      	; 0x68e <V2Params_GetParameterPrivileges+0xc>
	  return 0;

	return ParamInfo->ParamPrivileges;
     688:	fc 01       	movw	r30, r24
     68a:	81 81       	ldd	r24, Z+1	; 0x01
     68c:	08 95       	ret
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     68e:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamPrivileges;
}
     690:	08 95       	ret

00000692 <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     692:	da df       	rcall	.-76     	; 0x648 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	19 f0       	breq	.+6      	; 0x69e <V2Params_GetParameterValue+0xc>
	  return 0;

	return ParamInfo->ParamValue;
     698:	fc 01       	movw	r30, r24
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	08 95       	ret
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamValue;
}
     6a0:	08 95       	ret

000006a2 <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	d8 2f       	mov	r29, r24
     6a8:	c6 2f       	mov	r28, r22
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     6aa:	ce df       	rcall	.-100    	; 0x648 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     6ac:	00 97       	sbiw	r24, 0x00	; 0
     6ae:	59 f0       	breq	.+22     	; 0x6c6 <V2Params_SetParameterValue+0x24>
	  return;

	ParamInfo->ParamValue = Value;
     6b0:	fc 01       	movw	r30, r24
     6b2:	c2 83       	std	Z+2, r28	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     6b4:	de 39       	cpi	r29, 0x9E	; 158
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <V2Params_SetParameterValue+0x24>
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     6b8:	6c 2f       	mov	r22, r28
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28

	ParamInfo->ParamValue = Value;

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     6c2:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <eeprom_update_byte>
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <ISPTarget_TransferByte>:
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     6cc:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <HardwareSPIMode>
     6d0:	99 23       	and	r25, r25
     6d2:	31 f0       	breq	.+12     	; 0x6e0 <ISPTarget_TransferByte+0x14>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6d4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6d6:	0d b4       	in	r0, 0x2d	; 45
     6d8:	07 fe       	sbrs	r0, 7
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <ISPTarget_TransferByte+0xa>
				return SPDR;
     6dc:	8e b5       	in	r24, 0x2e	; 46
     6de:	08 95       	ret
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     6e0:	b8 c4       	rjmp	.+2416   	; 0x1052 <ISPTarget_TransferSoftSPIByte>

000006e2 <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     6e2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <HardwareSPIMode>
     6e6:	99 23       	and	r25, r25
     6e8:	29 f0       	breq	.+10     	; 0x6f4 <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ec:	0d b4       	in	r0, 0x2d	; 45
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <ISPTarget_SendByte+0xa>
     6f2:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     6f4:	ae c4       	rjmp	.+2396   	; 0x1052 <ISPTarget_TransferSoftSPIByte>

000006f6 <ISPTarget_ReceiveByte>:
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
     6f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HardwareSPIMode>
     6fa:	88 23       	and	r24, r24
     6fc:	31 f0       	breq	.+12     	; 0x70a <ISPTarget_ReceiveByte+0x14>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6fe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     700:	0d b4       	in	r0, 0x2d	; 45
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <ISPTarget_ReceiveByte+0xa>
				return SPDR;
     706:	8e b5       	in	r24, 0x2e	; 46
			  return SPI_ReceiveByte();
     708:	08 95       	ret
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	a2 c4       	rjmp	.+2372   	; 0x1052 <ISPTarget_TransferSoftSPIByte>

0000070e <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     70e:	2f 92       	push	r2
     710:	3f 92       	push	r3
     712:	4f 92       	push	r4
     714:	5f 92       	push	r5
     716:	6f 92       	push	r6
     718:	7f 92       	push	r7
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	c9 50       	subi	r28, 0x09	; 9
     738:	d1 40       	sbci	r29, 0x01	; 1
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	18 2f       	mov	r17, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	69 e0       	ldi	r22, 0x09	; 9
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	3c 01       	movw	r6, r24
     754:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     758:	69 81       	ldd	r22, Y+1	; 0x01
     75a:	7a 81       	ldd	r23, Y+2	; 0x02

				Temp = Data.Bytes[0];
     75c:	86 2f       	mov	r24, r22
				Data.Bytes[0] = Data.Bytes[1];
     75e:	67 2f       	mov	r22, r23
				Data.Bytes[1] = Temp;
     760:	78 2f       	mov	r23, r24
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     762:	7a 83       	std	Y+2, r23	; 0x02
     764:	69 83       	std	Y+1, r22	; 0x01
	
	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     766:	61 30       	cpi	r22, 0x01	; 1
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	79 07       	cpc	r23, r25
     76c:	88 f0       	brcs	.+34     	; 0x790 <ISPProtocol_ProgramMemory+0x82>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     76e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     772:	8b 77       	andi	r24, 0x7B	; 123
     774:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     77e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     782:	81 60       	ori	r24, 0x01	; 1
     784:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     788:	10 93 f1 00 	sts	0x00F1, r17	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     78c:	80 ec       	ldi	r24, 0xC0	; 192
     78e:	d1 c0       	rjmp	.+418    	; 0x932 <ISPProtocol_ProgramMemory+0x224>
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	ce 01       	movw	r24, r28
     796:	0a 96       	adiw	r24, 0x0a	; 10
     798:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	0a 96       	adiw	r24, 0x0a	; 10
     7a2:	8f 73       	andi	r24, 0x3F	; 63
     7a4:	99 27       	eor	r25, r25
     7a6:	89 2b       	or	r24, r25
     7a8:	39 f4       	brne	.+14     	; 0x7b8 <ISPProtocol_ProgramMemory+0xaa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7ae:	8b 77       	andi	r24, 0x7B	; 123
     7b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     7b4:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
     7b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7bc:	8b 77       	andi	r24, 0x7B	; 123
     7be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7c8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     7cc:	81 60       	ori	r24, 0x01	; 1
     7ce:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
     7d2:	13 31       	cpi	r17, 0x13	; 19
     7d4:	11 f4       	brne	.+4      	; 0x7da <ISPProtocol_ProgramMemory+0xcc>
     7d6:	c8 84       	ldd	r12, Y+8	; 0x08
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <ISPProtocol_ProgramMemory+0xce>
     7da:	c9 84       	ldd	r12, Y+9	; 0x09
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     7dc:	20 90 66 01 	lds	r2, 0x0166	; 0x800166 <CurrentAddress>
     7e0:	30 90 67 01 	lds	r3, 0x0167	; 0x800167 <CurrentAddress+0x1>
     7e4:	40 90 68 01 	lds	r4, 0x0168	; 0x800168 <CurrentAddress+0x2>
     7e8:	50 90 69 01 	lds	r5, 0x0169	; 0x800169 <CurrentAddress+0x3>

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     7ec:	53 01       	movw	r10, r6
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
     7ee:	e1 2c       	mov	r14, r1
     7f0:	f1 2c       	mov	r15, r1
     7f2:	45 01       	movw	r8, r10
     7f4:	86 18       	sub	r8, r6
     7f6:	97 08       	sbc	r9, r7
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	88 16       	cp	r8, r24
     7fe:	99 06       	cpc	r9, r25
     800:	08 f0       	brcs	.+2      	; 0x804 <ISPProtocol_ProgramMemory+0xf6>
     802:	67 c0       	rjmp	.+206    	; 0x8d2 <ISPProtocol_ProgramMemory+0x1c4>
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     804:	f5 01       	movw	r30, r10
     806:	01 85       	ldd	r16, Z+9	; 0x09
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     808:	db 80       	ldd	r13, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     80a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <MustLoadExtendedAddress>
     80e:	88 23       	and	r24, r24
     810:	19 f0       	breq	.+6      	; 0x818 <ISPProtocol_ProgramMemory+0x10a>
		{
			ISPTarget_LoadExtendedAddress();
     812:	6f d4       	rcall	.+2270   	; 0x10f2 <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     814:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <MustLoadExtendedAddress>
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	63 df       	rcall	.-314    	; 0x6e2 <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     81c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <CurrentAddress+0x1>
     820:	60 df       	rcall	.-320    	; 0x6e2 <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     822:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <CurrentAddress>
     826:	5d df       	rcall	.-326    	; 0x6e2 <ISPTarget_SendByte>
		ISPTarget_SendByte(ByteToWrite);
     828:	80 2f       	mov	r24, r16
     82a:	5b df       	rcall	.-330    	; 0x6e2 <ISPTarget_SendByte>
     82c:	13 31       	cpi	r17, 0x13	; 19

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     82e:	21 f4       	brne	.+8      	; 0x838 <ISPProtocol_ProgramMemory+0x12a>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     832:	f8 e0       	ldi	r31, 0x08	; 8
     834:	8f 27       	eor	r24, r31
     836:	8d 83       	std	Y+5, r24	; 0x05
     838:	e1 14       	cp	r14, r1

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     83a:	f1 04       	cpc	r15, r1
     83c:	79 f4       	brne	.+30     	; 0x85c <ISPProtocol_ProgramMemory+0x14e>
     83e:	c0 16       	cp	r12, r16
     840:	69 f0       	breq	.+26     	; 0x85c <ISPProtocol_ProgramMemory+0x14e>
     842:	8f 81       	ldd	r24, Y+7	; 0x07
     844:	80 fe       	sbrs	r8, 0
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     846:	04 c0       	rjmp	.+8      	; 0x850 <ISPProtocol_ProgramMemory+0x142>
     848:	13 31       	cpi	r17, 0x13	; 19
     84a:	11 f4       	brne	.+4      	; 0x850 <ISPProtocol_ProgramMemory+0x142>
     84c:	88 60       	ori	r24, 0x08	; 8
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     84e:	01 c0       	rjmp	.+2      	; 0x852 <ISPProtocol_ProgramMemory+0x144>
     850:	87 7f       	andi	r24, 0xF7	; 247
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     852:	8f 83       	std	Y+7, r24	; 0x07
     854:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <CurrentAddress>

			PollAddress = (CurrentAddress & 0xFFFF);
     858:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <CurrentAddress+0x1>
     85c:	d0 fc       	sbrc	r13, 0
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     85e:	13 c0       	rjmp	.+38     	; 0x886 <ISPProtocol_ProgramMemory+0x178>
     860:	e1 14       	cp	r14, r1
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     862:	f1 04       	cpc	r15, r1
     864:	31 f4       	brne	.+12     	; 0x872 <ISPProtocol_ProgramMemory+0x164>
     866:	d3 fc       	sbrc	r13, 3
     868:	04 c0       	rjmp	.+8      	; 0x872 <ISPProtocol_ProgramMemory+0x164>
     86a:	8d 2d       	mov	r24, r13
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     86c:	89 7f       	andi	r24, 0xF9	; 249
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	d8 2e       	mov	r13, r24
     872:	0f 81       	ldd	r16, Y+7	; 0x07

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     874:	2c 81       	ldd	r18, Y+4	; 0x04
     876:	4c 2d       	mov	r20, r12
     878:	b7 01       	movw	r22, r14
     87a:	8d 2d       	mov	r24, r13
     87c:	43 d4       	rcall	.+2182   	; 0x1104 <ISPTarget_WaitForProgComplete>
     87e:	81 11       	cpse	r24, r1
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     880:	29 c0       	rjmp	.+82     	; 0x8d4 <ISPProtocol_ProgramMemory+0x1c6>
     882:	e1 2c       	mov	r14, r1
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     884:	f1 2c       	mov	r15, r1
     886:	80 fc       	sbrc	r8, 0
		}
		
		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     888:	02 c0       	rjmp	.+4      	; 0x88e <ISPProtocol_ProgramMemory+0x180>
     88a:	15 31       	cpi	r17, 0x15	; 21
     88c:	f1 f4       	brne	.+60     	; 0x8ca <ISPProtocol_ProgramMemory+0x1bc>
     88e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <CurrentAddress>
		{
			CurrentAddress++;
     892:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <CurrentAddress+0x1>
     896:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <CurrentAddress+0x2>
     89a:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <CurrentAddress+0x3>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	a1 1d       	adc	r26, r1
     8a2:	b1 1d       	adc	r27, r1
     8a4:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <CurrentAddress>
     8a8:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <CurrentAddress+0x1>
     8ac:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <CurrentAddress+0x2>
     8b0:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <CurrentAddress+0x3>
     8b4:	13 31       	cpi	r17, 0x13	; 19

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     8b6:	49 f4       	brne	.+18     	; 0x8ca <ISPProtocol_ProgramMemory+0x1bc>
     8b8:	aa 27       	eor	r26, r26
     8ba:	bb 27       	eor	r27, r27
     8bc:	89 2b       	or	r24, r25
     8be:	8a 2b       	or	r24, r26
     8c0:	8b 2b       	or	r24, r27
     8c2:	19 f4       	brne	.+6      	; 0x8ca <ISPProtocol_ProgramMemory+0x1bc>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
			  MustLoadExtendedAddress = true;
     8c6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <MustLoadExtendedAddress>
     8ca:	9f ef       	ldi	r25, 0xFF	; 255
     8cc:	a9 1a       	sub	r10, r25
     8ce:	b9 0a       	sbc	r11, r25
     8d0:	90 cf       	rjmp	.-224    	; 0x7f2 <ISPProtocol_ProgramMemory+0xe4>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     8d4:	9b 81       	ldd	r25, Y+3	; 0x03
     8d6:	97 ff       	sbrs	r25, 7
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     8d8:	2a c0       	rjmp	.+84     	; 0x92e <ISPProtocol_ProgramMemory+0x220>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
		ISPTarget_SendByte(PageStartAddress >> 8);
     8dc:	02 df       	rcall	.-508    	; 0x6e2 <ISPTarget_SendByte>
     8de:	83 2d       	mov	r24, r3
     8e0:	00 df       	rcall	.-512    	; 0x6e2 <ISPTarget_SendByte>
		ISPTarget_SendByte(PageStartAddress & 0xFF);
     8e2:	82 2d       	mov	r24, r2
     8e4:	fe de       	rcall	.-516    	; 0x6e2 <ISPTarget_SendByte>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
		ISPTarget_SendByte(0x00);
     8e8:	fc de       	rcall	.-520    	; 0x6e2 <ISPTarget_SendByte>
     8ea:	8b 81       	ldd	r24, Y+3	; 0x03
     8ec:	85 ff       	sbrs	r24, 5

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     8ee:	06 c0       	rjmp	.+12     	; 0x8fc <ISPProtocol_ProgramMemory+0x1ee>
     8f0:	e1 14       	cp	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	19 f4       	brne	.+6      	; 0x8fc <ISPProtocol_ProgramMemory+0x1ee>
     8f6:	8f 7c       	andi	r24, 0xCF	; 207
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     8f8:	80 61       	ori	r24, 0x10	; 16
     8fa:	8b 83       	std	Y+3, r24	; 0x03
     8fc:	0f 81       	ldd	r16, Y+7	; 0x07
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     8fe:	2c 81       	ldd	r18, Y+4	; 0x04
     900:	4c 2d       	mov	r20, r12
     902:	b7 01       	movw	r22, r14
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	fe d3       	rcall	.+2044   	; 0x1104 <ISPTarget_WaitForProgComplete>
     908:	13 31       	cpi	r17, 0x13	; 19
     90a:	89 f4       	brne	.+34     	; 0x92e <ISPProtocol_ProgramMemory+0x220>
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     90c:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <CurrentAddress>
     910:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <CurrentAddress+0x1>
     914:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <CurrentAddress+0x2>
     918:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <CurrentAddress+0x3>
     91c:	66 27       	eor	r22, r22
     91e:	77 27       	eor	r23, r23
     920:	45 2b       	or	r20, r21
     922:	46 2b       	or	r20, r22
     924:	47 2b       	or	r20, r23
     926:	19 f4       	brne	.+6      	; 0x92e <ISPProtocol_ProgramMemory+0x220>
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <MustLoadExtendedAddress>
		  MustLoadExtendedAddress = true;
     92e:	10 93 f1 00 	sts	0x00F1, r17	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     932:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     936:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     93a:	8e 77       	andi	r24, 0x7E	; 126
     93c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     940:	c7 5f       	subi	r28, 0xF7	; 247
     942:	de 4f       	sbci	r29, 0xFE	; 254
	}	

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	9f 90       	pop	r9
     964:	8f 90       	pop	r8
     966:	7f 90       	pop	r7
     968:	6f 90       	pop	r6
     96a:	5f 90       	pop	r5
     96c:	4f 90       	pop	r4
     96e:	3f 90       	pop	r3
     970:	2f 90       	pop	r2
     972:	08 95       	ret

00000974 <ISPProtocol_ReadMemory>:
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	00 d0       	rcall	.+0      	; 0x984 <ISPProtocol_ReadMemory+0x10>
     984:	1f 92       	push	r1
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	f8 2e       	mov	r15, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	63 e0       	ldi	r22, 0x03	; 3
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02

				Temp = Data.Bytes[0];
     9a0:	28 2f       	mov	r18, r24
				Data.Bytes[0] = Data.Bytes[1];
     9a2:	89 2f       	mov	r24, r25
				Data.Bytes[1] = Temp;
     9a4:	92 2f       	mov	r25, r18
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     9ae:	8b 77       	andi	r24, 0x7B	; 123
     9b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     9ba:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     9be:	81 60       	ori	r24, 0x01	; 1
     9c0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9c4:	f0 92 f1 00 	sts	0x00F1, r15	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     9c8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     9cc:	00 e0       	ldi	r16, 0x00	; 0
     9ce:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	e8 2e       	mov	r14, r24
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     9d4:	dd 24       	eor	r13, r13
     9d6:	d3 94       	inc	r13

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
     9dc:	08 17       	cp	r16, r24
     9de:	19 07       	cpc	r17, r25
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <ISPProtocol_ReadMemory+0x70>
     9e2:	49 c0       	rjmp	.+146    	; 0xa76 <ISPProtocol_ReadMemory+0x102>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     9e4:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <MustLoadExtendedAddress>
     9e8:	88 23       	and	r24, r24
     9ea:	19 f0       	breq	.+6      	; 0x9f2 <ISPProtocol_ReadMemory+0x7e>
		{
			ISPTarget_LoadExtendedAddress();
     9ec:	82 d3       	rcall	.+1796   	; 0x10f2 <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     9ee:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <MustLoadExtendedAddress>
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	76 de       	rcall	.-788    	; 0x6e2 <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     9f6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <CurrentAddress+0x1>
     9fa:	73 de       	rcall	.-794    	; 0x6e2 <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     9fc:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <CurrentAddress>
     a00:	70 de       	rcall	.-800    	; 0x6e2 <ISPTarget_SendByte>
		Endpoint_Write_8(ISPTarget_ReceiveByte());
     a02:	79 de       	rcall	.-782    	; 0x6f6 <ISPTarget_ReceiveByte>
     a04:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     a08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a0c:	85 fd       	sbrc	r24, 5

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <ISPProtocol_ReadMemory+0xaa>
     a10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a14:	8e 77       	andi	r24, 0x7E	; 126
     a16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a1a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     a1e:	24 e1       	ldi	r18, 0x14	; 20
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     a20:	f2 12       	cpse	r15, r18
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <ISPProtocol_ReadMemory+0xb6>
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     a26:	8e 25       	eor	r24, r14
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	00 fd       	sbrc	r16, 0

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <ISPProtocol_ReadMemory+0xc0>
     a2e:	86 e1       	ldi	r24, 0x16	; 22
     a30:	f8 12       	cpse	r15, r24
     a32:	1e c0       	rjmp	.+60     	; 0xa70 <ISPProtocol_ReadMemory+0xfc>
     a34:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <CurrentAddress>
		{
			CurrentAddress++;
     a38:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <CurrentAddress+0x1>
     a3c:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <CurrentAddress+0x2>
     a40:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <CurrentAddress+0x3>
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	a1 1d       	adc	r26, r1
     a48:	b1 1d       	adc	r27, r1
     a4a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <CurrentAddress>
     a4e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <CurrentAddress+0x1>
     a52:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <CurrentAddress+0x2>
     a56:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <CurrentAddress+0x3>
     a5a:	26 e1       	ldi	r18, 0x16	; 22

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     a5c:	f2 16       	cp	r15, r18
     a5e:	41 f0       	breq	.+16     	; 0xa70 <ISPProtocol_ReadMemory+0xfc>
     a60:	aa 27       	eor	r26, r26
     a62:	bb 27       	eor	r27, r27
     a64:	89 2b       	or	r24, r25
     a66:	8a 2b       	or	r24, r26
     a68:	8b 2b       	or	r24, r27
     a6a:	11 f4       	brne	.+4      	; 0xa70 <ISPProtocol_ReadMemory+0xfc>
     a6c:	d0 92 65 01 	sts	0x0165, r13	; 0x800165 <MustLoadExtendedAddress>
			  MustLoadExtendedAddress = true;
     a70:	0f 5f       	subi	r16, 0xFF	; 255

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	b1 cf       	rjmp	.-158    	; 0x9d8 <ISPProtocol_ReadMemory+0x64>
     a76:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a7a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a82:	8e 77       	andi	r24, 0x7E	; 126
     a84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a88:	95 fd       	sbrc	r25, 5

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <ISPProtocol_ReadMemory+0x12a>
     a8c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
	{
		Endpoint_WaitUntilReady();
     a90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a94:	8e 77       	andi	r24, 0x7E	; 126
     a96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a9a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     a9e:	0f 90       	pop	r0
	}
}
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	08 95       	ret

00000ab4 <ISPProtocol_ReadFuseLockSigOSCCAL>:
     ab4:	af 92       	push	r10
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     ab6:	bf 92       	push	r11
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	29 97       	sbiw	r28, 0x09	; 9
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	d8 2e       	mov	r13, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	65 e0       	ldi	r22, 0x05	; 5
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ae8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     aec:	8b 77       	andi	r24, 0x7B	; 123
     aee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     af8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b02:	8e 01       	movw	r16, r28
     b04:	0e 5f       	subi	r16, 0xFE	; 254
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	7e 01       	movw	r14, r28
     b0a:	86 e0       	ldi	r24, 0x06	; 6
     b0c:	e8 0e       	add	r14, r24
     b0e:	f1 1c       	adc	r15, r1
     b10:	57 01       	movw	r10, r14

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     b12:	f8 01       	movw	r30, r16
     b14:	81 91       	ld	r24, Z+
     b16:	8f 01       	movw	r16, r30
     b18:	d9 dd       	rcall	.-1102   	; 0x6cc <ISPTarget_TransferByte>
     b1a:	f7 01       	movw	r30, r14
     b1c:	81 93       	st	Z+, r24
     b1e:	7f 01       	movw	r14, r30
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     b20:	0a 15       	cp	r16, r10
     b22:	1b 05       	cpc	r17, r11
     b24:	b1 f7       	brne	.-20     	; 0xb12 <ISPProtocol_ReadFuseLockSigOSCCAL+0x5e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b26:	d0 92 f1 00 	sts	0x00F1, r13	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     b2a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	fe 01       	movw	r30, r28
     b32:	e8 0f       	add	r30, r24
     b34:	f1 1d       	adc	r31, r1
     b36:	85 81       	ldd	r24, Z+5	; 0x05
     b38:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     b3c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b44:	8e 77       	andi	r24, 0x7E	; 126
     b46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     b4a:	29 96       	adiw	r28, 0x09	; 9
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	bf 90       	pop	r11
     b66:	af 90       	pop	r10
     b68:	08 95       	ret

00000b6a <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	00 d0       	rcall	.+0      	; 0xb7a <ISPProtocol_WriteFuseLock+0x10>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <ISPProtocol_WriteFuseLock+0x12>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	f8 2e       	mov	r15, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	64 e0       	ldi	r22, 0x04	; 4
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b96:	8b 77       	andi	r24, 0x7B	; 123
     b98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ba2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     bac:	8e 01       	movw	r16, r28
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	6e 01       	movw	r12, r28
     bb4:	85 e0       	ldi	r24, 0x05	; 5
     bb6:	c8 0e       	add	r12, r24
     bb8:	d1 1c       	adc	r13, r1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     bba:	f8 01       	movw	r30, r16
     bbc:	81 91       	ld	r24, Z+
     bbe:	8f 01       	movw	r16, r30
     bc0:	90 dd       	rcall	.-1248   	; 0x6e2 <ISPTarget_SendByte>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     bc2:	0c 15       	cp	r16, r12
     bc4:	1d 05       	cpc	r17, r13
     bc6:	c9 f7       	brne	.-14     	; 0xbba <ISPProtocol_WriteFuseLock+0x50>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bc8:	f0 92 f1 00 	sts	0x00F1, r15	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     bcc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     bd0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     bd8:	8e 77       	andi	r24, 0x7E	; 126
     bda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	08 95       	ret

00000bf6 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	c2 50       	subi	r28, 0x02	; 2
     c06:	d1 40       	sbci	r29, 0x01	; 1
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	63 e0       	ldi	r22, 0x03	; 3
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     c22:	69 81       	ldd	r22, Y+1	; 0x01
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	ce 01       	movw	r24, r28
     c2c:	04 96       	adiw	r24, 0x04	; 4
     c2e:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     c36:	8b 77       	andi	r24, 0x7B	; 123
     c38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     c42:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     c46:	81 60       	ori	r24, 0x01	; 1
     c48:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c4c:	8d e1       	ldi	r24, 0x1D	; 29
     c4e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     c52:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SPI_MULTI);
	Endpoint_Write_8(STATUS_CMD_OK);

	uint8_t CurrTxPos = 0;
     c56:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	18 17       	cp	r17, r24
     c5c:	78 f4       	brcc	.+30     	; 0xc7c <ISPProtocol_SPIMulti+0x86>
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	18 17       	cp	r17, r24
     c62:	40 f4       	brcc	.+16     	; 0xc74 <ISPProtocol_SPIMulti+0x7e>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     c64:	e4 e0       	ldi	r30, 0x04	; 4
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ec 0f       	add	r30, r28
     c6a:	fd 1f       	adc	r31, r29
     c6c:	e1 0f       	add	r30, r17
     c6e:	f1 1d       	adc	r31, r1
     c70:	80 81       	ld	r24, Z
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <ISPProtocol_SPIMulti+0x80>
		else
		  ISPTarget_SendByte(0);
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	35 dd       	rcall	.-1430   	; 0x6e2 <ISPTarget_SendByte>

		CurrTxPos++;
     c78:	1f 5f       	subi	r17, 0xFF	; 255
     c7a:	ee cf       	rjmp	.-36     	; 0xc58 <ISPProtocol_SPIMulti+0x62>
     c7c:	00 e0       	ldi	r16, 0x00	; 0
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	08 17       	cp	r16, r24
     c82:	10 f5       	brcc	.+68     	; 0xcc8 <ISPProtocol_SPIMulti+0xd2>
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	18 17       	cp	r17, r24
     c88:	78 f4       	brcc	.+30     	; 0xca8 <ISPProtocol_SPIMulti+0xb2>
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     c8a:	ff 24       	eor	r15, r15
     c8c:	f3 94       	inc	r15
     c8e:	f1 0e       	add	r15, r17
     c90:	e4 e0       	ldi	r30, 0x04	; 4
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	ec 0f       	add	r30, r28
     c96:	fd 1f       	adc	r31, r29
     c98:	e1 0f       	add	r30, r17
     c9a:	f1 1d       	adc	r31, r1
     c9c:	80 81       	ld	r24, Z
     c9e:	16 dd       	rcall	.-1492   	; 0x6cc <ISPTarget_TransferByte>
     ca0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     ca4:	1f 2d       	mov	r17, r15
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <ISPProtocol_SPIMulti+0xb8>
     ca8:	26 dd       	rcall	.-1460   	; 0x6f6 <ISPTarget_ReceiveByte>
     caa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     cb2:	85 fd       	sbrc	r24, 5
     cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <ISPProtocol_SPIMulti+0xce>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cba:	8e 77       	andi	r24, 0x7E	; 126
     cbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     cc0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
		}

		CurrRxPos++;
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	db cf       	rjmp	.-74     	; 0xc7e <ISPProtocol_SPIMulti+0x88>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cc8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ccc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cd4:	8e 77       	andi	r24, 0x7E	; 126
     cd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     cda:	95 fd       	sbrc	r25, 5
     cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <ISPProtocol_SPIMulti+0xfa>
	{
		Endpoint_WaitUntilReady();
     cde:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
     ce2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ce6:	8e 77       	andi	r24, 0x7E	; 126
     ce8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     cec:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <Endpoint_WaitUntilReady>
	}
}
     cf0:	ce 5f       	subi	r28, 0xFE	; 254
     cf2:	de 4f       	sbci	r29, 0xFE	; 254
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	08 95       	ret

00000d0a <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	while (DelayMS-- && !(TimeoutExpired))
     d0a:	88 23       	and	r24, r24
     d0c:	59 f0       	breq	.+22     	; 0xd24 <ISPProtocol_DelayMS+0x1a>
     d0e:	9a b5       	in	r25, 0x2a	; 42
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	91 11       	cpse	r25, r1
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <ISPProtocol_DelayMS+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d16:	ef e9       	ldi	r30, 0x9F	; 159
     d18:	ff e0       	ldi	r31, 0x0F	; 15
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <ISPProtocol_DelayMS+0x10>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <ISPProtocol_DelayMS+0x16>
     d20:	00 00       	nop
     d22:	f3 cf       	rjmp	.-26     	; 0xd0a <ISPProtocol_DelayMS>
     d24:	08 95       	ret

00000d26 <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	2f 97       	sbiw	r28, 0x0f	; 15
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	6b e0       	ldi	r22, 0x0B	; 11
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d5a:	8b 77       	andi	r24, 0x7B	; 123
     d5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d66:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     d70:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <CurrentAddress>
     d74:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <CurrentAddress+0x1>
     d78:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <CurrentAddress+0x2>
     d7c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <CurrentAddress+0x3>

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	c3 df       	rcall	.-122    	; 0xd0a <ISPProtocol_DelayMS>
	ISPTarget_EnableTargetISP();
     d84:	3f d1       	rcall	.+638    	; 0x1004 <ISPTarget_EnableTargetISP>
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
			ISPTarget_ChangeTargetResetLine(true);
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	8d d1       	rcall	.+794    	; 0x10a4 <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	be df       	rcall	.-132    	; 0xd0a <ISPProtocol_DelayMS>
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
	ISPTarget_ChangeTargetResetLine(true);
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && !(TimeoutExpired))
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	98 0f       	add	r25, r24
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	88 23       	and	r24, r24
     d98:	59 f1       	breq	.+86     	; 0xdf0 <ISPProtocol_EnterISPMode+0xca>
     d9a:	8a b5       	in	r24, 0x2a	; 42
     d9c:	81 11       	cpse	r24, r1
     d9e:	28 c0       	rjmp	.+80     	; 0xdf0 <ISPProtocol_EnterISPMode+0xca>
     da0:	7e 01       	movw	r14, r28
     da2:	f8 e0       	ldi	r31, 0x08	; 8
     da4:	ef 0e       	add	r14, r31
     da6:	f1 1c       	adc	r15, r1
     da8:	8e 01       	movw	r16, r28
     daa:	04 5f       	subi	r16, 0xF4	; 244
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	68 01       	movw	r12, r16
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	ab df       	rcall	.-170    	; 0xd0a <ISPProtocol_DelayMS>
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     db4:	f7 01       	movw	r30, r14
     db6:	81 91       	ld	r24, Z+
     db8:	7f 01       	movw	r14, r30
     dba:	88 dc       	rcall	.-1776   	; 0x6cc <ISPTarget_TransferByte>
     dbc:	f8 01       	movw	r30, r16
     dbe:	81 93       	st	Z+, r24
     dc0:	8f 01       	movw	r16, r30
     dc2:	ec 14       	cp	r14, r12
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && !(TimeoutExpired))
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     dc4:	fd 04       	cpc	r15, r13
     dc6:	a1 f7       	brne	.-24     	; 0xdb0 <ISPProtocol_EnterISPMode+0x8a>
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     dca:	88 23       	and	r24, r24
     dcc:	51 f0       	breq	.+20     	; 0xde2 <ISPProtocol_EnterISPMode+0xbc>
     dce:	eb e0       	ldi	r30, 0x0B	; 11
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	ec 0f       	add	r30, r28
     dd4:	fd 1f       	adc	r31, r29
     dd6:	e8 0f       	add	r30, r24
     dd8:	f1 1d       	adc	r31, r1
     dda:	90 81       	ld	r25, Z
     ddc:	8e 81       	ldd	r24, Y+6	; 0x06
     dde:	98 13       	cpse	r25, r24
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <ISPProtocol_EnterISPMode+0xc0>
		{
			ResponseStatus = STATUS_CMD_OK;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <ISPProtocol_EnterISPMode+0xcc>
			break;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	5d d1       	rcall	.+698    	; 0x10a4 <ISPTarget_ChangeTargetResetLine>
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     dec:	8e df       	rcall	.-228    	; 0xd0a <ISPProtocol_DelayMS>
     dee:	cb cf       	rjmp	.-106    	; 0xd86 <ISPProtocol_EnterISPMode+0x60>
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	90 e1       	ldi	r25, 0x10	; 16

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     df4:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     df8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     dfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e00:	8e 77       	andi	r24, 0x7E	; 126
     e02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e06:	2f 96       	adiw	r28, 0x0f	; 15
     e08:	0f b6       	in	r0, 0x3f	; 63
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	08 95       	ret

00000e24 <ISPProtocol_LeaveISPMode>:
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <ISPProtocol_LeaveISPMode+0xa>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	62 e0       	ldi	r22, 0x02	; 2
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e42:	08 ee       	ldi	r16, 0xE8	; 232
     e44:	10 e0       	ldi	r17, 0x00	; 0
     e46:	f8 01       	movw	r30, r16
     e48:	80 81       	ld	r24, Z
     e4a:	8b 77       	andi	r24, 0x7B	; 123
     e4c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e54:	ec ee       	ldi	r30, 0xEC	; 236
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	54 df       	rcall	.-344    	; 0xd0a <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(false);
     e62:	80 e0       	ldi	r24, 0x00	; 0
	ISPTarget_DisableTargetISP();
     e64:	1f d1       	rcall	.+574    	; 0x10a4 <ISPTarget_ChangeTargetResetLine>
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     e66:	a2 d0       	rcall	.+324    	; 0xfac <ISPTarget_DisableTargetISP>
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	4f df       	rcall	.-354    	; 0xd0a <ISPProtocol_DelayMS>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e6c:	e1 ef       	ldi	r30, 0xF1	; 241
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	81 e1       	ldi	r24, 0x11	; 17
     e72:	80 83       	st	Z, r24
     e74:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e76:	f8 01       	movw	r30, r16
     e78:	80 81       	ld	r24, Z
     e7a:	8e 77       	andi	r24, 0x7E	; 126
     e7c:	80 83       	st	Z, r24

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <ISPProtocol_ChipErase>:
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ISPProtocol_ChipErase+0xe>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <ISPProtocol_ChipErase+0x10>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <ISPProtocol_ChipErase+0x12>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	66 e0       	ldi	r22, 0x06	; 6
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	0e 94 ad 10 	call	0x215a	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     eb6:	8b 77       	andi	r24, 0x7B	; 123
     eb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ec2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     ecc:	8e 01       	movw	r16, r28
     ece:	0d 5f       	subi	r16, 0xFD	; 253
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	7e 01       	movw	r14, r28
     ed4:	87 e0       	ldi	r24, 0x07	; 7
     ed6:	e8 0e       	add	r14, r24
     ed8:	f1 1c       	adc	r15, r1

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     eda:	f8 01       	movw	r30, r16
     edc:	81 91       	ld	r24, Z+
     ede:	8f 01       	movw	r16, r30
     ee0:	00 dc       	rcall	.-2048   	; 0x6e2 <ISPTarget_SendByte>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     ee2:	0e 15       	cp	r16, r14
     ee4:	1f 05       	cpc	r17, r15
     ee6:	c9 f7       	brne	.-14     	; 0xeda <ISPProtocol_ChipErase+0x4e>
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	81 11       	cpse	r24, r1
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <ISPProtocol_ChipErase+0x6a>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	0c df       	rcall	.-488    	; 0xd0a <ISPProtocol_DelayMS>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;
     ef2:	80 e0       	ldi	r24, 0x00	; 0

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <ISPProtocol_ChipErase+0x6c>
     ef6:	e2 d0       	rcall	.+452    	; 0x10bc <ISPTarget_WaitWhileTargetBusy>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ef8:	92 e1       	ldi	r25, 0x12	; 18
     efa:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     efe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f06:	8e 77       	andi	r24, 0x7E	; 126
     f08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     f0c:	26 96       	adiw	r28, 0x06	; 6
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	08 95       	ret

00000f26 <__vector_15>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     f34:	19 99       	sbic	0x03, 1	; 3
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <__vector_15+0x22>
	{
		if (SoftSPI_Data & (1 << 7))
     f38:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <SoftSPI_Data>
     f3c:	87 ff       	sbrs	r24, 7
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__vector_15+0x1e>
		  PORTB |=  (1 << 2);
     f40:	2a 9a       	sbi	0x05, 2	; 5
     f42:	18 c0       	rjmp	.+48     	; 0xf74 <__vector_15+0x4e>
		else
		  PORTB &= ~(1 << 2);
     f44:	2a 98       	cbi	0x05, 2	; 5
     f46:	16 c0       	rjmp	.+44     	; 0xf74 <__vector_15+0x4e>
	}
	else
	{
		SoftSPI_Data <<= 1;
     f48:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <SoftSPI_Data>
     f4c:	88 0f       	add	r24, r24
     f4e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <SoftSPI_Data>

		if (!(SoftSPI_BitsRemaining--))
     f52:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	98 0f       	add	r25, r24
     f5a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__data_end>
     f5e:	81 11       	cpse	r24, r1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <__vector_15+0x40>
		  TCCR1B = 0;
     f62:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

		if (PINB & (1 << 3))
     f66:	1b 9b       	sbis	0x03, 3	; 3
     f68:	05 c0       	rjmp	.+10     	; 0xf74 <__vector_15+0x4e>
		  SoftSPI_Data |= (1 << 0);
     f6a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <SoftSPI_Data>
     f6e:	81 60       	ori	r24, 0x01	; 1
     f70:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <SoftSPI_Data>
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
     f74:	19 9a       	sbi	0x03, 1	; 3
}
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <ISPTarget_ConfigureRescueClock>:
		UCSR1B = (1 << TXEN1);
		UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
     f84:	3e 9a       	sbi	0x07, 6	; 7
		#else
		DDRB |= (1 << 5);
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
     f86:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
		TCNT1  = 0;
     f8a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f8e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     f9a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
		TCCR1A = (1 << COM1A0);
     f9e:	80 e4       	ldi	r24, 0x40	; 64
     fa0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
		TCCR1B = ((1 << WGM12) | (1 << CS10));
     fa4:	89 e0       	ldi	r24, 0x09	; 9
     fa6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     faa:	08 95       	ret

00000fac <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
     fac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HardwareSPIMode>
     fb0:	88 23       	and	r24, r24
     fb2:	49 f0       	breq	.+18     	; 0xfc6 <ISPTarget_DisableTargetISP+0x1a>
			}

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     fb4:	84 b1       	in	r24, 0x04	; 4
     fb6:	89 7f       	andi	r24, 0xF9	; 249
     fb8:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
     fba:	85 b1       	in	r24, 0x05	; 5
     fbc:	86 7f       	andi	r24, 0xF6	; 246
     fbe:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
     fc0:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
     fc2:	1d bc       	out	0x2d, r1	; 45
     fc4:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
     fc6:	84 b1       	in	r24, 0x04	; 4
     fc8:	89 7f       	andi	r24, 0xF9	; 249
     fca:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
     fcc:	85 b1       	in	r24, 0x05	; 5
     fce:	86 7f       	andi	r24, 0xF6	; 246
     fd0:	85 b9       	out	0x05, r24	; 5
		
		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
     fd2:	d8 cf       	rjmp	.-80     	; 0xf84 <ISPTarget_ConfigureRescueClock>

00000fd4 <ISPTarget_ConfigureSoftwareSPI>:
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	TCNT1  = 0;
     fda:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fde:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
     fe2:	e8 2f       	mov	r30, r24
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	ea 5d       	subi	r30, 0xDA	; 218
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	85 91       	lpm	r24, Z+
     ff0:	94 91       	lpm	r25, Z
     ff2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     ff6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCCR1A = 0;
     ffa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = 0;
     ffe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
    1002:	08 95       	ret

00001004 <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
    1004:	88 e9       	ldi	r24, 0x98	; 152
    1006:	45 db       	rcall	.-2422   	; 0x692 <V2Params_GetParameterValue>

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
    1008:	87 30       	cpi	r24, 0x07	; 7
    100a:	d0 f4       	brcc	.+52     	; 0x1040 <ISPTarget_EnableTargetISP+0x3c>
	{
		HardwareSPIMode = true;
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <HardwareSPIMode>

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
    1012:	e8 2f       	mov	r30, r24
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	e2 59       	subi	r30, 0x92	; 146
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	e4 91       	lpm	r30, Z
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
    101c:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
    101e:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
    1020:	84 b1       	in	r24, 0x04	; 4
    1022:	86 60       	ori	r24, 0x06	; 6
    1024:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
    1026:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
    1028:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
    102a:	8d b5       	in	r24, 0x2d	; 45

				DDRB  |=  ((1 << 1) | (1 << 2));
				DDRB  &= ~(1 << 3);
				PORTB |=  (1 << 3);

				if (SPIOptions & SPI_USE_DOUBLESPEED)
    102c:	e6 ff       	sbrs	r30, 6
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <ISPTarget_EnableTargetISP+0x30>
				  SPSR |= (1 << SPI2X);
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <ISPTarget_EnableTargetISP+0x32>
				else
				  SPSR &= ~(1 << SPI2X);
    1034:	8e 7f       	andi	r24, 0xFE	; 254
    1036:	8d bd       	out	0x2d, r24	; 45

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    1038:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
    103a:	e0 65       	ori	r30, 0x50	; 80
    103c:	ec bd       	out	0x2c, r30	; 44
    103e:	08 95       	ret
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    1040:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <HardwareSPIMode>

		DDRB  |= ((1 << 1) | (1 << 2));
    1044:	94 b1       	in	r25, 0x04	; 4
    1046:	96 60       	ori	r25, 0x06	; 6
    1048:	94 b9       	out	0x04, r25	; 4
		PORTB |= ((1 << 0) | (1 << 3));
    104a:	95 b1       	in	r25, 0x05	; 5
    104c:	99 60       	ori	r25, 0x09	; 9

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
    104e:	95 b9       	out	0x05, r25	; 5
    1050:	c1 cf       	rjmp	.-126    	; 0xfd4 <ISPTarget_ConfigureSoftwareSPI>

00001052 <ISPTarget_TransferSoftSPIByte>:
 *
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
    1052:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <SoftSPI_Data>
	SoftSPI_BitsRemaining = 8;
    1056:	88 e0       	ldi	r24, 0x08	; 8
    1058:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>

	if (SoftSPI_Data & 0x01)
    105c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <SoftSPI_Data>
    1060:	80 ff       	sbrs	r24, 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    1064:	2a 9a       	sbi	0x05, 2	; 5
    1066:	01 c0       	rjmp	.+2      	; 0x106a <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    1068:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    106a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    106e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    1072:	8a e0       	ldi	r24, 0x0A	; 10
    1074:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	while (SoftSPI_BitsRemaining && !(TimeoutExpired));
    1078:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    107c:	88 23       	and	r24, r24
    107e:	19 f0       	breq	.+6      	; 0x1086 <ISPTarget_TransferSoftSPIByte+0x34>
    1080:	8a b5       	in	r24, 0x2a	; 42
    1082:	88 23       	and	r24, r24
    1084:	c9 f3       	breq	.-14     	; 0x1078 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    1086:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

	return SoftSPI_Data;
    108a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <SoftSPI_Data>
}
    108e:	08 95       	ret

00001090 <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1090:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <HardwareSPIMode>
    1094:	99 23       	and	r25, r25
    1096:	29 f0       	breq	.+10     	; 0x10a2 <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1098:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    109a:	0d b4       	in	r0, 0x2d	; 45
    109c:	07 fe       	sbrs	r0, 7
    109e:	fd cf       	rjmp	.-6      	; 0x109a <ISPTarget_SendByte+0xa>
    10a0:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10a2:	d7 cf       	rjmp	.-82     	; 0x1052 <ISPTarget_TransferSoftSPIByte>

000010a4 <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    10a4:	88 23       	and	r24, r24
    10a6:	39 f0       	breq	.+14     	; 0x10b6 <ISPTarget_ChangeTargetResetLine+0x12>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    10a8:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    10aa:	8e e9       	ldi	r24, 0x9E	; 158
    10ac:	f2 da       	rcall	.-2588   	; 0x692 <V2Params_GetParameterValue>
    10ae:	81 11       	cpse	r24, r1
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <ISPTarget_ChangeTargetResetLine+0x14>
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    10b2:	2c 9a       	sbi	0x05, 4	; 5
    10b4:	08 95       	ret
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    10b6:	24 98       	cbi	0x04, 4	; 4
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10b8:	2c 98       	cbi	0x05, 4	; 5
    10ba:	08 95       	ret

000010bc <ISPTarget_WaitWhileTargetBusy>:
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
	do
	{
		ISPTarget_SendByte(0xF0);
    10bc:	80 ef       	ldi	r24, 0xF0	; 240
    10be:	e8 df       	rcall	.-48     	; 0x1090 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	e6 df       	rcall	.-52     	; 0x1090 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	e4 df       	rcall	.-56     	; 0x1090 <ISPTarget_SendByte>
    10c8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HardwareSPIMode>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
    10cc:	88 23       	and	r24, r24
    10ce:	31 f0       	breq	.+12     	; 0x10dc <ISPTarget_WaitWhileTargetBusy+0x20>
    10d0:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    10d2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
    10d4:	07 fe       	sbrs	r0, 7
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <ISPTarget_WaitWhileTargetBusy+0x16>
    10d8:	8e b5       	in	r24, 0x2e	; 46
				return SPDR;
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <ISPTarget_WaitWhileTargetBusy+0x24>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	b9 df       	rcall	.-142    	; 0x1052 <ISPTarget_TransferSoftSPIByte>
    10e0:	80 ff       	sbrs	r24, 0
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && !(TimeoutExpired));
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <ISPTarget_WaitWhileTargetBusy+0x2e>
    10e4:	8a b5       	in	r24, 0x2a	; 42
    10e6:	88 23       	and	r24, r24
    10e8:	49 f3       	breq	.-46     	; 0x10bc <ISPTarget_WaitWhileTargetBusy>
    10ea:	8a b5       	in	r24, 0x2a	; 42

	return (TimeoutExpired) ? STATUS_RDY_BSY_TOUT : STATUS_CMD_OK;
    10ec:	81 11       	cpse	r24, r1
    10ee:	81 e8       	ldi	r24, 0x81	; 129
    10f0:	08 95       	ret

000010f2 <ISPTarget_LoadExtendedAddress>:
}
    10f2:	8d e4       	ldi	r24, 0x4D	; 77
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
    10f4:	cd df       	rcall	.-102    	; 0x1090 <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	cb df       	rcall	.-106    	; 0x1090 <ISPTarget_SendByte>
	ISPTarget_SendByte((CurrentAddress & 0x00FF0000) >> 16);
    10fa:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <CurrentAddress+0x2>
	ISPTarget_SendByte(0x00);
    10fe:	c8 df       	rcall	.-112    	; 0x1090 <ISPTarget_SendByte>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	c6 cf       	rjmp	.-116    	; 0x1090 <ISPTarget_SendByte>

00001104 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    110e:	8e 77       	andi	r24, 0x7E	; 126
    1110:	e8 2f       	mov	r30, r24
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	e8 30       	cpi	r30, 0x08	; 8
    1116:	f1 05       	cpc	r31, r1
    1118:	99 f1       	breq	.+102    	; 0x1180 <ISPTarget_WaitForProgComplete+0x7c>
    111a:	82 2f       	mov	r24, r18
    111c:	14 2f       	mov	r17, r20
    111e:	eb 01       	movw	r28, r22
    1120:	e9 30       	cpi	r30, 0x09	; 9
    1122:	f1 05       	cpc	r31, r1
    1124:	34 f4       	brge	.+12     	; 0x1132 <ISPTarget_WaitForProgComplete+0x2e>
    1126:	e2 30       	cpi	r30, 0x02	; 2
    1128:	f1 05       	cpc	r31, r1
    112a:	59 f0       	breq	.+22     	; 0x1142 <ISPTarget_WaitForProgComplete+0x3e>
    112c:	34 97       	sbiw	r30, 0x04	; 4
    112e:	59 f0       	breq	.+22     	; 0x1146 <ISPTarget_WaitForProgComplete+0x42>
    1130:	2d c0       	rjmp	.+90     	; 0x118c <ISPTarget_WaitForProgComplete+0x88>
    1132:	e0 32       	cpi	r30, 0x20	; 32
    1134:	f1 05       	cpc	r31, r1
    1136:	39 f0       	breq	.+14     	; 0x1146 <ISPTarget_WaitForProgComplete+0x42>
    1138:	e0 34       	cpi	r30, 0x40	; 64
    113a:	f1 05       	cpc	r31, r1
    113c:	09 f1       	breq	.+66     	; 0x1180 <ISPTarget_WaitForProgComplete+0x7c>
    113e:	70 97       	sbiw	r30, 0x10	; 16
    1140:	29 f5       	brne	.+74     	; 0x118c <ISPTarget_WaitForProgComplete+0x88>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    1142:	e3 dd       	rcall	.-1082   	; 0xd0a <ISPProtocol_DelayMS>
    1144:	23 c0       	rjmp	.+70     	; 0x118c <ISPTarget_WaitForProgComplete+0x88>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
    1146:	fd 2e       	mov	r15, r29
			break;
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
    1148:	80 2f       	mov	r24, r16
    114a:	a2 df       	rcall	.-188    	; 0x1090 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress >> 8);
    114c:	8f 2d       	mov	r24, r15
    114e:	a0 df       	rcall	.-192    	; 0x1090 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress & 0xFF);
    1150:	8c 2f       	mov	r24, r28
    1152:	9e df       	rcall	.-196    	; 0x1090 <ISPTarget_SendByte>
    1154:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HardwareSPIMode>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1158:	88 23       	and	r24, r24
    115a:	31 f0       	breq	.+12     	; 0x1168 <ISPTarget_WaitForProgComplete+0x64>
    115c:	1e bc       	out	0x2e, r1	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    115e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
    1160:	07 fe       	sbrs	r0, 7
    1162:	fd cf       	rjmp	.-6      	; 0x115e <ISPTarget_WaitForProgComplete+0x5a>
				return SPDR;
    1164:	8e b5       	in	r24, 0x2e	; 46
    1166:	02 c0       	rjmp	.+4      	; 0x116c <ISPTarget_WaitForProgComplete+0x68>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	73 df       	rcall	.-282    	; 0x1052 <ISPTarget_TransferSoftSPIByte>
    116c:	18 13       	cpse	r17, r24
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && !(TimeoutExpired));
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <ISPTarget_WaitForProgComplete+0x72>
    1170:	8a b5       	in	r24, 0x2a	; 42
    1172:	88 23       	and	r24, r24
    1174:	49 f3       	breq	.-46     	; 0x1148 <ISPTarget_WaitForProgComplete+0x44>
    1176:	8a b5       	in	r24, 0x2a	; 42

			if (TimeoutExpired)
    1178:	88 23       	and	r24, r24
    117a:	41 f0       	breq	.+16     	; 0x118c <ISPTarget_WaitForProgComplete+0x88>
    117c:	80 e8       	ldi	r24, 0x80	; 128
			 ProgrammingStatus = STATUS_CMD_TOUT;
    117e:	07 c0       	rjmp	.+14     	; 0x118e <ISPTarget_WaitForProgComplete+0x8a>
    1180:	df 91       	pop	r29
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	return ProgrammingStatus;
}
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
			 ProgrammingStatus = STATUS_CMD_TOUT;

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    118a:	98 cf       	rjmp	.-208    	; 0x10bc <ISPTarget_WaitWhileTargetBusy>
    118c:	80 e0       	ldi	r24, 0x00	; 0
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    118e:	df 91       	pop	r29
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	return ProgrammingStatus;
}
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	08 95       	ret

0000119a <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	8b 01       	movw	r16, r22
    11a0:	9c 01       	movw	r18, r24
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    11a2:	c9 01       	movw	r24, r18
    11a4:	b8 01       	movw	r22, r16

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[3];
    11a6:	63 2f       	mov	r22, r19
				Data.Bytes[3] = Temp;
    11a8:	90 2f       	mov	r25, r16

				Temp = Data.Bytes[1];
    11aa:	27 2f       	mov	r18, r23
				Data.Bytes[1] = Data.Bytes[2];
    11ac:	78 2f       	mov	r23, r24
				Data.Bytes[2] = Temp;
    11ae:	82 2f       	mov	r24, r18

				return Data.DWord;
			}
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	c8 50       	subi	r28, 0x08	; 8
    11d0:	d1 40       	sbci	r29, 0x01	; 1
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	68 e0       	ldi	r22, 0x08	; 8
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	b8 d7       	rcall	.+3952   	; 0x215a <Endpoint_Read_Stream_LE>
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    11ea:	6b 81       	ldd	r22, Y+3	; 0x03
    11ec:	7c 81       	ldd	r23, Y+4	; 0x04
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	d3 df       	rcall	.-90     	; 0x119a <SwapEndian_32>
    11f4:	6b 83       	std	Y+3, r22	; 0x03
    11f6:	7c 83       	std	Y+4, r23	; 0x04
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	9e 83       	std	Y+6, r25	; 0x06
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08

				Temp = Data.Bytes[0];
    1200:	86 2f       	mov	r24, r22
				Data.Bytes[0] = Data.Bytes[1];
    1202:	67 2f       	mov	r22, r23
				Data.Bytes[1] = Temp;
    1204:	78 2f       	mov	r23, r24
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    1206:	78 87       	std	Y+8, r23	; 0x08
    1208:	6f 83       	std	Y+7, r22	; 0x07
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	ce 01       	movw	r24, r28
    1210:	09 96       	adiw	r24, 0x09	; 9
    1212:	a3 d7       	rcall	.+3910   	; 0x215a <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1214:	8f 81       	ldd	r24, Y+7	; 0x07
    1216:	98 85       	ldd	r25, Y+8	; 0x08
    1218:	09 96       	adiw	r24, 0x09	; 9
    121a:	8f 73       	andi	r24, 0x3F	; 63
    121c:	99 27       	eor	r25, r25
    121e:	89 2b       	or	r24, r25
    1220:	31 f4       	brne	.+12     	; 0x122e <XPROGProtocol_WriteMemory+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1222:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1226:	8b 77       	andi	r24, 0x7B	; 123
    1228:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    122c:	36 d6       	rcall	.+3180   	; 0x1e9a <Endpoint_WaitUntilReady>
    122e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1232:	8b 77       	andi	r24, 0x7B	; 123
    1234:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    123e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1248:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <XPROG_SelectedProtocol>
    124c:	81 11       	cpse	r24, r1
    124e:	31 c0       	rjmp	.+98     	; 0x12b2 <XPROGProtocol_WriteMemory+0xfc>
    1250:	29 81       	ldd	r18, Y+1	; 0x01
    1252:	21 50       	subi	r18, 0x01	; 1
    1254:	4b 81       	ldd	r20, Y+3	; 0x03
    1256:	5c 81       	ldd	r21, Y+4	; 0x04
    1258:	6d 81       	ldd	r22, Y+5	; 0x05
    125a:	7e 81       	ldd	r23, Y+6	; 0x06
    125c:	26 30       	cpi	r18, 0x06	; 6
    125e:	a8 f4       	brcc	.+42     	; 0x128a <XPROGProtocol_WriteMemory+0xd4>
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	e7 5c       	subi	r30, 0xC7	; 199
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	80 81       	ld	r24, Z
    126a:	f9 01       	movw	r30, r18
    126c:	ed 5c       	subi	r30, 0xCD	; 205
    126e:	fe 4f       	sbci	r31, 0xFE	; 254
    1270:	90 81       	ld	r25, Z
    1272:	f9 01       	movw	r30, r18
    1274:	e3 5d       	subi	r30, 0xD3	; 211
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	e0 81       	ld	r30, Z
    127a:	d9 01       	movw	r26, r18
    127c:	a9 5d       	subi	r26, 0xD9	; 217
    127e:	be 4f       	sbci	r27, 0xFE	; 254
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1280:	2c 91       	ld	r18, X
    1282:	22 23       	and	r18, r18
    1284:	09 f4       	brne	.+2      	; 0x1288 <XPROGProtocol_WriteMemory+0xd2>
    1286:	3e c0       	rjmp	.+124    	; 0x1304 <XPROGProtocol_WriteMemory+0x14e>
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <XPROGProtocol_WriteMemory+0xda>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    128a:	e6 e2       	ldi	r30, 0x26	; 38
    128c:	93 e2       	ldi	r25, 0x23	; 35
    128e:	8e e2       	ldi	r24, 0x2E	; 46
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1290:	af 80       	ldd	r10, Y+7	; 0x07
    1292:	b8 84       	ldd	r11, Y+8	; 0x08
    1294:	9e 01       	movw	r18, r28
    1296:	27 5f       	subi	r18, 0xF7	; 247
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	69 01       	movw	r12, r18
    129c:	7a 01       	movw	r14, r20
    129e:	8b 01       	movw	r16, r22
    12a0:	2a 81       	ldd	r18, Y+2	; 0x02
    12a2:	48 2f       	mov	r20, r24
    12a4:	6e 2f       	mov	r22, r30
    12a6:	89 2f       	mov	r24, r25
    12a8:	f7 d3       	rcall	.+2030   	; 0x1a98 <XMEGANVM_WritePageMemory>
    12aa:	81 11       	cpse	r24, r1
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <XPROGProtocol_WriteMemory+0x10e>
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData[0]))))
		{
			ReturnStatus = XPRG_ERR_TIMEOUT;
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	0a c0       	rjmp	.+20     	; 0x12c6 <XPROGProtocol_WriteMemory+0x110>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    12b2:	4f 81       	ldd	r20, Y+7	; 0x07
    12b4:	58 85       	ldd	r21, Y+8	; 0x08
    12b6:	be 01       	movw	r22, r28
    12b8:	67 5f       	subi	r22, 0xF7	; 247
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	64 d5       	rcall	.+2760   	; 0x1d8a <TINYNVM_WriteMemory>
    12c2:	f3 cf       	rjmp	.-26     	; 0x12aa <XPROGProtocol_WriteMemory+0xf4>
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    12c4:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12c6:	90 e5       	ldi	r25, 0x50	; 80
    12c8:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    12d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    12da:	8e 77       	andi	r24, 0x7E	; 126
    12dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
    12e0:	c8 5f       	subi	r28, 0xF8	; 248
    12e2:	de 4f       	sbci	r29, 0xFE	; 254
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
    1302:	08 95       	ret
    1304:	29 85       	ldd	r18, Y+9	; 0x09
    1306:	a3 d3       	rcall	.+1862   	; 0x1a4e <XMEGANVM_WriteByteMemory>
    1308:	d0 cf       	rjmp	.-96     	; 0x12aa <XPROGProtocol_WriteMemory+0xf4>

0000130a <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	c7 50       	subi	r28, 0x07	; 7
    1314:	d1 40       	sbci	r29, 0x01	; 1
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	67 e0       	ldi	r22, 0x07	; 7
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	ce 01       	movw	r24, r28
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	9e 4f       	sbci	r25, 0xFE	; 254
    132e:	15 d7       	rcall	.+3626   	; 0x215a <Endpoint_Read_Stream_LE>
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    1330:	ce 5f       	subi	r28, 0xFE	; 254
    1332:	de 4f       	sbci	r29, 0xFE	; 254
    1334:	68 81       	ld	r22, Y
    1336:	79 81       	ldd	r23, Y+1	; 0x01
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	c2 50       	subi	r28, 0x02	; 2
    133e:	d1 40       	sbci	r29, 0x01	; 1
    1340:	2c df       	rcall	.-424    	; 0x119a <SwapEndian_32>
    1342:	ce 5f       	subi	r28, 0xFE	; 254
    1344:	de 4f       	sbci	r29, 0xFE	; 254
    1346:	68 83       	st	Y, r22
    1348:	79 83       	std	Y+1, r23	; 0x01
    134a:	8a 83       	std	Y+2, r24	; 0x02
    134c:	9b 83       	std	Y+3, r25	; 0x03
    134e:	c2 50       	subi	r28, 0x02	; 2
    1350:	d1 40       	sbci	r29, 0x01	; 1
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    1352:	ca 5f       	subi	r28, 0xFA	; 250
    1354:	de 4f       	sbci	r29, 0xFE	; 254
    1356:	88 81       	ld	r24, Y
    1358:	99 81       	ldd	r25, Y+1	; 0x01
    135a:	c6 50       	subi	r28, 0x06	; 6
    135c:	d1 40       	sbci	r29, 0x01	; 1

				Temp = Data.Bytes[0];
    135e:	28 2f       	mov	r18, r24
				Data.Bytes[0] = Data.Bytes[1];
    1360:	89 2f       	mov	r24, r25
				Data.Bytes[1] = Temp;
    1362:	92 2f       	mov	r25, r18
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    1364:	ca 5f       	subi	r28, 0xFA	; 250
    1366:	de 4f       	sbci	r29, 0xFE	; 254
    1368:	99 83       	std	Y+1, r25	; 0x01
    136a:	88 83       	st	Y, r24
    136c:	c6 50       	subi	r28, 0x06	; 6
    136e:	d1 40       	sbci	r29, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1370:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1374:	8b 77       	andi	r24, 0x7B	; 123
    1376:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1380:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    138a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <XPROG_SelectedProtocol>
    138e:	ca 5f       	subi	r28, 0xFA	; 250
    1390:	de 4f       	sbci	r29, 0xFE	; 254
    1392:	28 81       	ld	r18, Y
    1394:	39 81       	ldd	r19, Y+1	; 0x01
    1396:	c6 50       	subi	r28, 0x06	; 6
    1398:	d1 40       	sbci	r29, 0x01	; 1
    139a:	81 11       	cpse	r24, r1
    139c:	12 c0       	rjmp	.+36     	; 0x13c2 <XPROGProtocol_ReadMemory+0xb8>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    139e:	ce 5f       	subi	r28, 0xFE	; 254
    13a0:	de 4f       	sbci	r29, 0xFE	; 254
    13a2:	68 81       	ld	r22, Y
    13a4:	79 81       	ldd	r23, Y+1	; 0x01
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	c2 50       	subi	r28, 0x02	; 2
    13ac:	d1 40       	sbci	r29, 0x01	; 1
    13ae:	ae 01       	movw	r20, r28
    13b0:	4f 5f       	subi	r20, 0xFF	; 255
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	13 d3       	rcall	.+1574   	; 0x19dc <XMEGANVM_ReadMemory>
    13b6:	88 23       	and	r24, r24
    13b8:	11 f0       	breq	.+4      	; 0x13be <XPROGProtocol_ReadMemory+0xb4>
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <XPROGProtocol_ReadMemory+0xd0>

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	0c c0       	rjmp	.+24     	; 0x13da <XPROGProtocol_ReadMemory+0xd0>
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    13c2:	a9 01       	movw	r20, r18
    13c4:	be 01       	movw	r22, r28
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	ce 5f       	subi	r28, 0xFE	; 254
    13cc:	de 4f       	sbci	r29, 0xFE	; 254
    13ce:	88 81       	ld	r24, Y
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	c2 50       	subi	r28, 0x02	; 2
    13d4:	d1 40       	sbci	r29, 0x01	; 1
    13d6:	ae d4       	rcall	.+2396   	; 0x1d34 <TINYNVM_ReadMemory>
    13d8:	ee cf       	rjmp	.-36     	; 0x13b6 <XPROGProtocol_ReadMemory+0xac>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13da:	90 e5       	ldi	r25, 0x50	; 80
    13dc:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    13e0:	95 e0       	ldi	r25, 0x05	; 5
    13e2:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    13e6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    13ea:	81 11       	cpse	r24, r1
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <XPROGProtocol_ReadMemory+0xfa>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
    13ee:	ca 5f       	subi	r28, 0xFA	; 250
    13f0:	de 4f       	sbci	r29, 0xFE	; 254
    13f2:	68 81       	ld	r22, Y
    13f4:	79 81       	ldd	r23, Y+1	; 0x01
    13f6:	c6 50       	subi	r28, 0x06	; 6
    13f8:	d1 40       	sbci	r29, 0x01	; 1
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	61 d6       	rcall	.+3266   	; 0x20c6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1404:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1408:	8e 77       	andi	r24, 0x7E	; 126
    140a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_ClearIN();
}
    140e:	c9 5f       	subi	r28, 0xF9	; 249
    1410:	de 4f       	sbci	r29, 0xFE	; 254
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	1f 92       	push	r1
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	ce 01       	movw	r24, r28
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	90 d6       	rcall	.+3360   	; 0x215a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    143a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    143e:	8b 77       	andi	r24, 0x7B	; 123
    1440:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    144a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <XPROG_SelectedProtocol>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    145a:	81 e5       	ldi	r24, 0x51	; 81
    145c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	11 f4       	brne	.+4      	; 0x146a <XPROGProtocol_SetMode+0x48>
    1466:	80 ec       	ldi	r24, 0xC0	; 192
    1468:	01 c0       	rjmp	.+2      	; 0x146c <XPROGProtocol_SetMode+0x4a>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1470:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1474:	8e 77       	andi	r24, 0x7E	; 126
    1476:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_ClearIN();
}
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	00 d0       	rcall	.+0      	; 0x1488 <XPROGProtocol_Command+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <XPROGProtocol_Command+0x8>
    148a:	00 d0       	rcall	.+0      	; 0x148c <XPROGProtocol_Command+0xa>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1490:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
    1494:	8e 2f       	mov	r24, r30
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	fc 01       	movw	r30, r24
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	e7 30       	cpi	r30, 0x07	; 7
    149e:	f1 05       	cpc	r31, r1
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <XPROGProtocol_Command+0x22>
    14a2:	25 c1       	rjmp	.+586    	; 0x16ee <XPROGProtocol_Command+0x26c>
    14a4:	e6 5c       	subi	r30, 0xC6	; 198
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__tablejump2__>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    14b0:	8b 77       	andi	r24, 0x7B	; 123
    14b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    14bc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    14c6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <XPROG_SelectedProtocol>
    14ca:	81 11       	cpse	r24, r1
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <XPROGProtocol_Command+0x50>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    14ce:	0b d2       	rcall	.+1046   	; 0x18e6 <XMEGANVM_EnablePDI>
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <XPROGProtocol_Command+0x5a>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
    14d2:	82 30       	cpi	r24, 0x02	; 2
	  NVMBusEnabled = TINYNVM_EnableTPI();
    14d4:	11 f4       	brne	.+4      	; 0x14da <XPROGProtocol_Command+0x58>
    14d6:	f1 d3       	rcall	.+2018   	; 0x1cba <TINYNVM_EnableTPI>
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <XPROGProtocol_Command+0x5a>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
    14da:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14dc:	90 e5       	ldi	r25, 0x50	; 80
    14de:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
	  NVMBusEnabled = TINYNVM_EnableTPI();

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_ENTER_PROGMODE);
	Endpoint_Write_8(NVMBusEnabled ? XPRG_ERR_OK : XPRG_ERR_FAILED);
    14e8:	98 27       	eor	r25, r24
    14ea:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    14ee:	fa c0       	rjmp	.+500    	; 0x16e4 <XPROGProtocol_Command+0x262>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    14f4:	8b 77       	andi	r24, 0x7B	; 123
    14f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1500:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1504:	81 60       	ori	r24, 0x01	; 1
    1506:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    150a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <XPROG_SelectedProtocol>
    150e:	81 11       	cpse	r24, r1
	  XMEGANVM_DisablePDI();
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <XPROGProtocol_Command+0x94>
    1512:	24 d2       	rcall	.+1096   	; 0x195c <XMEGANVM_DisablePDI>
	else
	  TINYNVM_DisableTPI();
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <XPROGProtocol_Command+0x96>
    1516:	08 d4       	rcall	.+2064   	; 0x1d28 <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1518:	80 e5       	ldi	r24, 0x50	; 80
    151a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1524:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1528:	dd c0       	rjmp	.+442    	; 0x16e4 <XPROGProtocol_Command+0x262>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	65 e0       	ldi	r22, 0x05	; 5
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	11 d6       	rcall	.+3106   	; 0x215a <Endpoint_Read_Stream_LE>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    1538:	6a 81       	ldd	r22, Y+2	; 0x02
    153a:	7b 81       	ldd	r23, Y+3	; 0x03
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	2c de       	rcall	.-936    	; 0x119a <SwapEndian_32>
    1542:	6a 83       	std	Y+2, r22	; 0x02
    1544:	7b 83       	std	Y+3, r23	; 0x03
    1546:	8c 83       	std	Y+4, r24	; 0x04
    1548:	9d 83       	std	Y+5, r25	; 0x05
    154a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    154e:	8b 77       	andi	r24, 0x7B	; 123
    1550:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1554:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1556:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    155a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1564:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <XPROG_SelectedProtocol>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1568:	e9 81       	ldd	r30, Y+1	; 0x01
    156a:	81 11       	cpse	r24, r1
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <XPROGProtocol_Command+0x114>
    156e:	e1 50       	subi	r30, 0x01	; 1
    1570:	e8 30       	cpi	r30, 0x08	; 8
    1572:	28 f4       	brcc	.+10     	; 0x157e <XPROGProtocol_Command+0xfc>
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	e1 5c       	subi	r30, 0xC1	; 193
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	80 81       	ld	r24, Z
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <XPROGProtocol_Command+0xfe>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
    157e:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    1580:	4a 81       	ldd	r20, Y+2	; 0x02
    1582:	5b 81       	ldd	r21, Y+3	; 0x03
    1584:	6c 81       	ldd	r22, Y+4	; 0x04
    1586:	7d 81       	ldd	r23, Y+5	; 0x05
    1588:	f9 d2       	rcall	.+1522   	; 0x1b7c <XMEGANVM_EraseMemory>
    158a:	88 23       	and	r24, r24
    158c:	11 f0       	breq	.+4      	; 0x1592 <XPROGProtocol_Command+0x110>
    158e:	80 e0       	ldi	r24, 0x00	; 0
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <XPROGProtocol_Command+0x126>
    1592:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    1594:	09 c0       	rjmp	.+18     	; 0x15a8 <XPROGProtocol_Command+0x126>
    1596:	e1 30       	cpi	r30, 0x01	; 1
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
    1598:	11 f0       	breq	.+4      	; 0x159e <XPROGProtocol_Command+0x11c>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
    159a:	84 e1       	ldi	r24, 0x14	; 20
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <XPROGProtocol_Command+0x11e>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
    159e:	80 e1       	ldi	r24, 0x10	; 16
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    15a0:	6a 81       	ldd	r22, Y+2	; 0x02
    15a2:	7b 81       	ldd	r23, Y+3	; 0x03
    15a4:	2d d4       	rcall	.+2138   	; 0x1e00 <TINYNVM_EraseMemory>
    15a6:	f1 cf       	rjmp	.-30     	; 0x158a <XPROGProtocol_Command+0x108>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15a8:	90 e5       	ldi	r25, 0x50	; 80
    15aa:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    15ae:	93 e0       	ldi	r25, 0x03	; 3
    15b0:	95 c0       	rjmp	.+298    	; 0x16dc <XPROGProtocol_Command+0x25a>
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    15b2:	01 de       	rcall	.-1022   	; 0x11b6 <XPROGProtocol_WriteMemory>
    15b4:	9c c0       	rjmp	.+312    	; 0x16ee <XPROGProtocol_Command+0x26c>
			break;
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    15b6:	a9 de       	rcall	.-686    	; 0x130a <XPROGProtocol_ReadMemory>
    15b8:	9a c0       	rjmp	.+308    	; 0x16ee <XPROGProtocol_Command+0x26c>
			break;
    15ba:	40 e0       	ldi	r20, 0x00	; 0
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	ce 01       	movw	r24, r28
    15c4:	06 96       	adiw	r24, 0x06	; 6
    15c6:	c9 d5       	rcall	.+2962   	; 0x215a <Endpoint_Read_Stream_LE>
    15c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15cc:	8b 77       	andi	r24, 0x7B	; 123
    15ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15d8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    15dc:	81 60       	ori	r24, 0x01	; 1
    15de:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    15e2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <XPROG_SelectedProtocol>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    15e6:	81 11       	cpse	r24, r1
    15e8:	12 c0       	rjmp	.+36     	; 0x160e <XPROGProtocol_Command+0x18c>
    15ea:	8e 81       	ldd	r24, Y+6	; 0x06
    15ec:	81 30       	cpi	r24, 0x01	; 1
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
    15ee:	31 f0       	breq	.+12     	; 0x15fc <XPROGProtocol_Command+0x17a>
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <XPROGProtocol_Command+0x176>
    15f4:	89 e3       	ldi	r24, 0x39	; 57
		{
			case XPRG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
				break;
			case XPRG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <XPROGProtocol_Command+0x17c>
    15f8:	88 e7       	ldi	r24, 0x78	; 120
				break;
			default:
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <XPROGProtocol_Command+0x17c>
    15fc:	88 e3       	ldi	r24, 0x38	; 56

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
		{
			case XPRG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
    15fe:	be 01       	movw	r22, r28
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    1600:	6f 5f       	subi	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	b5 d1       	rcall	.+874    	; 0x1970 <XMEGANVM_GetMemoryCRC>
    1606:	81 11       	cpse	r24, r1
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <XPROGProtocol_Command+0x190>
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <XPROGProtocol_Command+0x192>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <XPROGProtocol_Command+0x192>
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPRG_ERR_FAILED;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e5       	ldi	r25, 0x50	; 80
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    1616:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    161a:	96 e0       	ldi	r25, 0x06	; 6
    161c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1620:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1624:	81 11       	cpse	r24, r1
    1626:	5e c0       	rjmp	.+188    	; 0x16e4 <XPROGProtocol_Command+0x262>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
	{
		Endpoint_Write_8(MemoryCRC >> 16);
    162c:	ab 81       	ldd	r26, Y+3	; 0x03
    162e:	bc 81       	ldd	r27, Y+4	; 0x04
    1630:	cd 01       	movw	r24, r26
    1632:	aa 27       	eor	r26, r26
    1634:	bb 27       	eor	r27, r27
    1636:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
    163e:	ab 81       	ldd	r26, Y+3	; 0x03
    1640:	bc 81       	ldd	r27, Y+4	; 0x04
    1642:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1646:	89 2f       	mov	r24, r25
    1648:	99 27       	eor	r25, r25
				UEDATX = (Data >> 8);
    164a:	4a c0       	rjmp	.+148    	; 0x16e0 <XPROGProtocol_Command+0x25e>
    164c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	09 f1       	breq	.+66     	; 0x1696 <XPROGProtocol_Command+0x214>
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    1654:	b8 f4       	brcc	.+46     	; 0x1684 <XPROGProtocol_Command+0x202>
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	79 f5       	brne	.+94     	; 0x16b8 <XPROGProtocol_Command+0x236>
    165a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    165e:	b2 2f       	mov	r27, r18
    1660:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				Data.Bytes[2] = UEDATX;
    1664:	a2 2f       	mov	r26, r18
    1666:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				Data.Bytes[1] = UEDATX;
    166a:	92 2f       	mov	r25, r18
    166c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				Data.Bytes[0] = UEDATX;
    1670:	82 2f       	mov	r24, r18
    1672:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <XPROG_Param_NVMBase>
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
    1676:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <XPROG_Param_NVMBase+0x1>
    167a:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <XPROG_Param_NVMBase+0x2>
    167e:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <XPROG_Param_NVMBase+0x3>
    1682:	18 c0       	rjmp	.+48     	; 0x16b4 <XPROGProtocol_Command+0x232>
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 f0       	breq	.+36     	; 0x16ac <XPROGProtocol_Command+0x22a>
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	b1 f4       	brne	.+44     	; 0x16b8 <XPROGProtocol_Command+0x236>
    168c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1690:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <XPROG_Param_NVMCSRRegAddr>
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <XPROGProtocol_Command+0x232>
    1696:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    169a:	92 2f       	mov	r25, r18
    169c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				Data.Bytes[0] = UEDATX;
    16a0:	82 2f       	mov	r24, r18
    16a2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <XPROG_Param_EEPageSize+0x1>
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize = Endpoint_Read_16_BE();
    16a6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <XPROG_Param_EEPageSize>
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <XPROGProtocol_Command+0x232>
    16ac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16b0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <XPROG_Param_NVMCMDRegAddr>
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <XPROGProtocol_Command+0x238>
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16be:	9b 77       	andi	r25, 0x7B	; 123
    16c0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16ca:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    16ce:	91 60       	ori	r25, 0x01	; 1
    16d0:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    16d4:	90 e5       	ldi	r25, 0x50	; 80
    16d6:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16da:	97 e0       	ldi	r25, 0x07	; 7
    16dc:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    16e0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    16e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16e8:	8e 77       	andi	r24, 0x7E	; 126
    16ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    16ee:	26 96       	adiw	r28, 0x06	; 6
    16f0:	0f b6       	in	r0, 0x3f	; 63
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <XPROGTarget_SetTxMode>:
		while (!(PIND & (1 << 5)));
	}
}

static void XPROGTarget_SetTxMode(void)
{
    1700:	8c e0       	ldi	r24, 0x0C	; 12
    /* Need to do nothing for a full frame to send a BREAK - only one cycle should be needed, however
	 * there are reports that sometimes the interface will get stuck in some environments. */
    for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    {
        /* Wait for a full cycle of the clock */
        while (PIND & (1 << 5));
    1702:	4d 99       	sbic	0x09, 5	; 9
    1704:	fe cf       	rjmp	.-4      	; 0x1702 <XPROGTarget_SetTxMode+0x2>
        while (!(PIND & (1 << 5)));
    1706:	4d 9b       	sbis	0x09, 5	; 9
    1708:	fe cf       	rjmp	.-4      	; 0x1706 <XPROGTarget_SetTxMode+0x6>
    170a:	81 50       	subi	r24, 0x01	; 1

static void XPROGTarget_SetTxMode(void)
{
    /* Need to do nothing for a full frame to send a BREAK - only one cycle should be needed, however
	 * there are reports that sometimes the interface will get stuck in some environments. */
    for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    170c:	d1 f7       	brne	.-12     	; 0x1702 <XPROGTarget_SetTxMode+0x2>
        /* Wait for a full cycle of the clock */
        while (PIND & (1 << 5));
        while (!(PIND & (1 << 5)));
    }

	PORTD  |=  (1 << 3);
    170e:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    1710:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    1712:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
    1716:	8f 7e       	andi	r24, 0xEF	; 239
    1718:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
	UCSR1B |=  (1 << TXEN1);
    171c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
    1720:	88 60       	ori	r24, 0x08	; 8
    1722:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>

	IsSending = true;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <IsSending>
    172c:	08 95       	ret

0000172e <XPROGTarget_SetRxMode>:
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    172e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
    1732:	86 ff       	sbrs	r24, 6
    1734:	fc cf       	rjmp	.-8      	; 0x172e <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    1736:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
    173a:	80 64       	ori	r24, 0x40	; 64
    173c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>

	UCSR1B &= ~(1 << TXEN1);
    1740:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
    1744:	87 7f       	andi	r24, 0xF7	; 247
    1746:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
	UCSR1B |=  (1 << RXEN1);
    174a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
    174e:	80 61       	ori	r24, 0x10	; 16
    1750:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>

	DDRD   &= ~(1 << 3);
    1754:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    1756:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    1758:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IsSending>
    175c:	08 95       	ret

0000175e <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    175e:	e7 df       	rcall	.-50     	; 0x172e <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    1760:	80 ec       	ldi	r24, 0xC0	; 192
    1762:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
	UCSR1B  = 0;
    1766:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
	UCSR1C  = 0;
    176a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7fc0ca>

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    176e:	8a b1       	in	r24, 0x0a	; 10
    1770:	87 7d       	andi	r24, 0xD7	; 215
    1772:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1774:	8b b1       	in	r24, 0x0b	; 11
    1776:	83 7d       	andi	r24, 0xD3	; 211
    1778:	8b b9       	out	0x0b, r24	; 11
    177a:	08 95       	ret

0000177c <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    177c:	d8 df       	rcall	.-80     	; 0x172e <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    177e:	e8 ec       	ldi	r30, 0xC8	; 200
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 6c       	ori	r24, 0xC0	; 192
    1786:	80 83       	st	Z, r24
	UCSR1B  = 0;
    1788:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
	UCSR1C  = 0;
    178c:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7fc0ca>

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    1790:	8a b1       	in	r24, 0x0a	; 10
    1792:	87 7d       	andi	r24, 0xD7	; 215
    1794:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1796:	8b b1       	in	r24, 0x0b	; 11
    1798:	83 7d       	andi	r24, 0xD3	; 211
    179a:	8b b9       	out	0x0b, r24	; 11
	
	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    179c:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    179e:	2c 98       	cbi	0x05, 4	; 5
    17a0:	08 95       	ret

000017a2 <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    17a2:	cf 93       	push	r28
    17a4:	c8 2f       	mov	r28, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    17a6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsSending>
    17aa:	81 11       	cpse	r24, r1
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
    17ae:	a8 df       	rcall	.-176    	; 0x1700 <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    17b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
    17b4:	85 ff       	sbrs	r24, 5
    17b6:	fc cf       	rjmp	.-8      	; 0x17b0 <XPROGTarget_SendByte+0xe>
	UCSR1A |= (1 << TXC1);
    17b8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
    17bc:	80 64       	ori	r24, 0x40	; 64
    17be:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
	UDR1    = Byte;
    17c2:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7fc0ce>
}
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    17ca:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsSending>
    17ce:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    17d0:	ae df       	rcall	.-164    	; 0x172e <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && !(TimeoutExpired));
    17d2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7fc0c8>
    17d6:	87 fd       	sbrc	r24, 7
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <XPROGTarget_ReceiveByte+0x16>
    17da:	8a b5       	in	r24, 0x2a	; 42
    17dc:	88 23       	and	r24, r24
    17de:	c9 f3       	breq	.-14     	; 0x17d2 <XPROGTarget_ReceiveByte+0x8>

	return UDR1;
    17e0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7fc0ce>
}
    17e4:	08 95       	ret

000017e6 <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    17e6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsSending>
    17ea:	81 11       	cpse	r24, r1
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    17ee:	88 df       	rcall	.-240    	; 0x1700 <XPROGTarget_SetTxMode>
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    17f0:	8c e0       	ldi	r24, 0x0C	; 12
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    17f2:	4d 99       	sbic	0x09, 5	; 9
    17f4:	fe cf       	rjmp	.-4      	; 0x17f2 <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    17f6:	4d 9b       	sbis	0x09, 5	; 9
    17f8:	fe cf       	rjmp	.-4      	; 0x17f6 <XPROGTarget_SendIdle+0x10>
    17fa:	81 50       	subi	r24, 0x01	; 1
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    17fc:	d1 f7       	brne	.-12     	; 0x17f2 <XPROGTarget_SendIdle+0xc>
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
	}
}
    17fe:	08 95       	ret

00001800 <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    1800:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IsSending>

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1804:	8a b1       	in	r24, 0x0a	; 10
    1806:	88 62       	ori	r24, 0x28	; 40
    1808:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    180a:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    180c:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    180e:	85 e0       	ldi	r24, 0x05	; 5
    1810:	8a 95       	dec	r24
    1812:	f1 f7       	brne	.-4      	; 0x1810 <XPROGTarget_EnableTargetPDI+0x10>
    1814:	00 00       	nop
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1816:	8f e1       	ldi	r24, 0x1F	; 31
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7fc0cd>
    181e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7fc0cc>
	UCSR1B = (1 << TXEN1);
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1828:	8f e6       	ldi	r24, 0x6F	; 111
    182a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7fc0ca>

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    182e:	db df       	rcall	.-74     	; 0x17e6 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
    1830:	da cf       	rjmp	.-76     	; 0x17e6 <XPROGTarget_SendIdle>

00001832 <XPROGTarget_EnableTargetTPI>:
    1832:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IsSending>
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    1836:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1838:	2c 98       	cbi	0x05, 4	; 5
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	8a 95       	dec	r24
    183e:	f1 f7       	brne	.-4      	; 0x183c <XPROGTarget_EnableTargetTPI+0xa>
    1840:	00 00       	nop
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1842:	8a b1       	in	r24, 0x0a	; 10
    1844:	88 62       	ori	r24, 0x28	; 40
    1846:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1848:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    184a:	8f e1       	ldi	r24, 0x1F	; 31
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7fc0cd>
    1852:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7fc0cc>
	UCSR1B = (1 << TXEN1);
    1856:	88 e0       	ldi	r24, 0x08	; 8
    1858:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7fc0c9>
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    185c:	8f e6       	ldi	r24, 0x6F	; 111
    185e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7fc0ca>

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1862:	c1 df       	rcall	.-126    	; 0x17e6 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
    1864:	c0 cf       	rjmp	.-128    	; 0x17e6 <XPROGTarget_SendIdle>

00001866 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	6b 01       	movw	r12, r22
    1870:	7c 01       	movw	r14, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    1872:	86 2f       	mov	r24, r22
    1874:	96 df       	rcall	.-212    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1876:	8d 2d       	mov	r24, r13
    1878:	94 df       	rcall	.-216    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    187a:	8e 2d       	mov	r24, r14
    187c:	92 df       	rcall	.-220    	; 0x17a2 <XPROGTarget_SendByte>
    187e:	8f 2d       	mov	r24, r15
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1880:	ff 90       	pop	r15
}
    1882:	ef 90       	pop	r14
    1884:	df 90       	pop	r13
    1886:	cf 90       	pop	r12
{
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1888:	8c cf       	rjmp	.-232    	; 0x17a2 <XPROGTarget_SendByte>

0000188a <XMEGANVM_SendNVMRegAddress>:
    188a:	0f 93       	push	r16
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
    188c:	1f 93       	push	r17
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    188e:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <XPROG_Param_NVMBase>
    1892:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <XPROG_Param_NVMBase+0x1>
    1896:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <XPROG_Param_NVMBase+0x2>
    189a:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <XPROG_Param_NVMBase+0x3>
    189e:	8a 01       	movw	r16, r20
    18a0:	9b 01       	movw	r18, r22
    18a2:	08 2b       	or	r16, r24
    18a4:	c9 01       	movw	r24, r18
    18a6:	b8 01       	movw	r22, r16
}
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    18ac:	dc cf       	rjmp	.-72     	; 0x1866 <XMEGANVM_SendAddress>

000018ae <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    18ae:	80 e8       	ldi	r24, 0x80	; 128
    18b0:	78 df       	rcall	.-272    	; 0x17a2 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    18b2:	8b df       	rcall	.-234    	; 0x17ca <XPROGTarget_ReceiveByte>
    18b4:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    18b6:	91 11       	cpse	r25, r1
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <XMEGANVM_WaitWhileNVMBusBusy+0x14>
    18ba:	81 ff       	sbrs	r24, 1
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    18bc:	f8 cf       	rjmp	.-16     	; 0x18ae <XMEGANVM_WaitWhileNVMBusBusy>
    18be:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    18c0:	08 95       	ret
    18c2:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    18c4:	08 95       	ret

000018c6 <XMEGANVM_WaitWhileNVMControllerBusy>:

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    18c6:	8b e6       	ldi	r24, 0x6B	; 107
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    18c8:	6c df       	rcall	.-296    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    18ca:	8f e0       	ldi	r24, 0x0F	; 15
    18cc:	de df       	rcall	.-68     	; 0x188a <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    18ce:	80 e2       	ldi	r24, 0x20	; 32
    18d0:	68 df       	rcall	.-304    	; 0x17a2 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    18d2:	7b df       	rcall	.-266    	; 0x17ca <XPROGTarget_ReceiveByte>
    18d4:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    18d6:	91 11       	cpse	r25, r1
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
    18da:	87 fd       	sbrc	r24, 7
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    18dc:	f8 cf       	rjmp	.-16     	; 0x18ce <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    18de:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    18e0:	08 95       	ret
    18e2:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    18e4:	08 95       	ret

000018e6 <XMEGANVM_EnablePDI>:

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    18e6:	ef 92       	push	r14
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	28 97       	sbiw	r28, 0x08	; 8
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1902:	7e df       	rcall	.-260    	; 0x1800 <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1904:	81 ec       	ldi	r24, 0xC1	; 193
    1906:	4d df       	rcall	.-358    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    1908:	89 e5       	ldi	r24, 0x59	; 89
    190a:	4b df       	rcall	.-362    	; 0x17a2 <XPROGTarget_SendByte>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    190c:	82 ec       	ldi	r24, 0xC2	; 194
    190e:	49 df       	rcall	.-366    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    1910:	87 e0       	ldi	r24, 0x07	; 7
    1912:	47 df       	rcall	.-370    	; 0x17a2 <XPROGTarget_SendByte>
    1914:	80 ee       	ldi	r24, 0xE0	; 224

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    1916:	45 df       	rcall	.-374    	; 0x17a2 <XPROGTarget_SendByte>
    1918:	8e 01       	movw	r16, r28
    191a:	07 5f       	subi	r16, 0xF7	; 247
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	ce 01       	movw	r24, r28
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	7c 01       	movw	r14, r24
    1924:	88 e0       	ldi	r24, 0x08	; 8
    1926:	e7 e4       	ldi	r30, 0x47	; 71
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    1928:	f1 e0       	ldi	r31, 0x01	; 1
    192a:	d7 01       	movw	r26, r14
    192c:	01 90       	ld	r0, Z+
    192e:	0d 92       	st	X+, r0
    1930:	8a 95       	dec	r24
    1932:	e1 f7       	brne	.-8      	; 0x192c <XMEGANVM_EnablePDI+0x46>
    1934:	f8 01       	movw	r30, r16
    1936:	82 91       	ld	r24, -Z
    1938:	8f 01       	movw	r16, r30
    193a:	33 df       	rcall	.-410    	; 0x17a2 <XPROGTarget_SendByte>
    193c:	0e 15       	cp	r16, r14
    193e:	1f 05       	cpc	r17, r15
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    1940:	89 f7       	brne	.-30     	; 0x1924 <XMEGANVM_EnablePDI+0x3e>
    1942:	28 96       	adiw	r28, 0x08	; 8
    1944:	0f b6       	in	r0, 0x3f	; 63
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
}
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	a9 cf       	rjmp	.-174    	; 0x18ae <XMEGANVM_WaitWhileNVMBusBusy>

0000195c <XMEGANVM_DisablePDI>:
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    195c:	a8 df       	rcall	.-176    	; 0x18ae <XMEGANVM_WaitWhileNVMBusBusy>
    195e:	81 ec       	ldi	r24, 0xC1	; 193
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();

	/* Clear the RESET key in the RESET PDI register to allow the XMEGA to run */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1960:	20 df       	rcall	.-448    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	1e df       	rcall	.-452    	; 0x17a2 <XPROGTarget_SendByte>

	/* Do it twice to make sure it takes effect (silicon bug?) */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1966:	81 ec       	ldi	r24, 0xC1	; 193
	XPROGTarget_SendByte(0x00);
    1968:	1c df       	rcall	.-456    	; 0x17a2 <XPROGTarget_SendByte>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	1a df       	rcall	.-460    	; 0x17a2 <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetPDI();
    196e:	f7 ce       	rjmp	.-530    	; 0x175e <XPROGTarget_DisableTargetPDI>

00001970 <XMEGANVM_GetMemoryCRC>:
    1970:	0f 93       	push	r16
 *  \param[out] CRCDest     CRC Destination when read from the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand, uint32_t* const CRCDest)
{
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	18 2f       	mov	r17, r24
    197a:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    197c:	a4 df       	rcall	.-184    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    197e:	88 23       	and	r24, r24
    1980:	39 f1       	breq	.+78     	; 0x19d0 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1982:	8c e4       	ldi	r24, 0x4C	; 76
    1984:	0e df       	rcall	.-484    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1986:	8a e0       	ldi	r24, 0x0A	; 10
    1988:	80 df       	rcall	.-256    	; 0x188a <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    198a:	81 2f       	mov	r24, r17
    198c:	0a df       	rcall	.-492    	; 0x17a2 <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    198e:	8c e4       	ldi	r24, 0x4C	; 76
    1990:	08 df       	rcall	.-496    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1992:	8b e0       	ldi	r24, 0x0B	; 11
    1994:	7a df       	rcall	.-268    	; 0x188a <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(1 << 0);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	04 df       	rcall	.-504    	; 0x17a2 <XPROGTarget_SendByte>
    199a:	89 df       	rcall	.-238    	; 0x18ae <XMEGANVM_WaitWhileNVMBusBusy>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    199c:	88 23       	and	r24, r24
    199e:	c1 f0       	breq	.+48     	; 0x19d0 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19a0:	92 df       	rcall	.-220    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    19a2:	88 23       	and	r24, r24
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    19a4:	a9 f0       	breq	.+42     	; 0x19d0 <XMEGANVM_GetMemoryCRC+0x60>
    19a6:	8b e6       	ldi	r24, 0x6B	; 107
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    19a8:	fc de       	rcall	.-520    	; 0x17a2 <XPROGTarget_SendByte>
    19aa:	84 e0       	ldi	r24, 0x04	; 4

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    19ac:	6e df       	rcall	.-292    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    19ae:	80 ea       	ldi	r24, 0xA0	; 160
    19b0:	f8 de       	rcall	.-528    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	f6 de       	rcall	.-532    	; 0x17a2 <XPROGTarget_SendByte>
    19b6:	84 e2       	ldi	r24, 0x24	; 36

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    19b8:	f4 de       	rcall	.-536    	; 0x17a2 <XPROGTarget_SendByte>
    19ba:	8e 01       	movw	r16, r28
    19bc:	0d 5f       	subi	r16, 0xFD	; 253
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	04 df       	rcall	.-504    	; 0x17ca <XPROGTarget_ReceiveByte>
    19c2:	89 93       	st	Y+, r24
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    19c4:	c0 17       	cp	r28, r16
    19c6:	d1 07       	cpc	r29, r17
    19c8:	d9 f7       	brne	.-10     	; 0x19c0 <XMEGANVM_GetMemoryCRC+0x50>
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
    19ca:	9a b5       	in	r25, 0x2a	; 42
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	91 11       	cpse	r25, r1
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutExpired == false);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
}
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <XMEGANVM_ReadMemory>:
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
 *  \param[in]  ReadSize     Number of bytes to read
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress, uint8_t* ReadBuffer, uint16_t ReadSize)
{
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	6b 01       	movw	r12, r22
    19ee:	7c 01       	movw	r14, r24
    19f0:	ea 01       	movw	r28, r20
    19f2:	89 01       	movw	r16, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19f4:	68 df       	rcall	.-304    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    19f6:	88 23       	and	r24, r24
    19f8:	09 f1       	breq	.+66     	; 0x1a3c <XMEGANVM_ReadMemory+0x60>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19fa:	8c e4       	ldi	r24, 0x4C	; 76
    19fc:	d2 de       	rcall	.-604    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19fe:	8a e0       	ldi	r24, 0x0A	; 10
    1a00:	44 df       	rcall	.-376    	; 0x188a <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1a02:	83 e4       	ldi	r24, 0x43	; 67
    1a04:	ce de       	rcall	.-612    	; 0x17a2 <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1a06:	8b e6       	ldi	r24, 0x6B	; 107
    1a08:	cc de       	rcall	.-616    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    1a0a:	c7 01       	movw	r24, r14
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	2b df       	rcall	.-426    	; 0x1866 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1a10:	80 ea       	ldi	r24, 0xA0	; 160
    1a12:	c7 de       	rcall	.-626    	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	80 0f       	add	r24, r16
    1a18:	c4 de       	rcall	.-632    	; 0x17a2 <XPROGTarget_SendByte>
    1a1a:	84 e2       	ldi	r24, 0x24	; 36

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1a1c:	c2 de       	rcall	.-636    	; 0x17a2 <XPROGTarget_SendByte>
    1a1e:	0c 0f       	add	r16, r28
    1a20:	1d 1f       	adc	r17, r29
    1a22:	c0 17       	cp	r28, r16
	while (ReadSize-- && !(TimeoutExpired))
    1a24:	d1 07       	cpc	r29, r17
    1a26:	31 f0       	breq	.+12     	; 0x1a34 <XMEGANVM_ReadMemory+0x58>
    1a28:	8a b5       	in	r24, 0x2a	; 42
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <XMEGANVM_ReadMemory+0x58>
    1a2e:	cd de       	rcall	.-614    	; 0x17ca <XPROGTarget_ReceiveByte>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1a30:	89 93       	st	Y+, r24
    1a32:	f7 cf       	rjmp	.-18     	; 0x1a22 <XMEGANVM_ReadMemory+0x46>
    1a34:	9a b5       	in	r25, 0x2a	; 42
    1a36:	81 e0       	ldi	r24, 0x01	; 1

	return (TimeoutExpired == false);
    1a38:	91 11       	cpse	r25, r1
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
}
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	08 95       	ret

00001a4e <XMEGANVM_WriteByteMemory>:
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
 *  \param[in]  Byte          Byte to write to the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand, const uint32_t WriteAddress, const uint8_t Byte)
{
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	18 2f       	mov	r17, r24
    1a5e:	6a 01       	movw	r12, r20
    1a60:	7b 01       	movw	r14, r22
    1a62:	d2 2f       	mov	r29, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a64:	30 df       	rcall	.-416    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a66:	c8 2f       	mov	r28, r24
    1a68:	88 23       	and	r24, r24
    1a6a:	69 f0       	breq	.+26     	; 0x1a86 <XMEGANVM_WriteByteMemory+0x38>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a6c:	8c e4       	ldi	r24, 0x4C	; 76
    1a6e:	99 de       	rcall	.-718    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a70:	8a e0       	ldi	r24, 0x0A	; 10
    1a72:	0b df       	rcall	.-490    	; 0x188a <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1a74:	81 2f       	mov	r24, r17
    1a76:	95 de       	rcall	.-726    	; 0x17a2 <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a78:	8c e4       	ldi	r24, 0x4C	; 76
    1a7a:	93 de       	rcall	.-730    	; 0x17a2 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	b6 01       	movw	r22, r12
    1a80:	f2 de       	rcall	.-540    	; 0x1866 <XMEGANVM_SendAddress>
    1a82:	8d 2f       	mov	r24, r29
	XPROGTarget_SendByte(Byte);
    1a84:	8e de       	rcall	.-740    	; 0x17a2 <XPROGTarget_SendByte>
    1a86:	8c 2f       	mov	r24, r28
    1a88:	df 91       	pop	r29

	return true;
}
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	df 90       	pop	r13
    1a94:	cf 90       	pop	r12
    1a96:	08 95       	ret

00001a98 <XMEGANVM_WritePageMemory>:
    1a98:	4f 92       	push	r4
    1a9a:	5f 92       	push	r5
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WritePageMemory(const uint8_t WriteBuffCommand, const uint8_t EraseBuffCommand,
                              const uint8_t WritePageCommand, const uint8_t PageMode, const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer, uint16_t WriteSize)
{
    1a9c:	6f 92       	push	r6
    1a9e:	7f 92       	push	r7
    1aa0:	8f 92       	push	r8
    1aa2:	9f 92       	push	r9
    1aa4:	af 92       	push	r10
    1aa6:	bf 92       	push	r11
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ef 92       	push	r14
    1aae:	ff 92       	push	r15
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	c8 2f       	mov	r28, r24
    1aba:	d6 2f       	mov	r29, r22
    1abc:	94 2e       	mov	r9, r20
    1abe:	82 2e       	mov	r8, r18
    1ac0:	27 01       	movw	r4, r14
    1ac2:	38 01       	movw	r6, r16
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1ac4:	20 ff       	sbrs	r18, 0
    1ac6:	11 c0       	rjmp	.+34     	; 0x1aea <XMEGANVM_WritePageMemory+0x52>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ac8:	fe de       	rcall	.-516    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    1aca:	81 11       	cpse	r24, r1
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <XMEGANVM_WritePageMemory+0x3a>
		  return false;
    1ace:	c0 e0       	ldi	r28, 0x00	; 0
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <XMEGANVM_WritePageMemory+0xc0>

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ad2:	8c e4       	ldi	r24, 0x4C	; 76
    1ad4:	66 de       	rcall	.-820    	; 0x17a2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ad6:	8a e0       	ldi	r24, 0x0A	; 10
    1ad8:	d8 de       	rcall	.-592    	; 0x188a <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    1ada:	8d 2f       	mov	r24, r29
    1adc:	62 de       	rcall	.-828    	; 0x17a2 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ade:	8c e4       	ldi	r24, 0x4C	; 76
    1ae0:	60 de       	rcall	.-832    	; 0x17a2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1ae2:	8b e0       	ldi	r24, 0x0B	; 11
    1ae4:	d2 de       	rcall	.-604    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
		XPROGTarget_SendByte(1 << 0);
    1ae8:	5c de       	rcall	.-840    	; 0x17a2 <XPROGTarget_SendByte>
    1aea:	a1 14       	cp	r10, r1
    1aec:	b1 04       	cpc	r11, r1
	}

	if (WriteSize)
    1aee:	21 f4       	brne	.+8      	; 0x1af8 <XMEGANVM_WritePageMemory+0x60>
    1af0:	81 fc       	sbrc	r8, 1
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1af2:	20 c0       	rjmp	.+64     	; 0x1b34 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
    1af4:	c1 e0       	ldi	r28, 0x01	; 1
	}

	if (WriteSize)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1af6:	30 c0       	rjmp	.+96     	; 0x1b58 <XMEGANVM_WritePageMemory+0xc0>
    1af8:	e6 de       	rcall	.-564    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    1afa:	88 23       	and	r24, r24
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1afc:	41 f3       	breq	.-48     	; 0x1ace <XMEGANVM_WritePageMemory+0x36>
    1afe:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b00:	50 de       	rcall	.-864    	; 0x17a2 <XPROGTarget_SendByte>
    1b02:	8a e0       	ldi	r24, 0x0A	; 10
		XPROGTarget_SendByte(WriteBuffCommand);
    1b04:	c2 de       	rcall	.-636    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1b06:	8c 2f       	mov	r24, r28

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1b08:	4c de       	rcall	.-872    	; 0x17a2 <XPROGTarget_SendByte>
    1b0a:	8b e6       	ldi	r24, 0x6B	; 107
		XMEGANVM_SendAddress(WriteAddress);
    1b0c:	4a de       	rcall	.-876    	; 0x17a2 <XPROGTarget_SendByte>
    1b0e:	c3 01       	movw	r24, r6
    1b10:	b2 01       	movw	r22, r4
    1b12:	a9 de       	rcall	.-686    	; 0x1866 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1b14:	80 ea       	ldi	r24, 0xA0	; 160
    1b16:	45 de       	rcall	.-886    	; 0x17a2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	8a 0d       	add	r24, r10
    1b1c:	42 de       	rcall	.-892    	; 0x17a2 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1b1e:	84 e6       	ldi	r24, 0x64	; 100
    1b20:	40 de       	rcall	.-896    	; 0x17a2 <XPROGTarget_SendByte>
    1b22:	e6 01       	movw	r28, r12
    1b24:	ac 0c       	add	r10, r12
		while (WriteSize--)
    1b26:	bd 1c       	adc	r11, r13
    1b28:	ca 15       	cp	r28, r10
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1b2a:	db 05       	cpc	r29, r11
    1b2c:	09 f3       	breq	.-62     	; 0x1af0 <XMEGANVM_WritePageMemory+0x58>
    1b2e:	89 91       	ld	r24, Y+
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b30:	38 de       	rcall	.-912    	; 0x17a2 <XPROGTarget_SendByte>
    1b32:	fa cf       	rjmp	.-12     	; 0x1b28 <XMEGANVM_WritePageMemory+0x90>
    1b34:	c8 de       	rcall	.-624    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b36:	c8 2f       	mov	r28, r24
    1b38:	88 23       	and	r24, r24
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <XMEGANVM_WritePageMemory+0xa6>
    1b3c:	c8 cf       	rjmp	.-112    	; 0x1ace <XMEGANVM_WritePageMemory+0x36>
    1b3e:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b40:	30 de       	rcall	.-928    	; 0x17a2 <XPROGTarget_SendByte>
    1b42:	8a e0       	ldi	r24, 0x0A	; 10
    1b44:	a2 de       	rcall	.-700    	; 0x188a <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    1b46:	89 2d       	mov	r24, r9
    1b48:	2c de       	rcall	.-936    	; 0x17a2 <XPROGTarget_SendByte>
    1b4a:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b4c:	2a de       	rcall	.-940    	; 0x17a2 <XPROGTarget_SendByte>
    1b4e:	c3 01       	movw	r24, r6
    1b50:	b2 01       	movw	r22, r4
		XMEGANVM_SendAddress(WriteAddress);
    1b52:	89 de       	rcall	.-750    	; 0x1866 <XMEGANVM_SendAddress>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	25 de       	rcall	.-950    	; 0x17a2 <XPROGTarget_SendByte>
    1b58:	8c 2f       	mov	r24, r28
		XPROGTarget_SendByte(0x00);
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
	}

	return true;
}
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	9f 90       	pop	r9
    1b70:	8f 90       	pop	r8
    1b72:	7f 90       	pop	r7
    1b74:	6f 90       	pop	r6
    1b76:	5f 90       	pop	r5
    1b78:	4f 90       	pop	r4
    1b7a:	08 95       	ret

00001b7c <XMEGANVM_EraseMemory>:
    1b7c:	cf 92       	push	r12
    1b7e:	df 92       	push	r13
    1b80:	ef 92       	push	r14
    1b82:	ff 92       	push	r15
 *  \param[in] Address       Address inside the memory space to erase
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand, const uint32_t Address)
{
    1b84:	cf 93       	push	r28
    1b86:	c8 2f       	mov	r28, r24
    1b88:	6a 01       	movw	r12, r20
    1b8a:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b8c:	9c de       	rcall	.-712    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <XMEGANVM_EraseMemory+0x18>
    1b92:	59 c0       	rjmp	.+178    	; 0x1c46 <XMEGANVM_EraseMemory+0xca>

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b94:	8c e4       	ldi	r24, 0x4C	; 76
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1b96:	c0 34       	cpi	r28, 0x40	; 64
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <XMEGANVM_EraseMemory+0x28>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b9a:	03 de       	rcall	.-1018   	; 0x17a2 <XPROGTarget_SendByte>
    1b9c:	8a e0       	ldi	r24, 0x0A	; 10
    1b9e:	75 de       	rcall	.-790    	; 0x188a <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1ba0:	80 e4       	ldi	r24, 0x40	; 64
    1ba2:	38 c0       	rjmp	.+112    	; 0x1c14 <XMEGANVM_EraseMemory+0x98>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(1 << 0);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1ba4:	c0 33       	cpi	r28, 0x30	; 48
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <XMEGANVM_EraseMemory+0x2e>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ba8:	3c c0       	rjmp	.+120    	; 0x1c22 <XMEGANVM_EraseMemory+0xa6>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1baa:	fb dd       	rcall	.-1034   	; 0x17a2 <XPROGTarget_SendByte>
    1bac:	8a e0       	ldi	r24, 0x0A	; 10
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1bae:	6d de       	rcall	.-806    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1bb0:	86 e3       	ldi	r24, 0x36	; 54

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bb2:	f7 dd       	rcall	.-1042   	; 0x17a2 <XPROGTarget_SendByte>
    1bb4:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bb6:	f5 dd       	rcall	.-1046   	; 0x17a2 <XPROGTarget_SendByte>
    1bb8:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(1 << 0);
    1bba:	67 de       	rcall	.-818    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1bbe:	f1 dd       	rcall	.-1054   	; 0x17a2 <XPROGTarget_SendByte>
    1bc0:	82 de       	rcall	.-764    	; 0x18c6 <XMEGANVM_WaitWhileNVMControllerBusy>
    1bc2:	88 23       	and	r24, r24
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <XMEGANVM_EraseMemory+0x4c>
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <XMEGANVM_EraseMemory+0xca>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bc8:	8c e4       	ldi	r24, 0x4C	; 76
    1bca:	eb dd       	rcall	.-1066   	; 0x17a2 <XPROGTarget_SendByte>
    1bcc:	8a e0       	ldi	r24, 0x0A	; 10
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1bce:	5d de       	rcall	.-838    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1bd0:	83 e3       	ldi	r24, 0x33	; 51

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1bd2:	e7 dd       	rcall	.-1074   	; 0x17a2 <XPROGTarget_SendByte>
    1bd4:	8b e6       	ldi	r24, 0x6B	; 107
    1bd6:	e5 dd       	rcall	.-1078   	; 0x17a2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1bd8:	c7 01       	movw	r24, r14
    1bda:	b6 01       	movw	r22, r12
    1bdc:	44 de       	rcall	.-888    	; 0x1866 <XMEGANVM_SendAddress>
    1bde:	80 ea       	ldi	r24, 0xA0	; 160

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1be0:	e0 dd       	rcall	.-1088   	; 0x17a2 <XPROGTarget_SendByte>
    1be2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <XPROG_Param_EEPageSize>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	dc dd       	rcall	.-1096   	; 0x17a2 <XPROGTarget_SendByte>
    1bea:	84 e6       	ldi	r24, 0x64	; 100
    1bec:	da dd       	rcall	.-1100   	; 0x17a2 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1bee:	c0 e0       	ldi	r28, 0x00	; 0
    1bf0:	8c 2f       	mov	r24, r28
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <XPROG_Param_EEPageSize>
    1bf8:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <XPROG_Param_EEPageSize+0x1>
    1bfc:	82 17       	cp	r24, r18
    1bfe:	93 07       	cpc	r25, r19
		  XPROGTarget_SendByte(0x00);
    1c00:	20 f4       	brcc	.+8      	; 0x1c0a <XMEGANVM_EraseMemory+0x8e>
    1c02:	80 e0       	ldi	r24, 0x00	; 0
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1c04:	ce dd       	rcall	.-1124   	; 0x17a2 <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c06:	cf 5f       	subi	r28, 0xFF	; 255
    1c08:	f3 cf       	rjmp	.-26     	; 0x1bf0 <XMEGANVM_EraseMemory+0x74>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c0a:	8c e4       	ldi	r24, 0x4C	; 76
    1c0c:	ca dd       	rcall	.-1132   	; 0x17a2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(EraseCommand);
    1c0e:	8a e0       	ldi	r24, 0x0A	; 10
    1c10:	3c de       	rcall	.-904    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1c12:	80 e3       	ldi	r24, 0x30	; 48

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c14:	c6 dd       	rcall	.-1140   	; 0x17a2 <XPROGTarget_SendByte>
    1c16:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1c18:	c4 dd       	rcall	.-1144   	; 0x17a2 <XPROGTarget_SendByte>
    1c1a:	8b e0       	ldi	r24, 0x0B	; 11
    1c1c:	36 de       	rcall	.-916    	; 0x188a <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0b c0       	rjmp	.+22     	; 0x1c38 <XMEGANVM_EraseMemory+0xbc>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c22:	bf dd       	rcall	.-1154   	; 0x17a2 <XPROGTarget_SendByte>
    1c24:	8a e0       	ldi	r24, 0x0A	; 10
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c26:	31 de       	rcall	.-926    	; 0x188a <XMEGANVM_SendNVMRegAddress>
    1c28:	8c 2f       	mov	r24, r28
    1c2a:	bb dd       	rcall	.-1162   	; 0x17a2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(EraseCommand);
    1c2c:	8c e4       	ldi	r24, 0x4C	; 76
    1c2e:	b9 dd       	rcall	.-1166   	; 0x17a2 <XPROGTarget_SendByte>
    1c30:	c7 01       	movw	r24, r14

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c32:	b6 01       	movw	r22, r12
    1c34:	18 de       	rcall	.-976    	; 0x1866 <XMEGANVM_SendAddress>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
		XMEGANVM_SendAddress(Address);
    1c38:	b4 dd       	rcall	.-1176   	; 0x17a2 <XPROGTarget_SendByte>
    1c3a:	cf 91       	pop	r28
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
		XPROGTarget_SendByte(0x00);
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	34 ce       	rjmp	.-920    	; 0x18ae <XMEGANVM_WaitWhileNVMBusBusy>
	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	return true;
}
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	cf 91       	pop	r28
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	df 90       	pop	r13
		XMEGANVM_SendAddress(Address);
		XPROGTarget_SendByte(0x00);
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1c50:	cf 90       	pop	r12
    1c52:	08 95       	ret

00001c54 <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1c54:	98 2f       	mov	r25, r24
    1c56:	90 73       	andi	r25, 0x30	; 48
    1c58:	99 0f       	add	r25, r25
    1c5a:	8f 70       	andi	r24, 0x0F	; 15
    1c5c:	80 69       	ori	r24, 0x90	; 144
    1c5e:	89 2b       	or	r24, r25
    1c60:	a0 cd       	rjmp	.-1216   	; 0x17a2 <XPROGTarget_SendByte>

00001c62 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	ec 01       	movw	r28, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1c68:	88 e6       	ldi	r24, 0x68	; 104
    1c6a:	9b dd       	rcall	.-1226   	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    1c6c:	8c 2f       	mov	r24, r28
    1c6e:	99 dd       	rcall	.-1230   	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1c70:	89 e6       	ldi	r24, 0x69	; 105
    1c72:	97 dd       	rcall	.-1234   	; 0x17a2 <XPROGTarget_SendByte>
    1c74:	8d 2f       	mov	r24, r29
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
}
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
{
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1c7a:	93 cd       	rjmp	.-1242   	; 0x17a2 <XPROGTarget_SendByte>

00001c7c <TINYNVM_WaitWhileNVMBusBusy>:
    1c7c:	80 e8       	ldi	r24, 0x80	; 128
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    1c7e:	91 dd       	rcall	.-1246   	; 0x17a2 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1c80:	a4 dd       	rcall	.-1208   	; 0x17ca <XPROGTarget_ReceiveByte>
    1c82:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1c84:	91 11       	cpse	r25, r1
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <TINYNVM_WaitWhileNVMBusBusy+0x14>
    1c88:	81 ff       	sbrs	r24, 1
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1c8a:	f8 cf       	rjmp	.-16     	; 0x1c7c <TINYNVM_WaitWhileNVMBusBusy>
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    1c8e:	08 95       	ret
    1c90:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    1c92:	08 95       	ret

00001c94 <TINYNVM_WaitWhileNVMControllerBusy>:

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
		  return true;
	}
}
    1c94:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <XPROG_Param_NVMCSRRegAddr>
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1c98:	89 2f       	mov	r24, r25
    1c9a:	80 73       	andi	r24, 0x30	; 48
    1c9c:	88 0f       	add	r24, r24
    1c9e:	9f 70       	andi	r25, 0x0F	; 15
    1ca0:	90 61       	ori	r25, 0x10	; 16
    1ca2:	89 2b       	or	r24, r25
    1ca4:	7e dd       	rcall	.-1284   	; 0x17a2 <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1ca6:	91 dd       	rcall	.-1246   	; 0x17ca <XPROGTarget_ReceiveByte>
    1ca8:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1caa:	91 11       	cpse	r25, r1
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <TINYNVM_WaitWhileNVMControllerBusy+0x22>
    1cae:	87 fd       	sbrc	r24, 7
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1cb0:	f1 cf       	rjmp	.-30     	; 0x1c94 <TINYNVM_WaitWhileNVMControllerBusy>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    1cb4:	08 95       	ret
    1cb6:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    1cb8:	08 95       	ret

00001cba <TINYNVM_EnableTPI>:

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1cba:	ef 92       	push	r14
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	28 97       	sbiw	r28, 0x08	; 8
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1cd6:	ad dd       	rcall	.-1190   	; 0x1832 <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1cd8:	82 ec       	ldi	r24, 0xC2	; 194
    1cda:	63 dd       	rcall	.-1338   	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    1cdc:	87 e0       	ldi	r24, 0x07	; 7
    1cde:	61 dd       	rcall	.-1342   	; 0x17a2 <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1ce0:	80 ee       	ldi	r24, 0xE0	; 224
    1ce2:	5f dd       	rcall	.-1346   	; 0x17a2 <XPROGTarget_SendByte>
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	07 5f       	subi	r16, 0xF7	; 247
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	ce 01       	movw	r24, r28
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	7c 01       	movw	r14, r24
    1cf0:	88 e0       	ldi	r24, 0x08	; 8
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1cf2:	ef e4       	ldi	r30, 0x4F	; 79
    1cf4:	f1 e0       	ldi	r31, 0x01	; 1
    1cf6:	d7 01       	movw	r26, r14
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	0d 92       	st	X+, r0
    1cfc:	8a 95       	dec	r24
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <TINYNVM_EnableTPI+0x3e>
    1d00:	f8 01       	movw	r30, r16
    1d02:	82 91       	ld	r24, -Z
    1d04:	8f 01       	movw	r16, r30
    1d06:	4d dd       	rcall	.-1382   	; 0x17a2 <XPROGTarget_SendByte>
    1d08:	0e 15       	cp	r16, r14
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1d0a:	1f 05       	cpc	r17, r15
    1d0c:	89 f7       	brne	.-30     	; 0x1cf0 <TINYNVM_EnableTPI+0x36>
    1d0e:	28 96       	adiw	r28, 0x08	; 8
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
}
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1d26:	aa cf       	rjmp	.-172    	; 0x1c7c <TINYNVM_WaitWhileNVMBusBusy>

00001d28 <TINYNVM_DisableTPI>:
    1d28:	a9 df       	rcall	.-174    	; 0x1c7c <TINYNVM_WaitWhileNVMBusBusy>
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();

	/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1d2a:	80 ec       	ldi	r24, 0xC0	; 192
    1d2c:	3a dd       	rcall	.-1420   	; 0x17a2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	38 dd       	rcall	.-1424   	; 0x17a2 <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetTPI();
    1d32:	24 cd       	rjmp	.-1464   	; 0x177c <XPROGTarget_DisableTargetTPI>

00001d34 <TINYNVM_ReadMemory>:
    1d34:	ef 92       	push	r14
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	7c 01       	movw	r14, r24
    1d42:	eb 01       	movw	r28, r22
    1d44:	8a 01       	movw	r16, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d46:	a6 df       	rcall	.-180    	; 0x1c94 <TINYNVM_WaitWhileNVMControllerBusy>
    1d48:	88 23       	and	r24, r24
    1d4a:	c1 f0       	breq	.+48     	; 0x1d7c <TINYNVM_ReadMemory+0x48>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1d4c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <XPROG_Param_NVMCMDRegAddr>
    1d50:	81 df       	rcall	.-254    	; 0x1c54 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	26 dd       	rcall	.-1460   	; 0x17a2 <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1d56:	c7 01       	movw	r24, r14
    1d58:	84 df       	rcall	.-248    	; 0x1c62 <TINYNVM_SendPointerAddress>
    1d5a:	0c 0f       	add	r16, r28
    1d5c:	1d 1f       	adc	r17, r29
    1d5e:	c0 17       	cp	r28, r16

	while (ReadSize-- && !(TimeoutExpired))
    1d60:	d1 07       	cpc	r29, r17
    1d62:	41 f0       	breq	.+16     	; 0x1d74 <TINYNVM_ReadMemory+0x40>
    1d64:	8a b5       	in	r24, 0x2a	; 42
    1d66:	81 11       	cpse	r24, r1
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <TINYNVM_ReadMemory+0x40>
    1d6a:	84 e2       	ldi	r24, 0x24	; 36
    1d6c:	1a dd       	rcall	.-1484   	; 0x17a2 <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1d6e:	2d dd       	rcall	.-1446   	; 0x17ca <XPROGTarget_ReceiveByte>
    1d70:	89 93       	st	Y+, r24
    1d72:	f5 cf       	rjmp	.-22     	; 0x1d5e <TINYNVM_ReadMemory+0x2a>
    1d74:	9a b5       	in	r25, 0x2a	; 42
	}

	return (TimeoutExpired == false);
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	91 11       	cpse	r25, r1
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	df 91       	pop	r29
}
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	08 95       	ret

00001d8a <TINYNVM_WriteMemory>:
    1d8a:	cf 92       	push	r12
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1d8c:	df 92       	push	r13
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	6c 01       	movw	r12, r24
    1d9a:	8b 01       	movw	r16, r22
    1d9c:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d9e:	7a df       	rcall	.-268    	; 0x1c94 <TINYNVM_WaitWhileNVMControllerBusy>
    1da0:	f8 2e       	mov	r15, r24
    1da2:	81 11       	cpse	r24, r1
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <TINYNVM_WriteMemory+0x20>
	  return false;
    1da6:	f1 2c       	mov	r15, r1
    1da8:	22 c0       	rjmp	.+68     	; 0x1dee <TINYNVM_WriteMemory+0x64>

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1daa:	c0 ff       	sbrs	r28, 0
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <TINYNVM_WriteMemory+0x30>
	  WriteBuffer[WriteLength++] = 0xFF;
    1dae:	f8 01       	movw	r30, r16
    1db0:	ec 0f       	add	r30, r28
    1db2:	fd 1f       	adc	r31, r29
    1db4:	8f ef       	ldi	r24, 0xFF	; 255
    1db6:	80 83       	st	Z, r24
    1db8:	21 96       	adiw	r28, 0x01	; 1

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1dba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <XPROG_Param_NVMCMDRegAddr>
    1dbe:	4a df       	rcall	.-364    	; 0x1c54 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1dc0:	8d e1       	ldi	r24, 0x1D	; 29
    1dc2:	ef dc       	rcall	.-1570   	; 0x17a2 <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	4d df       	rcall	.-358    	; 0x1c62 <TINYNVM_SendPointerAddress>

	while (WriteLength)
    1dc8:	20 97       	sbiw	r28, 0x00	; 0
    1dca:	89 f0       	breq	.+34     	; 0x1dee <TINYNVM_WriteMemory+0x64>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1dcc:	63 df       	rcall	.-314    	; 0x1c94 <TINYNVM_WaitWhileNVMControllerBusy>
    1dce:	88 23       	and	r24, r24
    1dd0:	51 f3       	breq	.-44     	; 0x1da6 <TINYNVM_WriteMemory+0x1c>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1dd2:	84 e6       	ldi	r24, 0x64	; 100
    1dd4:	e6 dc       	rcall	.-1588   	; 0x17a2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 81       	ld	r24, Z
    1dda:	e3 dc       	rcall	.-1594   	; 0x17a2 <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1ddc:	84 e6       	ldi	r24, 0x64	; 100
    1dde:	e1 dc       	rcall	.-1598   	; 0x17a2 <XPROGTarget_SendByte>
    1de0:	f8 01       	movw	r30, r16
		XPROGTarget_SendByte(*(WriteBuffer++));
    1de2:	81 81       	ldd	r24, Z+1	; 0x01
    1de4:	de dc       	rcall	.-1604   	; 0x17a2 <XPROGTarget_SendByte>
    1de6:	22 97       	sbiw	r28, 0x02	; 2
    1de8:	0e 5f       	subi	r16, 0xFE	; 254

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	ed cf       	rjmp	.-38     	; 0x1dc8 <TINYNVM_WriteMemory+0x3e>
    1dee:	8f 2d       	mov	r24, r15
    1df0:	df 91       	pop	r29
	}

	return true;
}
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	df 90       	pop	r13
    1dfc:	cf 90       	pop	r12
    1dfe:	08 95       	ret

00001e00 <TINYNVM_EraseMemory>:
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    1e04:	df 93       	push	r29
    1e06:	18 2f       	mov	r17, r24
    1e08:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e0a:	44 df       	rcall	.-376    	; 0x1c94 <TINYNVM_WaitWhileNVMControllerBusy>
    1e0c:	88 23       	and	r24, r24
    1e0e:	81 f0       	breq	.+32     	; 0x1e30 <TINYNVM_EraseMemory+0x30>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1e10:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <XPROG_Param_NVMCMDRegAddr>
    1e14:	1f df       	rcall	.-450    	; 0x1c54 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1e16:	81 2f       	mov	r24, r17
    1e18:	c4 dc       	rcall	.-1656   	; 0x17a2 <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	81 60       	ori	r24, 0x01	; 1
    1e1e:	21 df       	rcall	.-446    	; 0x1c62 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1e20:	80 e6       	ldi	r24, 0x60	; 96
    1e22:	bf dc       	rcall	.-1666   	; 0x17a2 <XPROGTarget_SendByte>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(0x00);
    1e26:	bd dc       	rcall	.-1670   	; 0x17a2 <XPROGTarget_SendByte>
    1e28:	df 91       	pop	r29
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	return true;
}
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	32 cf       	rjmp	.-412    	; 0x1c94 <TINYNVM_WaitWhileNVMControllerBusy>
	TINYNVM_SendPointerAddress(Address | 0x0001);
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
	XPROGTarget_SendByte(0x00);

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	df 91       	pop	r29
	  return false;

	return true;
}
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	08 95       	ret

00001e3a <Endpoint_ConfigureEndpoint_Prv>:
    1e3a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1e3e:	eb ee       	ldi	r30, 0xEB	; 235
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	81 60       	ori	r24, 0x01	; 1
    1e46:	80 83       	st	Z, r24
    1e48:	ed ee       	ldi	r30, 0xED	; 237
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	10 82       	st	Z, r1
    1e4e:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1e52:	40 83       	st	Z, r20
    1e54:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1e58:	88 1f       	adc	r24, r24
    1e5a:	88 27       	eor	r24, r24
    1e5c:	88 1f       	adc	r24, r24
    1e5e:	08 95       	ret

00001e60 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1e60:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <USB_ControlRequest>
    1e64:	87 ff       	sbrs	r24, 7
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1e6c:	82 fd       	sbrc	r24, 2
    1e6e:	04 c0       	rjmp	.+8      	; 0x1e78 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e70:	8e b3       	in	r24, 0x1e	; 30
    1e72:	81 11       	cpse	r24, r1
    1e74:	f9 cf       	rjmp	.-14     	; 0x1e68 <Endpoint_ClearStatusStage+0x8>
    1e76:	10 c0       	rjmp	.+32     	; 0x1e98 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1e7c:	8b 77       	andi	r24, 0x7B	; 123
    1e7e:	0a c0       	rjmp	.+20     	; 0x1e94 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e80:	8e b3       	in	r24, 0x1e	; 30
    1e82:	88 23       	and	r24, r24
    1e84:	49 f0       	breq	.+18     	; 0x1e98 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1e8a:	80 ff       	sbrs	r24, 0
    1e8c:	f9 cf       	rjmp	.-14     	; 0x1e80 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1e92:	8e 77       	andi	r24, 0x7E	; 126
    1e94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1e98:	08 95       	ret

00001e9a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1e9a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    1e9e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    1ea2:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ea4:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1ea8:	84 2f       	mov	r24, r20
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	40 ff       	sbrs	r20, 0
    1eae:	22 c0       	rjmp	.+68     	; 0x1ef4 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1eb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1eb4:	80 fd       	sbrc	r24, 0
    1eb6:	1c c0       	rjmp	.+56     	; 0x1ef0 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1eb8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1eba:	88 23       	and	r24, r24
    1ebc:	99 f0       	breq	.+38     	; 0x1ee4 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ebe:	85 30       	cpi	r24, 0x05	; 5
    1ec0:	99 f0       	breq	.+38     	; 0x1ee8 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ec2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1ec6:	85 fd       	sbrc	r24, 5
    1ec8:	11 c0       	rjmp	.+34     	; 0x1eec <Endpoint_WaitUntilReady+0x52>
    1eca:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    1ece:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1ed2:	24 17       	cp	r18, r20
    1ed4:	35 07       	cpc	r19, r21
    1ed6:	31 f3       	breq	.-52     	; 0x1ea4 <Endpoint_WaitUntilReady+0xa>
    1ed8:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <Endpoint_WaitUntilReady+0x46>
    1edc:	9a 01       	movw	r18, r20
    1ede:	e2 cf       	rjmp	.-60     	; 0x1ea4 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
    1ee2:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ef4:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ef8:	42 ff       	sbrs	r20, 2
    1efa:	de cf       	rjmp	.-68     	; 0x1eb8 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1efc:	08 95       	ret

00001efe <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1efe:	3c d0       	rcall	.+120    	; 0x1f78 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1f00:	3e d0       	rcall	.+124    	; 0x1f7e <USB_INT_ClearAllInterrupts>
    1f02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1f06:	8f 77       	andi	r24, 0x7F	; 127
    1f08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    1f0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
    1f10:	80 68       	ori	r24, 0x80	; 128
    1f12:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    1f16:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    1f20:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f22:	89 bd       	out	0x29, r24	; 41
    1f24:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f26:	89 bd       	out	0x29, r24	; 41
    1f28:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1f2a:	00 fe       	sbrs	r0, 0
    1f2c:	fd cf       	rjmp	.-6      	; 0x1f28 <USB_ResetInterface+0x2a>
    1f2e:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1f30:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1f34:	42 e1       	ldi	r20, 0x12	; 18
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	7f df       	rcall	.-258    	; 0x1e3a <Endpoint_ConfigureEndpoint_Prv>
    1f3c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1f40:	8e 7f       	andi	r24, 0xFE	; 254
    1f42:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1f46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1f4a:	81 60       	ori	r24, 0x01	; 1
    1f4c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1f50:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1f54:	88 60       	ori	r24, 0x08	; 8
    1f56:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1f5a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1f5e:	8e 7f       	andi	r24, 0xFE	; 254
    1f60:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
    1f64:	08 95       	ret

00001f66 <USB_Init>:
    1f66:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8e 7f       	andi	r24, 0xFE	; 254
    1f6e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <USB_IsInitialized>

	USB_ResetInterface();
    1f76:	c3 cf       	rjmp	.-122    	; 0x1efe <USB_ResetInterface>

00001f78 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1f78:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1f7c:	08 95       	ret

00001f7e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1f7e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1f82:	08 95       	ret

00001f84 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	2f 93       	push	r18
    1f90:	3f 93       	push	r19
    1f92:	4f 93       	push	r20
    1f94:	5f 93       	push	r21
    1f96:	6f 93       	push	r22
    1f98:	7f 93       	push	r23
    1f9a:	8f 93       	push	r24
    1f9c:	9f 93       	push	r25
    1f9e:	af 93       	push	r26
    1fa0:	bf 93       	push	r27
    1fa2:	ef 93       	push	r30
    1fa4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1fa6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1faa:	82 ff       	sbrs	r24, 2
    1fac:	0a c0       	rjmp	.+20     	; 0x1fc2 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1fae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1fb2:	82 ff       	sbrs	r24, 2
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1fb6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1fba:	8b 7f       	andi	r24, 0xFB	; 251
    1fbc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1fc0:	bf d2       	rcall	.+1406   	; 0x2540 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1fc2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1fc6:	80 ff       	sbrs	r24, 0
    1fc8:	17 c0       	rjmp	.+46     	; 0x1ff8 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1fca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1fce:	80 ff       	sbrs	r24, 0
    1fd0:	13 c0       	rjmp	.+38     	; 0x1ff8 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1fd2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1fd6:	8e 7f       	andi	r24, 0xFE	; 254
    1fd8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1fdc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1fe0:	80 61       	ori	r24, 0x10	; 16
    1fe2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    1fe6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    1fea:	80 62       	ori	r24, 0x20	; 32
    1fec:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ff0:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1ff2:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    1ff4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ff8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1ffc:	84 ff       	sbrs	r24, 4
    1ffe:	2d c0       	rjmp	.+90     	; 0x205a <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2000:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    2004:	84 ff       	sbrs	r24, 4
    2006:	29 c0       	rjmp	.+82     	; 0x205a <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    200c:	86 e0       	ldi	r24, 0x06	; 6
    200e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2010:	09 b4       	in	r0, 0x29	; 41
    2012:	00 fe       	sbrs	r0, 0
    2014:	fd cf       	rjmp	.-6      	; 0x2010 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    2016:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    201a:	8f 7d       	andi	r24, 0xDF	; 223
    201c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2020:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    2024:	8f 7e       	andi	r24, 0xEF	; 239
    2026:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    202a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    202e:	8f 7e       	andi	r24, 0xEF	; 239
    2030:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2034:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    2038:	81 60       	ori	r24, 0x01	; 1
    203a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    203e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_Device_ConfigurationNumber>
    2042:	81 11       	cpse	r24, r1
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <__vector_11+0xce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2046:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    204a:	87 fd       	sbrc	r24, 7
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <__vector_11+0xce>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <__vector_11+0xd0>
    2052:	84 e0       	ldi	r24, 0x04	; 4
    2054:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    2056:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    205a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    205e:	83 ff       	sbrs	r24, 3
    2060:	21 c0       	rjmp	.+66     	; 0x20a4 <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2062:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    2066:	83 ff       	sbrs	r24, 3
    2068:	1d c0       	rjmp	.+58     	; 0x20a4 <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    206a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    206e:	87 7f       	andi	r24, 0xF7	; 247
    2070:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    2078:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    207c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    2080:	8e 7f       	andi	r24, 0xFE	; 254
    2082:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2086:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    208a:	8e 7f       	andi	r24, 0xFE	; 254
    208c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2090:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    2094:	80 61       	ori	r24, 0x10	; 16
    2096:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    209a:	42 e1       	ldi	r20, 0x12	; 18
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    20a0:	cc de       	rcall	.-616    	; 0x1e3a <Endpoint_ConfigureEndpoint_Prv>
    20a2:	4e d2       	rcall	.+1180   	; 0x2540 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    20a4:	ff 91       	pop	r31
    20a6:	ef 91       	pop	r30
    20a8:	bf 91       	pop	r27
    20aa:	af 91       	pop	r26
    20ac:	9f 91       	pop	r25
    20ae:	8f 91       	pop	r24
    20b0:	7f 91       	pop	r23
    20b2:	6f 91       	pop	r22
    20b4:	5f 91       	pop	r21
    20b6:	4f 91       	pop	r20
    20b8:	3f 91       	pop	r19
    20ba:	2f 91       	pop	r18
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    20c6:	cf 92       	push	r12
    20c8:	df 92       	push	r13
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	ec 01       	movw	r28, r24
    20d8:	8b 01       	movw	r16, r22
    20da:	7a 01       	movw	r14, r20
    20dc:	de de       	rcall	.-580    	; 0x1e9a <Endpoint_WaitUntilReady>
    20de:	81 11       	cpse	r24, r1
    20e0:	33 c0       	rjmp	.+102    	; 0x2148 <Endpoint_Write_Stream_LE+0x82>
    20e2:	e1 14       	cp	r14, r1
    20e4:	f1 04       	cpc	r15, r1
    20e6:	39 f0       	breq	.+14     	; 0x20f6 <Endpoint_Write_Stream_LE+0x30>
    20e8:	f7 01       	movw	r30, r14
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	08 1b       	sub	r16, r24
    20f0:	19 0b       	sbc	r17, r25
    20f2:	c8 0f       	add	r28, r24
    20f4:	d9 1f       	adc	r29, r25
    20f6:	c1 2c       	mov	r12, r1
    20f8:	d1 2c       	mov	r13, r1
    20fa:	01 15       	cp	r16, r1
    20fc:	11 05       	cpc	r17, r1
    20fe:	19 f1       	breq	.+70     	; 0x2146 <Endpoint_Write_Stream_LE+0x80>
    2100:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2104:	85 fd       	sbrc	r24, 5
    2106:	16 c0       	rjmp	.+44     	; 0x2134 <Endpoint_Write_Stream_LE+0x6e>
    2108:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    210c:	8e 77       	andi	r24, 0x7E	; 126
    210e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2112:	17 d2       	rcall	.+1070   	; 0x2542 <USB_USBTask>
    2114:	e1 14       	cp	r14, r1
    2116:	f1 04       	cpc	r15, r1
    2118:	49 f0       	breq	.+18     	; 0x212c <Endpoint_Write_Stream_LE+0x66>
    211a:	f7 01       	movw	r30, r14
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	c8 0e       	add	r12, r24
    2122:	d9 1e       	adc	r13, r25
    2124:	d1 82       	std	Z+1, r13	; 0x01
    2126:	c0 82       	st	Z, r12
    2128:	85 e0       	ldi	r24, 0x05	; 5
    212a:	0e c0       	rjmp	.+28     	; 0x2148 <Endpoint_Write_Stream_LE+0x82>
    212c:	b6 de       	rcall	.-660    	; 0x1e9a <Endpoint_WaitUntilReady>
    212e:	88 23       	and	r24, r24
    2130:	21 f3       	breq	.-56     	; 0x20fa <Endpoint_Write_Stream_LE+0x34>
    2132:	0a c0       	rjmp	.+20     	; 0x2148 <Endpoint_Write_Stream_LE+0x82>
    2134:	89 91       	ld	r24, Y+
    2136:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    213a:	01 50       	subi	r16, 0x01	; 1
    213c:	11 09       	sbc	r17, r1
    213e:	ff ef       	ldi	r31, 0xFF	; 255
    2140:	cf 1a       	sub	r12, r31
    2142:	df 0a       	sbc	r13, r31
    2144:	da cf       	rjmp	.-76     	; 0x20fa <Endpoint_Write_Stream_LE+0x34>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	df 90       	pop	r13
    2156:	cf 90       	pop	r12
    2158:	08 95       	ret

0000215a <Endpoint_Read_Stream_LE>:
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	ec 01       	movw	r28, r24
    216c:	8b 01       	movw	r16, r22
    216e:	7a 01       	movw	r14, r20
    2170:	94 de       	rcall	.-728    	; 0x1e9a <Endpoint_WaitUntilReady>
    2172:	81 11       	cpse	r24, r1
    2174:	33 c0       	rjmp	.+102    	; 0x21dc <Endpoint_Read_Stream_LE+0x82>
    2176:	e1 14       	cp	r14, r1
    2178:	f1 04       	cpc	r15, r1
    217a:	39 f0       	breq	.+14     	; 0x218a <Endpoint_Read_Stream_LE+0x30>
    217c:	f7 01       	movw	r30, r14
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	08 1b       	sub	r16, r24
    2184:	19 0b       	sbc	r17, r25
    2186:	c8 0f       	add	r28, r24
    2188:	d9 1f       	adc	r29, r25
    218a:	c1 2c       	mov	r12, r1
    218c:	d1 2c       	mov	r13, r1
    218e:	01 15       	cp	r16, r1
    2190:	11 05       	cpc	r17, r1
    2192:	19 f1       	breq	.+70     	; 0x21da <Endpoint_Read_Stream_LE+0x80>
    2194:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2198:	85 fd       	sbrc	r24, 5
    219a:	16 c0       	rjmp	.+44     	; 0x21c8 <Endpoint_Read_Stream_LE+0x6e>
    219c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    21a0:	8b 77       	andi	r24, 0x7B	; 123
    21a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    21a6:	cd d1       	rcall	.+922    	; 0x2542 <USB_USBTask>
    21a8:	e1 14       	cp	r14, r1
    21aa:	f1 04       	cpc	r15, r1
    21ac:	49 f0       	breq	.+18     	; 0x21c0 <Endpoint_Read_Stream_LE+0x66>
    21ae:	f7 01       	movw	r30, r14
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	c8 0e       	add	r12, r24
    21b6:	d9 1e       	adc	r13, r25
    21b8:	d1 82       	std	Z+1, r13	; 0x01
    21ba:	c0 82       	st	Z, r12
    21bc:	85 e0       	ldi	r24, 0x05	; 5
    21be:	0e c0       	rjmp	.+28     	; 0x21dc <Endpoint_Read_Stream_LE+0x82>
    21c0:	6c de       	rcall	.-808    	; 0x1e9a <Endpoint_WaitUntilReady>
    21c2:	88 23       	and	r24, r24
    21c4:	21 f3       	breq	.-56     	; 0x218e <Endpoint_Read_Stream_LE+0x34>
    21c6:	0a c0       	rjmp	.+20     	; 0x21dc <Endpoint_Read_Stream_LE+0x82>
    21c8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    21cc:	89 93       	st	Y+, r24
    21ce:	01 50       	subi	r16, 0x01	; 1
    21d0:	11 09       	sbc	r17, r1
    21d2:	ff ef       	ldi	r31, 0xFF	; 255
    21d4:	cf 1a       	sub	r12, r31
    21d6:	df 0a       	sbc	r13, r31
    21d8:	da cf       	rjmp	.-76     	; 0x218e <Endpoint_Read_Stream_LE+0x34>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	df 90       	pop	r13
    21ea:	cf 90       	pop	r12
    21ec:	08 95       	ret

000021ee <Endpoint_Read_Stream_BE>:
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	ec 01       	movw	r28, r24
    2200:	8b 01       	movw	r16, r22
    2202:	7a 01       	movw	r14, r20
    2204:	4a de       	rcall	.-876    	; 0x1e9a <Endpoint_WaitUntilReady>
    2206:	81 11       	cpse	r24, r1
    2208:	38 c0       	rjmp	.+112    	; 0x227a <Endpoint_Read_Stream_BE+0x8c>
    220a:	c8 01       	movw	r24, r16
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	c8 0f       	add	r28, r24
    2210:	d9 1f       	adc	r29, r25
    2212:	e1 14       	cp	r14, r1
    2214:	f1 04       	cpc	r15, r1
    2216:	39 f0       	breq	.+14     	; 0x2226 <Endpoint_Read_Stream_BE+0x38>
    2218:	f7 01       	movw	r30, r14
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	08 1b       	sub	r16, r24
    2220:	19 0b       	sbc	r17, r25
    2222:	c8 1b       	sub	r28, r24
    2224:	d9 0b       	sbc	r29, r25
    2226:	c1 2c       	mov	r12, r1
    2228:	d1 2c       	mov	r13, r1
    222a:	01 15       	cp	r16, r1
    222c:	11 05       	cpc	r17, r1
    222e:	21 f1       	breq	.+72     	; 0x2278 <Endpoint_Read_Stream_BE+0x8a>
    2230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2234:	85 fd       	sbrc	r24, 5
    2236:	16 c0       	rjmp	.+44     	; 0x2264 <Endpoint_Read_Stream_BE+0x76>
    2238:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    223c:	8b 77       	andi	r24, 0x7B	; 123
    223e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2242:	7f d1       	rcall	.+766    	; 0x2542 <USB_USBTask>
    2244:	e1 14       	cp	r14, r1
    2246:	f1 04       	cpc	r15, r1
    2248:	49 f0       	breq	.+18     	; 0x225c <Endpoint_Read_Stream_BE+0x6e>
    224a:	f7 01       	movw	r30, r14
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	c8 0e       	add	r12, r24
    2252:	d9 1e       	adc	r13, r25
    2254:	d1 82       	std	Z+1, r13	; 0x01
    2256:	c0 82       	st	Z, r12
    2258:	85 e0       	ldi	r24, 0x05	; 5
    225a:	0f c0       	rjmp	.+30     	; 0x227a <Endpoint_Read_Stream_BE+0x8c>
    225c:	1e de       	rcall	.-964    	; 0x1e9a <Endpoint_WaitUntilReady>
    225e:	88 23       	and	r24, r24
    2260:	21 f3       	breq	.-56     	; 0x222a <Endpoint_Read_Stream_BE+0x3c>
    2262:	0b c0       	rjmp	.+22     	; 0x227a <Endpoint_Read_Stream_BE+0x8c>
    2264:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    2268:	88 83       	st	Y, r24
    226a:	21 97       	sbiw	r28, 0x01	; 1
    226c:	01 50       	subi	r16, 0x01	; 1
    226e:	11 09       	sbc	r17, r1
    2270:	ff ef       	ldi	r31, 0xFF	; 255
    2272:	cf 1a       	sub	r12, r31
    2274:	df 0a       	sbc	r13, r31
    2276:	d9 cf       	rjmp	.-78     	; 0x222a <Endpoint_Read_Stream_BE+0x3c>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	ff 90       	pop	r15
    2284:	ef 90       	pop	r14
    2286:	df 90       	pop	r13
    2288:	cf 90       	pop	r12
    228a:	08 95       	ret

0000228c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    228c:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <USB_ControlRequest+0x6>
    2290:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <USB_ControlRequest+0x7>
    2294:	26 17       	cp	r18, r22
    2296:	37 07       	cpc	r19, r23
    2298:	48 f0       	brcs	.+18     	; 0x22ac <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    229a:	61 15       	cp	r22, r1
    229c:	71 05       	cpc	r23, r1
    229e:	39 f4       	brne	.+14     	; 0x22ae <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22a0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    22a4:	2e 77       	andi	r18, 0x7E	; 126
    22a6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <Endpoint_Write_Control_PStream_LE+0x22>
    22ac:	b9 01       	movw	r22, r18
    22ae:	fc 01       	movw	r30, r24
    22b0:	80 e0       	ldi	r24, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    22b2:	61 15       	cp	r22, r1
    22b4:	71 05       	cpc	r23, r1
    22b6:	71 f1       	breq	.+92     	; 0x2314 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    22b8:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    22ba:	99 23       	and	r25, r25
    22bc:	d9 f1       	breq	.+118    	; 0x2334 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    22be:	95 30       	cpi	r25, 0x05	; 5
    22c0:	d9 f1       	breq	.+118    	; 0x2338 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22c2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    22c6:	93 fd       	sbrc	r25, 3
    22c8:	33 c0       	rjmp	.+102    	; 0x2330 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22ca:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    22ce:	92 fd       	sbrc	r25, 2
    22d0:	29 c0       	rjmp	.+82     	; 0x2324 <Endpoint_Write_Control_PStream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22d2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
    22d6:	90 ff       	sbrs	r25, 0
    22d8:	ec cf       	rjmp	.-40     	; 0x22b2 <Endpoint_Write_Control_PStream_LE+0x26>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    22da:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    22de:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    22e0:	61 15       	cp	r22, r1
    22e2:	71 05       	cpc	r23, r1
    22e4:	61 f0       	breq	.+24     	; 0x22fe <Endpoint_Write_Control_PStream_LE+0x72>
    22e6:	20 31       	cpi	r18, 0x10	; 16
    22e8:	31 05       	cpc	r19, r1
    22ea:	48 f4       	brcc	.+18     	; 0x22fe <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    22ec:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    22f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    22f4:	61 50       	subi	r22, 0x01	; 1
    22f6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    22f8:	2f 5f       	subi	r18, 0xFF	; 255
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	f1 cf       	rjmp	.-30     	; 0x22e0 <Endpoint_Write_Control_PStream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	20 31       	cpi	r18, 0x10	; 16
    2302:	31 05       	cpc	r19, r1
    2304:	09 f0       	breq	.+2      	; 0x2308 <Endpoint_Write_Control_PStream_LE+0x7c>
    2306:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2308:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    230c:	9e 77       	andi	r25, 0x7E	; 126
    230e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2312:	cf cf       	rjmp	.-98     	; 0x22b2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2314:	81 11       	cpse	r24, r1
    2316:	d0 cf       	rjmp	.-96     	; 0x22b8 <Endpoint_Write_Control_PStream_LE+0x2c>
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <Endpoint_Write_Control_PStream_LE+0x98>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    231a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    231c:	88 23       	and	r24, r24
    231e:	51 f0       	breq	.+20     	; 0x2334 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2320:	85 30       	cpi	r24, 0x05	; 5
    2322:	51 f0       	breq	.+20     	; 0x2338 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2324:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2328:	82 ff       	sbrs	r24, 2
    232a:	f7 cf       	rjmp	.-18     	; 0x231a <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2338:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    233a:	08 95       	ret

0000233c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	00 d0       	rcall	.+0      	; 0x2346 <USB_Device_ProcessControlRequest+0xa>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	ed e6       	ldi	r30, 0x6D	; 109
    234c:	f1 e0       	ldi	r31, 0x01	; 1
    234e:	85 e7       	ldi	r24, 0x75	; 117
    2350:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2352:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2356:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2358:	8e 17       	cp	r24, r30
    235a:	9f 07       	cpc	r25, r31
    235c:	d1 f7       	brne	.-12     	; 0x2352 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    235e:	f0 d0       	rcall	.+480    	; 0x2540 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2360:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
    2364:	83 ff       	sbrs	r24, 3
    2366:	d7 c0       	rjmp	.+430    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2368:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    236c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <USB_ControlRequest+0x1>
    2370:	49 2f       	mov	r20, r25
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	4a 30       	cpi	r20, 0x0A	; 10
    2376:	51 05       	cpc	r21, r1
    2378:	08 f0       	brcs	.+2      	; 0x237c <USB_Device_ProcessControlRequest+0x40>
    237a:	cd c0       	rjmp	.+410    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
    237c:	fa 01       	movw	r30, r20
    237e:	ef 5b       	subi	r30, 0xBF	; 191
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	f0 c0       	rjmp	.+480    	; 0x2564 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2384:	82 38       	cpi	r24, 0x82	; 130
    2386:	09 f0       	breq	.+2      	; 0x238a <USB_Device_ProcessControlRequest+0x4e>
    2388:	c6 c0       	rjmp	.+396    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    238a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <USB_ControlRequest+0x4>
    238e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2390:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2394:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2398:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    239c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    23a0:	97 7f       	andi	r25, 0xF7	; 247
    23a2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    23a6:	85 fb       	bst	r24, 5
    23a8:	88 27       	eor	r24, r24
    23aa:	80 f9       	bld	r24, 0
    23ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
    23b0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    23b4:	88 c0       	rjmp	.+272    	; 0x24c6 <USB_Device_ProcessControlRequest+0x18a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    23b6:	28 2f       	mov	r18, r24
    23b8:	2d 7f       	andi	r18, 0xFD	; 253
    23ba:	09 f0       	breq	.+2      	; 0x23be <USB_Device_ProcessControlRequest+0x82>
    23bc:	ac c0       	rjmp	.+344    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <USB_Device_ProcessControlRequest+0x88>
    23c2:	a9 c0       	rjmp	.+338    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    23c4:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <USB_ControlRequest+0x2>
    23c8:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <USB_ControlRequest+0x3>
    23cc:	21 11       	cpse	r18, r1
    23ce:	27 c0       	rjmp	.+78     	; 0x241e <USB_Device_ProcessControlRequest+0xe2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    23d0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <USB_ControlRequest+0x4>
    23d4:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    23d6:	09 f4       	brne	.+2      	; 0x23da <USB_Device_ProcessControlRequest+0x9e>
    23d8:	9e c0       	rjmp	.+316    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    23da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    23de:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    23e2:	20 ff       	sbrs	r18, 0
    23e4:	1c c0       	rjmp	.+56     	; 0x241e <USB_Device_ProcessControlRequest+0xe2>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    23e6:	93 30       	cpi	r25, 0x03	; 3
    23e8:	21 f4       	brne	.+8      	; 0x23f2 <USB_Device_ProcessControlRequest+0xb6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    23ea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    23ee:	80 62       	ori	r24, 0x20	; 32
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <USB_Device_ProcessControlRequest+0xde>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    23f2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    23f6:	90 61       	ori	r25, 0x10	; 16
    23f8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    23fc:	21 e0       	ldi	r18, 0x01	; 1
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <USB_Device_ProcessControlRequest+0xcc>
    2404:	44 0f       	add	r20, r20
    2406:	55 1f       	adc	r21, r21
    2408:	8a 95       	dec	r24
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <USB_Device_ProcessControlRequest+0xc8>
    240c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
    2410:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2414:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    2418:	88 60       	ori	r24, 0x08	; 8
    241a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    241e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2422:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2426:	87 7f       	andi	r24, 0xF7	; 247
    2428:	51 c0       	rjmp	.+162    	; 0x24cc <USB_Device_ProcessControlRequest+0x190>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    242a:	81 11       	cpse	r24, r1
    242c:	74 c0       	rjmp	.+232    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    242e:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <USB_ControlRequest+0x2>
    2432:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2434:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2436:	f8 94       	cli
    2438:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    243c:	87 7f       	andi	r24, 0xF7	; 247
    243e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2442:	0e dd       	rcall	.-1508   	; 0x1e60 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2444:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
    2448:	80 ff       	sbrs	r24, 0
    244a:	fc cf       	rjmp	.-8      	; 0x2444 <USB_Device_ProcessControlRequest+0x108>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    244c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
    2450:	80 78       	andi	r24, 0x80	; 128
    2452:	81 2b       	or	r24, r17

				UDADDR = Temp;
    2454:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
				UDADDR = Temp | (1 << ADDEN);
    2458:	80 68       	ori	r24, 0x80	; 128
    245a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    245e:	11 11       	cpse	r17, r1
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <USB_Device_ProcessControlRequest+0x12a>
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <USB_Device_ProcessControlRequest+0x12c>
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    246a:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    246c:	54 c0       	rjmp	.+168    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    246e:	80 58       	subi	r24, 0x80	; 128
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	08 f0       	brcs	.+2      	; 0x2476 <USB_Device_ProcessControlRequest+0x13a>
    2474:	50 c0       	rjmp	.+160    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2476:	ae 01       	movw	r20, r28
    2478:	4f 5f       	subi	r20, 0xFF	; 255
    247a:	5f 4f       	sbci	r21, 0xFF	; 255
    247c:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <USB_ControlRequest+0x4>
    2480:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <USB_ControlRequest+0x2>
    2484:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <USB_ControlRequest+0x3>
    2488:	0e 94 ae 01 	call	0x35c	; 0x35c <CALLBACK_USB_GetDescriptor>
    248c:	bc 01       	movw	r22, r24
    248e:	89 2b       	or	r24, r25
    2490:	09 f4       	brne	.+2      	; 0x2494 <USB_Device_ProcessControlRequest+0x158>
    2492:	41 c0       	rjmp	.+130    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2494:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    2498:	97 7f       	andi	r25, 0xF7	; 247
    249a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	f4 de       	rcall	.-536    	; 0x228c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    24a8:	8b 77       	andi	r24, 0x7B	; 123
    24aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    24ae:	33 c0       	rjmp	.+102    	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    24b0:	80 38       	cpi	r24, 0x80	; 128
    24b2:	89 f5       	brne	.+98     	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    24b8:	87 7f       	andi	r24, 0xF7	; 247
    24ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    24be:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    24c2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    24ca:	8e 77       	andi	r24, 0x7E	; 126
    24cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    24d0:	c7 dc       	rcall	.-1650   	; 0x1e60 <Endpoint_ClearStatusStage>
    24d2:	21 c0       	rjmp	.+66     	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    24d4:	81 11       	cpse	r24, r1
    24d6:	1f c0       	rjmp	.+62     	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    24d8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <USB_ControlRequest+0x2>
    24dc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <USB_ControlRequest+0x3>
    24e0:	99 27       	eor	r25, r25
    24e2:	02 97       	sbiw	r24, 0x02	; 2
    24e4:	c4 f4       	brge	.+48     	; 0x2516 <USB_Device_ProcessControlRequest+0x1da>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    24ea:	87 7f       	andi	r24, 0xF7	; 247
    24ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    24f0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <USB_ControlRequest+0x2>
    24f4:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    24f8:	b3 dc       	rcall	.-1690   	; 0x1e60 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    24fa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_Device_ConfigurationNumber>
    24fe:	81 11       	cpse	r24, r1
    2500:	06 c0       	rjmp	.+12     	; 0x250e <USB_Device_ProcessControlRequest+0x1d2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2502:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2506:	87 fd       	sbrc	r24, 7
    2508:	02 c0       	rjmp	.+4      	; 0x250e <USB_Device_ProcessControlRequest+0x1d2>
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <USB_Device_ProcessControlRequest+0x1d4>
    250e:	84 e0       	ldi	r24, 0x04	; 4
    2510:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    2512:	0e 94 80 01 	call	0x300	; 0x300 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2516:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    251a:	83 ff       	sbrs	r24, 3
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <USB_Device_ProcessControlRequest+0x1f6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    251e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    2522:	80 62       	ori	r24, 0x20	; 32
    2524:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2528:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    252c:	87 7f       	andi	r24, 0xF7	; 247
    252e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	08 95       	ret

00002540 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2540:	08 95       	ret

00002542 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2542:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    2544:	8e b3       	in	r24, 0x1e	; 30
    2546:	88 23       	and	r24, r24
    2548:	59 f0       	breq	.+22     	; 0x2560 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    254a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    254e:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2550:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2554:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    2558:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    255a:	f0 de       	rcall	.-544    	; 0x233c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    255c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    2560:	cf 91       	pop	r28
    2562:	08 95       	ret

00002564 <__tablejump2__>:
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	05 90       	lpm	r0, Z+
    256a:	f4 91       	lpm	r31, Z
    256c:	e0 2d       	mov	r30, r0
    256e:	09 94       	ijmp

00002570 <eeprom_read_byte>:
    2570:	f9 99       	sbic	0x1f, 1	; 31
    2572:	fe cf       	rjmp	.-4      	; 0x2570 <eeprom_read_byte>
    2574:	92 bd       	out	0x22, r25	; 34
    2576:	81 bd       	out	0x21, r24	; 33
    2578:	f8 9a       	sbi	0x1f, 0	; 31
    257a:	99 27       	eor	r25, r25
    257c:	80 b5       	in	r24, 0x20	; 32
    257e:	08 95       	ret

00002580 <eeprom_update_byte>:
    2580:	26 2f       	mov	r18, r22

00002582 <eeprom_update_r18>:
    2582:	f9 99       	sbic	0x1f, 1	; 31
    2584:	fe cf       	rjmp	.-4      	; 0x2582 <eeprom_update_r18>
    2586:	92 bd       	out	0x22, r25	; 34
    2588:	81 bd       	out	0x21, r24	; 33
    258a:	f8 9a       	sbi	0x1f, 0	; 31
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	00 b4       	in	r0, 0x20	; 32
    2590:	02 16       	cp	r0, r18
    2592:	39 f0       	breq	.+14     	; 0x25a2 <eeprom_update_r18+0x20>
    2594:	1f ba       	out	0x1f, r1	; 31
    2596:	20 bd       	out	0x20, r18	; 32
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	fa 9a       	sbi	0x1f, 2	; 31
    259e:	f9 9a       	sbi	0x1f, 1	; 31
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	08 95       	ret

000025a4 <_exit>:
    25a4:	f8 94       	cli

000025a6 <__stop_program>:
    25a6:	ff cf       	rjmp	.-2      	; 0x25a6 <__stop_program>
