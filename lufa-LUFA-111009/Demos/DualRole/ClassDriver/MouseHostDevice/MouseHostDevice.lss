
MouseHostDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  000029b6  00002a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008001dc  008001dc  00002b26  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bf75  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034ec  00000000  00000000  0000f045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000064ce  00000000  00000000  00012531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001278  00000000  00000000  00018a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f1c  00000000  00000000  00019c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b4a  00000000  00000000  0001db94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000760  00000000  00000000  000256de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	48 c1       	rjmp	.+656    	; 0x292 <__ctors_end>
       2:	00 00       	nop
       4:	64 c1       	rjmp	.+712    	; 0x2ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c1       	rjmp	.+708    	; 0x2ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c1       	rjmp	.+704    	; 0x2ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c1       	rjmp	.+700    	; 0x2ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c1       	rjmp	.+696    	; 0x2ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c1       	rjmp	.+692    	; 0x2ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c1       	rjmp	.+688    	; 0x2ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c1       	rjmp	.+684    	; 0x2ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c1       	rjmp	.+680    	; 0x2ce <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c7       	rjmp	.+3686   	; 0xe90 <__vector_10>
      2a:	00 00       	nop
      2c:	50 c1       	rjmp	.+672    	; 0x2ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c1       	rjmp	.+668    	; 0x2ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c1       	rjmp	.+664    	; 0x2ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c1       	rjmp	.+660    	; 0x2ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c1       	rjmp	.+656    	; 0x2ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c1       	rjmp	.+652    	; 0x2ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c1       	rjmp	.+648    	; 0x2ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c1       	rjmp	.+644    	; 0x2ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c1       	rjmp	.+640    	; 0x2ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c1       	rjmp	.+636    	; 0x2ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c1       	rjmp	.+632    	; 0x2ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c1       	rjmp	.+628    	; 0x2ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c1       	rjmp	.+624    	; 0x2ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c1       	rjmp	.+620    	; 0x2ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c1       	rjmp	.+616    	; 0x2ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c1       	rjmp	.+612    	; 0x2ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c1       	rjmp	.+608    	; 0x2ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c1       	rjmp	.+604    	; 0x2ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c1       	rjmp	.+600    	; 0x2ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c1       	rjmp	.+596    	; 0x2ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c1       	rjmp	.+592    	; 0x2ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c1       	rjmp	.+588    	; 0x2ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c1       	rjmp	.+584    	; 0x2ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c1       	rjmp	.+580    	; 0x2ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c1       	rjmp	.+576    	; 0x2ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c1       	rjmp	.+572    	; 0x2ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c1       	rjmp	.+568    	; 0x2ce <__bad_interrupt>
      96:	00 00       	nop
      98:	a9 04       	cpc	r10, r9
      9a:	9a 05       	cpc	r25, r10
      9c:	c7 04       	cpc	r12, r7
      9e:	d1 04       	cpc	r13, r1
      a0:	fc 04       	cpc	r15, r12
      a2:	24 05       	cpc	r18, r4
      a4:	2f 05       	cpc	r18, r15
      a6:	40 05       	cpc	r20, r0
      a8:	5c 05       	cpc	r21, r12
      aa:	83 05       	cpc	r24, r3
      ac:	f8 0a       	sbc	r15, r24
      ae:	1a 0b       	sbc	r17, r26
      b0:	0b 0c       	add	r0, r11
      b2:	1a 0b       	sbc	r17, r26
      b4:	0b 0c       	add	r0, r11
      b6:	5f 0b       	sbc	r21, r31
      b8:	82 0b       	sbc	r24, r18
      ba:	0b 0c       	add	r0, r11
      bc:	d5 0b       	sbc	r29, r21
      be:	e8 0b       	sbc	r30, r24

000000c0 <__trampolines_end>:
      c0:	1b 5b       	subi	r17, 0xBB	; 187
      c2:	33 33       	cpi	r19, 0x33	; 51
      c4:	6d 55       	subi	r22, 0x5D	; 93
      c6:	49 44       	sbci	r20, 0x49	; 73
      c8:	20 43       	sbci	r18, 0x30	; 48
      ca:	68 61       	ori	r22, 0x18	; 24
      cc:	6e 67       	ori	r22, 0x7E	; 126
      ce:	65 20       	and	r6, r5
      d0:	74 6f       	ori	r23, 0xF4	; 244
      d2:	20 25       	eor	r18, r0
      d4:	53 20       	and	r5, r3
      d6:	6d 6f       	ori	r22, 0xFD	; 253
      d8:	64 65       	ori	r22, 0x54	; 84
      da:	0d 0a       	sbc	r0, r29
      dc:	1b 5b       	subi	r17, 0xBB	; 187
      de:	33 37       	cpi	r19, 0x73	; 115
      e0:	6d 00       	.word	0x006d	; ????

000000e2 <__c.5253>:
      e2:	48 6f 73 74 00                                      Host.

000000e7 <__c.5251>:
      e7:	44 65 76 69 63 65 00                                Device.

000000ee <__c.5240>:
      ee:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 2f     .[36mMouse Host/
      fe:	44 65 76 69 63 65 20 44 65 6d 6f 20 72 75 6e 6e     Device Demo runn
     10e:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

0000011a <ProductString>:
     11a:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
     12a:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     13a:	00 00                                               ..

0000013c <ManufacturerString>:
     13c:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     14c:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000156 <LanguageString>:
     156:	04 03 09 04                                         ....

0000015a <ConfigurationDescriptor>:
     15a:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     16a:	02 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     17a:	00 01                                               ..

0000017c <DeviceDescriptor>:
     17c:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
     18c:	00 01                                               ..

0000018e <MouseReport>:
     18e:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     19e:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     1ae:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     1be:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000001c8 <__c.5270>:
     1c8:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     1d8:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000001e2 <__c.5263>:
     1e2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1f2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     202:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     212:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     222:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     232:	1b 5b 33 37 6d 00                                   .[37m.

00000238 <__c.5256>:
     238:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     248:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     258:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000267 <__c.5246>:
     267:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     277:	68 65 64 2e 0d 0a 00                                hed....

0000027e <__c.5241>:
     27e:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     28e:	0d 0a 00 00                                         ....

00000292 <__ctors_end>:
     292:	11 24       	eor	r1, r1
     294:	1f be       	out	0x3f, r1	; 63
     296:	cf ef       	ldi	r28, 0xFF	; 255
     298:	d0 e2       	ldi	r29, 0x20	; 32
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	cd bf       	out	0x3d, r28	; 61

0000029e <__do_copy_data>:
     29e:	11 e0       	ldi	r17, 0x01	; 1
     2a0:	a0 e0       	ldi	r26, 0x00	; 0
     2a2:	b1 e0       	ldi	r27, 0x01	; 1
     2a4:	e6 eb       	ldi	r30, 0xB6	; 182
     2a6:	f9 e2       	ldi	r31, 0x29	; 41
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	0b bf       	out	0x3b, r16	; 59
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <__do_copy_data+0x14>
     2ae:	07 90       	elpm	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	ac 3d       	cpi	r26, 0xDC	; 220
     2b4:	b1 07       	cpc	r27, r17
     2b6:	d9 f7       	brne	.-10     	; 0x2ae <__do_copy_data+0x10>

000002b8 <__do_clear_bss>:
     2b8:	22 e0       	ldi	r18, 0x02	; 2
     2ba:	ac ed       	ldi	r26, 0xDC	; 220
     2bc:	b1 e0       	ldi	r27, 0x01	; 1
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <.do_clear_bss_start>

000002c0 <.do_clear_bss_loop>:
     2c0:	1d 92       	st	X+, r1

000002c2 <.do_clear_bss_start>:
     2c2:	a6 30       	cpi	r26, 0x06	; 6
     2c4:	b2 07       	cpc	r27, r18
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <.do_clear_bss_loop>
     2c8:	5b d0       	rcall	.+182    	; 0x380 <main>
     2ca:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <_exit>

000002ce <__bad_interrupt>:
     2ce:	98 ce       	rjmp	.-720    	; 0x0 <__vectors>

000002d0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2d0:	84 b7       	in	r24, 0x34	; 52
     2d2:	87 7f       	andi	r24, 0xF7	; 247
     2d4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	a8 95       	wdr
     2dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2e0:	88 61       	ori	r24, 0x18	; 24
     2e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ea:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	80 e8       	ldi	r24, 0x80	; 128
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2fc:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2fe:	83 e3       	ldi	r24, 0x33	; 51
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     306:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     30a:	86 e0       	ldi	r24, 0x06	; 6
     30c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     310:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     314:	88 e1       	ldi	r24, 0x18	; 24
     316:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     31a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     31c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     31e:	8a b1       	in	r24, 0x0a	; 10
     320:	80 6f       	ori	r24, 0xF0	; 240
     322:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     32a:	84 b1       	in	r24, 0x04	; 4
     32c:	8f 71       	andi	r24, 0x1F	; 31
     32e:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     330:	8d b1       	in	r24, 0x0d	; 13
     332:	8f 7c       	andi	r24, 0xCF	; 207
     334:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     336:	85 b1       	in	r24, 0x05	; 5
     338:	80 6e       	ori	r24, 0xE0	; 224
     33a:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     33c:	8e b1       	in	r24, 0x0e	; 14
     33e:	80 63       	ori	r24, 0x30	; 48
     340:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     342:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     344:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	USB_Init(USB_MODE_UID);
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	6a d5       	rcall	.+2772   	; 0xe1e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b2 e0       	ldi	r27, 0x02	; 2
     34e:	e2 ef       	ldi	r30, 0xF2	; 242
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	fc 93       	st	X, r31
     356:	ee 93       	st	-X, r30
					stdout = Stream;
     358:	13 96       	adiw	r26, 0x03	; 3
     35a:	fc 93       	st	X, r31
     35c:	ee 93       	st	-X, r30
     35e:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	df 01       	movw	r26, r30
     364:	1d 92       	st	X+, r1
     366:	8a 95       	dec	r24
     368:	e9 f7       	brne	.-6      	; 0x364 <SetupHardware+0x94>
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	83 83       	std	Z+3, r24	; 0x03
     36e:	83 e6       	ldi	r24, 0x63	; 99
     370:	91 e1       	ldi	r25, 0x11	; 17
     372:	91 87       	std	Z+9, r25	; 0x09
     374:	80 87       	std	Z+8, r24	; 0x08
     376:	8c e6       	ldi	r24, 0x6C	; 108
     378:	91 e1       	ldi	r25, 0x11	; 17
     37a:	93 87       	std	Z+11, r25	; 0x0b
     37c:	82 87       	std	Z+10, r24	; 0x0a
     37e:	08 95       	ret

00000380 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     380:	a7 df       	rcall	.-178    	; 0x2d0 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host/Device Demo running.\r\n" ESC_FG_WHITE));
     382:	8e ee       	ldi	r24, 0xEE	; 238
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	80 61       	ori	r24, 0x10	; 16
     390:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     392:	78 94       	sei

	for (;;)
	{
		/* Determine which USB mode we are currently in */
		if (USB_CurrentMode == USB_MODE_Host)
     394:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_CurrentMode>
     398:	82 30       	cpi	r24, 0x02	; 2
		{
			MouseHost_Task();
     39a:	11 f4       	brne	.+4      	; 0x3a0 <main+0x20>
     39c:	49 d1       	rcall	.+658    	; 0x630 <MouseHost_Task>
     39e:	04 c0       	rjmp	.+8      	; 0x3a8 <main+0x28>
			HID_Host_USBTask(&Mouse_HID_Host_Interface);
		}
		else
		{
			HID_Device_USBTask(&Mouse_HID_Device_Interface);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <HID_Device_USBTask>
		}

		USB_USBTask();
     3a8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <USB_USBTask>
	}
     3ac:	f3 cf       	rjmp	.-26     	; 0x394 <main+0x14>

000003ae <EVENT_USB_UIDChange>:

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));
     3ae:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_CurrentMode>
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	19 f0       	breq	.+6      	; 0x3bc <EVENT_USB_UIDChange+0xe>
     3b6:	82 ee       	ldi	r24, 0xE2	; 226
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <EVENT_USB_UIDChange+0x12>
     3bc:	87 ee       	ldi	r24, 0xE7	; 231
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	80 ec       	ldi	r24, 0xC0	; 192
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	0e 94 a4 11 	call	0x2348	; 0x2348 <printf_P>
     3d0:	8b b1       	in	r24, 0x0b	; 11
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	80 61       	ori	r24, 0x10	; 16
     3d6:	8b b9       	out	0x0b, r24	; 11
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	08 95       	ret

000003e2 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3e2:	29 2f       	mov	r18, r25
     3e4:	33 27       	eor	r19, r19
     3e6:	23 30       	cpi	r18, 0x03	; 3
     3e8:	31 05       	cpc	r19, r1
     3ea:	e1 f0       	breq	.+56     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3ec:	58 f4       	brcc	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ee:	21 30       	cpi	r18, 0x01	; 1
     3f0:	31 05       	cpc	r19, r1
     3f2:	99 f0       	breq	.+38     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3f4:	22 30       	cpi	r18, 0x02	; 2
     3f6:	31 05       	cpc	r19, r1
     3f8:	69 f5       	brne	.+90     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3fa:	82 e2       	ldi	r24, 0x22	; 34
     3fc:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3fe:	2a e5       	ldi	r18, 0x5A	; 90
     400:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     402:	2c c0       	rjmp	.+88     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     404:	21 32       	cpi	r18, 0x21	; 33
     406:	31 05       	cpc	r19, r1
     408:	01 f1       	breq	.+64     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     40a:	22 32       	cpi	r18, 0x22	; 34
     40c:	31 05       	cpc	r19, r1
     40e:	11 f5       	brne	.+68     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     410:	8a e3       	ldi	r24, 0x3A	; 58
     412:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     414:	2e e8       	ldi	r18, 0x8E	; 142
     416:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
     418:	21 c0       	rjmp	.+66     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     41a:	82 e1       	ldi	r24, 0x12	; 18
     41c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     41e:	2c e7       	ldi	r18, 0x7C	; 124
     420:	31 e0       	ldi	r19, 0x01	; 1
     422:	1c c0       	rjmp	.+56     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     424:	99 27       	eor	r25, r25
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	91 05       	cpc	r25, r1
     42a:	49 f0       	breq	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	28 f0       	brcs	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42e:	02 97       	sbiw	r24, 0x02	; 2
     430:	89 f4       	brne	.+34     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     432:	ea e1       	ldi	r30, 0x1A	; 26
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	05 c0       	rjmp	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     438:	e6 e5       	ldi	r30, 0x56	; 86
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     43e:	ec e3       	ldi	r30, 0x3C	; 60
     440:	f1 e0       	ldi	r31, 0x01	; 1
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     442:	84 91       	lpm	r24, Z
     444:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     446:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     448:	09 c0       	rjmp	.+18     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     44e:	2c e6       	ldi	r18, 0x6C	; 108
     450:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     452:	04 c0       	rjmp	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     45c:	fa 01       	movw	r30, r20
     45e:	31 83       	std	Z+1, r19	; 0x01
     460:	20 83       	st	Z, r18
	return Size;
}
     462:	08 95       	ret

00000464 <LEDs_SetAllLEDs>:
     464:	9b b1       	in	r25, 0x0b	; 11
     466:	9f 70       	andi	r25, 0x0F	; 15
     468:	89 2b       	or	r24, r25
     46a:	8b b9       	out	0x0b, r24	; 11
     46c:	08 95       	ret

0000046e <EVENT_USB_Device_Connect>:


/** Event handler for the library USB WakeUp event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     46e:	80 ea       	ldi	r24, 0xA0	; 160
     470:	f9 cf       	rjmp	.-14     	; 0x464 <LEDs_SetAllLEDs>

00000472 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Suspend event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	f7 cf       	rjmp	.-18     	; 0x464 <LEDs_SetAllLEDs>

00000476 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     476:	80 e6       	ldi	r24, 0x60	; 96
     478:	f5 df       	rcall	.-22     	; 0x464 <LEDs_SetAllLEDs>

	if (!(HID_Device_ConfigureEndpoints(&Mouse_HID_Device_Interface)))
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <HID_Device_ConfigureEndpoints>
     482:	81 11       	cpse	r24, r1
     484:	02 c0       	rjmp	.+4      	; 0x48a <EVENT_USB_Device_ConfigurationChanged+0x14>
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     486:	80 e9       	ldi	r24, 0x90	; 144
     488:	ed df       	rcall	.-38     	; 0x464 <LEDs_SetAllLEDs>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     48a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     48e:	84 60       	ori	r24, 0x04	; 4
     490:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     494:	08 95       	ret

00000496 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Device_Interface);
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <HID_Device_ProcessControlRequest>

0000049e <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     49e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     4a2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	29 f0       	breq	.+10     	; 0x4b4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     4b0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     4b4:	08 95       	ret

000004b6 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     4bc:	83 b1       	in	r24, 0x03	; 3
     4be:	9c b1       	in	r25, 0x0c	; 12
     4c0:	90 95       	com	r25
     4c2:	90 73       	andi	r25, 0x30	; 48
     4c4:	96 95       	lsr	r25
     4c6:	80 95       	com	r24
     4c8:	80 7e       	andi	r24, 0xE0	; 224
     4ca:	89 2b       	or	r24, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     4cc:	9c b1       	in	r25, 0x0c	; 12
     4ce:	90 95       	com	r25
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     4d0:	87 ff       	sbrs	r24, 7
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <CALLBACK_HID_Device_CreateHIDReport+0x22>
	  MouseReport->Y = -1;
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <CALLBACK_HID_Device_CreateHIDReport+0x28>
	else if (JoyStatus_LCL & JOY_DOWN)
     4d8:	84 ff       	sbrs	r24, 4
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
	  MouseReport->Y =  1;
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_RIGHT)
     4e0:	83 ff       	sbrs	r24, 3
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	  MouseReport->X =  1;
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <CALLBACK_HID_Device_CreateHIDReport+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
     4e8:	86 ff       	sbrs	r24, 6
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->X = -1;
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	21 83       	std	Z+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     4f0:	85 ff       	sbrs	r24, 5
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  MouseReport->Button |= (1 << 0);
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 83       	st	Z, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     4fa:	92 ff       	sbrs	r25, 2
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  MouseReport->Button |= (1 << 1);
     4fe:	80 81       	ld	r24, Z
     500:	82 60       	ori	r24, 0x02	; 2
     502:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	f8 01       	movw	r30, r16
     50a:	91 83       	std	Z+1, r25	; 0x01
     50c:	80 83       	st	Z, r24
	return true;
}
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     516:	08 95       	ret

00000518 <LEDs_SetAllLEDs>:
     518:	9b b1       	in	r25, 0x0b	; 11
     51a:	9f 70       	andi	r25, 0x0F	; 15
     51c:	89 2b       	or	r24, r25
     51e:	8b b9       	out	0x0b, r24	; 11
     520:	08 95       	ret

00000522 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     522:	8e e7       	ldi	r24, 0x7E	; 126
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     52a:	80 ea       	ldi	r24, 0xA0	; 160
     52c:	f5 cf       	rjmp	.-22     	; 0x518 <LEDs_SetAllLEDs>

0000052e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     52e:	87 e6       	ldi	r24, 0x67	; 103
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	ef cf       	rjmp	.-34     	; 0x518 <LEDs_SetAllLEDs>

0000053a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{	
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	c2 50       	subi	r28, 0x02	; 2
     544:	d2 40       	sbci	r29, 0x02	; 2
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     550:	80 ea       	ldi	r24, 0xA0	; 160
     552:	e2 df       	rcall	.-60     	; 0x518 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	32 e0       	ldi	r19, 0x02	; 2
     558:	ae 01       	movw	r20, r28
     55a:	4f 5f       	subi	r20, 0xFF	; 255
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
     55e:	be 01       	movw	r22, r28
     560:	6f 5f       	subi	r22, 0xFF	; 255
     562:	7d 4f       	sbci	r23, 0xFD	; 253
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 d7       	rcall	.+3872   	; 0x1488 <USB_Host_GetDeviceConfigDescriptor>
     568:	88 23       	and	r24, r24
     56a:	19 f0       	breq	.+6      	; 0x572 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		printf("Error Retrieving Configuration Descriptor.\r\n");
     56c:	81 e3       	ldi	r24, 0x31	; 49
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	22 c0       	rjmp	.+68     	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Host_Interface,
     572:	cf 5f       	subi	r28, 0xFF	; 255
     574:	dd 4f       	sbci	r29, 0xFD	; 253
     576:	68 81       	ld	r22, Y
     578:	79 81       	ldd	r23, Y+1	; 0x01
     57a:	c1 50       	subi	r28, 0x01	; 1
     57c:	d2 40       	sbci	r29, 0x02	; 2
     57e:	ae 01       	movw	r20, r28
     580:	4f 5f       	subi	r20, 0xFF	; 255
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	8d e0       	ldi	r24, 0x0D	; 13
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <HID_Host_ConfigurePipes>
     58c:	88 23       	and	r24, r24
     58e:	19 f0       	breq	.+6      	; 0x596 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		printf("Attached Device Not a Valid Mouse.\r\n");
     590:	8d e5       	ldi	r24, 0x5D	; 93
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	10 c0       	rjmp	.+32     	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <USB_Host_SetDeviceConfiguration>
     59c:	88 23       	and	r24, r24
     59e:	19 f0       	breq	.+6      	; 0x5a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
	{
		printf("Error Setting Device Configuration.\r\n");
     5a0:	81 e8       	ldi	r24, 0x81	; 129
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Host_Interface) != HOST_SENDCONTROL_Successful)
     5a6:	8d e0       	ldi	r24, 0x0D	; 13
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 37 11 	call	0x226e	; 0x226e <HID_Host_SetBootProtocol>
     5ae:	88 23       	and	r24, r24
     5b0:	31 f0       	breq	.+12     	; 0x5be <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
	{
		printf("Could not Set Boot Protocol Mode.\r\n");
     5b2:	86 ea       	ldi	r24, 0xA6	; 166
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 cb 11 	call	0x2396	; 0x2396 <puts>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5ba:	80 e9       	ldi	r24, 0x90	; 144
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
		return;
	}

	printf("Mouse Enumerated.\r\n");
     5be:	89 ec       	ldi	r24, 0xC9	; 201
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 cb 11 	call	0x2396	; 0x2396 <puts>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5c6:	80 e6       	ldi	r24, 0x60	; 96
     5c8:	a7 df       	rcall	.-178    	; 0x518 <LEDs_SetAllLEDs>
}
     5ca:	ce 5f       	subi	r28, 0xFE	; 254
     5cc:	dd 4f       	sbci	r29, 0xFD	; 253
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     5de:	c8 2f       	mov	r28, r24
	USB_Disable();
     5e0:	75 d3       	rcall	.+1770   	; 0xccc <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5e2:	1f 92       	push	r1
     5e4:	cf 93       	push	r28
     5e6:	88 e3       	ldi	r24, 0x38	; 56
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 a4 11 	call	0x2348	; 0x2348 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5f2:	80 e9       	ldi	r24, 0x90	; 144
     5f4:	91 df       	rcall	.-222    	; 0x518 <LEDs_SetAllLEDs>
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	ff cf       	rjmp	.-2      	; 0x5fe <EVENT_USB_Host_HostError+0x20>

00000600 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     600:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <USB_HostState>
     604:	1f 92       	push	r1
     606:	9f 93       	push	r25
     608:	1f 92       	push	r1
     60a:	6f 93       	push	r22
     60c:	1f 92       	push	r1
     60e:	8f 93       	push	r24
     610:	82 ee       	ldi	r24, 0xE2	; 226
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	0e 94 a4 11 	call	0x2348	; 0x2348 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     61c:	8d b7       	in	r24, 0x3d	; 61
     61e:	9e b7       	in	r25, 0x3e	; 62
     620:	08 96       	adiw	r24, 0x08	; 8
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	9e bf       	out	0x3e, r25	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	8d bf       	out	0x3d, r24	; 61
     62c:	80 e9       	ldi	r24, 0x90	; 144
     62e:	74 cf       	rjmp	.-280    	; 0x518 <LEDs_SetAllLEDs>

00000630 <MouseHost_Task>:

/** Host USB management task. This task handles the control of USB Mice while in USB Host mode,
 *  setting up the appropriate data pipes and processing reports from the attached device.
 */
void MouseHost_Task(void)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <MouseHost_Task+0x6>
     636:	1f 92       	push	r1
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     63c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <USB_HostState>
     640:	8b 30       	cpi	r24, 0x0B	; 11
     642:	09 f0       	breq	.+2      	; 0x646 <MouseHost_Task+0x16>
     644:	3e c0       	rjmp	.+124    	; 0x6c2 <MouseHost_Task+0x92>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
     646:	8d e0       	ldi	r24, 0x0D	; 13
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 1c 11 	call	0x2238	; 0x2238 <HID_Host_IsReportReceived>
     64e:	88 23       	and	r24, r24
     650:	c1 f1       	breq	.+112    	; 0x6c2 <MouseHost_Task+0x92>
	{
		uint8_t LEDMask  = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Host_Interface, &MouseReport);
     652:	be 01       	movw	r22, r28
     654:	6f 5f       	subi	r22, 0xFF	; 255
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	8d e0       	ldi	r24, 0x0D	; 13
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	1f 92       	push	r1
     664:	8f 93       	push	r24
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	28 2f       	mov	r18, r24
     66a:	08 2e       	mov	r0, r24
     66c:	00 0c       	add	r0, r0
     66e:	33 0b       	sbc	r19, r19
     670:	3f 93       	push	r19
     672:	8f 93       	push	r24
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	28 2f       	mov	r18, r24
     678:	08 2e       	mov	r0, r24
     67a:	00 0c       	add	r0, r0
     67c:	33 0b       	sbc	r19, r19
     67e:	3f 93       	push	r19
     680:	8f 93       	push	r24
     682:	88 ec       	ldi	r24, 0xC8	; 200
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	0e 94 a4 11 	call	0x2348	; 0x2348 <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	18 16       	cp	r1, r24
     69c:	24 f0       	brlt	.+8      	; 0x6a6 <MouseHost_Task+0x76>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     69e:	88 23       	and	r24, r24
     6a0:	21 f0       	breq	.+8      	; 0x6aa <MouseHost_Task+0x7a>
		  LEDMask |= LEDS_LED2;
     6a2:	80 e2       	ldi	r24, 0x20	; 32
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <MouseHost_Task+0x7c>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     6a6:	80 e1       	ldi	r24, 0x10	; 16
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <MouseHost_Task+0x7c>
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
	{
		uint8_t LEDMask  = LEDS_NO_LEDS;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;

		if (MouseReport.Y > 0)
     6ac:	9b 81       	ldd	r25, Y+3	; 0x03
     6ae:	19 16       	cp	r1, r25
     6b0:	14 f4       	brge	.+4      	; 0x6b6 <MouseHost_Task+0x86>
		  LEDMask |= LEDS_LED3;
     6b2:	80 68       	ori	r24, 0x80	; 128
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <MouseHost_Task+0x8a>
		else if (MouseReport.Y < 0)
     6b6:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     6b8:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     6ba:	99 81       	ldd	r25, Y+1	; 0x01
     6bc:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     6be:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     6c0:	2b df       	rcall	.-426    	; 0x518 <LEDs_SetAllLEDs>
	}
}
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     6ce:	98 2f       	mov	r25, r24
     6d0:	97 30       	cpi	r25, 0x07	; 7
     6d2:	68 f5       	brcc	.+90     	; 0x72e <Endpoint_ConfigureEndpoint_Prv+0x60>
     6d4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     6d8:	98 17       	cp	r25, r24
     6da:	39 f0       	breq	.+14     	; 0x6ea <Endpoint_ConfigureEndpoint_Prv+0x1c>
     6dc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     6e0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     6e4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x22>
     6ea:	24 2f       	mov	r18, r20
     6ec:	76 2f       	mov	r23, r22
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	21 fd       	sbrc	r18, 1
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     6f4:	9f 5f       	subi	r25, 0xFF	; 255
     6f6:	ec cf       	rjmp	.-40     	; 0x6d0 <Endpoint_ConfigureEndpoint_Prv+0x2>
     6f8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     6fc:	3e 7f       	andi	r19, 0xFE	; 254
     6fe:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     702:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     706:	3d 7f       	andi	r19, 0xFD	; 253
     708:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     70c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     710:	31 60       	ori	r19, 0x01	; 1
     712:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     716:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     71a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     71e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     722:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     726:	27 fd       	sbrc	r18, 7
     728:	e5 cf       	rjmp	.-54     	; 0x6f4 <Endpoint_ConfigureEndpoint_Prv+0x26>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
     72e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	08 95       	ret

00000736 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     736:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     73a:	87 ff       	sbrs	r24, 7
     73c:	11 c0       	rjmp	.+34     	; 0x760 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     73e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     742:	82 fd       	sbrc	r24, 2
     744:	05 c0       	rjmp	.+10     	; 0x750 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     746:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
     74a:	81 11       	cpse	r24, r1
     74c:	f8 cf       	rjmp	.-16     	; 0x73e <Endpoint_ClearStatusStage+0x8>
     74e:	11 c0       	rjmp	.+34     	; 0x772 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     750:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     754:	8b 77       	andi	r24, 0x7B	; 123
     756:	0b c0       	rjmp	.+22     	; 0x76e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     758:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
     75c:	88 23       	and	r24, r24
     75e:	49 f0       	breq	.+18     	; 0x772 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     760:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     764:	80 ff       	sbrs	r24, 0
     766:	f8 cf       	rjmp	.-16     	; 0x758 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     768:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     76c:	8e 77       	andi	r24, 0x7E	; 126
     76e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     772:	08 95       	ret

00000774 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     774:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     778:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     77c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     77e:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     782:	84 2f       	mov	r24, r20
     784:	81 70       	andi	r24, 0x01	; 1
     786:	40 ff       	sbrs	r20, 0
     788:	23 c0       	rjmp	.+70     	; 0x7d0 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     78a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     78e:	80 fd       	sbrc	r24, 0
     790:	1d c0       	rjmp	.+58     	; 0x7cc <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     792:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     796:	88 23       	and	r24, r24
     798:	99 f0       	breq	.+38     	; 0x7c0 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     79a:	85 30       	cpi	r24, 0x05	; 5
     79c:	99 f0       	breq	.+38     	; 0x7c4 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     79e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7a2:	85 fd       	sbrc	r24, 5
     7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <Endpoint_WaitUntilReady+0x54>
     7a6:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     7aa:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7ae:	24 17       	cp	r18, r20
     7b0:	35 07       	cpc	r19, r21
     7b2:	29 f3       	breq	.-54     	; 0x77e <Endpoint_WaitUntilReady+0xa>
     7b4:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7b6:	11 f0       	breq	.+4      	; 0x7bc <Endpoint_WaitUntilReady+0x48>
     7b8:	9a 01       	movw	r18, r20
     7ba:	e1 cf       	rjmp	.-62     	; 0x77e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7d0:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7d4:	42 ff       	sbrs	r20, 2
     7d6:	dd cf       	rjmp	.-70     	; 0x792 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     7d8:	08 95       	ret

000007da <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7da:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7de:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7e0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7e4:	9d 7f       	andi	r25, 0xFD	; 253
     7e6:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7ea:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7ee:	92 60       	ori	r25, 0x02	; 2
     7f0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7f4:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7f8:	91 fd       	sbrc	r25, 1
     7fa:	fc cf       	rjmp	.-8      	; 0x7f4 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7fc:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     800:	91 60       	ori	r25, 0x01	; 1
     802:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     806:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     80a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     80e:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     810:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     814:	2f 7d       	andi	r18, 0xDF	; 223
     816:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     81a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     81e:	2f 7d       	andi	r18, 0xDF	; 223
     820:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     824:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     826:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     82a:	35 ff       	sbrs	r19, 5
     82c:	0b c0       	rjmp	.+22     	; 0x844 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     82e:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     832:	2f 7d       	andi	r18, 0xDF	; 223
     834:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     838:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     83c:	2d 7f       	andi	r18, 0xFD	; 253
     83e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     842:	08 c0       	rjmp	.+16     	; 0x854 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     844:	ef ec       	ldi	r30, 0xCF	; 207
     846:	f7 e0       	ldi	r31, 0x07	; 7
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <USB_Host_ResetDevice+0x6e>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <USB_Host_ResetDevice+0x74>
     84e:	00 00       	nop
     850:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     852:	49 f7       	brne	.-46     	; 0x826 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     854:	99 23       	and	r25, r25
     856:	29 f0       	breq	.+10     	; 0x862 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     858:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     85c:	90 62       	ori	r25, 0x20	; 32
     85e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     862:	81 11       	cpse	r24, r1
     864:	05 c0       	rjmp	.+10     	; 0x870 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     866:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     86a:	8e 7f       	andi	r24, 0xFE	; 254
     86c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     870:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     874:	82 60       	ori	r24, 0x02	; 2
     876:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     87a:	08 95       	ret

0000087c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     87c:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     880:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     882:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     886:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     888:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     88c:	3f 7d       	andi	r19, 0xDF	; 223
     88e:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     892:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     896:	3f 7d       	andi	r19, 0xDF	; 223
     898:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     89c:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8a0:	31 60       	ori	r19, 0x01	; 1
     8a2:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8a6:	88 23       	and	r24, r24
     8a8:	59 f1       	breq	.+86     	; 0x900 <USB_Host_WaitMS+0x84>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8aa:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8ae:	35 ff       	sbrs	r19, 5
     8b0:	06 c0       	rjmp	.+12     	; 0x8be <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8b2:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     8b6:	3f 7d       	andi	r19, 0xDF	; 223
     8b8:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     8bc:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     8be:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <USB_HostState>
     8c2:	31 30       	cpi	r19, 0x01	; 1
     8c4:	e1 f0       	breq	.+56     	; 0x8fe <USB_Host_WaitMS+0x82>
     8c6:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <USB_CurrentMode>
     8ca:	32 30       	cpi	r19, 0x02	; 2
     8cc:	c1 f4       	brne	.+48     	; 0x8fe <USB_Host_WaitMS+0x82>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     8ce:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     8d2:	34 ff       	sbrs	r19, 4
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <USB_Host_WaitMS+0x6c>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     8d6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     8da:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     8de:	8f 7e       	andi	r24, 0xEF	; 239
     8e0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     8e4:	82 e0       	ldi	r24, 0x02	; 2

			break;
     8e6:	0c c0       	rjmp	.+24     	; 0x900 <USB_Host_WaitMS+0x84>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     8e8:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     8ec:	31 ff       	sbrs	r19, 1
     8ee:	db cf       	rjmp	.-74     	; 0x8a6 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8f0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     8f4:	8d 7f       	andi	r24, 0xFD	; 253
     8f6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     8fa:	83 e0       	ldi	r24, 0x03	; 3

			break;
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <USB_Host_WaitMS+0x84>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     8fe:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     900:	21 11       	cpse	r18, r1
     902:	05 c0       	rjmp	.+10     	; 0x90e <USB_Host_WaitMS+0x92>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     904:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     908:	2e 7f       	andi	r18, 0xFE	; 254
     90a:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     90e:	99 23       	and	r25, r25
     910:	29 f0       	breq	.+10     	; 0x91c <USB_Host_WaitMS+0xa0>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     912:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     916:	90 62       	ori	r25, 0x20	; 32
     918:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     91c:	08 95       	ret

0000091e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     91e:	ef 92       	push	r14
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	28 97       	sbiw	r28, 0x08	; 8
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     938:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <USB_HostState>
     93c:	8e 2f       	mov	r24, r30
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	8a 30       	cpi	r24, 0x0A	; 10
     942:	91 05       	cpc	r25, r1
     944:	08 f0       	brcs	.+2      	; 0x948 <USB_Host_ProcessNextHostState+0x2a>
     946:	f6 c0       	rjmp	.+492    	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
     948:	fc 01       	movw	r30, r24
     94a:	e4 5b       	subi	r30, 0xB4	; 180
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     952:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <WaitMSRemaining.3390>
     956:	10 91 e1 01 	lds	r17, 0x01E1	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     95a:	01 15       	cp	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	09 f4       	brne	.+2      	; 0x962 <USB_Host_ProcessNextHostState+0x44>
     960:	e9 c0       	rjmp	.+466    	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	8b df       	rcall	.-234    	; 0x87c <USB_Host_WaitMS>
     966:	88 23       	and	r24, r24
     968:	31 f0       	breq	.+12     	; 0x976 <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     96a:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <PostWaitState.3391>
     96e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     972:	91 e0       	ldi	r25, 0x01	; 1
					break;
     974:	d1 c0       	rjmp	.+418    	; 0xb18 <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     976:	01 50       	subi	r16, 0x01	; 1
     978:	11 09       	sbc	r17, r1
     97a:	10 93 e1 01 	sts	0x01E1, r17	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     97e:	00 93 e0 01 	sts	0x01E0, r16	; 0x8001e0 <WaitMSRemaining.3390>
     982:	01 2b       	or	r16, r17
     984:	09 f0       	breq	.+2      	; 0x988 <USB_Host_ProcessNextHostState+0x6a>
     986:	d6 c0       	rjmp	.+428    	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     988:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <PostWaitState.3391>
     98c:	07 c0       	rjmp	.+14     	; 0x99c <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     98e:	88 ee       	ldi	r24, 0xE8	; 232
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     996:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <WaitMSRemaining.3390>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <USB_HostState>
			break;
     9a0:	c9 c0       	rjmp	.+402    	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     9a2:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <WaitMSRemaining.3390>
     9a6:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     9aa:	9c 01       	movw	r18, r24
     9ac:	21 50       	subi	r18, 0x01	; 1
     9ae:	31 09       	sbc	r19, r1
     9b0:	30 93 e1 01 	sts	0x01E1, r19	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     9b4:	20 93 e0 01 	sts	0x01E0, r18	; 0x8001e0 <WaitMSRemaining.3390>
     9b8:	89 2b       	or	r24, r25
     9ba:	39 f0       	breq	.+14     	; 0x9ca <USB_Host_ProcessNextHostState+0xac>
     9bc:	8f ec       	ldi	r24, 0xCF	; 207
     9be:	97 e0       	ldi	r25, 0x07	; 7
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <USB_Host_ProcessNextHostState+0xa2>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <USB_Host_ProcessNextHostState+0xa8>
     9c6:	00 00       	nop
     9c8:	b5 c0       	rjmp	.+362    	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     9ca:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     9cc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     9d0:	80 61       	ori	r24, 0x10	; 16
     9d2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9d6:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9da:	8b 7f       	andi	r24, 0xFB	; 251
     9dc:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     9e0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     9e4:	80 61       	ori	r24, 0x10	; 16
     9e6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9ea:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	d2 cf       	rjmp	.-92     	; 0x99c <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9f8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9fc:	80 ff       	sbrs	r24, 0
     9fe:	9a c0       	rjmp	.+308    	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a00:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a0a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a0e:	8d 7f       	andi	r24, 0xFD	; 253
     a10:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a14:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     a18:	8d 7f       	andi	r24, 0xFD	; 253
     a1a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a1e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a28:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a32:	e8 d0       	rcall	.+464    	; 0xc04 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a34:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <USB_HostState>
     a38:	84 e6       	ldi	r24, 0x64	; 100
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     a40:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <WaitMSRemaining.3390>
     a44:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a46:	5c c0       	rjmp	.+184    	; 0xb00 <USB_Host_ProcessNextHostState+0x1e2>
     a48:	c8 de       	rcall	.-624    	; 0x7da <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a4a:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <USB_HostState>
     a4e:	88 ec       	ldi	r24, 0xC8	; 200
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     a56:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <WaitMSRemaining.3390>
     a5a:	86 e0       	ldi	r24, 0x06	; 6
     a5c:	51 c0       	rjmp	.+162    	; 0xb00 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a5e:	e1 2c       	mov	r14, r1
     a60:	00 e4       	ldi	r16, 0x40	; 64
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	6f d0       	rcall	.+222    	; 0xb4c <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a6e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a72:	87 fd       	sbrc	r24, 7
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a76:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	4e c0       	rjmp	.+156    	; 0xb18 <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a7c:	87 e0       	ldi	r24, 0x07	; 7
     a7e:	8e cf       	rjmp	.-228    	; 0x99c <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	e1 e2       	ldi	r30, 0x21	; 33
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	a9 ee       	ldi	r26, 0xE9	; 233
     a88:	b1 e0       	ldi	r27, 0x01	; 1
     a8a:	01 90       	ld	r0, Z+
     a8c:	0d 92       	st	X+, r0
     a8e:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a90:	e1 f7       	brne	.-8      	; 0xa8a <USB_Host_ProcessNextHostState+0x16c>
     a92:	ce 01       	movw	r24, r28
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	ff d6       	rcall	.+3582   	; 0x1896 <USB_Host_SendControlRequest>
     a98:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a9a:	3d c0       	rjmp	.+122    	; 0xb16 <USB_Host_ProcessNextHostState+0x1f8>
     a9c:	88 85       	ldd	r24, Y+8	; 0x08
     a9e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     aa2:	9b de       	rcall	.-714    	; 0x7da <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     aa4:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <USB_HostState>
     aa8:	88 ec       	ldi	r24, 0xC8	; 200
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     ab0:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <WaitMSRemaining.3390>
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	24 c0       	rjmp	.+72     	; 0xb00 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     ab8:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <USB_Host_ControlPipeSize>
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	e1 2c       	mov	r14, r1
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	41 d0       	rcall	.+130    	; 0xb4c <Pipe_ConfigurePipe>
     aca:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     ace:	87 ff       	sbrs	r24, 7
     ad0:	d2 cf       	rjmp	.-92     	; 0xa76 <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	e9 e2       	ldi	r30, 0x29	; 41
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	a9 ee       	ldi	r26, 0xE9	; 233
     ada:	b1 e0       	ldi	r27, 0x01	; 1
     adc:	01 90       	ld	r0, Z+
     ade:	0d 92       	st	X+, r0
     ae0:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ae2:	e1 f7       	brne	.-8      	; 0xadc <USB_Host_ProcessNextHostState+0x1be>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	d6 d6       	rcall	.+3500   	; 0x1896 <USB_Host_SendControlRequest>
     aea:	81 11       	cpse	r24, r1
     aec:	14 c0       	rjmp	.+40     	; 0xb16 <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     aee:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <USB_HostState>
     af2:	84 e6       	ldi	r24, 0x64	; 100
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <WaitMSRemaining.3390+0x1>
     afa:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <WaitMSRemaining.3390>
     afe:	89 e0       	ldi	r24, 0x09	; 9
     b00:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <PostWaitState.3391>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b04:	17 c0       	rjmp	.+46     	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     b12:	13 dd       	rcall	.-1498   	; 0x53a <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b14:	0f c0       	rjmp	.+30     	; 0xb34 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b1c:	21 30       	cpi	r18, 0x01	; 1
     b1e:	51 f0       	breq	.+20     	; 0xb34 <USB_Host_ProcessNextHostState+0x216>
     b20:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b22:	89 2f       	mov	r24, r25
     b24:	6d dd       	rcall	.-1318   	; 0x600 <EVENT_USB_Host_DeviceEnumerationFailed>
     b26:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b2a:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b2c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     b30:	fe dc       	rcall	.-1540   	; 0x52e <EVENT_USB_Host_DeviceUnattached>
     b32:	e6 d0       	rcall	.+460    	; 0xd00 <USB_ResetInterface>
	}
}
     b34:	28 96       	adiw	r28, 0x08	; 8
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ef 90       	pop	r14
     b4a:	08 95       	ret

00000b4c <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b4c:	ef 92       	push	r14
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b52:	2f 70       	andi	r18, 0x0F	; 15
     b54:	42 2b       	or	r20, r18
     b56:	90 e4       	ldi	r25, 0x40	; 64
     b58:	69 9f       	mul	r22, r25
     b5a:	b0 01       	movw	r22, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b60:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b62:	2e 2d       	mov	r18, r14
     b64:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b66:	37 30       	cpi	r19, 0x07	; 7
     b68:	08 f0       	brcs	.+2      	; 0xb6c <Pipe_ConfigurePipe+0x20>
     b6a:	45 c0       	rjmp	.+138    	; 0xbf6 <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b6c:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     b70:	38 13       	cpse	r19, r24
     b72:	13 c0       	rjmp	.+38     	; 0xb9a <Pipe_ConfigurePipe+0x4e>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b7a:	40 17       	cp	r20, r16
     b7c:	51 07       	cpc	r21, r17
     b7e:	38 f0       	brcs	.+14     	; 0xb8e <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b80:	92 95       	swap	r25
     b82:	90 7f       	andi	r25, 0xF0	; 240
     b84:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b86:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b88:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <Pipe_ConfigurePipe+0x5e>
     b8e:	95 30       	cpi	r25, 0x05	; 5
     b90:	b9 f3       	breq	.-18     	; 0xb80 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     b92:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     b94:	44 0f       	add	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	f0 cf       	rjmp	.-32     	; 0xb7a <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b9a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     b9e:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     ba2:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     ba6:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     baa:	91 fd       	sbrc	r25, 1
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     bae:	3f 5f       	subi	r19, 0xFF	; 255
     bb0:	da cf       	rjmp	.-76     	; 0xb66 <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bb2:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bb6:	4e 7f       	andi	r20, 0xFE	; 254
     bb8:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     bbc:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     bc0:	4d 7f       	andi	r20, 0xFD	; 253
     bc2:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     bc6:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bca:	41 60       	ori	r20, 0x01	; 1
     bcc:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     bd0:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     bd4:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     bd8:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     bdc:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     be0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     be4:	90 62       	ori	r25, 0x20	; 32
     be6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bea:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     bee:	97 fd       	sbrc	r25, 7
     bf0:	de cf       	rjmp	.-68     	; 0xbae <Pipe_ConfigurePipe+0x62>
		  return false;		
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     bf6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c04:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c0e:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     c12:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     c16:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c1a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c1e:	9e 7f       	andi	r25, 0xFE	; 254
     c20:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	87 30       	cpi	r24, 0x07	; 7
     c28:	81 f7       	brne	.-32     	; 0xc0a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c2a:	08 95       	ret

00000c2c <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     c2c:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     c30:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c32:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c34:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c38:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     c3c:	27 ff       	sbrs	r18, 7
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c40:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     c44:	42 2f       	mov	r20, r18
     c46:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c48:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c4c:	20 73       	andi	r18, 0x30	; 48
     c4e:	20 31       	cpi	r18, 0x10	; 16
     c50:	11 f0       	breq	.+4      	; 0xc56 <Pipe_IsEndpointBound+0x2a>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <Pipe_IsEndpointBound+0x2c>
     c56:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     c58:	24 2b       	or	r18, r20
     c5a:	82 17       	cp	r24, r18
     c5c:	39 f0       	breq	.+14     	; 0xc6c <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c5e:	9f 5f       	subi	r25, 0xFF	; 255
     c60:	97 30       	cpi	r25, 0x07	; 7
     c62:	41 f7       	brne	.-48     	; 0xc34 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c64:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c6e:	08 95       	ret

00000c70 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c70:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     c74:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     c78:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c7a:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c7e:	90 73       	andi	r25, 0x30	; 48
     c80:	90 31       	cpi	r25, 0x10	; 16
     c82:	29 f4       	brne	.+10     	; 0xc8e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c84:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     c88:	90 ff       	sbrs	r25, 0
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <Pipe_WaitUntilReady+0x26>
     c8c:	19 c0       	rjmp	.+50     	; 0xcc0 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c8e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c92:	92 fd       	sbrc	r25, 2
     c94:	15 c0       	rjmp	.+42     	; 0xcc0 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c96:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c9a:	91 fd       	sbrc	r25, 1
     c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c9e:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <USB_HostState>
     ca2:	91 30       	cpi	r25, 0x01	; 1
     ca4:	89 f0       	breq	.+34     	; 0xcc8 <Pipe_WaitUntilReady+0x58>
     ca6:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     caa:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cae:	42 17       	cp	r20, r18
     cb0:	53 07       	cpc	r21, r19
     cb2:	19 f3       	breq	.-58     	; 0xc7a <Pipe_WaitUntilReady+0xa>
     cb4:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cb6:	11 f0       	breq	.+4      	; 0xcbc <Pipe_WaitUntilReady+0x4c>
     cb8:	a9 01       	movw	r20, r18
     cba:	df cf       	rjmp	.-66     	; 0xc7a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     cc8:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     cca:	08 95       	ret

00000ccc <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ccc:	cc d0       	rcall	.+408    	; 0xe66 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cce:	d7 d0       	rcall	.+430    	; 0xe7e <USB_INT_ClearAllInterrupts>
     cd0:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	80 83       	st	Z, r24
     cda:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8f 77       	andi	r24, 0x7F	; 127
     ce2:	80 83       	st	Z, r24
     ce4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ce6:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	8c 91       	ld	r24, X
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	8c 93       	st	X, r24
     cf0:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
     cf4:	80 83       	st	Z, r24
     cf6:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <USB_CurrentMode>
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
	#endif

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
     cfa:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <USB_IsInitialized>
	#endif

	USB_IsInitialized = false;
     cfe:	08 95       	ret

00000d00 <USB_ResetInterface>:
     d00:	cf 93       	push	r28
}

void USB_ResetInterface(void)
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
     d02:	c0 91 d7 00 	lds	r28, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	#endif

	USB_INT_DisableAllInterrupts();
     d06:	af d0       	rcall	.+350    	; 0xe66 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d08:	ba d0       	rcall	.+372    	; 0xe7e <USB_INT_ClearAllInterrupts>
     d0a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d0e:	8f 77       	andi	r24, 0x7F	; 127
     d10:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d14:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d1e:	c6 ff       	sbrs	r28, 6

	USB_Controller_Reset();

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <USB_ResetInterface+0x2c>
     d22:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d2c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     d30:	8f 7d       	andi	r24, 0xDF	; 223
     d32:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d36:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_CurrentMode>
	  USB_INT_Enable(USB_INT_IDTI);
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	61 f5       	brne	.+88     	; 0xd96 <USB_ResetInterface+0x96>
     d3e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     d48:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d4a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     d4e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     d52:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     d56:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     d5a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     d64:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d6e:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	ac dc       	rcall	.-1704   	; 0x6ce <Endpoint_ConfigureEndpoint_Prv>
     d76:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d80:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d8a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     d8e:	88 60       	ori	r24, 0x08	; 8
     d90:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d94:	38 c0       	rjmp	.+112    	; 0xe06 <USB_ResetInterface+0x106>
     d96:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_CurrentMode>
		}

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	c9 f5       	brne	.+114    	; 0xe10 <USB_ResetInterface+0x110>
     d9e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     da2:	8f 77       	andi	r24, 0x7F	; 127
     da4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     da8:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     daa:	89 bd       	out	0x29, r24	; 41
     dac:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dae:	89 bd       	out	0x29, r24	; 41
     db0:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     db2:	00 fe       	sbrs	r0, 0
     db4:	fd cf       	rjmp	.-6      	; 0xdb0 <USB_ResetInterface+0xb0>
     db6:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     db8:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <USB_HostState>
     dbc:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     dc0:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     dc2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_Host_ControlPipeSize>
     dc6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     dca:	80 64       	ori	r24, 0x40	; 64
     dcc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dd0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     dda:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     dde:	84 60       	ori	r24, 0x04	; 4
     de0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     de4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     de8:	8f 7e       	andi	r24, 0xEF	; 239
     dea:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     dee:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     df0:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     df2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     dfc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e00:	84 60       	ori	r24, 0x04	; 4
     e02:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e06:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     e10:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e1a:	cf 91       	pop	r28
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e1c:	08 95       	ret

00000e1e <USB_Init>:
     e1e:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e22:	91 60       	ori	r25, 0x01	; 1
     e24:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif
	}

	#if defined(USB_CAN_BE_BOTH)
	if (Mode == USB_MODE_UID)
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 f4       	brne	.+36     	; 0xe50 <USB_Init+0x32>
	{
		UHWCON |=  (1 << UIDE);
     e2c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e30:	80 64       	ori	r24, 0x40	; 64
     e32:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
     e36:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
     e40:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     e44:	81 fd       	sbrc	r24, 1
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <USB_Init+0x2e>
				  return USB_MODE_Device;
				else
				  return USB_MODE_Host;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <USB_Init+0x3c>
			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
				  return USB_MODE_Device;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <USB_Init+0x3c>
		USB_INT_Enable(USB_INT_IDTI);
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	else
	{
		UHWCON &= ~(1 << UIDE);
     e50:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e54:	9f 7b       	andi	r25, 0xBF	; 191
     e56:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		USB_CurrentMode = Mode;
     e5a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_CurrentMode>
	}
	#endif

	USB_IsInitialized = true;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <USB_IsInitialized>

	USB_ResetInterface();
     e64:	4d cf       	rjmp	.-358    	; 0xd00 <USB_ResetInterface>

00000e66 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e66:	e8 ed       	ldi	r30, 0xD8	; 216
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8c 7f       	andi	r24, 0xFC	; 252
     e6e:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
     e70:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e74:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e78:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e7c:	08 95       	ret

00000e7e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e7e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
     e82:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e86:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e8a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e8e:	08 95       	ret

00000e90 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	0b b6       	in	r0, 0x3b	; 59
     e9c:	0f 92       	push	r0
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     eb6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     eba:	82 ff       	sbrs	r24, 2
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ebe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ec2:	82 ff       	sbrs	r24, 2
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ec6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     eca:	8b 7f       	andi	r24, 0xFB	; 251
     ecc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ed0:	e6 da       	rcall	.-2612   	; 0x49e <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ed2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ed6:	80 ff       	sbrs	r24, 0
     ed8:	1d c0       	rjmp	.+58     	; 0xf14 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     eda:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ede:	80 ff       	sbrs	r24, 0
     ee0:	19 c0       	rjmp	.+50     	; 0xf14 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ee2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     eec:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	0c c0       	rjmp	.+24     	; 0xf0c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ef8:	8e e0       	ldi	r24, 0x0E	; 14
     efa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     efc:	09 b4       	in	r0, 0x29	; 41
     efe:	00 fe       	sbrs	r0, 0
     f00:	fd cf       	rjmp	.-6      	; 0xefc <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     f08:	b2 da       	rcall	.-2716   	; 0x46e <EVENT_USB_Device_Connect>
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f0c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     f0e:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     f12:	af da       	rcall	.-2722   	; 0x472 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f14:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f18:	80 ff       	sbrs	r24, 0
     f1a:	18 c0       	rjmp	.+48     	; 0xf4c <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f20:	80 ff       	sbrs	r24, 0
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     f38:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f42:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     f44:	85 e0       	ldi	r24, 0x05	; 5
     f46:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     f4a:	7e d4       	rcall	.+2300   	; 0x1848 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f4c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f50:	84 ff       	sbrs	r24, 4
     f52:	2d c0       	rjmp	.+90     	; 0xfae <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f58:	84 ff       	sbrs	r24, 4
     f5a:	29 c0       	rjmp	.+82     	; 0xfae <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f60:	8e e0       	ldi	r24, 0x0E	; 14
     f62:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f64:	09 b4       	in	r0, 0x29	; 41
     f66:	00 fe       	sbrs	r0, 0
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f6a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f7e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f82:	8f 7e       	andi	r24, 0xEF	; 239
     f84:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f88:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f92:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_Device_ConfigurationNumber>
     f96:	81 11       	cpse	r24, r1
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f9a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f9e:	87 fd       	sbrc	r24, 7
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <__vector_10+0x116>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <__vector_10+0x118>
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     fac:	4d d4       	rcall	.+2202   	; 0x1848 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fb2:	83 ff       	sbrs	r24, 3
     fb4:	22 c0       	rjmp	.+68     	; 0xffa <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     fb6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fba:	83 ff       	sbrs	r24, 3
     fbc:	1e c0       	rjmp	.+60     	; 0xffa <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     fbe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     fce:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fd2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     fd6:	8e 7f       	andi	r24, 0xFE	; 254
     fd8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fdc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fe6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fea:	80 61       	ori	r24, 0x10	; 16
     fec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ff0:	42 e0       	ldi	r20, 0x02	; 2
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	6b db       	rcall	.-2346   	; 0x6ce <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ff8:	27 d4       	rcall	.+2126   	; 0x1848 <USB_Event_Stub>
     ffa:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ffe:	85 ff       	sbrs	r24, 5
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1000:	0a c0       	rjmp	.+20     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1002:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1006:	85 ff       	sbrs	r24, 5
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    100a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    100e:	8f 7d       	andi	r24, 0xDF	; 223
    1010:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1014:	19 d4       	rcall	.+2098   	; 0x1848 <USB_Event_Stub>
    1016:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    101a:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    101c:	15 c0       	rjmp	.+42     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    101e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1022:	81 ff       	sbrs	r24, 1
    1024:	11 c0       	rjmp	.+34     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1026:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    102a:	8d 7f       	andi	r24, 0xFD	; 253
    102c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1030:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1034:	8e 7f       	andi	r24, 0xFE	; 254
    1036:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    103a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1044:	74 da       	rcall	.-2840   	; 0x52e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1046:	5c de       	rcall	.-840    	; 0xd00 <USB_ResetInterface>
    1048:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    104c:	81 ff       	sbrs	r24, 1
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    104e:	15 c0       	rjmp	.+42     	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1050:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1054:	81 ff       	sbrs	r24, 1
    1056:	11 c0       	rjmp	.+34     	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1058:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1062:	77 98       	cbi	0x0e, 7	; 14
    1064:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	b6 da       	rcall	.-2708   	; 0x5de <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1072:	5d da       	rcall	.-2886   	; 0x52e <EVENT_USB_Host_DeviceUnattached>
    1074:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
    1076:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <USB_HostState>
    107a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    107e:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1080:	17 c0       	rjmp	.+46     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    1082:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1086:	80 ff       	sbrs	r24, 0
    1088:	13 c0       	rjmp	.+38     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    108a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    108e:	8e 7f       	andi	r24, 0xFE	; 254
    1090:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1094:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1098:	8e 7f       	andi	r24, 0xFE	; 254
    109a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    109e:	41 da       	rcall	.-2942   	; 0x522 <EVENT_USB_Host_DeviceAttached>
    10a0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    10aa:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    10ac:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <USB_HostState>
    10b0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    10b4:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    10b6:	0e c0       	rjmp	.+28     	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    10b8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    10bc:	82 ff       	sbrs	r24, 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    10be:	0a c0       	rjmp	.+20     	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10c0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    10c4:	8b 7f       	andi	r24, 0xFB	; 251
    10c6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	98 da       	rcall	.-2768   	; 0x600 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    10d0:	2e da       	rcall	.-2980   	; 0x52e <EVENT_USB_Host_DeviceUnattached>
    10d2:	16 de       	rcall	.-980    	; 0xd00 <USB_ResetInterface>

		USB_ResetInterface();
    10d4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
    10d8:	81 ff       	sbrs	r24, 1
	}
	#endif

	#if defined(USB_CAN_BE_BOTH)
	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
    10da:	1d c0       	rjmp	.+58     	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
    10dc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    10e0:	81 ff       	sbrs	r24, 1
    10e2:	19 c0       	rjmp	.+50     	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
						USBINT &= ~(1 << VBUSTI);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBINT &= ~(1 << IDTI);
    10e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	{
		USB_INT_Clear(USB_INT_IDTI);

		if (USB_DeviceState != DEVICE_STATE_Unattached)
    10ee:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
		  EVENT_USB_Device_Disconnect();
    10f2:	81 11       	cpse	r24, r1

		if (USB_HostState != HOST_STATE_Unattached)
    10f4:	be d9       	rcall	.-3204   	; 0x472 <EVENT_USB_Device_Disconnect>
    10f6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <USB_HostState>
    10fa:	81 30       	cpi	r24, 0x01	; 1
		  EVENT_USB_Host_DeviceUnattached();
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__EEPROM_REGION_LENGTH__+0x100>
    10fe:	17 da       	rcall	.-3026   	; 0x52e <EVENT_USB_Host_DeviceUnattached>

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    1100:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1104:	81 fd       	sbrc	r24, 1
    1106:	02 c0       	rjmp	.+4      	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
				  return USB_MODE_Device;
				else
				  return USB_MODE_Host;
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__EEPROM_REGION_LENGTH__+0x10e>
			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
				  return USB_MODE_Device;
    110c:	81 e0       	ldi	r24, 0x01	; 1

		USB_CurrentMode = USB_GetUSBModeFromUID();
    110e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_CurrentMode>
		USB_ResetInterface();
    1112:	f6 dd       	rcall	.-1044   	; 0xd00 <USB_ResetInterface>
    1114:	4c d9       	rcall	.-3432   	; 0x3ae <EVENT_USB_UIDChange>

		EVENT_USB_UIDChange();
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
	}
	#endif
}
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0b be       	out	0x3b, r0	; 59
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <Endpoint_Write_Stream_LE>:
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    114e:	8b 01       	movw	r16, r22
    1150:	7a 01       	movw	r14, r20
    1152:	10 db       	rcall	.-2528   	; 0x774 <Endpoint_WaitUntilReady>
    1154:	81 11       	cpse	r24, r1
    1156:	33 c0       	rjmp	.+102    	; 0x11be <Endpoint_Write_Stream_LE+0x82>
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	39 f0       	breq	.+14     	; 0x116c <Endpoint_Write_Stream_LE+0x30>
    115e:	f7 01       	movw	r30, r14
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	08 1b       	sub	r16, r24
    1166:	19 0b       	sbc	r17, r25
    1168:	c8 0f       	add	r28, r24
    116a:	d9 1f       	adc	r29, r25
    116c:	c1 2c       	mov	r12, r1
    116e:	d1 2c       	mov	r13, r1
    1170:	01 15       	cp	r16, r1
    1172:	11 05       	cpc	r17, r1
    1174:	19 f1       	breq	.+70     	; 0x11bc <Endpoint_Write_Stream_LE+0x80>
    1176:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117a:	85 fd       	sbrc	r24, 5
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <Endpoint_Write_Stream_LE+0x6e>
    117e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1182:	8e 77       	andi	r24, 0x7E	; 126
    1184:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1188:	a5 d4       	rcall	.+2378   	; 0x1ad4 <USB_USBTask>
    118a:	e1 14       	cp	r14, r1
    118c:	f1 04       	cpc	r15, r1
    118e:	49 f0       	breq	.+18     	; 0x11a2 <Endpoint_Write_Stream_LE+0x66>
    1190:	f7 01       	movw	r30, r14
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	c8 0e       	add	r12, r24
    1198:	d9 1e       	adc	r13, r25
    119a:	d1 82       	std	Z+1, r13	; 0x01
    119c:	c0 82       	st	Z, r12
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	0e c0       	rjmp	.+28     	; 0x11be <Endpoint_Write_Stream_LE+0x82>
    11a2:	e8 da       	rcall	.-2608   	; 0x774 <Endpoint_WaitUntilReady>
    11a4:	88 23       	and	r24, r24
    11a6:	21 f3       	breq	.-56     	; 0x1170 <Endpoint_Write_Stream_LE+0x34>
    11a8:	0a c0       	rjmp	.+20     	; 0x11be <Endpoint_Write_Stream_LE+0x82>
    11aa:	89 91       	ld	r24, Y+
    11ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11b0:	01 50       	subi	r16, 0x01	; 1
    11b2:	11 09       	sbc	r17, r1
    11b4:	ff ef       	ldi	r31, 0xFF	; 255
    11b6:	cf 1a       	sub	r12, r31
    11b8:	df 0a       	sbc	r13, r31
    11ba:	da cf       	rjmp	.-76     	; 0x1170 <Endpoint_Write_Stream_LE+0x34>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	08 95       	ret

000011d0 <Endpoint_Write_Control_Stream_LE>:
    11d0:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    11d4:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
    11d8:	26 17       	cp	r18, r22
    11da:	37 07       	cpc	r19, r23
    11dc:	48 f0       	brcs	.+18     	; 0x11f0 <Endpoint_Write_Control_Stream_LE+0x20>
    11de:	61 15       	cp	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	39 f4       	brne	.+14     	; 0x11f2 <Endpoint_Write_Control_Stream_LE+0x22>
    11e4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11e8:	2e 77       	andi	r18, 0x7E	; 126
    11ea:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <Endpoint_Write_Control_Stream_LE+0x22>
    11f0:	b9 01       	movw	r22, r18
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	61 15       	cp	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	69 f1       	breq	.+90     	; 0x1256 <Endpoint_Write_Control_Stream_LE+0x86>
    11fc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1200:	88 23       	and	r24, r24
    1202:	d1 f1       	breq	.+116    	; 0x1278 <Endpoint_Write_Control_Stream_LE+0xa8>
    1204:	85 30       	cpi	r24, 0x05	; 5
    1206:	d1 f1       	breq	.+116    	; 0x127c <Endpoint_Write_Control_Stream_LE+0xac>
    1208:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    120c:	83 fd       	sbrc	r24, 3
    120e:	32 c0       	rjmp	.+100    	; 0x1274 <Endpoint_Write_Control_Stream_LE+0xa4>
    1210:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1214:	82 fd       	sbrc	r24, 2
    1216:	28 c0       	rjmp	.+80     	; 0x1268 <Endpoint_Write_Control_Stream_LE+0x98>
    1218:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    121c:	80 ff       	sbrs	r24, 0
    121e:	eb cf       	rjmp	.-42     	; 0x11f6 <Endpoint_Write_Control_Stream_LE+0x26>
    1220:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1224:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1228:	61 15       	cp	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	51 f0       	breq	.+20     	; 0x1242 <Endpoint_Write_Control_Stream_LE+0x72>
    122e:	88 30       	cpi	r24, 0x08	; 8
    1230:	91 05       	cpc	r25, r1
    1232:	38 f4       	brcc	.+14     	; 0x1242 <Endpoint_Write_Control_Stream_LE+0x72>
    1234:	21 91       	ld	r18, Z+
    1236:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    123a:	61 50       	subi	r22, 0x01	; 1
    123c:	71 09       	sbc	r23, r1
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	f3 cf       	rjmp	.-26     	; 0x1228 <Endpoint_Write_Control_Stream_LE+0x58>
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	08 97       	sbiw	r24, 0x08	; 8
    1246:	09 f0       	breq	.+2      	; 0x124a <Endpoint_Write_Control_Stream_LE+0x7a>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    124e:	8e 77       	andi	r24, 0x7E	; 126
    1250:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1254:	d0 cf       	rjmp	.-96     	; 0x11f6 <Endpoint_Write_Control_Stream_LE+0x26>
    1256:	21 11       	cpse	r18, r1
    1258:	d1 cf       	rjmp	.-94     	; 0x11fc <Endpoint_Write_Control_Stream_LE+0x2c>
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <Endpoint_Write_Control_Stream_LE+0x98>
    125c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1260:	88 23       	and	r24, r24
    1262:	51 f0       	breq	.+20     	; 0x1278 <Endpoint_Write_Control_Stream_LE+0xa8>
    1264:	85 30       	cpi	r24, 0x05	; 5
    1266:	51 f0       	breq	.+20     	; 0x127c <Endpoint_Write_Control_Stream_LE+0xac>
    1268:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    126c:	82 ff       	sbrs	r24, 2
    126e:	f6 cf       	rjmp	.-20     	; 0x125c <Endpoint_Write_Control_Stream_LE+0x8c>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	08 95       	ret
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	08 95       	ret
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	08 95       	ret
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	08 95       	ret

00001280 <Endpoint_Read_Control_Stream_LE>:
    1280:	61 15       	cp	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	29 f4       	brne	.+10     	; 0x1290 <Endpoint_Read_Control_Stream_LE+0x10>
    1286:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    128a:	2b 77       	andi	r18, 0x7B	; 123
    128c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1290:	fc 01       	movw	r30, r24
    1292:	61 15       	cp	r22, r1
    1294:	71 05       	cpc	r23, r1
    1296:	31 f1       	breq	.+76     	; 0x12e4 <Endpoint_Read_Control_Stream_LE+0x64>
    1298:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    129c:	88 23       	and	r24, r24
    129e:	51 f1       	breq	.+84     	; 0x12f4 <Endpoint_Read_Control_Stream_LE+0x74>
    12a0:	85 30       	cpi	r24, 0x05	; 5
    12a2:	51 f1       	breq	.+84     	; 0x12f8 <Endpoint_Read_Control_Stream_LE+0x78>
    12a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12a8:	83 fd       	sbrc	r24, 3
    12aa:	22 c0       	rjmp	.+68     	; 0x12f0 <Endpoint_Read_Control_Stream_LE+0x70>
    12ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12b0:	82 ff       	sbrs	r24, 2
    12b2:	ef cf       	rjmp	.-34     	; 0x1292 <Endpoint_Read_Control_Stream_LE+0x12>
    12b4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    12b8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    12bc:	89 2b       	or	r24, r25
    12be:	31 f0       	breq	.+12     	; 0x12cc <Endpoint_Read_Control_Stream_LE+0x4c>
    12c0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    12c4:	81 93       	st	Z+, r24
    12c6:	61 50       	subi	r22, 0x01	; 1
    12c8:	71 09       	sbc	r23, r1
    12ca:	a1 f7       	brne	.-24     	; 0x12b4 <Endpoint_Read_Control_Stream_LE+0x34>
    12cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12d0:	8b 77       	andi	r24, 0x7B	; 123
    12d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12d6:	dd cf       	rjmp	.-70     	; 0x1292 <Endpoint_Read_Control_Stream_LE+0x12>
    12d8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    12dc:	88 23       	and	r24, r24
    12de:	51 f0       	breq	.+20     	; 0x12f4 <Endpoint_Read_Control_Stream_LE+0x74>
    12e0:	85 30       	cpi	r24, 0x05	; 5
    12e2:	51 f0       	breq	.+20     	; 0x12f8 <Endpoint_Read_Control_Stream_LE+0x78>
    12e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e8:	80 ff       	sbrs	r24, 0
    12ea:	f6 cf       	rjmp	.-20     	; 0x12d8 <Endpoint_Read_Control_Stream_LE+0x58>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	08 95       	ret
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	08 95       	ret
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	08 95       	ret

000012fc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    12fc:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    1300:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
    1304:	26 17       	cp	r18, r22
    1306:	37 07       	cpc	r19, r23
    1308:	48 f0       	brcs	.+18     	; 0x131c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    130a:	61 15       	cp	r22, r1
    130c:	71 05       	cpc	r23, r1
    130e:	39 f4       	brne	.+14     	; 0x131e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1310:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1314:	2e 77       	andi	r18, 0x7E	; 126
    1316:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    131a:	01 c0       	rjmp	.+2      	; 0x131e <Endpoint_Write_Control_PStream_LE+0x22>
    131c:	b9 01       	movw	r22, r18
    131e:	fc 01       	movw	r30, r24
    1320:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1322:	61 15       	cp	r22, r1
    1324:	71 05       	cpc	r23, r1
    1326:	71 f1       	breq	.+92     	; 0x1384 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1328:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    132c:	88 23       	and	r24, r24
    132e:	d9 f1       	breq	.+118    	; 0x13a6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	d9 f1       	breq	.+118    	; 0x13aa <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1338:	83 fd       	sbrc	r24, 3
    133a:	33 c0       	rjmp	.+102    	; 0x13a2 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    133c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1340:	82 fd       	sbrc	r24, 2
    1342:	29 c0       	rjmp	.+82     	; 0x1396 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1344:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1348:	80 ff       	sbrs	r24, 0
    134a:	eb cf       	rjmp	.-42     	; 0x1322 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    134c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1350:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1354:	61 15       	cp	r22, r1
    1356:	71 05       	cpc	r23, r1
    1358:	59 f0       	breq	.+22     	; 0x1370 <Endpoint_Write_Control_PStream_LE+0x74>
    135a:	88 30       	cpi	r24, 0x08	; 8
    135c:	91 05       	cpc	r25, r1
    135e:	40 f4       	brcc	.+16     	; 0x1370 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1360:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1362:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1366:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1368:	61 50       	subi	r22, 0x01	; 1
    136a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	f2 cf       	rjmp	.-28     	; 0x1354 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	08 97       	sbiw	r24, 0x08	; 8
    1374:	09 f0       	breq	.+2      	; 0x1378 <Endpoint_Write_Control_PStream_LE+0x7c>
    1376:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1378:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    137c:	8e 77       	andi	r24, 0x7E	; 126
    137e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1382:	cf cf       	rjmp	.-98     	; 0x1322 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1384:	21 11       	cpse	r18, r1
    1386:	d0 cf       	rjmp	.-96     	; 0x1328 <Endpoint_Write_Control_PStream_LE+0x2c>
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    138a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    138e:	88 23       	and	r24, r24
    1390:	51 f0       	breq	.+20     	; 0x13a6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1392:	85 30       	cpi	r24, 0x05	; 5
    1394:	51 f0       	breq	.+20     	; 0x13aa <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1396:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    139a:	82 ff       	sbrs	r24, 2
    139c:	f6 cf       	rjmp	.-20     	; 0x138a <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    13aa:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    13ac:	08 95       	ret

000013ae <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
    13c0:	8b 01       	movw	r16, r22
    13c2:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13c4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    13c8:	8f 7c       	andi	r24, 0xCF	; 207
    13ca:	80 61       	ori	r24, 0x10	; 16
    13cc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    13d0:	4f dc       	rcall	.-1890   	; 0xc70 <Pipe_WaitUntilReady>
    13d2:	81 11       	cpse	r24, r1
    13d4:	32 c0       	rjmp	.+100    	; 0x143a <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    13d6:	e1 14       	cp	r14, r1
    13d8:	f1 04       	cpc	r15, r1
    13da:	39 f0       	breq	.+14     	; 0x13ea <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
    13dc:	f7 01       	movw	r30, r14
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	08 1b       	sub	r16, r24
    13e4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    13e6:	c8 0f       	add	r28, r24
    13e8:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13ea:	c1 2c       	mov	r12, r1
    13ec:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    13ee:	01 15       	cp	r16, r1
    13f0:	11 05       	cpc	r17, r1
    13f2:	11 f1       	breq	.+68     	; 0x1438 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    13f4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    13f8:	85 fd       	sbrc	r24, 5
    13fa:	15 c0       	rjmp	.+42     	; 0x1426 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13fc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1400:	8e 77       	andi	r24, 0x7E	; 126
    1402:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1406:	e1 14       	cp	r14, r1
    1408:	f1 04       	cpc	r15, r1
    140a:	49 f0       	breq	.+18     	; 0x141e <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    140c:	f7 01       	movw	r30, r14
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	c8 0e       	add	r12, r24
    1414:	d9 1e       	adc	r13, r25
    1416:	d1 82       	std	Z+1, r13	; 0x01
    1418:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    141a:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    141c:	0e c0       	rjmp	.+28     	; 0x143a <Pipe_Read_Stream_LE+0x8c>
    141e:	28 dc       	rcall	.-1968   	; 0xc70 <Pipe_WaitUntilReady>
    1420:	88 23       	and	r24, r24
    1422:	29 f3       	breq	.-54     	; 0x13ee <Pipe_Read_Stream_LE+0x40>
    1424:	0a c0       	rjmp	.+20     	; 0x143a <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1426:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    142a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    142c:	01 50       	subi	r16, 0x01	; 1
    142e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1430:	ff ef       	ldi	r31, 0xFF	; 255
    1432:	cf 1a       	sub	r12, r31
    1434:	df 0a       	sbc	r13, r31
    1436:	db cf       	rjmp	.-74     	; 0x13ee <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    1438:	80 e0       	ldi	r24, 0x00	; 0
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret

0000144c <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	dc 01       	movw	r26, r24
    1452:	eb 01       	movw	r28, r22
    1454:	e8 81       	ld	r30, Y
    1456:	f9 81       	ldd	r31, Y+1	; 0x01
    1458:	20 81       	ld	r18, Z
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	11 97       	sbiw	r26, 0x01	; 1
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	82 17       	cp	r24, r18
    1464:	93 07       	cpc	r25, r19
    1466:	08 f4       	brcc	.+2      	; 0x146a <USB_GetNextDescriptor+0x1e>
    1468:	9c 01       	movw	r18, r24
    146a:	e2 0f       	add	r30, r18
    146c:	f3 1f       	adc	r31, r19
    146e:	eb 01       	movw	r28, r22
    1470:	f9 83       	std	Y+1, r31	; 0x01
    1472:	e8 83       	st	Y, r30
    1474:	8d 91       	ld	r24, X+
    1476:	9c 91       	ld	r25, X
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	82 1b       	sub	r24, r18
    147c:	93 0b       	sbc	r25, r19
    147e:	8d 93       	st	X+, r24
    1480:	9c 93       	st	X, r25
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <USB_Host_GetDeviceConfigDescriptor>:
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	29 97       	sbiw	r28, 0x09	; 9
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	6b 01       	movw	r12, r22
    14aa:	8a 01       	movw	r16, r20
    14ac:	79 01       	movw	r14, r18
    14ae:	90 e8       	ldi	r25, 0x80	; 128
    14b0:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <USB_ControlRequest>
    14b4:	96 e0       	ldi	r25, 0x06	; 6
    14b6:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <USB_ControlRequest+0x1>
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	92 60       	ori	r25, 0x02	; 2
    14c0:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <USB_ControlRequest+0x3>
    14c4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <USB_ControlRequest+0x2>
    14c8:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <USB_ControlRequest+0x5>
    14cc:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <USB_ControlRequest+0x4>
    14d0:	89 e0       	ldi	r24, 0x09	; 9
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <USB_ControlRequest+0x7>
    14d8:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <USB_ControlRequest+0x6>
    14dc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	d8 d1       	rcall	.+944    	; 0x1896 <USB_Host_SendControlRequest>
    14e6:	81 11       	cpse	r24, r1
    14e8:	19 c0       	rjmp	.+50     	; 0x151c <USB_Host_GetDeviceConfigDescriptor+0x94>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	f6 01       	movw	r30, r12
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    14f4:	e8 16       	cp	r14, r24
    14f6:	f9 06       	cpc	r15, r25
    14f8:	70 f0       	brcs	.+28     	; 0x1516 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    14fa:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <USB_ControlRequest+0x7>
    14fe:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <USB_ControlRequest+0x6>
    1502:	c8 01       	movw	r24, r16
    1504:	c8 d1       	rcall	.+912    	; 0x1896 <USB_Host_SendControlRequest>
    1506:	81 11       	cpse	r24, r1
    1508:	09 c0       	rjmp	.+18     	; 0x151c <USB_Host_GetDeviceConfigDescriptor+0x94>
    150a:	f8 01       	movw	r30, r16
    150c:	81 81       	ldd	r24, Z+1	; 0x01
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	21 f4       	brne	.+8      	; 0x151a <USB_Host_GetDeviceConfigDescriptor+0x92>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	03 c0       	rjmp	.+6      	; 0x151c <USB_Host_GetDeviceConfigDescriptor+0x94>
    1516:	85 e0       	ldi	r24, 0x05	; 5
    1518:	01 c0       	rjmp	.+2      	; 0x151c <USB_Host_GetDeviceConfigDescriptor+0x94>
    151a:	86 e0       	ldi	r24, 0x06	; 6
    151c:	29 96       	adiw	r28, 0x09	; 9
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	08 95       	ret

0000153a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	8c 01       	movw	r16, r24
    1550:	eb 01       	movw	r28, r22
    1552:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1554:	f8 01       	movw	r30, r16
    1556:	e0 80       	ld	r14, Z
    1558:	f1 80       	ldd	r15, Z+1	; 0x01
    155a:	e1 14       	cp	r14, r1
    155c:	f1 04       	cpc	r15, r1
    155e:	99 f0       	breq	.+38     	; 0x1586 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1560:	a8 80       	ld	r10, Y
    1562:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1564:	be 01       	movw	r22, r28
    1566:	c8 01       	movw	r24, r16
    1568:	71 df       	rcall	.-286    	; 0x144c <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    156a:	88 81       	ld	r24, Y
    156c:	99 81       	ldd	r25, Y+1	; 0x01
    156e:	f6 01       	movw	r30, r12
    1570:	09 95       	icall
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	79 f3       	breq	.-34     	; 0x1554 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	39 f4       	brne	.+14     	; 0x1588 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    157a:	b9 82       	std	Y+1, r11	; 0x01
    157c:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    157e:	f8 01       	movw	r30, r16
    1580:	f1 82       	std	Z+1, r15	; 0x01
    1582:	e0 82       	st	Z, r14
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1586:	82 e0       	ldi	r24, 0x02	; 2
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	08 95       	ret

0000159e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	aa 97       	sbiw	r28, 0x2a	; 42
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	e9 ee       	ldi	r30, 0xE9	; 233
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15ba:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    15be:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    15c2:	e1 3f       	cpi	r30, 0xF1	; 241
    15c4:	f2 07       	cpc	r31, r18
    15c6:	c9 f7       	brne	.-14     	; 0x15ba <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    15c8:	0e 94 4b 02 	call	0x496	; 0x496 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    15d0:	83 ff       	sbrs	r24, 3
    15d2:	21 c1       	rjmp	.+578    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    15d4:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    15d8:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <USB_ControlRequest+0x1>
    15dc:	49 2f       	mov	r20, r25
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	4a 30       	cpi	r20, 0x0A	; 10
    15e2:	51 05       	cpc	r21, r1
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <USB_Device_ProcessControlRequest+0x4a>
    15e6:	17 c1       	rjmp	.+558    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
    15e8:	fa 01       	movw	r30, r20
    15ea:	ea 5a       	subi	r30, 0xAA	; 170
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	86 c6       	rjmp	.+3340   	; 0x22fc <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15f0:	80 38       	cpi	r24, 0x80	; 128
    15f2:	81 f0       	breq	.+32     	; 0x1614 <USB_Device_ProcessControlRequest+0x76>
    15f4:	82 38       	cpi	r24, 0x82	; 130
    15f6:	09 f0       	breq	.+2      	; 0x15fa <USB_Device_ProcessControlRequest+0x5c>
    15f8:	0e c1       	rjmp	.+540    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15fa:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    15fe:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1600:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1604:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
    1608:	85 fb       	bst	r24, 5
    160a:	88 27       	eor	r24, r24
    160c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    160e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1614:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1618:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_Device_RemoteWakeupEnabled>
    161c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    161e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1620:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1624:	97 7f       	andi	r25, 0xF7	; 247
    1626:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    162a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    162e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1632:	c6 c0       	rjmp	.+396    	; 0x17c0 <USB_Device_ProcessControlRequest+0x222>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1634:	28 2f       	mov	r18, r24
    1636:	2d 7f       	andi	r18, 0xFD	; 253
    1638:	09 f0       	breq	.+2      	; 0x163c <USB_Device_ProcessControlRequest+0x9e>
    163a:	ed c0       	rjmp	.+474    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    163c:	88 23       	and	r24, r24
    163e:	19 f0       	breq	.+6      	; 0x1646 <USB_Device_ProcessControlRequest+0xa8>
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	61 f0       	breq	.+24     	; 0x165c <USB_Device_ProcessControlRequest+0xbe>
    1644:	e8 c0       	rjmp	.+464    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1646:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	09 f0       	breq	.+2      	; 0x1650 <USB_Device_ProcessControlRequest+0xb2>
    164e:	e3 c0       	rjmp	.+454    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1650:	93 30       	cpi	r25, 0x03	; 3
    1652:	09 f0       	breq	.+2      	; 0x1656 <USB_Device_ProcessControlRequest+0xb8>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <USB_Device_RemoteWakeupEnabled>
    165a:	2b c0       	rjmp	.+86     	; 0x16b2 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    165c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    1660:	81 11       	cpse	r24, r1
    1662:	27 c0       	rjmp	.+78     	; 0x16b2 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1664:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    1668:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    166a:	09 f4       	brne	.+2      	; 0x166e <USB_Device_ProcessControlRequest+0xd0>
    166c:	d4 c0       	rjmp	.+424    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    166e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1672:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1676:	20 ff       	sbrs	r18, 0
    1678:	1c c0       	rjmp	.+56     	; 0x16b2 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    167a:	93 30       	cpi	r25, 0x03	; 3
    167c:	21 f4       	brne	.+8      	; 0x1686 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    167e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1686:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    168a:	90 61       	ori	r25, 0x10	; 16
    168c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <USB_Device_ProcessControlRequest+0xfe>
    1698:	44 0f       	add	r20, r20
    169a:	55 1f       	adc	r21, r21
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <USB_Device_ProcessControlRequest+0xfa>
    16a0:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    16a4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    16a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    16ac:	88 60       	ori	r24, 0x08	; 8
    16ae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16b2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ba:	87 7f       	andi	r24, 0xF7	; 247
    16bc:	84 c0       	rjmp	.+264    	; 0x17c6 <USB_Device_ProcessControlRequest+0x228>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16be:	81 11       	cpse	r24, r1
    16c0:	aa c0       	rjmp	.+340    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    16c2:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    16c6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16c8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16ca:	f8 94       	cli
    16cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16d0:	87 7f       	andi	r24, 0xF7	; 247
    16d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    16d6:	2f d8       	rcall	.-4002   	; 0x736 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    16dc:	80 ff       	sbrs	r24, 0
    16de:	fc cf       	rjmp	.-8      	; 0x16d8 <USB_Device_ProcessControlRequest+0x13a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    16e0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    16e4:	80 78       	andi	r24, 0x80	; 128
    16e6:	81 2b       	or	r24, r17

				UDADDR = Temp;
    16e8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    16ec:	80 68       	ori	r24, 0x80	; 128
    16ee:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    16f2:	11 11       	cpse	r17, r1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <USB_Device_ProcessControlRequest+0x15c>
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <USB_Device_ProcessControlRequest+0x15e>
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1700:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1702:	89 c0       	rjmp	.+274    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1704:	80 58       	subi	r24, 0x80	; 128
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	08 f0       	brcs	.+2      	; 0x170c <USB_Device_ProcessControlRequest+0x16e>
    170a:	85 c0       	rjmp	.+266    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    170c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    1710:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
    1714:	8c 3d       	cpi	r24, 0xDC	; 220
    1716:	53 e0       	ldi	r21, 0x03	; 3
    1718:	95 07       	cpc	r25, r21
    171a:	71 f5       	brne	.+92     	; 0x1778 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1720:	8a e2       	ldi	r24, 0x2A	; 42
    1722:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1724:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1726:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1728:	de 01       	movw	r26, r28
    172a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    172c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    172e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1730:	51 e2       	ldi	r21, 0x21	; 33
    1732:	e3 2f       	mov	r30, r19
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    173a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    173c:	20 ff       	sbrs	r18, 0
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1740:	e2 95       	swap	r30
    1742:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1744:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1746:	ef 70       	andi	r30, 0x0F	; 15
    1748:	8e 2f       	mov	r24, r30
    174a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    174c:	ea 30       	cpi	r30, 0x0A	; 10
    174e:	10 f0       	brcs	.+4      	; 0x1754 <USB_Device_ProcessControlRequest+0x1b6>
    1750:	c7 96       	adiw	r24, 0x37	; 55
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <USB_Device_ProcessControlRequest+0x1b8>
    1754:	c0 96       	adiw	r24, 0x30	; 48
    1756:	8d 93       	st	X+, r24
    1758:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	24 31       	cpi	r18, 0x14	; 20
    175e:	49 f7       	brne	.-46     	; 0x1732 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1760:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1766:	87 7f       	andi	r24, 0xF7	; 247
    1768:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    176c:	6a e2       	ldi	r22, 0x2A	; 42
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	2d dd       	rcall	.-1446   	; 0x11d0 <Endpoint_Write_Control_Stream_LE>
    1776:	13 c0       	rjmp	.+38     	; 0x179e <USB_Device_ProcessControlRequest+0x200>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1778:	ae 01       	movw	r20, r28
    177a:	4f 5f       	subi	r20, 0xFF	; 255
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    1782:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CALLBACK_USB_GetDescriptor>
    1786:	bc 01       	movw	r22, r24
    1788:	89 2b       	or	r24, r25
    178a:	09 f4       	brne	.+2      	; 0x178e <USB_Device_ProcessControlRequest+0x1f0>
    178c:	44 c0       	rjmp	.+136    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
    178e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1792:	97 7f       	andi	r25, 0xF7	; 247
    1794:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	af dd       	rcall	.-1186   	; 0x12fc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    179e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a2:	8b 77       	andi	r24, 0x7B	; 123
    17a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a8:	36 c0       	rjmp	.+108    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    17aa:	80 38       	cpi	r24, 0x80	; 128
    17ac:	a1 f5       	brne	.+104    	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17b2:	87 7f       	andi	r24, 0xF7	; 247
    17b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    17b8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c4:	8e 77       	andi	r24, 0x7E	; 126
    17c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    17ca:	0e 94 9b 03 	call	0x736	; 0x736 <Endpoint_ClearStatusStage>
    17ce:	23 c0       	rjmp	.+70     	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17d0:	81 11       	cpse	r24, r1
    17d2:	21 c0       	rjmp	.+66     	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17d4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    17d8:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
    17dc:	99 27       	eor	r25, r25
    17de:	02 97       	sbiw	r24, 0x02	; 2
    17e0:	d4 f4       	brge	.+52     	; 0x1816 <USB_Device_ProcessControlRequest+0x278>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    17ec:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    17f0:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    17f4:	0e 94 9b 03 	call	0x736	; 0x736 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    17f8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_Device_ConfigurationNumber>
    17fc:	81 11       	cpse	r24, r1
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <USB_Device_ProcessControlRequest+0x26e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1800:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1804:	87 fd       	sbrc	r24, 7
    1806:	02 c0       	rjmp	.+4      	; 0x180c <USB_Device_ProcessControlRequest+0x26e>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	01 c0       	rjmp	.+2      	; 0x180e <USB_Device_ProcessControlRequest+0x270>
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1812:	0e 94 3b 02 	call	0x476	; 0x476 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1816:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    181a:	83 ff       	sbrs	r24, 3
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <USB_Device_ProcessControlRequest+0x294>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    181e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1822:	80 62       	ori	r24, 0x20	; 32
    1824:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1828:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    182c:	87 7f       	andi	r24, 0xF7	; 247
    182e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1832:	aa 96       	adiw	r28, 0x2a	; 42
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1848:	08 95       	ret

0000184a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1852:	c9 ee       	ldi	r28, 0xE9	; 233
    1854:	d3 e0       	ldi	r29, 0x03	; 3
    1856:	11 11       	cpse	r17, r1
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    185a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    185e:	83 fd       	sbrc	r24, 3
    1860:	15 c0       	rjmp	.+42     	; 0x188c <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	0b d8       	rcall	.-4074   	; 0x87c <USB_Host_WaitMS>
    1866:	81 11       	cpse	r24, r1
    1868:	12 c0       	rjmp	.+36     	; 0x188e <USB_Host_WaitForIOS+0x44>
    186a:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    186c:	a1 f7       	brne	.-24     	; 0x1856 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	0e c0       	rjmp	.+28     	; 0x188e <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1872:	11 30       	cpi	r17, 0x01	; 1
    1874:	29 f4       	brne	.+10     	; 0x1880 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1876:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    187a:	80 ff       	sbrs	r24, 0
    187c:	f2 cf       	rjmp	.-28     	; 0x1862 <USB_Host_WaitForIOS+0x18>
    187e:	06 c0       	rjmp	.+12     	; 0x188c <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1880:	12 30       	cpi	r17, 0x02	; 2
    1882:	79 f7       	brne	.-34     	; 0x1862 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1884:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1888:	82 ff       	sbrs	r24, 2
    188a:	eb cf       	rjmp	.-42     	; 0x1862 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    188c:	80 e0       	ldi	r24, 0x00	; 0
}
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	08 95       	ret

00001896 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    18a2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    18aa:	c0 91 ef 01 	lds	r28, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    18ae:	d0 91 f0 01 	lds	r29, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    18b2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    18b6:	81 60       	ori	r24, 0x01	; 1
    18b8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	0e 94 3e 04 	call	0x87c	; 0x87c <USB_Host_WaitMS>
    18c2:	81 11       	cpse	r24, r1
    18c4:	c9 c0       	rjmp	.+402    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18c6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    18ca:	8f 7c       	andi	r24, 0xCF	; 207
    18cc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    18d0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    18d4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    18d8:	8f 7e       	andi	r24, 0xEF	; 239
    18da:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18de:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    18e2:	8f 7b       	andi	r24, 0xBF	; 191
    18e4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    18e8:	e9 ee       	ldi	r30, 0xE9	; 233
    18ea:	f1 e0       	ldi	r31, 0x01	; 1
    18ec:	81 ef       	ldi	r24, 0xF1	; 241
    18ee:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    18f0:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    18f2:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    18f6:	8e 17       	cp	r24, r30
    18f8:	9f 07       	cpc	r25, r31
    18fa:	d1 f7       	brne	.-12     	; 0x18f0 <USB_Host_SendControlRequest+0x5a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    18fc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1900:	87 77       	andi	r24, 0x77	; 119
    1902:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	a0 df       	rcall	.-192    	; 0x184a <USB_Host_WaitForIOS>
    190a:	81 11       	cpse	r24, r1
    190c:	a5 c0       	rjmp	.+330    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    190e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1912:	80 64       	ori	r24, 0x40	; 64
    1914:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	0e 94 3e 04 	call	0x87c	; 0x87c <USB_Host_WaitMS>
    191e:	81 11       	cpse	r24, r1
    1920:	9b c0       	rjmp	.+310    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1922:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1926:	87 ff       	sbrs	r24, 7
    1928:	4e c0       	rjmp	.+156    	; 0x19c6 <USB_Host_SendControlRequest+0x130>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    192a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    192e:	8f 7c       	andi	r24, 0xCF	; 207
    1930:	80 61       	ori	r24, 0x10	; 16
    1932:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1936:	01 15       	cp	r16, r1
    1938:	11 05       	cpc	r17, r1
    193a:	09 f0       	breq	.+2      	; 0x193e <USB_Host_SendControlRequest+0xa8>
    193c:	3a c0       	rjmp	.+116    	; 0x19b2 <USB_Host_SendControlRequest+0x11c>
    193e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1942:	8f 7c       	andi	r24, 0xCF	; 207
    1944:	80 62       	ori	r24, 0x20	; 32
    1946:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    194a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    194e:	8f 7b       	andi	r24, 0xBF	; 191
    1950:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	79 df       	rcall	.-270    	; 0x184a <USB_Host_WaitForIOS>
    1958:	81 11       	cpse	r24, r1
    195a:	7e c0       	rjmp	.+252    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    195c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1960:	8b 77       	andi	r24, 0x7B	; 123
    1962:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	70 df       	rcall	.-288    	; 0x184a <USB_Host_WaitForIOS>
    196a:	76 c0       	rjmp	.+236    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    196c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1970:	8f 7b       	andi	r24, 0xBF	; 191
    1972:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	68 df       	rcall	.-304    	; 0x184a <USB_Host_WaitForIOS>
    197a:	81 11       	cpse	r24, r1
    197c:	6d c0       	rjmp	.+218    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    197e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1982:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1986:	89 2b       	or	r24, r25
    1988:	11 f4       	brne	.+4      	; 0x198e <USB_Host_SendControlRequest+0xf8>
				  DataLen = 0;
    198a:	c0 e0       	ldi	r28, 0x00	; 0
    198c:	d0 e0       	ldi	r29, 0x00	; 0
    198e:	f8 01       	movw	r30, r16
    1990:	8f 01       	movw	r16, r30
    1992:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1996:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    199a:	89 2b       	or	r24, r25
    199c:	69 f4       	brne	.+26     	; 0x19b8 <USB_Host_SendControlRequest+0x122>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    199e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    19a2:	80 64       	ori	r24, 0x40	; 64
    19a4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19a8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    19ac:	8e 77       	andi	r24, 0x7E	; 126
    19ae:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    19b2:	20 97       	sbiw	r28, 0x00	; 0
    19b4:	d9 f6       	brne	.-74     	; 0x196c <USB_Host_SendControlRequest+0xd6>
    19b6:	c3 cf       	rjmp	.-122    	; 0x193e <USB_Host_SendControlRequest+0xa8>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    19b8:	20 97       	sbiw	r28, 0x00	; 0
    19ba:	89 f3       	breq	.-30     	; 0x199e <USB_Host_SendControlRequest+0x108>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    19bc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    19c0:	81 93       	st	Z+, r24
					DataLen--;
    19c2:	21 97       	sbiw	r28, 0x01	; 1
    19c4:	e5 cf       	rjmp	.-54     	; 0x1990 <USB_Host_SendControlRequest+0xfa>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    19c6:	01 15       	cp	r16, r1
    19c8:	11 05       	cpc	r17, r1
    19ca:	91 f1       	breq	.+100    	; 0x1a30 <USB_Host_SendControlRequest+0x19a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19cc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    19d0:	8f 7c       	andi	r24, 0xCF	; 207
    19d2:	80 62       	ori	r24, 0x20	; 32
    19d4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19d8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    19dc:	8f 7b       	andi	r24, 0xBF	; 191
    19de:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19e6:	e1 f0       	breq	.+56     	; 0x1a20 <USB_Host_SendControlRequest+0x18a>
    19e8:	30 df       	rcall	.-416    	; 0x184a <USB_Host_WaitForIOS>
    19ea:	81 11       	cpse	r24, r1
    19ec:	35 c0       	rjmp	.+106    	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19ee:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    19f2:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    19f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_Host_ControlPipeSize>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	28 17       	cp	r18, r24
    19fe:	39 07       	cpc	r19, r25
    1a00:	48 f4       	brcc	.+18     	; 0x1a14 <USB_Host_SendControlRequest+0x17e>
				{
					Pipe_Write_8(*(DataStream++));
    1a02:	0f 5f       	subi	r16, 0xFF	; 255
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	f8 01       	movw	r30, r16
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a0c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    1a10:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a12:	69 f7       	brne	.-38     	; 0x19ee <USB_Host_SendControlRequest+0x158>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a14:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1a18:	8b 77       	andi	r24, 0x7B	; 123
    1a1a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a1e:	e1 cf       	rjmp	.-62     	; 0x19e2 <USB_Host_SendControlRequest+0x14c>
    1a20:	14 df       	rcall	.-472    	; 0x184a <USB_Host_WaitForIOS>
    1a22:	81 11       	cpse	r24, r1
    1a24:	19 c0       	rjmp	.+50     	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a26:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1a2a:	80 64       	ori	r24, 0x40	; 64
    1a2c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a30:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1a34:	8f 7c       	andi	r24, 0xCF	; 207
    1a36:	80 61       	ori	r24, 0x10	; 16
    1a38:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a3c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1a40:	8f 7b       	andi	r24, 0xBF	; 191
    1a42:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	00 df       	rcall	.-512    	; 0x184a <USB_Host_WaitForIOS>
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	05 c0       	rjmp	.+10     	; 0x1a58 <USB_Host_SendControlRequest+0x1c2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a4e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1a52:	9e 77       	andi	r25, 0x7E	; 126
    1a54:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a58:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1a5c:	90 64       	ori	r25, 0x40	; 64
    1a5e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1a62:	f1 10       	cpse	r15, r1
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <USB_Host_SendControlRequest+0x1da>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a66:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1a6a:	9e 7f       	andi	r25, 0xFE	; 254
    1a6c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    1a76:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	08 95       	ret

00001a86 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1a86:	cf 93       	push	r28
    1a88:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1a8a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <USB_ControlRequest>
    1a8e:	89 e0       	ldi	r24, 0x09	; 9
    1a90:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <USB_ControlRequest+0x1>
    1a94:	8c 2f       	mov	r24, r28
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <USB_ControlRequest+0x3>
    1a9c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <USB_ControlRequest+0x2>
    1aa0:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <USB_ControlRequest+0x5>
    1aa4:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <USB_ControlRequest+0x4>
    1aa8:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <USB_ControlRequest+0x7>
    1aac:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1ab0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	ee de       	rcall	.-548    	; 0x1896 <USB_Host_SendControlRequest>
    1aba:	81 11       	cpse	r24, r1
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1abe:	c0 93 e6 01 	sts	0x01E6, r28	; 0x8001e6 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1ac2:	c1 11       	cpse	r28, r1
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <USB_Host_SetDeviceConfiguration+0x44>
    1ac6:	9a e0       	ldi	r25, 0x0A	; 10
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <USB_Host_SetDeviceConfiguration+0x46>
    1aca:	9b e0       	ldi	r25, 0x0B	; 11
    1acc:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <USB_HostState>
	}

	return ErrorCode;
}
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1ad4:	cf 93       	push	r28
	#if defined(USB_HOST_ONLY)
		USB_HostTask();
	#elif defined(USB_DEVICE_ONLY)
		USB_DeviceTask();
	#else
		if (USB_CurrentMode == USB_MODE_Device)
    1ad6:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_CurrentMode>
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	81 f4       	brne	.+32     	; 0x1afe <USB_USBTask+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1ade:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1ae2:	88 23       	and	r24, r24
    1ae4:	c9 f0       	breq	.+50     	; 0x1b18 <USB_USBTask+0x44>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1ae6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1aea:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1aec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1af0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1af4:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1af6:	53 dd       	rcall	.-1370   	; 0x159e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1af8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1afc:	0d c0       	rjmp	.+26     	; 0x1b18 <USB_USBTask+0x44>
	#elif defined(USB_DEVICE_ONLY)
		USB_DeviceTask();
	#else
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
    1afe:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_CurrentMode>
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <USB_USBTask+0x44>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1b06:	c0 91 a7 00 	lds	r28, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1b0a:	c7 70       	andi	r28, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b0c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1b10:	0e 94 8f 04 	call	0x91e	; 0x91e <USB_Host_ProcessNextHostState>
    1b14:	c0 93 a7 00 	sts	0x00A7, r28	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	ea 5b       	subi	r30, 0xBA	; 186
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	44 0f       	add	r20, r20
    1b26:	55 1f       	adc	r21, r21
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1b28:	4f 56       	subi	r20, 0x6F	; 111
    1b2a:	5c 4f       	sbci	r21, 0xFC	; 252
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	a4 0f       	add	r26, r20
    1b30:	b5 1f       	adc	r27, r21
    1b32:	2d 91       	ld	r18, X+
    1b34:	3c 91       	ld	r19, X

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1b36:	dc 01       	movw	r26, r24
    1b38:	a0 57       	subi	r26, 0x70	; 112
    1b3a:	bc 4f       	sbci	r27, 0xFC	; 252
    1b3c:	7c 91       	ld	r23, X
    1b3e:	76 13       	cpse	r23, r22
    1b40:	11 c0       	rjmp	.+34     	; 0x1b64 <USB_GetHIDReportSize+0x48>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a9 01       	movw	r20, r18
    1b48:	47 70       	andi	r20, 0x07	; 7
    1b4a:	55 27       	eor	r21, r21
    1b4c:	45 2b       	or	r20, r21
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <USB_GetHIDReportSize+0x38>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	43 e0       	ldi	r20, 0x03	; 3
    1b56:	36 95       	lsr	r19
    1b58:	27 95       	ror	r18
    1b5a:	4a 95       	dec	r20
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <USB_GetHIDReportSize+0x3a>
    1b5e:	82 0f       	add	r24, r18
    1b60:	93 1f       	adc	r25, r19
    1b62:	08 95       	ret
    1b64:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    1b66:	8e 17       	cp	r24, r30
    1b68:	9f 07       	cpc	r25, r31
    1b6a:	01 f7       	brne	.-64     	; 0x1b2c <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
}
    1b70:	08 95       	ret

00001b72 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1b72:	6f 92       	push	r6
    1b74:	7f 92       	push	r7
    1b76:	8f 92       	push	r8
    1b78:	9f 92       	push	r9
    1b7a:	af 92       	push	r10
    1b7c:	bf 92       	push	r11
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <HID_Device_ProcessControlRequest+0x1e>
    1b90:	1f 92       	push	r1
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1b98:	ad b6       	in	r10, 0x3d	; 61
    1b9a:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1ba0:	83 ff       	sbrs	r24, 3
    1ba2:	fc c0       	rjmp	.+504    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	80 81       	ld	r24, Z
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    1bae:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <USB_ControlRequest+0x5>
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <HID_Device_ProcessControlRequest+0x48>
    1bb8:	f1 c0       	rjmp	.+482    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1bba:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest+0x1>
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <HID_Device_ProcessControlRequest+0x52>
    1bc2:	98 c0       	rjmp	.+304    	; 0x1cf4 <HID_Device_ProcessControlRequest+0x182>
    1bc4:	30 f4       	brcc	.+12     	; 0x1bd2 <HID_Device_ProcessControlRequest+0x60>
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	71 f0       	breq	.+28     	; 0x1be6 <HID_Device_ProcessControlRequest+0x74>
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <HID_Device_ProcessControlRequest+0x5e>
    1bce:	cd c0       	rjmp	.+410    	; 0x1d6a <HID_Device_ProcessControlRequest+0x1f8>
    1bd0:	e5 c0       	rjmp	.+458    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
    1bd2:	8a 30       	cpi	r24, 0x0A	; 10
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <HID_Device_ProcessControlRequest+0x66>
    1bd6:	b0 c0       	rjmp	.+352    	; 0x1d38 <HID_Device_ProcessControlRequest+0x1c6>
    1bd8:	8b 30       	cpi	r24, 0x0B	; 11
    1bda:	09 f4       	brne	.+2      	; 0x1bde <HID_Device_ProcessControlRequest+0x6c>
    1bdc:	98 c0       	rjmp	.+304    	; 0x1d0e <HID_Device_ProcessControlRequest+0x19c>
    1bde:	89 30       	cpi	r24, 0x09	; 9
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <HID_Device_ProcessControlRequest+0x72>
    1be2:	dc c0       	rjmp	.+440    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
    1be4:	49 c0       	rjmp	.+146    	; 0x1c78 <HID_Device_ProcessControlRequest+0x106>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1be6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1bea:	81 3a       	cpi	r24, 0xA1	; 161
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <HID_Device_ProcessControlRequest+0x7e>
    1bee:	d6 c0       	rjmp	.+428    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
			{
    1bf0:	8d b6       	in	r8, 0x3d	; 61
    1bf2:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
    1bf4:	1a 82       	std	Y+2, r1	; 0x02
    1bf6:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1bf8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    1bfc:	10 91 ec 01 	lds	r17, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
    1c00:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1c02:	f7 01       	movw	r30, r14
    1c04:	87 81       	ldd	r24, Z+7	; 0x07
    1c06:	48 2f       	mov	r20, r24
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	8d b7       	in	r24, 0x3d	; 61
    1c0c:	9e b7       	in	r25, 0x3e	; 62
    1c0e:	84 1b       	sub	r24, r20
    1c10:	95 0b       	sbc	r25, r21
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	9e bf       	out	0x3e, r25	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	8d bf       	out	0x3d, r24	; 61
    1c1c:	ed b7       	in	r30, 0x3d	; 61
    1c1e:	fe b7       	in	r31, 0x3e	; 62
    1c20:	31 96       	adiw	r30, 0x01	; 1
    1c22:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	cf 01       	movw	r24, r30
    1c2a:	87 d3       	rcall	.+1806   	; 0x233a <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1c2c:	4f ef       	ldi	r20, 0xFF	; 255
    1c2e:	41 0f       	add	r20, r17
    1c30:	8e 01       	movw	r16, r28
    1c32:	0f 5f       	subi	r16, 0xFF	; 255
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	96 01       	movw	r18, r12
    1c38:	be 01       	movw	r22, r28
    1c3a:	6d 5f       	subi	r22, 0xFD	; 253
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	c7 01       	movw	r24, r14
    1c40:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1c44:	f7 01       	movw	r30, r14
    1c46:	85 81       	ldd	r24, Z+5	; 0x05
    1c48:	96 81       	ldd	r25, Z+6	; 0x06
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <HID_Device_ProcessControlRequest+0xe4>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1c4e:	47 81       	ldd	r20, Z+7	; 0x07
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	b6 01       	movw	r22, r12
    1c54:	69 d3       	rcall	.+1746   	; 0x2328 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c56:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c5e:	87 7f       	andi	r24, 0xF7	; 247
    1c60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1c64:	69 81       	ldd	r22, Y+1	; 0x01
    1c66:	7a 81       	ldd	r23, Y+2	; 0x02
    1c68:	c6 01       	movw	r24, r12
    1c6a:	b2 da       	rcall	.-2716   	; 0x11d0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c70:	8b 77       	andi	r24, 0x7B	; 123
    1c72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c76:	38 c0       	rjmp	.+112    	; 0x1ce8 <HID_Device_ProcessControlRequest+0x176>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c78:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1c7c:	81 32       	cpi	r24, 0x21	; 33
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <HID_Device_ProcessControlRequest+0x110>
    1c80:	8d c0       	rjmp	.+282    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
			{
    1c82:	8d b6       	in	r8, 0x3d	; 61
    1c84:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1c86:	00 91 ef 01 	lds	r16, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    1c8a:	10 91 f0 01 	lds	r17, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1c8e:	70 90 eb 01 	lds	r7, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    1c92:	60 90 ec 01 	lds	r6, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1c96:	8d b7       	in	r24, 0x3d	; 61
    1c98:	9e b7       	in	r25, 0x3e	; 62
    1c9a:	80 1b       	sub	r24, r16
    1c9c:	91 0b       	sbc	r25, r17
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	9e bf       	out	0x3e, r25	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	8d bf       	out	0x3d, r24	; 61
    1ca8:	ed b7       	in	r30, 0x3d	; 61
    1caa:	fe b7       	in	r31, 0x3e	; 62
    1cac:	31 96       	adiw	r30, 0x01	; 1
    1cae:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cb4:	87 7f       	andi	r24, 0xF7	; 247
    1cb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1cba:	b8 01       	movw	r22, r16
    1cbc:	cf 01       	movw	r24, r30
    1cbe:	e0 da       	rcall	.-2624   	; 0x1280 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cc4:	8e 77       	andi	r24, 0x7E	; 126
    1cc6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	71 10       	cpse	r7, r1
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <HID_Device_ProcessControlRequest+0x160>
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	02 1b       	sub	r16, r18
    1cd6:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1cd8:	2c 0d       	add	r18, r12
    1cda:	3d 1d       	adc	r19, r13

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1cdc:	4f ef       	ldi	r20, 0xFF	; 255
    1cde:	46 0d       	add	r20, r6
    1ce0:	67 2d       	mov	r22, r7
    1ce2:	c7 01       	movw	r24, r14
    1ce4:	0e 94 8b 02 	call	0x516	; 0x516 <CALLBACK_HID_Device_ProcessHIDReport>
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	9e be       	out	0x3e, r9	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	8d be       	out	0x3d, r8	; 61
    1cf2:	54 c0       	rjmp	.+168    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1cf4:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1cf8:	81 3a       	cpi	r24, 0xA1	; 161
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <HID_Device_ProcessControlRequest+0x18c>
    1cfc:	4f c0       	rjmp	.+158    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cfe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d02:	87 7f       	andi	r24, 0xF7	; 247
    1d04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1d08:	f7 01       	movw	r30, r14
    1d0a:	80 85       	ldd	r24, Z+8	; 0x08
    1d0c:	3e c0       	rjmp	.+124    	; 0x1d8a <HID_Device_ProcessControlRequest+0x218>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d0e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1d12:	81 32       	cpi	r24, 0x21	; 33
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <HID_Device_ProcessControlRequest+0x1a6>
    1d16:	42 c0       	rjmp	.+132    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
    1d18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d1c:	87 7f       	andi	r24, 0xF7	; 247
    1d1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1d22:	0e 94 9b 03 	call	0x736	; 0x736 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1d26:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	91 11       	cpse	r25, r1
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <HID_Device_ProcessControlRequest+0x1c0>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	f7 01       	movw	r30, r14
    1d34:	80 87       	std	Z+8, r24	; 0x08
    1d36:	32 c0       	rjmp	.+100    	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d38:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1d3c:	81 32       	cpi	r24, 0x21	; 33
    1d3e:	71 f5       	brne	.+92     	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
    1d40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d44:	87 7f       	andi	r24, 0xF7	; 247
    1d46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1d4a:	0e 94 9b 03 	call	0x736	; 0x736 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1d4e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    1d52:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
    1d56:	88 27       	eor	r24, r24
    1d58:	36 e0       	ldi	r19, 0x06	; 6
    1d5a:	96 95       	lsr	r25
    1d5c:	87 95       	ror	r24
    1d5e:	3a 95       	dec	r19
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <HID_Device_ProcessControlRequest+0x1e8>
    1d62:	f7 01       	movw	r30, r14
    1d64:	92 87       	std	Z+10, r25	; 0x0a
    1d66:	81 87       	std	Z+9, r24	; 0x09
    1d68:	19 c0       	rjmp	.+50     	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d6a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1d6e:	81 3a       	cpi	r24, 0xA1	; 161
    1d70:	a9 f4       	brne	.+42     	; 0x1d9c <HID_Device_ProcessControlRequest+0x22a>
    1d72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d76:	87 7f       	andi	r24, 0xF7	; 247
    1d78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	81 85       	ldd	r24, Z+9	; 0x09
    1d80:	92 85       	ldd	r25, Z+10	; 0x0a
    1d82:	96 95       	lsr	r25
    1d84:	87 95       	ror	r24
    1d86:	96 95       	lsr	r25
    1d88:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d8a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d92:	8e 77       	andi	r24, 0x7E	; 126
    1d94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1d98:	0e 94 9b 03 	call	0x736	; 0x736 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	be be       	out	0x3e, r11	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	ad be       	out	0x3d, r10	; 61
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	bf 90       	pop	r11
    1dbe:	af 90       	pop	r10
    1dc0:	9f 90       	pop	r9
    1dc2:	8f 90       	pop	r8
    1dc4:	7f 90       	pop	r7
    1dc6:	6f 90       	pop	r6
    1dc8:	08 95       	ret

00001dca <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	18 96       	adiw	r26, 0x08	; 8
    1dd4:	85 e0       	ldi	r24, 0x05	; 5
    1dd6:	ed 01       	movw	r28, r26
    1dd8:	19 92       	st	Y+, r1
    1dda:	8a 95       	dec	r24
    1ddc:	e9 f7       	brne	.-6      	; 0x1dd8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
    1de2:	84 ef       	ldi	r24, 0xF4	; 244
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	92 87       	std	Z+10, r25	; 0x0a
    1de8:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    1dea:	84 81       	ldd	r24, Z+4	; 0x04
    1dec:	81 11       	cpse	r24, r1
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <HID_Device_ConfigureEndpoints+0x2a>
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <HID_Device_ConfigureEndpoints+0x2c>
    1df4:	44 e0       	ldi	r20, 0x04	; 4
    1df6:	62 81       	ldd	r22, Z+2	; 0x02
    1df8:	73 81       	ldd	r23, Z+3	; 0x03
    1dfa:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1dfc:	28 e0       	ldi	r18, 0x08	; 8
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1e00:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1e02:	26 17       	cp	r18, r22
    1e04:	37 07       	cpc	r19, r23
    1e06:	20 f4       	brcc	.+8      	; 0x1e10 <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
    1e08:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	f9 cf       	rjmp	.-14     	; 0x1e02 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1e10:	42 60       	ori	r20, 0x02	; 2
    1e12:	92 95       	swap	r25
    1e14:	90 7f       	andi	r25, 0xF0	; 240
    1e16:	49 2b       	or	r20, r25
    1e18:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <Endpoint_ConfigureEndpoint_Prv>

00001e22 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1e22:	5f 92       	push	r5
    1e24:	6f 92       	push	r6
    1e26:	7f 92       	push	r7
    1e28:	8f 92       	push	r8
    1e2a:	9f 92       	push	r9
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <HID_Device_USBTask+0x20>
    1e42:	1f 92       	push	r1
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    1e4a:	ad b6       	in	r10, 0x3d	; 61
    1e4c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1e4e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <HID_Device_USBTask+0x36>
    1e56:	74 c0       	rjmp	.+232    	; 0x1f40 <HID_Device_USBTask+0x11e>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1e58:	f7 01       	movw	r30, r14
    1e5a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e5c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1e60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1e64:	85 ff       	sbrs	r24, 5
    1e66:	6c c0       	rjmp	.+216    	; 0x1f40 <HID_Device_USBTask+0x11e>
	{
    1e68:	8d b6       	in	r8, 0x3d	; 61
    1e6a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1e6c:	47 81       	ldd	r20, Z+7	; 0x07
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	8d b7       	in	r24, 0x3d	; 61
    1e72:	9e b7       	in	r25, 0x3e	; 62
    1e74:	84 1b       	sub	r24, r20
    1e76:	95 0b       	sbc	r25, r21
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	9e bf       	out	0x3e, r25	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	8d bf       	out	0x3d, r24	; 61
    1e82:	ed b7       	in	r30, 0x3d	; 61
    1e84:	fe b7       	in	r31, 0x3e	; 62
    1e86:	31 96       	adiw	r30, 0x01	; 1
    1e88:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1e8a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1e8c:	1a 82       	std	Y+2, r1	; 0x02
    1e8e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	cf 01       	movw	r24, r30
    1e96:	51 d2       	rcall	.+1186   	; 0x233a <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1e98:	8e 01       	movw	r16, r28
    1e9a:	0f 5f       	subi	r16, 0xFF	; 255
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	96 01       	movw	r18, r12
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	be 01       	movw	r22, r28
    1ea4:	6d 5f       	subi	r22, 0xFD	; 253
    1ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea8:	c7 01       	movw	r24, r14
    1eaa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <CALLBACK_HID_Device_CreateHIDReport>
    1eae:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1eb0:	f7 01       	movw	r30, r14
    1eb2:	81 85       	ldd	r24, Z+9	; 0x09
    1eb4:	92 85       	ldd	r25, Z+10	; 0x0a
    1eb6:	89 2b       	or	r24, r25
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <HID_Device_USBTask+0xa2>
    1eba:	11 e0       	ldi	r17, 0x01	; 1
    1ebc:	83 85       	ldd	r24, Z+11	; 0x0b
    1ebe:	94 85       	ldd	r25, Z+12	; 0x0c
    1ec0:	89 2b       	or	r24, r25
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <HID_Device_USBTask+0xa4>
    1ec4:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1ec6:	f7 01       	movw	r30, r14
    1ec8:	65 80       	ldd	r6, Z+5	; 0x05
    1eca:	76 80       	ldd	r7, Z+6	; 0x06
    1ecc:	61 14       	cp	r6, r1
    1ece:	71 04       	cpc	r7, r1
    1ed0:	81 f0       	breq	.+32     	; 0x1ef2 <HID_Device_USBTask+0xd0>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1ed2:	49 81       	ldd	r20, Y+1	; 0x01
    1ed4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ed6:	b3 01       	movw	r22, r6
    1ed8:	c6 01       	movw	r24, r12
    1eda:	19 d2       	rcall	.+1074   	; 0x230e <memcmp>
    1edc:	01 e0       	ldi	r16, 0x01	; 1
    1ede:	89 2b       	or	r24, r25
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <HID_Device_USBTask+0xc2>
    1ee2:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	47 81       	ldd	r20, Z+7	; 0x07
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	b6 01       	movw	r22, r12
    1eec:	c3 01       	movw	r24, r6
    1eee:	1c d2       	rcall	.+1080   	; 0x2328 <memcpy>
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <HID_Device_USBTask+0xd2>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1ef2:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	89 2b       	or	r24, r25
    1efa:	e9 f0       	breq	.+58     	; 0x1f36 <HID_Device_USBTask+0x114>
    1efc:	51 10       	cpse	r5, r1
    1efe:	04 c0       	rjmp	.+8      	; 0x1f08 <HID_Device_USBTask+0xe6>
    1f00:	01 11       	cpse	r16, r1
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <HID_Device_USBTask+0xe6>
    1f04:	10 ff       	sbrs	r17, 0
    1f06:	17 c0       	rjmp	.+46     	; 0x1f36 <HID_Device_USBTask+0x114>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1f08:	f7 01       	movw	r30, r14
    1f0a:	81 85       	ldd	r24, Z+9	; 0x09
    1f0c:	92 85       	ldd	r25, Z+10	; 0x0a
    1f0e:	94 87       	std	Z+12, r25	; 0x0c
    1f10:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1f12:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f14:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1f20:	69 81       	ldd	r22, Y+1	; 0x01
    1f22:	7a 81       	ldd	r23, Y+2	; 0x02
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	c6 01       	movw	r24, r12
    1f2a:	08 d9       	rcall	.-3568   	; 0x113c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f30:	8e 77       	andi	r24, 0x7E	; 126
    1f32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	9e be       	out	0x3e, r9	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	be be       	out	0x3e, r11	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	ad be       	out	0x3d, r10	; 61
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	df 90       	pop	r13
    1f5e:	cf 90       	pop	r12
    1f60:	bf 90       	pop	r11
    1f62:	af 90       	pop	r10
    1f64:	9f 90       	pop	r9
    1f66:	8f 90       	pop	r8
    1f68:	7f 90       	pop	r7
    1f6a:	6f 90       	pop	r6
    1f6c:	5f 90       	pop	r5
    1f6e:	08 95       	ret

00001f70 <DCOMP_HID_Host_NextHIDInterface>:

		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		return USB_Host_SendControlRequest(Buffer);
	}
}
    1f70:	fc 01       	movw	r30, r24
    1f72:	21 81       	ldd	r18, Z+1	; 0x01
    1f74:	24 30       	cpi	r18, 0x04	; 4
    1f76:	29 f4       	brne	.+10     	; 0x1f82 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1f78:	85 81       	ldd	r24, Z+5	; 0x05
    1f7a:	83 30       	cpi	r24, 0x03	; 3
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	08 95       	ret
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	08 95       	ret

00001f86 <DCOMP_HID_Host_NextHIDDescriptor>:
    1f86:	fc 01       	movw	r30, r24
    1f88:	81 81       	ldd	r24, Z+1	; 0x01
    1f8a:	81 32       	cpi	r24, 0x21	; 33
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    1f8e:	84 30       	cpi	r24, 0x04	; 4
    1f90:	21 f0       	breq	.+8      	; 0x1f9a <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	08 95       	ret
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	08 95       	ret
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	08 95       	ret

00001f9e <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	21 81       	ldd	r18, Z+1	; 0x01
    1fa2:	25 30       	cpi	r18, 0x05	; 5
    1fa4:	39 f4       	brne	.+14     	; 0x1fb4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	0e 94 16 06 	call	0xc2c	; 0xc2c <Pipe_IsEndpointBound>
    1fac:	88 23       	and	r24, r24
    1fae:	31 f0       	breq	.+12     	; 0x1fbc <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	08 95       	ret
    1fb4:	24 30       	cpi	r18, 0x04	; 4
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	08 95       	ret
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	08 95       	ret

00001fc0 <HID_Host_ConfigurePipes>:
    1fc0:	2f 92       	push	r2
    1fc2:	3f 92       	push	r3
    1fc4:	4f 92       	push	r4
    1fc6:	5f 92       	push	r5
    1fc8:	6f 92       	push	r6
    1fca:	7f 92       	push	r7
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <HID_Host_ConfigurePipes+0x26>
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <HID_Host_ConfigurePipes+0x28>
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	7a 83       	std	Y+2, r23	; 0x02
    1fee:	69 83       	std	Y+1, r22	; 0x01
    1ff0:	5c 83       	std	Y+4, r21	; 0x04
    1ff2:	4b 83       	std	Y+3, r20	; 0x03
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	37 96       	adiw	r30, 0x07	; 7
    1ff8:	2c e0       	ldi	r18, 0x0C	; 12
    1ffa:	df 01       	movw	r26, r30
    1ffc:	1d 92       	st	X+, r1
    1ffe:	2a 95       	dec	r18
    2000:	e9 f7       	brne	.-6      	; 0x1ffc <HID_Host_ConfigurePipes+0x3c>
    2002:	eb 81       	ldd	r30, Y+3	; 0x03
    2004:	fc 81       	ldd	r31, Y+4	; 0x04
    2006:	11 81       	ldd	r17, Z+1	; 0x01
    2008:	12 30       	cpi	r17, 0x02	; 2
    200a:	09 f0       	breq	.+2      	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    200c:	7e c0       	rjmp	.+252    	; 0x210a <__stack+0xb>
    200e:	6c 01       	movw	r12, r24
    2010:	41 2c       	mov	r4, r1
    2012:	51 2c       	mov	r5, r1
    2014:	61 2c       	mov	r6, r1
    2016:	71 2c       	mov	r7, r1
    2018:	81 2c       	mov	r8, r1
    201a:	91 2c       	mov	r9, r1
    201c:	a1 2c       	mov	r10, r1
    201e:	b1 2c       	mov	r11, r1
    2020:	a1 14       	cp	r10, r1
    2022:	b1 04       	cpc	r11, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    2026:	75 c0       	rjmp	.+234    	; 0x2112 <__stack+0x13>
    2028:	81 14       	cp	r8, r1
    202a:	91 04       	cpc	r9, r1
    202c:	91 f4       	brne	.+36     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    202e:	61 14       	cp	r6, r1
    2030:	71 04       	cpc	r7, r1
    2032:	79 f0       	breq	.+30     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    2034:	4f ec       	ldi	r20, 0xCF	; 207
    2036:	5f e0       	ldi	r21, 0x0F	; 15
    2038:	be 01       	movw	r22, r28
    203a:	6d 5f       	subi	r22, 0xFD	; 253
    203c:	7f 4f       	sbci	r23, 0xFF	; 255
    203e:	ce 01       	movw	r24, r28
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	7b da       	rcall	.-2826   	; 0x153a <USB_GetNextDescriptorComp>
    2044:	88 23       	and	r24, r24
    2046:	09 f4       	brne	.+2      	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    2048:	90 c0       	rjmp	.+288    	; 0x216a <__stack+0x6b>
    204a:	a1 14       	cp	r10, r1
    204c:	b1 04       	cpc	r11, r1
    204e:	09 f4       	brne	.+2      	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    2050:	64 c0       	rjmp	.+200    	; 0x211a <__stack+0x1b>
    2052:	ff 24       	eor	r15, r15
    2054:	f3 94       	inc	r15
    2056:	22 24       	eor	r2, r2
    2058:	23 94       	inc	r2
    205a:	f6 01       	movw	r30, r12
    205c:	80 81       	ld	r24, Z
    205e:	8f 11       	cpse	r24, r15
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    2062:	d5 01       	movw	r26, r10
    2064:	14 96       	adiw	r26, 0x04	; 4
    2066:	0d 91       	ld	r16, X+
    2068:	1c 91       	ld	r17, X
    206a:	15 97       	sbiw	r26, 0x05	; 5
    206c:	12 96       	adiw	r26, 0x02	; 2
    206e:	2c 91       	ld	r18, X
    2070:	12 97       	sbiw	r26, 0x02	; 2
    2072:	81 81       	ldd	r24, Z+1	; 0x01
    2074:	16 96       	adiw	r26, 0x06	; 6
    2076:	3c 90       	ld	r3, X
    2078:	12 87       	std	Z+10, r17	; 0x0a
    207a:	01 87       	std	Z+9, r16	; 0x09
    207c:	40 e1       	ldi	r20, 0x10	; 16
    207e:	16 c0       	rjmp	.+44     	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    2080:	f6 01       	movw	r30, r12
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	8f 11       	cpse	r24, r15
    2086:	21 c0       	rjmp	.+66     	; 0x20ca <__DATA_REGION_LENGTH__+0xca>
    2088:	81 14       	cp	r8, r1
    208a:	91 04       	cpc	r9, r1
    208c:	f1 f0       	breq	.+60     	; 0x20ca <__DATA_REGION_LENGTH__+0xca>
    208e:	d4 01       	movw	r26, r8
    2090:	14 96       	adiw	r26, 0x04	; 4
    2092:	0d 91       	ld	r16, X+
    2094:	1c 91       	ld	r17, X
    2096:	15 97       	sbiw	r26, 0x05	; 5
    2098:	12 96       	adiw	r26, 0x02	; 2
    209a:	2c 91       	ld	r18, X
    209c:	12 97       	sbiw	r26, 0x02	; 2
    209e:	83 81       	ldd	r24, Z+3	; 0x03
    20a0:	16 96       	adiw	r26, 0x06	; 6
    20a2:	3c 90       	ld	r3, X
    20a4:	14 87       	std	Z+12, r17	; 0x0c
    20a6:	03 87       	std	Z+11, r16	; 0x0b
    20a8:	26 86       	std	Z+14, r2	; 0x0e
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	81 11       	cpse	r24, r1
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <__DATA_REGION_LENGTH__+0xb4>
    20b0:	e1 2c       	mov	r14, r1
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <__DATA_REGION_LENGTH__+0xb8>
    20b4:	84 e0       	ldi	r24, 0x04	; 4
    20b6:	e8 2e       	mov	r14, r24
    20b8:	63 e0       	ldi	r22, 0x03	; 3
    20ba:	8f 2d       	mov	r24, r15
    20bc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <Pipe_ConfigurePipe>
    20c0:	88 23       	and	r24, r24
    20c2:	29 f1       	breq	.+74     	; 0x210e <__stack+0xf>
    20c4:	31 10       	cpse	r3, r1
    20c6:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    20ca:	f3 94       	inc	r15
    20cc:	b7 e0       	ldi	r27, 0x07	; 7
    20ce:	fb 12       	cpse	r15, r27
    20d0:	c4 cf       	rjmp	.-120    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    20d2:	f3 01       	movw	r30, r6
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	d6 01       	movw	r26, r12
    20d8:	18 96       	adiw	r26, 0x08	; 8
    20da:	8c 93       	st	X, r24
    20dc:	18 97       	sbiw	r26, 0x08	; 8
    20de:	f2 01       	movw	r30, r4
    20e0:	87 81       	ldd	r24, Z+7	; 0x07
    20e2:	90 85       	ldd	r25, Z+8	; 0x08
    20e4:	51 96       	adiw	r26, 0x11	; 17
    20e6:	9c 93       	st	X, r25
    20e8:	8e 93       	st	-X, r24
    20ea:	50 97       	sbiw	r26, 0x10	; 16
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	d3 01       	movw	r26, r6
    20f0:	16 96       	adiw	r26, 0x06	; 6
    20f2:	9c 91       	ld	r25, X
    20f4:	91 11       	cpse	r25, r1
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	f6 01       	movw	r30, r12
    20fc:	85 87       	std	Z+13, r24	; 0x0d
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	82 8b       	std	Z+18, r24	; 0x12
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	87 83       	std	Z+7, r24	; 0x07
    2106:	10 e0       	ldi	r17, 0x00	; 0
    2108:	3c c0       	rjmp	.+120    	; 0x2182 <__stack+0x83>
    210a:	11 e0       	ldi	r17, 0x01	; 1
    210c:	3a c0       	rjmp	.+116    	; 0x2182 <__stack+0x83>
    210e:	13 e0       	ldi	r17, 0x03	; 3
    2110:	38 c0       	rjmp	.+112    	; 0x2182 <__stack+0x83>
    2112:	61 14       	cp	r6, r1
    2114:	71 04       	cpc	r7, r1
    2116:	09 f0       	breq	.+2      	; 0x211a <__stack+0x1b>
    2118:	8d cf       	rjmp	.-230    	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    211a:	81 14       	cp	r8, r1
    211c:	91 04       	cpc	r9, r1
    211e:	71 f5       	brne	.+92     	; 0x217c <__stack+0x7d>
    2120:	48 eb       	ldi	r20, 0xB8	; 184
    2122:	5f e0       	ldi	r21, 0x0F	; 15
    2124:	be 01       	movw	r22, r28
    2126:	6d 5f       	subi	r22, 0xFD	; 253
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	05 da       	rcall	.-3062   	; 0x153a <USB_GetNextDescriptorComp>
    2130:	81 11       	cpse	r24, r1
    2132:	27 c0       	rjmp	.+78     	; 0x2182 <__stack+0x83>
    2134:	6b 80       	ldd	r6, Y+3	; 0x03
    2136:	7c 80       	ldd	r7, Y+4	; 0x04
    2138:	f6 01       	movw	r30, r12
    213a:	84 81       	ldd	r24, Z+4	; 0x04
    213c:	81 11       	cpse	r24, r1
    213e:	0f c0       	rjmp	.+30     	; 0x215e <__stack+0x5f>
    2140:	43 ec       	ldi	r20, 0xC3	; 195
    2142:	5f e0       	ldi	r21, 0x0F	; 15
    2144:	be 01       	movw	r22, r28
    2146:	6d 5f       	subi	r22, 0xFD	; 253
    2148:	7f 4f       	sbci	r23, 0xFF	; 255
    214a:	ce 01       	movw	r24, r28
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	f5 d9       	rcall	.-3094   	; 0x153a <USB_GetNextDescriptorComp>
    2150:	81 11       	cpse	r24, r1
    2152:	17 c0       	rjmp	.+46     	; 0x2182 <__stack+0x83>
    2154:	4b 80       	ldd	r4, Y+3	; 0x03
    2156:	5c 80       	ldd	r5, Y+4	; 0x04
    2158:	e0 e0       	ldi	r30, 0x00	; 0
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	0d c0       	rjmp	.+26     	; 0x2178 <__stack+0x79>
    215e:	d3 01       	movw	r26, r6
    2160:	17 96       	adiw	r26, 0x07	; 7
    2162:	9c 91       	ld	r25, X
    2164:	89 13       	cpse	r24, r25
    2166:	dc cf       	rjmp	.-72     	; 0x2120 <__stack+0x21>
    2168:	eb cf       	rjmp	.-42     	; 0x2140 <__stack+0x41>
    216a:	eb 81       	ldd	r30, Y+3	; 0x03
    216c:	fc 81       	ldd	r31, Y+4	; 0x04
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	87 fd       	sbrc	r24, 7
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <__stack+0x79>
    2174:	4f 01       	movw	r8, r30
    2176:	f5 01       	movw	r30, r10
    2178:	5f 01       	movw	r10, r30
    217a:	52 cf       	rjmp	.-348    	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    217c:	a1 2c       	mov	r10, r1
    217e:	b1 2c       	mov	r11, r1
    2180:	68 cf       	rjmp	.-304    	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    2182:	81 2f       	mov	r24, r17
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	7f 90       	pop	r7
    21a6:	6f 90       	pop	r6
    21a8:	5f 90       	pop	r5
    21aa:	4f 90       	pop	r4
    21ac:	3f 90       	pop	r3
    21ae:	2f 90       	pop	r2
    21b0:	08 95       	ret

000021b2 <HID_Host_ReceiveReport>:
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	fc 01       	movw	r30, r24
    21b8:	eb 01       	movw	r28, r22
    21ba:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <USB_HostState>
    21be:	8b 30       	cpi	r24, 0x0B	; 11
    21c0:	b9 f5       	brne	.+110    	; 0x2230 <HID_Host_ReceiveReport+0x7e>
    21c2:	87 81       	ldd	r24, Z+7	; 0x07
    21c4:	88 23       	and	r24, r24
    21c6:	a1 f1       	breq	.+104    	; 0x2230 <HID_Host_ReceiveReport+0x7e>
    21c8:	80 81       	ld	r24, Z
    21ca:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    21ce:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    21d2:	8f 7b       	andi	r24, 0xBF	; 191
    21d4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    21d8:	87 85       	ldd	r24, Z+15	; 0x0f
    21da:	81 11       	cpse	r24, r1
    21dc:	12 c0       	rjmp	.+36     	; 0x2202 <HID_Host_ReceiveReport+0x50>
    21de:	a5 81       	ldd	r26, Z+5	; 0x05
    21e0:	b6 81       	ldd	r27, Z+6	; 0x06
    21e2:	a8 52       	subi	r26, 0x28	; 40
    21e4:	bc 4f       	sbci	r27, 0xFC	; 252
    21e6:	8c 91       	ld	r24, X
    21e8:	88 23       	and	r24, r24
    21ea:	29 f0       	breq	.+10     	; 0x21f6 <HID_Host_ReceiveReport+0x44>
    21ec:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    21f0:	68 83       	st	Y, r22
    21f2:	21 96       	adiw	r28, 0x01	; 1
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <HID_Host_ReceiveReport+0x46>
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	85 81       	ldd	r24, Z+5	; 0x05
    21fc:	96 81       	ldd	r25, Z+6	; 0x06
    21fe:	8e dc       	rcall	.-1764   	; 0x1b1c <USB_GetHIDReportSize>
    2200:	04 c0       	rjmp	.+8      	; 0x220a <HID_Host_ReceiveReport+0x58>
    2202:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    2206:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	bc 01       	movw	r22, r24
    2210:	ce 01       	movw	r24, r28
    2212:	cd d8       	rcall	.-3686   	; 0x13ae <Pipe_Read_Stream_LE>
    2214:	81 11       	cpse	r24, r1
    2216:	0d c0       	rjmp	.+26     	; 0x2232 <HID_Host_ReceiveReport+0x80>
    2218:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    221c:	8e 77       	andi	r24, 0x7E	; 126
    221e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    2222:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2226:	80 64       	ori	r24, 0x40	; 64
    2228:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <HID_Host_ReceiveReport+0x80>
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

00002238 <HID_Host_IsReportReceived>:

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    2238:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    223a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <USB_HostState>
    223e:	8b 30       	cpi	r24, 0x0B	; 11
    2240:	a1 f4       	brne	.+40     	; 0x226a <HID_Host_IsReportReceived+0x32>
    2242:	87 81       	ldd	r24, Z+7	; 0x07
    2244:	88 23       	and	r24, r24
    2246:	91 f0       	breq	.+36     	; 0x226c <HID_Host_IsReportReceived+0x34>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    2248:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    224a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    224e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2252:	8f 7b       	andi	r24, 0xBF	; 191
    2254:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    2258:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    225c:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    225e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2262:	90 64       	ori	r25, 0x40	; 64
    2264:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    2268:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    226a:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    226c:	08 95       	ret

0000226e <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    2272:	fc 01       	movw	r30, r24
    2274:	25 85       	ldd	r18, Z+13	; 0x0d
    2276:	22 23       	and	r18, r18
    2278:	11 f1       	breq	.+68     	; 0x22be <HID_Host_SetBootProtocol+0x50>
    227a:	ec 01       	movw	r28, r24
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    227c:	80 85       	ldd	r24, Z+8	; 0x08
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	21 e2       	ldi	r18, 0x21	; 33
    2282:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <USB_ControlRequest>
    2286:	2b e0       	ldi	r18, 0x0B	; 11
    2288:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <USB_ControlRequest+0x1>
    228c:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <USB_ControlRequest+0x3>
    2290:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <USB_ControlRequest+0x2>
    2294:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <USB_ControlRequest+0x5>
    2298:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <USB_ControlRequest+0x4>
    229c:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <USB_ControlRequest+0x7>
    22a0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    22a4:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	f4 da       	rcall	.-2584   	; 0x1896 <USB_Host_SendControlRequest>
    22ae:	81 11       	cpse	r24, r1
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <HID_Host_SetBootProtocol+0x52>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    22b2:	88 e0       	ldi	r24, 0x08	; 8
    22b4:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <HID_Host_SetBootProtocol+0x52>
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    22be:	80 e8       	ldi	r24, 0x80	; 128

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    22c6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    22ca:	95 ff       	sbrs	r25, 5
    22cc:	fc cf       	rjmp	.-8      	; 0x22c6 <Serial_putchar>
				UDR1 = DataByte;
    22ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	08 95       	ret

000022d8 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    22d8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    22dc:	87 ff       	sbrs	r24, 7
    22de:	08 c0       	rjmp	.+16     	; 0x22f0 <Serial_getchar+0x18>
    22e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    22e4:	87 ff       	sbrs	r24, 7
    22e6:	07 c0       	rjmp	.+14     	; 0x22f6 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    22e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	08 95       	ret
	  return _FDEV_EOF;
    22f0:	8e ef       	ldi	r24, 0xFE	; 254
    22f2:	9f ef       	ldi	r25, 0xFF	; 255
    22f4:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    22f6:	8f ef       	ldi	r24, 0xFF	; 255
    22f8:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    22fa:	08 95       	ret

000022fc <__tablejump2__>:
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	00 24       	eor	r0, r0
    2302:	00 1c       	adc	r0, r0
    2304:	0b be       	out	0x3b, r0	; 59
    2306:	07 90       	elpm	r0, Z+
    2308:	f6 91       	elpm	r31, Z
    230a:	e0 2d       	mov	r30, r0
    230c:	09 94       	ijmp

0000230e <memcmp>:
    230e:	fb 01       	movw	r30, r22
    2310:	dc 01       	movw	r26, r24
    2312:	04 c0       	rjmp	.+8      	; 0x231c <memcmp+0xe>
    2314:	8d 91       	ld	r24, X+
    2316:	01 90       	ld	r0, Z+
    2318:	80 19       	sub	r24, r0
    231a:	21 f4       	brne	.+8      	; 0x2324 <memcmp+0x16>
    231c:	41 50       	subi	r20, 0x01	; 1
    231e:	50 40       	sbci	r21, 0x00	; 0
    2320:	c8 f7       	brcc	.-14     	; 0x2314 <memcmp+0x6>
    2322:	88 1b       	sub	r24, r24
    2324:	99 0b       	sbc	r25, r25
    2326:	08 95       	ret

00002328 <memcpy>:
    2328:	fb 01       	movw	r30, r22
    232a:	dc 01       	movw	r26, r24
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <memcpy+0xa>
    232e:	01 90       	ld	r0, Z+
    2330:	0d 92       	st	X+, r0
    2332:	41 50       	subi	r20, 0x01	; 1
    2334:	50 40       	sbci	r21, 0x00	; 0
    2336:	d8 f7       	brcc	.-10     	; 0x232e <memcpy+0x6>
    2338:	08 95       	ret

0000233a <memset>:
    233a:	dc 01       	movw	r26, r24
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <memset+0x6>
    233e:	6d 93       	st	X+, r22
    2340:	41 50       	subi	r20, 0x01	; 1
    2342:	50 40       	sbci	r21, 0x00	; 0
    2344:	e0 f7       	brcc	.-8      	; 0x233e <memset+0x4>
    2346:	08 95       	ret

00002348 <printf_P>:
    2348:	0f 93       	push	r16
    234a:	1f 93       	push	r17
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	ae 01       	movw	r20, r28
    2356:	49 5f       	subi	r20, 0xF9	; 249
    2358:	5f 4f       	sbci	r21, 0xFF	; 255
    235a:	da 01       	movw	r26, r20
    235c:	6d 91       	ld	r22, X+
    235e:	7d 91       	ld	r23, X+
    2360:	ad 01       	movw	r20, r26
    2362:	00 e0       	ldi	r16, 0x00	; 0
    2364:	12 e0       	ldi	r17, 0x02	; 2
    2366:	f8 01       	movw	r30, r16
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	dc 01       	movw	r26, r24
    236e:	13 96       	adiw	r26, 0x03	; 3
    2370:	2c 91       	ld	r18, X
    2372:	13 97       	sbiw	r26, 0x03	; 3
    2374:	28 60       	ori	r18, 0x08	; 8
    2376:	13 96       	adiw	r26, 0x03	; 3
    2378:	2c 93       	st	X, r18
    237a:	6e d0       	rcall	.+220    	; 0x2458 <vfprintf>
    237c:	d8 01       	movw	r26, r16
    237e:	12 96       	adiw	r26, 0x02	; 2
    2380:	ed 91       	ld	r30, X+
    2382:	fc 91       	ld	r31, X
    2384:	13 97       	sbiw	r26, 0x03	; 3
    2386:	23 81       	ldd	r18, Z+3	; 0x03
    2388:	27 7f       	andi	r18, 0xF7	; 247
    238a:	23 83       	std	Z+3, r18	; 0x03
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	08 95       	ret

00002396 <puts>:
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__iob+0x2>
    23a2:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__iob+0x3>
    23a6:	23 81       	ldd	r18, Z+3	; 0x03
    23a8:	21 ff       	sbrs	r18, 1
    23aa:	1b c0       	rjmp	.+54     	; 0x23e2 <puts+0x4c>
    23ac:	8c 01       	movw	r16, r24
    23ae:	d0 e0       	ldi	r29, 0x00	; 0
    23b0:	c0 e0       	ldi	r28, 0x00	; 0
    23b2:	f8 01       	movw	r30, r16
    23b4:	81 91       	ld	r24, Z+
    23b6:	8f 01       	movw	r16, r30
    23b8:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__iob+0x2>
    23bc:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__iob+0x3>
    23c0:	db 01       	movw	r26, r22
    23c2:	18 96       	adiw	r26, 0x08	; 8
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	19 97       	sbiw	r26, 0x09	; 9
    23ca:	88 23       	and	r24, r24
    23cc:	31 f0       	breq	.+12     	; 0x23da <puts+0x44>
    23ce:	09 95       	icall
    23d0:	89 2b       	or	r24, r25
    23d2:	79 f3       	breq	.-34     	; 0x23b2 <puts+0x1c>
    23d4:	df ef       	ldi	r29, 0xFF	; 255
    23d6:	cf ef       	ldi	r28, 0xFF	; 255
    23d8:	ec cf       	rjmp	.-40     	; 0x23b2 <puts+0x1c>
    23da:	8a e0       	ldi	r24, 0x0A	; 10
    23dc:	09 95       	icall
    23de:	89 2b       	or	r24, r25
    23e0:	19 f0       	breq	.+6      	; 0x23e8 <puts+0x52>
    23e2:	8f ef       	ldi	r24, 0xFF	; 255
    23e4:	9f ef       	ldi	r25, 0xFF	; 255
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <puts+0x56>
    23e8:	8d 2f       	mov	r24, r29
    23ea:	9c 2f       	mov	r25, r28
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	08 95       	ret

000023f6 <puts_P>:
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	8c 01       	movw	r16, r24
    2400:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__iob+0x2>
    2404:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__iob+0x3>
    2408:	83 81       	ldd	r24, Z+3	; 0x03
    240a:	81 ff       	sbrs	r24, 1
    240c:	1b c0       	rjmp	.+54     	; 0x2444 <puts_P+0x4e>
    240e:	d0 e0       	ldi	r29, 0x00	; 0
    2410:	c0 e0       	ldi	r28, 0x00	; 0
    2412:	f8 01       	movw	r30, r16
    2414:	84 91       	lpm	r24, Z
    2416:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__iob+0x2>
    241a:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__iob+0x3>
    241e:	db 01       	movw	r26, r22
    2420:	18 96       	adiw	r26, 0x08	; 8
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	19 97       	sbiw	r26, 0x09	; 9
    2428:	88 23       	and	r24, r24
    242a:	41 f0       	breq	.+16     	; 0x243c <puts_P+0x46>
    242c:	09 95       	icall
    242e:	89 2b       	or	r24, r25
    2430:	11 f0       	breq	.+4      	; 0x2436 <puts_P+0x40>
    2432:	df ef       	ldi	r29, 0xFF	; 255
    2434:	cf ef       	ldi	r28, 0xFF	; 255
    2436:	0f 5f       	subi	r16, 0xFF	; 255
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	eb cf       	rjmp	.-42     	; 0x2412 <puts_P+0x1c>
    243c:	8a e0       	ldi	r24, 0x0A	; 10
    243e:	09 95       	icall
    2440:	89 2b       	or	r24, r25
    2442:	19 f0       	breq	.+6      	; 0x244a <puts_P+0x54>
    2444:	8f ef       	ldi	r24, 0xFF	; 255
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	02 c0       	rjmp	.+4      	; 0x244e <puts_P+0x58>
    244a:	8d 2f       	mov	r24, r29
    244c:	9c 2f       	mov	r25, r28
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	08 95       	ret

00002458 <vfprintf>:
    2458:	2f 92       	push	r2
    245a:	3f 92       	push	r3
    245c:	4f 92       	push	r4
    245e:	5f 92       	push	r5
    2460:	6f 92       	push	r6
    2462:	7f 92       	push	r7
    2464:	8f 92       	push	r8
    2466:	9f 92       	push	r9
    2468:	af 92       	push	r10
    246a:	bf 92       	push	r11
    246c:	cf 92       	push	r12
    246e:	df 92       	push	r13
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	2b 97       	sbiw	r28, 0x0b	; 11
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	6c 01       	movw	r12, r24
    248e:	7b 01       	movw	r14, r22
    2490:	8a 01       	movw	r16, r20
    2492:	fc 01       	movw	r30, r24
    2494:	17 82       	std	Z+7, r1	; 0x07
    2496:	16 82       	std	Z+6, r1	; 0x06
    2498:	83 81       	ldd	r24, Z+3	; 0x03
    249a:	81 ff       	sbrs	r24, 1
    249c:	bf c1       	rjmp	.+894    	; 0x281c <vfprintf+0x3c4>
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	3c 01       	movw	r6, r24
    24a4:	f6 01       	movw	r30, r12
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	f7 01       	movw	r30, r14
    24aa:	93 fd       	sbrc	r25, 3
    24ac:	85 91       	lpm	r24, Z+
    24ae:	93 ff       	sbrs	r25, 3
    24b0:	81 91       	ld	r24, Z+
    24b2:	7f 01       	movw	r14, r30
    24b4:	88 23       	and	r24, r24
    24b6:	09 f4       	brne	.+2      	; 0x24ba <vfprintf+0x62>
    24b8:	ad c1       	rjmp	.+858    	; 0x2814 <vfprintf+0x3bc>
    24ba:	85 32       	cpi	r24, 0x25	; 37
    24bc:	39 f4       	brne	.+14     	; 0x24cc <vfprintf+0x74>
    24be:	93 fd       	sbrc	r25, 3
    24c0:	85 91       	lpm	r24, Z+
    24c2:	93 ff       	sbrs	r25, 3
    24c4:	81 91       	ld	r24, Z+
    24c6:	7f 01       	movw	r14, r30
    24c8:	85 32       	cpi	r24, 0x25	; 37
    24ca:	21 f4       	brne	.+8      	; 0x24d4 <vfprintf+0x7c>
    24cc:	b6 01       	movw	r22, r12
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	d6 d1       	rcall	.+940    	; 0x287e <fputc>
    24d2:	e8 cf       	rjmp	.-48     	; 0x24a4 <vfprintf+0x4c>
    24d4:	91 2c       	mov	r9, r1
    24d6:	21 2c       	mov	r2, r1
    24d8:	31 2c       	mov	r3, r1
    24da:	ff e1       	ldi	r31, 0x1F	; 31
    24dc:	f3 15       	cp	r31, r3
    24de:	d8 f0       	brcs	.+54     	; 0x2516 <vfprintf+0xbe>
    24e0:	8b 32       	cpi	r24, 0x2B	; 43
    24e2:	79 f0       	breq	.+30     	; 0x2502 <vfprintf+0xaa>
    24e4:	38 f4       	brcc	.+14     	; 0x24f4 <vfprintf+0x9c>
    24e6:	80 32       	cpi	r24, 0x20	; 32
    24e8:	79 f0       	breq	.+30     	; 0x2508 <vfprintf+0xb0>
    24ea:	83 32       	cpi	r24, 0x23	; 35
    24ec:	a1 f4       	brne	.+40     	; 0x2516 <vfprintf+0xbe>
    24ee:	23 2d       	mov	r18, r3
    24f0:	20 61       	ori	r18, 0x10	; 16
    24f2:	1d c0       	rjmp	.+58     	; 0x252e <vfprintf+0xd6>
    24f4:	8d 32       	cpi	r24, 0x2D	; 45
    24f6:	61 f0       	breq	.+24     	; 0x2510 <vfprintf+0xb8>
    24f8:	80 33       	cpi	r24, 0x30	; 48
    24fa:	69 f4       	brne	.+26     	; 0x2516 <vfprintf+0xbe>
    24fc:	23 2d       	mov	r18, r3
    24fe:	21 60       	ori	r18, 0x01	; 1
    2500:	16 c0       	rjmp	.+44     	; 0x252e <vfprintf+0xd6>
    2502:	83 2d       	mov	r24, r3
    2504:	82 60       	ori	r24, 0x02	; 2
    2506:	38 2e       	mov	r3, r24
    2508:	e3 2d       	mov	r30, r3
    250a:	e4 60       	ori	r30, 0x04	; 4
    250c:	3e 2e       	mov	r3, r30
    250e:	2a c0       	rjmp	.+84     	; 0x2564 <vfprintf+0x10c>
    2510:	f3 2d       	mov	r31, r3
    2512:	f8 60       	ori	r31, 0x08	; 8
    2514:	1d c0       	rjmp	.+58     	; 0x2550 <vfprintf+0xf8>
    2516:	37 fc       	sbrc	r3, 7
    2518:	2d c0       	rjmp	.+90     	; 0x2574 <vfprintf+0x11c>
    251a:	20 ed       	ldi	r18, 0xD0	; 208
    251c:	28 0f       	add	r18, r24
    251e:	2a 30       	cpi	r18, 0x0A	; 10
    2520:	40 f0       	brcs	.+16     	; 0x2532 <vfprintf+0xda>
    2522:	8e 32       	cpi	r24, 0x2E	; 46
    2524:	b9 f4       	brne	.+46     	; 0x2554 <vfprintf+0xfc>
    2526:	36 fc       	sbrc	r3, 6
    2528:	75 c1       	rjmp	.+746    	; 0x2814 <vfprintf+0x3bc>
    252a:	23 2d       	mov	r18, r3
    252c:	20 64       	ori	r18, 0x40	; 64
    252e:	32 2e       	mov	r3, r18
    2530:	19 c0       	rjmp	.+50     	; 0x2564 <vfprintf+0x10c>
    2532:	36 fe       	sbrs	r3, 6
    2534:	06 c0       	rjmp	.+12     	; 0x2542 <vfprintf+0xea>
    2536:	8a e0       	ldi	r24, 0x0A	; 10
    2538:	98 9e       	mul	r9, r24
    253a:	20 0d       	add	r18, r0
    253c:	11 24       	eor	r1, r1
    253e:	92 2e       	mov	r9, r18
    2540:	11 c0       	rjmp	.+34     	; 0x2564 <vfprintf+0x10c>
    2542:	ea e0       	ldi	r30, 0x0A	; 10
    2544:	2e 9e       	mul	r2, r30
    2546:	20 0d       	add	r18, r0
    2548:	11 24       	eor	r1, r1
    254a:	22 2e       	mov	r2, r18
    254c:	f3 2d       	mov	r31, r3
    254e:	f0 62       	ori	r31, 0x20	; 32
    2550:	3f 2e       	mov	r3, r31
    2552:	08 c0       	rjmp	.+16     	; 0x2564 <vfprintf+0x10c>
    2554:	8c 36       	cpi	r24, 0x6C	; 108
    2556:	21 f4       	brne	.+8      	; 0x2560 <vfprintf+0x108>
    2558:	83 2d       	mov	r24, r3
    255a:	80 68       	ori	r24, 0x80	; 128
    255c:	38 2e       	mov	r3, r24
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <vfprintf+0x10c>
    2560:	88 36       	cpi	r24, 0x68	; 104
    2562:	41 f4       	brne	.+16     	; 0x2574 <vfprintf+0x11c>
    2564:	f7 01       	movw	r30, r14
    2566:	93 fd       	sbrc	r25, 3
    2568:	85 91       	lpm	r24, Z+
    256a:	93 ff       	sbrs	r25, 3
    256c:	81 91       	ld	r24, Z+
    256e:	7f 01       	movw	r14, r30
    2570:	81 11       	cpse	r24, r1
    2572:	b3 cf       	rjmp	.-154    	; 0x24da <vfprintf+0x82>
    2574:	98 2f       	mov	r25, r24
    2576:	9f 7d       	andi	r25, 0xDF	; 223
    2578:	95 54       	subi	r25, 0x45	; 69
    257a:	93 30       	cpi	r25, 0x03	; 3
    257c:	28 f4       	brcc	.+10     	; 0x2588 <vfprintf+0x130>
    257e:	0c 5f       	subi	r16, 0xFC	; 252
    2580:	1f 4f       	sbci	r17, 0xFF	; 255
    2582:	9f e3       	ldi	r25, 0x3F	; 63
    2584:	99 83       	std	Y+1, r25	; 0x01
    2586:	0d c0       	rjmp	.+26     	; 0x25a2 <vfprintf+0x14a>
    2588:	83 36       	cpi	r24, 0x63	; 99
    258a:	31 f0       	breq	.+12     	; 0x2598 <vfprintf+0x140>
    258c:	83 37       	cpi	r24, 0x73	; 115
    258e:	71 f0       	breq	.+28     	; 0x25ac <vfprintf+0x154>
    2590:	83 35       	cpi	r24, 0x53	; 83
    2592:	09 f0       	breq	.+2      	; 0x2596 <vfprintf+0x13e>
    2594:	55 c0       	rjmp	.+170    	; 0x2640 <vfprintf+0x1e8>
    2596:	20 c0       	rjmp	.+64     	; 0x25d8 <vfprintf+0x180>
    2598:	f8 01       	movw	r30, r16
    259a:	80 81       	ld	r24, Z
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	0e 5f       	subi	r16, 0xFE	; 254
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	88 24       	eor	r8, r8
    25a4:	83 94       	inc	r8
    25a6:	91 2c       	mov	r9, r1
    25a8:	53 01       	movw	r10, r6
    25aa:	12 c0       	rjmp	.+36     	; 0x25d0 <vfprintf+0x178>
    25ac:	28 01       	movw	r4, r16
    25ae:	f2 e0       	ldi	r31, 0x02	; 2
    25b0:	4f 0e       	add	r4, r31
    25b2:	51 1c       	adc	r5, r1
    25b4:	f8 01       	movw	r30, r16
    25b6:	a0 80       	ld	r10, Z
    25b8:	b1 80       	ldd	r11, Z+1	; 0x01
    25ba:	36 fe       	sbrs	r3, 6
    25bc:	03 c0       	rjmp	.+6      	; 0x25c4 <vfprintf+0x16c>
    25be:	69 2d       	mov	r22, r9
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <vfprintf+0x170>
    25c4:	6f ef       	ldi	r22, 0xFF	; 255
    25c6:	7f ef       	ldi	r23, 0xFF	; 255
    25c8:	c5 01       	movw	r24, r10
    25ca:	4e d1       	rcall	.+668    	; 0x2868 <strnlen>
    25cc:	4c 01       	movw	r8, r24
    25ce:	82 01       	movw	r16, r4
    25d0:	f3 2d       	mov	r31, r3
    25d2:	ff 77       	andi	r31, 0x7F	; 127
    25d4:	3f 2e       	mov	r3, r31
    25d6:	15 c0       	rjmp	.+42     	; 0x2602 <vfprintf+0x1aa>
    25d8:	28 01       	movw	r4, r16
    25da:	22 e0       	ldi	r18, 0x02	; 2
    25dc:	42 0e       	add	r4, r18
    25de:	51 1c       	adc	r5, r1
    25e0:	f8 01       	movw	r30, r16
    25e2:	a0 80       	ld	r10, Z
    25e4:	b1 80       	ldd	r11, Z+1	; 0x01
    25e6:	36 fe       	sbrs	r3, 6
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <vfprintf+0x198>
    25ea:	69 2d       	mov	r22, r9
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <vfprintf+0x19c>
    25f0:	6f ef       	ldi	r22, 0xFF	; 255
    25f2:	7f ef       	ldi	r23, 0xFF	; 255
    25f4:	c5 01       	movw	r24, r10
    25f6:	2d d1       	rcall	.+602    	; 0x2852 <strnlen_P>
    25f8:	4c 01       	movw	r8, r24
    25fa:	f3 2d       	mov	r31, r3
    25fc:	f0 68       	ori	r31, 0x80	; 128
    25fe:	3f 2e       	mov	r3, r31
    2600:	82 01       	movw	r16, r4
    2602:	33 fc       	sbrc	r3, 3
    2604:	19 c0       	rjmp	.+50     	; 0x2638 <vfprintf+0x1e0>
    2606:	82 2d       	mov	r24, r2
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	88 16       	cp	r8, r24
    260c:	99 06       	cpc	r9, r25
    260e:	a0 f4       	brcc	.+40     	; 0x2638 <vfprintf+0x1e0>
    2610:	b6 01       	movw	r22, r12
    2612:	80 e2       	ldi	r24, 0x20	; 32
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	33 d1       	rcall	.+614    	; 0x287e <fputc>
    2618:	2a 94       	dec	r2
    261a:	f5 cf       	rjmp	.-22     	; 0x2606 <vfprintf+0x1ae>
    261c:	f5 01       	movw	r30, r10
    261e:	37 fc       	sbrc	r3, 7
    2620:	85 91       	lpm	r24, Z+
    2622:	37 fe       	sbrs	r3, 7
    2624:	81 91       	ld	r24, Z+
    2626:	5f 01       	movw	r10, r30
    2628:	b6 01       	movw	r22, r12
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	28 d1       	rcall	.+592    	; 0x287e <fputc>
    262e:	21 10       	cpse	r2, r1
    2630:	2a 94       	dec	r2
    2632:	21 e0       	ldi	r18, 0x01	; 1
    2634:	82 1a       	sub	r8, r18
    2636:	91 08       	sbc	r9, r1
    2638:	81 14       	cp	r8, r1
    263a:	91 04       	cpc	r9, r1
    263c:	79 f7       	brne	.-34     	; 0x261c <vfprintf+0x1c4>
    263e:	e1 c0       	rjmp	.+450    	; 0x2802 <vfprintf+0x3aa>
    2640:	84 36       	cpi	r24, 0x64	; 100
    2642:	11 f0       	breq	.+4      	; 0x2648 <vfprintf+0x1f0>
    2644:	89 36       	cpi	r24, 0x69	; 105
    2646:	39 f5       	brne	.+78     	; 0x2696 <vfprintf+0x23e>
    2648:	f8 01       	movw	r30, r16
    264a:	37 fe       	sbrs	r3, 7
    264c:	07 c0       	rjmp	.+14     	; 0x265c <vfprintf+0x204>
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	0c 5f       	subi	r16, 0xFC	; 252
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	08 c0       	rjmp	.+16     	; 0x266c <vfprintf+0x214>
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	07 2e       	mov	r0, r23
    2662:	00 0c       	add	r0, r0
    2664:	88 0b       	sbc	r24, r24
    2666:	99 0b       	sbc	r25, r25
    2668:	0e 5f       	subi	r16, 0xFE	; 254
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	f3 2d       	mov	r31, r3
    266e:	ff 76       	andi	r31, 0x6F	; 111
    2670:	3f 2e       	mov	r3, r31
    2672:	97 ff       	sbrs	r25, 7
    2674:	09 c0       	rjmp	.+18     	; 0x2688 <vfprintf+0x230>
    2676:	90 95       	com	r25
    2678:	80 95       	com	r24
    267a:	70 95       	com	r23
    267c:	61 95       	neg	r22
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	8f 4f       	sbci	r24, 0xFF	; 255
    2682:	9f 4f       	sbci	r25, 0xFF	; 255
    2684:	f0 68       	ori	r31, 0x80	; 128
    2686:	3f 2e       	mov	r3, r31
    2688:	2a e0       	ldi	r18, 0x0A	; 10
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	a3 01       	movw	r20, r6
    268e:	33 d1       	rcall	.+614    	; 0x28f6 <__ultoa_invert>
    2690:	88 2e       	mov	r8, r24
    2692:	86 18       	sub	r8, r6
    2694:	44 c0       	rjmp	.+136    	; 0x271e <vfprintf+0x2c6>
    2696:	85 37       	cpi	r24, 0x75	; 117
    2698:	31 f4       	brne	.+12     	; 0x26a6 <vfprintf+0x24e>
    269a:	23 2d       	mov	r18, r3
    269c:	2f 7e       	andi	r18, 0xEF	; 239
    269e:	b2 2e       	mov	r11, r18
    26a0:	2a e0       	ldi	r18, 0x0A	; 10
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	25 c0       	rjmp	.+74     	; 0x26f0 <vfprintf+0x298>
    26a6:	93 2d       	mov	r25, r3
    26a8:	99 7f       	andi	r25, 0xF9	; 249
    26aa:	b9 2e       	mov	r11, r25
    26ac:	8f 36       	cpi	r24, 0x6F	; 111
    26ae:	c1 f0       	breq	.+48     	; 0x26e0 <vfprintf+0x288>
    26b0:	18 f4       	brcc	.+6      	; 0x26b8 <vfprintf+0x260>
    26b2:	88 35       	cpi	r24, 0x58	; 88
    26b4:	79 f0       	breq	.+30     	; 0x26d4 <vfprintf+0x27c>
    26b6:	ae c0       	rjmp	.+348    	; 0x2814 <vfprintf+0x3bc>
    26b8:	80 37       	cpi	r24, 0x70	; 112
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <vfprintf+0x26a>
    26bc:	88 37       	cpi	r24, 0x78	; 120
    26be:	21 f0       	breq	.+8      	; 0x26c8 <vfprintf+0x270>
    26c0:	a9 c0       	rjmp	.+338    	; 0x2814 <vfprintf+0x3bc>
    26c2:	e9 2f       	mov	r30, r25
    26c4:	e0 61       	ori	r30, 0x10	; 16
    26c6:	be 2e       	mov	r11, r30
    26c8:	b4 fe       	sbrs	r11, 4
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <vfprintf+0x28e>
    26cc:	fb 2d       	mov	r31, r11
    26ce:	f4 60       	ori	r31, 0x04	; 4
    26d0:	bf 2e       	mov	r11, r31
    26d2:	09 c0       	rjmp	.+18     	; 0x26e6 <vfprintf+0x28e>
    26d4:	34 fe       	sbrs	r3, 4
    26d6:	0a c0       	rjmp	.+20     	; 0x26ec <vfprintf+0x294>
    26d8:	29 2f       	mov	r18, r25
    26da:	26 60       	ori	r18, 0x06	; 6
    26dc:	b2 2e       	mov	r11, r18
    26de:	06 c0       	rjmp	.+12     	; 0x26ec <vfprintf+0x294>
    26e0:	28 e0       	ldi	r18, 0x08	; 8
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	05 c0       	rjmp	.+10     	; 0x26f0 <vfprintf+0x298>
    26e6:	20 e1       	ldi	r18, 0x10	; 16
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <vfprintf+0x298>
    26ec:	20 e1       	ldi	r18, 0x10	; 16
    26ee:	32 e0       	ldi	r19, 0x02	; 2
    26f0:	f8 01       	movw	r30, r16
    26f2:	b7 fe       	sbrs	r11, 7
    26f4:	07 c0       	rjmp	.+14     	; 0x2704 <vfprintf+0x2ac>
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	0c 5f       	subi	r16, 0xFC	; 252
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	06 c0       	rjmp	.+12     	; 0x2710 <vfprintf+0x2b8>
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 5f       	subi	r16, 0xFE	; 254
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	a3 01       	movw	r20, r6
    2712:	f1 d0       	rcall	.+482    	; 0x28f6 <__ultoa_invert>
    2714:	88 2e       	mov	r8, r24
    2716:	86 18       	sub	r8, r6
    2718:	fb 2d       	mov	r31, r11
    271a:	ff 77       	andi	r31, 0x7F	; 127
    271c:	3f 2e       	mov	r3, r31
    271e:	36 fe       	sbrs	r3, 6
    2720:	0d c0       	rjmp	.+26     	; 0x273c <vfprintf+0x2e4>
    2722:	23 2d       	mov	r18, r3
    2724:	2e 7f       	andi	r18, 0xFE	; 254
    2726:	a2 2e       	mov	r10, r18
    2728:	89 14       	cp	r8, r9
    272a:	58 f4       	brcc	.+22     	; 0x2742 <vfprintf+0x2ea>
    272c:	34 fe       	sbrs	r3, 4
    272e:	0b c0       	rjmp	.+22     	; 0x2746 <vfprintf+0x2ee>
    2730:	32 fc       	sbrc	r3, 2
    2732:	09 c0       	rjmp	.+18     	; 0x2746 <vfprintf+0x2ee>
    2734:	83 2d       	mov	r24, r3
    2736:	8e 7e       	andi	r24, 0xEE	; 238
    2738:	a8 2e       	mov	r10, r24
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <vfprintf+0x2ee>
    273c:	b8 2c       	mov	r11, r8
    273e:	a3 2c       	mov	r10, r3
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <vfprintf+0x2f0>
    2742:	b8 2c       	mov	r11, r8
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <vfprintf+0x2f0>
    2746:	b9 2c       	mov	r11, r9
    2748:	a4 fe       	sbrs	r10, 4
    274a:	0f c0       	rjmp	.+30     	; 0x276a <vfprintf+0x312>
    274c:	fe 01       	movw	r30, r28
    274e:	e8 0d       	add	r30, r8
    2750:	f1 1d       	adc	r31, r1
    2752:	80 81       	ld	r24, Z
    2754:	80 33       	cpi	r24, 0x30	; 48
    2756:	21 f4       	brne	.+8      	; 0x2760 <vfprintf+0x308>
    2758:	9a 2d       	mov	r25, r10
    275a:	99 7e       	andi	r25, 0xE9	; 233
    275c:	a9 2e       	mov	r10, r25
    275e:	09 c0       	rjmp	.+18     	; 0x2772 <vfprintf+0x31a>
    2760:	a2 fe       	sbrs	r10, 2
    2762:	06 c0       	rjmp	.+12     	; 0x2770 <vfprintf+0x318>
    2764:	b3 94       	inc	r11
    2766:	b3 94       	inc	r11
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <vfprintf+0x31a>
    276a:	8a 2d       	mov	r24, r10
    276c:	86 78       	andi	r24, 0x86	; 134
    276e:	09 f0       	breq	.+2      	; 0x2772 <vfprintf+0x31a>
    2770:	b3 94       	inc	r11
    2772:	a3 fc       	sbrc	r10, 3
    2774:	10 c0       	rjmp	.+32     	; 0x2796 <vfprintf+0x33e>
    2776:	a0 fe       	sbrs	r10, 0
    2778:	06 c0       	rjmp	.+12     	; 0x2786 <vfprintf+0x32e>
    277a:	b2 14       	cp	r11, r2
    277c:	80 f4       	brcc	.+32     	; 0x279e <vfprintf+0x346>
    277e:	28 0c       	add	r2, r8
    2780:	92 2c       	mov	r9, r2
    2782:	9b 18       	sub	r9, r11
    2784:	0d c0       	rjmp	.+26     	; 0x27a0 <vfprintf+0x348>
    2786:	b2 14       	cp	r11, r2
    2788:	58 f4       	brcc	.+22     	; 0x27a0 <vfprintf+0x348>
    278a:	b6 01       	movw	r22, r12
    278c:	80 e2       	ldi	r24, 0x20	; 32
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	76 d0       	rcall	.+236    	; 0x287e <fputc>
    2792:	b3 94       	inc	r11
    2794:	f8 cf       	rjmp	.-16     	; 0x2786 <vfprintf+0x32e>
    2796:	b2 14       	cp	r11, r2
    2798:	18 f4       	brcc	.+6      	; 0x27a0 <vfprintf+0x348>
    279a:	2b 18       	sub	r2, r11
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <vfprintf+0x34a>
    279e:	98 2c       	mov	r9, r8
    27a0:	21 2c       	mov	r2, r1
    27a2:	a4 fe       	sbrs	r10, 4
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <vfprintf+0x36c>
    27a6:	b6 01       	movw	r22, r12
    27a8:	80 e3       	ldi	r24, 0x30	; 48
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	68 d0       	rcall	.+208    	; 0x287e <fputc>
    27ae:	a2 fe       	sbrs	r10, 2
    27b0:	16 c0       	rjmp	.+44     	; 0x27de <vfprintf+0x386>
    27b2:	a1 fc       	sbrc	r10, 1
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <vfprintf+0x364>
    27b6:	88 e7       	ldi	r24, 0x78	; 120
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <vfprintf+0x368>
    27bc:	88 e5       	ldi	r24, 0x58	; 88
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	b6 01       	movw	r22, r12
    27c2:	0c c0       	rjmp	.+24     	; 0x27dc <vfprintf+0x384>
    27c4:	8a 2d       	mov	r24, r10
    27c6:	86 78       	andi	r24, 0x86	; 134
    27c8:	51 f0       	breq	.+20     	; 0x27de <vfprintf+0x386>
    27ca:	a1 fe       	sbrs	r10, 1
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <vfprintf+0x37a>
    27ce:	8b e2       	ldi	r24, 0x2B	; 43
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <vfprintf+0x37c>
    27d2:	80 e2       	ldi	r24, 0x20	; 32
    27d4:	a7 fc       	sbrc	r10, 7
    27d6:	8d e2       	ldi	r24, 0x2D	; 45
    27d8:	b6 01       	movw	r22, r12
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	50 d0       	rcall	.+160    	; 0x287e <fputc>
    27de:	89 14       	cp	r8, r9
    27e0:	30 f4       	brcc	.+12     	; 0x27ee <vfprintf+0x396>
    27e2:	b6 01       	movw	r22, r12
    27e4:	80 e3       	ldi	r24, 0x30	; 48
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	4a d0       	rcall	.+148    	; 0x287e <fputc>
    27ea:	9a 94       	dec	r9
    27ec:	f8 cf       	rjmp	.-16     	; 0x27de <vfprintf+0x386>
    27ee:	8a 94       	dec	r8
    27f0:	f3 01       	movw	r30, r6
    27f2:	e8 0d       	add	r30, r8
    27f4:	f1 1d       	adc	r31, r1
    27f6:	80 81       	ld	r24, Z
    27f8:	b6 01       	movw	r22, r12
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	40 d0       	rcall	.+128    	; 0x287e <fputc>
    27fe:	81 10       	cpse	r8, r1
    2800:	f6 cf       	rjmp	.-20     	; 0x27ee <vfprintf+0x396>
    2802:	22 20       	and	r2, r2
    2804:	09 f4       	brne	.+2      	; 0x2808 <vfprintf+0x3b0>
    2806:	4e ce       	rjmp	.-868    	; 0x24a4 <vfprintf+0x4c>
    2808:	b6 01       	movw	r22, r12
    280a:	80 e2       	ldi	r24, 0x20	; 32
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	37 d0       	rcall	.+110    	; 0x287e <fputc>
    2810:	2a 94       	dec	r2
    2812:	f7 cf       	rjmp	.-18     	; 0x2802 <vfprintf+0x3aa>
    2814:	f6 01       	movw	r30, r12
    2816:	86 81       	ldd	r24, Z+6	; 0x06
    2818:	97 81       	ldd	r25, Z+7	; 0x07
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <vfprintf+0x3c8>
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	2b 96       	adiw	r28, 0x0b	; 11
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
    283c:	bf 90       	pop	r11
    283e:	af 90       	pop	r10
    2840:	9f 90       	pop	r9
    2842:	8f 90       	pop	r8
    2844:	7f 90       	pop	r7
    2846:	6f 90       	pop	r6
    2848:	5f 90       	pop	r5
    284a:	4f 90       	pop	r4
    284c:	3f 90       	pop	r3
    284e:	2f 90       	pop	r2
    2850:	08 95       	ret

00002852 <strnlen_P>:
    2852:	fc 01       	movw	r30, r24
    2854:	05 90       	lpm	r0, Z+
    2856:	61 50       	subi	r22, 0x01	; 1
    2858:	70 40       	sbci	r23, 0x00	; 0
    285a:	01 10       	cpse	r0, r1
    285c:	d8 f7       	brcc	.-10     	; 0x2854 <strnlen_P+0x2>
    285e:	80 95       	com	r24
    2860:	90 95       	com	r25
    2862:	8e 0f       	add	r24, r30
    2864:	9f 1f       	adc	r25, r31
    2866:	08 95       	ret

00002868 <strnlen>:
    2868:	fc 01       	movw	r30, r24
    286a:	61 50       	subi	r22, 0x01	; 1
    286c:	70 40       	sbci	r23, 0x00	; 0
    286e:	01 90       	ld	r0, Z+
    2870:	01 10       	cpse	r0, r1
    2872:	d8 f7       	brcc	.-10     	; 0x286a <strnlen+0x2>
    2874:	80 95       	com	r24
    2876:	90 95       	com	r25
    2878:	8e 0f       	add	r24, r30
    287a:	9f 1f       	adc	r25, r31
    287c:	08 95       	ret

0000287e <fputc>:
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	fb 01       	movw	r30, r22
    2888:	23 81       	ldd	r18, Z+3	; 0x03
    288a:	21 fd       	sbrc	r18, 1
    288c:	03 c0       	rjmp	.+6      	; 0x2894 <fputc+0x16>
    288e:	8f ef       	ldi	r24, 0xFF	; 255
    2890:	9f ef       	ldi	r25, 0xFF	; 255
    2892:	2c c0       	rjmp	.+88     	; 0x28ec <fputc+0x6e>
    2894:	22 ff       	sbrs	r18, 2
    2896:	16 c0       	rjmp	.+44     	; 0x28c4 <fputc+0x46>
    2898:	46 81       	ldd	r20, Z+6	; 0x06
    289a:	57 81       	ldd	r21, Z+7	; 0x07
    289c:	24 81       	ldd	r18, Z+4	; 0x04
    289e:	35 81       	ldd	r19, Z+5	; 0x05
    28a0:	42 17       	cp	r20, r18
    28a2:	53 07       	cpc	r21, r19
    28a4:	44 f4       	brge	.+16     	; 0x28b6 <fputc+0x38>
    28a6:	a0 81       	ld	r26, Z
    28a8:	b1 81       	ldd	r27, Z+1	; 0x01
    28aa:	9d 01       	movw	r18, r26
    28ac:	2f 5f       	subi	r18, 0xFF	; 255
    28ae:	3f 4f       	sbci	r19, 0xFF	; 255
    28b0:	31 83       	std	Z+1, r19	; 0x01
    28b2:	20 83       	st	Z, r18
    28b4:	8c 93       	st	X, r24
    28b6:	26 81       	ldd	r18, Z+6	; 0x06
    28b8:	37 81       	ldd	r19, Z+7	; 0x07
    28ba:	2f 5f       	subi	r18, 0xFF	; 255
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	37 83       	std	Z+7, r19	; 0x07
    28c0:	26 83       	std	Z+6, r18	; 0x06
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <fputc+0x6e>
    28c4:	8b 01       	movw	r16, r22
    28c6:	ec 01       	movw	r28, r24
    28c8:	fb 01       	movw	r30, r22
    28ca:	00 84       	ldd	r0, Z+8	; 0x08
    28cc:	f1 85       	ldd	r31, Z+9	; 0x09
    28ce:	e0 2d       	mov	r30, r0
    28d0:	09 95       	icall
    28d2:	89 2b       	or	r24, r25
    28d4:	e1 f6       	brne	.-72     	; 0x288e <fputc+0x10>
    28d6:	d8 01       	movw	r26, r16
    28d8:	16 96       	adiw	r26, 0x06	; 6
    28da:	8d 91       	ld	r24, X+
    28dc:	9c 91       	ld	r25, X
    28de:	17 97       	sbiw	r26, 0x07	; 7
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	17 96       	adiw	r26, 0x07	; 7
    28e4:	9c 93       	st	X, r25
    28e6:	8e 93       	st	-X, r24
    28e8:	16 97       	sbiw	r26, 0x06	; 6
    28ea:	ce 01       	movw	r24, r28
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	08 95       	ret

000028f6 <__ultoa_invert>:
    28f6:	fa 01       	movw	r30, r20
    28f8:	aa 27       	eor	r26, r26
    28fa:	28 30       	cpi	r18, 0x08	; 8
    28fc:	51 f1       	breq	.+84     	; 0x2952 <__ultoa_invert+0x5c>
    28fe:	20 31       	cpi	r18, 0x10	; 16
    2900:	81 f1       	breq	.+96     	; 0x2962 <__ultoa_invert+0x6c>
    2902:	e8 94       	clt
    2904:	6f 93       	push	r22
    2906:	6e 7f       	andi	r22, 0xFE	; 254
    2908:	6e 5f       	subi	r22, 0xFE	; 254
    290a:	7f 4f       	sbci	r23, 0xFF	; 255
    290c:	8f 4f       	sbci	r24, 0xFF	; 255
    290e:	9f 4f       	sbci	r25, 0xFF	; 255
    2910:	af 4f       	sbci	r26, 0xFF	; 255
    2912:	b1 e0       	ldi	r27, 0x01	; 1
    2914:	3e d0       	rcall	.+124    	; 0x2992 <__ultoa_invert+0x9c>
    2916:	b4 e0       	ldi	r27, 0x04	; 4
    2918:	3c d0       	rcall	.+120    	; 0x2992 <__ultoa_invert+0x9c>
    291a:	67 0f       	add	r22, r23
    291c:	78 1f       	adc	r23, r24
    291e:	89 1f       	adc	r24, r25
    2920:	9a 1f       	adc	r25, r26
    2922:	a1 1d       	adc	r26, r1
    2924:	68 0f       	add	r22, r24
    2926:	79 1f       	adc	r23, r25
    2928:	8a 1f       	adc	r24, r26
    292a:	91 1d       	adc	r25, r1
    292c:	a1 1d       	adc	r26, r1
    292e:	6a 0f       	add	r22, r26
    2930:	71 1d       	adc	r23, r1
    2932:	81 1d       	adc	r24, r1
    2934:	91 1d       	adc	r25, r1
    2936:	a1 1d       	adc	r26, r1
    2938:	20 d0       	rcall	.+64     	; 0x297a <__ultoa_invert+0x84>
    293a:	09 f4       	brne	.+2      	; 0x293e <__ultoa_invert+0x48>
    293c:	68 94       	set
    293e:	3f 91       	pop	r19
    2940:	2a e0       	ldi	r18, 0x0A	; 10
    2942:	26 9f       	mul	r18, r22
    2944:	11 24       	eor	r1, r1
    2946:	30 19       	sub	r19, r0
    2948:	30 5d       	subi	r19, 0xD0	; 208
    294a:	31 93       	st	Z+, r19
    294c:	de f6       	brtc	.-74     	; 0x2904 <__ultoa_invert+0xe>
    294e:	cf 01       	movw	r24, r30
    2950:	08 95       	ret
    2952:	46 2f       	mov	r20, r22
    2954:	47 70       	andi	r20, 0x07	; 7
    2956:	40 5d       	subi	r20, 0xD0	; 208
    2958:	41 93       	st	Z+, r20
    295a:	b3 e0       	ldi	r27, 0x03	; 3
    295c:	0f d0       	rcall	.+30     	; 0x297c <__ultoa_invert+0x86>
    295e:	c9 f7       	brne	.-14     	; 0x2952 <__ultoa_invert+0x5c>
    2960:	f6 cf       	rjmp	.-20     	; 0x294e <__ultoa_invert+0x58>
    2962:	46 2f       	mov	r20, r22
    2964:	4f 70       	andi	r20, 0x0F	; 15
    2966:	40 5d       	subi	r20, 0xD0	; 208
    2968:	4a 33       	cpi	r20, 0x3A	; 58
    296a:	18 f0       	brcs	.+6      	; 0x2972 <__ultoa_invert+0x7c>
    296c:	49 5d       	subi	r20, 0xD9	; 217
    296e:	31 fd       	sbrc	r19, 1
    2970:	40 52       	subi	r20, 0x20	; 32
    2972:	41 93       	st	Z+, r20
    2974:	02 d0       	rcall	.+4      	; 0x297a <__ultoa_invert+0x84>
    2976:	a9 f7       	brne	.-22     	; 0x2962 <__ultoa_invert+0x6c>
    2978:	ea cf       	rjmp	.-44     	; 0x294e <__ultoa_invert+0x58>
    297a:	b4 e0       	ldi	r27, 0x04	; 4
    297c:	a6 95       	lsr	r26
    297e:	97 95       	ror	r25
    2980:	87 95       	ror	r24
    2982:	77 95       	ror	r23
    2984:	67 95       	ror	r22
    2986:	ba 95       	dec	r27
    2988:	c9 f7       	brne	.-14     	; 0x297c <__ultoa_invert+0x86>
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	61 05       	cpc	r22, r1
    298e:	71 05       	cpc	r23, r1
    2990:	08 95       	ret
    2992:	9b 01       	movw	r18, r22
    2994:	ac 01       	movw	r20, r24
    2996:	0a 2e       	mov	r0, r26
    2998:	06 94       	lsr	r0
    299a:	57 95       	ror	r21
    299c:	47 95       	ror	r20
    299e:	37 95       	ror	r19
    29a0:	27 95       	ror	r18
    29a2:	ba 95       	dec	r27
    29a4:	c9 f7       	brne	.-14     	; 0x2998 <__ultoa_invert+0xa2>
    29a6:	62 0f       	add	r22, r18
    29a8:	73 1f       	adc	r23, r19
    29aa:	84 1f       	adc	r24, r20
    29ac:	95 1f       	adc	r25, r21
    29ae:	a0 1d       	adc	r26, r0
    29b0:	08 95       	ret

000029b2 <_exit>:
    29b2:	f8 94       	cli

000029b4 <__stop_program>:
    29b4:	ff cf       	rjmp	.-2      	; 0x29b4 <__stop_program>
