
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000d76  00000e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  00000e14  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000561e  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ca8  00000000  00000000  000066fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002df1  00000000  00000000  000083a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  0000b198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002649  00000000  00000000  0000b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f19  00000000  00000000  0000df45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00010e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
   6:	00 00       	nop
   8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
   a:	00 00       	nop
   c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
   e:	00 00       	nop
  10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
  16:	00 00       	nop
  18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
  1e:	00 00       	nop
  20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
  22:	00 00       	nop
  24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
  26:	00 00       	nop
  28:	94 c2       	rjmp	.+1320   	; 0x552 <__vector_10>
  2a:	00 00       	nop
  2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
  2e:	00 00       	nop
  30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
  32:	00 00       	nop
  34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
  36:	00 00       	nop
  38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
  42:	00 00       	nop
  44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
  46:	00 00       	nop
  48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
  4e:	00 00       	nop
  50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
  52:	00 00       	nop
  54:	a3 c0       	rjmp	.+326    	; 0x19c <__bad_interrupt>
  56:	00 00       	nop
  58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
  5e:	00 00       	nop
  60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
  62:	00 00       	nop
  64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
  66:	00 00       	nop
  68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
  6e:	00 00       	nop
  70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
  72:	00 00       	nop
  74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
  76:	00 00       	nop
  78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
  7e:	00 00       	nop
  80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
  82:	00 00       	nop
  84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
  86:	00 00       	nop
  88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
  8e:	00 00       	nop
  90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
  92:	00 00       	nop
  94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
  96:	00 00       	nop
  98:	de 04       	cpc	r13, r14
  9a:	00 05       	cpc	r16, r0
  9c:	ed 05       	cpc	r30, r13
  9e:	00 05       	cpc	r16, r0
  a0:	ed 05       	cpc	r30, r13
  a2:	45 05       	cpc	r20, r5
  a4:	68 05       	cpc	r22, r8
  a6:	ed 05       	cpc	r30, r13
  a8:	ba 05       	cpc	r27, r10
  aa:	cc 05       	cpc	r28, r12

000000ac <ProductString>:
  ac:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  bc:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000cc <ManufacturerString>:
  cc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  dc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e6 <LanguageString>:
  e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
  ea:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  fa:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 10a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 11a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 12a:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 01     .$...........@..
 13a:	00 00 05 25 01 01 01 09 05 82 02 40 00 01 00 00     ...%.......@....
 14a:	05 25 01 01 03                                      .%...

0000014f <DeviceDescriptor>:
 14f:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 15f:	00 01 00                                            ...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d0 e2       	ldi	r29, 0x20	; 32
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e6 e7       	ldi	r30, 0x76	; 118
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	0b bf       	out	0x3b, r16	; 59
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
 17e:	07 90       	elpm	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	aa 30       	cpi	r26, 0x0A	; 10
 184:	b1 07       	cpc	r27, r17
 186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	aa e0       	ldi	r26, 0x0A	; 10
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
 190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
 192:	a8 31       	cpi	r26, 0x18	; 24
 194:	b2 07       	cpc	r27, r18
 196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
 198:	94 d0       	rcall	.+296    	; 0x2c2 <main>
 19a:	eb c5       	rjmp	.+3030   	; 0xd72 <_exit>

0000019c <__bad_interrupt>:
 19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	89 2b       	or	r24, r25
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	08 95       	ret

000001a8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1a8:	84 b7       	in	r24, 0x34	; 52
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	a8 95       	wdr
 1b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1b8:	88 61       	ori	r24, 0x18	; 24
 1ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1d0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1d4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1d6:	84 b1       	in	r24, 0x04	; 4
 1d8:	8f 71       	andi	r24, 0x1F	; 31
 1da:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1dc:	8d b1       	in	r24, 0x0d	; 13
 1de:	8f 7c       	andi	r24, 0xCF	; 207
 1e0:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	80 6e       	ori	r24, 0xE0	; 224
 1e6:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1e8:	8e b1       	in	r24, 0x0e	; 14
 1ea:	80 63       	ori	r24, 0x30	; 48
 1ec:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 6f       	ori	r24, 0xF0	; 240
 1f2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1fa:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1fc:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1fe:	93 c1       	rjmp	.+806    	; 0x526 <USB_Init>

00000200 <CheckJoystickMovement>:
}

/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void CheckJoystickMovement(void)
{
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	00 d0       	rcall	.+0      	; 0x208 <CheckJoystickMovement+0x8>
 208:	00 d0       	rcall	.+0      	; 0x20a <CheckJoystickMovement+0xa>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 20e:	83 b1       	in	r24, 0x03	; 3
 210:	1c b1       	in	r17, 0x0c	; 12
 212:	10 95       	com	r17
 214:	10 73       	andi	r17, 0x30	; 48
 216:	16 95       	lsr	r17
 218:	80 95       	com	r24
 21a:	80 7e       	andi	r24, 0xE0	; 224
 21c:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
 21e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 222:	21 27       	eor	r18, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
 224:	62 9b       	sbis	0x0c, 2	; 12
 226:	02 c0       	rjmp	.+4      	; 0x22c <CheckJoystickMovement+0x2c>
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	01 c0       	rjmp	.+2      	; 0x22e <CheckJoystickMovement+0x2e>
 22c:	39 e0       	ldi	r19, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
 22e:	26 ff       	sbrs	r18, 6
 230:	04 c0       	rjmp	.+8      	; 0x23a <CheckJoystickMovement+0x3a>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 232:	16 fd       	sbrc	r17, 6
 234:	04 c0       	rjmp	.+8      	; 0x23e <CheckJoystickMovement+0x3e>
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	03 c0       	rjmp	.+6      	; 0x240 <CheckJoystickMovement+0x40>
/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void CheckJoystickMovement(void)
{
	static uint8_t PrevJoystickStatus;

	uint8_t MIDICommand = 0;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	01 c0       	rjmp	.+2      	; 0x240 <CheckJoystickMovement+0x40>
	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

	if (JoystickChanges & JOY_LEFT)
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 23e:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
 240:	27 ff       	sbrs	r18, 7
 242:	05 c0       	rjmp	.+10     	; 0x24e <CheckJoystickMovement+0x4e>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
 244:	9d e3       	ldi	r25, 0x3D	; 61
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 246:	17 fd       	sbrc	r17, 7
 248:	04 c0       	rjmp	.+8      	; 0x252 <CheckJoystickMovement+0x52>
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	03 c0       	rjmp	.+6      	; 0x254 <CheckJoystickMovement+0x54>
 24e:	9c e3       	ldi	r25, 0x3C	; 60
 250:	01 c0       	rjmp	.+2      	; 0x254 <CheckJoystickMovement+0x54>
 252:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
 254:	23 ff       	sbrs	r18, 3
 256:	06 c0       	rjmp	.+12     	; 0x264 <CheckJoystickMovement+0x64>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3E;
 258:	9e e3       	ldi	r25, 0x3E	; 62
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 25a:	13 fd       	sbrc	r17, 3
 25c:	02 c0       	rjmp	.+4      	; 0x262 <CheckJoystickMovement+0x62>
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	01 c0       	rjmp	.+2      	; 0x264 <CheckJoystickMovement+0x64>
 262:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
 264:	24 ff       	sbrs	r18, 4
 266:	06 c0       	rjmp	.+12     	; 0x274 <CheckJoystickMovement+0x74>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
 268:	9f e3       	ldi	r25, 0x3F	; 63
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 26a:	14 fd       	sbrc	r17, 4
 26c:	02 c0       	rjmp	.+4      	; 0x272 <CheckJoystickMovement+0x72>
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	01 c0       	rjmp	.+2      	; 0x274 <CheckJoystickMovement+0x74>
 272:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
 274:	25 ff       	sbrs	r18, 5
 276:	04 c0       	rjmp	.+8      	; 0x280 <CheckJoystickMovement+0x80>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 278:	15 fd       	sbrc	r17, 5
 27a:	20 c0       	rjmp	.+64     	; 0x2bc <CheckJoystickMovement+0xbc>
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	1f c0       	rjmp	.+62     	; 0x2be <CheckJoystickMovement+0xbe>
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
 280:	88 23       	and	r24, r24
 282:	91 f0       	breq	.+36     	; 0x2a8 <CheckJoystickMovement+0xa8>
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 284:	28 2f       	mov	r18, r24
 286:	22 95       	swap	r18
 288:	2f 70       	andi	r18, 0x0F	; 15
 28a:	29 83       	std	Y+1, r18	; 0x01
 28c:	83 2b       	or	r24, r19
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	9b 83       	std	Y+3, r25	; 0x03
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	8c 83       	std	Y+4, r24	; 0x04
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};

		MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	01 d5       	rcall	.+2562   	; 0xca4 <MIDI_Device_SendEventPacket>
		MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	1f d5       	rcall	.+2622   	; 0xce6 <MIDI_Device_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
 2a8:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <__data_end>
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2bc:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2be:	9b e3       	ldi	r25, 0x3B	; 59
 2c0:	e1 cf       	rjmp	.-62     	; 0x284 <CheckJoystickMovement+0x84>

000002c2 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0x6>
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <main+0x8>
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 2ce:	6c df       	rcall	.-296    	; 0x1a8 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	65 df       	rcall	.-310    	; 0x19e <LEDs_SetAllLEDs>
	sei();
 2d4:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 2d6:	94 df       	rcall	.-216    	; 0x200 <CheckJoystickMovement>
 2d8:	be 01       	movw	r22, r28

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	1f d5       	rcall	.+2622   	; 0xd22 <MIDI_Device_ReceiveEventPacket>
 2e4:	88 23       	and	r24, r24
 2e6:	89 f0       	breq	.+34     	; 0x30a <main+0x48>
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
		{
			if ((ReceivedMIDIEvent.Command == (MIDI_COMMAND_NOTE_ON >> 4)) && (ReceivedMIDIEvent.Data3 > 0))
 2ea:	8f 70       	andi	r24, 0x0F	; 15
 2ec:	89 30       	cpi	r24, 0x09	; 9
 2ee:	51 f4       	brne	.+20     	; 0x304 <main+0x42>
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	88 23       	and	r24, r24
 2f4:	39 f0       	breq	.+14     	; 0x304 <main+0x42>
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 2f8:	81 34       	cpi	r24, 0x41	; 65
 2fa:	10 f4       	brcc	.+4      	; 0x300 <main+0x3e>
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <main+0x44>
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	01 c0       	rjmp	.+2      	; 0x306 <main+0x44>
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	4b df       	rcall	.-362    	; 0x19e <LEDs_SetAllLEDs>
		}

		MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 308:	e7 cf       	rjmp	.-50     	; 0x2d8 <main+0x16>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	03 d5       	rcall	.+2566   	; 0xd16 <MIDI_Device_USBTask>
		USB_USBTask();
 310:	7e d4       	rcall	.+2300   	; 0xc0e <USB_USBTask>
 312:	e1 cf       	rjmp	.-62     	; 0x2d6 <main+0x14>

00000314 <EVENT_USB_Device_Connect>:
	}
 314:	80 ea       	ldi	r24, 0xA0	; 160
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 316:	43 cf       	rjmp	.-378    	; 0x19e <LEDs_SetAllLEDs>

00000318 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	41 cf       	rjmp	.-382    	; 0x19e <LEDs_SetAllLEDs>

0000031c <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	88 d4       	rcall	.+2320   	; 0xc32 <MIDI_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 322:	81 11       	cpse	r24, r1
 324:	02 c0       	rjmp	.+4      	; 0x32a <EVENT_USB_Device_ConfigurationChanged+0xe>
 326:	80 e9       	ldi	r24, 0x90	; 144
 328:	01 c0       	rjmp	.+2      	; 0x32c <EVENT_USB_Device_ConfigurationChanged+0x10>
 32a:	80 e6       	ldi	r24, 0x60	; 96
 32c:	38 cf       	rjmp	.-400    	; 0x19e <LEDs_SetAllLEDs>

0000032e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
 32e:	08 95       	ret

00000330 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 330:	29 2f       	mov	r18, r25
 332:	33 27       	eor	r19, r19
 334:	22 30       	cpi	r18, 0x02	; 2
 336:	31 05       	cpc	r19, r1
 338:	59 f0       	breq	.+22     	; 0x350 <CALLBACK_USB_GetDescriptor+0x20>
 33a:	23 30       	cpi	r18, 0x03	; 3
 33c:	31 05       	cpc	r19, r1
 33e:	69 f0       	breq	.+26     	; 0x35a <CALLBACK_USB_GetDescriptor+0x2a>
 340:	21 30       	cpi	r18, 0x01	; 1
 342:	31 05       	cpc	r19, r1
 344:	e9 f4       	brne	.+58     	; 0x380 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 346:	82 e1       	ldi	r24, 0x12	; 18
 348:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 34a:	2f e4       	ldi	r18, 0x4F	; 79
 34c:	31 e0       	ldi	r19, 0x01	; 1
 34e:	1c c0       	rjmp	.+56     	; 0x388 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 350:	85 e6       	ldi	r24, 0x65	; 101
 352:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 354:	2a ee       	ldi	r18, 0xEA	; 234
 356:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 358:	17 c0       	rjmp	.+46     	; 0x388 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 35a:	99 27       	eor	r25, r25
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	49 f0       	breq	.+18     	; 0x374 <CALLBACK_USB_GetDescriptor+0x44>
 362:	28 f0       	brcs	.+10     	; 0x36e <CALLBACK_USB_GetDescriptor+0x3e>
 364:	02 97       	sbiw	r24, 0x02	; 2
 366:	61 f4       	brne	.+24     	; 0x380 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 368:	ec ea       	ldi	r30, 0xAC	; 172
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	05 c0       	rjmp	.+10     	; 0x378 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 36e:	e6 ee       	ldi	r30, 0xE6	; 230
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 374:	ec ec       	ldi	r30, 0xCC	; 204
 376:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 378:	84 91       	lpm	r24, Z
 37a:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 37c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 37e:	04 c0       	rjmp	.+8      	; 0x388 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 388:	fa 01       	movw	r30, r20
 38a:	31 83       	std	Z+1, r19	; 0x01
 38c:	20 83       	st	Z, r18
	return Size;
}
 38e:	08 95       	ret

00000390 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 390:	98 2f       	mov	r25, r24
 392:	97 30       	cpi	r25, 0x07	; 7
 394:	68 f5       	brcc	.+90     	; 0x3f0 <Endpoint_ConfigureEndpoint_Prv+0x60>
 396:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 39a:	98 17       	cp	r25, r24
 39c:	39 f0       	breq	.+14     	; 0x3ac <Endpoint_ConfigureEndpoint_Prv+0x1c>
 39e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3a2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3a6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <Endpoint_ConfigureEndpoint_Prv+0x22>
 3ac:	24 2f       	mov	r18, r20
 3ae:	76 2f       	mov	r23, r22
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	21 fd       	sbrc	r18, 1
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <Endpoint_ConfigureEndpoint_Prv+0x2a>
 3b6:	9f 5f       	subi	r25, 0xFF	; 255
 3b8:	ec cf       	rjmp	.-40     	; 0x392 <Endpoint_ConfigureEndpoint_Prv+0x2>
 3ba:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3be:	3e 7f       	andi	r19, 0xFE	; 254
 3c0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3c4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3c8:	3d 7f       	andi	r19, 0xFD	; 253
 3ca:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3ce:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3d2:	31 60       	ori	r19, 0x01	; 1
 3d4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3d8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3dc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3e0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3e4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 3e8:	27 fd       	sbrc	r18, 7
 3ea:	e5 cf       	rjmp	.-54     	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv+0x26>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret

000003f8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest>
 3fc:	87 ff       	sbrs	r24, 7
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 400:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 404:	82 fd       	sbrc	r24, 2
 406:	05 c0       	rjmp	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 408:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 40c:	81 11       	cpse	r24, r1
 40e:	f8 cf       	rjmp	.-16     	; 0x400 <__LOCK_REGION_LENGTH__>
 410:	11 c0       	rjmp	.+34     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 416:	8b 77       	andi	r24, 0x7B	; 123
 418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 41a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 41e:	88 23       	and	r24, r24
 420:	49 f0       	breq	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 422:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 426:	80 ff       	sbrs	r24, 0
 428:	f8 cf       	rjmp	.-16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 42a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 42e:	8e 77       	andi	r24, 0x7E	; 126
 430:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 434:	08 95       	ret

00000436 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 436:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 43a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 43e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 440:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 444:	84 2f       	mov	r24, r20
 446:	81 70       	andi	r24, 0x01	; 1
 448:	40 ff       	sbrs	r20, 0
 44a:	23 c0       	rjmp	.+70     	; 0x492 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 44c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 450:	80 fd       	sbrc	r24, 0
 452:	1d c0       	rjmp	.+58     	; 0x48e <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 454:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 458:	88 23       	and	r24, r24
 45a:	99 f0       	breq	.+38     	; 0x482 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 45c:	85 30       	cpi	r24, 0x05	; 5
 45e:	99 f0       	breq	.+38     	; 0x486 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 460:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 464:	85 fd       	sbrc	r24, 5
 466:	11 c0       	rjmp	.+34     	; 0x48a <Endpoint_WaitUntilReady+0x54>
 468:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 46c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 470:	24 17       	cp	r18, r20
 472:	35 07       	cpc	r19, r21
 474:	29 f3       	breq	.-54     	; 0x440 <Endpoint_WaitUntilReady+0xa>
 476:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 478:	11 f0       	breq	.+4      	; 0x47e <Endpoint_WaitUntilReady+0x48>
 47a:	9a 01       	movw	r18, r20
 47c:	e1 cf       	rjmp	.-62     	; 0x440 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 492:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 496:	42 ff       	sbrs	r20, 2
 498:	dd cf       	rjmp	.-70     	; 0x454 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 49a:	08 95       	ret

0000049c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4a4:	49 d0       	rcall	.+146    	; 0x538 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4a6:	50 d0       	rcall	.+160    	; 0x548 <USB_INT_ClearAllInterrupts>
 4a8:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	88 81       	ld	r24, Y
 4ae:	8f 77       	andi	r24, 0x7F	; 127
 4b0:	88 83       	st	Y, r24
 4b2:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	88 83       	st	Y, r24
 4b8:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4ba:	8f 7d       	andi	r24, 0xDF	; 223
 4bc:	88 83       	st	Y, r24
 4be:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	80 68       	ori	r24, 0x80	; 128
 4c6:	80 83       	st	Z, r24
 4c8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 4ca:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 4ce:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 4d2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 4d6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 4da:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 4dc:	10 e0       	ldi	r17, 0x00	; 0
 4de:	f8 01       	movw	r30, r16
 4e0:	80 81       	ld	r24, Z
 4e2:	8b 7f       	andi	r24, 0xFB	; 251
 4e4:	80 83       	st	Z, r24
 4e6:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4e8:	81 60       	ori	r24, 0x01	; 1
 4ea:	88 83       	st	Y, r24
 4ec:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	4e df       	rcall	.-356    	; 0x390 <Endpoint_ConfigureEndpoint_Prv>
 4f4:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	8e 7f       	andi	r24, 0xFE	; 254
 4fc:	80 83       	st	Z, r24
 4fe:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
 508:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 50a:	88 60       	ori	r24, 0x08	; 8
 50c:	80 83       	st	Z, r24
 50e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 510:	80 81       	ld	r24, Z
 512:	8e 7f       	andi	r24, 0xFE	; 254
 514:	80 83       	st	Z, r24
 516:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 518:	80 61       	ori	r24, 0x10	; 16
 51a:	88 83       	st	Y, r24
 51c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret

00000526 <USB_Init>:
 526:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <USB_IsInitialized>

	USB_ResetInterface();
 536:	b2 cf       	rjmp	.-156    	; 0x49c <USB_ResetInterface>

00000538 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 538:	e8 ed       	ldi	r30, 0xD8	; 216
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8c 7f       	andi	r24, 0xFC	; 252
 540:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 542:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 546:	08 95       	ret

00000548 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 548:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 54c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 550:	08 95       	ret

00000552 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	0b b6       	in	r0, 0x3b	; 59
 55e:	0f 92       	push	r0
 560:	2f 93       	push	r18
 562:	3f 93       	push	r19
 564:	4f 93       	push	r20
 566:	5f 93       	push	r21
 568:	6f 93       	push	r22
 56a:	7f 93       	push	r23
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
 570:	af 93       	push	r26
 572:	bf 93       	push	r27
 574:	ef 93       	push	r30
 576:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 578:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 57c:	82 ff       	sbrs	r24, 2
 57e:	0a c0       	rjmp	.+20     	; 0x594 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 580:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 584:	82 ff       	sbrs	r24, 2
 586:	06 c0       	rjmp	.+12     	; 0x594 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 588:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 58c:	8b 7f       	andi	r24, 0xFB	; 251
 58e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 592:	3c d3       	rcall	.+1656   	; 0xc0c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 594:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 598:	80 ff       	sbrs	r24, 0
 59a:	1d c0       	rjmp	.+58     	; 0x5d6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 59c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5a0:	80 ff       	sbrs	r24, 0
 5a2:	19 c0       	rjmp	.+50     	; 0x5d6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5a4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 5a8:	8e 7f       	andi	r24, 0xFE	; 254
 5aa:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5ae:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5b2:	80 ff       	sbrs	r24, 0
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5b6:	8c e0       	ldi	r24, 0x0C	; 12
 5b8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5ba:	8e e0       	ldi	r24, 0x0E	; 14
 5bc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 5be:	09 b4       	in	r0, 0x29	; 41
 5c0:	00 fe       	sbrs	r0, 0
 5c2:	fd cf       	rjmp	.-6      	; 0x5be <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
			EVENT_USB_Device_Connect();
 5ca:	a4 de       	rcall	.-696    	; 0x314 <EVENT_USB_Device_Connect>
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5ce:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 5d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 5d4:	a1 de       	rcall	.-702    	; 0x318 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 5d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5da:	80 ff       	sbrs	r24, 0
 5dc:	18 c0       	rjmp	.+48     	; 0x60e <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5e2:	80 ff       	sbrs	r24, 0
 5e4:	14 c0       	rjmp	.+40     	; 0x60e <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5e6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5ea:	8e 7f       	andi	r24, 0xFE	; 254
 5ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5f4:	80 61       	ori	r24, 0x10	; 16
 5f6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 5fa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5fe:	80 62       	ori	r24, 0x20	; 32
 600:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 604:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 606:	85 e0       	ldi	r24, 0x05	; 5
 608:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 60c:	ff d2       	rcall	.+1534   	; 0xc0c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 60e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 612:	84 ff       	sbrs	r24, 4
 614:	2d c0       	rjmp	.+90     	; 0x670 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 616:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 61a:	84 ff       	sbrs	r24, 4
 61c:	29 c0       	rjmp	.+82     	; 0x670 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 61e:	8c e0       	ldi	r24, 0x0C	; 12
 620:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 622:	8e e0       	ldi	r24, 0x0E	; 14
 624:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 626:	09 b4       	in	r0, 0x29	; 41
 628:	00 fe       	sbrs	r0, 0
 62a:	fd cf       	rjmp	.-6      	; 0x626 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 62c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 630:	8f 7d       	andi	r24, 0xDF	; 223
 632:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 636:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 63a:	8f 7e       	andi	r24, 0xEF	; 239
 63c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 640:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 644:	8f 7e       	andi	r24, 0xEF	; 239
 646:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 64a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 654:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Device_ConfigurationNumber>
 658:	81 11       	cpse	r24, r1
 65a:	06 c0       	rjmp	.+12     	; 0x668 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 65c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 660:	87 fd       	sbrc	r24, 7
 662:	02 c0       	rjmp	.+4      	; 0x668 <__vector_10+0x116>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	01 c0       	rjmp	.+2      	; 0x66a <__vector_10+0x118>
 668:	84 e0       	ldi	r24, 0x04	; 4
 66a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 66e:	ce d2       	rcall	.+1436   	; 0xc0c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 670:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 674:	83 ff       	sbrs	r24, 3
 676:	22 c0       	rjmp	.+68     	; 0x6bc <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 678:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 67c:	83 ff       	sbrs	r24, 3
 67e:	1e c0       	rjmp	.+60     	; 0x6bc <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 680:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 684:	87 7f       	andi	r24, 0xF7	; 247
 686:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 690:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 694:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 69e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6a2:	8e 7f       	andi	r24, 0xFE	; 254
 6a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6ac:	80 61       	ori	r24, 0x10	; 16
 6ae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6b2:	42 e0       	ldi	r20, 0x02	; 2
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	6b de       	rcall	.-810    	; 0x390 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6ba:	a8 d2       	rcall	.+1360   	; 0xc0c <USB_Event_Stub>
 6bc:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6be:	ef 91       	pop	r30
 6c0:	bf 91       	pop	r27
 6c2:	af 91       	pop	r26
 6c4:	9f 91       	pop	r25
 6c6:	8f 91       	pop	r24
 6c8:	7f 91       	pop	r23
 6ca:	6f 91       	pop	r22
 6cc:	5f 91       	pop	r21
 6ce:	4f 91       	pop	r20
 6d0:	3f 91       	pop	r19
 6d2:	2f 91       	pop	r18
 6d4:	0f 90       	pop	r0
 6d6:	0b be       	out	0x3b, r0	; 59
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <Endpoint_Write_Stream_LE>:
 6e2:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6e4:	df 92       	push	r13
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	ec 01       	movw	r28, r24
 6f4:	8b 01       	movw	r16, r22
 6f6:	7a 01       	movw	r14, r20
 6f8:	9e de       	rcall	.-708    	; 0x436 <Endpoint_WaitUntilReady>
 6fa:	81 11       	cpse	r24, r1
 6fc:	33 c0       	rjmp	.+102    	; 0x764 <Endpoint_Write_Stream_LE+0x82>
 6fe:	e1 14       	cp	r14, r1
 700:	f1 04       	cpc	r15, r1
 702:	39 f0       	breq	.+14     	; 0x712 <Endpoint_Write_Stream_LE+0x30>
 704:	f7 01       	movw	r30, r14
 706:	80 81       	ld	r24, Z
 708:	91 81       	ldd	r25, Z+1	; 0x01
 70a:	08 1b       	sub	r16, r24
 70c:	19 0b       	sbc	r17, r25
 70e:	c8 0f       	add	r28, r24
 710:	d9 1f       	adc	r29, r25
 712:	c1 2c       	mov	r12, r1
 714:	d1 2c       	mov	r13, r1
 716:	01 15       	cp	r16, r1
 718:	11 05       	cpc	r17, r1
 71a:	19 f1       	breq	.+70     	; 0x762 <Endpoint_Write_Stream_LE+0x80>
 71c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 720:	85 fd       	sbrc	r24, 5
 722:	16 c0       	rjmp	.+44     	; 0x750 <Endpoint_Write_Stream_LE+0x6e>
 724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 728:	8e 77       	andi	r24, 0x7E	; 126
 72a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 72e:	6f d2       	rcall	.+1246   	; 0xc0e <USB_USBTask>
 730:	e1 14       	cp	r14, r1
 732:	f1 04       	cpc	r15, r1
 734:	49 f0       	breq	.+18     	; 0x748 <Endpoint_Write_Stream_LE+0x66>
 736:	f7 01       	movw	r30, r14
 738:	80 81       	ld	r24, Z
 73a:	91 81       	ldd	r25, Z+1	; 0x01
 73c:	c8 0e       	add	r12, r24
 73e:	d9 1e       	adc	r13, r25
 740:	d1 82       	std	Z+1, r13	; 0x01
 742:	c0 82       	st	Z, r12
 744:	85 e0       	ldi	r24, 0x05	; 5
 746:	0e c0       	rjmp	.+28     	; 0x764 <Endpoint_Write_Stream_LE+0x82>
 748:	76 de       	rcall	.-788    	; 0x436 <Endpoint_WaitUntilReady>
 74a:	88 23       	and	r24, r24
 74c:	21 f3       	breq	.-56     	; 0x716 <Endpoint_Write_Stream_LE+0x34>
 74e:	0a c0       	rjmp	.+20     	; 0x764 <Endpoint_Write_Stream_LE+0x82>
 750:	89 91       	ld	r24, Y+
 752:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 756:	01 50       	subi	r16, 0x01	; 1
 758:	11 09       	sbc	r17, r1
 75a:	ff ef       	ldi	r31, 0xFF	; 255
 75c:	cf 1a       	sub	r12, r31
 75e:	df 0a       	sbc	r13, r31
 760:	da cf       	rjmp	.-76     	; 0x716 <Endpoint_Write_Stream_LE+0x34>
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	ef 90       	pop	r14
 770:	df 90       	pop	r13
 772:	cf 90       	pop	r12
 774:	08 95       	ret

00000776 <Endpoint_Read_Stream_LE>:
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	ec 01       	movw	r28, r24
 788:	8b 01       	movw	r16, r22
 78a:	7a 01       	movw	r14, r20
 78c:	54 de       	rcall	.-856    	; 0x436 <Endpoint_WaitUntilReady>
 78e:	81 11       	cpse	r24, r1
 790:	33 c0       	rjmp	.+102    	; 0x7f8 <Endpoint_Read_Stream_LE+0x82>
 792:	e1 14       	cp	r14, r1
 794:	f1 04       	cpc	r15, r1
 796:	39 f0       	breq	.+14     	; 0x7a6 <Endpoint_Read_Stream_LE+0x30>
 798:	f7 01       	movw	r30, r14
 79a:	80 81       	ld	r24, Z
 79c:	91 81       	ldd	r25, Z+1	; 0x01
 79e:	08 1b       	sub	r16, r24
 7a0:	19 0b       	sbc	r17, r25
 7a2:	c8 0f       	add	r28, r24
 7a4:	d9 1f       	adc	r29, r25
 7a6:	c1 2c       	mov	r12, r1
 7a8:	d1 2c       	mov	r13, r1
 7aa:	01 15       	cp	r16, r1
 7ac:	11 05       	cpc	r17, r1
 7ae:	19 f1       	breq	.+70     	; 0x7f6 <Endpoint_Read_Stream_LE+0x80>
 7b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b4:	85 fd       	sbrc	r24, 5
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <Endpoint_Read_Stream_LE+0x6e>
 7b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7bc:	8b 77       	andi	r24, 0x7B	; 123
 7be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c2:	25 d2       	rcall	.+1098   	; 0xc0e <USB_USBTask>
 7c4:	e1 14       	cp	r14, r1
 7c6:	f1 04       	cpc	r15, r1
 7c8:	49 f0       	breq	.+18     	; 0x7dc <Endpoint_Read_Stream_LE+0x66>
 7ca:	f7 01       	movw	r30, r14
 7cc:	80 81       	ld	r24, Z
 7ce:	91 81       	ldd	r25, Z+1	; 0x01
 7d0:	c8 0e       	add	r12, r24
 7d2:	d9 1e       	adc	r13, r25
 7d4:	d1 82       	std	Z+1, r13	; 0x01
 7d6:	c0 82       	st	Z, r12
 7d8:	85 e0       	ldi	r24, 0x05	; 5
 7da:	0e c0       	rjmp	.+28     	; 0x7f8 <Endpoint_Read_Stream_LE+0x82>
 7dc:	2c de       	rcall	.-936    	; 0x436 <Endpoint_WaitUntilReady>
 7de:	88 23       	and	r24, r24
 7e0:	21 f3       	breq	.-56     	; 0x7aa <Endpoint_Read_Stream_LE+0x34>
 7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <Endpoint_Read_Stream_LE+0x82>
 7e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 7e8:	89 93       	st	Y+, r24
 7ea:	01 50       	subi	r16, 0x01	; 1
 7ec:	11 09       	sbc	r17, r1
 7ee:	ff ef       	ldi	r31, 0xFF	; 255
 7f0:	cf 1a       	sub	r12, r31
 7f2:	df 0a       	sbc	r13, r31
 7f4:	da cf       	rjmp	.-76     	; 0x7aa <Endpoint_Read_Stream_LE+0x34>
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	ef 90       	pop	r14
 804:	df 90       	pop	r13
 806:	cf 90       	pop	r12
 808:	08 95       	ret

0000080a <Endpoint_Write_Control_Stream_LE>:
 80a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <USB_ControlRequest+0x6>
 80e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <USB_ControlRequest+0x7>
 812:	26 17       	cp	r18, r22
 814:	37 07       	cpc	r19, r23
 816:	48 f0       	brcs	.+18     	; 0x82a <Endpoint_Write_Control_Stream_LE+0x20>
 818:	61 15       	cp	r22, r1
 81a:	71 05       	cpc	r23, r1
 81c:	39 f4       	brne	.+14     	; 0x82c <Endpoint_Write_Control_Stream_LE+0x22>
 81e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 822:	2e 77       	andi	r18, 0x7E	; 126
 824:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 828:	01 c0       	rjmp	.+2      	; 0x82c <Endpoint_Write_Control_Stream_LE+0x22>
 82a:	b9 01       	movw	r22, r18
 82c:	fc 01       	movw	r30, r24
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	61 15       	cp	r22, r1
 832:	71 05       	cpc	r23, r1
 834:	69 f1       	breq	.+90     	; 0x890 <Endpoint_Write_Control_Stream_LE+0x86>
 836:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 83a:	88 23       	and	r24, r24
 83c:	d1 f1       	breq	.+116    	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0xa8>
 83e:	85 30       	cpi	r24, 0x05	; 5
 840:	d1 f1       	breq	.+116    	; 0x8b6 <Endpoint_Write_Control_Stream_LE+0xac>
 842:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 846:	83 fd       	sbrc	r24, 3
 848:	32 c0       	rjmp	.+100    	; 0x8ae <Endpoint_Write_Control_Stream_LE+0xa4>
 84a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 84e:	82 fd       	sbrc	r24, 2
 850:	28 c0       	rjmp	.+80     	; 0x8a2 <Endpoint_Write_Control_Stream_LE+0x98>
 852:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 856:	80 ff       	sbrs	r24, 0
 858:	eb cf       	rjmp	.-42     	; 0x830 <Endpoint_Write_Control_Stream_LE+0x26>
 85a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 85e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 862:	61 15       	cp	r22, r1
 864:	71 05       	cpc	r23, r1
 866:	51 f0       	breq	.+20     	; 0x87c <Endpoint_Write_Control_Stream_LE+0x72>
 868:	88 30       	cpi	r24, 0x08	; 8
 86a:	91 05       	cpc	r25, r1
 86c:	38 f4       	brcc	.+14     	; 0x87c <Endpoint_Write_Control_Stream_LE+0x72>
 86e:	21 91       	ld	r18, Z+
 870:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 874:	61 50       	subi	r22, 0x01	; 1
 876:	71 09       	sbc	r23, r1
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	f3 cf       	rjmp	.-26     	; 0x862 <Endpoint_Write_Control_Stream_LE+0x58>
 87c:	21 e0       	ldi	r18, 0x01	; 1
 87e:	08 97       	sbiw	r24, 0x08	; 8
 880:	09 f0       	breq	.+2      	; 0x884 <Endpoint_Write_Control_Stream_LE+0x7a>
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 888:	8e 77       	andi	r24, 0x7E	; 126
 88a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 88e:	d0 cf       	rjmp	.-96     	; 0x830 <Endpoint_Write_Control_Stream_LE+0x26>
 890:	21 11       	cpse	r18, r1
 892:	d1 cf       	rjmp	.-94     	; 0x836 <Endpoint_Write_Control_Stream_LE+0x2c>
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <Endpoint_Write_Control_Stream_LE+0x98>
 896:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 89a:	88 23       	and	r24, r24
 89c:	51 f0       	breq	.+20     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0xa8>
 89e:	85 30       	cpi	r24, 0x05	; 5
 8a0:	51 f0       	breq	.+20     	; 0x8b6 <Endpoint_Write_Control_Stream_LE+0xac>
 8a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a6:	82 ff       	sbrs	r24, 2
 8a8:	f6 cf       	rjmp	.-20     	; 0x896 <Endpoint_Write_Control_Stream_LE+0x8c>
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	08 95       	ret
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	08 95       	ret

000008ba <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8ba:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <USB_ControlRequest+0x6>
 8be:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <USB_ControlRequest+0x7>
 8c2:	26 17       	cp	r18, r22
 8c4:	37 07       	cpc	r19, r23
 8c6:	48 f0       	brcs	.+18     	; 0x8da <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8c8:	61 15       	cp	r22, r1
 8ca:	71 05       	cpc	r23, r1
 8cc:	39 f4       	brne	.+14     	; 0x8dc <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8ce:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8d2:	2e 77       	andi	r18, 0x7E	; 126
 8d4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <Endpoint_Write_Control_PStream_LE+0x22>
 8da:	b9 01       	movw	r22, r18
 8dc:	fc 01       	movw	r30, r24
 8de:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8e0:	61 15       	cp	r22, r1
 8e2:	71 05       	cpc	r23, r1
 8e4:	71 f1       	breq	.+92     	; 0x942 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8e6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8ea:	88 23       	and	r24, r24
 8ec:	d9 f1       	breq	.+118    	; 0x964 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8ee:	85 30       	cpi	r24, 0x05	; 5
 8f0:	d9 f1       	breq	.+118    	; 0x968 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 8f6:	83 fd       	sbrc	r24, 3
 8f8:	33 c0       	rjmp	.+102    	; 0x960 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 8fe:	82 fd       	sbrc	r24, 2
 900:	29 c0       	rjmp	.+82     	; 0x954 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 902:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 906:	80 ff       	sbrs	r24, 0
 908:	eb cf       	rjmp	.-42     	; 0x8e0 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 90a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 90e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 912:	61 15       	cp	r22, r1
 914:	71 05       	cpc	r23, r1
 916:	59 f0       	breq	.+22     	; 0x92e <Endpoint_Write_Control_PStream_LE+0x74>
 918:	88 30       	cpi	r24, 0x08	; 8
 91a:	91 05       	cpc	r25, r1
 91c:	40 f4       	brcc	.+16     	; 0x92e <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 91e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 920:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 924:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 926:	61 50       	subi	r22, 0x01	; 1
 928:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	f2 cf       	rjmp	.-28     	; 0x912 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 92e:	21 e0       	ldi	r18, 0x01	; 1
 930:	08 97       	sbiw	r24, 0x08	; 8
 932:	09 f0       	breq	.+2      	; 0x936 <Endpoint_Write_Control_PStream_LE+0x7c>
 934:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 936:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 93a:	8e 77       	andi	r24, 0x7E	; 126
 93c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 940:	cf cf       	rjmp	.-98     	; 0x8e0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 942:	21 11       	cpse	r18, r1
 944:	d0 cf       	rjmp	.-96     	; 0x8e6 <Endpoint_Write_Control_PStream_LE+0x2c>
 946:	06 c0       	rjmp	.+12     	; 0x954 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 948:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 94c:	88 23       	and	r24, r24
 94e:	51 f0       	breq	.+20     	; 0x964 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 950:	85 30       	cpi	r24, 0x05	; 5
 952:	51 f0       	breq	.+20     	; 0x968 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 958:	82 ff       	sbrs	r24, 2
 95a:	f6 cf       	rjmp	.-20     	; 0x948 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 968:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 96a:	08 95       	ret

0000096c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	aa 97       	sbiw	r28, 0x2a	; 42
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	e0 e1       	ldi	r30, 0x10	; 16
 986:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 988:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 98c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 98e:	21 e0       	ldi	r18, 0x01	; 1
 990:	e8 31       	cpi	r30, 0x18	; 24
 992:	f2 07       	cpc	r31, r18
 994:	c9 f7       	brne	.-14     	; 0x988 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 996:	cb dc       	rcall	.-1642   	; 0x32e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 99c:	83 ff       	sbrs	r24, 3
 99e:	1d c1       	rjmp	.+570    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 9a4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x1>
 9a8:	49 2f       	mov	r20, r25
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	4a 30       	cpi	r20, 0x0A	; 10
 9ae:	51 05       	cpc	r21, r1
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <USB_Device_ProcessControlRequest+0x48>
 9b2:	13 c1       	rjmp	.+550    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
 9b4:	fa 01       	movw	r30, r20
 9b6:	e4 5b       	subi	r30, 0xB4	; 180
 9b8:	ff 4f       	sbci	r31, 0xFF	; 255
 9ba:	d2 c1       	rjmp	.+932    	; 0xd60 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9bc:	80 38       	cpi	r24, 0x80	; 128
 9be:	81 f0       	breq	.+32     	; 0x9e0 <USB_Device_ProcessControlRequest+0x74>
 9c0:	82 38       	cpi	r24, 0x82	; 130
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <USB_Device_ProcessControlRequest+0x5a>
 9c4:	0a c1       	rjmp	.+532    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 9ca:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9cc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9d0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 9d4:	85 fb       	bst	r24, 5
 9d6:	88 27       	eor	r24, r24
 9d8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9da:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 9e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9e4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <USB_Device_RemoteWakeupEnabled>
 9e8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9ea:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9ec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9f0:	97 7f       	andi	r25, 0xF7	; 247
 9f2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 9fa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 9fe:	c5 c0       	rjmp	.+394    	; 0xb8a <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a00:	28 2f       	mov	r18, r24
 a02:	2d 7f       	andi	r18, 0xFD	; 253
 a04:	09 f0       	breq	.+2      	; 0xa08 <USB_Device_ProcessControlRequest+0x9c>
 a06:	e9 c0       	rjmp	.+466    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a08:	88 23       	and	r24, r24
 a0a:	19 f0       	breq	.+6      	; 0xa12 <USB_Device_ProcessControlRequest+0xa6>
 a0c:	82 30       	cpi	r24, 0x02	; 2
 a0e:	61 f0       	breq	.+24     	; 0xa28 <USB_Device_ProcessControlRequest+0xbc>
 a10:	e4 c0       	rjmp	.+456    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a12:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 a16:	81 30       	cpi	r24, 0x01	; 1
 a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0xb0>
 a1a:	df c0       	rjmp	.+446    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a1c:	93 30       	cpi	r25, 0x03	; 3
 a1e:	09 f0       	breq	.+2      	; 0xa22 <USB_Device_ProcessControlRequest+0xb6>
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_Device_RemoteWakeupEnabled>
 a26:	2b c0       	rjmp	.+86     	; 0xa7e <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a28:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 a2c:	81 11       	cpse	r24, r1
 a2e:	27 c0       	rjmp	.+78     	; 0xa7e <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a30:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 a34:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a36:	09 f4       	brne	.+2      	; 0xa3a <USB_Device_ProcessControlRequest+0xce>
 a38:	d0 c0       	rjmp	.+416    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a3a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a3e:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a42:	20 ff       	sbrs	r18, 0
 a44:	1c c0       	rjmp	.+56     	; 0xa7e <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a46:	93 30       	cpi	r25, 0x03	; 3
 a48:	21 f4       	brne	.+8      	; 0xa52 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a4a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a4e:	80 62       	ori	r24, 0x20	; 32
 a50:	14 c0       	rjmp	.+40     	; 0xa7a <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a52:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a56:	90 61       	ori	r25, 0x10	; 16
 a58:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a5c:	21 e0       	ldi	r18, 0x01	; 1
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	a9 01       	movw	r20, r18
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <USB_Device_ProcessControlRequest+0xfc>
 a64:	44 0f       	add	r20, r20
 a66:	55 1f       	adc	r21, r21
 a68:	8a 95       	dec	r24
 a6a:	e2 f7       	brpl	.-8      	; 0xa64 <USB_Device_ProcessControlRequest+0xf8>
 a6c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 a70:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a74:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a78:	88 60       	ori	r24, 0x08	; 8
 a7a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a7e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a86:	87 7f       	andi	r24, 0xF7	; 247
 a88:	83 c0       	rjmp	.+262    	; 0xb90 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a8a:	81 11       	cpse	r24, r1
 a8c:	a6 c0       	rjmp	.+332    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a8e:	10 91 12 01 	lds	r17, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 a92:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a94:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a96:	f8 94       	cli
 a98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a9c:	87 7f       	andi	r24, 0xF7	; 247
 a9e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 aa2:	aa dc       	rcall	.-1708   	; 0x3f8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aa4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 aa8:	80 ff       	sbrs	r24, 0
 aaa:	fc cf       	rjmp	.-8      	; 0xaa4 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 aac:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ab0:	80 78       	andi	r24, 0x80	; 128
 ab2:	81 2b       	or	r24, r17

				UDADDR = Temp;
 ab4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 ab8:	80 68       	ori	r24, 0x80	; 128
 aba:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 abe:	11 11       	cpse	r17, r1
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <USB_Device_ProcessControlRequest+0x15a>
 ac2:	82 e0       	ldi	r24, 0x02	; 2
 ac4:	01 c0       	rjmp	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x15c>
 ac6:	83 e0       	ldi	r24, 0x03	; 3
 ac8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 acc:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 ace:	85 c0       	rjmp	.+266    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ad0:	80 58       	subi	r24, 0x80	; 128
 ad2:	82 30       	cpi	r24, 0x02	; 2
 ad4:	08 f0       	brcs	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x16c>
 ad6:	81 c0       	rjmp	.+258    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ad8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 adc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x3>
 ae0:	8c 3d       	cpi	r24, 0xDC	; 220
 ae2:	53 e0       	ldi	r21, 0x03	; 3
 ae4:	95 07       	cpc	r25, r21
 ae6:	71 f5       	brne	.+92     	; 0xb44 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 aec:	8a e2       	ldi	r24, 0x2A	; 42
 aee:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 af0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 af2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 af4:	de 01       	movw	r26, r28
 af6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 af8:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 afa:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 afc:	51 e2       	ldi	r21, 0x21	; 33
 afe:	e3 2f       	mov	r30, r19
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 b06:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b08:	20 ff       	sbrs	r18, 0
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 b0c:	e2 95       	swap	r30
 b0e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b10:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b12:	ef 70       	andi	r30, 0x0F	; 15
 b14:	8e 2f       	mov	r24, r30
 b16:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b18:	ea 30       	cpi	r30, 0x0A	; 10
 b1a:	10 f0       	brcs	.+4      	; 0xb20 <USB_Device_ProcessControlRequest+0x1b4>
 b1c:	c7 96       	adiw	r24, 0x37	; 55
 b1e:	01 c0       	rjmp	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0x1b6>
 b20:	c0 96       	adiw	r24, 0x30	; 48
 b22:	8d 93       	st	X+, r24
 b24:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b26:	2f 5f       	subi	r18, 0xFF	; 255
 b28:	24 31       	cpi	r18, 0x14	; 20
 b2a:	49 f7       	brne	.-46     	; 0xafe <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b2c:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b32:	87 7f       	andi	r24, 0xF7	; 247
 b34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b38:	6a e2       	ldi	r22, 0x2A	; 42
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	ce 01       	movw	r24, r28
 b3e:	01 96       	adiw	r24, 0x01	; 1
 b40:	64 de       	rcall	.-824    	; 0x80a <Endpoint_Write_Control_Stream_LE>
 b42:	12 c0       	rjmp	.+36     	; 0xb68 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b44:	ae 01       	movw	r20, r28
 b46:	4f 5f       	subi	r20, 0xFF	; 255
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 b4e:	f0 db       	rcall	.-2080   	; 0x330 <CALLBACK_USB_GetDescriptor>
 b50:	bc 01       	movw	r22, r24
 b52:	89 2b       	or	r24, r25
 b54:	09 f4       	brne	.+2      	; 0xb58 <USB_Device_ProcessControlRequest+0x1ec>
 b56:	41 c0       	rjmp	.+130    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
 b58:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b5c:	97 7f       	andi	r25, 0xF7	; 247
 b5e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b62:	89 81       	ldd	r24, Y+1	; 0x01
 b64:	9a 81       	ldd	r25, Y+2	; 0x02
 b66:	a9 de       	rcall	.-686    	; 0x8ba <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b6c:	8b 77       	andi	r24, 0x7B	; 123
 b6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b72:	33 c0       	rjmp	.+102    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b74:	80 38       	cpi	r24, 0x80	; 128
 b76:	89 f5       	brne	.+98     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b7c:	87 7f       	andi	r24, 0xF7	; 247
 b7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b82:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b86:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b8e:	8e 77       	andi	r24, 0x7E	; 126
 b90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b94:	31 dc       	rcall	.-1950   	; 0x3f8 <Endpoint_ClearStatusStage>
 b96:	21 c0       	rjmp	.+66     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b98:	81 11       	cpse	r24, r1
 b9a:	1f c0       	rjmp	.+62     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b9c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 ba0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x3>
 ba4:	99 27       	eor	r25, r25
 ba6:	02 97       	sbiw	r24, 0x02	; 2
 ba8:	c4 f4       	brge	.+48     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 baa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bae:	87 7f       	andi	r24, 0xF7	; 247
 bb0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bb4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 bb8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 bbc:	1d dc       	rcall	.-1990   	; 0x3f8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bbe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Device_ConfigurationNumber>
 bc2:	81 11       	cpse	r24, r1
 bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bc6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bca:	87 fd       	sbrc	r24, 7
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <USB_Device_ProcessControlRequest+0x266>
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x268>
 bd2:	84 e0       	ldi	r24, 0x04	; 4
 bd4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 bd8:	a1 db       	rcall	.-2238   	; 0x31c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bde:	83 ff       	sbrs	r24, 3
 be0:	0a c0       	rjmp	.+20     	; 0xbf6 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 be2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 be6:	80 62       	ori	r24, 0x20	; 32
 be8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bf0:	87 7f       	andi	r24, 0xF7	; 247
 bf2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 bf6:	aa 96       	adiw	r28, 0x2a	; 42
 bf8:	0f b6       	in	r0, 0x3f	; 63
 bfa:	f8 94       	cli
 bfc:	de bf       	out	0x3e, r29	; 62
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	cd bf       	out	0x3d, r28	; 61
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	1f 91       	pop	r17
 c08:	0f 91       	pop	r16
 c0a:	08 95       	ret

00000c0c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c0c:	08 95       	ret

00000c0e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c0e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c10:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 c14:	88 23       	and	r24, r24
 c16:	59 f0       	breq	.+22     	; 0xc2e <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c18:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c1c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c1e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c26:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c28:	a1 de       	rcall	.-702    	; 0x96c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c2a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c2e:	cf 91       	pop	r28
 c30:	08 95       	ret

00000c32 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDI.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 c32:	0f 93       	push	r16
 c34:	1f 93       	push	r17
 c36:	cf 93       	push	r28
 c38:	8c 01       	movw	r16, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 c3a:	c1 e0       	ldi	r28, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MIDIInterfaceInfo->Config.DataINEndpointNumber)
 c3c:	f8 01       	movw	r30, r16
 c3e:	81 81       	ldd	r24, Z+1	; 0x01
 c40:	8c 13       	cpse	r24, r28
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <MIDI_Device_ConfigureEndpoints+0x1c>
		{
			Size         = MIDIInterfaceInfo->Config.DataINEndpointSize;
 c44:	62 81       	ldd	r22, Z+2	; 0x02
 c46:	73 81       	ldd	r23, Z+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataINEndpointDoubleBank;
 c48:	84 81       	ldd	r24, Z+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == MIDIInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = MIDIInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
 c4a:	90 e8       	ldi	r25, 0x80	; 128
 c4c:	0e c0       	rjmp	.+28     	; 0xc6a <MIDI_Device_ConfigureEndpoints+0x38>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MIDIInterfaceInfo->Config.DataOUTEndpointNumber)
 c4e:	f8 01       	movw	r30, r16
 c50:	85 81       	ldd	r24, Z+5	; 0x05
 c52:	8c 17       	cp	r24, r28
 c54:	29 f0       	breq	.+10     	; 0xc60 <MIDI_Device_ConfigureEndpoints+0x2e>

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 c56:	cf 5f       	subi	r28, 0xFF	; 255
 c58:	c7 30       	cpi	r28, 0x07	; 7
 c5a:	81 f7       	brne	.-32     	; 0xc3c <MIDI_Device_ConfigureEndpoints+0xa>
		{
			return false;
		}
	}

	return true;
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	1e c0       	rjmp	.+60     	; 0xc9c <MIDI_Device_ConfigureEndpoints+0x6a>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MIDIInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MIDIInterfaceInfo->Config.DataOUTEndpointSize;
 c60:	f8 01       	movw	r30, r16
 c62:	66 81       	ldd	r22, Z+6	; 0x06
 c64:	77 81       	ldd	r23, Z+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 c66:	80 85       	ldd	r24, Z+8	; 0x08
			DoubleBanked = MIDIInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MIDIInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MIDIInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
 c68:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 c6a:	81 11       	cpse	r24, r1
 c6c:	84 e0       	ldi	r24, 0x04	; 4
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 c6e:	28 e0       	ldi	r18, 0x08	; 8
 c70:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 c72:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 c74:	26 17       	cp	r18, r22
 c76:	37 07       	cpc	r19, r23
 c78:	20 f4       	brcc	.+8      	; 0xc82 <MIDI_Device_ConfigureEndpoints+0x50>
				{
					MaskVal++;
 c7a:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	f9 cf       	rjmp	.-14     	; 0xc74 <MIDI_Device_ConfigureEndpoints+0x42>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 c82:	42 95       	swap	r20
 c84:	40 7f       	andi	r20, 0xF0	; 240
 c86:	82 60       	ori	r24, 0x02	; 2
 c88:	48 2b       	or	r20, r24
 c8a:	61 e0       	ldi	r22, 0x01	; 1
 c8c:	91 11       	cpse	r25, r1
 c8e:	01 c0       	rjmp	.+2      	; 0xc92 <MIDI_Device_ConfigureEndpoints+0x60>
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	60 68       	ori	r22, 0x80	; 128
 c94:	8c 2f       	mov	r24, r28
 c96:	7c db       	rcall	.-2312   	; 0x390 <Endpoint_ConfigureEndpoint_Prv>
 c98:	81 11       	cpse	r24, r1
 c9a:	dd cf       	rjmp	.-70     	; 0xc56 <MIDI_Device_ConfigureEndpoints+0x24>
			return false;
		}
	}

	return true;
}
 c9c:	cf 91       	pop	r28
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	08 95       	ret

00000ca4 <MIDI_Device_SendEventPacket>:
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 ca4:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <USB_DeviceState>
 ca8:	24 30       	cpi	r18, 0x04	; 4
 caa:	c9 f4       	brne	.+50     	; 0xcde <MIDI_Device_SendEventPacket+0x3a>
 cac:	9b 01       	movw	r18, r22
 cae:	fc 01       	movw	r30, r24
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpointNumber);
 cb0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cb2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 cb6:	40 e0       	ldi	r20, 0x00	; 0
 cb8:	50 e0       	ldi	r21, 0x00	; 0
 cba:	64 e0       	ldi	r22, 0x04	; 4
 cbc:	70 e0       	ldi	r23, 0x00	; 0
 cbe:	c9 01       	movw	r24, r18
 cc0:	10 dd       	rcall	.-1504   	; 0x6e2 <Endpoint_Write_Stream_LE>
 cc2:	81 11       	cpse	r24, r1
 cc4:	0f c0       	rjmp	.+30     	; 0xce4 <MIDI_Device_SendEventPacket+0x40>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 cc6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 cca:	89 2f       	mov	r24, r25
 ccc:	80 72       	andi	r24, 0x20	; 32
 cce:	95 fd       	sbrc	r25, 5
 cd0:	08 c0       	rjmp	.+16     	; 0xce2 <MIDI_Device_SendEventPacket+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cd2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cd6:	9e 77       	andi	r25, 0x7E	; 126
 cd8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cdc:	08 95       	ret

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 cde:	82 e0       	ldi	r24, 0x02	; 2
 ce0:	08 95       	ret
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
 ce2:	80 e0       	ldi	r24, 0x00	; 0
}
 ce4:	08 95       	ret

00000ce6 <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 ce6:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <USB_DeviceState>
 cea:	24 30       	cpi	r18, 0x04	; 4
 cec:	81 f4       	brne	.+32     	; 0xd0e <MIDI_Device_Flush+0x28>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpointNumber);
 cee:	fc 01       	movw	r30, r24
 cf0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cf6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 cfa:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	if (Endpoint_BytesInEndpoint())
 cfe:	89 2b       	or	r24, r25
 d00:	41 f0       	breq	.+16     	; 0xd12 <MIDI_Device_Flush+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d06:	8e 77       	andi	r24, 0x7E	; 126
 d08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d0c:	94 cb       	rjmp	.-2264   	; 0x436 <Endpoint_WaitUntilReady>
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d0e:	82 e0       	ldi	r24, 0x02	; 2
 d10:	08 95       	ret

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d12:	80 e0       	ldi	r24, 0x00	; 0
}
 d14:	08 95       	ret

00000d16 <MIDI_Device_USBTask>:
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d16:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <USB_DeviceState>
 d1a:	24 30       	cpi	r18, 0x04	; 4
 d1c:	09 f4       	brne	.+2      	; 0xd20 <MIDI_Device_USBTask+0xa>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Device_Flush(MIDIInterfaceInfo);
 d1e:	e3 cf       	rjmp	.-58     	; 0xce6 <MIDI_Device_Flush>
 d20:	08 95       	ret

00000d22 <MIDI_Device_ReceiveEventPacket>:
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d22:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <USB_DeviceState>
 d26:	24 30       	cpi	r18, 0x04	; 4
 d28:	11 f0       	breq	.+4      	; 0xd2e <MIDI_Device_ReceiveEventPacket+0xc>
	  return false;
 d2a:	80 e0       	ldi	r24, 0x00	; 0
 d2c:	08 95       	ret

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpointNumber);
 d2e:	fc 01       	movw	r30, r24
 d30:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d32:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (!(Endpoint_IsReadWriteAllowed()))
 d3a:	85 ff       	sbrs	r24, 5
 d3c:	f6 cf       	rjmp	.-20     	; 0xd2a <MIDI_Device_ReceiveEventPacket+0x8>
 d3e:	cb 01       	movw	r24, r22
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 d40:	40 e0       	ldi	r20, 0x00	; 0
 d42:	50 e0       	ldi	r21, 0x00	; 0
 d44:	64 e0       	ldi	r22, 0x04	; 4
 d46:	70 e0       	ldi	r23, 0x00	; 0
 d48:	16 dd       	rcall	.-1492   	; 0x776 <Endpoint_Read_Stream_LE>
 d4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (!(Endpoint_IsReadWriteAllowed()))
 d4e:	85 fd       	sbrc	r24, 5
 d50:	05 c0       	rjmp	.+10     	; 0xd5c <MIDI_Device_ReceiveEventPacket+0x3a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d56:	8b 77       	andi	r24, 0x7B	; 123
 d58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	return true;
 d5c:	81 e0       	ldi	r24, 0x01	; 1
}
 d5e:	08 95       	ret

00000d60 <__tablejump2__>:
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	00 24       	eor	r0, r0
 d66:	00 1c       	adc	r0, r0
 d68:	0b be       	out	0x3b, r0	; 59
 d6a:	07 90       	elpm	r0, Z+
 d6c:	f6 91       	elpm	r31, Z
 d6e:	e0 2d       	mov	r30, r0
 d70:	09 94       	ijmp

00000d72 <_exit>:
 d72:	f8 94       	cli

00000d74 <__stop_program>:
 d74:	ff cf       	rjmp	.-2      	; 0xd74 <__stop_program>
