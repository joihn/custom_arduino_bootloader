
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000248c  00002520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000248c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  00002546  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073f3  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025d7  00000000  00000000  00009d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036e5  00000000  00000000  0000c2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c14  00000000  00000000  0000f9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000282f  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044fc  00000000  00000000  00012e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  00017307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	30 c2       	rjmp	.+1120   	; 0x462 <__ctors_end>
       2:	00 00       	nop
       4:	4c c2       	rjmp	.+1176   	; 0x49e <__bad_interrupt>
       6:	00 00       	nop
       8:	4a c2       	rjmp	.+1172   	; 0x49e <__bad_interrupt>
       a:	00 00       	nop
       c:	48 c2       	rjmp	.+1168   	; 0x49e <__bad_interrupt>
       e:	00 00       	nop
      10:	46 c2       	rjmp	.+1164   	; 0x49e <__bad_interrupt>
      12:	00 00       	nop
      14:	44 c2       	rjmp	.+1160   	; 0x49e <__bad_interrupt>
      16:	00 00       	nop
      18:	42 c2       	rjmp	.+1156   	; 0x49e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	40 c2       	rjmp	.+1152   	; 0x49e <__bad_interrupt>
      1e:	00 00       	nop
      20:	3e c2       	rjmp	.+1148   	; 0x49e <__bad_interrupt>
      22:	00 00       	nop
      24:	3c c2       	rjmp	.+1144   	; 0x49e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_10>
      2c:	38 c2       	rjmp	.+1136   	; 0x49e <__bad_interrupt>
      2e:	00 00       	nop
      30:	36 c2       	rjmp	.+1132   	; 0x49e <__bad_interrupt>
      32:	00 00       	nop
      34:	34 c2       	rjmp	.+1128   	; 0x49e <__bad_interrupt>
      36:	00 00       	nop
      38:	32 c2       	rjmp	.+1124   	; 0x49e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	30 c2       	rjmp	.+1120   	; 0x49e <__bad_interrupt>
      3e:	00 00       	nop
      40:	2e c2       	rjmp	.+1116   	; 0x49e <__bad_interrupt>
      42:	00 00       	nop
      44:	2c c2       	rjmp	.+1112   	; 0x49e <__bad_interrupt>
      46:	00 00       	nop
      48:	2a c2       	rjmp	.+1108   	; 0x49e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	28 c2       	rjmp	.+1104   	; 0x49e <__bad_interrupt>
      4e:	00 00       	nop
      50:	26 c2       	rjmp	.+1100   	; 0x49e <__bad_interrupt>
      52:	00 00       	nop
      54:	24 c2       	rjmp	.+1096   	; 0x49e <__bad_interrupt>
      56:	00 00       	nop
      58:	22 c2       	rjmp	.+1092   	; 0x49e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	20 c2       	rjmp	.+1088   	; 0x49e <__bad_interrupt>
      5e:	00 00       	nop
      60:	1e c2       	rjmp	.+1084   	; 0x49e <__bad_interrupt>
      62:	00 00       	nop
      64:	1c c2       	rjmp	.+1080   	; 0x49e <__bad_interrupt>
      66:	00 00       	nop
      68:	1a c2       	rjmp	.+1076   	; 0x49e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	18 c2       	rjmp	.+1072   	; 0x49e <__bad_interrupt>
      6e:	00 00       	nop
      70:	16 c2       	rjmp	.+1068   	; 0x49e <__bad_interrupt>
      72:	00 00       	nop
      74:	14 c2       	rjmp	.+1064   	; 0x49e <__bad_interrupt>
      76:	00 00       	nop
      78:	12 c2       	rjmp	.+1060   	; 0x49e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	10 c2       	rjmp	.+1056   	; 0x49e <__bad_interrupt>
      7e:	00 00       	nop
      80:	0e c2       	rjmp	.+1052   	; 0x49e <__bad_interrupt>
      82:	00 00       	nop
      84:	0c c2       	rjmp	.+1048   	; 0x49e <__bad_interrupt>
      86:	00 00       	nop
      88:	0a c2       	rjmp	.+1044   	; 0x49e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 c2       	rjmp	.+1040   	; 0x49e <__bad_interrupt>
      8e:	00 00       	nop
      90:	06 c2       	rjmp	.+1036   	; 0x49e <__bad_interrupt>
      92:	00 00       	nop
      94:	04 c2       	rjmp	.+1032   	; 0x49e <__bad_interrupt>
      96:	00 00       	nop
      98:	a3 09       	sbc	r26, r3
      9a:	94 0a       	sbc	r9, r20
      9c:	c1 09       	sbc	r28, r1
      9e:	cb 09       	sbc	r28, r11
      a0:	f6 09       	sbc	r31, r6
      a2:	1e 0a       	sbc	r1, r30
      a4:	29 0a       	sbc	r2, r25
      a6:	3a 0a       	sbc	r3, r26
      a8:	56 0a       	sbc	r5, r22
      aa:	7d 0a       	sbc	r7, r29

000000ac <__trampolines_end>:
      ac:	20 20       	and	r2, r0
      ae:	2d 2d       	mov	r18, r13
      b0:	20 45       	sbci	r18, 0x50	; 80
      b2:	72 72       	andi	r23, 0x22	; 34
      b4:	6f 72       	andi	r22, 0x2F	; 47
      b6:	20 43       	sbci	r18, 0x30	; 48
      b8:	6f 64       	ori	r22, 0x4F	; 79
      ba:	65 3a       	cpi	r22, 0xA5	; 165
      bc:	20 25       	eor	r18, r0
      be:	64 1b       	sub	r22, r20
      c0:	5b 33       	cpi	r21, 0x3B	; 59
      c2:	37 6d       	ori	r19, 0xD7	; 215
      c4:	00 1b       	Address 0x00000000000000c4 is out of bounds.
.word	0xffff	; ????

000000c5 <__c.4678>:
      c5:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
      d5:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

000000e0 <__c.4676>:
      e0:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
      f0:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

00000100 <__c.4662>:
     100:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     110:	6b 00                                               k.

00000112 <__c.4656>:
     112:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 
     122:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     132:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
     142:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
     152:	0a 0d 0a 00                                         ....

00000156 <__c.4651>:
     156:	0d 0a 00                                            ...

00000159 <__c.4644>:
     159:	20 20 20 20 00                                          .

0000015e <__c.4639>:
     15e:	25 2e 32 58 20 00                                   %.2X .

00000164 <__c.4633>:
     164:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     174:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

00000181 <__c.4631>:
     181:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     191:	6b 00                                               k.

00000193 <__c.4628>:
     193:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     1a3:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

000001ae <__c.4626>:
     1ae:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

000001bc <__c.4623>:
     1bc:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     1cc:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

000001d6 <__c.4620>:
     1d6:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

000001e6 <__c.4617>:
     1e6:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     1f6:	61 64 79 2e 2e 00                                   ady...

000001fc <__c.4615>:
     1fc:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     20c:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     21c:	00                                                  .

0000021d <__c.4613>:
     21d:	49 6e 71 75 69 72 79 00                             Inquiry.

00000225 <__c.4610>:
     225:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     235:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

00000242 <__c.4608>:
     242:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

00000250 <__c.4605>:
     250:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     260:	65 74 00                                            et.

00000263 <__c.4603>:
     263:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     273:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     283:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

00000291 <__c.4601>:
     291:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

0000029d <__c.4595>:
     29d:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     2ad:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2bd:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2cd:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2dd:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2ed:	1b 5b 33 37 6d 00                                   .[37m.

000002f3 <__c.4588>:
     2f3:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     303:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     313:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000322 <__c.4583>:
     322:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
     332:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

00000342 <__c.4581>:
     342:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     352:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     362:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     372:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     382:	37 6d 00                                            7m.

00000385 <__c.4579>:
     385:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     395:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000039f <__c.4577>:
     39f:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     3af:	69 63 65 2e 0d 0a 00                                ice....

000003b6 <__c.4575>:
     3b6:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     3c6:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     3d6:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000003e0 <__c.4572>:
     3e0:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     3f0:	61 74 61 2e 0d 0a 00                                ata....

000003f7 <__c.4567>:
     3f7:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     407:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     417:	00                                                  .

00000418 <__c.4562>:
     418:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     428:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000435 <__c.4553>:
     435:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     445:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     455:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

00000462 <__ctors_end>:
     462:	11 24       	eor	r1, r1
     464:	1f be       	out	0x3f, r1	; 63
     466:	cf ef       	ldi	r28, 0xFF	; 255
     468:	d0 e2       	ldi	r29, 0x20	; 32
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	cd bf       	out	0x3d, r28	; 61

0000046e <__do_copy_data>:
     46e:	11 e0       	ldi	r17, 0x01	; 1
     470:	a0 e0       	ldi	r26, 0x00	; 0
     472:	b1 e0       	ldi	r27, 0x01	; 1
     474:	ec e8       	ldi	r30, 0x8C	; 140
     476:	f4 e2       	ldi	r31, 0x24	; 36
     478:	00 e0       	ldi	r16, 0x00	; 0
     47a:	0b bf       	out	0x3b, r16	; 59
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__do_copy_data+0x14>
     47e:	07 90       	elpm	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	a6 32       	cpi	r26, 0x26	; 38
     484:	b1 07       	cpc	r27, r17
     486:	d9 f7       	brne	.-10     	; 0x47e <__do_copy_data+0x10>

00000488 <__do_clear_bss>:
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	a6 e2       	ldi	r26, 0x26	; 38
     48c:	b1 e0       	ldi	r27, 0x01	; 1
     48e:	01 c0       	rjmp	.+2      	; 0x492 <.do_clear_bss_start>

00000490 <.do_clear_bss_loop>:
     490:	1d 92       	st	X+, r1

00000492 <.do_clear_bss_start>:
     492:	a9 34       	cpi	r26, 0x49	; 73
     494:	b2 07       	cpc	r27, r18
     496:	e1 f7       	brne	.-8      	; 0x490 <.do_clear_bss_loop>
     498:	9c d2       	rcall	.+1336   	; 0x9d2 <main>
     49a:	0c 94 44 12 	jmp	0x2488	; 0x2488 <_exit>

0000049e <__bad_interrupt>:
     49e:	b0 cd       	rjmp	.-1184   	; 0x0 <__vectors>

000004a0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4a0:	9b b1       	in	r25, 0x0b	; 11
     4a2:	9f 70       	andi	r25, 0x0F	; 15
     4a4:	89 2b       	or	r24, r25
     4a6:	8b b9       	out	0x0b, r24	; 11
     4a8:	08 95       	ret

000004aa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4aa:	84 b7       	in	r24, 0x34	; 52
     4ac:	87 7f       	andi	r24, 0xF7	; 247
     4ae:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	a8 95       	wdr
     4b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4ba:	88 61       	ori	r24, 0x18	; 24
     4bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4c4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 e8       	ldi	r24, 0x80	; 128
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4d6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     4d8:	83 e3       	ldi	r24, 0x33	; 51
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     4e0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     4e4:	86 e0       	ldi	r24, 0x06	; 6
     4e6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     4ea:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     4ee:	88 e1       	ldi	r24, 0x18	; 24
     4f0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     4f4:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     4f6:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4f8:	8a b1       	in	r24, 0x0a	; 10
     4fa:	80 6f       	ori	r24, 0xF0	; 240
     4fc:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4fe:	8b b1       	in	r24, 0x0b	; 11
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     504:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     506:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     508:	0e 94 a7 0b 	call	0x174e	; 0x174e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     50c:	a3 e4       	ldi	r26, 0x43	; 67
     50e:	b1 e0       	ldi	r27, 0x01	; 1
     510:	e5 e3       	ldi	r30, 0x35	; 53
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	fc 93       	st	X, r31
     518:	ee 93       	st	-X, r30
					stdout = Stream;
     51a:	13 96       	adiw	r26, 0x03	; 3
     51c:	fc 93       	st	X, r31
     51e:	ee 93       	st	-X, r30
     520:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     522:	8e e0       	ldi	r24, 0x0E	; 14
     524:	df 01       	movw	r26, r30
     526:	1d 92       	st	X+, r1
     528:	8a 95       	dec	r24
     52a:	e9 f7       	brne	.-6      	; 0x526 <SetupHardware+0x7c>
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	83 83       	std	Z+3, r24	; 0x03
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	9f e0       	ldi	r25, 0x0F	; 15
     534:	91 87       	std	Z+9, r25	; 0x09
     536:	80 87       	std	Z+8, r24	; 0x08
     538:	8a e0       	ldi	r24, 0x0A	; 10
     53a:	9f e0       	ldi	r25, 0x0F	; 15
     53c:	93 87       	std	Z+11, r25	; 0x0b
     53e:	82 87       	std	Z+10, r24	; 0x0a
     540:	08 95       	ret

00000542 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     542:	88 e1       	ldi	r24, 0x18	; 24
     544:	94 e0       	ldi	r25, 0x04	; 4
     546:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     54a:	80 ea       	ldi	r24, 0xA0	; 160
     54c:	a9 cf       	rjmp	.-174    	; 0x4a0 <LEDs_SetAllLEDs>

0000054e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     54e:	87 ef       	ldi	r24, 0xF7	; 247
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     556:	80 e1       	ldi	r24, 0x10	; 16
     558:	a3 cf       	rjmp	.-186    	; 0x4a0 <LEDs_SetAllLEDs>

0000055a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     55a:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     55c:	80 ee       	ldi	r24, 0xE0	; 224
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     564:	63 d2       	rcall	.+1222   	; 0xa2c <ProcessConfigurationDescriptor>
     566:	c8 2f       	mov	r28, r24
     568:	88 23       	and	r24, r24
     56a:	b9 f0       	breq	.+46     	; 0x59a <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	{
		if (ErrorCode == ControlError)
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	19 f4       	brne	.+6      	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     570:	86 eb       	ldi	r24, 0xB6	; 182
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	02 c0       	rjmp	.+4      	; 0x57a <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     576:	8f e9       	ldi	r24, 0x9F	; 159
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     57e:	1f 92       	push	r1
     580:	cf 93       	push	r28
     582:	85 e8       	ldi	r24, 0x85	; 133
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	80 e9       	ldi	r24, 0x90	; 144
     598:	0f c0       	rjmp	.+30     	; 0x5b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <USB_Host_SetDeviceConfiguration>
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     5a4:	1f 92       	push	r1
     5a6:	8f 93       	push	r24
     5a8:	82 e4       	ldi	r24, 0x42	; 66
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	ec cf       	rjmp	.-40     	; 0x586 <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Mass Storage Disk Enumerated.\r\n"));
     5ae:	82 e2       	ldi	r24, 0x22	; 34
     5b0:	93 e0       	ldi	r25, 0x03	; 3
     5b2:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5b6:	80 e6       	ldi	r24, 0x60	; 96
     5b8:	cf 91       	pop	r28
     5ba:	72 cf       	rjmp	.-284    	; 0x4a0 <LEDs_SetAllLEDs>

000005bc <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     5bc:	c8 2f       	mov	r28, r24
	USB_Disable();
     5be:	0e 94 3f 0b 	call	0x167e	; 0x167e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5c2:	1f 92       	push	r1
     5c4:	cf 93       	push	r28
     5c6:	83 ef       	ldi	r24, 0xF3	; 243
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5d2:	80 e9       	ldi	r24, 0x90	; 144
     5d4:	65 df       	rcall	.-310    	; 0x4a0 <LEDs_SetAllLEDs>
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	ff cf       	rjmp	.-2      	; 0x5de <EVENT_USB_Host_HostError+0x22>

000005e0 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5e0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <USB_HostState>
     5e4:	1f 92       	push	r1
     5e6:	9f 93       	push	r25
     5e8:	1f 92       	push	r1
     5ea:	6f 93       	push	r22
     5ec:	1f 92       	push	r1
     5ee:	8f 93       	push	r24
     5f0:	8d e9       	ldi	r24, 0x9D	; 157
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5fc:	8d b7       	in	r24, 0x3d	; 61
     5fe:	9e b7       	in	r25, 0x3e	; 62
     600:	08 96       	adiw	r24, 0x08	; 8
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	9e bf       	out	0x3e, r25	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	8d bf       	out	0x3d, r24	; 61
     60c:	80 e9       	ldi	r24, 0x90	; 144
     60e:	48 cf       	rjmp	.-368    	; 0x4a0 <LEDs_SetAllLEDs>

00000610 <ShowDiskReadError>:
 *  \param[in] CommandString  ASCII string located in PROGMEM space indicating what operation failed
 *  \param[in] ErrorCode      Error code of the function which failed to complete successfully
 */
void ShowDiskReadError(const char* CommandString,
                       const uint8_t ErrorCode)
{
     610:	cf 93       	push	r28
     612:	c6 2f       	mov	r28, r22
	if (ErrorCode == MASS_STORE_SCSI_COMMAND_FAILED)
     614:	60 3c       	cpi	r22, 0xC0	; 192
     616:	69 f4       	brne	.+26     	; 0x632 <ShowDiskReadError+0x22>
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "SCSI command error (%S).\r\n"), CommandString);
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	80 ee       	ldi	r24, 0xE0	; 224
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9f 93       	push	r25
     622:	8f 93       	push	r24
     624:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	18 c0       	rjmp	.+48     	; 0x662 <ShowDiskReadError+0x52>
	}
	else
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "Command error (%S).\r\n"), CommandString);
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	85 ec       	ldi	r24, 0xC5	; 197
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>
		printf_P(PSTR("  -- Error Code: %d" ESC_FG_WHITE), ErrorCode);
     642:	1f 92       	push	r1
     644:	cf 93       	push	r28
     646:	8c ea       	ldi	r24, 0xAC	; 172
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>
     652:	8d b7       	in	r24, 0x3d	; 61
     654:	9e b7       	in	r25, 0x3e	; 62
     656:	08 96       	adiw	r24, 0x08	; 8
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	9e bf       	out	0x3e, r25	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	8d bf       	out	0x3d, r24	; 61

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     662:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     666:	80 64       	ori	r24, 0x40	; 64
     668:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     66c:	80 e9       	ldi	r24, 0x90	; 144
}
     66e:	cf 91       	pop	r28
	}

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     670:	17 cf       	rjmp	.-466    	; 0x4a0 <LEDs_SetAllLEDs>

00000672 <MassStorageHost_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	ee 97       	sbiw	r28, 0x3e	; 62
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     6a6:	2d b6       	in	r2, 0x3d	; 61
     6a8:	3e b6       	in	r3, 0x3e	; 62
/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     6aa:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_HostState>
     6ae:	8b 30       	cpi	r24, 0x0B	; 11
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <MassStorageHost_Task+0x42>
     6b2:	71 c1       	rjmp	.+738    	; 0x996 <MassStorageHost_Task+0x324>
	  return;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     6b4:	80 e2       	ldi	r24, 0x20	; 32
     6b6:	f4 de       	rcall	.-536    	; 0x4a0 <LEDs_SetAllLEDs>

	uint8_t ErrorCode;

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = MassStore_GetMaxLUN(&MassStore_MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
     6b8:	89 e2       	ldi	r24, 0x29	; 41
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	b4 d3       	rcall	.+1896   	; 0xe26 <MassStore_GetMaxLUN>
     6be:	88 23       	and	r24, r24
     6c0:	21 f0       	breq	.+8      	; 0x6ca <MassStorageHost_Task+0x58>
	{
		ShowDiskReadError(PSTR("Get Max LUN"), ErrorCode);
     6c2:	68 2f       	mov	r22, r24
     6c4:	81 e9       	ldi	r24, 0x91	; 145
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	70 c0       	rjmp	.+224    	; 0x7aa <MassStorageHost_Task+0x138>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print number of LUNs detected in the attached device */
	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MassStore_MaxLUNIndex + 1));
     6ca:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <MassStore_MaxLUNIndex>
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	83 e6       	ldi	r24, 0x63	; 99
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>

	/* Reset the Mass Storage device interface, ready for use */
	if ((ErrorCode = MassStore_MassStorageReset()) != HOST_SENDCONTROL_Successful)
     6e2:	6e d3       	rcall	.+1756   	; 0xdc0 <MassStore_MassStorageReset>
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	88 23       	and	r24, r24
     6ee:	21 f0       	breq	.+8      	; 0x6f8 <MassStorageHost_Task+0x86>
	{
		ShowDiskReadError(PSTR("Mass Storage Reset"), ErrorCode);
     6f0:	68 2f       	mov	r22, r24
     6f2:	80 e5       	ldi	r24, 0x50	; 80
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	59 c0       	rjmp	.+178    	; 0x7aa <MassStorageHost_Task+0x138>
	}

	/* Get sense data from the device - many devices will not accept any other commands until the sense data
	 * is read - both on start-up and after a failed command */
	SCSI_Request_Sense_Response_t SenseData;
	if ((ErrorCode = MassStore_RequestSense(0, &SenseData)) != 0)
     6f8:	be 01       	movw	r22, r28
     6fa:	6b 5d       	subi	r22, 0xDB	; 219
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	f5 d3       	rcall	.+2026   	; 0xeec <MassStore_RequestSense>
     702:	88 23       	and	r24, r24
     704:	21 f0       	breq	.+8      	; 0x70e <MassStorageHost_Task+0x9c>
	{
		ShowDiskReadError(PSTR("Request Sense"), ErrorCode);
     706:	68 2f       	mov	r22, r24
     708:	82 e4       	ldi	r24, 0x42	; 66
     70a:	92 e0       	ldi	r25, 0x02	; 2
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Set the prevent removal flag for the device, allowing it to be accessed */
	if ((ErrorCode = MassStore_PreventAllowMediumRemoval(0, true)) != 0)
     70c:	4e c0       	rjmp	.+156    	; 0x7aa <MassStorageHost_Task+0x138>
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	24 d5       	rcall	.+2632   	; 0x115c <MassStore_PreventAllowMediumRemoval>
     714:	88 23       	and	r24, r24
     716:	21 f0       	breq	.+8      	; 0x720 <MassStorageHost_Task+0xae>
	{
		ShowDiskReadError(PSTR("Prevent/Allow Medium Removal"), ErrorCode);
     718:	68 2f       	mov	r22, r24
     71a:	85 e2       	ldi	r24, 0x25	; 37
     71c:	92 e0       	ldi	r25, 0x02	; 2
		return;
	}

	/* Get inquiry data from the device */
	SCSI_Inquiry_Response_t InquiryData;
	if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
     71e:	45 c0       	rjmp	.+138    	; 0x7aa <MassStorageHost_Task+0x138>
     720:	be 01       	movw	r22, r28
     722:	6f 5f       	subi	r22, 0xFF	; 255
     724:	7f 4f       	sbci	r23, 0xFF	; 255
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	9a d3       	rcall	.+1844   	; 0xe5e <MassStore_Inquiry>
     72a:	88 23       	and	r24, r24
     72c:	21 f0       	breq	.+8      	; 0x736 <MassStorageHost_Task+0xc4>
	{
		ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     72e:	68 2f       	mov	r22, r24
     730:	8d e1       	ldi	r24, 0x1D	; 29
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	3a c0       	rjmp	.+116    	; 0x7aa <MassStorageHost_Task+0x138>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print vendor and product names of attached device */
	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     736:	ce 01       	movw	r24, r28
     738:	41 96       	adiw	r24, 0x11	; 17
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	08 97       	sbiw	r24, 0x08	; 8
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	8c ef       	ldi	r24, 0xFC	; 252
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>

	/* Wait until disk ready */
	puts_P(PSTR("Waiting until ready.."));
     750:	86 ee       	ldi	r24, 0xE6	; 230
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
     764:	1e e2       	ldi	r17, 0x2E	; 46
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     766:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     76a:	85 ff       	sbrs	r24, 5
     76c:	fc cf       	rjmp	.-8      	; 0x766 <MassStorageHost_Task+0xf4>
				UDR1 = DataByte;
     76e:	10 93 ce 00 	sts	0x00CE, r17	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	for (;;)
	{
		Serial_SendByte('.');

		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     772:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_HostState>
     776:	81 30       	cpi	r24, 0x01	; 1
		  break;

		/* Check to see if the attached device is ready for new commands */
		ErrorCode = MassStore_TestUnitReady(0);
     778:	51 f0       	breq	.+20     	; 0x78e <MassStorageHost_Task+0x11c>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	57 d4       	rcall	.+2222   	; 0x102c <MassStore_TestUnitReady>

		/* If attached device is ready, abort the loop */
		if (!(ErrorCode))
     77e:	88 23       	and	r24, r24
     780:	31 f0       	breq	.+12     	; 0x78e <MassStorageHost_Task+0x11c>
		  break;

		/* If an error other than a logical command failure (indicating device busy) returned, abort */
		if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     782:	80 3c       	cpi	r24, 0xC0	; 192
     784:	81 f3       	breq	.-32     	; 0x766 <MassStorageHost_Task+0xf4>
		{
			ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     786:	68 2f       	mov	r22, r24
     788:	86 ed       	ldi	r24, 0xD6	; 214
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e c0       	rjmp	.+28     	; 0x7aa <MassStorageHost_Task+0x138>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("\r\nRetrieving Capacity... "));
     78e:	8c eb       	ldi	r24, 0xBC	; 188
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

	/* Create new structure for the disk's capacity in blocks and block size */
	SCSI_Capacity_t DiskCapacity;

	/* Retrieve disk capacity */
	if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     796:	be 01       	movw	r22, r28
     798:	69 5c       	subi	r22, 0xC9	; 201
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	7f d4       	rcall	.+2302   	; 0x109e <MassStore_ReadCapacity>
     7a0:	88 23       	and	r24, r24
	{
		ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     7a2:	41 f0       	breq	.+16     	; 0x7b4 <MassStorageHost_Task+0x142>
     7a4:	68 2f       	mov	r22, r24
     7a6:	8e ea       	ldi	r24, 0xAE	; 174
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	32 df       	rcall	.-412    	; 0x610 <ShowDiskReadError>
		USB_Host_SetDeviceConfiguration(0);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <USB_Host_SetDeviceConfiguration>
		return;
     7b2:	f1 c0       	rjmp	.+482    	; 0x996 <MassStorageHost_Task+0x324>
	}

	/* Display the disk capacity in blocks * block size bytes */
	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     7b4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b6:	8f 93       	push	r24
     7b8:	8d ad       	ldd	r24, Y+61	; 0x3d
     7ba:	8f 93       	push	r24
     7bc:	8c ad       	ldd	r24, Y+60	; 0x3c
     7be:	8f 93       	push	r24
     7c0:	8b ad       	ldd	r24, Y+59	; 0x3b
     7c2:	8f 93       	push	r24
     7c4:	8a ad       	ldd	r24, Y+58	; 0x3a
     7c6:	8f 93       	push	r24
     7c8:	89 ad       	ldd	r24, Y+57	; 0x39
     7ca:	8f 93       	push	r24
     7cc:	88 ad       	ldd	r24, Y+56	; 0x38
     7ce:	8f 93       	push	r24
     7d0:	8f a9       	ldd	r24, Y+55	; 0x37
     7d2:	8f 93       	push	r24
     7d4:	83 e9       	ldi	r24, 0x93	; 147
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>

	/* Create a new buffer capable of holding a single block from the device */
	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     7e0:	0b ad       	ldd	r16, Y+59	; 0x3b
     7e2:	1c ad       	ldd	r17, Y+60	; 0x3c
     7e4:	2d ad       	ldd	r18, Y+61	; 0x3d
     7e6:	3e ad       	ldd	r19, Y+62	; 0x3e
     7e8:	8d b7       	in	r24, 0x3d	; 61
     7ea:	9e b7       	in	r25, 0x3e	; 62
     7ec:	0a 96       	adiw	r24, 0x0a	; 10
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	9e bf       	out	0x3e, r25	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	8d bf       	out	0x3d, r24	; 61
     7f8:	6d b6       	in	r6, 0x3d	; 61
     7fa:	7e b6       	in	r7, 0x3e	; 62
     7fc:	ed b7       	in	r30, 0x3d	; 61
     7fe:	fe b7       	in	r31, 0x3e	; 62
     800:	e0 1b       	sub	r30, r16
     802:	f1 0b       	sbc	r31, r17
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	fe bf       	out	0x3e, r31	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	ed bf       	out	0x3d, r30	; 61
     80e:	8d b7       	in	r24, 0x3d	; 61
     810:	9e b7       	in	r25, 0x3e	; 62
     812:	01 96       	adiw	r24, 0x01	; 1

	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     814:	6c 01       	movw	r12, r24
     816:	7c 01       	movw	r14, r24
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	ba 01       	movw	r22, r20
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	ab d3       	rcall	.+1878   	; 0xf7a <MassStore_ReadDeviceBlock>
     824:	88 23       	and	r24, r24
     826:	21 f0       	breq	.+8      	; 0x830 <MassStorageHost_Task+0x1be>
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     828:	68 2f       	mov	r22, r24
     82a:	81 e8       	ldi	r24, 0x81	; 129
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	a7 c0       	rjmp	.+334    	; 0x97e <MassStorageHost_Task+0x30c>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     830:	84 e6       	ldi	r24, 0x64	; 100
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     838:	a1 2c       	mov	r10, r1
     83a:	b1 2c       	mov	r11, r1
     83c:	a5 01       	movw	r20, r10
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	8b ad       	ldd	r24, Y+59	; 0x3b
     844:	9c ad       	ldd	r25, Y+60	; 0x3c
     846:	ad ad       	ldd	r26, Y+61	; 0x3d
     848:	be ad       	ldd	r27, Y+62	; 0x3e
     84a:	24 e0       	ldi	r18, 0x04	; 4
     84c:	b6 95       	lsr	r27
     84e:	a7 95       	ror	r26
     850:	97 95       	ror	r25
     852:	87 95       	ror	r24
     854:	2a 95       	dec	r18
     856:	d1 f7       	brne	.-12     	; 0x84c <MassStorageHost_Task+0x1da>
     858:	48 17       	cp	r20, r24
     85a:	59 07       	cpc	r21, r25
     85c:	6a 07       	cpc	r22, r26
     85e:	7b 07       	cpc	r23, r27
     860:	08 f0       	brcs	.+2      	; 0x864 <MassStorageHost_Task+0x1f2>
     862:	42 c0       	rjmp	.+132    	; 0x8e8 <MassStorageHost_Task+0x276>
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     864:	85 01       	movw	r16, r10
     866:	44 e0       	ldi	r20, 0x04	; 4
     868:	00 0f       	add	r16, r16
     86a:	11 1f       	adc	r17, r17
     86c:	4a 95       	dec	r20
     86e:	e1 f7       	brne	.-8      	; 0x868 <MassStorageHost_Task+0x1f6>
     870:	0c 0d       	add	r16, r12
     872:	1d 1d       	adc	r17, r13
     874:	48 01       	movw	r8, r16
     876:	90 e1       	ldi	r25, 0x10	; 16
     878:	89 0e       	add	r8, r25
     87a:	91 1c       	adc	r9, r1
     87c:	78 01       	movw	r14, r16

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     87e:	f7 01       	movw	r30, r14
     880:	81 91       	ld	r24, Z+
     882:	7f 01       	movw	r14, r30

			printf_P(PSTR("%.2X "), CurrByte);
     884:	1f 92       	push	r1
     886:	8f 93       	push	r24
     888:	8e e5       	ldi	r24, 0x5E	; 94
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <printf_P>
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	e8 14       	cp	r14, r8
     89e:	f9 04       	cpc	r15, r9
     8a0:	71 f7       	brne	.-36     	; 0x87e <MassStorageHost_Task+0x20c>
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
		}

		puts_P(PSTR("    "));
     8a2:	89 e5       	ldi	r24, 0x59	; 89
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     8aa:	f8 01       	movw	r30, r16
     8ac:	e1 90       	ld	r14, Z+
     8ae:	8f 01       	movw	r16, r30

			putchar(isprint(CurrByte) ? CurrByte : '.');
     8b0:	40 90 45 01 	lds	r4, 0x0145	; 0x800145 <__iob+0x2>
     8b4:	50 90 46 01 	lds	r5, 0x0146	; 0x800146 <__iob+0x3>
     8b8:	f1 2c       	mov	r15, r1
     8ba:	c7 01       	movw	r24, r14
     8bc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <isprint>
     8c0:	89 2b       	or	r24, r25
     8c2:	19 f4       	brne	.+6      	; 0x8ca <MassStorageHost_Task+0x258>
     8c4:	3e e2       	ldi	r19, 0x2E	; 46
     8c6:	e3 2e       	mov	r14, r19
     8c8:	f1 2c       	mov	r15, r1
     8ca:	b2 01       	movw	r22, r4
     8cc:	c7 01       	movw	r24, r14
     8ce:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <fputc>
		}

		puts_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     8d2:	08 15       	cp	r16, r8
     8d4:	19 05       	cpc	r17, r9
     8d6:	49 f7       	brne	.-46     	; 0x8aa <MassStorageHost_Task+0x238>
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		puts_P(PSTR("\r\n"));
     8d8:	86 e5       	ldi	r24, 0x56	; 86
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8e0:	ff ef       	ldi	r31, 0xFF	; 255
     8e2:	af 1a       	sub	r10, r31
     8e4:	bf 0a       	sbc	r11, r31
     8e6:	aa cf       	rjmp	.-172    	; 0x83c <MassStorageHost_Task+0x1ca>
		}

		puts_P(PSTR("\r\n"));
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     8e8:	82 e1       	ldi	r24, 0x12	; 18
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     8f0:	62 9b       	sbis	0x0c, 2	; 12
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <MassStorageHost_Task+0x28c>
	{
		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     8f4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_HostState>
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	d1 f7       	brne	.-12     	; 0x8f0 <MassStorageHost_Task+0x27e>
     8fc:	47 c0       	rjmp	.+142    	; 0x98c <MassStorageHost_Task+0x31a>
     8fe:	81 2c       	mov	r8, r1
     900:	91 2c       	mov	r9, r1
     902:	54 01       	movw	r10, r8
     904:	26 c0       	rjmp	.+76     	; 0x952 <MassStorageHost_Task+0x2e0>
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
		{
			char CurrByte = BlockBuffer[Byte];
     906:	f7 01       	movw	r30, r14
     908:	01 91       	ld	r16, Z+
     90a:	7f 01       	movw	r14, r30

			putchar(isprint(CurrByte) ? CurrByte : '.');
     90c:	40 90 45 01 	lds	r4, 0x0145	; 0x800145 <__iob+0x2>
     910:	50 90 46 01 	lds	r5, 0x0146	; 0x800146 <__iob+0x3>
     914:	10 e0       	ldi	r17, 0x00	; 0
     916:	c8 01       	movw	r24, r16
     918:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <isprint>
     91c:	89 2b       	or	r24, r25
     91e:	11 f4       	brne	.+4      	; 0x924 <MassStorageHost_Task+0x2b2>
     920:	0e e2       	ldi	r16, 0x2E	; 46
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	b2 01       	movw	r22, r4
     926:	c8 01       	movw	r24, r16
     928:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <fputc>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     92c:	c7 01       	movw	r24, r14
     92e:	8c 19       	sub	r24, r12
     930:	9d 09       	sbc	r25, r13
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	4b ad       	ldd	r20, Y+59	; 0x3b
     938:	5c ad       	ldd	r21, Y+60	; 0x3c
     93a:	6d ad       	ldd	r22, Y+61	; 0x3d
     93c:	7e ad       	ldd	r23, Y+62	; 0x3e
     93e:	84 17       	cp	r24, r20
     940:	95 07       	cpc	r25, r21
     942:	a6 07       	cpc	r26, r22
     944:	b7 07       	cpc	r27, r23
     946:	f8 f2       	brcs	.-66     	; 0x906 <MassStorageHost_Task+0x294>
		if (USB_HostState == HOST_STATE_Unattached)
		  return;
	}

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     948:	ff ef       	ldi	r31, 0xFF	; 255
     94a:	8f 1a       	sub	r8, r31
     94c:	9f 0a       	sbc	r9, r31
     94e:	af 0a       	sbc	r10, r31
     950:	bf 0a       	sbc	r11, r31
     952:	8f a9       	ldd	r24, Y+55	; 0x37
     954:	98 ad       	ldd	r25, Y+56	; 0x38
     956:	a9 ad       	ldd	r26, Y+57	; 0x39
     958:	ba ad       	ldd	r27, Y+58	; 0x3a
     95a:	88 16       	cp	r8, r24
     95c:	99 06       	cpc	r9, r25
     95e:	aa 06       	cpc	r10, r26
     960:	bb 06       	cpc	r11, r27
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     962:	78 f4       	brcc	.+30     	; 0x982 <MassStorageHost_Task+0x310>
     964:	0b ad       	ldd	r16, Y+59	; 0x3b
     966:	1c ad       	ldd	r17, Y+60	; 0x3c
     968:	76 01       	movw	r14, r12
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	b5 01       	movw	r22, r10
     96e:	a4 01       	movw	r20, r8
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	03 d3       	rcall	.+1542   	; 0xf7a <MassStore_ReadDeviceBlock>
		{
			ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     974:	88 23       	and	r24, r24
     976:	d1 f2       	breq	.-76     	; 0x92c <MassStorageHost_Task+0x2ba>
     978:	68 2f       	mov	r22, r24
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	48 de       	rcall	.-880    	; 0x610 <ShowDiskReadError>
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     980:	02 c0       	rjmp	.+4      	; 0x986 <MassStorageHost_Task+0x314>
     982:	80 e6       	ldi	r24, 0x60	; 96
     984:	8d dd       	rcall	.-1254   	; 0x4a0 <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <USB_Host_SetDeviceConfiguration>
	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
		USB_Host_SetDeviceConfiguration(0);
		return;
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	7e be       	out	0x3e, r7	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	6d be       	out	0x3d, r6	; 61
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	3e be       	out	0x3e, r3	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	2d be       	out	0x3d, r2	; 61
     9a0:	ee 96       	adiw	r28, 0x3e	; 62
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	8f 90       	pop	r8
     9c4:	7f 90       	pop	r7
     9c6:	6f 90       	pop	r6
     9c8:	5f 90       	pop	r5
     9ca:	4f 90       	pop	r4
     9cc:	3f 90       	pop	r3
     9ce:	2f 90       	pop	r2
     9d0:	08 95       	ret

000009d2 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     9d2:	6b dd       	rcall	.-1322   	; 0x4aa <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     9d4:	85 e3       	ldi	r24, 0x35	; 53
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     9dc:	80 e1       	ldi	r24, 0x10	; 16
     9de:	60 dd       	rcall	.-1344   	; 0x4a0 <LEDs_SetAllLEDs>
	sei();
     9e0:	78 94       	sei

	for (;;)
	{
		MassStorageHost_Task();
     9e2:	47 de       	rcall	.-882    	; 0x672 <MassStorageHost_Task>
     9e4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <USB_USBTask>

		USB_USBTask();
     9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <main+0x10>

000009ea <DComp_NextMSInterface>:
     9ea:	fc 01       	movw	r30, r24
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	59 f4       	brne	.+22     	; 0xa08 <DComp_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     9f2:	85 81       	ldd	r24, Z+5	; 0x05
     9f4:	88 30       	cpi	r24, 0x08	; 8
     9f6:	41 f4       	brne	.+16     	; 0xa08 <DComp_NextMSInterface+0x1e>
     9f8:	86 81       	ldd	r24, Z+6	; 0x06
     9fa:	86 30       	cpi	r24, 0x06	; 6
     9fc:	29 f4       	brne	.+10     	; 0xa08 <DComp_NextMSInterface+0x1e>
		    (Interface->SubClass == MASS_STORE_SUBCLASS) &&
     9fe:	87 81       	ldd	r24, Z+7	; 0x07
     a00:	80 35       	cpi	r24, 0x50	; 80
     a02:	11 f4       	brne	.+4      	; 0xa08 <DComp_NextMSInterface+0x1e>
		    (Interface->Protocol == MASS_STORE_PROTOCOL))
		{
			return DESCRIPTOR_SEARCH_Found;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     a08:	82 e0       	ldi	r24, 0x02	; 2
}
     a0a:	08 95       	ret

00000a0c <DComp_NextMSInterfaceBulkDataEndpoint>:
 *  another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     a0c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     a0e:	91 81       	ldd	r25, Z+1	; 0x01
     a10:	95 30       	cpi	r25, 0x05	; 5
     a12:	31 f4       	brne	.+12     	; 0xa20 <DComp_NextMSInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     a14:	83 81       	ldd	r24, Z+3	; 0x03
     a16:	83 70       	andi	r24, 0x03	; 3
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	31 f4       	brne	.+12     	; 0xa28 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
     a20:	94 30       	cpi	r25, 0x04	; 4
     a22:	11 f4       	brne	.+4      	; 0xa28 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
	{
		return DESCRIPTOR_SEARCH_Fail;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     a28:	82 e0       	ldi	r24, 0x02	; 2
}
     a2a:	08 95       	ret

00000a2c <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	c4 50       	subi	r28, 0x04	; 4
     a46:	d2 40       	sbci	r29, 0x02	; 2
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     a52:	ae 01       	movw	r20, r28
     a54:	4f 5f       	subi	r20, 0xFF	; 255
     a56:	5f 4f       	sbci	r21, 0xFF	; 255
     a58:	cd 5f       	subi	r28, 0xFD	; 253
     a5a:	dd 4f       	sbci	r29, 0xFD	; 253
     a5c:	59 83       	std	Y+1, r21	; 0x01
     a5e:	48 83       	st	Y, r20
     a60:	c3 50       	subi	r28, 0x03	; 3
     a62:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	32 e0       	ldi	r19, 0x02	; 2
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7d 4f       	sbci	r23, 0xFD	; 253
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	d9 d7       	rcall	.+4018   	; 0x1a24 <USB_Host_GetDeviceConfigDescriptor>
     a72:	85 30       	cpi	r24, 0x05	; 5
     a74:	41 f0       	breq	.+16     	; 0xa86 <ProcessConfigurationDescriptor+0x5a>
     a76:	86 30       	cpi	r24, 0x06	; 6
     a78:	09 f4       	brne	.+2      	; 0xa7c <ProcessConfigurationDescriptor+0x50>
     a7a:	50 c0       	rjmp	.+160    	; 0xb1c <ProcessConfigurationDescriptor+0xf0>
     a7c:	88 23       	and	r24, r24
     a7e:	21 f1       	breq	.+72     	; 0xac8 <ProcessConfigurationDescriptor+0x9c>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     a80:	ff 24       	eor	r15, r15
     a82:	f3 94       	inc	r15
     a84:	50 c0       	rjmp	.+160    	; 0xb26 <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     a86:	22 e0       	ldi	r18, 0x02	; 2
     a88:	f2 2e       	mov	r15, r18
     a8a:	4d c0       	rjmp	.+154    	; 0xb26 <ProcessConfigurationDescriptor+0xfa>

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a8c:	46 e0       	ldi	r20, 0x06	; 6
     a8e:	55 e0       	ldi	r21, 0x05	; 5
     a90:	be 01       	movw	r22, r28
     a92:	6d 5f       	subi	r22, 0xFD	; 253
     a94:	7d 4f       	sbci	r23, 0xFD	; 253
     a96:	ce 01       	movw	r24, r28
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	9d 4f       	sbci	r25, 0xFD	; 253
     a9c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <USB_GetNextDescriptorComp>
     aa0:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     aa2:	81 11       	cpse	r24, r1
     aa4:	11 c0       	rjmp	.+34     	; 0xac8 <ProcessConfigurationDescriptor+0x9c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     aa6:	cd 5f       	subi	r28, 0xFD	; 253
     aa8:	dd 4f       	sbci	r29, 0xFD	; 253
     aaa:	e8 81       	ld	r30, Y
     aac:	f9 81       	ldd	r31, Y+1	; 0x01
     aae:	c3 50       	subi	r28, 0x03	; 3
     ab0:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     ab2:	82 81       	ldd	r24, Z+2	; 0x02
     ab4:	87 fd       	sbrc	r24, 7
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <ProcessConfigurationDescriptor+0x90>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
     ab8:	6f 01       	movw	r12, r30

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     aba:	f8 01       	movw	r30, r16
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     abc:	30 97       	sbiw	r30, 0x00	; 0
     abe:	d1 f4       	brne	.+52     	; 0xaf4 <ProcessConfigurationDescriptor+0xc8>
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     ac0:	8f 01       	movw	r16, r30
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     ac2:	a1 14       	cp	r10, r1
     ac4:	b1 04       	cpc	r11, r1
     ac6:	11 f7       	brne	.-60     	; 0xa8c <ProcessConfigurationDescriptor+0x60>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     ac8:	45 ef       	ldi	r20, 0xF5	; 245
     aca:	54 e0       	ldi	r21, 0x04	; 4
     acc:	be 01       	movw	r22, r28
     ace:	6d 5f       	subi	r22, 0xFD	; 253
     ad0:	7d 4f       	sbci	r23, 0xFD	; 253
     ad2:	ce 01       	movw	r24, r28
     ad4:	8f 5f       	subi	r24, 0xFF	; 255
     ad6:	9d 4f       	sbci	r25, 0xFD	; 253
     ad8:	fe d7       	rcall	.+4092   	; 0x1ad6 <USB_GetNextDescriptorComp>
     ada:	81 11       	cpse	r24, r1
     adc:	22 c0       	rjmp	.+68     	; 0xb22 <ProcessConfigurationDescriptor+0xf6>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     ade:	cd 5f       	subi	r28, 0xFD	; 253
     ae0:	dd 4f       	sbci	r29, 0xFD	; 253
     ae2:	a8 80       	ld	r10, Y
     ae4:	b9 80       	ldd	r11, Y+1	; 0x01
     ae6:	c3 50       	subi	r28, 0x03	; 3
     ae8:	d2 40       	sbci	r29, 0x02	; 2

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     aea:	00 e0       	ldi	r16, 0x00	; 0
     aec:	10 e0       	ldi	r17, 0x00	; 0
			DataOUTEndpoint = NULL;
     aee:	c1 2c       	mov	r12, r1
     af0:	d1 2c       	mov	r13, r1
     af2:	e7 cf       	rjmp	.-50     	; 0xac2 <ProcessConfigurationDescriptor+0x96>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     af4:	c1 14       	cp	r12, r1
     af6:	d1 04       	cpc	r13, r1
     af8:	19 f3       	breq	.-58     	; 0xac0 <ProcessConfigurationDescriptor+0x94>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     afa:	04 81       	ldd	r16, Z+4	; 0x04
     afc:	15 81       	ldd	r17, Z+5	; 0x05
     afe:	e1 2c       	mov	r14, r1
     b00:	22 81       	ldd	r18, Z+2	; 0x02
     b02:	40 e1       	ldi	r20, 0x10	; 16
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	1b d5       	rcall	.+2614   	; 0x1540 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     b0a:	f6 01       	movw	r30, r12
     b0c:	04 81       	ldd	r16, Z+4	; 0x04
     b0e:	15 81       	ldd	r17, Z+5	; 0x05
     b10:	22 81       	ldd	r18, Z+2	; 0x02
     b12:	40 e2       	ldi	r20, 0x20	; 32
     b14:	62 e0       	ldi	r22, 0x02	; 2
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	13 d5       	rcall	.+2598   	; 0x1540 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <ProcessConfigurationDescriptor+0xfa>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	f9 2e       	mov	r15, r25
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <ProcessConfigurationDescriptor+0xfa>
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	f8 2e       	mov	r15, r24
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     b26:	8f 2d       	mov	r24, r15
     b28:	cc 5f       	subi	r28, 0xFC	; 252
     b2a:	dd 4f       	sbci	r29, 0xFD	; 253
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	08 95       	ret

00000b4c <MassStore_WaitForDataReceived>:
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     b4c:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b50:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b5a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b5e:	8f 7b       	andi	r24, 0xBF	; 191
     b60:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	97 e2       	ldi	r25, 0x27	; 39
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	71 e0       	ldi	r23, 0x01	; 1
     b6c:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b70:	40 fd       	sbrc	r20, 0
     b72:	40 c0       	rjmp	.+128    	; 0xbf4 <MassStore_WaitForDataReceived+0xa8>
     b74:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b78:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     b7c:	24 17       	cp	r18, r20
     b7e:	35 07       	cpc	r19, r21
     b80:	19 f0       	breq	.+6      	; 0xb88 <MassStore_WaitForDataReceived+0x3c>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	09 f4       	brne	.+2      	; 0xb88 <MassStore_WaitForDataReceived+0x3c>
     b86:	48 c0       	rjmp	.+144    	; 0xc18 <MassStore_WaitForDataReceived+0xcc>
     b88:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b8c:	20 64       	ori	r18, 0x40	; 64
     b8e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b92:	60 93 a7 00 	sts	0x00A7, r22	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b96:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b9a:	2f 7b       	andi	r18, 0xBF	; 191
     b9c:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ba0:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ba4:	21 fd       	sbrc	r18, 1
     ba6:	10 c0       	rjmp	.+32     	; 0xbc8 <MassStore_WaitForDataReceived+0x7c>
     ba8:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bac:	20 64       	ori	r18, 0x40	; 64
     bae:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bb2:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     bb6:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bba:	2f 7b       	andi	r18, 0xBF	; 191
     bbc:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bc0:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     bc4:	21 ff       	sbrs	r18, 1
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <MassStore_WaitForDataReceived+0x9c>
     bc8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     bcc:	8f 70       	andi	r24, 0x0F	; 15
     bce:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     bd2:	90 73       	andi	r25, 0x30	; 48
     bd4:	90 31       	cpi	r25, 0x10	; 16
     bd6:	11 f0       	breq	.+4      	; 0xbdc <MassStore_WaitForDataReceived+0x90>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	01 c0       	rjmp	.+2      	; 0xbde <MassStore_WaitForDataReceived+0x92>
     bdc:	90 e8       	ldi	r25, 0x80	; 128
     bde:	89 2b       	or	r24, r25
     be0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <USB_Host_ClearEndpointStall>
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	08 95       	ret
     be8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <USB_HostState>
     bec:	21 30       	cpi	r18, 0x01	; 1
     bee:	b1 f0       	breq	.+44     	; 0xc1c <MassStore_WaitForDataReceived+0xd0>
     bf0:	9a 01       	movw	r18, r20
     bf2:	bc cf       	rjmp	.-136    	; 0xb6c <MassStore_WaitForDataReceived+0x20>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     bfa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     c0a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	08 95       	ret
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	08 95       	ret
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	08 95       	ret

00000c20 <MassStore_GetReturnedStatus>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ec 01       	movw	r28, r24
     c26:	92 df       	rcall	.-220    	; 0xb4c <MassStore_WaitForDataReceived>
     c28:	81 11       	cpse	r24, r1
     c2a:	1d c0       	rjmp	.+58     	; 0xc66 <MassStore_GetReturnedStatus+0x46>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     c32:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c36:	8f 7b       	andi	r24, 0xBF	; 191
     c38:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	6d e0       	ldi	r22, 0x0D	; 13
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	ce 01       	movw	r24, r28
     c46:	81 d6       	rcall	.+3330   	; 0x194a <Pipe_Read_Stream_LE>
     c48:	81 11       	cpse	r24, r1
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <MassStore_GetReturnedStatus+0x46>
     c4c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     c50:	8e 77       	andi	r24, 0x7E	; 126
     c52:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     c56:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c5a:	80 64       	ori	r24, 0x40	; 64
     c5c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     c60:	8c 85       	ldd	r24, Y+12	; 0x0c
     c62:	81 11       	cpse	r24, r1
     c64:	80 ec       	ldi	r24, 0xC0	; 192
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <SwapEndian_32>:
     c6c:	9b 01       	movw	r18, r22
     c6e:	69 2f       	mov	r22, r25
     c70:	78 2f       	mov	r23, r24
     c72:	83 2f       	mov	r24, r19
     c74:	92 2f       	mov	r25, r18
     c76:	08 95       	ret

00000c78 <MassStore_SendCommand.constprop.1>:
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ec 01       	movw	r28, r24
     c8a:	8b 01       	movw	r16, r22
     c8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c90:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c94:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c98:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	a1 1d       	adc	r26, r1
     ca0:	b1 1d       	adc	r27, r1
     ca2:	8f 3f       	cpi	r24, 0xFF	; 255
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	92 07       	cpc	r25, r18
     ca8:	a2 07       	cpc	r26, r18
     caa:	b2 07       	cpc	r27, r18
     cac:	21 f4       	brne	.+8      	; 0xcb6 <MassStore_SendCommand.constprop.1+0x3e>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     cba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cbe:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     cc2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cc6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cce:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     cd2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cd6:	8c 83       	std	Y+4, r24	; 0x04
     cd8:	9d 83       	std	Y+5, r25	; 0x05
     cda:	ae 83       	std	Y+6, r26	; 0x06
     cdc:	bf 83       	std	Y+7, r27	; 0x07
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	e8 2e       	mov	r14, r24
     ce2:	e0 92 a7 00 	sts	0x00A7, r14	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     ce6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cea:	8f 7b       	andi	r24, 0xBF	; 191
     cec:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	6f e1       	ldi	r22, 0x1F	; 31
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	ce 01       	movw	r24, r28
     cfa:	d8 d5       	rcall	.+2992   	; 0x18ac <Pipe_Write_Stream_LE>
     cfc:	f8 2e       	mov	r15, r24
     cfe:	81 11       	cpse	r24, r1
     d00:	55 c0       	rjmp	.+170    	; 0xdac <MassStore_SendCommand.constprop.1+0x134>
     d02:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d06:	8b 77       	andi	r24, 0x7B	; 123
     d08:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d0c:	89 d4       	rcall	.+2322   	; 0x1620 <Pipe_WaitUntilReady>
     d0e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d18:	01 15       	cp	r16, r1
     d1a:	11 05       	cpc	r17, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <MassStore_SendCommand.constprop.1+0xa8>
     d1e:	46 c0       	rjmp	.+140    	; 0xdac <MassStore_SendCommand.constprop.1+0x134>
     d20:	c8 84       	ldd	r12, Y+8	; 0x08
     d22:	d9 84       	ldd	r13, Y+9	; 0x09
     d24:	8c 85       	ldd	r24, Y+12	; 0x0c
     d26:	87 ff       	sbrs	r24, 7
     d28:	18 c0       	rjmp	.+48     	; 0xd5a <MassStore_SendCommand.constprop.1+0xe2>
     d2a:	10 df       	rcall	.-480    	; 0xb4c <MassStore_WaitForDataReceived>
     d2c:	81 11       	cpse	r24, r1
     d2e:	38 c0       	rjmp	.+112    	; 0xda0 <MassStore_SendCommand.constprop.1+0x128>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d36:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d3a:	8f 7b       	andi	r24, 0xBF	; 191
     d3c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	b6 01       	movw	r22, r12
     d46:	c8 01       	movw	r24, r16
     d48:	00 d6       	rcall	.+3072   	; 0x194a <Pipe_Read_Stream_LE>
     d4a:	81 11       	cpse	r24, r1
     d4c:	29 c0       	rjmp	.+82     	; 0xda0 <MassStore_SendCommand.constprop.1+0x128>
     d4e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d52:	8e 77       	andi	r24, 0x7E	; 126
     d54:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d58:	1d c0       	rjmp	.+58     	; 0xd94 <MassStore_SendCommand.constprop.1+0x11c>
     d5a:	e0 92 a7 00 	sts	0x00A7, r14	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d5e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d62:	8f 7b       	andi	r24, 0xBF	; 191
     d64:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	b6 01       	movw	r22, r12
     d6e:	c8 01       	movw	r24, r16
     d70:	9d d5       	rcall	.+2874   	; 0x18ac <Pipe_Write_Stream_LE>
     d72:	81 11       	cpse	r24, r1
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <MassStore_SendCommand.constprop.1+0x128>
     d76:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d7a:	8b 77       	andi	r24, 0x7B	; 123
     d7c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d80:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d84:	82 fd       	sbrc	r24, 2
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <MassStore_SendCommand.constprop.1+0x11c>
     d88:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_HostState>
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	c1 f7       	brne	.-16     	; 0xd80 <MassStore_SendCommand.constprop.1+0x108>
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <MassStore_SendCommand.constprop.1+0x128>
     d94:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d98:	80 64       	ori	r24, 0x40	; 64
     d9a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <MassStore_SendCommand.constprop.1+0x134>
     da0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     da4:	90 64       	ori	r25, 0x40	; 64
     da6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     daa:	f8 2e       	mov	r15, r24
     dac:	8f 2d       	mov	r24, r15
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	08 95       	ret

00000dc0 <MassStore_MassStorageReset>:
     dc0:	88 e0       	ldi	r24, 0x08	; 8
     dc2:	e5 e0       	ldi	r30, 0x05	; 5
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	ac e2       	ldi	r26, 0x2C	; 44
     dc8:	b1 e0       	ldi	r27, 0x01	; 1
     dca:	01 90       	ld	r0, Z+
     dcc:	0d 92       	st	X+, r0
     dce:	8a 95       	dec	r24
     dd0:	e1 f7       	brne	.-8      	; 0xdca <MassStore_MassStorageReset+0xa>
     dd2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	d6 d6       	rcall	.+3500   	; 0x1b88 <USB_Host_SendControlRequest>
     ddc:	81 11       	cpse	r24, r1
     dde:	22 c0       	rjmp	.+68     	; 0xe24 <MassStore_MassStorageReset+0x64>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     de6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     dea:	8f 70       	andi	r24, 0x0F	; 15
     dec:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     df0:	90 73       	andi	r25, 0x30	; 48
     df2:	90 31       	cpi	r25, 0x10	; 16
     df4:	11 f0       	breq	.+4      	; 0xdfa <MassStore_MassStorageReset+0x3a>
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <MassStore_MassStorageReset+0x3c>
     dfa:	90 e8       	ldi	r25, 0x80	; 128
     dfc:	89 2b       	or	r24, r25
     dfe:	e1 d7       	rcall	.+4034   	; 0x1dc2 <USB_Host_ClearEndpointStall>
     e00:	81 11       	cpse	r24, r1
     e02:	10 c0       	rjmp	.+32     	; 0xe24 <MassStore_MassStorageReset+0x64>
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e0a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e0e:	8f 70       	andi	r24, 0x0F	; 15
     e10:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e14:	90 73       	andi	r25, 0x30	; 48
     e16:	90 31       	cpi	r25, 0x10	; 16
     e18:	11 f0       	breq	.+4      	; 0xe1e <MassStore_MassStorageReset+0x5e>
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <MassStore_MassStorageReset+0x60>
     e1e:	90 e8       	ldi	r25, 0x80	; 128
     e20:	89 2b       	or	r24, r25
     e22:	cf c7       	rjmp	.+3998   	; 0x1dc2 <USB_Host_ClearEndpointStall>
     e24:	08 95       	ret

00000e26 <MassStore_GetMaxLUN>:
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	ed e0       	ldi	r30, 0x0D	; 13
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	ac e2       	ldi	r26, 0x2C	; 44
     e34:	b1 e0       	ldi	r27, 0x01	; 1
     e36:	01 90       	ld	r0, Z+
     e38:	0d 92       	st	X+, r0
     e3a:	8a 95       	dec	r24
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <MassStore_GetMaxLUN+0x10>
     e3e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e42:	ce 01       	movw	r24, r28
     e44:	a1 d6       	rcall	.+3394   	; 0x1b88 <USB_Host_SendControlRequest>
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	39 f4       	brne	.+14     	; 0xe58 <MassStore_GetMaxLUN+0x32>
     e4a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e54:	18 82       	st	Y, r1
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <MassStore_Inquiry>:
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	ac 97       	sbiw	r28, 0x2c	; 44
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	fe 01       	movw	r30, r28
     e78:	31 96       	adiw	r30, 0x01	; 1
     e7a:	9f e1       	ldi	r25, 0x1F	; 31
     e7c:	df 01       	movw	r26, r30
     e7e:	1d 92       	st	X+, r1
     e80:	9a 95       	dec	r25
     e82:	e9 f7       	brne	.-6      	; 0xe7e <MassStore_Inquiry+0x20>
     e84:	05 e5       	ldi	r16, 0x55	; 85
     e86:	13 e5       	ldi	r17, 0x53	; 83
     e88:	22 e4       	ldi	r18, 0x42	; 66
     e8a:	33 e4       	ldi	r19, 0x43	; 67
     e8c:	09 83       	std	Y+1, r16	; 0x01
     e8e:	1a 83       	std	Y+2, r17	; 0x02
     e90:	2b 83       	std	Y+3, r18	; 0x03
     e92:	3c 83       	std	Y+4, r19	; 0x04
     e94:	04 e2       	ldi	r16, 0x24	; 36
     e96:	10 e0       	ldi	r17, 0x00	; 0
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	09 87       	std	Y+9, r16	; 0x09
     e9e:	1a 87       	std	Y+10, r17	; 0x0a
     ea0:	2b 87       	std	Y+11, r18	; 0x0b
     ea2:	3c 87       	std	Y+12, r19	; 0x0c
     ea4:	90 e8       	ldi	r25, 0x80	; 128
     ea6:	9d 87       	std	Y+13, r25	; 0x0d
     ea8:	8e 87       	std	Y+14, r24	; 0x0e
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	8f 87       	std	Y+15, r24	; 0x0f
     eae:	82 e1       	ldi	r24, 0x12	; 18
     eb0:	88 8b       	std	Y+16, r24	; 0x10
     eb2:	84 e2       	ldi	r24, 0x24	; 36
     eb4:	8c 8b       	std	Y+20, r24	; 0x14
     eb6:	cf 01       	movw	r24, r30
     eb8:	df de       	rcall	.-578    	; 0xc78 <MassStore_SendCommand.constprop.1>
     eba:	81 11       	cpse	r24, r1
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <MassStore_Inquiry+0x6a>
     ebe:	ce 01       	movw	r24, r28
     ec0:	80 96       	adiw	r24, 0x20	; 32
     ec2:	ae de       	rcall	.-676    	; 0xc20 <MassStore_GetReturnedStatus>
     ec4:	88 23       	and	r24, r24
     ec6:	31 f0       	breq	.+12     	; 0xed4 <MassStore_Inquiry+0x76>
     ec8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ecc:	90 64       	ori	r25, 0x40	; 64
     ece:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <MassStore_Inquiry+0x78>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	ac 96       	adiw	r28, 0x2c	; 44
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <MassStore_RequestSense>:
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	ac 97       	sbiw	r28, 0x2c	; 44
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	fe 01       	movw	r30, r28
     f06:	31 96       	adiw	r30, 0x01	; 1
     f08:	9f e1       	ldi	r25, 0x1F	; 31
     f0a:	df 01       	movw	r26, r30
     f0c:	1d 92       	st	X+, r1
     f0e:	9a 95       	dec	r25
     f10:	e9 f7       	brne	.-6      	; 0xf0c <MassStore_RequestSense+0x20>
     f12:	05 e5       	ldi	r16, 0x55	; 85
     f14:	13 e5       	ldi	r17, 0x53	; 83
     f16:	22 e4       	ldi	r18, 0x42	; 66
     f18:	33 e4       	ldi	r19, 0x43	; 67
     f1a:	09 83       	std	Y+1, r16	; 0x01
     f1c:	1a 83       	std	Y+2, r17	; 0x02
     f1e:	2b 83       	std	Y+3, r18	; 0x03
     f20:	3c 83       	std	Y+4, r19	; 0x04
     f22:	02 e1       	ldi	r16, 0x12	; 18
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	09 87       	std	Y+9, r16	; 0x09
     f2c:	1a 87       	std	Y+10, r17	; 0x0a
     f2e:	2b 87       	std	Y+11, r18	; 0x0b
     f30:	3c 87       	std	Y+12, r19	; 0x0c
     f32:	90 e8       	ldi	r25, 0x80	; 128
     f34:	9d 87       	std	Y+13, r25	; 0x0d
     f36:	8e 87       	std	Y+14, r24	; 0x0e
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	8f 87       	std	Y+15, r24	; 0x0f
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	88 8b       	std	Y+16, r24	; 0x10
     f40:	82 e1       	ldi	r24, 0x12	; 18
     f42:	8c 8b       	std	Y+20, r24	; 0x14
     f44:	cf 01       	movw	r24, r30
     f46:	98 de       	rcall	.-720    	; 0xc78 <MassStore_SendCommand.constprop.1>
     f48:	81 11       	cpse	r24, r1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <MassStore_RequestSense+0x6a>
     f4c:	ce 01       	movw	r24, r28
     f4e:	80 96       	adiw	r24, 0x20	; 32
     f50:	67 de       	rcall	.-818    	; 0xc20 <MassStore_GetReturnedStatus>
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <MassStore_RequestSense+0x76>
     f56:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f5a:	90 64       	ori	r25, 0x40	; 64
     f5c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <MassStore_RequestSense+0x78>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	ac 96       	adiw	r28, 0x2c	; 44
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	08 95       	ret

00000f7a <MassStore_ReadDeviceBlock>:
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	ac 97       	sbiw	r28, 0x2c	; 44
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	a8 2e       	mov	r10, r24
     fa0:	c6 2e       	mov	r12, r22
     fa2:	b7 2e       	mov	r11, r23
     fa4:	fe 01       	movw	r30, r28
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	8f e1       	ldi	r24, 0x1F	; 31
     faa:	df 01       	movw	r26, r30
     fac:	1d 92       	st	X+, r1
     fae:	8a 95       	dec	r24
     fb0:	e9 f7       	brne	.-6      	; 0xfac <MassStore_ReadDeviceBlock+0x32>
     fb2:	85 e5       	ldi	r24, 0x55	; 85
     fb4:	93 e5       	ldi	r25, 0x53	; 83
     fb6:	a2 e4       	ldi	r26, 0x42	; 66
     fb8:	b3 e4       	ldi	r27, 0x43	; 67
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	ab 83       	std	Y+3, r26	; 0x03
     fc0:	bc 83       	std	Y+4, r27	; 0x04
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	d8 01       	movw	r26, r16
     fc6:	41 d7       	rcall	.+3714   	; 0x1e4a <__umulhisi3>
     fc8:	69 87       	std	Y+9, r22	; 0x09
     fca:	7a 87       	std	Y+10, r23	; 0x0a
     fcc:	8b 87       	std	Y+11, r24	; 0x0b
     fce:	9c 87       	std	Y+12, r25	; 0x0c
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	8d 87       	std	Y+13, r24	; 0x0d
     fd4:	ae 86       	std	Y+14, r10	; 0x0e
     fd6:	8a e0       	ldi	r24, 0x0A	; 10
     fd8:	8f 87       	std	Y+15, r24	; 0x0f
     fda:	88 e2       	ldi	r24, 0x28	; 40
     fdc:	88 8b       	std	Y+16, r24	; 0x10
     fde:	ba 8a       	std	Y+18, r11	; 0x12
     fe0:	cb 8a       	std	Y+19, r12	; 0x13
     fe2:	5c 8b       	std	Y+20, r21	; 0x14
     fe4:	4d 8b       	std	Y+21, r20	; 0x15
     fe6:	28 8f       	std	Y+24, r18	; 0x18
     fe8:	b7 01       	movw	r22, r14
     fea:	cf 01       	movw	r24, r30
     fec:	45 de       	rcall	.-886    	; 0xc78 <MassStore_SendCommand.constprop.1>
     fee:	81 11       	cpse	r24, r1
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <MassStore_ReadDeviceBlock+0x82>
     ff2:	ce 01       	movw	r24, r28
     ff4:	80 96       	adiw	r24, 0x20	; 32
     ff6:	14 de       	rcall	.-984    	; 0xc20 <MassStore_GetReturnedStatus>
     ff8:	88 23       	and	r24, r24
     ffa:	31 f0       	breq	.+12     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     ffc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1000:	90 64       	ori	r25, 0x40	; 64
    1002:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1006:	01 c0       	rjmp	.+2      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	ac 96       	adiw	r28, 0x2c	; 44
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	08 95       	ret

0000102c <MassStore_TestUnitReady>:
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	ac 97       	sbiw	r28, 0x2c	; 44
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Create a CBW with a SCSI command to issue TEST UNIT READY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1040:	fe 01       	movw	r30, r28
    1042:	31 96       	adiw	r30, 0x01	; 1
    1044:	9f e1       	ldi	r25, 0x1F	; 31
    1046:	df 01       	movw	r26, r30
    1048:	1d 92       	st	X+, r1
    104a:	9a 95       	dec	r25
    104c:	e9 f7       	brne	.-6      	; 0x1048 <MassStore_TestUnitReady+0x1c>
    104e:	45 e5       	ldi	r20, 0x55	; 85
    1050:	53 e5       	ldi	r21, 0x53	; 83
    1052:	62 e4       	ldi	r22, 0x42	; 66
    1054:	73 e4       	ldi	r23, 0x43	; 67
    1056:	49 83       	std	Y+1, r20	; 0x01
    1058:	5a 83       	std	Y+2, r21	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
    105c:	7c 83       	std	Y+4, r23	; 0x04
    105e:	90 e8       	ldi	r25, 0x80	; 128
    1060:	9d 87       	std	Y+13, r25	; 0x0d
    1062:	8e 87       	std	Y+14, r24	; 0x0e
    1064:	86 e0       	ldi	r24, 0x06	; 6
    1066:	8f 87       	std	Y+15, r24	; 0x0f
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	cf 01       	movw	r24, r30
    106e:	04 de       	rcall	.-1016   	; 0xc78 <MassStore_SendCommand.constprop.1>
    1070:	81 11       	cpse	r24, r1
    1072:	05 c0       	rjmp	.+10     	; 0x107e <MassStore_TestUnitReady+0x52>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1074:	ce 01       	movw	r24, r28
    1076:	80 96       	adiw	r24, 0x20	; 32
    1078:	d3 dd       	rcall	.-1114   	; 0xc20 <MassStore_GetReturnedStatus>
    107a:	88 23       	and	r24, r24
    107c:	31 f0       	breq	.+12     	; 0x108a <MassStore_TestUnitReady+0x5e>
    107e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1082:	90 64       	ori	r25, 0x40	; 64
    1084:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	{
		Pipe_Freeze();
		return ErrorCode;
    1088:	01 c0       	rjmp	.+2      	; 0x108c <MassStore_TestUnitReady+0x60>
    108a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ErrorCode;
}
    108c:	ac 96       	adiw	r28, 0x2c	; 44
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <MassStore_ReadCapacity>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	ac 97       	sbiw	r28, 0x2c	; 44
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Create a CBW with a SCSI command to issue READ CAPACITY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    10b8:	fe 01       	movw	r30, r28
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	9f e1       	ldi	r25, 0x1F	; 31
    10be:	df 01       	movw	r26, r30
    10c0:	1d 92       	st	X+, r1
    10c2:	9a 95       	dec	r25
    10c4:	e9 f7       	brne	.-6      	; 0x10c0 <MassStore_ReadCapacity+0x22>
    10c6:	45 e5       	ldi	r20, 0x55	; 85
    10c8:	53 e5       	ldi	r21, 0x53	; 83
    10ca:	62 e4       	ldi	r22, 0x42	; 66
    10cc:	73 e4       	ldi	r23, 0x43	; 67
    10ce:	49 83       	std	Y+1, r20	; 0x01
    10d0:	5a 83       	std	Y+2, r21	; 0x02
    10d2:	6b 83       	std	Y+3, r22	; 0x03
    10d4:	7c 83       	std	Y+4, r23	; 0x04
    10d6:	48 e0       	ldi	r20, 0x08	; 8
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	49 87       	std	Y+9, r20	; 0x09
    10e0:	5a 87       	std	Y+10, r21	; 0x0a
    10e2:	6b 87       	std	Y+11, r22	; 0x0b
    10e4:	7c 87       	std	Y+12, r23	; 0x0c
    10e6:	90 e8       	ldi	r25, 0x80	; 128
    10e8:	9d 87       	std	Y+13, r25	; 0x0d
    10ea:	8e 87       	std	Y+14, r24	; 0x0e
    10ec:	8a e0       	ldi	r24, 0x0A	; 10
    10ee:	8f 87       	std	Y+15, r24	; 0x0f
    10f0:	85 e2       	ldi	r24, 0x25	; 37
    10f2:	88 8b       	std	Y+16, r24	; 0x10
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
    10f4:	b8 01       	movw	r22, r16
    10f6:	cf 01       	movw	r24, r30
    10f8:	bf dd       	rcall	.-1154   	; 0xc78 <MassStore_SendCommand.constprop.1>
    10fa:	81 11       	cpse	r24, r1
    10fc:	1d c0       	rjmp	.+58     	; 0x1138 <MassStore_ReadCapacity+0x9a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
    10fe:	f8 01       	movw	r30, r16
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	b1 dd       	rcall	.-1182   	; 0xc6c <SwapEndian_32>
    110a:	d8 01       	movw	r26, r16
    110c:	6d 93       	st	X+, r22
    110e:	7d 93       	st	X+, r23
    1110:	8d 93       	st	X+, r24
    1112:	9c 93       	st	X, r25
    1114:	13 97       	sbiw	r26, 0x03	; 3
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
    1116:	14 96       	adiw	r26, 0x04	; 4
    1118:	6d 91       	ld	r22, X+
    111a:	7d 91       	ld	r23, X+
    111c:	8d 91       	ld	r24, X+
    111e:	9c 91       	ld	r25, X
    1120:	17 97       	sbiw	r26, 0x07	; 7
    1122:	a4 dd       	rcall	.-1208   	; 0xc6c <SwapEndian_32>
    1124:	f8 01       	movw	r30, r16
    1126:	64 83       	std	Z+4, r22	; 0x04
    1128:	75 83       	std	Z+5, r23	; 0x05
    112a:	86 83       	std	Z+6, r24	; 0x06
    112c:	97 83       	std	Z+7, r25	; 0x07

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    112e:	ce 01       	movw	r24, r28
    1130:	80 96       	adiw	r24, 0x20	; 32
    1132:	76 dd       	rcall	.-1300   	; 0xc20 <MassStore_GetReturnedStatus>
    1134:	88 23       	and	r24, r24
    1136:	31 f0       	breq	.+12     	; 0x1144 <MassStore_ReadCapacity+0xa6>
    1138:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    113c:	90 64       	ori	r25, 0x40	; 64
    113e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <MassStore_ReadCapacity+0xa8>
	{
		Pipe_Freeze();
		return ErrorCode;
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	ac 96       	adiw	r28, 0x2c	; 44
	}

	return ErrorCode;
}
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <MassStore_PreventAllowMediumRemoval>:
    115c:	0f 93       	push	r16
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	ac 97       	sbiw	r28, 0x2c	; 44
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Create a CBW with a SCSI command to issue PREVENT ALLOW MEDIUM REMOVAL command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1174:	fe 01       	movw	r30, r28
    1176:	31 96       	adiw	r30, 0x01	; 1
    1178:	9f e1       	ldi	r25, 0x1F	; 31
    117a:	df 01       	movw	r26, r30
    117c:	1d 92       	st	X+, r1
    117e:	9a 95       	dec	r25
    1180:	e9 f7       	brne	.-6      	; 0x117c <MassStore_PreventAllowMediumRemoval+0x20>
    1182:	05 e5       	ldi	r16, 0x55	; 85
    1184:	13 e5       	ldi	r17, 0x53	; 83
    1186:	22 e4       	ldi	r18, 0x42	; 66
    1188:	33 e4       	ldi	r19, 0x43	; 67
    118a:	09 83       	std	Y+1, r16	; 0x01
    118c:	1a 83       	std	Y+2, r17	; 0x02
    118e:	2b 83       	std	Y+3, r18	; 0x03
    1190:	3c 83       	std	Y+4, r19	; 0x04
    1192:	8e 87       	std	Y+14, r24	; 0x0e
    1194:	86 e0       	ldi	r24, 0x06	; 6
    1196:	8f 87       	std	Y+15, r24	; 0x0f
    1198:	8e e1       	ldi	r24, 0x1E	; 30
    119a:	88 8b       	std	Y+16, r24	; 0x10
    119c:	6b 8b       	std	Y+19, r22	; 0x13
		};

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	cf 01       	movw	r24, r30
    11a4:	69 dd       	rcall	.-1326   	; 0xc78 <MassStore_SendCommand.constprop.1>
    11a6:	81 11       	cpse	r24, r1
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <MassStore_PreventAllowMediumRemoval+0x58>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    11aa:	ce 01       	movw	r24, r28
    11ac:	80 96       	adiw	r24, 0x20	; 32
    11ae:	38 dd       	rcall	.-1424   	; 0xc20 <MassStore_GetReturnedStatus>
    11b0:	88 23       	and	r24, r24
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <MassStore_PreventAllowMediumRemoval+0x64>
    11b4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11b8:	90 64       	ori	r25, 0x40	; 64
    11ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	{
		Pipe_Freeze();
		return ErrorCode;
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <MassStore_PreventAllowMediumRemoval+0x66>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ErrorCode;
}
    11c2:	ac 96       	adiw	r28, 0x2c	; 44
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	08 95       	ret

000011d8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11d8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    11dc:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    11de:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    11e2:	9d 7f       	andi	r25, 0xFD	; 253
    11e4:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    11e8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    11ec:	92 60       	ori	r25, 0x02	; 2
    11ee:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    11f2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    11f6:	91 fd       	sbrc	r25, 1
    11f8:	fc cf       	rjmp	.-8      	; 0x11f2 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11fa:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    11fe:	91 60       	ori	r25, 0x01	; 1
    1200:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
    1204:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1208:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    120c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    120e:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1212:	2f 7d       	andi	r18, 0xDF	; 223
    1214:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1218:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    121c:	2f 7d       	andi	r18, 0xDF	; 223
    121e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1222:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1224:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1228:	35 ff       	sbrs	r19, 5
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    122c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1230:	2f 7d       	andi	r18, 0xDF	; 223
    1232:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1236:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    123a:	2d 7f       	andi	r18, 0xFD	; 253
    123c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1240:	08 c0       	rjmp	.+16     	; 0x1252 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1242:	ef ec       	ldi	r30, 0xCF	; 207
    1244:	f7 e0       	ldi	r31, 0x07	; 7
    1246:	31 97       	sbiw	r30, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <USB_Host_ResetDevice+0x6e>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <USB_Host_ResetDevice+0x74>
    124c:	00 00       	nop
    124e:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1250:	49 f7       	brne	.-46     	; 0x1224 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1252:	99 23       	and	r25, r25
    1254:	29 f0       	breq	.+10     	; 0x1260 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1256:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    125a:	90 62       	ori	r25, 0x20	; 32
    125c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1260:	81 11       	cpse	r24, r1
    1262:	05 c0       	rjmp	.+10     	; 0x126e <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1264:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1268:	8e 7f       	andi	r24, 0xFE	; 254
    126a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    126e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1272:	82 60       	ori	r24, 0x02	; 2
    1274:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1278:	08 95       	ret

0000127a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    127a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    127e:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1280:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1284:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1286:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    128a:	3f 7d       	andi	r19, 0xDF	; 223
    128c:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1290:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1294:	3f 7d       	andi	r19, 0xDF	; 223
    1296:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    129a:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    129e:	31 60       	ori	r19, 0x01	; 1
    12a0:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    12a4:	88 23       	and	r24, r24
    12a6:	39 f1       	breq	.+78     	; 0x12f6 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12a8:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12ac:	35 ff       	sbrs	r19, 5
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12b0:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    12b4:	3f 7d       	andi	r19, 0xDF	; 223
    12b6:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    12ba:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    12bc:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <USB_HostState>
    12c0:	31 30       	cpi	r19, 0x01	; 1
    12c2:	c1 f0       	breq	.+48     	; 0x12f4 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    12c4:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
    12c8:	34 ff       	sbrs	r19, 4
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12cc:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    12d0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12d4:	8f 7e       	andi	r24, 0xEF	; 239
    12d6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    12da:	82 e0       	ldi	r24, 0x02	; 2

			break;
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    12de:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
    12e2:	31 ff       	sbrs	r19, 1
    12e4:	df cf       	rjmp	.-66     	; 0x12a4 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    12e6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12ea:	8d 7f       	andi	r24, 0xFD	; 253
    12ec:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    12f0:	83 e0       	ldi	r24, 0x03	; 3

			break;
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    12f4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    12f6:	21 11       	cpse	r18, r1
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12fa:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    12fe:	2e 7f       	andi	r18, 0xFE	; 254
    1300:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1304:	99 23       	and	r25, r25
    1306:	29 f0       	breq	.+10     	; 0x1312 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1308:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    130c:	90 62       	ori	r25, 0x20	; 32
    130e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1312:	08 95       	ret

00001314 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1314:	ef 92       	push	r14
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	28 97       	sbiw	r28, 0x08	; 8
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    132e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <USB_HostState>
    1332:	8e 2f       	mov	r24, r30
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	8a 30       	cpi	r24, 0x0A	; 10
    1338:	91 05       	cpc	r25, r1
    133a:	08 f0       	brcs	.+2      	; 0x133e <USB_Host_ProcessNextHostState+0x2a>
    133c:	f5 c0       	rjmp	.+490    	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
    133e:	fc 01       	movw	r30, r24
    1340:	e4 5b       	subi	r30, 0xB4	; 180
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	79 c5       	rjmp	.+2802   	; 0x1e38 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1346:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <WaitMSRemaining.2935>
    134a:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <WaitMSRemaining.2935+0x1>
    134e:	01 15       	cp	r16, r1
    1350:	11 05       	cpc	r17, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <USB_Host_ProcessNextHostState+0x42>
    1354:	e9 c0       	rjmp	.+466    	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 df       	rcall	.-224    	; 0x127a <USB_Host_WaitMS>
    135a:	88 23       	and	r24, r24
    135c:	31 f0       	breq	.+12     	; 0x136a <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
    135e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <__data_end>
    1362:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1366:	91 e0       	ldi	r25, 0x01	; 1
					break;
    1368:	d1 c0       	rjmp	.+418    	; 0x150c <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
    136a:	01 50       	subi	r16, 0x01	; 1
    136c:	11 09       	sbc	r17, r1
    136e:	10 93 28 01 	sts	0x0128, r17	; 0x800128 <WaitMSRemaining.2935+0x1>
    1372:	00 93 27 01 	sts	0x0127, r16	; 0x800127 <WaitMSRemaining.2935>
    1376:	01 2b       	or	r16, r17
    1378:	09 f0       	breq	.+2      	; 0x137c <USB_Host_ProcessNextHostState+0x68>
    137a:	d6 c0       	rjmp	.+428    	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
    137c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1382:	88 ee       	ldi	r24, 0xE8	; 232
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <WaitMSRemaining.2935+0x1>
    138a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <USB_HostState>
			break;
    1394:	c9 c0       	rjmp	.+402    	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1396:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <WaitMSRemaining.2935>
    139a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <WaitMSRemaining.2935+0x1>
    139e:	9c 01       	movw	r18, r24
    13a0:	21 50       	subi	r18, 0x01	; 1
    13a2:	31 09       	sbc	r19, r1
    13a4:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <WaitMSRemaining.2935+0x1>
    13a8:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <WaitMSRemaining.2935>
    13ac:	89 2b       	or	r24, r25
    13ae:	39 f0       	breq	.+14     	; 0x13be <USB_Host_ProcessNextHostState+0xaa>
    13b0:	8f ec       	ldi	r24, 0xCF	; 207
    13b2:	97 e0       	ldi	r25, 0x07	; 7
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <USB_Host_ProcessNextHostState+0xa0>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <USB_Host_ProcessNextHostState+0xa6>
    13ba:	00 00       	nop
    13bc:	b5 c0       	rjmp	.+362    	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    13be:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    13c0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    13c4:	80 61       	ori	r24, 0x10	; 16
    13c6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    13ca:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    13ce:	8b 7f       	andi	r24, 0xFB	; 251
    13d0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
    13d4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    13d8:	80 61       	ori	r24, 0x10	; 16
    13da:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    13de:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	d2 cf       	rjmp	.-92     	; 0x1390 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    13ec:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    13f0:	80 ff       	sbrs	r24, 0
    13f2:	9a c0       	rjmp	.+308    	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    13f4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    13fe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1408:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1412:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    141c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1426:	e8 d0       	rcall	.+464    	; 0x15f8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1428:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_HostState>
    142c:	84 e6       	ldi	r24, 0x64	; 100
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <WaitMSRemaining.2935+0x1>
    1434:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <WaitMSRemaining.2935>
    1438:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    143a:	5c c0       	rjmp	.+184    	; 0x14f4 <USB_Host_ProcessNextHostState+0x1e0>
    143c:	cd de       	rcall	.-614    	; 0x11d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    143e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_HostState>
    1442:	88 ec       	ldi	r24, 0xC8	; 200
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <WaitMSRemaining.2935+0x1>
    144a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <WaitMSRemaining.2935>
    144e:	86 e0       	ldi	r24, 0x06	; 6
    1450:	51 c0       	rjmp	.+162    	; 0x14f4 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    1452:	e1 2c       	mov	r14, r1
    1454:	00 e4       	ldi	r16, 0x40	; 64
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	6f d0       	rcall	.+222    	; 0x1540 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1462:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    1466:	87 fd       	sbrc	r24, 7
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    146a:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    146c:	94 e0       	ldi	r25, 0x04	; 4
    146e:	4e c0       	rjmp	.+156    	; 0x150c <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1470:	87 e0       	ldi	r24, 0x07	; 7
    1472:	8e cf       	rjmp	.-228    	; 0x1390 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1474:	88 e0       	ldi	r24, 0x08	; 8
    1476:	e5 e1       	ldi	r30, 0x15	; 21
    1478:	f1 e0       	ldi	r31, 0x01	; 1
    147a:	ac e2       	ldi	r26, 0x2C	; 44
    147c:	b1 e0       	ldi	r27, 0x01	; 1
    147e:	01 90       	ld	r0, Z+
    1480:	0d 92       	st	X+, r0
    1482:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1484:	e1 f7       	brne	.-8      	; 0x147e <USB_Host_ProcessNextHostState+0x16a>
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	7e d3       	rcall	.+1788   	; 0x1b88 <USB_Host_SendControlRequest>
    148c:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    148e:	3d c0       	rjmp	.+122    	; 0x150a <USB_Host_ProcessNextHostState+0x1f6>
    1490:	88 85       	ldd	r24, Y+8	; 0x08
    1492:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
    1496:	a0 de       	rcall	.-704    	; 0x11d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1498:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_HostState>
    149c:	88 ec       	ldi	r24, 0xC8	; 200
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <WaitMSRemaining.2935+0x1>
    14a4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <WaitMSRemaining.2935>
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	24 c0       	rjmp	.+72     	; 0x14f4 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    14ac:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <USB_Host_ControlPipeSize>
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	e1 2c       	mov	r14, r1
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	41 d0       	rcall	.+130    	; 0x1540 <Pipe_ConfigurePipe>
    14be:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    14c2:	87 ff       	sbrs	r24, 7
    14c4:	d2 cf       	rjmp	.-92     	; 0x146a <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    14c6:	88 e0       	ldi	r24, 0x08	; 8
    14c8:	ed e1       	ldi	r30, 0x1D	; 29
    14ca:	f1 e0       	ldi	r31, 0x01	; 1
    14cc:	ac e2       	ldi	r26, 0x2C	; 44
    14ce:	b1 e0       	ldi	r27, 0x01	; 1
    14d0:	01 90       	ld	r0, Z+
    14d2:	0d 92       	st	X+, r0
    14d4:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <USB_Host_ProcessNextHostState+0x1bc>
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	55 d3       	rcall	.+1706   	; 0x1b88 <USB_Host_SendControlRequest>
    14de:	81 11       	cpse	r24, r1
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    14e2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_HostState>
    14e6:	84 e6       	ldi	r24, 0x64	; 100
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <WaitMSRemaining.2935+0x1>
    14ee:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <WaitMSRemaining.2935>
    14f2:	89 e0       	ldi	r24, 0x09	; 9
    14f4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    14f8:	17 c0       	rjmp	.+46     	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1500:	8a e0       	ldi	r24, 0x0A	; 10
    1502:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
    1506:	29 d8       	rcall	.-4014   	; 0x55a <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1510:	21 30       	cpi	r18, 0x01	; 1
    1512:	51 f0       	breq	.+20     	; 0x1528 <USB_Host_ProcessNextHostState+0x214>
    1514:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1516:	89 2f       	mov	r24, r25
    1518:	63 d8       	rcall	.-3898   	; 0x5e0 <EVENT_USB_Host_DeviceEnumerationFailed>
    151a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    151e:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1520:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
    1524:	14 d8       	rcall	.-4056   	; 0x54e <EVENT_USB_Host_DeviceUnattached>
    1526:	c3 d0       	rcall	.+390    	; 0x16ae <USB_ResetInterface>
	}
}
    1528:	28 96       	adiw	r28, 0x08	; 8
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <Pipe_ConfigurePipe>:
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1540:	ef 92       	push	r14
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	2f 70       	andi	r18, 0x0F	; 15
    1548:	42 2b       	or	r20, r18
    154a:	90 e4       	ldi	r25, 0x40	; 64
    154c:	69 9f       	mul	r22, r25
    154e:	b0 01       	movw	r22, r0
    1550:	11 24       	eor	r1, r1
    1552:	64 2b       	or	r22, r20
    1554:	38 2f       	mov	r19, r24
    1556:	2e 2d       	mov	r18, r14
    1558:	22 60       	ori	r18, 0x02	; 2
    155a:	37 30       	cpi	r19, 0x07	; 7
    155c:	08 f0       	brcs	.+2      	; 0x1560 <Pipe_ConfigurePipe+0x20>
    155e:	45 c0       	rjmp	.+138    	; 0x15ea <Pipe_ConfigurePipe+0xaa>
    1560:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1564:	38 13       	cpse	r19, r24
    1566:	13 c0       	rjmp	.+38     	; 0x158e <Pipe_ConfigurePipe+0x4e>
    1568:	48 e0       	ldi	r20, 0x08	; 8
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	40 17       	cp	r20, r16
    1570:	51 07       	cpc	r21, r17
    1572:	38 f0       	brcs	.+14     	; 0x1582 <Pipe_ConfigurePipe+0x42>
    1574:	92 95       	swap	r25
    1576:	90 7f       	andi	r25, 0xF0	; 240
    1578:	92 2b       	or	r25, r18
    157a:	e6 2f       	mov	r30, r22
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	0e c0       	rjmp	.+28     	; 0x159e <Pipe_ConfigurePipe+0x5e>
    1582:	95 30       	cpi	r25, 0x05	; 5
    1584:	b9 f3       	breq	.-18     	; 0x1574 <Pipe_ConfigurePipe+0x34>
    1586:	9f 5f       	subi	r25, 0xFF	; 255
    1588:	44 0f       	add	r20, r20
    158a:	55 1f       	adc	r21, r21
    158c:	f0 cf       	rjmp	.-32     	; 0x156e <Pipe_ConfigurePipe+0x2e>
    158e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1592:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1596:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    159a:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
    159e:	91 fd       	sbrc	r25, 1
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <Pipe_ConfigurePipe+0x66>
    15a2:	3f 5f       	subi	r19, 0xFF	; 255
    15a4:	da cf       	rjmp	.-76     	; 0x155a <Pipe_ConfigurePipe+0x1a>
    15a6:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15aa:	4e 7f       	andi	r20, 0xFE	; 254
    15ac:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15b0:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    15b4:	4d 7f       	andi	r20, 0xFD	; 253
    15b6:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    15ba:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15be:	41 60       	ori	r20, 0x01	; 1
    15c0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15c4:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    15c8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    15cc:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    15d0:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
    15d4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15d8:	90 62       	ori	r25, 0x20	; 32
    15da:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15de:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
    15e2:	97 fd       	sbrc	r25, 7
    15e4:	de cf       	rjmp	.-68     	; 0x15a2 <Pipe_ConfigurePipe+0x62>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <Pipe_ConfigurePipe+0xb0>
    15ea:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ef 90       	pop	r14
    15f6:	08 95       	ret

000015f8 <Pipe_ClearPipes>:
    15f8:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1602:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
    1606:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    160a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    160e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1612:	9e 7f       	andi	r25, 0xFE	; 254
    1614:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	87 30       	cpi	r24, 0x07	; 7
    161c:	81 f7       	brne	.-32     	; 0x15fe <Pipe_ClearPipes+0x6>
    161e:	08 95       	ret

00001620 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1620:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1624:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    1628:	89 e8       	ldi	r24, 0x89	; 137
    162a:	93 e1       	ldi	r25, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    162c:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1630:	20 73       	andi	r18, 0x30	; 48
    1632:	20 31       	cpi	r18, 0x10	; 16
    1634:	29 f4       	brne	.+10     	; 0x1640 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1636:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
    163a:	20 ff       	sbrs	r18, 0
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <Pipe_WaitUntilReady+0x28>
    163e:	19 c0       	rjmp	.+50     	; 0x1672 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1640:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1644:	22 fd       	sbrc	r18, 2
    1646:	15 c0       	rjmp	.+42     	; 0x1672 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1648:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    164c:	21 fd       	sbrc	r18, 1
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <Pipe_WaitUntilReady+0x56>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1650:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <USB_HostState>
    1654:	21 30       	cpi	r18, 0x01	; 1
    1656:	89 f0       	breq	.+34     	; 0x167a <Pipe_WaitUntilReady+0x5a>
    1658:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    165c:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1660:	42 17       	cp	r20, r18
    1662:	53 07       	cpc	r21, r19
    1664:	19 f3       	breq	.-58     	; 0x162c <Pipe_WaitUntilReady+0xc>
    1666:	01 97       	sbiw	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1668:	11 f0       	breq	.+4      	; 0x166e <Pipe_WaitUntilReady+0x4e>
    166a:	a9 01       	movw	r20, r18
    166c:	df cf       	rjmp	.-66     	; 0x162c <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    167a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    167c:	08 95       	ret

0000167e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    167e:	70 d0       	rcall	.+224    	; 0x1760 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1680:	77 d0       	rcall	.+238    	; 0x1770 <USB_INT_ClearAllInterrupts>
    1682:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	80 83       	st	Z, r24
    168c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8f 77       	andi	r24, 0x7F	; 127
    1694:	80 83       	st	Z, r24
    1696:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1698:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	8c 91       	ld	r24, X
    169e:	8e 7f       	andi	r24, 0xFE	; 254
    16a0:	8c 93       	st	X, r24
    16a2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    16a4:	8f 7e       	andi	r24, 0xEF	; 239
    16a6:	80 83       	st	Z, r24
    16a8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    16ac:	08 95       	ret

000016ae <USB_ResetInterface>:
    16ae:	58 d0       	rcall	.+176    	; 0x1760 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    16b0:	5f d0       	rcall	.+190    	; 0x1770 <USB_INT_ClearAllInterrupts>
    16b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    16b6:	8f 77       	andi	r24, 0x7F	; 127
    16b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16bc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
    16c0:	80 68       	ori	r24, 0x80	; 128
    16c2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16c6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    16ca:	8f 7d       	andi	r24, 0xDF	; 223
    16cc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16d0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    16d4:	8f 77       	andi	r24, 0x7F	; 127
    16d6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    16da:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16dc:	89 bd       	out	0x29, r24	; 41
    16de:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16e0:	89 bd       	out	0x29, r24	; 41
    16e2:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    16e4:	00 fe       	sbrs	r0, 0
    16e6:	fd cf       	rjmp	.-6      	; 0x16e2 <USB_ResetInterface+0x34>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    16ea:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <USB_HostState>
    16ee:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
    16f2:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    16f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_Host_ControlPipeSize>
    16f8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    16fc:	80 64       	ori	r24, 0x40	; 64
    16fe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1702:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    170c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1710:	84 60       	ori	r24, 0x04	; 4
    1712:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    1716:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
    171a:	8f 7e       	andi	r24, 0xEF	; 239
    171c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1720:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
    1722:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1724:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1728:	81 60       	ori	r24, 0x01	; 1
    172a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    172e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1732:	84 60       	ori	r24, 0x04	; 4
    1734:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1738:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    173c:	8e 7f       	andi	r24, 0xFE	; 254
    173e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1742:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1746:	80 61       	ori	r24, 0x10	; 16
    1748:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    174c:	08 95       	ret

0000174e <USB_Init>:
    174e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	81 60       	ori	r24, 0x01	; 1
    1756:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_IsInitialized>

	USB_ResetInterface();
    175e:	a7 cf       	rjmp	.-178    	; 0x16ae <USB_ResetInterface>

00001760 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1760:	e8 ed       	ldi	r30, 0xD8	; 216
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8c 7f       	andi	r24, 0xFC	; 252
    1768:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    176a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    176e:	08 95       	ret

00001770 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1770:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1774:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1778:	08 95       	ret

0000177a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	2f 93       	push	r18
    178a:	3f 93       	push	r19
    178c:	4f 93       	push	r20
    178e:	5f 93       	push	r21
    1790:	6f 93       	push	r22
    1792:	7f 93       	push	r23
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	af 93       	push	r26
    179a:	bf 93       	push	r27
    179c:	ef 93       	push	r30
    179e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    17a0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    17a4:	85 ff       	sbrs	r24, 5
    17a6:	0a c0       	rjmp	.+20     	; 0x17bc <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    17a8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    17ac:	85 ff       	sbrs	r24, 5
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    17b0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    17b4:	8f 7d       	andi	r24, 0xDF	; 223
    17b6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    17ba:	bf d1       	rcall	.+894    	; 0x1b3a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    17bc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    17c0:	81 ff       	sbrs	r24, 1
    17c2:	16 c0       	rjmp	.+44     	; 0x17f0 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    17c4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    17c8:	81 ff       	sbrs	r24, 1
    17ca:	12 c0       	rjmp	.+36     	; 0x17f0 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    17cc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    17d0:	8d 7f       	andi	r24, 0xFD	; 253
    17d2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    17d6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    17da:	8e 7f       	andi	r24, 0xFE	; 254
    17dc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    17e0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    17e4:	8d 7f       	andi	r24, 0xFD	; 253
    17e6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    17ea:	0e 94 a7 02 	call	0x54e	; 0x54e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    17ee:	5f df       	rcall	.-322    	; 0x16ae <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    17f0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    17f4:	81 ff       	sbrs	r24, 1
    17f6:	17 c0       	rjmp	.+46     	; 0x1826 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    17f8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    17fc:	81 ff       	sbrs	r24, 1
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1800:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    1804:	8d 7f       	andi	r24, 0xFD	; 253
    1806:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    180a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    180c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    1810:	81 60       	ori	r24, 0x01	; 1
    1812:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	0e 94 de 02 	call	0x5bc	; 0x5bc <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    181c:	0e 94 a7 02 	call	0x54e	; 0x54e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <USB_HostState>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1826:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    182a:	80 ff       	sbrs	r24, 0
    182c:	18 c0       	rjmp	.+48     	; 0x185e <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    182e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1832:	80 ff       	sbrs	r24, 0
    1834:	14 c0       	rjmp	.+40     	; 0x185e <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1836:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    183a:	8e 7f       	andi	r24, 0xFE	; 254
    183c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1840:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1844:	8e 7f       	andi	r24, 0xFE	; 254
    1846:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    184a:	0e 94 a1 02 	call	0x542	; 0x542 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    184e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1852:	82 60       	ori	r24, 0x02	; 2
    1854:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <USB_HostState>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    185e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1862:	82 ff       	sbrs	r24, 2
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1866:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    186a:	82 ff       	sbrs	r24, 2
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    186e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    1872:	8b 7f       	andi	r24, 0xFB	; 251
    1874:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1880:	0e 94 a7 02 	call	0x54e	; 0x54e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1884:	14 df       	rcall	.-472    	; 0x16ae <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0b be       	out	0x3b, r0	; 59
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <Pipe_Write_Stream_LE>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	ec 01       	movw	r28, r24
    18be:	8b 01       	movw	r16, r22
    18c0:	7a 01       	movw	r14, r20
    18c2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    18c6:	8f 7c       	andi	r24, 0xCF	; 207
    18c8:	80 62       	ori	r24, 0x20	; 32
    18ca:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    18ce:	a8 de       	rcall	.-688    	; 0x1620 <Pipe_WaitUntilReady>
    18d0:	81 11       	cpse	r24, r1
    18d2:	32 c0       	rjmp	.+100    	; 0x1938 <Pipe_Write_Stream_LE+0x8c>
    18d4:	e1 14       	cp	r14, r1
    18d6:	f1 04       	cpc	r15, r1
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <Pipe_Write_Stream_LE+0x3c>
    18da:	f7 01       	movw	r30, r14
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	08 1b       	sub	r16, r24
    18e2:	19 0b       	sbc	r17, r25
    18e4:	c8 0f       	add	r28, r24
    18e6:	d9 1f       	adc	r29, r25
    18e8:	c1 2c       	mov	r12, r1
    18ea:	d1 2c       	mov	r13, r1
    18ec:	01 15       	cp	r16, r1
    18ee:	11 05       	cpc	r17, r1
    18f0:	11 f1       	breq	.+68     	; 0x1936 <Pipe_Write_Stream_LE+0x8a>
    18f2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    18f6:	85 fd       	sbrc	r24, 5
    18f8:	15 c0       	rjmp	.+42     	; 0x1924 <Pipe_Write_Stream_LE+0x78>
    18fa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    18fe:	8b 77       	andi	r24, 0x7B	; 123
    1900:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1904:	e1 14       	cp	r14, r1
    1906:	f1 04       	cpc	r15, r1
    1908:	49 f0       	breq	.+18     	; 0x191c <Pipe_Write_Stream_LE+0x70>
    190a:	f7 01       	movw	r30, r14
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	c8 0e       	add	r12, r24
    1912:	d9 1e       	adc	r13, r25
    1914:	d1 82       	std	Z+1, r13	; 0x01
    1916:	c0 82       	st	Z, r12
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	0e c0       	rjmp	.+28     	; 0x1938 <Pipe_Write_Stream_LE+0x8c>
    191c:	81 de       	rcall	.-766    	; 0x1620 <Pipe_WaitUntilReady>
    191e:	88 23       	and	r24, r24
    1920:	29 f3       	breq	.-54     	; 0x18ec <Pipe_Write_Stream_LE+0x40>
    1922:	0a c0       	rjmp	.+20     	; 0x1938 <Pipe_Write_Stream_LE+0x8c>
    1924:	89 91       	ld	r24, Y+
    1926:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    192a:	01 50       	subi	r16, 0x01	; 1
    192c:	11 09       	sbc	r17, r1
    192e:	ff ef       	ldi	r31, 0xFF	; 255
    1930:	cf 1a       	sub	r12, r31
    1932:	df 0a       	sbc	r13, r31
    1934:	db cf       	rjmp	.-74     	; 0x18ec <Pipe_Write_Stream_LE+0x40>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	08 95       	ret

0000194a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ec 01       	movw	r28, r24
    195c:	8b 01       	movw	r16, r22
    195e:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1960:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1964:	8f 7c       	andi	r24, 0xCF	; 207
    1966:	80 61       	ori	r24, 0x10	; 16
    1968:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    196c:	59 de       	rcall	.-846    	; 0x1620 <Pipe_WaitUntilReady>
    196e:	81 11       	cpse	r24, r1
    1970:	32 c0       	rjmp	.+100    	; 0x19d6 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1972:	e1 14       	cp	r14, r1
    1974:	f1 04       	cpc	r15, r1
    1976:	39 f0       	breq	.+14     	; 0x1986 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
    1978:	f7 01       	movw	r30, r14
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	08 1b       	sub	r16, r24
    1980:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1982:	c8 0f       	add	r28, r24
    1984:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1986:	c1 2c       	mov	r12, r1
    1988:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    198a:	01 15       	cp	r16, r1
    198c:	11 05       	cpc	r17, r1
    198e:	11 f1       	breq	.+68     	; 0x19d4 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1990:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1994:	85 fd       	sbrc	r24, 5
    1996:	15 c0       	rjmp	.+42     	; 0x19c2 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1998:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    199c:	8e 77       	andi	r24, 0x7E	; 126
    199e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    19a2:	e1 14       	cp	r14, r1
    19a4:	f1 04       	cpc	r15, r1
    19a6:	49 f0       	breq	.+18     	; 0x19ba <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    19a8:	f7 01       	movw	r30, r14
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	c8 0e       	add	r12, r24
    19b0:	d9 1e       	adc	r13, r25
    19b2:	d1 82       	std	Z+1, r13	; 0x01
    19b4:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    19b6:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <Pipe_Read_Stream_LE+0x8c>
    19ba:	32 de       	rcall	.-924    	; 0x1620 <Pipe_WaitUntilReady>
    19bc:	88 23       	and	r24, r24
    19be:	29 f3       	breq	.-54     	; 0x198a <Pipe_Read_Stream_LE+0x40>
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    19c2:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    19c6:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    19c8:	01 50       	subi	r16, 0x01	; 1
    19ca:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    19cc:	ff ef       	ldi	r31, 0xFF	; 255
    19ce:	cf 1a       	sub	r12, r31
    19d0:	df 0a       	sbc	r13, r31
    19d2:	db cf       	rjmp	.-74     	; 0x198a <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	08 95       	ret

000019e8 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	dc 01       	movw	r26, r24
    19ee:	eb 01       	movw	r28, r22
    19f0:	e8 81       	ld	r30, Y
    19f2:	f9 81       	ldd	r31, Y+1	; 0x01
    19f4:	20 81       	ld	r18, Z
    19f6:	8d 91       	ld	r24, X+
    19f8:	9c 91       	ld	r25, X
    19fa:	11 97       	sbiw	r26, 0x01	; 1
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	82 17       	cp	r24, r18
    1a00:	93 07       	cpc	r25, r19
    1a02:	08 f4       	brcc	.+2      	; 0x1a06 <USB_GetNextDescriptor+0x1e>
    1a04:	9c 01       	movw	r18, r24
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	eb 01       	movw	r28, r22
    1a0c:	f9 83       	std	Y+1, r31	; 0x01
    1a0e:	e8 83       	st	Y, r30
    1a10:	8d 91       	ld	r24, X+
    1a12:	9c 91       	ld	r25, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	82 1b       	sub	r24, r18
    1a18:	93 0b       	sbc	r25, r19
    1a1a:	8d 93       	st	X+, r24
    1a1c:	9c 93       	st	X, r25
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <USB_Host_GetDeviceConfigDescriptor>:
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	29 97       	sbiw	r28, 0x09	; 9
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	6b 01       	movw	r12, r22
    1a46:	8a 01       	movw	r16, r20
    1a48:	79 01       	movw	r14, r18
    1a4a:	90 e8       	ldi	r25, 0x80	; 128
    1a4c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest>
    1a50:	96 e0       	ldi	r25, 0x06	; 6
    1a52:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <USB_ControlRequest+0x1>
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	92 60       	ori	r25, 0x02	; 2
    1a5c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <USB_ControlRequest+0x3>
    1a60:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_ControlRequest+0x2>
    1a64:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_ControlRequest+0x5>
    1a68:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x4>
    1a6c:	89 e0       	ldi	r24, 0x09	; 9
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <USB_ControlRequest+0x7>
    1a74:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <USB_ControlRequest+0x6>
    1a78:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	83 d0       	rcall	.+262    	; 0x1b88 <USB_Host_SendControlRequest>
    1a82:	81 11       	cpse	r24, r1
    1a84:	19 c0       	rjmp	.+50     	; 0x1ab8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
    1a90:	e8 16       	cp	r14, r24
    1a92:	f9 06       	cpc	r15, r25
    1a94:	70 f0       	brcs	.+28     	; 0x1ab2 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1a96:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <USB_ControlRequest+0x7>
    1a9a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <USB_ControlRequest+0x6>
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	73 d0       	rcall	.+230    	; 0x1b88 <USB_Host_SendControlRequest>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	81 81       	ldd	r24, Z+1	; 0x01
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	21 f4       	brne	.+8      	; 0x1ab6 <USB_Host_GetDeviceConfigDescriptor+0x92>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1ab6:	86 e0       	ldi	r24, 0x06	; 6
    1ab8:	29 96       	adiw	r28, 0x09	; 9
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	08 95       	ret

00001ad6 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	8c 01       	movw	r16, r24
    1aec:	eb 01       	movw	r28, r22
    1aee:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1af0:	f8 01       	movw	r30, r16
    1af2:	e0 80       	ld	r14, Z
    1af4:	f1 80       	ldd	r15, Z+1	; 0x01
    1af6:	e1 14       	cp	r14, r1
    1af8:	f1 04       	cpc	r15, r1
    1afa:	99 f0       	breq	.+38     	; 0x1b22 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1afc:	a8 80       	ld	r10, Y
    1afe:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1b00:	be 01       	movw	r22, r28
    1b02:	c8 01       	movw	r24, r16
    1b04:	71 df       	rcall	.-286    	; 0x19e8 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1b06:	88 81       	ld	r24, Y
    1b08:	99 81       	ldd	r25, Y+1	; 0x01
    1b0a:	f6 01       	movw	r30, r12
    1b0c:	09 95       	icall
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	79 f3       	breq	.-34     	; 0x1af0 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	39 f4       	brne	.+14     	; 0x1b24 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    1b16:	b9 82       	std	Y+1, r11	; 0x01
    1b18:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	f1 82       	std	Z+1, r15	; 0x01
    1b1e:	e0 82       	st	Z, r14
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1b22:	82 e0       	ldi	r24, 0x02	; 2
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	bf 90       	pop	r11
    1b36:	af 90       	pop	r10
    1b38:	08 95       	ret

00001b3a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1b3a:	08 95       	ret

00001b3c <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(FeatureStatus);
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	18 2f       	mov	r17, r24
    1b44:	c9 ee       	ldi	r28, 0xE9	; 233
    1b46:	d3 e0       	ldi	r29, 0x03	; 3
    1b48:	11 11       	cpse	r17, r1
    1b4a:	0c c0       	rjmp	.+24     	; 0x1b64 <USB_Host_WaitForIOS+0x28>
    1b4c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1b50:	83 fd       	sbrc	r24, 3
    1b52:	15 c0       	rjmp	.+42     	; 0x1b7e <USB_Host_WaitForIOS+0x42>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	91 db       	rcall	.-2270   	; 0x127a <USB_Host_WaitMS>
    1b58:	81 11       	cpse	r24, r1
    1b5a:	12 c0       	rjmp	.+36     	; 0x1b80 <USB_Host_WaitForIOS+0x44>
    1b5c:	21 97       	sbiw	r28, 0x01	; 1
    1b5e:	a1 f7       	brne	.-24     	; 0x1b48 <USB_Host_WaitForIOS+0xc>
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <USB_Host_WaitForIOS+0x44>
    1b64:	11 30       	cpi	r17, 0x01	; 1
    1b66:	29 f4       	brne	.+10     	; 0x1b72 <USB_Host_WaitForIOS+0x36>
    1b68:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1b6c:	80 ff       	sbrs	r24, 0
    1b6e:	f2 cf       	rjmp	.-28     	; 0x1b54 <USB_Host_WaitForIOS+0x18>
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <USB_Host_WaitForIOS+0x42>
    1b72:	12 30       	cpi	r17, 0x02	; 2
    1b74:	79 f7       	brne	.-34     	; 0x1b54 <USB_Host_WaitForIOS+0x18>
    1b76:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1b7a:	82 ff       	sbrs	r24, 2
    1b7c:	eb cf       	rjmp	.-42     	; 0x1b54 <USB_Host_WaitForIOS+0x18>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	08 95       	ret

00001b88 <USB_Host_SendControlRequest>:
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	8c 01       	movw	r16, r24
    1b94:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1b98:	81 70       	andi	r24, 0x01	; 1
    1b9a:	f8 2e       	mov	r15, r24
    1b9c:	c0 91 32 01 	lds	r28, 0x0132	; 0x800132 <USB_ControlRequest+0x6>
    1ba0:	d0 91 33 01 	lds	r29, 0x0133	; 0x800133 <USB_ControlRequest+0x7>
    1ba4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1ba8:	81 60       	ori	r24, 0x01	; 1
    1baa:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	64 db       	rcall	.-2360   	; 0x127a <USB_Host_WaitMS>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	c8 c0       	rjmp	.+400    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1bb6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1bba:	8f 7c       	andi	r24, 0xCF	; 207
    1bbc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1bc0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
    1bc4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1bc8:	8f 7e       	andi	r24, 0xEF	; 239
    1bca:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1bce:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bd2:	8f 7b       	andi	r24, 0xBF	; 191
    1bd4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bd8:	ec e2       	ldi	r30, 0x2C	; 44
    1bda:	f1 e0       	ldi	r31, 0x01	; 1
    1bdc:	84 e3       	ldi	r24, 0x34	; 52
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	21 91       	ld	r18, Z+
    1be2:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1be6:	8e 17       	cp	r24, r30
    1be8:	9f 07       	cpc	r25, r31
    1bea:	d1 f7       	brne	.-12     	; 0x1be0 <USB_Host_SendControlRequest+0x58>
    1bec:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1bf0:	87 77       	andi	r24, 0x77	; 119
    1bf2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	a1 df       	rcall	.-190    	; 0x1b3c <USB_Host_WaitForIOS>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	a4 c0       	rjmp	.+328    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1bfe:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c02:	80 64       	ori	r24, 0x40	; 64
    1c04:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	37 db       	rcall	.-2450   	; 0x127a <USB_Host_WaitMS>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	9b c0       	rjmp	.+310    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1c10:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
    1c14:	87 ff       	sbrs	r24, 7
    1c16:	4e c0       	rjmp	.+156    	; 0x1cb4 <USB_Host_SendControlRequest+0x12c>
    1c18:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1c1c:	8f 7c       	andi	r24, 0xCF	; 207
    1c1e:	80 61       	ori	r24, 0x10	; 16
    1c20:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1c24:	01 15       	cp	r16, r1
    1c26:	11 05       	cpc	r17, r1
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <USB_Host_SendControlRequest+0xa4>
    1c2a:	3a c0       	rjmp	.+116    	; 0x1ca0 <USB_Host_SendControlRequest+0x118>
    1c2c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1c30:	8f 7c       	andi	r24, 0xCF	; 207
    1c32:	80 62       	ori	r24, 0x20	; 32
    1c34:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1c38:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c3c:	8f 7b       	andi	r24, 0xBF	; 191
    1c3e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	7b df       	rcall	.-266    	; 0x1b3c <USB_Host_WaitForIOS>
    1c46:	81 11       	cpse	r24, r1
    1c48:	7e c0       	rjmp	.+252    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1c4a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c4e:	8b 77       	andi	r24, 0x7B	; 123
    1c50:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	72 df       	rcall	.-284    	; 0x1b3c <USB_Host_WaitForIOS>
    1c58:	76 c0       	rjmp	.+236    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1c5a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c5e:	8f 7b       	andi	r24, 0xBF	; 191
    1c60:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	6a df       	rcall	.-300    	; 0x1b3c <USB_Host_WaitForIOS>
    1c68:	81 11       	cpse	r24, r1
    1c6a:	6d c0       	rjmp	.+218    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1c6c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1c70:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1c74:	89 2b       	or	r24, r25
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <USB_Host_SendControlRequest+0xf4>
    1c78:	c0 e0       	ldi	r28, 0x00	; 0
    1c7a:	d0 e0       	ldi	r29, 0x00	; 0
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	8f 01       	movw	r16, r30
    1c80:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1c84:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1c88:	89 2b       	or	r24, r25
    1c8a:	69 f4       	brne	.+26     	; 0x1ca6 <USB_Host_SendControlRequest+0x11e>
    1c8c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c96:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c9a:	8e 77       	andi	r24, 0x7E	; 126
    1c9c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1ca0:	20 97       	sbiw	r28, 0x00	; 0
    1ca2:	d9 f6       	brne	.-74     	; 0x1c5a <USB_Host_SendControlRequest+0xd2>
    1ca4:	c3 cf       	rjmp	.-122    	; 0x1c2c <USB_Host_SendControlRequest+0xa4>
    1ca6:	20 97       	sbiw	r28, 0x00	; 0
    1ca8:	89 f3       	breq	.-30     	; 0x1c8c <USB_Host_SendControlRequest+0x104>
    1caa:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1cae:	81 93       	st	Z+, r24
    1cb0:	21 97       	sbiw	r28, 0x01	; 1
    1cb2:	e5 cf       	rjmp	.-54     	; 0x1c7e <USB_Host_SendControlRequest+0xf6>
    1cb4:	01 15       	cp	r16, r1
    1cb6:	11 05       	cpc	r17, r1
    1cb8:	91 f1       	breq	.+100    	; 0x1d1e <USB_Host_SendControlRequest+0x196>
    1cba:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1cbe:	8f 7c       	andi	r24, 0xCF	; 207
    1cc0:	80 62       	ori	r24, 0x20	; 32
    1cc2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1cc6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1cca:	8f 7b       	andi	r24, 0xBF	; 191
    1ccc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	20 97       	sbiw	r28, 0x00	; 0
    1cd4:	e1 f0       	breq	.+56     	; 0x1d0e <USB_Host_SendControlRequest+0x186>
    1cd6:	32 df       	rcall	.-412    	; 0x1b3c <USB_Host_WaitForIOS>
    1cd8:	81 11       	cpse	r24, r1
    1cda:	35 c0       	rjmp	.+106    	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1cdc:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1ce0:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1ce4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_Host_ControlPipeSize>
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	28 17       	cp	r18, r24
    1cec:	39 07       	cpc	r19, r25
    1cee:	48 f4       	brcc	.+18     	; 0x1d02 <USB_Host_SendControlRequest+0x17a>
    1cf0:	0f 5f       	subi	r16, 0xFF	; 255
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	31 97       	sbiw	r30, 0x01	; 1
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1cfe:	21 97       	sbiw	r28, 0x01	; 1
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <USB_Host_SendControlRequest+0x154>
    1d02:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1d06:	8b 77       	andi	r24, 0x7B	; 123
    1d08:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1d0c:	e1 cf       	rjmp	.-62     	; 0x1cd0 <USB_Host_SendControlRequest+0x148>
    1d0e:	16 df       	rcall	.-468    	; 0x1b3c <USB_Host_WaitForIOS>
    1d10:	81 11       	cpse	r24, r1
    1d12:	19 c0       	rjmp	.+50     	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1d14:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1d18:	80 64       	ori	r24, 0x40	; 64
    1d1a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1d1e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1d22:	8f 7c       	andi	r24, 0xCF	; 207
    1d24:	80 61       	ori	r24, 0x10	; 16
    1d26:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1d2a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1d2e:	8f 7b       	andi	r24, 0xBF	; 191
    1d30:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	02 df       	rcall	.-508    	; 0x1b3c <USB_Host_WaitForIOS>
    1d38:	81 11       	cpse	r24, r1
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <USB_Host_SendControlRequest+0x1be>
    1d3c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1d40:	9e 77       	andi	r25, 0x7E	; 126
    1d42:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1d46:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1d4a:	90 64       	ori	r25, 0x40	; 64
    1d4c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1d50:	f1 10       	cpse	r15, r1
    1d52:	05 c0       	rjmp	.+10     	; 0x1d5e <USB_Host_SendControlRequest+0x1d6>
    1d54:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1d58:	9e 7f       	andi	r25, 0xFE	; 254
    1d5a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1d5e:	91 e0       	ldi	r25, 0x01	; 1
    1d60:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1d64:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	08 95       	ret

00001d74 <USB_Host_SetDeviceConfiguration>:
    1d74:	cf 93       	push	r28
    1d76:	c8 2f       	mov	r28, r24
    1d78:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest>
    1d7c:	89 e0       	ldi	r24, 0x09	; 9
    1d7e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_ControlRequest+0x1>
    1d82:	8c 2f       	mov	r24, r28
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <USB_ControlRequest+0x3>
    1d8a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_ControlRequest+0x2>
    1d8e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_ControlRequest+0x5>
    1d92:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x4>
    1d96:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_ControlRequest+0x7>
    1d9a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <USB_ControlRequest+0x6>
    1d9e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	f0 de       	rcall	.-544    	; 0x1b88 <USB_Host_SendControlRequest>
    1da8:	81 11       	cpse	r24, r1
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <USB_Host_SetDeviceConfiguration+0x4a>
    1dac:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <USB_Host_ConfigurationNumber>
    1db0:	c1 11       	cpse	r28, r1
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <USB_Host_SetDeviceConfiguration+0x44>
    1db4:	9a e0       	ldi	r25, 0x0A	; 10
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <USB_Host_SetDeviceConfiguration+0x46>
    1db8:	9b e0       	ldi	r25, 0x0B	; 11
    1dba:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <USB_HostState>
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <USB_Host_ClearEndpointStall>:
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1dc2:	ec e2       	ldi	r30, 0x2C	; 44
    1dc4:	f1 e0       	ldi	r31, 0x01	; 1
    1dc6:	92 e0       	ldi	r25, 0x02	; 2
    1dc8:	90 83       	st	Z, r25
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	91 83       	std	Z+1, r25	; 0x01
    1dce:	13 82       	std	Z+3, r1	; 0x03
    1dd0:	12 82       	std	Z+2, r1	; 0x02
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	95 83       	std	Z+5, r25	; 0x05
    1dd6:	84 83       	std	Z+4, r24	; 0x04
    1dd8:	17 82       	std	Z+7, r1	; 0x07
    1dda:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1ddc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	d1 ce       	rjmp	.-606    	; 0x1b88 <USB_Host_SendControlRequest>

00001de6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1dec:	c7 ea       	ldi	r28, 0xA7	; 167
    1dee:	d0 e0       	ldi	r29, 0x00	; 0
    1df0:	18 81       	ld	r17, Y
    1df2:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1df4:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1df6:	8e da       	rcall	.-2788   	; 0x1314 <USB_Host_ProcessNextHostState>
    1df8:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	08 95       	ret

00001e02 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e02:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1e06:	95 ff       	sbrs	r25, 5
    1e08:	fc cf       	rjmp	.-8      	; 0x1e02 <Serial_putchar>
				UDR1 = DataByte;
    1e0a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	08 95       	ret

00001e14 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e14:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e18:	87 ff       	sbrs	r24, 7
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <Serial_getchar+0x18>
    1e1c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e20:	87 ff       	sbrs	r24, 7
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1e24:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	08 95       	ret
	  return _FDEV_EOF;
    1e2c:	8e ef       	ldi	r24, 0xFE	; 254
    1e2e:	9f ef       	ldi	r25, 0xFF	; 255
    1e30:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e36:	08 95       	ret

00001e38 <__tablejump2__>:
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	00 24       	eor	r0, r0
    1e3e:	00 1c       	adc	r0, r0
    1e40:	0b be       	out	0x3b, r0	; 59
    1e42:	07 90       	elpm	r0, Z+
    1e44:	f6 91       	elpm	r31, Z
    1e46:	e0 2d       	mov	r30, r0
    1e48:	09 94       	ijmp

00001e4a <__umulhisi3>:
    1e4a:	a2 9f       	mul	r26, r18
    1e4c:	b0 01       	movw	r22, r0
    1e4e:	b3 9f       	mul	r27, r19
    1e50:	c0 01       	movw	r24, r0
    1e52:	a3 9f       	mul	r26, r19
    1e54:	70 0d       	add	r23, r0
    1e56:	81 1d       	adc	r24, r1
    1e58:	11 24       	eor	r1, r1
    1e5a:	91 1d       	adc	r25, r1
    1e5c:	b2 9f       	mul	r27, r18
    1e5e:	70 0d       	add	r23, r0
    1e60:	81 1d       	adc	r24, r1
    1e62:	11 24       	eor	r1, r1
    1e64:	91 1d       	adc	r25, r1
    1e66:	08 95       	ret

00001e68 <isgraph>:
    1e68:	80 32       	cpi	r24, 0x20	; 32
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <isprint+0x2>

00001e6c <isprint>:
    1e6c:	91 11       	cpse	r25, r1
    1e6e:	95 c2       	rjmp	.+1322   	; 0x239a <__ctype_isfalse>
    1e70:	80 52       	subi	r24, 0x20	; 32
    1e72:	8f 55       	subi	r24, 0x5F	; 95
    1e74:	e0 f7       	brcc	.-8      	; 0x1e6e <isprint+0x2>
    1e76:	08 95       	ret

00001e78 <fputc>:
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	fb 01       	movw	r30, r22
    1e82:	23 81       	ldd	r18, Z+3	; 0x03
    1e84:	21 fd       	sbrc	r18, 1
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <fputc+0x16>
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	9f ef       	ldi	r25, 0xFF	; 255
    1e8c:	2c c0       	rjmp	.+88     	; 0x1ee6 <fputc+0x6e>
    1e8e:	22 ff       	sbrs	r18, 2
    1e90:	16 c0       	rjmp	.+44     	; 0x1ebe <fputc+0x46>
    1e92:	46 81       	ldd	r20, Z+6	; 0x06
    1e94:	57 81       	ldd	r21, Z+7	; 0x07
    1e96:	24 81       	ldd	r18, Z+4	; 0x04
    1e98:	35 81       	ldd	r19, Z+5	; 0x05
    1e9a:	42 17       	cp	r20, r18
    1e9c:	53 07       	cpc	r21, r19
    1e9e:	44 f4       	brge	.+16     	; 0x1eb0 <fputc+0x38>
    1ea0:	a0 81       	ld	r26, Z
    1ea2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ea4:	9d 01       	movw	r18, r26
    1ea6:	2f 5f       	subi	r18, 0xFF	; 255
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	31 83       	std	Z+1, r19	; 0x01
    1eac:	20 83       	st	Z, r18
    1eae:	8c 93       	st	X, r24
    1eb0:	26 81       	ldd	r18, Z+6	; 0x06
    1eb2:	37 81       	ldd	r19, Z+7	; 0x07
    1eb4:	2f 5f       	subi	r18, 0xFF	; 255
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	37 83       	std	Z+7, r19	; 0x07
    1eba:	26 83       	std	Z+6, r18	; 0x06
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <fputc+0x6e>
    1ebe:	8b 01       	movw	r16, r22
    1ec0:	ec 01       	movw	r28, r24
    1ec2:	fb 01       	movw	r30, r22
    1ec4:	00 84       	ldd	r0, Z+8	; 0x08
    1ec6:	f1 85       	ldd	r31, Z+9	; 0x09
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	09 95       	icall
    1ecc:	89 2b       	or	r24, r25
    1ece:	e1 f6       	brne	.-72     	; 0x1e88 <fputc+0x10>
    1ed0:	d8 01       	movw	r26, r16
    1ed2:	16 96       	adiw	r26, 0x06	; 6
    1ed4:	8d 91       	ld	r24, X+
    1ed6:	9c 91       	ld	r25, X
    1ed8:	17 97       	sbiw	r26, 0x07	; 7
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	17 96       	adiw	r26, 0x07	; 7
    1ede:	9c 93       	st	X, r25
    1ee0:	8e 93       	st	-X, r24
    1ee2:	16 97       	sbiw	r26, 0x06	; 6
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <printf_P>:
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	ae 01       	movw	r20, r28
    1efe:	49 5f       	subi	r20, 0xF9	; 249
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
    1f02:	da 01       	movw	r26, r20
    1f04:	6d 91       	ld	r22, X+
    1f06:	7d 91       	ld	r23, X+
    1f08:	ad 01       	movw	r20, r26
    1f0a:	03 e4       	ldi	r16, 0x43	; 67
    1f0c:	11 e0       	ldi	r17, 0x01	; 1
    1f0e:	f8 01       	movw	r30, r16
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	dc 01       	movw	r26, r24
    1f16:	13 96       	adiw	r26, 0x03	; 3
    1f18:	2c 91       	ld	r18, X
    1f1a:	13 97       	sbiw	r26, 0x03	; 3
    1f1c:	28 60       	ori	r18, 0x08	; 8
    1f1e:	13 96       	adiw	r26, 0x03	; 3
    1f20:	2c 93       	st	X, r18
    1f22:	3e d0       	rcall	.+124    	; 0x1fa0 <vfprintf>
    1f24:	d8 01       	movw	r26, r16
    1f26:	12 96       	adiw	r26, 0x02	; 2
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	13 97       	sbiw	r26, 0x03	; 3
    1f2e:	23 81       	ldd	r18, Z+3	; 0x03
    1f30:	27 7f       	andi	r18, 0xF7	; 247
    1f32:	23 83       	std	Z+3, r18	; 0x03
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <puts_P>:
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	8c 01       	movw	r16, r24
    1f48:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <__iob+0x2>
    1f4c:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <__iob+0x3>
    1f50:	83 81       	ldd	r24, Z+3	; 0x03
    1f52:	81 ff       	sbrs	r24, 1
    1f54:	1b c0       	rjmp	.+54     	; 0x1f8c <puts_P+0x4e>
    1f56:	d0 e0       	ldi	r29, 0x00	; 0
    1f58:	c0 e0       	ldi	r28, 0x00	; 0
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	84 91       	lpm	r24, Z
    1f5e:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <__iob+0x2>
    1f62:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <__iob+0x3>
    1f66:	db 01       	movw	r26, r22
    1f68:	18 96       	adiw	r26, 0x08	; 8
    1f6a:	ed 91       	ld	r30, X+
    1f6c:	fc 91       	ld	r31, X
    1f6e:	19 97       	sbiw	r26, 0x09	; 9
    1f70:	88 23       	and	r24, r24
    1f72:	41 f0       	breq	.+16     	; 0x1f84 <puts_P+0x46>
    1f74:	09 95       	icall
    1f76:	89 2b       	or	r24, r25
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <puts_P+0x40>
    1f7a:	df ef       	ldi	r29, 0xFF	; 255
    1f7c:	cf ef       	ldi	r28, 0xFF	; 255
    1f7e:	0f 5f       	subi	r16, 0xFF	; 255
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	eb cf       	rjmp	.-42     	; 0x1f5a <puts_P+0x1c>
    1f84:	8a e0       	ldi	r24, 0x0A	; 10
    1f86:	09 95       	icall
    1f88:	89 2b       	or	r24, r25
    1f8a:	19 f0       	breq	.+6      	; 0x1f92 <puts_P+0x54>
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	9f ef       	ldi	r25, 0xFF	; 255
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <puts_P+0x58>
    1f92:	8d 2f       	mov	r24, r29
    1f94:	9c 2f       	mov	r25, r28
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	08 95       	ret

00001fa0 <vfprintf>:
    1fa0:	2f 92       	push	r2
    1fa2:	3f 92       	push	r3
    1fa4:	4f 92       	push	r4
    1fa6:	5f 92       	push	r5
    1fa8:	6f 92       	push	r6
    1faa:	7f 92       	push	r7
    1fac:	8f 92       	push	r8
    1fae:	9f 92       	push	r9
    1fb0:	af 92       	push	r10
    1fb2:	bf 92       	push	r11
    1fb4:	cf 92       	push	r12
    1fb6:	df 92       	push	r13
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	2b 97       	sbiw	r28, 0x0b	; 11
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	6c 01       	movw	r12, r24
    1fd6:	7b 01       	movw	r14, r22
    1fd8:	8a 01       	movw	r16, r20
    1fda:	fc 01       	movw	r30, r24
    1fdc:	17 82       	std	Z+7, r1	; 0x07
    1fde:	16 82       	std	Z+6, r1	; 0x06
    1fe0:	83 81       	ldd	r24, Z+3	; 0x03
    1fe2:	81 ff       	sbrs	r24, 1
    1fe4:	bf c1       	rjmp	.+894    	; 0x2364 <__stack+0x265>
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	3c 01       	movw	r6, r24
    1fec:	f6 01       	movw	r30, r12
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	f7 01       	movw	r30, r14
    1ff2:	93 fd       	sbrc	r25, 3
    1ff4:	85 91       	lpm	r24, Z+
    1ff6:	93 ff       	sbrs	r25, 3
    1ff8:	81 91       	ld	r24, Z+
    1ffa:	7f 01       	movw	r14, r30
    1ffc:	88 23       	and	r24, r24
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    2000:	ad c1       	rjmp	.+858    	; 0x235c <__stack+0x25d>
    2002:	85 32       	cpi	r24, 0x25	; 37
    2004:	39 f4       	brne	.+14     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2006:	93 fd       	sbrc	r25, 3
    2008:	85 91       	lpm	r24, Z+
    200a:	93 ff       	sbrs	r25, 3
    200c:	81 91       	ld	r24, Z+
    200e:	7f 01       	movw	r14, r30
    2010:	85 32       	cpi	r24, 0x25	; 37
    2012:	21 f4       	brne	.+8      	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    2014:	b6 01       	movw	r22, r12
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	2f df       	rcall	.-418    	; 0x1e78 <fputc>
    201a:	e8 cf       	rjmp	.-48     	; 0x1fec <vfprintf+0x4c>
    201c:	91 2c       	mov	r9, r1
    201e:	21 2c       	mov	r2, r1
    2020:	31 2c       	mov	r3, r1
    2022:	ff e1       	ldi	r31, 0x1F	; 31
    2024:	f3 15       	cp	r31, r3
    2026:	d8 f0       	brcs	.+54     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2028:	8b 32       	cpi	r24, 0x2B	; 43
    202a:	79 f0       	breq	.+30     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    202c:	38 f4       	brcc	.+14     	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    202e:	80 32       	cpi	r24, 0x20	; 32
    2030:	79 f0       	breq	.+30     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    2032:	83 32       	cpi	r24, 0x23	; 35
    2034:	a1 f4       	brne	.+40     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2036:	23 2d       	mov	r18, r3
    2038:	20 61       	ori	r18, 0x10	; 16
    203a:	1d c0       	rjmp	.+58     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    203c:	8d 32       	cpi	r24, 0x2D	; 45
    203e:	61 f0       	breq	.+24     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2040:	80 33       	cpi	r24, 0x30	; 48
    2042:	69 f4       	brne	.+26     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2044:	23 2d       	mov	r18, r3
    2046:	21 60       	ori	r18, 0x01	; 1
    2048:	16 c0       	rjmp	.+44     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    204a:	83 2d       	mov	r24, r3
    204c:	82 60       	ori	r24, 0x02	; 2
    204e:	38 2e       	mov	r3, r24
    2050:	e3 2d       	mov	r30, r3
    2052:	e4 60       	ori	r30, 0x04	; 4
    2054:	3e 2e       	mov	r3, r30
    2056:	2a c0       	rjmp	.+84     	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    2058:	f3 2d       	mov	r31, r3
    205a:	f8 60       	ori	r31, 0x08	; 8
    205c:	1d c0       	rjmp	.+58     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    205e:	37 fc       	sbrc	r3, 7
    2060:	2d c0       	rjmp	.+90     	; 0x20bc <__DATA_REGION_LENGTH__+0xbc>
    2062:	20 ed       	ldi	r18, 0xD0	; 208
    2064:	28 0f       	add	r18, r24
    2066:	2a 30       	cpi	r18, 0x0A	; 10
    2068:	40 f0       	brcs	.+16     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    206a:	8e 32       	cpi	r24, 0x2E	; 46
    206c:	b9 f4       	brne	.+46     	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    206e:	36 fc       	sbrc	r3, 6
    2070:	75 c1       	rjmp	.+746    	; 0x235c <__stack+0x25d>
    2072:	23 2d       	mov	r18, r3
    2074:	20 64       	ori	r18, 0x40	; 64
    2076:	32 2e       	mov	r3, r18
    2078:	19 c0       	rjmp	.+50     	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    207a:	36 fe       	sbrs	r3, 6
    207c:	06 c0       	rjmp	.+12     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    207e:	8a e0       	ldi	r24, 0x0A	; 10
    2080:	98 9e       	mul	r9, r24
    2082:	20 0d       	add	r18, r0
    2084:	11 24       	eor	r1, r1
    2086:	92 2e       	mov	r9, r18
    2088:	11 c0       	rjmp	.+34     	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    208a:	ea e0       	ldi	r30, 0x0A	; 10
    208c:	2e 9e       	mul	r2, r30
    208e:	20 0d       	add	r18, r0
    2090:	11 24       	eor	r1, r1
    2092:	22 2e       	mov	r2, r18
    2094:	f3 2d       	mov	r31, r3
    2096:	f0 62       	ori	r31, 0x20	; 32
    2098:	3f 2e       	mov	r3, r31
    209a:	08 c0       	rjmp	.+16     	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    209c:	8c 36       	cpi	r24, 0x6C	; 108
    209e:	21 f4       	brne	.+8      	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    20a0:	83 2d       	mov	r24, r3
    20a2:	80 68       	ori	r24, 0x80	; 128
    20a4:	38 2e       	mov	r3, r24
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    20a8:	88 36       	cpi	r24, 0x68	; 104
    20aa:	41 f4       	brne	.+16     	; 0x20bc <__DATA_REGION_LENGTH__+0xbc>
    20ac:	f7 01       	movw	r30, r14
    20ae:	93 fd       	sbrc	r25, 3
    20b0:	85 91       	lpm	r24, Z+
    20b2:	93 ff       	sbrs	r25, 3
    20b4:	81 91       	ld	r24, Z+
    20b6:	7f 01       	movw	r14, r30
    20b8:	81 11       	cpse	r24, r1
    20ba:	b3 cf       	rjmp	.-154    	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    20bc:	98 2f       	mov	r25, r24
    20be:	9f 7d       	andi	r25, 0xDF	; 223
    20c0:	95 54       	subi	r25, 0x45	; 69
    20c2:	93 30       	cpi	r25, 0x03	; 3
    20c4:	28 f4       	brcc	.+10     	; 0x20d0 <__DATA_REGION_LENGTH__+0xd0>
    20c6:	0c 5f       	subi	r16, 0xFC	; 252
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	9f e3       	ldi	r25, 0x3F	; 63
    20cc:	99 83       	std	Y+1, r25	; 0x01
    20ce:	0d c0       	rjmp	.+26     	; 0x20ea <__DATA_REGION_LENGTH__+0xea>
    20d0:	83 36       	cpi	r24, 0x63	; 99
    20d2:	31 f0       	breq	.+12     	; 0x20e0 <__DATA_REGION_LENGTH__+0xe0>
    20d4:	83 37       	cpi	r24, 0x73	; 115
    20d6:	71 f0       	breq	.+28     	; 0x20f4 <__DATA_REGION_LENGTH__+0xf4>
    20d8:	83 35       	cpi	r24, 0x53	; 83
    20da:	09 f0       	breq	.+2      	; 0x20de <__DATA_REGION_LENGTH__+0xde>
    20dc:	55 c0       	rjmp	.+170    	; 0x2188 <__stack+0x89>
    20de:	20 c0       	rjmp	.+64     	; 0x2120 <__stack+0x21>
    20e0:	f8 01       	movw	r30, r16
    20e2:	80 81       	ld	r24, Z
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	0e 5f       	subi	r16, 0xFE	; 254
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	88 24       	eor	r8, r8
    20ec:	83 94       	inc	r8
    20ee:	91 2c       	mov	r9, r1
    20f0:	53 01       	movw	r10, r6
    20f2:	12 c0       	rjmp	.+36     	; 0x2118 <__stack+0x19>
    20f4:	28 01       	movw	r4, r16
    20f6:	f2 e0       	ldi	r31, 0x02	; 2
    20f8:	4f 0e       	add	r4, r31
    20fa:	51 1c       	adc	r5, r1
    20fc:	f8 01       	movw	r30, r16
    20fe:	a0 80       	ld	r10, Z
    2100:	b1 80       	ldd	r11, Z+1	; 0x01
    2102:	36 fe       	sbrs	r3, 6
    2104:	03 c0       	rjmp	.+6      	; 0x210c <__stack+0xd>
    2106:	69 2d       	mov	r22, r9
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <__stack+0x11>
    210c:	6f ef       	ldi	r22, 0xFF	; 255
    210e:	7f ef       	ldi	r23, 0xFF	; 255
    2110:	c5 01       	movw	r24, r10
    2112:	51 d1       	rcall	.+674    	; 0x23b6 <strnlen>
    2114:	4c 01       	movw	r8, r24
    2116:	82 01       	movw	r16, r4
    2118:	f3 2d       	mov	r31, r3
    211a:	ff 77       	andi	r31, 0x7F	; 127
    211c:	3f 2e       	mov	r3, r31
    211e:	15 c0       	rjmp	.+42     	; 0x214a <__stack+0x4b>
    2120:	28 01       	movw	r4, r16
    2122:	22 e0       	ldi	r18, 0x02	; 2
    2124:	42 0e       	add	r4, r18
    2126:	51 1c       	adc	r5, r1
    2128:	f8 01       	movw	r30, r16
    212a:	a0 80       	ld	r10, Z
    212c:	b1 80       	ldd	r11, Z+1	; 0x01
    212e:	36 fe       	sbrs	r3, 6
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <__stack+0x39>
    2132:	69 2d       	mov	r22, r9
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	02 c0       	rjmp	.+4      	; 0x213c <__stack+0x3d>
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	7f ef       	ldi	r23, 0xFF	; 255
    213c:	c5 01       	movw	r24, r10
    213e:	30 d1       	rcall	.+608    	; 0x23a0 <strnlen_P>
    2140:	4c 01       	movw	r8, r24
    2142:	f3 2d       	mov	r31, r3
    2144:	f0 68       	ori	r31, 0x80	; 128
    2146:	3f 2e       	mov	r3, r31
    2148:	82 01       	movw	r16, r4
    214a:	33 fc       	sbrc	r3, 3
    214c:	19 c0       	rjmp	.+50     	; 0x2180 <__stack+0x81>
    214e:	82 2d       	mov	r24, r2
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	88 16       	cp	r8, r24
    2154:	99 06       	cpc	r9, r25
    2156:	a0 f4       	brcc	.+40     	; 0x2180 <__stack+0x81>
    2158:	b6 01       	movw	r22, r12
    215a:	80 e2       	ldi	r24, 0x20	; 32
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	8c de       	rcall	.-744    	; 0x1e78 <fputc>
    2160:	2a 94       	dec	r2
    2162:	f5 cf       	rjmp	.-22     	; 0x214e <__stack+0x4f>
    2164:	f5 01       	movw	r30, r10
    2166:	37 fc       	sbrc	r3, 7
    2168:	85 91       	lpm	r24, Z+
    216a:	37 fe       	sbrs	r3, 7
    216c:	81 91       	ld	r24, Z+
    216e:	5f 01       	movw	r10, r30
    2170:	b6 01       	movw	r22, r12
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	81 de       	rcall	.-766    	; 0x1e78 <fputc>
    2176:	21 10       	cpse	r2, r1
    2178:	2a 94       	dec	r2
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	82 1a       	sub	r8, r18
    217e:	91 08       	sbc	r9, r1
    2180:	81 14       	cp	r8, r1
    2182:	91 04       	cpc	r9, r1
    2184:	79 f7       	brne	.-34     	; 0x2164 <__stack+0x65>
    2186:	e1 c0       	rjmp	.+450    	; 0x234a <__stack+0x24b>
    2188:	84 36       	cpi	r24, 0x64	; 100
    218a:	11 f0       	breq	.+4      	; 0x2190 <__stack+0x91>
    218c:	89 36       	cpi	r24, 0x69	; 105
    218e:	39 f5       	brne	.+78     	; 0x21de <__stack+0xdf>
    2190:	f8 01       	movw	r30, r16
    2192:	37 fe       	sbrs	r3, 7
    2194:	07 c0       	rjmp	.+14     	; 0x21a4 <__stack+0xa5>
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	0c 5f       	subi	r16, 0xFC	; 252
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <__stack+0xb5>
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	07 2e       	mov	r0, r23
    21aa:	00 0c       	add	r0, r0
    21ac:	88 0b       	sbc	r24, r24
    21ae:	99 0b       	sbc	r25, r25
    21b0:	0e 5f       	subi	r16, 0xFE	; 254
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	f3 2d       	mov	r31, r3
    21b6:	ff 76       	andi	r31, 0x6F	; 111
    21b8:	3f 2e       	mov	r3, r31
    21ba:	97 ff       	sbrs	r25, 7
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <__stack+0xd1>
    21be:	90 95       	com	r25
    21c0:	80 95       	com	r24
    21c2:	70 95       	com	r23
    21c4:	61 95       	neg	r22
    21c6:	7f 4f       	sbci	r23, 0xFF	; 255
    21c8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	f0 68       	ori	r31, 0x80	; 128
    21ce:	3f 2e       	mov	r3, r31
    21d0:	2a e0       	ldi	r18, 0x0A	; 10
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	a3 01       	movw	r20, r6
    21d6:	fa d0       	rcall	.+500    	; 0x23cc <__ultoa_invert>
    21d8:	88 2e       	mov	r8, r24
    21da:	86 18       	sub	r8, r6
    21dc:	44 c0       	rjmp	.+136    	; 0x2266 <__stack+0x167>
    21de:	85 37       	cpi	r24, 0x75	; 117
    21e0:	31 f4       	brne	.+12     	; 0x21ee <__stack+0xef>
    21e2:	23 2d       	mov	r18, r3
    21e4:	2f 7e       	andi	r18, 0xEF	; 239
    21e6:	b2 2e       	mov	r11, r18
    21e8:	2a e0       	ldi	r18, 0x0A	; 10
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	25 c0       	rjmp	.+74     	; 0x2238 <__stack+0x139>
    21ee:	93 2d       	mov	r25, r3
    21f0:	99 7f       	andi	r25, 0xF9	; 249
    21f2:	b9 2e       	mov	r11, r25
    21f4:	8f 36       	cpi	r24, 0x6F	; 111
    21f6:	c1 f0       	breq	.+48     	; 0x2228 <__stack+0x129>
    21f8:	18 f4       	brcc	.+6      	; 0x2200 <__stack+0x101>
    21fa:	88 35       	cpi	r24, 0x58	; 88
    21fc:	79 f0       	breq	.+30     	; 0x221c <__stack+0x11d>
    21fe:	ae c0       	rjmp	.+348    	; 0x235c <__stack+0x25d>
    2200:	80 37       	cpi	r24, 0x70	; 112
    2202:	19 f0       	breq	.+6      	; 0x220a <__stack+0x10b>
    2204:	88 37       	cpi	r24, 0x78	; 120
    2206:	21 f0       	breq	.+8      	; 0x2210 <__stack+0x111>
    2208:	a9 c0       	rjmp	.+338    	; 0x235c <__stack+0x25d>
    220a:	e9 2f       	mov	r30, r25
    220c:	e0 61       	ori	r30, 0x10	; 16
    220e:	be 2e       	mov	r11, r30
    2210:	b4 fe       	sbrs	r11, 4
    2212:	0d c0       	rjmp	.+26     	; 0x222e <__stack+0x12f>
    2214:	fb 2d       	mov	r31, r11
    2216:	f4 60       	ori	r31, 0x04	; 4
    2218:	bf 2e       	mov	r11, r31
    221a:	09 c0       	rjmp	.+18     	; 0x222e <__stack+0x12f>
    221c:	34 fe       	sbrs	r3, 4
    221e:	0a c0       	rjmp	.+20     	; 0x2234 <__stack+0x135>
    2220:	29 2f       	mov	r18, r25
    2222:	26 60       	ori	r18, 0x06	; 6
    2224:	b2 2e       	mov	r11, r18
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <__stack+0x135>
    2228:	28 e0       	ldi	r18, 0x08	; 8
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	05 c0       	rjmp	.+10     	; 0x2238 <__stack+0x139>
    222e:	20 e1       	ldi	r18, 0x10	; 16
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <__stack+0x139>
    2234:	20 e1       	ldi	r18, 0x10	; 16
    2236:	32 e0       	ldi	r19, 0x02	; 2
    2238:	f8 01       	movw	r30, r16
    223a:	b7 fe       	sbrs	r11, 7
    223c:	07 c0       	rjmp	.+14     	; 0x224c <__stack+0x14d>
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	0c 5f       	subi	r16, 0xFC	; 252
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	06 c0       	rjmp	.+12     	; 0x2258 <__stack+0x159>
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 5f       	subi	r16, 0xFE	; 254
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	a3 01       	movw	r20, r6
    225a:	b8 d0       	rcall	.+368    	; 0x23cc <__ultoa_invert>
    225c:	88 2e       	mov	r8, r24
    225e:	86 18       	sub	r8, r6
    2260:	fb 2d       	mov	r31, r11
    2262:	ff 77       	andi	r31, 0x7F	; 127
    2264:	3f 2e       	mov	r3, r31
    2266:	36 fe       	sbrs	r3, 6
    2268:	0d c0       	rjmp	.+26     	; 0x2284 <__stack+0x185>
    226a:	23 2d       	mov	r18, r3
    226c:	2e 7f       	andi	r18, 0xFE	; 254
    226e:	a2 2e       	mov	r10, r18
    2270:	89 14       	cp	r8, r9
    2272:	58 f4       	brcc	.+22     	; 0x228a <__stack+0x18b>
    2274:	34 fe       	sbrs	r3, 4
    2276:	0b c0       	rjmp	.+22     	; 0x228e <__stack+0x18f>
    2278:	32 fc       	sbrc	r3, 2
    227a:	09 c0       	rjmp	.+18     	; 0x228e <__stack+0x18f>
    227c:	83 2d       	mov	r24, r3
    227e:	8e 7e       	andi	r24, 0xEE	; 238
    2280:	a8 2e       	mov	r10, r24
    2282:	05 c0       	rjmp	.+10     	; 0x228e <__stack+0x18f>
    2284:	b8 2c       	mov	r11, r8
    2286:	a3 2c       	mov	r10, r3
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <__stack+0x191>
    228a:	b8 2c       	mov	r11, r8
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <__stack+0x191>
    228e:	b9 2c       	mov	r11, r9
    2290:	a4 fe       	sbrs	r10, 4
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <__stack+0x1b3>
    2294:	fe 01       	movw	r30, r28
    2296:	e8 0d       	add	r30, r8
    2298:	f1 1d       	adc	r31, r1
    229a:	80 81       	ld	r24, Z
    229c:	80 33       	cpi	r24, 0x30	; 48
    229e:	21 f4       	brne	.+8      	; 0x22a8 <__stack+0x1a9>
    22a0:	9a 2d       	mov	r25, r10
    22a2:	99 7e       	andi	r25, 0xE9	; 233
    22a4:	a9 2e       	mov	r10, r25
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__stack+0x1bb>
    22a8:	a2 fe       	sbrs	r10, 2
    22aa:	06 c0       	rjmp	.+12     	; 0x22b8 <__stack+0x1b9>
    22ac:	b3 94       	inc	r11
    22ae:	b3 94       	inc	r11
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <__stack+0x1bb>
    22b2:	8a 2d       	mov	r24, r10
    22b4:	86 78       	andi	r24, 0x86	; 134
    22b6:	09 f0       	breq	.+2      	; 0x22ba <__stack+0x1bb>
    22b8:	b3 94       	inc	r11
    22ba:	a3 fc       	sbrc	r10, 3
    22bc:	10 c0       	rjmp	.+32     	; 0x22de <__stack+0x1df>
    22be:	a0 fe       	sbrs	r10, 0
    22c0:	06 c0       	rjmp	.+12     	; 0x22ce <__stack+0x1cf>
    22c2:	b2 14       	cp	r11, r2
    22c4:	80 f4       	brcc	.+32     	; 0x22e6 <__stack+0x1e7>
    22c6:	28 0c       	add	r2, r8
    22c8:	92 2c       	mov	r9, r2
    22ca:	9b 18       	sub	r9, r11
    22cc:	0d c0       	rjmp	.+26     	; 0x22e8 <__stack+0x1e9>
    22ce:	b2 14       	cp	r11, r2
    22d0:	58 f4       	brcc	.+22     	; 0x22e8 <__stack+0x1e9>
    22d2:	b6 01       	movw	r22, r12
    22d4:	80 e2       	ldi	r24, 0x20	; 32
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	cf dd       	rcall	.-1122   	; 0x1e78 <fputc>
    22da:	b3 94       	inc	r11
    22dc:	f8 cf       	rjmp	.-16     	; 0x22ce <__stack+0x1cf>
    22de:	b2 14       	cp	r11, r2
    22e0:	18 f4       	brcc	.+6      	; 0x22e8 <__stack+0x1e9>
    22e2:	2b 18       	sub	r2, r11
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <__stack+0x1eb>
    22e6:	98 2c       	mov	r9, r8
    22e8:	21 2c       	mov	r2, r1
    22ea:	a4 fe       	sbrs	r10, 4
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <__stack+0x20d>
    22ee:	b6 01       	movw	r22, r12
    22f0:	80 e3       	ldi	r24, 0x30	; 48
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	c1 dd       	rcall	.-1150   	; 0x1e78 <fputc>
    22f6:	a2 fe       	sbrs	r10, 2
    22f8:	16 c0       	rjmp	.+44     	; 0x2326 <__stack+0x227>
    22fa:	a1 fc       	sbrc	r10, 1
    22fc:	03 c0       	rjmp	.+6      	; 0x2304 <__stack+0x205>
    22fe:	88 e7       	ldi	r24, 0x78	; 120
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <__stack+0x209>
    2304:	88 e5       	ldi	r24, 0x58	; 88
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	b6 01       	movw	r22, r12
    230a:	0c c0       	rjmp	.+24     	; 0x2324 <__stack+0x225>
    230c:	8a 2d       	mov	r24, r10
    230e:	86 78       	andi	r24, 0x86	; 134
    2310:	51 f0       	breq	.+20     	; 0x2326 <__stack+0x227>
    2312:	a1 fe       	sbrs	r10, 1
    2314:	02 c0       	rjmp	.+4      	; 0x231a <__stack+0x21b>
    2316:	8b e2       	ldi	r24, 0x2B	; 43
    2318:	01 c0       	rjmp	.+2      	; 0x231c <__stack+0x21d>
    231a:	80 e2       	ldi	r24, 0x20	; 32
    231c:	a7 fc       	sbrc	r10, 7
    231e:	8d e2       	ldi	r24, 0x2D	; 45
    2320:	b6 01       	movw	r22, r12
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a9 dd       	rcall	.-1198   	; 0x1e78 <fputc>
    2326:	89 14       	cp	r8, r9
    2328:	30 f4       	brcc	.+12     	; 0x2336 <__stack+0x237>
    232a:	b6 01       	movw	r22, r12
    232c:	80 e3       	ldi	r24, 0x30	; 48
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a3 dd       	rcall	.-1210   	; 0x1e78 <fputc>
    2332:	9a 94       	dec	r9
    2334:	f8 cf       	rjmp	.-16     	; 0x2326 <__stack+0x227>
    2336:	8a 94       	dec	r8
    2338:	f3 01       	movw	r30, r6
    233a:	e8 0d       	add	r30, r8
    233c:	f1 1d       	adc	r31, r1
    233e:	80 81       	ld	r24, Z
    2340:	b6 01       	movw	r22, r12
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	99 dd       	rcall	.-1230   	; 0x1e78 <fputc>
    2346:	81 10       	cpse	r8, r1
    2348:	f6 cf       	rjmp	.-20     	; 0x2336 <__stack+0x237>
    234a:	22 20       	and	r2, r2
    234c:	09 f4       	brne	.+2      	; 0x2350 <__stack+0x251>
    234e:	4e ce       	rjmp	.-868    	; 0x1fec <vfprintf+0x4c>
    2350:	b6 01       	movw	r22, r12
    2352:	80 e2       	ldi	r24, 0x20	; 32
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	90 dd       	rcall	.-1248   	; 0x1e78 <fputc>
    2358:	2a 94       	dec	r2
    235a:	f7 cf       	rjmp	.-18     	; 0x234a <__stack+0x24b>
    235c:	f6 01       	movw	r30, r12
    235e:	86 81       	ldd	r24, Z+6	; 0x06
    2360:	97 81       	ldd	r25, Z+7	; 0x07
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <__stack+0x269>
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	2b 96       	adiw	r28, 0x0b	; 11
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	4f 90       	pop	r4
    2394:	3f 90       	pop	r3
    2396:	2f 90       	pop	r2
    2398:	08 95       	ret

0000239a <__ctype_isfalse>:
    239a:	99 27       	eor	r25, r25
    239c:	88 27       	eor	r24, r24

0000239e <__ctype_istrue>:
    239e:	08 95       	ret

000023a0 <strnlen_P>:
    23a0:	fc 01       	movw	r30, r24
    23a2:	05 90       	lpm	r0, Z+
    23a4:	61 50       	subi	r22, 0x01	; 1
    23a6:	70 40       	sbci	r23, 0x00	; 0
    23a8:	01 10       	cpse	r0, r1
    23aa:	d8 f7       	brcc	.-10     	; 0x23a2 <strnlen_P+0x2>
    23ac:	80 95       	com	r24
    23ae:	90 95       	com	r25
    23b0:	8e 0f       	add	r24, r30
    23b2:	9f 1f       	adc	r25, r31
    23b4:	08 95       	ret

000023b6 <strnlen>:
    23b6:	fc 01       	movw	r30, r24
    23b8:	61 50       	subi	r22, 0x01	; 1
    23ba:	70 40       	sbci	r23, 0x00	; 0
    23bc:	01 90       	ld	r0, Z+
    23be:	01 10       	cpse	r0, r1
    23c0:	d8 f7       	brcc	.-10     	; 0x23b8 <strnlen+0x2>
    23c2:	80 95       	com	r24
    23c4:	90 95       	com	r25
    23c6:	8e 0f       	add	r24, r30
    23c8:	9f 1f       	adc	r25, r31
    23ca:	08 95       	ret

000023cc <__ultoa_invert>:
    23cc:	fa 01       	movw	r30, r20
    23ce:	aa 27       	eor	r26, r26
    23d0:	28 30       	cpi	r18, 0x08	; 8
    23d2:	51 f1       	breq	.+84     	; 0x2428 <__ultoa_invert+0x5c>
    23d4:	20 31       	cpi	r18, 0x10	; 16
    23d6:	81 f1       	breq	.+96     	; 0x2438 <__ultoa_invert+0x6c>
    23d8:	e8 94       	clt
    23da:	6f 93       	push	r22
    23dc:	6e 7f       	andi	r22, 0xFE	; 254
    23de:	6e 5f       	subi	r22, 0xFE	; 254
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	8f 4f       	sbci	r24, 0xFF	; 255
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	af 4f       	sbci	r26, 0xFF	; 255
    23e8:	b1 e0       	ldi	r27, 0x01	; 1
    23ea:	3e d0       	rcall	.+124    	; 0x2468 <__ultoa_invert+0x9c>
    23ec:	b4 e0       	ldi	r27, 0x04	; 4
    23ee:	3c d0       	rcall	.+120    	; 0x2468 <__ultoa_invert+0x9c>
    23f0:	67 0f       	add	r22, r23
    23f2:	78 1f       	adc	r23, r24
    23f4:	89 1f       	adc	r24, r25
    23f6:	9a 1f       	adc	r25, r26
    23f8:	a1 1d       	adc	r26, r1
    23fa:	68 0f       	add	r22, r24
    23fc:	79 1f       	adc	r23, r25
    23fe:	8a 1f       	adc	r24, r26
    2400:	91 1d       	adc	r25, r1
    2402:	a1 1d       	adc	r26, r1
    2404:	6a 0f       	add	r22, r26
    2406:	71 1d       	adc	r23, r1
    2408:	81 1d       	adc	r24, r1
    240a:	91 1d       	adc	r25, r1
    240c:	a1 1d       	adc	r26, r1
    240e:	20 d0       	rcall	.+64     	; 0x2450 <__ultoa_invert+0x84>
    2410:	09 f4       	brne	.+2      	; 0x2414 <__ultoa_invert+0x48>
    2412:	68 94       	set
    2414:	3f 91       	pop	r19
    2416:	2a e0       	ldi	r18, 0x0A	; 10
    2418:	26 9f       	mul	r18, r22
    241a:	11 24       	eor	r1, r1
    241c:	30 19       	sub	r19, r0
    241e:	30 5d       	subi	r19, 0xD0	; 208
    2420:	31 93       	st	Z+, r19
    2422:	de f6       	brtc	.-74     	; 0x23da <__ultoa_invert+0xe>
    2424:	cf 01       	movw	r24, r30
    2426:	08 95       	ret
    2428:	46 2f       	mov	r20, r22
    242a:	47 70       	andi	r20, 0x07	; 7
    242c:	40 5d       	subi	r20, 0xD0	; 208
    242e:	41 93       	st	Z+, r20
    2430:	b3 e0       	ldi	r27, 0x03	; 3
    2432:	0f d0       	rcall	.+30     	; 0x2452 <__ultoa_invert+0x86>
    2434:	c9 f7       	brne	.-14     	; 0x2428 <__ultoa_invert+0x5c>
    2436:	f6 cf       	rjmp	.-20     	; 0x2424 <__ultoa_invert+0x58>
    2438:	46 2f       	mov	r20, r22
    243a:	4f 70       	andi	r20, 0x0F	; 15
    243c:	40 5d       	subi	r20, 0xD0	; 208
    243e:	4a 33       	cpi	r20, 0x3A	; 58
    2440:	18 f0       	brcs	.+6      	; 0x2448 <__ultoa_invert+0x7c>
    2442:	49 5d       	subi	r20, 0xD9	; 217
    2444:	31 fd       	sbrc	r19, 1
    2446:	40 52       	subi	r20, 0x20	; 32
    2448:	41 93       	st	Z+, r20
    244a:	02 d0       	rcall	.+4      	; 0x2450 <__ultoa_invert+0x84>
    244c:	a9 f7       	brne	.-22     	; 0x2438 <__ultoa_invert+0x6c>
    244e:	ea cf       	rjmp	.-44     	; 0x2424 <__ultoa_invert+0x58>
    2450:	b4 e0       	ldi	r27, 0x04	; 4
    2452:	a6 95       	lsr	r26
    2454:	97 95       	ror	r25
    2456:	87 95       	ror	r24
    2458:	77 95       	ror	r23
    245a:	67 95       	ror	r22
    245c:	ba 95       	dec	r27
    245e:	c9 f7       	brne	.-14     	; 0x2452 <__ultoa_invert+0x86>
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	61 05       	cpc	r22, r1
    2464:	71 05       	cpc	r23, r1
    2466:	08 95       	ret
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	0a 2e       	mov	r0, r26
    246e:	06 94       	lsr	r0
    2470:	57 95       	ror	r21
    2472:	47 95       	ror	r20
    2474:	37 95       	ror	r19
    2476:	27 95       	ror	r18
    2478:	ba 95       	dec	r27
    247a:	c9 f7       	brne	.-14     	; 0x246e <__ultoa_invert+0xa2>
    247c:	62 0f       	add	r22, r18
    247e:	73 1f       	adc	r23, r19
    2480:	84 1f       	adc	r24, r20
    2482:	95 1f       	adc	r25, r21
    2484:	a0 1d       	adc	r26, r0
    2486:	08 95       	ret

00002488 <_exit>:
    2488:	f8 94       	cli

0000248a <__stop_program>:
    248a:	ff cf       	rjmp	.-2      	; 0x248a <__stop_program>
