   1               		.file	"ff.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.move_window,"ax",@progbits
  13               	move_window:
  14               	.LFB209:
  15               		.file 1 "Lib/FATFs/ff.c"
   1:Lib/FATFs/ff.c **** /*----------------------------------------------------------------------------/
   2:Lib/FATFs/ff.c **** /  FatFs - FAT file system module  R0.08b                 (C)ChaN, 2011
   3:Lib/FATFs/ff.c **** /-----------------------------------------------------------------------------/
   4:Lib/FATFs/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:Lib/FATFs/ff.c **** / This is a free software that opened for education, research and commercial
   6:Lib/FATFs/ff.c **** / developments under license policy of following terms.
   7:Lib/FATFs/ff.c **** /
   8:Lib/FATFs/ff.c **** /  Copyright (C) 2011, ChaN, all right reserved.
   9:Lib/FATFs/ff.c **** /
  10:Lib/FATFs/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:Lib/FATFs/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:Lib/FATFs/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:Lib/FATFs/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:Lib/FATFs/ff.c **** /
  15:Lib/FATFs/ff.c **** /-----------------------------------------------------------------------------/
  16:Lib/FATFs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:Lib/FATFs/ff.c **** /
  18:Lib/FATFs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:Lib/FATFs/ff.c **** /
  20:Lib/FATFs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:Lib/FATFs/ff.c **** /                   Removed unbuffered mode.
  22:Lib/FATFs/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:Lib/FATFs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:Lib/FATFs/ff.c **** /
  25:Lib/FATFs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:Lib/FATFs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:Lib/FATFs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:Lib/FATFs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:Lib/FATFs/ff.c **** /
  30:Lib/FATFs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:Lib/FATFs/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:Lib/FATFs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:Lib/FATFs/ff.c **** /                   Added f_mkfs().
  34:Lib/FATFs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:Lib/FATFs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:Lib/FATFs/ff.c **** /                   Added minimization level 3.
  37:Lib/FATFs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:Lib/FATFs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:Lib/FATFs/ff.c **** /                   Added FSInfo support.
  40:Lib/FATFs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:Lib/FATFs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:Lib/FATFs/ff.c **** /
  43:Lib/FATFs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:Lib/FATFs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:Lib/FATFs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:Lib/FATFs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:Lib/FATFs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:Lib/FATFs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:Lib/FATFs/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:Lib/FATFs/ff.c **** /
  51:Lib/FATFs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:Lib/FATFs/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:Lib/FATFs/ff.c **** /
  54:Lib/FATFs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:Lib/FATFs/ff.c **** /                   Added long file name feature.
  56:Lib/FATFs/ff.c **** /                   Added multiple code page feature.
  57:Lib/FATFs/ff.c **** /                   Added re-entrancy for multitask operation.
  58:Lib/FATFs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:Lib/FATFs/ff.c **** /                   Added rewind option to f_readdir().
  60:Lib/FATFs/ff.c **** /                   Changed result code of critical errors.
  61:Lib/FATFs/ff.c **** /                   Renamed string functions to avoid name collision.
  62:Lib/FATFs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:Lib/FATFs/ff.c **** /                   Added multiple sector size feature.
  64:Lib/FATFs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:Lib/FATFs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:Lib/FATFs/ff.c **** /                   Added relative path feature.
  67:Lib/FATFs/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:Lib/FATFs/ff.c **** /                   Added proper case conversion to extended char.
  69:Lib/FATFs/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:Lib/FATFs/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:Lib/FATFs/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  72:Lib/FATFs/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:Lib/FATFs/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:Lib/FATFs/ff.c **** /
  75:Lib/FATFs/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:Lib/FATFs/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:Lib/FATFs/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:Lib/FATFs/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:Lib/FATFs/ff.c **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:Lib/FATFs/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:Lib/FATFs/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:Lib/FATFs/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:Lib/FATFs/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:Lib/FATFs/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:Lib/FATFs/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:Lib/FATFs/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:Lib/FATFs/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  88:Lib/FATFs/ff.c **** /                   Extended format syntax of f_printf function.
  89:Lib/FATFs/ff.c **** /                   Ignores duplicated directory separators in given path names.
  90:Lib/FATFs/ff.c **** /---------------------------------------------------------------------------*/
  91:Lib/FATFs/ff.c **** 
  92:Lib/FATFs/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  93:Lib/FATFs/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  94:Lib/FATFs/ff.c **** 
  95:Lib/FATFs/ff.c **** 
  96:Lib/FATFs/ff.c **** /*--------------------------------------------------------------------------
  97:Lib/FATFs/ff.c **** 
  98:Lib/FATFs/ff.c ****    Module Private Definitions
  99:Lib/FATFs/ff.c **** 
 100:Lib/FATFs/ff.c **** ---------------------------------------------------------------------------*/
 101:Lib/FATFs/ff.c **** 
 102:Lib/FATFs/ff.c **** #if _FATFS != 8237
 103:Lib/FATFs/ff.c **** #error Wrong include file (ff.h).
 104:Lib/FATFs/ff.c **** #endif
 105:Lib/FATFs/ff.c **** 
 106:Lib/FATFs/ff.c **** 
 107:Lib/FATFs/ff.c **** /* Definitions on sector size */
 108:Lib/FATFs/ff.c **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 109:Lib/FATFs/ff.c **** #error Wrong sector size.
 110:Lib/FATFs/ff.c **** #endif
 111:Lib/FATFs/ff.c **** #if _MAX_SS != 512
 112:Lib/FATFs/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Multiple sector size */
 113:Lib/FATFs/ff.c **** #else
 114:Lib/FATFs/ff.c **** #define	SS(fs)	512U			/* Fixed sector size */
 115:Lib/FATFs/ff.c **** #endif
 116:Lib/FATFs/ff.c **** 
 117:Lib/FATFs/ff.c **** 
 118:Lib/FATFs/ff.c **** /* Reentrancy related */
 119:Lib/FATFs/ff.c **** #if _FS_REENTRANT
 120:Lib/FATFs/ff.c **** #if _USE_LFN == 1
 121:Lib/FATFs/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
 122:Lib/FATFs/ff.c **** #endif
 123:Lib/FATFs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 124:Lib/FATFs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 125:Lib/FATFs/ff.c **** #else
 126:Lib/FATFs/ff.c **** #define	ENTER_FF(fs)
 127:Lib/FATFs/ff.c **** #define LEAVE_FF(fs, res)	return res
 128:Lib/FATFs/ff.c **** #endif
 129:Lib/FATFs/ff.c **** 
 130:Lib/FATFs/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 131:Lib/FATFs/ff.c **** 
 132:Lib/FATFs/ff.c **** 
 133:Lib/FATFs/ff.c **** /* File shareing feature */
 134:Lib/FATFs/ff.c **** #if _FS_SHARE
 135:Lib/FATFs/ff.c **** #if _FS_READONLY
 136:Lib/FATFs/ff.c **** #error _FS_SHARE must be 0 on read-only cfg.
 137:Lib/FATFs/ff.c **** #endif
 138:Lib/FATFs/ff.c **** typedef struct {
 139:Lib/FATFs/ff.c **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 140:Lib/FATFs/ff.c **** 	DWORD clu;				/* File ID 2, directory */
 141:Lib/FATFs/ff.c **** 	WORD idx;				/* File ID 3, directory index */
 142:Lib/FATFs/ff.c **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 143:Lib/FATFs/ff.c **** } FILESEM;
 144:Lib/FATFs/ff.c **** #endif
 145:Lib/FATFs/ff.c **** 
 146:Lib/FATFs/ff.c **** 
 147:Lib/FATFs/ff.c **** /* Misc definitions */
 148:Lib/FATFs/ff.c **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
 149:Lib/FATFs/ff.c **** #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16)
 150:Lib/FATFs/ff.c **** 
 151:Lib/FATFs/ff.c **** 
 152:Lib/FATFs/ff.c **** /* DBCS code ranges and SBCS extend char conversion table */
 153:Lib/FATFs/ff.c **** 
 154:Lib/FATFs/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 155:Lib/FATFs/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 156:Lib/FATFs/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 157:Lib/FATFs/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 158:Lib/FATFs/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 159:Lib/FATFs/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 160:Lib/FATFs/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 161:Lib/FATFs/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 162:Lib/FATFs/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 163:Lib/FATFs/ff.c **** 
 164:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 165:Lib/FATFs/ff.c **** #define _DF1S	0x81
 166:Lib/FATFs/ff.c **** #define _DF1E	0xFE
 167:Lib/FATFs/ff.c **** #define _DS1S	0x40
 168:Lib/FATFs/ff.c **** #define _DS1E	0x7E
 169:Lib/FATFs/ff.c **** #define _DS2S	0x80
 170:Lib/FATFs/ff.c **** #define _DS2E	0xFE
 171:Lib/FATFs/ff.c **** 
 172:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 173:Lib/FATFs/ff.c **** #define _DF1S	0x81
 174:Lib/FATFs/ff.c **** #define _DF1E	0xFE
 175:Lib/FATFs/ff.c **** #define _DS1S	0x41
 176:Lib/FATFs/ff.c **** #define _DS1E	0x5A
 177:Lib/FATFs/ff.c **** #define _DS2S	0x61
 178:Lib/FATFs/ff.c **** #define _DS2E	0x7A
 179:Lib/FATFs/ff.c **** #define _DS3S	0x81
 180:Lib/FATFs/ff.c **** #define _DS3E	0xFE
 181:Lib/FATFs/ff.c **** 
 182:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 183:Lib/FATFs/ff.c **** #define _DF1S	0x81
 184:Lib/FATFs/ff.c **** #define _DF1E	0xFE
 185:Lib/FATFs/ff.c **** #define _DS1S	0x40
 186:Lib/FATFs/ff.c **** #define _DS1E	0x7E
 187:Lib/FATFs/ff.c **** #define _DS2S	0xA1
 188:Lib/FATFs/ff.c **** #define _DS2E	0xFE
 189:Lib/FATFs/ff.c **** 
 190:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 191:Lib/FATFs/ff.c **** #define _DF1S	0
 192:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 193:Lib/FATFs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 194:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 195:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 196:Lib/FATFs/ff.c **** 
 197:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 198:Lib/FATFs/ff.c **** #define _DF1S	0
 199:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 200:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 201:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 202:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 203:Lib/FATFs/ff.c **** 
 204:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 205:Lib/FATFs/ff.c **** #define _DF1S	0
 206:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 207:Lib/FATFs/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 208:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 209:Lib/FATFs/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 210:Lib/FATFs/ff.c **** 
 211:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 212:Lib/FATFs/ff.c **** #define _DF1S	0
 213:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 214:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 215:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 216:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 217:Lib/FATFs/ff.c **** 
 218:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 219:Lib/FATFs/ff.c **** #define _DF1S	0
 220:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 221:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 222:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 223:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 224:Lib/FATFs/ff.c **** 
 225:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 226:Lib/FATFs/ff.c **** #define _DF1S	0
 227:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 228:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 229:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 230:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 231:Lib/FATFs/ff.c **** 
 232:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 233:Lib/FATFs/ff.c **** #define _DF1S	0
 234:Lib/FATFs/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 235:Lib/FATFs/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 236:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 237:Lib/FATFs/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 238:Lib/FATFs/ff.c **** 
 239:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 240:Lib/FATFs/ff.c **** #define _DF1S	0
 241:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 242:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 243:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 244:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 245:Lib/FATFs/ff.c **** 
 246:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 247:Lib/FATFs/ff.c **** #define _DF1S	0
 248:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 249:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 250:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 251:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 252:Lib/FATFs/ff.c **** 
 253:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 254:Lib/FATFs/ff.c **** #define _DF1S	0
 255:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 256:Lib/FATFs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 257:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 258:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 259:Lib/FATFs/ff.c **** 
 260:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 261:Lib/FATFs/ff.c **** #define _DF1S	0
 262:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 263:Lib/FATFs/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 264:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 265:Lib/FATFs/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 266:Lib/FATFs/ff.c **** 
 267:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 268:Lib/FATFs/ff.c **** #define _DF1S	0
 269:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 270:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 271:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 272:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 273:Lib/FATFs/ff.c **** 
 274:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 275:Lib/FATFs/ff.c **** #define _DF1S	0
 276:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 277:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 278:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 279:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 280:Lib/FATFs/ff.c **** 
 281:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 282:Lib/FATFs/ff.c **** #define _DF1S	0
 283:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 284:Lib/FATFs/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 285:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 286:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 287:Lib/FATFs/ff.c **** 
 288:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 289:Lib/FATFs/ff.c **** #define _DF1S	0
 290:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 291:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 292:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 293:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 294:Lib/FATFs/ff.c **** 
 295:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 296:Lib/FATFs/ff.c **** #define _DF1S	0
 297:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 298:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 299:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 300:Lib/FATFs/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 301:Lib/FATFs/ff.c **** 
 302:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 303:Lib/FATFs/ff.c **** #define _DF1S	0
 304:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 305:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 306:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 307:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 308:Lib/FATFs/ff.c **** 
 309:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 310:Lib/FATFs/ff.c **** #define _DF1S	0
 311:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 312:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 313:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 314:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 315:Lib/FATFs/ff.c **** 
 316:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 317:Lib/FATFs/ff.c **** #define _DF1S	0
 318:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 319:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 320:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 321:Lib/FATFs/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 322:Lib/FATFs/ff.c **** 
 323:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 324:Lib/FATFs/ff.c **** #define _DF1S	0
 325:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 326:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 327:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 328:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 329:Lib/FATFs/ff.c **** 
 330:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 331:Lib/FATFs/ff.c **** #define _DF1S	0
 332:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 333:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 334:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 335:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 336:Lib/FATFs/ff.c **** 
 337:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 338:Lib/FATFs/ff.c **** #if _USE_LFN
 339:Lib/FATFs/ff.c **** #error Cannot use LFN feature without valid code page.
 340:Lib/FATFs/ff.c **** #endif
 341:Lib/FATFs/ff.c **** #define _DF1S	0
 342:Lib/FATFs/ff.c **** 
 343:Lib/FATFs/ff.c **** #else
 344:Lib/FATFs/ff.c **** #error Unknown code page
 345:Lib/FATFs/ff.c **** 
 346:Lib/FATFs/ff.c **** #endif
 347:Lib/FATFs/ff.c **** 
 348:Lib/FATFs/ff.c **** 
 349:Lib/FATFs/ff.c **** /* Character code support macros */
 350:Lib/FATFs/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 351:Lib/FATFs/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 352:Lib/FATFs/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 353:Lib/FATFs/ff.c **** 
 354:Lib/FATFs/ff.c **** #if _DF1S		/* Code page is DBCS */
 355:Lib/FATFs/ff.c **** 
 356:Lib/FATFs/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 357:Lib/FATFs/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 358:Lib/FATFs/ff.c **** #else			/* One 1st byte area */
 359:Lib/FATFs/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 360:Lib/FATFs/ff.c **** #endif
 361:Lib/FATFs/ff.c **** 
 362:Lib/FATFs/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 363:Lib/FATFs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 364:Lib/FATFs/ff.c **** #else			/* Two 2nd byte areas */
 365:Lib/FATFs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 366:Lib/FATFs/ff.c **** #endif
 367:Lib/FATFs/ff.c **** 
 368:Lib/FATFs/ff.c **** #else			/* Code page is SBCS */
 369:Lib/FATFs/ff.c **** 
 370:Lib/FATFs/ff.c **** #define IsDBCS1(c)	0
 371:Lib/FATFs/ff.c **** #define IsDBCS2(c)	0
 372:Lib/FATFs/ff.c **** 
 373:Lib/FATFs/ff.c **** #endif /* _DF1S */
 374:Lib/FATFs/ff.c **** 
 375:Lib/FATFs/ff.c **** 
 376:Lib/FATFs/ff.c **** /* Name status flags */
 377:Lib/FATFs/ff.c **** #define NS			11		/* Index of name status byte in fn[] */
 378:Lib/FATFs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 379:Lib/FATFs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 380:Lib/FATFs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 381:Lib/FATFs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 382:Lib/FATFs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 383:Lib/FATFs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 384:Lib/FATFs/ff.c **** 
 385:Lib/FATFs/ff.c **** 
 386:Lib/FATFs/ff.c **** /* FAT sub-type boundaries */
 387:Lib/FATFs/ff.c **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 388:Lib/FATFs/ff.c **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 389:Lib/FATFs/ff.c **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 390:Lib/FATFs/ff.c **** 
 391:Lib/FATFs/ff.c **** 
 392:Lib/FATFs/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 393:Lib/FATFs/ff.c **** / structure member because the structure is not binary compatible between
 394:Lib/FATFs/ff.c **** / different platforms */
 395:Lib/FATFs/ff.c **** 
 396:Lib/FATFs/ff.c **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 397:Lib/FATFs/ff.c **** #define BS_OEMName			3	/* OEM name (8) */
 398:Lib/FATFs/ff.c **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 399:Lib/FATFs/ff.c **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 400:Lib/FATFs/ff.c **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 401:Lib/FATFs/ff.c **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 402:Lib/FATFs/ff.c **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 403:Lib/FATFs/ff.c **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 404:Lib/FATFs/ff.c **** #define BPB_Media			21	/* Media descriptor (1) */
 405:Lib/FATFs/ff.c **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 406:Lib/FATFs/ff.c **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 407:Lib/FATFs/ff.c **** #define BPB_NumHeads		26	/* Number of heads (2) */
 408:Lib/FATFs/ff.c **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 409:Lib/FATFs/ff.c **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 410:Lib/FATFs/ff.c **** #define BS_DrvNum			36	/* Physical drive number (2) */
 411:Lib/FATFs/ff.c **** #define BS_BootSig			38	/* Extended boot signature (1) */
 412:Lib/FATFs/ff.c **** #define BS_VolID			39	/* Volume serial number (4) */
 413:Lib/FATFs/ff.c **** #define BS_VolLab			43	/* Volume label (8) */
 414:Lib/FATFs/ff.c **** #define BS_FilSysType		54	/* File system type (1) */
 415:Lib/FATFs/ff.c **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 416:Lib/FATFs/ff.c **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 417:Lib/FATFs/ff.c **** #define BPB_FSVer			42	/* File system version (2) */
 418:Lib/FATFs/ff.c **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 419:Lib/FATFs/ff.c **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 420:Lib/FATFs/ff.c **** #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
 421:Lib/FATFs/ff.c **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 422:Lib/FATFs/ff.c **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 423:Lib/FATFs/ff.c **** #define BS_VolID32			67	/* Volume serial number (4) */
 424:Lib/FATFs/ff.c **** #define BS_VolLab32			71	/* Volume label (8) */
 425:Lib/FATFs/ff.c **** #define BS_FilSysType32		82	/* File system type (1) */
 426:Lib/FATFs/ff.c **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 427:Lib/FATFs/ff.c **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 428:Lib/FATFs/ff.c **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 429:Lib/FATFs/ff.c **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
 430:Lib/FATFs/ff.c **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 431:Lib/FATFs/ff.c **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 432:Lib/FATFs/ff.c **** #define BS_55AA				510	/* Boot sector signature (2) */
 433:Lib/FATFs/ff.c **** 
 434:Lib/FATFs/ff.c **** #define	DIR_Name			0	/* Short file name (11) */
 435:Lib/FATFs/ff.c **** #define	DIR_Attr			11	/* Attribute (1) */
 436:Lib/FATFs/ff.c **** #define	DIR_NTres			12	/* NT flag (1) */
 437:Lib/FATFs/ff.c **** #define	DIR_CrtTime			14	/* Created time (2) */
 438:Lib/FATFs/ff.c **** #define	DIR_CrtDate			16	/* Created date (2) */
 439:Lib/FATFs/ff.c **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 440:Lib/FATFs/ff.c **** #define	DIR_WrtTime			22	/* Modified time (2) */
 441:Lib/FATFs/ff.c **** #define	DIR_WrtDate			24	/* Modified date (2) */
 442:Lib/FATFs/ff.c **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 443:Lib/FATFs/ff.c **** #define	DIR_FileSize		28	/* File size (4) */
 444:Lib/FATFs/ff.c **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 445:Lib/FATFs/ff.c **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 446:Lib/FATFs/ff.c **** #define	LDIR_Type			12	/* LFN type (1) */
 447:Lib/FATFs/ff.c **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 448:Lib/FATFs/ff.c **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 449:Lib/FATFs/ff.c **** #define	SZ_DIR				32		/* Size of a directory entry */
 450:Lib/FATFs/ff.c **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 451:Lib/FATFs/ff.c **** #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
 452:Lib/FATFs/ff.c **** #define	NDDE				0x05	/* Replacement of a character collides with DDE */
 453:Lib/FATFs/ff.c **** 
 454:Lib/FATFs/ff.c **** 
 455:Lib/FATFs/ff.c **** /*------------------------------------------------------------*/
 456:Lib/FATFs/ff.c **** /* Work area                                                  */
 457:Lib/FATFs/ff.c **** 
 458:Lib/FATFs/ff.c **** #if _VOLUMES
 459:Lib/FATFs/ff.c **** static
 460:Lib/FATFs/ff.c **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 461:Lib/FATFs/ff.c **** #else
 462:Lib/FATFs/ff.c **** #error Number of drives must not be 0.
 463:Lib/FATFs/ff.c **** #endif
 464:Lib/FATFs/ff.c **** 
 465:Lib/FATFs/ff.c **** static
 466:Lib/FATFs/ff.c **** WORD Fsid;				/* File system mount ID */
 467:Lib/FATFs/ff.c **** 
 468:Lib/FATFs/ff.c **** #if _FS_RPATH
 469:Lib/FATFs/ff.c **** static
 470:Lib/FATFs/ff.c **** BYTE CurrVol;			/* Current drive */
 471:Lib/FATFs/ff.c **** #endif
 472:Lib/FATFs/ff.c **** 
 473:Lib/FATFs/ff.c **** #if _FS_SHARE
 474:Lib/FATFs/ff.c **** static
 475:Lib/FATFs/ff.c **** FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
 476:Lib/FATFs/ff.c **** #endif
 477:Lib/FATFs/ff.c **** 
 478:Lib/FATFs/ff.c **** #if _USE_LFN == 0			/* No LFN */
 479:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 480:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 481:Lib/FATFs/ff.c **** #define	FREE_BUF()
 482:Lib/FATFs/ff.c **** 
 483:Lib/FATFs/ff.c **** #elif _USE_LFN == 1			/* LFN with static LFN working buffer */
 484:Lib/FATFs/ff.c **** static WCHAR LfnBuf[_MAX_LFN+1];
 485:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 486:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 487:Lib/FATFs/ff.c **** #define	FREE_BUF()
 488:Lib/FATFs/ff.c **** 
 489:Lib/FATFs/ff.c **** #elif _USE_LFN == 2 		/* LFN with dynamic LFN working buffer on the stack */
 490:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 491:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 492:Lib/FATFs/ff.c **** #define	FREE_BUF()
 493:Lib/FATFs/ff.c **** 
 494:Lib/FATFs/ff.c **** #elif _USE_LFN == 3 		/* LFN with dynamic LFN working buffer on the heap */
 495:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 496:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 497:Lib/FATFs/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 498:Lib/FATFs/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 499:Lib/FATFs/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 500:Lib/FATFs/ff.c **** 
 501:Lib/FATFs/ff.c **** #else
 502:Lib/FATFs/ff.c **** #error Wrong LFN configuration.
 503:Lib/FATFs/ff.c **** #endif
 504:Lib/FATFs/ff.c **** 
 505:Lib/FATFs/ff.c **** 
 506:Lib/FATFs/ff.c **** 
 507:Lib/FATFs/ff.c **** 
 508:Lib/FATFs/ff.c **** /*--------------------------------------------------------------------------
 509:Lib/FATFs/ff.c **** 
 510:Lib/FATFs/ff.c ****    Module Private Functions
 511:Lib/FATFs/ff.c **** 
 512:Lib/FATFs/ff.c **** ---------------------------------------------------------------------------*/
 513:Lib/FATFs/ff.c **** 
 514:Lib/FATFs/ff.c **** 
 515:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 516:Lib/FATFs/ff.c **** /* String functions                                                      */
 517:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 518:Lib/FATFs/ff.c **** 
 519:Lib/FATFs/ff.c **** /* Copy memory to memory */
 520:Lib/FATFs/ff.c **** static
 521:Lib/FATFs/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 522:Lib/FATFs/ff.c **** 	BYTE *d = (BYTE*)dst;
 523:Lib/FATFs/ff.c **** 	const BYTE *s = (const BYTE*)src;
 524:Lib/FATFs/ff.c **** 
 525:Lib/FATFs/ff.c **** #if _WORD_ACCESS == 1
 526:Lib/FATFs/ff.c **** 	while (cnt >= sizeof(int)) {
 527:Lib/FATFs/ff.c **** 		*(int*)d = *(int*)s;
 528:Lib/FATFs/ff.c **** 		d += sizeof(int); s += sizeof(int);
 529:Lib/FATFs/ff.c **** 		cnt -= sizeof(int);
 530:Lib/FATFs/ff.c **** 	}
 531:Lib/FATFs/ff.c **** #endif
 532:Lib/FATFs/ff.c **** 	while (cnt--)
 533:Lib/FATFs/ff.c **** 		*d++ = *s++;
 534:Lib/FATFs/ff.c **** }
 535:Lib/FATFs/ff.c **** 
 536:Lib/FATFs/ff.c **** /* Fill memory */
 537:Lib/FATFs/ff.c **** static
 538:Lib/FATFs/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 539:Lib/FATFs/ff.c **** 	BYTE *d = (BYTE*)dst;
 540:Lib/FATFs/ff.c **** 
 541:Lib/FATFs/ff.c **** 	while (cnt--)
 542:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 543:Lib/FATFs/ff.c **** }
 544:Lib/FATFs/ff.c **** 
 545:Lib/FATFs/ff.c **** /* Compare memory to memory */
 546:Lib/FATFs/ff.c **** static
 547:Lib/FATFs/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 548:Lib/FATFs/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 549:Lib/FATFs/ff.c **** 	int r = 0;
 550:Lib/FATFs/ff.c **** 
 551:Lib/FATFs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 552:Lib/FATFs/ff.c **** 	return r;
 553:Lib/FATFs/ff.c **** }
 554:Lib/FATFs/ff.c **** 
 555:Lib/FATFs/ff.c **** /* Check if chr is contained in the string */
 556:Lib/FATFs/ff.c **** static
 557:Lib/FATFs/ff.c **** int chk_chr (const char* str, int chr) {
 558:Lib/FATFs/ff.c **** 	while (*str && *str != chr) str++;
 559:Lib/FATFs/ff.c **** 	return *str;
 560:Lib/FATFs/ff.c **** }
 561:Lib/FATFs/ff.c **** 
 562:Lib/FATFs/ff.c **** 
 563:Lib/FATFs/ff.c **** 
 564:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 565:Lib/FATFs/ff.c **** /* Request/Release grant to access the volume                            */
 566:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 567:Lib/FATFs/ff.c **** #if _FS_REENTRANT
 568:Lib/FATFs/ff.c **** 
 569:Lib/FATFs/ff.c **** static
 570:Lib/FATFs/ff.c **** int lock_fs (
 571:Lib/FATFs/ff.c **** 	FATFS *fs		/* File system object */
 572:Lib/FATFs/ff.c **** )
 573:Lib/FATFs/ff.c **** {
 574:Lib/FATFs/ff.c **** 	return ff_req_grant(fs->sobj);
 575:Lib/FATFs/ff.c **** }
 576:Lib/FATFs/ff.c **** 
 577:Lib/FATFs/ff.c **** 
 578:Lib/FATFs/ff.c **** static
 579:Lib/FATFs/ff.c **** void unlock_fs (
 580:Lib/FATFs/ff.c **** 	FATFS *fs,		/* File system object */
 581:Lib/FATFs/ff.c **** 	FRESULT res		/* Result code to be returned */
 582:Lib/FATFs/ff.c **** )
 583:Lib/FATFs/ff.c **** {
 584:Lib/FATFs/ff.c **** 	if (res != FR_NOT_ENABLED &&
 585:Lib/FATFs/ff.c **** 		res != FR_INVALID_DRIVE &&
 586:Lib/FATFs/ff.c **** 		res != FR_INVALID_OBJECT &&
 587:Lib/FATFs/ff.c **** 		res != FR_TIMEOUT) {
 588:Lib/FATFs/ff.c **** 		ff_rel_grant(fs->sobj);
 589:Lib/FATFs/ff.c **** 	}
 590:Lib/FATFs/ff.c **** }
 591:Lib/FATFs/ff.c **** #endif
 592:Lib/FATFs/ff.c **** 
 593:Lib/FATFs/ff.c **** 
 594:Lib/FATFs/ff.c **** 
 595:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 596:Lib/FATFs/ff.c **** /* File shareing control functions                                       */
 597:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 598:Lib/FATFs/ff.c **** #if _FS_SHARE
 599:Lib/FATFs/ff.c **** 
 600:Lib/FATFs/ff.c **** static
 601:Lib/FATFs/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 602:Lib/FATFs/ff.c **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 603:Lib/FATFs/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 604:Lib/FATFs/ff.c **** )
 605:Lib/FATFs/ff.c **** {
 606:Lib/FATFs/ff.c **** 	UINT i, be;
 607:Lib/FATFs/ff.c **** 
 608:Lib/FATFs/ff.c **** 	/* Search file semaphore table */
 609:Lib/FATFs/ff.c **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 610:Lib/FATFs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 611:Lib/FATFs/ff.c **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 612:Lib/FATFs/ff.c **** 				Files[i].clu == dj->sclust &&
 613:Lib/FATFs/ff.c **** 				Files[i].idx == dj->index) break;
 614:Lib/FATFs/ff.c **** 		} else {			/* Blank entry */
 615:Lib/FATFs/ff.c **** 			be++;
 616:Lib/FATFs/ff.c **** 		}
 617:Lib/FATFs/ff.c **** 	}
 618:Lib/FATFs/ff.c **** 	if (i == _FS_SHARE)	/* The file is not opened */
 619:Lib/FATFs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 620:Lib/FATFs/ff.c **** 
 621:Lib/FATFs/ff.c **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 622:Lib/FATFs/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 623:Lib/FATFs/ff.c **** }
 624:Lib/FATFs/ff.c **** 
 625:Lib/FATFs/ff.c **** 
 626:Lib/FATFs/ff.c **** static
 627:Lib/FATFs/ff.c **** int enq_lock (	/* Check if an entry is available for a new file */
 628:Lib/FATFs/ff.c **** 	FATFS* fs	/* File system object */
 629:Lib/FATFs/ff.c **** )
 630:Lib/FATFs/ff.c **** {
 631:Lib/FATFs/ff.c **** 	UINT i;
 632:Lib/FATFs/ff.c **** 
 633:Lib/FATFs/ff.c **** 	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 634:Lib/FATFs/ff.c **** 	return (i == _FS_SHARE) ? 0 : 1;
 635:Lib/FATFs/ff.c **** }
 636:Lib/FATFs/ff.c **** 
 637:Lib/FATFs/ff.c **** 
 638:Lib/FATFs/ff.c **** static
 639:Lib/FATFs/ff.c **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 640:Lib/FATFs/ff.c **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 641:Lib/FATFs/ff.c **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 642:Lib/FATFs/ff.c **** )
 643:Lib/FATFs/ff.c **** {
 644:Lib/FATFs/ff.c **** 	UINT i;
 645:Lib/FATFs/ff.c **** 
 646:Lib/FATFs/ff.c **** 
 647:Lib/FATFs/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 648:Lib/FATFs/ff.c **** 		if (Files[i].fs == dj->fs &&
 649:Lib/FATFs/ff.c **** 			Files[i].clu == dj->sclust &&
 650:Lib/FATFs/ff.c **** 			Files[i].idx == dj->index) break;
 651:Lib/FATFs/ff.c **** 	}
 652:Lib/FATFs/ff.c **** 
 653:Lib/FATFs/ff.c **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 654:Lib/FATFs/ff.c **** 		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 655:Lib/FATFs/ff.c **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 656:Lib/FATFs/ff.c **** 		Files[i].fs = dj->fs;
 657:Lib/FATFs/ff.c **** 		Files[i].clu = dj->sclust;
 658:Lib/FATFs/ff.c **** 		Files[i].idx = dj->index;
 659:Lib/FATFs/ff.c **** 		Files[i].ctr = 0;
 660:Lib/FATFs/ff.c **** 	}
 661:Lib/FATFs/ff.c **** 
 662:Lib/FATFs/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 663:Lib/FATFs/ff.c **** 
 664:Lib/FATFs/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 665:Lib/FATFs/ff.c **** 
 666:Lib/FATFs/ff.c **** 	return i + 1;
 667:Lib/FATFs/ff.c **** }
 668:Lib/FATFs/ff.c **** 
 669:Lib/FATFs/ff.c **** 
 670:Lib/FATFs/ff.c **** static
 671:Lib/FATFs/ff.c **** FRESULT dec_lock (	/* Decrement file open counter */
 672:Lib/FATFs/ff.c **** 	UINT i			/* Semaphore index */
 673:Lib/FATFs/ff.c **** )
 674:Lib/FATFs/ff.c **** {
 675:Lib/FATFs/ff.c **** 	WORD n;
 676:Lib/FATFs/ff.c **** 	FRESULT res;
 677:Lib/FATFs/ff.c **** 
 678:Lib/FATFs/ff.c **** 
 679:Lib/FATFs/ff.c **** 	if (--i < _FS_SHARE) {
 680:Lib/FATFs/ff.c **** 		n = Files[i].ctr;
 681:Lib/FATFs/ff.c **** 		if (n == 0x100) n = 0;
 682:Lib/FATFs/ff.c **** 		if (n) n--;
 683:Lib/FATFs/ff.c **** 		Files[i].ctr = n;
 684:Lib/FATFs/ff.c **** 		if (!n) Files[i].fs = 0;
 685:Lib/FATFs/ff.c **** 		res = FR_OK;
 686:Lib/FATFs/ff.c **** 	} else {
 687:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 688:Lib/FATFs/ff.c **** 	}
 689:Lib/FATFs/ff.c **** 	return res;
 690:Lib/FATFs/ff.c **** }
 691:Lib/FATFs/ff.c **** 
 692:Lib/FATFs/ff.c **** 
 693:Lib/FATFs/ff.c **** static
 694:Lib/FATFs/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 695:Lib/FATFs/ff.c **** 	FATFS *fs
 696:Lib/FATFs/ff.c **** )
 697:Lib/FATFs/ff.c **** {
 698:Lib/FATFs/ff.c **** 	UINT i;
 699:Lib/FATFs/ff.c **** 
 700:Lib/FATFs/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {
 701:Lib/FATFs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 702:Lib/FATFs/ff.c **** 	}
 703:Lib/FATFs/ff.c **** }
 704:Lib/FATFs/ff.c **** #endif
 705:Lib/FATFs/ff.c **** 
 706:Lib/FATFs/ff.c **** 
 707:Lib/FATFs/ff.c **** 
 708:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 709:Lib/FATFs/ff.c **** /* Change window offset                                                  */
 710:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 711:Lib/FATFs/ff.c **** 
 712:Lib/FATFs/ff.c **** static
 713:Lib/FATFs/ff.c **** FRESULT move_window (
 714:Lib/FATFs/ff.c **** 	FATFS *fs,		/* File system object */
 715:Lib/FATFs/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 716:Lib/FATFs/ff.c **** )					/* Move to zero only writes back dirty window */
 717:Lib/FATFs/ff.c **** {
  16               		.loc 1 717 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a CF93      		push r28
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 28, -7
  43 000c DF93      		push r29
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 29, -8
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 7 */
  50               	.L__stack_usage = 7
  51               	.LVL1:
 718:Lib/FATFs/ff.c **** 	DWORD wsect;
 719:Lib/FATFs/ff.c **** 
 720:Lib/FATFs/ff.c **** 
 721:Lib/FATFs/ff.c **** 	wsect = fs->winsect;
 722:Lib/FATFs/ff.c **** 	if (wsect != sector) {	/* Changed current window */
  52               		.loc 1 722 0
  53 000e FC01      		movw r30,r24
  54 0010 C68C      		ldd r12,Z+30
  55 0012 D78C      		ldd r13,Z+31
  56 0014 E0A0      		ldd r14,Z+32
  57 0016 F1A0      		ldd r15,Z+33
  58 0018 C416      		cp r12,r20
  59 001a D506      		cpc r13,r21
  60 001c E606      		cpc r14,r22
  61 001e F706      		cpc r15,r23
  62 0020 01F0      		breq .L4
 723:Lib/FATFs/ff.c **** #if !_FS_READONLY
 724:Lib/FATFs/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 725:Lib/FATFs/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 726:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
 727:Lib/FATFs/ff.c **** 			fs->wflag = 0;
 728:Lib/FATFs/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 729:Lib/FATFs/ff.c **** 				BYTE nf;
 730:Lib/FATFs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 731:Lib/FATFs/ff.c **** 					wsect += fs->fsize;
 732:Lib/FATFs/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 733:Lib/FATFs/ff.c **** 				}
 734:Lib/FATFs/ff.c **** 			}
 735:Lib/FATFs/ff.c **** 		}
 736:Lib/FATFs/ff.c **** #endif
 737:Lib/FATFs/ff.c **** 		if (sector) {
  63               		.loc 1 737 0
  64 0022 4115      		cp r20,__zero_reg__
  65 0024 5105      		cpc r21,__zero_reg__
  66 0026 6105      		cpc r22,__zero_reg__
  67 0028 7105      		cpc r23,__zero_reg__
  68 002a 01F0      		breq .L4
  69 002c 6A01      		movw r12,r20
  70 002e 7B01      		movw r14,r22
  71 0030 EC01      		movw r28,r24
 738:Lib/FATFs/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  72               		.loc 1 738 0
  73 0032 BC01      		movw r22,r24
  74 0034 6E5D      		subi r22,-34
  75 0036 7F4F      		sbci r23,-1
  76 0038 01E0      		ldi r16,lo8(1)
  77 003a A701      		movw r20,r14
  78 003c 9601      		movw r18,r12
  79 003e 8181      		ldd r24,Z+1
  80               	.LVL2:
  81 0040 0E94 0000 		call disk_read
  82               	.LVL3:
  83 0044 8111      		cpse r24,__zero_reg__
  84 0046 00C0      		rjmp .L5
 739:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
 740:Lib/FATFs/ff.c **** 			fs->winsect = sector;
  85               		.loc 1 740 0
  86 0048 CE8E      		std Y+30,r12
  87 004a DF8E      		std Y+31,r13
  88 004c E8A2      		std Y+32,r14
  89 004e F9A2      		std Y+33,r15
  90 0050 00C0      		rjmp .L2
  91               	.LVL4:
  92               	.L4:
 741:Lib/FATFs/ff.c **** 		}
 742:Lib/FATFs/ff.c **** 	}
 743:Lib/FATFs/ff.c **** 
 744:Lib/FATFs/ff.c **** 	return FR_OK;
  93               		.loc 1 744 0
  94 0052 80E0      		ldi r24,0
  95               	.LVL5:
  96 0054 00C0      		rjmp .L2
  97               	.LVL6:
  98               	.L5:
 739:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
  99               		.loc 1 739 0
 100 0056 81E0      		ldi r24,lo8(1)
 101               	.LVL7:
 102               	.L2:
 103               	/* epilogue start */
 745:Lib/FATFs/ff.c **** }
 104               		.loc 1 745 0
 105 0058 DF91      		pop r29
 106 005a CF91      		pop r28
 107 005c 0F91      		pop r16
 108 005e FF90      		pop r15
 109 0060 EF90      		pop r14
 110 0062 DF90      		pop r13
 111 0064 CF90      		pop r12
 112 0066 0895      		ret
 113               		.cfi_endproc
 114               	.LFE209:
 116               		.section	.text.check_fs,"ax",@progbits
 118               	check_fs:
 119               	.LFB217:
 746:Lib/FATFs/ff.c **** 
 747:Lib/FATFs/ff.c **** 
 748:Lib/FATFs/ff.c **** 
 749:Lib/FATFs/ff.c **** 
 750:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 751:Lib/FATFs/ff.c **** /* Clean-up cached data                                                  */
 752:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 753:Lib/FATFs/ff.c **** #if !_FS_READONLY
 754:Lib/FATFs/ff.c **** static
 755:Lib/FATFs/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 756:Lib/FATFs/ff.c **** 	FATFS *fs	/* File system object */
 757:Lib/FATFs/ff.c **** )
 758:Lib/FATFs/ff.c **** {
 759:Lib/FATFs/ff.c **** 	FRESULT res;
 760:Lib/FATFs/ff.c **** 
 761:Lib/FATFs/ff.c **** 
 762:Lib/FATFs/ff.c **** 	res = move_window(fs, 0);
 763:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
 764:Lib/FATFs/ff.c **** 		/* Update FSInfo sector if needed */
 765:Lib/FATFs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 766:Lib/FATFs/ff.c **** 			fs->winsect = 0;
 767:Lib/FATFs/ff.c **** 			/* Create FSInfo structure */
 768:Lib/FATFs/ff.c **** 			mem_set(fs->win, 0, 512);
 769:Lib/FATFs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 770:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 771:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 772:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 773:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 774:Lib/FATFs/ff.c **** 			/* Write it into the FSInfo sector */
 775:Lib/FATFs/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 776:Lib/FATFs/ff.c **** 			fs->fsi_flag = 0;
 777:Lib/FATFs/ff.c **** 		}
 778:Lib/FATFs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 779:Lib/FATFs/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 780:Lib/FATFs/ff.c **** 			res = FR_DISK_ERR;
 781:Lib/FATFs/ff.c **** 	}
 782:Lib/FATFs/ff.c **** 
 783:Lib/FATFs/ff.c **** 	return res;
 784:Lib/FATFs/ff.c **** }
 785:Lib/FATFs/ff.c **** #endif
 786:Lib/FATFs/ff.c **** 
 787:Lib/FATFs/ff.c **** 
 788:Lib/FATFs/ff.c **** 
 789:Lib/FATFs/ff.c **** 
 790:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 791:Lib/FATFs/ff.c **** /* Get sector# from cluster#                                             */
 792:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 793:Lib/FATFs/ff.c **** 
 794:Lib/FATFs/ff.c **** 
 795:Lib/FATFs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 796:Lib/FATFs/ff.c **** 	FATFS *fs,		/* File system object */
 797:Lib/FATFs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 798:Lib/FATFs/ff.c **** )
 799:Lib/FATFs/ff.c **** {
 800:Lib/FATFs/ff.c **** 	clst -= 2;
 801:Lib/FATFs/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 802:Lib/FATFs/ff.c **** 	return clst * fs->csize + fs->database;
 803:Lib/FATFs/ff.c **** }
 804:Lib/FATFs/ff.c **** 
 805:Lib/FATFs/ff.c **** 
 806:Lib/FATFs/ff.c **** 
 807:Lib/FATFs/ff.c **** 
 808:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 809:Lib/FATFs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 810:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 811:Lib/FATFs/ff.c **** 
 812:Lib/FATFs/ff.c **** 
 813:Lib/FATFs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 814:Lib/FATFs/ff.c **** 	FATFS *fs,	/* File system object */
 815:Lib/FATFs/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 816:Lib/FATFs/ff.c **** )
 817:Lib/FATFs/ff.c **** {
 818:Lib/FATFs/ff.c **** 	UINT wc, bc;
 819:Lib/FATFs/ff.c **** 	BYTE *p;
 820:Lib/FATFs/ff.c **** 
 821:Lib/FATFs/ff.c **** 
 822:Lib/FATFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 823:Lib/FATFs/ff.c **** 		return 1;
 824:Lib/FATFs/ff.c **** 
 825:Lib/FATFs/ff.c **** 	switch (fs->fs_type) {
 826:Lib/FATFs/ff.c **** 	case FS_FAT12 :
 827:Lib/FATFs/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 828:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 829:Lib/FATFs/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 830:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 831:Lib/FATFs/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 832:Lib/FATFs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 833:Lib/FATFs/ff.c **** 
 834:Lib/FATFs/ff.c **** 	case FS_FAT16 :
 835:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 836:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 837:Lib/FATFs/ff.c **** 		return LD_WORD(p);
 838:Lib/FATFs/ff.c **** 
 839:Lib/FATFs/ff.c **** 	case FS_FAT32 :
 840:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 841:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 842:Lib/FATFs/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 843:Lib/FATFs/ff.c **** 	}
 844:Lib/FATFs/ff.c **** 
 845:Lib/FATFs/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 846:Lib/FATFs/ff.c **** }
 847:Lib/FATFs/ff.c **** 
 848:Lib/FATFs/ff.c **** 
 849:Lib/FATFs/ff.c **** 
 850:Lib/FATFs/ff.c **** 
 851:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 852:Lib/FATFs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 853:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 854:Lib/FATFs/ff.c **** #if !_FS_READONLY
 855:Lib/FATFs/ff.c **** 
 856:Lib/FATFs/ff.c **** FRESULT put_fat (
 857:Lib/FATFs/ff.c **** 	FATFS *fs,	/* File system object */
 858:Lib/FATFs/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 859:Lib/FATFs/ff.c **** 	DWORD val	/* New value to mark the cluster */
 860:Lib/FATFs/ff.c **** )
 861:Lib/FATFs/ff.c **** {
 862:Lib/FATFs/ff.c **** 	UINT bc;
 863:Lib/FATFs/ff.c **** 	BYTE *p;
 864:Lib/FATFs/ff.c **** 	FRESULT res;
 865:Lib/FATFs/ff.c **** 
 866:Lib/FATFs/ff.c **** 
 867:Lib/FATFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 868:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 869:Lib/FATFs/ff.c **** 
 870:Lib/FATFs/ff.c **** 	} else {
 871:Lib/FATFs/ff.c **** 		switch (fs->fs_type) {
 872:Lib/FATFs/ff.c **** 		case FS_FAT12 :
 873:Lib/FATFs/ff.c **** 			bc = clst; bc += bc / 2;
 874:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 875:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 876:Lib/FATFs/ff.c **** 			p = &fs->win[bc % SS(fs)];
 877:Lib/FATFs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 878:Lib/FATFs/ff.c **** 			bc++;
 879:Lib/FATFs/ff.c **** 			fs->wflag = 1;
 880:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 881:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 882:Lib/FATFs/ff.c **** 			p = &fs->win[bc % SS(fs)];
 883:Lib/FATFs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 884:Lib/FATFs/ff.c **** 			break;
 885:Lib/FATFs/ff.c **** 
 886:Lib/FATFs/ff.c **** 		case FS_FAT16 :
 887:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 888:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 889:Lib/FATFs/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 890:Lib/FATFs/ff.c **** 			ST_WORD(p, (WORD)val);
 891:Lib/FATFs/ff.c **** 			break;
 892:Lib/FATFs/ff.c **** 
 893:Lib/FATFs/ff.c **** 		case FS_FAT32 :
 894:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 895:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 896:Lib/FATFs/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 897:Lib/FATFs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 898:Lib/FATFs/ff.c **** 			ST_DWORD(p, val);
 899:Lib/FATFs/ff.c **** 			break;
 900:Lib/FATFs/ff.c **** 
 901:Lib/FATFs/ff.c **** 		default :
 902:Lib/FATFs/ff.c **** 			res = FR_INT_ERR;
 903:Lib/FATFs/ff.c **** 		}
 904:Lib/FATFs/ff.c **** 		fs->wflag = 1;
 905:Lib/FATFs/ff.c **** 	}
 906:Lib/FATFs/ff.c **** 
 907:Lib/FATFs/ff.c **** 	return res;
 908:Lib/FATFs/ff.c **** }
 909:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
 910:Lib/FATFs/ff.c **** 
 911:Lib/FATFs/ff.c **** 
 912:Lib/FATFs/ff.c **** 
 913:Lib/FATFs/ff.c **** 
 914:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 915:Lib/FATFs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 916:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 917:Lib/FATFs/ff.c **** #if !_FS_READONLY
 918:Lib/FATFs/ff.c **** static
 919:Lib/FATFs/ff.c **** FRESULT remove_chain (
 920:Lib/FATFs/ff.c **** 	FATFS *fs,			/* File system object */
 921:Lib/FATFs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 922:Lib/FATFs/ff.c **** )
 923:Lib/FATFs/ff.c **** {
 924:Lib/FATFs/ff.c **** 	FRESULT res;
 925:Lib/FATFs/ff.c **** 	DWORD nxt;
 926:Lib/FATFs/ff.c **** #if _USE_ERASE
 927:Lib/FATFs/ff.c **** 	DWORD scl = clst, ecl = clst, resion[2];
 928:Lib/FATFs/ff.c **** #endif
 929:Lib/FATFs/ff.c **** 
 930:Lib/FATFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 931:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 932:Lib/FATFs/ff.c **** 
 933:Lib/FATFs/ff.c **** 	} else {
 934:Lib/FATFs/ff.c **** 		res = FR_OK;
 935:Lib/FATFs/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 936:Lib/FATFs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 937:Lib/FATFs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 938:Lib/FATFs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 939:Lib/FATFs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 940:Lib/FATFs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 941:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 942:Lib/FATFs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 943:Lib/FATFs/ff.c **** 				fs->free_clust++;
 944:Lib/FATFs/ff.c **** 				fs->fsi_flag = 1;
 945:Lib/FATFs/ff.c **** 			}
 946:Lib/FATFs/ff.c **** #if _USE_ERASE
 947:Lib/FATFs/ff.c **** 			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
 948:Lib/FATFs/ff.c **** 				ecl = nxt;
 949:Lib/FATFs/ff.c **** 			} else {				/* End of contiguous clusters */ 
 950:Lib/FATFs/ff.c **** 				resion[0] = clust2sect(fs, scl);					/* Start sector */
 951:Lib/FATFs/ff.c **** 				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 952:Lib/FATFs/ff.c **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
 953:Lib/FATFs/ff.c **** 				scl = ecl = nxt;
 954:Lib/FATFs/ff.c **** 			}
 955:Lib/FATFs/ff.c **** #endif
 956:Lib/FATFs/ff.c **** 			clst = nxt;	/* Next cluster */
 957:Lib/FATFs/ff.c **** 		}
 958:Lib/FATFs/ff.c **** 	}
 959:Lib/FATFs/ff.c **** 
 960:Lib/FATFs/ff.c **** 	return res;
 961:Lib/FATFs/ff.c **** }
 962:Lib/FATFs/ff.c **** #endif
 963:Lib/FATFs/ff.c **** 
 964:Lib/FATFs/ff.c **** 
 965:Lib/FATFs/ff.c **** 
 966:Lib/FATFs/ff.c **** 
 967:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 968:Lib/FATFs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 969:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 970:Lib/FATFs/ff.c **** #if !_FS_READONLY
 971:Lib/FATFs/ff.c **** static
 972:Lib/FATFs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 973:Lib/FATFs/ff.c **** 	FATFS *fs,			/* File system object */
 974:Lib/FATFs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 975:Lib/FATFs/ff.c **** )
 976:Lib/FATFs/ff.c **** {
 977:Lib/FATFs/ff.c **** 	DWORD cs, ncl, scl;
 978:Lib/FATFs/ff.c **** 	FRESULT res;
 979:Lib/FATFs/ff.c **** 
 980:Lib/FATFs/ff.c **** 
 981:Lib/FATFs/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 982:Lib/FATFs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 983:Lib/FATFs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 984:Lib/FATFs/ff.c **** 	}
 985:Lib/FATFs/ff.c **** 	else {					/* Stretch the current chain */
 986:Lib/FATFs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 987:Lib/FATFs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 988:Lib/FATFs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 989:Lib/FATFs/ff.c **** 		scl = clst;
 990:Lib/FATFs/ff.c **** 	}
 991:Lib/FATFs/ff.c **** 
 992:Lib/FATFs/ff.c **** 	ncl = scl;				/* Start cluster */
 993:Lib/FATFs/ff.c **** 	for (;;) {
 994:Lib/FATFs/ff.c **** 		ncl++;							/* Next cluster */
 995:Lib/FATFs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 996:Lib/FATFs/ff.c **** 			ncl = 2;
 997:Lib/FATFs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 998:Lib/FATFs/ff.c **** 		}
 999:Lib/FATFs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1000:Lib/FATFs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
1001:Lib/FATFs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1002:Lib/FATFs/ff.c **** 			return cs;
1003:Lib/FATFs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1004:Lib/FATFs/ff.c **** 	}
1005:Lib/FATFs/ff.c **** 
1006:Lib/FATFs/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1007:Lib/FATFs/ff.c **** 	if (res == FR_OK && clst != 0) {
1008:Lib/FATFs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1009:Lib/FATFs/ff.c **** 	}
1010:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1011:Lib/FATFs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
1012:Lib/FATFs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
1013:Lib/FATFs/ff.c **** 			fs->free_clust--;
1014:Lib/FATFs/ff.c **** 			fs->fsi_flag = 1;
1015:Lib/FATFs/ff.c **** 		}
1016:Lib/FATFs/ff.c **** 	} else {
1017:Lib/FATFs/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1018:Lib/FATFs/ff.c **** 	}
1019:Lib/FATFs/ff.c **** 
1020:Lib/FATFs/ff.c **** 	return ncl;		/* Return new cluster number or error code */
1021:Lib/FATFs/ff.c **** }
1022:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
1023:Lib/FATFs/ff.c **** 
1024:Lib/FATFs/ff.c **** 
1025:Lib/FATFs/ff.c **** 
1026:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1027:Lib/FATFs/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1028:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1029:Lib/FATFs/ff.c **** 
1030:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
1031:Lib/FATFs/ff.c **** static
1032:Lib/FATFs/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1033:Lib/FATFs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1034:Lib/FATFs/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1035:Lib/FATFs/ff.c **** )
1036:Lib/FATFs/ff.c **** {
1037:Lib/FATFs/ff.c **** 	DWORD cl, ncl, *tbl;
1038:Lib/FATFs/ff.c **** 
1039:Lib/FATFs/ff.c **** 
1040:Lib/FATFs/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1041:Lib/FATFs/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1042:Lib/FATFs/ff.c **** 	for (;;) {
1043:Lib/FATFs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1044:Lib/FATFs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
1045:Lib/FATFs/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1046:Lib/FATFs/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1047:Lib/FATFs/ff.c **** 	}
1048:Lib/FATFs/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1049:Lib/FATFs/ff.c **** }
1050:Lib/FATFs/ff.c **** #endif	/* _USE_FASTSEEK */
1051:Lib/FATFs/ff.c **** 
1052:Lib/FATFs/ff.c **** 
1053:Lib/FATFs/ff.c **** 
1054:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1055:Lib/FATFs/ff.c **** /* Directory handling - Set directory index                              */
1056:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1057:Lib/FATFs/ff.c **** 
1058:Lib/FATFs/ff.c **** static
1059:Lib/FATFs/ff.c **** FRESULT dir_sdi (
1060:Lib/FATFs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1061:Lib/FATFs/ff.c **** 	WORD idx		/* Directory index number */
1062:Lib/FATFs/ff.c **** )
1063:Lib/FATFs/ff.c **** {
1064:Lib/FATFs/ff.c **** 	DWORD clst;
1065:Lib/FATFs/ff.c **** 	WORD ic;
1066:Lib/FATFs/ff.c **** 
1067:Lib/FATFs/ff.c **** 
1068:Lib/FATFs/ff.c **** 	dj->index = idx;
1069:Lib/FATFs/ff.c **** 	clst = dj->sclust;
1070:Lib/FATFs/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
1071:Lib/FATFs/ff.c **** 		return FR_INT_ERR;
1072:Lib/FATFs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1073:Lib/FATFs/ff.c **** 		clst = dj->fs->dirbase;
1074:Lib/FATFs/ff.c **** 
1075:Lib/FATFs/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
1076:Lib/FATFs/ff.c **** 		dj->clust = clst;
1077:Lib/FATFs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
1078:Lib/FATFs/ff.c **** 			return FR_INT_ERR;
1079:Lib/FATFs/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1080:Lib/FATFs/ff.c **** 	}
1081:Lib/FATFs/ff.c **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1082:Lib/FATFs/ff.c **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
1083:Lib/FATFs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
1084:Lib/FATFs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
1085:Lib/FATFs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1086:Lib/FATFs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
1087:Lib/FATFs/ff.c **** 				return FR_INT_ERR;
1088:Lib/FATFs/ff.c **** 			idx -= ic;
1089:Lib/FATFs/ff.c **** 		}
1090:Lib/FATFs/ff.c **** 		dj->clust = clst;
1091:Lib/FATFs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1092:Lib/FATFs/ff.c **** 	}
1093:Lib/FATFs/ff.c **** 
1094:Lib/FATFs/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
1095:Lib/FATFs/ff.c **** 
1096:Lib/FATFs/ff.c **** 	return FR_OK;	/* Seek succeeded */
1097:Lib/FATFs/ff.c **** }
1098:Lib/FATFs/ff.c **** 
1099:Lib/FATFs/ff.c **** 
1100:Lib/FATFs/ff.c **** 
1101:Lib/FATFs/ff.c **** 
1102:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1103:Lib/FATFs/ff.c **** /* Directory handling - Move directory index next                        */
1104:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1105:Lib/FATFs/ff.c **** 
1106:Lib/FATFs/ff.c **** static
1107:Lib/FATFs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
1108:Lib/FATFs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1109:Lib/FATFs/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1110:Lib/FATFs/ff.c **** )
1111:Lib/FATFs/ff.c **** {
1112:Lib/FATFs/ff.c **** 	DWORD clst;
1113:Lib/FATFs/ff.c **** 	WORD i;
1114:Lib/FATFs/ff.c **** 
1115:Lib/FATFs/ff.c **** 
1116:Lib/FATFs/ff.c **** 	i = dj->index + 1;
1117:Lib/FATFs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
1118:Lib/FATFs/ff.c **** 		return FR_NO_FILE;
1119:Lib/FATFs/ff.c **** 
1120:Lib/FATFs/ff.c **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
1121:Lib/FATFs/ff.c **** 		dj->sect++;					/* Next sector */
1122:Lib/FATFs/ff.c **** 
1123:Lib/FATFs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
1124:Lib/FATFs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
1125:Lib/FATFs/ff.c **** 				return FR_NO_FILE;
1126:Lib/FATFs/ff.c **** 		}
1127:Lib/FATFs/ff.c **** 		else {					/* Dynamic table */
1128:Lib/FATFs/ff.c **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
1129:Lib/FATFs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
1130:Lib/FATFs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
1131:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1132:Lib/FATFs/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
1133:Lib/FATFs/ff.c **** #if !_FS_READONLY
1134:Lib/FATFs/ff.c **** 					BYTE c;
1135:Lib/FATFs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
1136:Lib/FATFs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
1137:Lib/FATFs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1138:Lib/FATFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
1139:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1140:Lib/FATFs/ff.c **** 					/* Clean-up stretched table */
1141:Lib/FATFs/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
1142:Lib/FATFs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
1143:Lib/FATFs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
1144:Lib/FATFs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
1145:Lib/FATFs/ff.c **** 						dj->fs->wflag = 1;
1146:Lib/FATFs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
1147:Lib/FATFs/ff.c **** 						dj->fs->winsect++;
1148:Lib/FATFs/ff.c **** 					}
1149:Lib/FATFs/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
1150:Lib/FATFs/ff.c **** #else
1151:Lib/FATFs/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
1152:Lib/FATFs/ff.c **** #endif
1153:Lib/FATFs/ff.c **** 				}
1154:Lib/FATFs/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
1155:Lib/FATFs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
1156:Lib/FATFs/ff.c **** 			}
1157:Lib/FATFs/ff.c **** 		}
1158:Lib/FATFs/ff.c **** 	}
1159:Lib/FATFs/ff.c **** 
1160:Lib/FATFs/ff.c **** 	dj->index = i;
1161:Lib/FATFs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
1162:Lib/FATFs/ff.c **** 
1163:Lib/FATFs/ff.c **** 	return FR_OK;
1164:Lib/FATFs/ff.c **** }
1165:Lib/FATFs/ff.c **** 
1166:Lib/FATFs/ff.c **** 
1167:Lib/FATFs/ff.c **** 
1168:Lib/FATFs/ff.c **** 
1169:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1170:Lib/FATFs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1171:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1172:Lib/FATFs/ff.c **** #if _USE_LFN
1173:Lib/FATFs/ff.c **** static
1174:Lib/FATFs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1175:Lib/FATFs/ff.c **** 
1176:Lib/FATFs/ff.c **** 
1177:Lib/FATFs/ff.c **** static
1178:Lib/FATFs/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1179:Lib/FATFs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1180:Lib/FATFs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1181:Lib/FATFs/ff.c **** )
1182:Lib/FATFs/ff.c **** {
1183:Lib/FATFs/ff.c **** 	UINT i, s;
1184:Lib/FATFs/ff.c **** 	WCHAR wc, uc;
1185:Lib/FATFs/ff.c **** 
1186:Lib/FATFs/ff.c **** 
1187:Lib/FATFs/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1188:Lib/FATFs/ff.c **** 	s = 0; wc = 1;
1189:Lib/FATFs/ff.c **** 	do {
1190:Lib/FATFs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1191:Lib/FATFs/ff.c **** 		if (wc) {	/* Last char has not been processed */
1192:Lib/FATFs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1193:Lib/FATFs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1194:Lib/FATFs/ff.c **** 				return 0;				/* Not matched */
1195:Lib/FATFs/ff.c **** 		} else {
1196:Lib/FATFs/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1197:Lib/FATFs/ff.c **** 		}
1198:Lib/FATFs/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
1199:Lib/FATFs/ff.c **** 
1200:Lib/FATFs/ff.c **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1201:Lib/FATFs/ff.c **** 		return 0;
1202:Lib/FATFs/ff.c **** 
1203:Lib/FATFs/ff.c **** 	return 1;						/* The part of LFN matched */
1204:Lib/FATFs/ff.c **** }
1205:Lib/FATFs/ff.c **** 
1206:Lib/FATFs/ff.c **** 
1207:Lib/FATFs/ff.c **** 
1208:Lib/FATFs/ff.c **** static
1209:Lib/FATFs/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1210:Lib/FATFs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1211:Lib/FATFs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
1212:Lib/FATFs/ff.c **** )
1213:Lib/FATFs/ff.c **** {
1214:Lib/FATFs/ff.c **** 	UINT i, s;
1215:Lib/FATFs/ff.c **** 	WCHAR wc, uc;
1216:Lib/FATFs/ff.c **** 
1217:Lib/FATFs/ff.c **** 
1218:Lib/FATFs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1219:Lib/FATFs/ff.c **** 
1220:Lib/FATFs/ff.c **** 	s = 0; wc = 1;
1221:Lib/FATFs/ff.c **** 	do {
1222:Lib/FATFs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1223:Lib/FATFs/ff.c **** 		if (wc) {	/* Last char has not been processed */
1224:Lib/FATFs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1225:Lib/FATFs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1226:Lib/FATFs/ff.c **** 		} else {
1227:Lib/FATFs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1228:Lib/FATFs/ff.c **** 		}
1229:Lib/FATFs/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1230:Lib/FATFs/ff.c **** 
1231:Lib/FATFs/ff.c **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1232:Lib/FATFs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1233:Lib/FATFs/ff.c **** 		lfnbuf[i] = 0;
1234:Lib/FATFs/ff.c **** 	}
1235:Lib/FATFs/ff.c **** 
1236:Lib/FATFs/ff.c **** 	return 1;
1237:Lib/FATFs/ff.c **** }
1238:Lib/FATFs/ff.c **** 
1239:Lib/FATFs/ff.c **** 
1240:Lib/FATFs/ff.c **** #if !_FS_READONLY
1241:Lib/FATFs/ff.c **** static
1242:Lib/FATFs/ff.c **** void fit_lfn (
1243:Lib/FATFs/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1244:Lib/FATFs/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
1245:Lib/FATFs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1246:Lib/FATFs/ff.c **** 	BYTE sum				/* SFN sum */
1247:Lib/FATFs/ff.c **** )
1248:Lib/FATFs/ff.c **** {
1249:Lib/FATFs/ff.c **** 	UINT i, s;
1250:Lib/FATFs/ff.c **** 	WCHAR wc;
1251:Lib/FATFs/ff.c **** 
1252:Lib/FATFs/ff.c **** 
1253:Lib/FATFs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1254:Lib/FATFs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1255:Lib/FATFs/ff.c **** 	dir[LDIR_Type] = 0;
1256:Lib/FATFs/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1257:Lib/FATFs/ff.c **** 
1258:Lib/FATFs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1259:Lib/FATFs/ff.c **** 	s = wc = 0;
1260:Lib/FATFs/ff.c **** 	do {
1261:Lib/FATFs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1262:Lib/FATFs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1263:Lib/FATFs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1264:Lib/FATFs/ff.c **** 	} while (++s < 13);
1265:Lib/FATFs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1266:Lib/FATFs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1267:Lib/FATFs/ff.c **** }
1268:Lib/FATFs/ff.c **** 
1269:Lib/FATFs/ff.c **** #endif
1270:Lib/FATFs/ff.c **** #endif
1271:Lib/FATFs/ff.c **** 
1272:Lib/FATFs/ff.c **** 
1273:Lib/FATFs/ff.c **** 
1274:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1275:Lib/FATFs/ff.c **** /* Create numbered name                                                  */
1276:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1277:Lib/FATFs/ff.c **** #if _USE_LFN
1278:Lib/FATFs/ff.c **** void gen_numname (
1279:Lib/FATFs/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
1280:Lib/FATFs/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1281:Lib/FATFs/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
1282:Lib/FATFs/ff.c **** 	WORD seq			/* Sequence number */
1283:Lib/FATFs/ff.c **** )
1284:Lib/FATFs/ff.c **** {
1285:Lib/FATFs/ff.c **** 	BYTE ns[8], c;
1286:Lib/FATFs/ff.c **** 	UINT i, j;
1287:Lib/FATFs/ff.c **** 
1288:Lib/FATFs/ff.c **** 
1289:Lib/FATFs/ff.c **** 	mem_cpy(dst, src, 11);
1290:Lib/FATFs/ff.c **** 
1291:Lib/FATFs/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1292:Lib/FATFs/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1293:Lib/FATFs/ff.c **** 	}
1294:Lib/FATFs/ff.c **** 
1295:Lib/FATFs/ff.c **** 	/* itoa (hexdecimal) */
1296:Lib/FATFs/ff.c **** 	i = 7;
1297:Lib/FATFs/ff.c **** 	do {
1298:Lib/FATFs/ff.c **** 		c = (seq % 16) + '0';
1299:Lib/FATFs/ff.c **** 		if (c > '9') c += 7;
1300:Lib/FATFs/ff.c **** 		ns[i--] = c;
1301:Lib/FATFs/ff.c **** 		seq /= 16;
1302:Lib/FATFs/ff.c **** 	} while (seq);
1303:Lib/FATFs/ff.c **** 	ns[i] = '~';
1304:Lib/FATFs/ff.c **** 
1305:Lib/FATFs/ff.c **** 	/* Append the number */
1306:Lib/FATFs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1307:Lib/FATFs/ff.c **** 		if (IsDBCS1(dst[j])) {
1308:Lib/FATFs/ff.c **** 			if (j == i - 1) break;
1309:Lib/FATFs/ff.c **** 			j++;
1310:Lib/FATFs/ff.c **** 		}
1311:Lib/FATFs/ff.c **** 	}
1312:Lib/FATFs/ff.c **** 	do {
1313:Lib/FATFs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1314:Lib/FATFs/ff.c **** 	} while (j < 8);
1315:Lib/FATFs/ff.c **** }
1316:Lib/FATFs/ff.c **** #endif
1317:Lib/FATFs/ff.c **** 
1318:Lib/FATFs/ff.c **** 
1319:Lib/FATFs/ff.c **** 
1320:Lib/FATFs/ff.c **** 
1321:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1322:Lib/FATFs/ff.c **** /* Calculate sum of an SFN                                               */
1323:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1324:Lib/FATFs/ff.c **** #if _USE_LFN
1325:Lib/FATFs/ff.c **** static
1326:Lib/FATFs/ff.c **** BYTE sum_sfn (
1327:Lib/FATFs/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
1328:Lib/FATFs/ff.c **** )
1329:Lib/FATFs/ff.c **** {
1330:Lib/FATFs/ff.c **** 	BYTE sum = 0;
1331:Lib/FATFs/ff.c **** 	UINT n = 11;
1332:Lib/FATFs/ff.c **** 
1333:Lib/FATFs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1334:Lib/FATFs/ff.c **** 	return sum;
1335:Lib/FATFs/ff.c **** }
1336:Lib/FATFs/ff.c **** #endif
1337:Lib/FATFs/ff.c **** 
1338:Lib/FATFs/ff.c **** 
1339:Lib/FATFs/ff.c **** 
1340:Lib/FATFs/ff.c **** 
1341:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1342:Lib/FATFs/ff.c **** /* Directory handling - Find an object in the directory                  */
1343:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1344:Lib/FATFs/ff.c **** 
1345:Lib/FATFs/ff.c **** static
1346:Lib/FATFs/ff.c **** FRESULT dir_find (
1347:Lib/FATFs/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1348:Lib/FATFs/ff.c **** )
1349:Lib/FATFs/ff.c **** {
1350:Lib/FATFs/ff.c **** 	FRESULT res;
1351:Lib/FATFs/ff.c **** 	BYTE c, *dir;
1352:Lib/FATFs/ff.c **** #if _USE_LFN
1353:Lib/FATFs/ff.c **** 	BYTE a, ord, sum;
1354:Lib/FATFs/ff.c **** #endif
1355:Lib/FATFs/ff.c **** 
1356:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1357:Lib/FATFs/ff.c **** 	if (res != FR_OK) return res;
1358:Lib/FATFs/ff.c **** 
1359:Lib/FATFs/ff.c **** #if _USE_LFN
1360:Lib/FATFs/ff.c **** 	ord = sum = 0xFF;
1361:Lib/FATFs/ff.c **** #endif
1362:Lib/FATFs/ff.c **** 	do {
1363:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1364:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1365:Lib/FATFs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1366:Lib/FATFs/ff.c **** 		c = dir[DIR_Name];
1367:Lib/FATFs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1368:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1369:Lib/FATFs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1370:Lib/FATFs/ff.c **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1371:Lib/FATFs/ff.c **** 			ord = 0xFF;
1372:Lib/FATFs/ff.c **** 		} else {
1373:Lib/FATFs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1374:Lib/FATFs/ff.c **** 				if (dj->lfn) {
1375:Lib/FATFs/ff.c **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1376:Lib/FATFs/ff.c **** 						sum = dir[LDIR_Chksum];
1377:Lib/FATFs/ff.c **** 						c &= ~LLE; ord = c;	/* LFN start order */
1378:Lib/FATFs/ff.c **** 						dj->lfn_idx = dj->index;
1379:Lib/FATFs/ff.c **** 					}
1380:Lib/FATFs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1381:Lib/FATFs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1382:Lib/FATFs/ff.c **** 				}
1383:Lib/FATFs/ff.c **** 			} else {					/* An SFN entry is found */
1384:Lib/FATFs/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1385:Lib/FATFs/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1386:Lib/FATFs/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1387:Lib/FATFs/ff.c **** 			}
1388:Lib/FATFs/ff.c **** 		}
1389:Lib/FATFs/ff.c **** #else		/* Non LFN configuration */
1390:Lib/FATFs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1391:Lib/FATFs/ff.c **** 			break;
1392:Lib/FATFs/ff.c **** #endif
1393:Lib/FATFs/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
1394:Lib/FATFs/ff.c **** 	} while (res == FR_OK);
1395:Lib/FATFs/ff.c **** 
1396:Lib/FATFs/ff.c **** 	return res;
1397:Lib/FATFs/ff.c **** }
1398:Lib/FATFs/ff.c **** 
1399:Lib/FATFs/ff.c **** 
1400:Lib/FATFs/ff.c **** 
1401:Lib/FATFs/ff.c **** 
1402:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1403:Lib/FATFs/ff.c **** /* Read an object from the directory                                     */
1404:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1405:Lib/FATFs/ff.c **** #if _FS_MINIMIZE <= 1
1406:Lib/FATFs/ff.c **** static
1407:Lib/FATFs/ff.c **** FRESULT dir_read (
1408:Lib/FATFs/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1409:Lib/FATFs/ff.c **** )
1410:Lib/FATFs/ff.c **** {
1411:Lib/FATFs/ff.c **** 	FRESULT res;
1412:Lib/FATFs/ff.c **** 	BYTE c, *dir;
1413:Lib/FATFs/ff.c **** #if _USE_LFN
1414:Lib/FATFs/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1415:Lib/FATFs/ff.c **** #endif
1416:Lib/FATFs/ff.c **** 
1417:Lib/FATFs/ff.c **** 	res = FR_NO_FILE;
1418:Lib/FATFs/ff.c **** 	while (dj->sect) {
1419:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1420:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1421:Lib/FATFs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1422:Lib/FATFs/ff.c **** 		c = dir[DIR_Name];
1423:Lib/FATFs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1424:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1425:Lib/FATFs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1426:Lib/FATFs/ff.c **** 		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without 
1427:Lib/FATFs/ff.c **** 			ord = 0xFF;
1428:Lib/FATFs/ff.c **** 		} else {
1429:Lib/FATFs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1430:Lib/FATFs/ff.c **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1431:Lib/FATFs/ff.c **** 					sum = dir[LDIR_Chksum];
1432:Lib/FATFs/ff.c **** 					c &= ~LLE; ord = c;
1433:Lib/FATFs/ff.c **** 					dj->lfn_idx = dj->index;
1434:Lib/FATFs/ff.c **** 				}
1435:Lib/FATFs/ff.c **** 				/* Check LFN validity and capture it */
1436:Lib/FATFs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1437:Lib/FATFs/ff.c **** 			} else {					/* An SFN entry is found */
1438:Lib/FATFs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1439:Lib/FATFs/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1440:Lib/FATFs/ff.c **** 				break;
1441:Lib/FATFs/ff.c **** 			}
1442:Lib/FATFs/ff.c **** 		}
1443:Lib/FATFs/ff.c **** #else		/* Non LFN configuration */
1444:Lib/FATFs/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1445:Lib/FATFs/ff.c **** 			break;
1446:Lib/FATFs/ff.c **** #endif
1447:Lib/FATFs/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
1448:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1449:Lib/FATFs/ff.c **** 	}
1450:Lib/FATFs/ff.c **** 
1451:Lib/FATFs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
1452:Lib/FATFs/ff.c **** 
1453:Lib/FATFs/ff.c **** 	return res;
1454:Lib/FATFs/ff.c **** }
1455:Lib/FATFs/ff.c **** #endif
1456:Lib/FATFs/ff.c **** 
1457:Lib/FATFs/ff.c **** 
1458:Lib/FATFs/ff.c **** 
1459:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1460:Lib/FATFs/ff.c **** /* Register an object to the directory                                   */
1461:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1462:Lib/FATFs/ff.c **** #if !_FS_READONLY
1463:Lib/FATFs/ff.c **** static
1464:Lib/FATFs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1465:Lib/FATFs/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
1466:Lib/FATFs/ff.c **** )
1467:Lib/FATFs/ff.c **** {
1468:Lib/FATFs/ff.c **** 	FRESULT res;
1469:Lib/FATFs/ff.c **** 	BYTE c, *dir;
1470:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1471:Lib/FATFs/ff.c **** 	WORD n, ne, is;
1472:Lib/FATFs/ff.c **** 	BYTE sn[12], *fn, sum;
1473:Lib/FATFs/ff.c **** 	WCHAR *lfn;
1474:Lib/FATFs/ff.c **** 
1475:Lib/FATFs/ff.c **** 
1476:Lib/FATFs/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
1477:Lib/FATFs/ff.c **** 	mem_cpy(sn, fn, 12);
1478:Lib/FATFs/ff.c **** 
1479:Lib/FATFs/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1480:Lib/FATFs/ff.c **** 		return FR_INVALID_NAME;
1481:Lib/FATFs/ff.c **** 
1482:Lib/FATFs/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1483:Lib/FATFs/ff.c **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1484:Lib/FATFs/ff.c **** 		for (n = 1; n < 100; n++) {
1485:Lib/FATFs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1486:Lib/FATFs/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1487:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1488:Lib/FATFs/ff.c **** 		}
1489:Lib/FATFs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1490:Lib/FATFs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1491:Lib/FATFs/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1492:Lib/FATFs/ff.c **** 	}
1493:Lib/FATFs/ff.c **** 
1494:Lib/FATFs/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1495:Lib/FATFs/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
1496:Lib/FATFs/ff.c **** 		ne = (ne + 25) / 13;
1497:Lib/FATFs/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
1498:Lib/FATFs/ff.c **** 		ne = 1;
1499:Lib/FATFs/ff.c **** 	}
1500:Lib/FATFs/ff.c **** 
1501:Lib/FATFs/ff.c **** 	/* Reserve contiguous entries */
1502:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, 0);
1503:Lib/FATFs/ff.c **** 	if (res != FR_OK) return res;
1504:Lib/FATFs/ff.c **** 	n = is = 0;
1505:Lib/FATFs/ff.c **** 	do {
1506:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1507:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1508:Lib/FATFs/ff.c **** 		c = *dj->dir;				/* Check the entry status */
1509:Lib/FATFs/ff.c **** 		if (c == DDE || c == 0) {	/* Is it a blank entry? */
1510:Lib/FATFs/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1511:Lib/FATFs/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1512:Lib/FATFs/ff.c **** 		} else {
1513:Lib/FATFs/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
1514:Lib/FATFs/ff.c **** 		}
1515:Lib/FATFs/ff.c **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1516:Lib/FATFs/ff.c **** 	} while (res == FR_OK);
1517:Lib/FATFs/ff.c **** 
1518:Lib/FATFs/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1519:Lib/FATFs/ff.c **** 		res = dir_sdi(dj, is);
1520:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
1521:Lib/FATFs/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1522:Lib/FATFs/ff.c **** 			ne--;
1523:Lib/FATFs/ff.c **** 			do {					/* Store LFN entries in bottom first */
1524:Lib/FATFs/ff.c **** 				res = move_window(dj->fs, dj->sect);
1525:Lib/FATFs/ff.c **** 				if (res != FR_OK) break;
1526:Lib/FATFs/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1527:Lib/FATFs/ff.c **** 				dj->fs->wflag = 1;
1528:Lib/FATFs/ff.c **** 				res = dir_next(dj, 0);	/* Next entry */
1529:Lib/FATFs/ff.c **** 			} while (res == FR_OK && --ne);
1530:Lib/FATFs/ff.c **** 		}
1531:Lib/FATFs/ff.c **** 	}
1532:Lib/FATFs/ff.c **** 
1533:Lib/FATFs/ff.c **** #else	/* Non LFN configuration */
1534:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, 0);
1535:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1536:Lib/FATFs/ff.c **** 		do {	/* Find a blank entry for the SFN */
1537:Lib/FATFs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1538:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1539:Lib/FATFs/ff.c **** 			c = *dj->dir;
1540:Lib/FATFs/ff.c **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
1541:Lib/FATFs/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1542:Lib/FATFs/ff.c **** 		} while (res == FR_OK);
1543:Lib/FATFs/ff.c **** 	}
1544:Lib/FATFs/ff.c **** #endif
1545:Lib/FATFs/ff.c **** 
1546:Lib/FATFs/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1547:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1548:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
1549:Lib/FATFs/ff.c **** 			dir = dj->dir;
1550:Lib/FATFs/ff.c **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
1551:Lib/FATFs/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1552:Lib/FATFs/ff.c **** #if _USE_LFN
1553:Lib/FATFs/ff.c **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1554:Lib/FATFs/ff.c **** #endif
1555:Lib/FATFs/ff.c **** 			dj->fs->wflag = 1;
1556:Lib/FATFs/ff.c **** 		}
1557:Lib/FATFs/ff.c **** 	}
1558:Lib/FATFs/ff.c **** 
1559:Lib/FATFs/ff.c **** 	return res;
1560:Lib/FATFs/ff.c **** }
1561:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
1562:Lib/FATFs/ff.c **** 
1563:Lib/FATFs/ff.c **** 
1564:Lib/FATFs/ff.c **** 
1565:Lib/FATFs/ff.c **** 
1566:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1567:Lib/FATFs/ff.c **** /* Remove an object from the directory                                   */
1568:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1569:Lib/FATFs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1570:Lib/FATFs/ff.c **** static
1571:Lib/FATFs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1572:Lib/FATFs/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1573:Lib/FATFs/ff.c **** )
1574:Lib/FATFs/ff.c **** {
1575:Lib/FATFs/ff.c **** 	FRESULT res;
1576:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1577:Lib/FATFs/ff.c **** 	WORD i;
1578:Lib/FATFs/ff.c **** 
1579:Lib/FATFs/ff.c **** 	i = dj->index;	/* SFN index */
1580:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1581:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1582:Lib/FATFs/ff.c **** 		do {
1583:Lib/FATFs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1584:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1585:Lib/FATFs/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1586:Lib/FATFs/ff.c **** 			dj->fs->wflag = 1;
1587:Lib/FATFs/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1588:Lib/FATFs/ff.c **** 			res = dir_next(dj, 0);		/* Next entry */
1589:Lib/FATFs/ff.c **** 		} while (res == FR_OK);
1590:Lib/FATFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1591:Lib/FATFs/ff.c **** 	}
1592:Lib/FATFs/ff.c **** 
1593:Lib/FATFs/ff.c **** #else			/* Non LFN configuration */
1594:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, dj->index);
1595:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1596:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1597:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
1598:Lib/FATFs/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1599:Lib/FATFs/ff.c **** 			dj->fs->wflag = 1;
1600:Lib/FATFs/ff.c **** 		}
1601:Lib/FATFs/ff.c **** 	}
1602:Lib/FATFs/ff.c **** #endif
1603:Lib/FATFs/ff.c **** 
1604:Lib/FATFs/ff.c **** 	return res;
1605:Lib/FATFs/ff.c **** }
1606:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
1607:Lib/FATFs/ff.c **** 
1608:Lib/FATFs/ff.c **** 
1609:Lib/FATFs/ff.c **** 
1610:Lib/FATFs/ff.c **** 
1611:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1612:Lib/FATFs/ff.c **** /* Pick a segment and create the object name in directory form           */
1613:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1614:Lib/FATFs/ff.c **** 
1615:Lib/FATFs/ff.c **** static
1616:Lib/FATFs/ff.c **** FRESULT create_name (
1617:Lib/FATFs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1618:Lib/FATFs/ff.c **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1619:Lib/FATFs/ff.c **** )
1620:Lib/FATFs/ff.c **** {
1621:Lib/FATFs/ff.c **** #ifdef _EXCVT
1622:Lib/FATFs/ff.c **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1623:Lib/FATFs/ff.c **** #endif
1624:Lib/FATFs/ff.c **** 
1625:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1626:Lib/FATFs/ff.c **** 	BYTE b, cf;
1627:Lib/FATFs/ff.c **** 	WCHAR w, *lfn;
1628:Lib/FATFs/ff.c **** 	UINT i, ni, si, di;
1629:Lib/FATFs/ff.c **** 	const TCHAR *p;
1630:Lib/FATFs/ff.c **** 
1631:Lib/FATFs/ff.c **** 	/* Create LFN in Unicode */
1632:Lib/FATFs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1633:Lib/FATFs/ff.c **** 	lfn = dj->lfn;
1634:Lib/FATFs/ff.c **** 	si = di = 0;
1635:Lib/FATFs/ff.c **** 	for (;;) {
1636:Lib/FATFs/ff.c **** 		w = p[si++];					/* Get a character */
1637:Lib/FATFs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1638:Lib/FATFs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1639:Lib/FATFs/ff.c **** 			return FR_INVALID_NAME;
1640:Lib/FATFs/ff.c **** #if !_LFN_UNICODE
1641:Lib/FATFs/ff.c **** 		w &= 0xFF;
1642:Lib/FATFs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1643:Lib/FATFs/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1644:Lib/FATFs/ff.c **** 			if (!IsDBCS2(b))
1645:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1646:Lib/FATFs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1647:Lib/FATFs/ff.c **** 		}
1648:Lib/FATFs/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1649:Lib/FATFs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1650:Lib/FATFs/ff.c **** #endif
1651:Lib/FATFs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1652:Lib/FATFs/ff.c **** 			return FR_INVALID_NAME;
1653:Lib/FATFs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1654:Lib/FATFs/ff.c **** 	}
1655:Lib/FATFs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1656:Lib/FATFs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1657:Lib/FATFs/ff.c **** #if _FS_RPATH
1658:Lib/FATFs/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1659:Lib/FATFs/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1660:Lib/FATFs/ff.c **** 		lfn[di] = 0;
1661:Lib/FATFs/ff.c **** 		for (i = 0; i < 11; i++)
1662:Lib/FATFs/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1663:Lib/FATFs/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1664:Lib/FATFs/ff.c **** 		return FR_OK;
1665:Lib/FATFs/ff.c **** 	}
1666:Lib/FATFs/ff.c **** #endif
1667:Lib/FATFs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1668:Lib/FATFs/ff.c **** 		w = lfn[di-1];
1669:Lib/FATFs/ff.c **** 		if (w != ' ' && w != '.') break;
1670:Lib/FATFs/ff.c **** 		di--;
1671:Lib/FATFs/ff.c **** 	}
1672:Lib/FATFs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1673:Lib/FATFs/ff.c **** 
1674:Lib/FATFs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1675:Lib/FATFs/ff.c **** 
1676:Lib/FATFs/ff.c **** 	/* Create SFN in directory form */
1677:Lib/FATFs/ff.c **** 	mem_set(dj->fn, ' ', 11);
1678:Lib/FATFs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1679:Lib/FATFs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1680:Lib/FATFs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1681:Lib/FATFs/ff.c **** 
1682:Lib/FATFs/ff.c **** 	b = i = 0; ni = 8;
1683:Lib/FATFs/ff.c **** 	for (;;) {
1684:Lib/FATFs/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1685:Lib/FATFs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1686:Lib/FATFs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1687:Lib/FATFs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1688:Lib/FATFs/ff.c **** 		}
1689:Lib/FATFs/ff.c **** 
1690:Lib/FATFs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1691:Lib/FATFs/ff.c **** 			if (ni == 11) {				/* Long extension */
1692:Lib/FATFs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1693:Lib/FATFs/ff.c **** 			}
1694:Lib/FATFs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1695:Lib/FATFs/ff.c **** 			if (si > di) break;			/* No extension */
1696:Lib/FATFs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1697:Lib/FATFs/ff.c **** 			b <<= 2; continue;
1698:Lib/FATFs/ff.c **** 		}
1699:Lib/FATFs/ff.c **** 
1700:Lib/FATFs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
1701:Lib/FATFs/ff.c **** #ifdef _EXCVT
1702:Lib/FATFs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1703:Lib/FATFs/ff.c **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1704:Lib/FATFs/ff.c **** #else
1705:Lib/FATFs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1706:Lib/FATFs/ff.c **** #endif
1707:Lib/FATFs/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1708:Lib/FATFs/ff.c **** 		}
1709:Lib/FATFs/ff.c **** 
1710:Lib/FATFs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1711:Lib/FATFs/ff.c **** 			if (i >= ni - 1) {
1712:Lib/FATFs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1713:Lib/FATFs/ff.c **** 			}
1714:Lib/FATFs/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1715:Lib/FATFs/ff.c **** 		} else {						/* Single byte char */
1716:Lib/FATFs/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1717:Lib/FATFs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1718:Lib/FATFs/ff.c **** 			} else {
1719:Lib/FATFs/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1720:Lib/FATFs/ff.c **** 					b |= 2;
1721:Lib/FATFs/ff.c **** 				} else {
1722:Lib/FATFs/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1723:Lib/FATFs/ff.c **** 						b |= 1; w -= 0x20;
1724:Lib/FATFs/ff.c **** 					}
1725:Lib/FATFs/ff.c **** 				}
1726:Lib/FATFs/ff.c **** 			}
1727:Lib/FATFs/ff.c **** 		}
1728:Lib/FATFs/ff.c **** 		dj->fn[i++] = (BYTE)w;
1729:Lib/FATFs/ff.c **** 	}
1730:Lib/FATFs/ff.c **** 
1731:Lib/FATFs/ff.c **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
1732:Lib/FATFs/ff.c **** 
1733:Lib/FATFs/ff.c **** 	if (ni == 8) b <<= 2;
1734:Lib/FATFs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1735:Lib/FATFs/ff.c **** 		cf |= NS_LFN;
1736:Lib/FATFs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1737:Lib/FATFs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1738:Lib/FATFs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1739:Lib/FATFs/ff.c **** 	}
1740:Lib/FATFs/ff.c **** 
1741:Lib/FATFs/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
1742:Lib/FATFs/ff.c **** 
1743:Lib/FATFs/ff.c **** 	return FR_OK;
1744:Lib/FATFs/ff.c **** 
1745:Lib/FATFs/ff.c **** 
1746:Lib/FATFs/ff.c **** #else	/* Non-LFN configuration */
1747:Lib/FATFs/ff.c **** 	BYTE b, c, d, *sfn;
1748:Lib/FATFs/ff.c **** 	UINT ni, si, i;
1749:Lib/FATFs/ff.c **** 	const char *p;
1750:Lib/FATFs/ff.c **** 
1751:Lib/FATFs/ff.c **** 	/* Create file name in directory form */
1752:Lib/FATFs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1753:Lib/FATFs/ff.c **** 	sfn = dj->fn;
1754:Lib/FATFs/ff.c **** 	mem_set(sfn, ' ', 11);
1755:Lib/FATFs/ff.c **** 	si = i = b = 0; ni = 8;
1756:Lib/FATFs/ff.c **** #if _FS_RPATH
1757:Lib/FATFs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1758:Lib/FATFs/ff.c **** 		for (;;) {
1759:Lib/FATFs/ff.c **** 			c = (BYTE)p[si++];
1760:Lib/FATFs/ff.c **** 			if (c != '.' || si >= 3) break;
1761:Lib/FATFs/ff.c **** 			sfn[i++] = c;
1762:Lib/FATFs/ff.c **** 		}
1763:Lib/FATFs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1764:Lib/FATFs/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1765:Lib/FATFs/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1766:Lib/FATFs/ff.c **** 		return FR_OK;
1767:Lib/FATFs/ff.c **** 	}
1768:Lib/FATFs/ff.c **** #endif
1769:Lib/FATFs/ff.c **** 	for (;;) {
1770:Lib/FATFs/ff.c **** 		c = (BYTE)p[si++];
1771:Lib/FATFs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1772:Lib/FATFs/ff.c **** 		if (c == '.' || i >= ni) {
1773:Lib/FATFs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1774:Lib/FATFs/ff.c **** 			i = 8; ni = 11;
1775:Lib/FATFs/ff.c **** 			b <<= 2; continue;
1776:Lib/FATFs/ff.c **** 		}
1777:Lib/FATFs/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
1778:Lib/FATFs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
1779:Lib/FATFs/ff.c **** #ifdef _EXCVT
1780:Lib/FATFs/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
1781:Lib/FATFs/ff.c **** #else
1782:Lib/FATFs/ff.c **** #if !_DF1S	/* ASCII only cfg */
1783:Lib/FATFs/ff.c **** 			return FR_INVALID_NAME;
1784:Lib/FATFs/ff.c **** #endif
1785:Lib/FATFs/ff.c **** #endif
1786:Lib/FATFs/ff.c **** 		}
1787:Lib/FATFs/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1788:Lib/FATFs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1789:Lib/FATFs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1790:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
1791:Lib/FATFs/ff.c **** 			sfn[i++] = c;
1792:Lib/FATFs/ff.c **** 			sfn[i++] = d;
1793:Lib/FATFs/ff.c **** 		} else {						/* Single byte code */
1794:Lib/FATFs/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1795:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
1796:Lib/FATFs/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1797:Lib/FATFs/ff.c **** 				b |= 2;
1798:Lib/FATFs/ff.c **** 			} else {
1799:Lib/FATFs/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1800:Lib/FATFs/ff.c **** 					b |= 1; c -= 0x20;
1801:Lib/FATFs/ff.c **** 				}
1802:Lib/FATFs/ff.c **** 			}
1803:Lib/FATFs/ff.c **** 			sfn[i++] = c;
1804:Lib/FATFs/ff.c **** 		}
1805:Lib/FATFs/ff.c **** 	}
1806:Lib/FATFs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1807:Lib/FATFs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1808:Lib/FATFs/ff.c **** 
1809:Lib/FATFs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1810:Lib/FATFs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
1811:Lib/FATFs/ff.c **** 
1812:Lib/FATFs/ff.c **** 	if (ni == 8) b <<= 2;
1813:Lib/FATFs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1814:Lib/FATFs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1815:Lib/FATFs/ff.c **** 
1816:Lib/FATFs/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1817:Lib/FATFs/ff.c **** 
1818:Lib/FATFs/ff.c **** 	return FR_OK;
1819:Lib/FATFs/ff.c **** #endif
1820:Lib/FATFs/ff.c **** }
1821:Lib/FATFs/ff.c **** 
1822:Lib/FATFs/ff.c **** 
1823:Lib/FATFs/ff.c **** 
1824:Lib/FATFs/ff.c **** 
1825:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1826:Lib/FATFs/ff.c **** /* Get file information from directory entry                             */
1827:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1828:Lib/FATFs/ff.c **** #if _FS_MINIMIZE <= 1
1829:Lib/FATFs/ff.c **** static
1830:Lib/FATFs/ff.c **** void get_fileinfo (		/* No return code */
1831:Lib/FATFs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1832:Lib/FATFs/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1833:Lib/FATFs/ff.c **** )
1834:Lib/FATFs/ff.c **** {
1835:Lib/FATFs/ff.c **** 	UINT i;
1836:Lib/FATFs/ff.c **** 	BYTE nt, *dir;
1837:Lib/FATFs/ff.c **** 	TCHAR *p, c;
1838:Lib/FATFs/ff.c **** 
1839:Lib/FATFs/ff.c **** 
1840:Lib/FATFs/ff.c **** 	p = fno->fname;
1841:Lib/FATFs/ff.c **** 	if (dj->sect) {
1842:Lib/FATFs/ff.c **** 		dir = dj->dir;
1843:Lib/FATFs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1844:Lib/FATFs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
1845:Lib/FATFs/ff.c **** 			c = dir[i];
1846:Lib/FATFs/ff.c **** 			if (c == ' ') break;
1847:Lib/FATFs/ff.c **** 			if (c == NDDE) c = (TCHAR)DDE;
1848:Lib/FATFs/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1849:Lib/FATFs/ff.c **** #if _LFN_UNICODE
1850:Lib/FATFs/ff.c **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1851:Lib/FATFs/ff.c **** 				c = (c << 8) | dir[++i];
1852:Lib/FATFs/ff.c **** 			c = ff_convert(c, 1);
1853:Lib/FATFs/ff.c **** 			if (!c) c = '?';
1854:Lib/FATFs/ff.c **** #endif
1855:Lib/FATFs/ff.c **** 			*p++ = c;
1856:Lib/FATFs/ff.c **** 		}
1857:Lib/FATFs/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
1858:Lib/FATFs/ff.c **** 			*p++ = '.';
1859:Lib/FATFs/ff.c **** 			for (i = 8; i < 11; i++) {
1860:Lib/FATFs/ff.c **** 				c = dir[i];
1861:Lib/FATFs/ff.c **** 				if (c == ' ') break;
1862:Lib/FATFs/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1863:Lib/FATFs/ff.c **** #if _LFN_UNICODE
1864:Lib/FATFs/ff.c **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1865:Lib/FATFs/ff.c **** 					c = (c << 8) | dir[++i];
1866:Lib/FATFs/ff.c **** 				c = ff_convert(c, 1);
1867:Lib/FATFs/ff.c **** 				if (!c) c = '?';
1868:Lib/FATFs/ff.c **** #endif
1869:Lib/FATFs/ff.c **** 				*p++ = c;
1870:Lib/FATFs/ff.c **** 			}
1871:Lib/FATFs/ff.c **** 		}
1872:Lib/FATFs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1873:Lib/FATFs/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
1874:Lib/FATFs/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
1875:Lib/FATFs/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
1876:Lib/FATFs/ff.c **** 	}
1877:Lib/FATFs/ff.c **** 	*p = 0;		/* Terminate SFN str by a \0 */
1878:Lib/FATFs/ff.c **** 
1879:Lib/FATFs/ff.c **** #if _USE_LFN
1880:Lib/FATFs/ff.c **** 	if (fno->lfname && fno->lfsize) {
1881:Lib/FATFs/ff.c **** 		TCHAR *tp = fno->lfname;
1882:Lib/FATFs/ff.c **** 		WCHAR w, *lfn;
1883:Lib/FATFs/ff.c **** 
1884:Lib/FATFs/ff.c **** 		i = 0;
1885:Lib/FATFs/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1886:Lib/FATFs/ff.c **** 			lfn = dj->lfn;
1887:Lib/FATFs/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1888:Lib/FATFs/ff.c **** #if !_LFN_UNICODE
1889:Lib/FATFs/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1890:Lib/FATFs/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1891:Lib/FATFs/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1892:Lib/FATFs/ff.c **** 					tp[i++] = (TCHAR)(w >> 8);
1893:Lib/FATFs/ff.c **** #endif
1894:Lib/FATFs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1895:Lib/FATFs/ff.c **** 				tp[i++] = (TCHAR)w;
1896:Lib/FATFs/ff.c **** 			}
1897:Lib/FATFs/ff.c **** 		}
1898:Lib/FATFs/ff.c **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1899:Lib/FATFs/ff.c **** 	}
1900:Lib/FATFs/ff.c **** #endif
1901:Lib/FATFs/ff.c **** }
1902:Lib/FATFs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1903:Lib/FATFs/ff.c **** 
1904:Lib/FATFs/ff.c **** 
1905:Lib/FATFs/ff.c **** 
1906:Lib/FATFs/ff.c **** 
1907:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1908:Lib/FATFs/ff.c **** /* Follow a file path                                                    */
1909:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1910:Lib/FATFs/ff.c **** 
1911:Lib/FATFs/ff.c **** static
1912:Lib/FATFs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1913:Lib/FATFs/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1914:Lib/FATFs/ff.c **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1915:Lib/FATFs/ff.c **** )
1916:Lib/FATFs/ff.c **** {
1917:Lib/FATFs/ff.c **** 	FRESULT res;
1918:Lib/FATFs/ff.c **** 	BYTE *dir, ns;
1919:Lib/FATFs/ff.c **** 
1920:Lib/FATFs/ff.c **** 
1921:Lib/FATFs/ff.c **** #if _FS_RPATH
1922:Lib/FATFs/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1923:Lib/FATFs/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1924:Lib/FATFs/ff.c **** 	} else {							/* No heading separator */
1925:Lib/FATFs/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1926:Lib/FATFs/ff.c **** 	}
1927:Lib/FATFs/ff.c **** #else
1928:Lib/FATFs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1929:Lib/FATFs/ff.c **** 		path++;
1930:Lib/FATFs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1931:Lib/FATFs/ff.c **** #endif
1932:Lib/FATFs/ff.c **** 
1933:Lib/FATFs/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1934:Lib/FATFs/ff.c **** 		res = dir_sdi(dj, 0);
1935:Lib/FATFs/ff.c **** 		dj->dir = 0;
1936:Lib/FATFs/ff.c **** 
1937:Lib/FATFs/ff.c **** 	} else {							/* Follow path */
1938:Lib/FATFs/ff.c **** 		for (;;) {
1939:Lib/FATFs/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1940:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1941:Lib/FATFs/ff.c **** 			res = dir_find(dj);				/* Find it */
1942:Lib/FATFs/ff.c **** 			ns = *(dj->fn+NS);
1943:Lib/FATFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
1944:Lib/FATFs/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1945:Lib/FATFs/ff.c **** 				/* Object not found */
1946:Lib/FATFs/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1947:Lib/FATFs/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1948:Lib/FATFs/ff.c **** 					res = FR_OK;
1949:Lib/FATFs/ff.c **** 					if (!(ns & NS_LAST)) continue;
1950:Lib/FATFs/ff.c **** 				} else {							/* Could not find the object */
1951:Lib/FATFs/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1952:Lib/FATFs/ff.c **** 				}
1953:Lib/FATFs/ff.c **** 				break;
1954:Lib/FATFs/ff.c **** 			}
1955:Lib/FATFs/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1956:Lib/FATFs/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1957:Lib/FATFs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1958:Lib/FATFs/ff.c **** 				res = FR_NO_PATH; break;
1959:Lib/FATFs/ff.c **** 			}
1960:Lib/FATFs/ff.c **** 			dj->sclust = LD_CLUST(dir);
1961:Lib/FATFs/ff.c **** 		}
1962:Lib/FATFs/ff.c **** 	}
1963:Lib/FATFs/ff.c **** 
1964:Lib/FATFs/ff.c **** 	return res;
1965:Lib/FATFs/ff.c **** }
1966:Lib/FATFs/ff.c **** 
1967:Lib/FATFs/ff.c **** 
1968:Lib/FATFs/ff.c **** 
1969:Lib/FATFs/ff.c **** 
1970:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1971:Lib/FATFs/ff.c **** /* Load boot record and check if it is an FAT boot record                */
1972:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1973:Lib/FATFs/ff.c **** 
1974:Lib/FATFs/ff.c **** static
1975:Lib/FATFs/ff.c **** BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
1976:Lib/FATFs/ff.c **** 	FATFS *fs,	/* File system object */
1977:Lib/FATFs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1978:Lib/FATFs/ff.c **** )
1979:Lib/FATFs/ff.c **** {
 120               		.loc 1 1979 0
 121               		.cfi_startproc
 122               	.LVL8:
 123 0000 0F93      		push r16
 124               	.LCFI7:
 125               		.cfi_def_cfa_offset 3
 126               		.cfi_offset 16, -2
 127 0002 CF93      		push r28
 128               	.LCFI8:
 129               		.cfi_def_cfa_offset 4
 130               		.cfi_offset 28, -3
 131 0004 DF93      		push r29
 132               	.LCFI9:
 133               		.cfi_def_cfa_offset 5
 134               		.cfi_offset 29, -4
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 3 */
 138               	.L__stack_usage = 3
 139 0006 EC01      		movw r28,r24
 140 0008 9A01      		movw r18,r20
 141 000a AB01      		movw r20,r22
1980:Lib/FATFs/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 142               		.loc 1 1980 0
 143 000c BC01      		movw r22,r24
 144 000e 6E5D      		subi r22,-34
 145 0010 7F4F      		sbci r23,-1
 146 0012 01E0      		ldi r16,lo8(1)
 147 0014 8981      		ldd r24,Y+1
 148               	.LVL9:
 149 0016 0E94 0000 		call disk_read
 150               	.LVL10:
 151 001a 8111      		cpse r24,__zero_reg__
 152 001c 00C0      		rjmp .L10
1981:Lib/FATFs/ff.c **** 		return 3;
1982:Lib/FATFs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 153               		.loc 1 1982 0
 154 001e FE01      		movw r30,r28
 155 0020 E05E      		subi r30,-32
 156 0022 FD4F      		sbci r31,-3
 157 0024 8081      		ld r24,Z
 158 0026 9181      		ldd r25,Z+1
 159 0028 8535      		cpi r24,85
 160 002a 9A4A      		sbci r25,-86
 161 002c 01F4      		brne .L11
1983:Lib/FATFs/ff.c **** 		return 2;
1984:Lib/FATFs/ff.c **** 
1985:Lib/FATFs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 162               		.loc 1 1985 0
 163 002e E85C      		subi r30,-56
 164 0030 F140      		sbci r31,1
 165 0032 8081      		ld r24,Z
 166 0034 9181      		ldd r25,Z+1
 167 0036 A281      		ldd r26,Z+2
 168 0038 B381      		ldd r27,Z+3
 169 003a BB27      		clr r27
 170 003c 8634      		cpi r24,70
 171 003e 9144      		sbci r25,65
 172 0040 A445      		sbci r26,84
 173 0042 B105      		cpc r27,__zero_reg__
 174 0044 01F0      		breq .L12
1986:Lib/FATFs/ff.c **** 		return 0;
1987:Lib/FATFs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 175               		.loc 1 1987 0
 176 0046 CC58      		subi r28,-116
 177 0048 DF4F      		sbci r29,-1
 178               	.LVL11:
1981:Lib/FATFs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 179               		.loc 1 1981 0
 180 004a 4881      		ld r20,Y
 181 004c 5981      		ldd r21,Y+1
 182 004e 6A81      		ldd r22,Y+2
 183 0050 7B81      		ldd r23,Y+3
 184 0052 7727      		clr r23
 185 0054 81E0      		ldi r24,lo8(1)
 186 0056 4634      		cpi r20,70
 187 0058 5144      		sbci r21,65
 188 005a 6445      		sbci r22,84
 189 005c 7105      		cpc r23,__zero_reg__
 190 005e 01F4      		brne .L8
 191 0060 00C0      		rjmp .L12
 192               	.LVL12:
 193               	.L10:
 194 0062 83E0      		ldi r24,lo8(3)
 195 0064 00C0      		rjmp .L8
 196               	.L11:
1983:Lib/FATFs/ff.c **** 		return 2;
 197               		.loc 1 1983 0
 198 0066 82E0      		ldi r24,lo8(2)
 199 0068 00C0      		rjmp .L8
 200               	.LVL13:
 201               	.L12:
1986:Lib/FATFs/ff.c **** 		return 0;
 202               		.loc 1 1986 0
 203 006a 80E0      		ldi r24,0
 204               	.LVL14:
 205               	.L8:
 206               	/* epilogue start */
1988:Lib/FATFs/ff.c **** 		return 0;
1989:Lib/FATFs/ff.c **** 
1990:Lib/FATFs/ff.c **** 	return 1;
1991:Lib/FATFs/ff.c **** }
 207               		.loc 1 1991 0
 208 006c DF91      		pop r29
 209 006e CF91      		pop r28
 210 0070 0F91      		pop r16
 211 0072 0895      		ret
 212               		.cfi_endproc
 213               	.LFE217:
 215               		.section	.text.validate,"ax",@progbits
 217               	validate:
 218               	.LFB219:
1992:Lib/FATFs/ff.c **** 
1993:Lib/FATFs/ff.c **** 
1994:Lib/FATFs/ff.c **** 
1995:Lib/FATFs/ff.c **** 
1996:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1997:Lib/FATFs/ff.c **** /* Check if the file system object is valid or not                       */
1998:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1999:Lib/FATFs/ff.c **** 
2000:Lib/FATFs/ff.c **** static
2001:Lib/FATFs/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2002:Lib/FATFs/ff.c **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2003:Lib/FATFs/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2004:Lib/FATFs/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
2005:Lib/FATFs/ff.c **** )
2006:Lib/FATFs/ff.c **** {
2007:Lib/FATFs/ff.c **** 	BYTE fmt, b, *tbl;
2008:Lib/FATFs/ff.c **** 	UINT vol;
2009:Lib/FATFs/ff.c **** 	DSTATUS stat;
2010:Lib/FATFs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2011:Lib/FATFs/ff.c **** 	WORD nrsv;
2012:Lib/FATFs/ff.c **** 	const TCHAR *p = *path;
2013:Lib/FATFs/ff.c **** 	FATFS *fs;
2014:Lib/FATFs/ff.c **** 
2015:Lib/FATFs/ff.c **** 	/* Get logical drive number from the path name */
2016:Lib/FATFs/ff.c **** 	vol = p[0] - '0';					/* Is there a drive number? */
2017:Lib/FATFs/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
2018:Lib/FATFs/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
2019:Lib/FATFs/ff.c **** 	} else {							/* No drive number is given */
2020:Lib/FATFs/ff.c **** #if _FS_RPATH
2021:Lib/FATFs/ff.c **** 		vol = CurrVol;					/* Use current drive */
2022:Lib/FATFs/ff.c **** #else
2023:Lib/FATFs/ff.c **** 		vol = 0;						/* Use drive 0 */
2024:Lib/FATFs/ff.c **** #endif
2025:Lib/FATFs/ff.c **** 	}
2026:Lib/FATFs/ff.c **** 
2027:Lib/FATFs/ff.c **** 	/* Check if the logical drive is valid or not */
2028:Lib/FATFs/ff.c **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
2029:Lib/FATFs/ff.c **** 		return FR_INVALID_DRIVE;
2030:Lib/FATFs/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
2031:Lib/FATFs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2032:Lib/FATFs/ff.c **** 
2033:Lib/FATFs/ff.c **** 	ENTER_FF(fs);						/* Lock file system */
2034:Lib/FATFs/ff.c **** 
2035:Lib/FATFs/ff.c **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
2036:Lib/FATFs/ff.c **** 		stat = disk_status(fs->drv);
2037:Lib/FATFs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
2038:Lib/FATFs/ff.c **** #if !_FS_READONLY
2039:Lib/FATFs/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
2040:Lib/FATFs/ff.c **** 				return FR_WRITE_PROTECTED;
2041:Lib/FATFs/ff.c **** #endif
2042:Lib/FATFs/ff.c **** 			return FR_OK;				/* The file system object is valid */
2043:Lib/FATFs/ff.c **** 		}
2044:Lib/FATFs/ff.c **** 	}
2045:Lib/FATFs/ff.c **** 
2046:Lib/FATFs/ff.c **** 	/* The logical drive must be mounted. */
2047:Lib/FATFs/ff.c **** 	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */
2048:Lib/FATFs/ff.c **** 
2049:Lib/FATFs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
2050:Lib/FATFs/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
2051:Lib/FATFs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
2052:Lib/FATFs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2053:Lib/FATFs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
2054:Lib/FATFs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2055:Lib/FATFs/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2056:Lib/FATFs/ff.c **** 		return FR_DISK_ERR;
2057:Lib/FATFs/ff.c **** #endif
2058:Lib/FATFs/ff.c **** #if !_FS_READONLY
2059:Lib/FATFs/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2060:Lib/FATFs/ff.c **** 		return FR_WRITE_PROTECTED;
2061:Lib/FATFs/ff.c **** #endif
2062:Lib/FATFs/ff.c **** 	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
2063:Lib/FATFs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
2064:Lib/FATFs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
2065:Lib/FATFs/ff.c **** 		/* Check the partition listed in top of the partition table */
2066:Lib/FATFs/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
2067:Lib/FATFs/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
2068:Lib/FATFs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
2069:Lib/FATFs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
2070:Lib/FATFs/ff.c **** 		}
2071:Lib/FATFs/ff.c **** 	}
2072:Lib/FATFs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
2073:Lib/FATFs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
2074:Lib/FATFs/ff.c **** 
2075:Lib/FATFs/ff.c **** 	/* Following code initializes the file system object */
2076:Lib/FATFs/ff.c **** 
2077:Lib/FATFs/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
2078:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
2079:Lib/FATFs/ff.c **** 
2080:Lib/FATFs/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
2081:Lib/FATFs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
2082:Lib/FATFs/ff.c **** 	fs->fsize = fasize;
2083:Lib/FATFs/ff.c **** 
2084:Lib/FATFs/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
2085:Lib/FATFs/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
2086:Lib/FATFs/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
2087:Lib/FATFs/ff.c **** 
2088:Lib/FATFs/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
2089:Lib/FATFs/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2090:Lib/FATFs/ff.c **** 
2091:Lib/FATFs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
2092:Lib/FATFs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
2093:Lib/FATFs/ff.c **** 
2094:Lib/FATFs/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
2095:Lib/FATFs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
2096:Lib/FATFs/ff.c **** 
2097:Lib/FATFs/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
2098:Lib/FATFs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
2099:Lib/FATFs/ff.c **** 
2100:Lib/FATFs/ff.c **** 	/* Determine the FAT sub type */
2101:Lib/FATFs/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
2102:Lib/FATFs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2103:Lib/FATFs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2104:Lib/FATFs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2105:Lib/FATFs/ff.c **** 	fmt = FS_FAT12;
2106:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2107:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2108:Lib/FATFs/ff.c **** 
2109:Lib/FATFs/ff.c **** 	/* Boundaries and Limits */
2110:Lib/FATFs/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2111:Lib/FATFs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
2112:Lib/FATFs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2113:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
2114:Lib/FATFs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2115:Lib/FATFs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
2116:Lib/FATFs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
2117:Lib/FATFs/ff.c **** 	} else {
2118:Lib/FATFs/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2119:Lib/FATFs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2120:Lib/FATFs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2121:Lib/FATFs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2122:Lib/FATFs/ff.c **** 	}
2123:Lib/FATFs/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
2124:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
2125:Lib/FATFs/ff.c **** 
2126:Lib/FATFs/ff.c **** #if !_FS_READONLY
2127:Lib/FATFs/ff.c **** 	/* Initialize cluster allocation information */
2128:Lib/FATFs/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
2129:Lib/FATFs/ff.c **** 	fs->last_clust = 0;
2130:Lib/FATFs/ff.c **** 
2131:Lib/FATFs/ff.c **** 	/* Get fsinfo if available */
2132:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
2133:Lib/FATFs/ff.c **** 	 	fs->fsi_flag = 0;
2134:Lib/FATFs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
2135:Lib/FATFs/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
2136:Lib/FATFs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
2137:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
2138:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
2139:Lib/FATFs/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
2140:Lib/FATFs/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
2141:Lib/FATFs/ff.c **** 		}
2142:Lib/FATFs/ff.c **** 	}
2143:Lib/FATFs/ff.c **** #endif
2144:Lib/FATFs/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
2145:Lib/FATFs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
2146:Lib/FATFs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
2147:Lib/FATFs/ff.c **** 	fs->wflag = 0;
2148:Lib/FATFs/ff.c **** #if _FS_RPATH
2149:Lib/FATFs/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
2150:Lib/FATFs/ff.c **** #endif
2151:Lib/FATFs/ff.c **** #if _FS_SHARE				/* Clear file lock semaphores */
2152:Lib/FATFs/ff.c **** 	clear_lock(fs);
2153:Lib/FATFs/ff.c **** #endif
2154:Lib/FATFs/ff.c **** 
2155:Lib/FATFs/ff.c **** 	return FR_OK;
2156:Lib/FATFs/ff.c **** }
2157:Lib/FATFs/ff.c **** 
2158:Lib/FATFs/ff.c **** 
2159:Lib/FATFs/ff.c **** 
2160:Lib/FATFs/ff.c **** 
2161:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2162:Lib/FATFs/ff.c **** /* Check if the file/dir object is valid or not                          */
2163:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2164:Lib/FATFs/ff.c **** 
2165:Lib/FATFs/ff.c **** static
2166:Lib/FATFs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2167:Lib/FATFs/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
2168:Lib/FATFs/ff.c **** 	WORD id			/* Member id of the target object to be checked */
2169:Lib/FATFs/ff.c **** )
2170:Lib/FATFs/ff.c **** {
 219               		.loc 1 2170 0
 220               		.cfi_startproc
 221               	.LVL15:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
2171:Lib/FATFs/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
 226               		.loc 1 2171 0
 227 0000 0097      		sbiw r24,0
 228 0002 01F0      		breq .L17
 229               		.loc 1 2171 0 is_stmt 0 discriminator 1
 230 0004 FC01      		movw r30,r24
 231 0006 2081      		ld r18,Z
 232 0008 2223      		tst r18
 233 000a 01F0      		breq .L17
 234               		.loc 1 2171 0 discriminator 2
 235 000c 2681      		ldd r18,Z+6
 236 000e 3781      		ldd r19,Z+7
 237 0010 2617      		cp r18,r22
 238 0012 3707      		cpc r19,r23
 239 0014 01F4      		brne .L17
2172:Lib/FATFs/ff.c **** 		return FR_INVALID_OBJECT;
2173:Lib/FATFs/ff.c **** 
2174:Lib/FATFs/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
2175:Lib/FATFs/ff.c **** 
2176:Lib/FATFs/ff.c **** 	if (disk_status(fs->drv) & STA_NOINIT)
 240               		.loc 1 2176 0 is_stmt 1
 241 0016 8181      		ldd r24,Z+1
 242               	.LVL16:
 243 0018 0E94 0000 		call disk_status
 244               	.LVL17:
 245 001c 80FD      		sbrc r24,0
 246 001e 00C0      		rjmp .L18
2177:Lib/FATFs/ff.c **** 		return FR_NOT_READY;
2178:Lib/FATFs/ff.c **** 
2179:Lib/FATFs/ff.c **** 	return FR_OK;
 247               		.loc 1 2179 0
 248 0020 80E0      		ldi r24,0
 249 0022 0895      		ret
 250               	.LVL18:
 251               	.L17:
2172:Lib/FATFs/ff.c **** 		return FR_INVALID_OBJECT;
 252               		.loc 1 2172 0
 253 0024 89E0      		ldi r24,lo8(9)
 254               	.LVL19:
 255 0026 0895      		ret
 256               	.LVL20:
 257               	.L18:
2177:Lib/FATFs/ff.c **** 		return FR_NOT_READY;
 258               		.loc 1 2177 0
 259 0028 83E0      		ldi r24,lo8(3)
2180:Lib/FATFs/ff.c **** }
 260               		.loc 1 2180 0
 261 002a 0895      		ret
 262               		.cfi_endproc
 263               	.LFE219:
 265               		.section	.text.clust2sect,"ax",@progbits
 266               	.global	clust2sect
 268               	clust2sect:
 269               	.LFB210:
 799:Lib/FATFs/ff.c **** 	clst -= 2;
 270               		.loc 1 799 0
 271               		.cfi_startproc
 272               	.LVL21:
 273 0000 0F93      		push r16
 274               	.LCFI10:
 275               		.cfi_def_cfa_offset 3
 276               		.cfi_offset 16, -2
 277 0002 1F93      		push r17
 278               	.LCFI11:
 279               		.cfi_def_cfa_offset 4
 280               		.cfi_offset 17, -3
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 2 */
 284               	.L__stack_usage = 2
 285 0004 FC01      		movw r30,r24
 800:Lib/FATFs/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 286               		.loc 1 800 0
 287 0006 9A01      		movw r18,r20
 288 0008 AB01      		movw r20,r22
 289 000a 2250      		subi r18,2
 290 000c 3109      		sbc r19,__zero_reg__
 291 000e 4109      		sbc r20,__zero_reg__
 292 0010 5109      		sbc r21,__zero_reg__
 293               	.LVL22:
 801:Lib/FATFs/ff.c **** 	return clst * fs->csize + fs->database;
 294               		.loc 1 801 0
 295 0012 8285      		ldd r24,Z+10
 296 0014 9385      		ldd r25,Z+11
 297 0016 A485      		ldd r26,Z+12
 298 0018 B585      		ldd r27,Z+13
 299               	.LVL23:
 300 001a 0297      		sbiw r24,2
 301 001c A109      		sbc r26,__zero_reg__
 302 001e B109      		sbc r27,__zero_reg__
 303 0020 2817      		cp r18,r24
 304 0022 3907      		cpc r19,r25
 305 0024 4A07      		cpc r20,r26
 306 0026 5B07      		cpc r21,r27
 307 0028 00F4      		brsh .L21
 802:Lib/FATFs/ff.c **** }
 308               		.loc 1 802 0
 309 002a A281      		ldd r26,Z+2
 310 002c B0E0      		ldi r27,0
 311 002e 0E94 0000 		call __muluhisi3
 312 0032 028D      		ldd r16,Z+26
 313 0034 138D      		ldd r17,Z+27
 314 0036 248D      		ldd r18,Z+28
 315 0038 358D      		ldd r19,Z+29
 316 003a 600F      		add r22,r16
 317 003c 711F      		adc r23,r17
 318 003e 821F      		adc r24,r18
 319 0040 931F      		adc r25,r19
 320 0042 00C0      		rjmp .L20
 321               	.L21:
 801:Lib/FATFs/ff.c **** 	return clst * fs->csize + fs->database;
 322               		.loc 1 801 0
 323 0044 60E0      		ldi r22,0
 324 0046 70E0      		ldi r23,0
 325 0048 CB01      		movw r24,r22
 326               	.L20:
 327               	/* epilogue start */
 803:Lib/FATFs/ff.c **** 
 328               		.loc 1 803 0
 329 004a 1F91      		pop r17
 330 004c 0F91      		pop r16
 331 004e 0895      		ret
 332               		.cfi_endproc
 333               	.LFE210:
 335               		.section	.text.get_fat,"ax",@progbits
 336               	.global	get_fat
 338               	get_fat:
 339               	.LFB211:
 817:Lib/FATFs/ff.c **** 	UINT wc, bc;
 340               		.loc 1 817 0
 341               		.cfi_startproc
 342               	.LVL24:
 343 0000 AF92      		push r10
 344               	.LCFI12:
 345               		.cfi_def_cfa_offset 3
 346               		.cfi_offset 10, -2
 347 0002 BF92      		push r11
 348               	.LCFI13:
 349               		.cfi_def_cfa_offset 4
 350               		.cfi_offset 11, -3
 351 0004 CF92      		push r12
 352               	.LCFI14:
 353               		.cfi_def_cfa_offset 5
 354               		.cfi_offset 12, -4
 355 0006 DF92      		push r13
 356               	.LCFI15:
 357               		.cfi_def_cfa_offset 6
 358               		.cfi_offset 13, -5
 359 0008 EF92      		push r14
 360               	.LCFI16:
 361               		.cfi_def_cfa_offset 7
 362               		.cfi_offset 14, -6
 363 000a FF92      		push r15
 364               	.LCFI17:
 365               		.cfi_def_cfa_offset 8
 366               		.cfi_offset 15, -7
 367 000c 0F93      		push r16
 368               	.LCFI18:
 369               		.cfi_def_cfa_offset 9
 370               		.cfi_offset 16, -8
 371 000e 1F93      		push r17
 372               	.LCFI19:
 373               		.cfi_def_cfa_offset 10
 374               		.cfi_offset 17, -9
 375 0010 CF93      		push r28
 376               	.LCFI20:
 377               		.cfi_def_cfa_offset 11
 378               		.cfi_offset 28, -10
 379 0012 DF93      		push r29
 380               	.LCFI21:
 381               		.cfi_def_cfa_offset 12
 382               		.cfi_offset 29, -11
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 10 */
 386               	.L__stack_usage = 10
 822:Lib/FATFs/ff.c **** 		return 1;
 387               		.loc 1 822 0
 388 0014 4230      		cpi r20,2
 389 0016 5105      		cpc r21,__zero_reg__
 390 0018 6105      		cpc r22,__zero_reg__
 391 001a 7105      		cpc r23,__zero_reg__
 392 001c 00F4      		brsh .+2
 393 001e 00C0      		rjmp .L31
 822:Lib/FATFs/ff.c **** 		return 1;
 394               		.loc 1 822 0 is_stmt 0 discriminator 1
 395 0020 FC01      		movw r30,r24
 396 0022 0285      		ldd r16,Z+10
 397 0024 1385      		ldd r17,Z+11
 398 0026 2485      		ldd r18,Z+12
 399 0028 3585      		ldd r19,Z+13
 400 002a 4017      		cp r20,r16
 401 002c 5107      		cpc r21,r17
 402 002e 6207      		cpc r22,r18
 403 0030 7307      		cpc r23,r19
 404 0032 00F0      		brlo .+2
 405 0034 00C0      		rjmp .L31
 406 0036 6A01      		movw r12,r20
 407 0038 7B01      		movw r14,r22
 408 003a EC01      		movw r28,r24
 825:Lib/FATFs/ff.c **** 	case FS_FAT12 :
 409               		.loc 1 825 0 is_stmt 1
 410 003c 8081      		ld r24,Z
 411               	.LVL25:
 412 003e 8230      		cpi r24,lo8(2)
 413 0040 01F4      		brne .+2
 414 0042 00C0      		rjmp .L24
 415 0044 8330      		cpi r24,lo8(3)
 416 0046 01F4      		brne .+2
 417 0048 00C0      		rjmp .L25
 418 004a 8130      		cpi r24,lo8(1)
 419 004c 01F0      		breq .+2
 420 004e 00C0      		rjmp .L33
 421               	.LVL26:
 827:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 422               		.loc 1 827 0
 423 0050 5A01      		movw r10,r20
 424 0052 B694      		lsr r11
 425 0054 A794      		ror r10
 426 0056 AC0C      		add r10,r12
 427 0058 BD1C      		adc r11,r13
 428               	.LVL27:
 828:Lib/FATFs/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 429               		.loc 1 828 0
 430 005a C501      		movw r24,r10
 431 005c 892F      		mov r24,r25
 432 005e 9927      		clr r25
 433 0060 8695      		lsr r24
 434 0062 4A89      		ldd r20,Y+18
 435 0064 5B89      		ldd r21,Y+19
 436 0066 6C89      		ldd r22,Y+20
 437 0068 7D89      		ldd r23,Y+21
 438               	.LVL28:
 439 006a 480F      		add r20,r24
 440 006c 591F      		adc r21,r25
 441 006e 611D      		adc r22,__zero_reg__
 442 0070 711D      		adc r23,__zero_reg__
 443 0072 CE01      		movw r24,r28
 444 0074 0E94 0000 		call move_window
 445               	.LVL29:
 446 0078 8111      		cpse r24,__zero_reg__
 447 007a 00C0      		rjmp .L33
 829:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 448               		.loc 1 829 0
 449 007c F501      		movw r30,r10
 450 007e F170      		andi r31,1
 451 0080 EC0F      		add r30,r28
 452 0082 FD1F      		adc r31,r29
 453 0084 12A1      		ldd r17,Z+34
 454               	.LVL30:
 455 0086 FFEF      		ldi r31,-1
 456 0088 AF1A      		sub r10,r31
 457 008a BF0A      		sbc r11,r31
 458               	.LVL31:
 830:Lib/FATFs/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 459               		.loc 1 830 0
 460 008c C501      		movw r24,r10
 461 008e 892F      		mov r24,r25
 462 0090 9927      		clr r25
 463 0092 8695      		lsr r24
 464 0094 4A89      		ldd r20,Y+18
 465 0096 5B89      		ldd r21,Y+19
 466 0098 6C89      		ldd r22,Y+20
 467 009a 7D89      		ldd r23,Y+21
 468 009c 480F      		add r20,r24
 469 009e 591F      		adc r21,r25
 470 00a0 611D      		adc r22,__zero_reg__
 471 00a2 711D      		adc r23,__zero_reg__
 472 00a4 CE01      		movw r24,r28
 473 00a6 0E94 0000 		call move_window
 474               	.LVL32:
 475 00aa 8111      		cpse r24,__zero_reg__
 476 00ac 00C0      		rjmp .L33
 831:Lib/FATFs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 477               		.loc 1 831 0
 478 00ae C501      		movw r24,r10
 479 00b0 9170      		andi r25,1
 480 00b2 FE01      		movw r30,r28
 481 00b4 E80F      		add r30,r24
 482 00b6 F91F      		adc r31,r25
 483 00b8 82A1      		ldd r24,Z+34
 484 00ba 612F      		mov r22,r17
 485 00bc 70E0      		ldi r23,0
 486 00be 782B      		or r23,r24
 487               	.LVL33:
 832:Lib/FATFs/ff.c **** 
 488               		.loc 1 832 0
 489 00c0 C0FE      		sbrs r12,0
 490 00c2 00C0      		rjmp .L29
 832:Lib/FATFs/ff.c **** 
 491               		.loc 1 832 0 is_stmt 0 discriminator 1
 492 00c4 54E0      		ldi r21,4
 493               		1:
 494 00c6 7695      		lsr r23
 495 00c8 6795      		ror r22
 496 00ca 5A95      		dec r21
 497 00cc 01F4      		brne 1b
 498               	.LVL34:
 499 00ce 00C0      		rjmp .L34
 500               	.LVL35:
 501               	.L29:
 832:Lib/FATFs/ff.c **** 
 502               		.loc 1 832 0 discriminator 2
 503 00d0 7F70      		andi r23,15
 504               	.LVL36:
 505               	.L34:
 506 00d2 80E0      		ldi r24,0
 507 00d4 90E0      		ldi r25,0
 508 00d6 00C0      		rjmp .L23
 509               	.LVL37:
 510               	.L24:
 835:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 511               		.loc 1 835 0 is_stmt 1
 512 00d8 7727      		clr r23
 513 00da 6F2D      		mov r22,r15
 514 00dc 5E2D      		mov r21,r14
 515 00de 4D2D      		mov r20,r13
 516 00e0 8289      		ldd r24,Z+18
 517 00e2 9389      		ldd r25,Z+19
 518 00e4 A489      		ldd r26,Z+20
 519 00e6 B589      		ldd r27,Z+21
 520 00e8 480F      		add r20,r24
 521 00ea 591F      		adc r21,r25
 522 00ec 6A1F      		adc r22,r26
 523 00ee 7B1F      		adc r23,r27
 524 00f0 CF01      		movw r24,r30
 525 00f2 0E94 0000 		call move_window
 526               	.LVL38:
 527 00f6 8111      		cpse r24,__zero_reg__
 528 00f8 00C0      		rjmp .L33
 529               	.LVL39:
 836:Lib/FATFs/ff.c **** 		return LD_WORD(p);
 530               		.loc 1 836 0
 531 00fa CC0C      		lsl r12
 532 00fc DD1C      		rol r13
 533 00fe EE1C      		rol r14
 534 0100 FF1C      		rol r15
 535               	.LVL40:
 536 0102 E894      		clt
 537 0104 C0F8      		bld r12,0
 538 0106 81E0      		ldi r24,1
 539 0108 D822      		and r13,r24
 540 010a EE24      		clr r14
 541 010c FF24      		clr r15
 542               	.LVL41:
 837:Lib/FATFs/ff.c **** 
 543               		.loc 1 837 0
 544 010e FE01      		movw r30,r28
 545 0110 EC0D      		add r30,r12
 546 0112 FD1D      		adc r31,r13
 547 0114 62A1      		ldd r22,Z+34
 548 0116 73A1      		ldd r23,Z+35
 549 0118 00C0      		rjmp .L34
 550               	.LVL42:
 551               	.L25:
 840:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 552               		.loc 1 840 0
 553 011a 8289      		ldd r24,Z+18
 554 011c 9389      		ldd r25,Z+19
 555 011e A489      		ldd r26,Z+20
 556 0120 B589      		ldd r27,Z+21
 557 0122 27E0      		ldi r18,7
 558               		1:
 559 0124 7695      		lsr r23
 560 0126 6795      		ror r22
 561 0128 5795      		ror r21
 562 012a 4795      		ror r20
 563 012c 2A95      		dec r18
 564 012e 01F4      		brne 1b
 565 0130 480F      		add r20,r24
 566 0132 591F      		adc r21,r25
 567 0134 6A1F      		adc r22,r26
 568 0136 7B1F      		adc r23,r27
 569 0138 CF01      		movw r24,r30
 570 013a 0E94 0000 		call move_window
 571               	.LVL43:
 572 013e 8111      		cpse r24,__zero_reg__
 573 0140 00C0      		rjmp .L33
 574               	.LVL44:
 841:Lib/FATFs/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 575               		.loc 1 841 0
 576 0142 82E0      		ldi r24,2
 577               		1:
 578 0144 CC0C      		lsl r12
 579 0146 DD1C      		rol r13
 580 0148 EE1C      		rol r14
 581 014a FF1C      		rol r15
 582 014c 8A95      		dec r24
 583 014e 01F4      		brne 1b
 584               	.LVL45:
 585 0150 ECEF      		ldi r30,252
 586 0152 CE22      		and r12,r30
 587 0154 E1E0      		ldi r30,1
 588 0156 DE22      		and r13,r30
 589 0158 EE24      		clr r14
 590 015a FF24      		clr r15
 591               	.LVL46:
 842:Lib/FATFs/ff.c **** 	}
 592               		.loc 1 842 0
 593 015c FE01      		movw r30,r28
 594 015e EC0D      		add r30,r12
 595 0160 FD1D      		adc r31,r13
 596 0162 82A1      		ldd r24,Z+34
 597 0164 93A1      		ldd r25,Z+35
 598 0166 A4A1      		ldd r26,Z+36
 599 0168 B5A1      		ldd r27,Z+37
 600 016a BC01      		movw r22,r24
 601 016c CD01      		movw r24,r26
 602 016e 9F70      		andi r25,15
 603 0170 00C0      		rjmp .L23
 604               	.LVL47:
 605               	.L31:
 823:Lib/FATFs/ff.c **** 
 606               		.loc 1 823 0
 607 0172 61E0      		ldi r22,lo8(1)
 608 0174 70E0      		ldi r23,0
 609 0176 80E0      		ldi r24,0
 610 0178 90E0      		ldi r25,0
 611 017a 00C0      		rjmp .L23
 612               	.LVL48:
 613               	.L33:
 845:Lib/FATFs/ff.c **** }
 614               		.loc 1 845 0
 615 017c 6FEF      		ldi r22,lo8(-1)
 616 017e 7FEF      		ldi r23,lo8(-1)
 617 0180 CB01      		movw r24,r22
 618               	.LVL49:
 619               	.L23:
 620               	/* epilogue start */
 846:Lib/FATFs/ff.c **** 
 621               		.loc 1 846 0
 622 0182 DF91      		pop r29
 623 0184 CF91      		pop r28
 624 0186 1F91      		pop r17
 625 0188 0F91      		pop r16
 626 018a FF90      		pop r15
 627 018c EF90      		pop r14
 628 018e DF90      		pop r13
 629 0190 CF90      		pop r12
 630 0192 BF90      		pop r11
 631 0194 AF90      		pop r10
 632 0196 0895      		ret
 633               		.cfi_endproc
 634               	.LFE211:
 636               		.section	.text.dir_sdi.constprop.3,"ax",@progbits
 638               	dir_sdi.constprop.3:
 639               	.LFB231:
1059:Lib/FATFs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 640               		.loc 1 1059 0
 641               		.cfi_startproc
 642               	.LVL50:
 643 0000 0F93      		push r16
 644               	.LCFI22:
 645               		.cfi_def_cfa_offset 3
 646               		.cfi_offset 16, -2
 647 0002 1F93      		push r17
 648               	.LCFI23:
 649               		.cfi_def_cfa_offset 4
 650               		.cfi_offset 17, -3
 651 0004 CF93      		push r28
 652               	.LCFI24:
 653               		.cfi_def_cfa_offset 5
 654               		.cfi_offset 28, -4
 655 0006 DF93      		push r29
 656               	.LCFI25:
 657               		.cfi_def_cfa_offset 6
 658               		.cfi_offset 29, -5
 659               	/* prologue: function */
 660               	/* frame size = 0 */
 661               	/* stack size = 4 */
 662               	.L__stack_usage = 4
 663 0008 EC01      		movw r28,r24
 664               	.LVL51:
1068:Lib/FATFs/ff.c **** 	clst = dj->sclust;
 665               		.loc 1 1068 0
 666 000a 1D82      		std Y+5,__zero_reg__
 667 000c 1C82      		std Y+4,__zero_reg__
1069:Lib/FATFs/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 668               		.loc 1 1069 0
 669 000e 4E81      		ldd r20,Y+6
 670 0010 5F81      		ldd r21,Y+7
 671 0012 6885      		ldd r22,Y+8
 672 0014 7985      		ldd r23,Y+9
 673               	.LVL52:
1070:Lib/FATFs/ff.c **** 		return FR_INT_ERR;
 674               		.loc 1 1070 0
 675 0016 4130      		cpi r20,1
 676 0018 5105      		cpc r21,__zero_reg__
 677 001a 6105      		cpc r22,__zero_reg__
 678 001c 7105      		cpc r23,__zero_reg__
 679 001e 01F4      		brne .L36
 680               	.LVL53:
 681               	.L38:
1071:Lib/FATFs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 682               		.loc 1 1071 0
 683 0020 82E0      		ldi r24,lo8(2)
 684 0022 00C0      		rjmp .L37
 685               	.LVL54:
 686               	.L36:
1070:Lib/FATFs/ff.c **** 		return FR_INT_ERR;
 687               		.loc 1 1070 0
 688 0024 0881      		ld r16,Y
 689 0026 1981      		ldd r17,Y+1
 690 0028 F801      		movw r30,r16
 691 002a 8285      		ldd r24,Z+10
 692 002c 9385      		ldd r25,Z+11
 693 002e A485      		ldd r26,Z+12
 694 0030 B585      		ldd r27,Z+13
 695               	.LVL55:
 696 0032 4817      		cp r20,r24
 697 0034 5907      		cpc r21,r25
 698 0036 6A07      		cpc r22,r26
 699 0038 7B07      		cpc r23,r27
 700 003a 00F4      		brsh .L38
1072:Lib/FATFs/ff.c **** 		clst = dj->fs->dirbase;
 701               		.loc 1 1072 0
 702 003c 4115      		cp r20,__zero_reg__
 703 003e 5105      		cpc r21,__zero_reg__
 704 0040 6105      		cpc r22,__zero_reg__
 705 0042 7105      		cpc r23,__zero_reg__
 706 0044 01F4      		brne .L39
 707 0046 8081      		ld r24,Z
 708 0048 8330      		cpi r24,lo8(3)
 709 004a 01F4      		brne .L40
1073:Lib/FATFs/ff.c **** 
 710               		.loc 1 1073 0
 711 004c 4689      		ldd r20,Z+22
 712 004e 5789      		ldd r21,Z+23
 713 0050 608D      		ldd r22,Z+24
 714 0052 718D      		ldd r23,Z+25
 715               	.LVL56:
1075:Lib/FATFs/ff.c **** 		dj->clust = clst;
 716               		.loc 1 1075 0
 717 0054 4115      		cp r20,__zero_reg__
 718 0056 5105      		cpc r21,__zero_reg__
 719 0058 6105      		cpc r22,__zero_reg__
 720 005a 7105      		cpc r23,__zero_reg__
 721 005c 01F4      		brne .L39
 722               	.L40:
 723               	.LVL57:
1076:Lib/FATFs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 724               		.loc 1 1076 0
 725 005e 1A86      		std Y+10,__zero_reg__
 726 0060 1B86      		std Y+11,__zero_reg__
 727 0062 1C86      		std Y+12,__zero_reg__
 728 0064 1D86      		std Y+13,__zero_reg__
1077:Lib/FATFs/ff.c **** 			return FR_INT_ERR;
 729               		.loc 1 1077 0
 730 0066 F801      		movw r30,r16
 731 0068 8085      		ldd r24,Z+8
 732 006a 9185      		ldd r25,Z+9
 733 006c 892B      		or r24,r25
 734 006e 01F0      		breq .L38
1079:Lib/FATFs/ff.c **** 	}
 735               		.loc 1 1079 0
 736 0070 8689      		ldd r24,Z+22
 737 0072 9789      		ldd r25,Z+23
 738 0074 A08D      		ldd r26,Z+24
 739 0076 B18D      		ldd r27,Z+25
 740 0078 8E87      		std Y+14,r24
 741 007a 9F87      		std Y+15,r25
 742 007c A88B      		std Y+16,r26
 743 007e B98B      		std Y+17,r27
 744 0080 00C0      		rjmp .L41
 745               	.LVL58:
 746               	.L39:
1082:Lib/FATFs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 747               		.loc 1 1082 0
 748 0082 F801      		movw r30,r16
 749 0084 8281      		ldd r24,Z+2
 750               	.LVL59:
1083:Lib/FATFs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 751               		.loc 1 1083 0
 752 0086 8111      		cpse r24,__zero_reg__
 753 0088 00C0      		rjmp .L42
 754               	.LVL60:
 755               	.L43:
1084:Lib/FATFs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 756               		.loc 1 1084 0
 757 008a 8881      		ld r24,Y
 758 008c 9981      		ldd r25,Y+1
 759 008e 0E94 0000 		call get_fat
 760               	.LVL61:
 761 0092 AB01      		movw r20,r22
 762 0094 BC01      		movw r22,r24
 763               	.LVL62:
1085:Lib/FATFs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 764               		.loc 1 1085 0
 765 0096 4F3F      		cpi r20,-1
 766 0098 FFEF      		ldi r31,-1
 767 009a 5F07      		cpc r21,r31
 768 009c 6F07      		cpc r22,r31
 769 009e 7F07      		cpc r23,r31
 770 00a0 01F0      		breq .L44
1086:Lib/FATFs/ff.c **** 				return FR_INT_ERR;
 771               		.loc 1 1086 0
 772 00a2 4230      		cpi r20,2
 773 00a4 5105      		cpc r21,__zero_reg__
 774 00a6 6105      		cpc r22,__zero_reg__
 775 00a8 7105      		cpc r23,__zero_reg__
 776 00aa 00F4      		brsh .+2
 777 00ac 00C0      		rjmp .L38
 778 00ae E881      		ld r30,Y
 779 00b0 F981      		ldd r31,Y+1
 780 00b2 8285      		ldd r24,Z+10
 781 00b4 9385      		ldd r25,Z+11
 782 00b6 A485      		ldd r26,Z+12
 783 00b8 B585      		ldd r27,Z+13
 784 00ba 4817      		cp r20,r24
 785 00bc 5907      		cpc r21,r25
 786 00be 6A07      		cpc r22,r26
 787 00c0 7B07      		cpc r23,r27
 788 00c2 00F0      		brlo .L43
 789 00c4 00C0      		rjmp .L38
 790               	.LVL63:
 791               	.L42:
1090:Lib/FATFs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 792               		.loc 1 1090 0
 793 00c6 4A87      		std Y+10,r20
 794 00c8 5B87      		std Y+11,r21
 795 00ca 6C87      		std Y+12,r22
 796 00cc 7D87      		std Y+13,r23
1091:Lib/FATFs/ff.c **** 	}
 797               		.loc 1 1091 0
 798 00ce C801      		movw r24,r16
 799               	.LVL64:
 800 00d0 0E94 0000 		call clust2sect
 801               	.LVL65:
 802 00d4 6E87      		std Y+14,r22
 803 00d6 7F87      		std Y+15,r23
 804 00d8 888B      		std Y+16,r24
 805 00da 998B      		std Y+17,r25
 806               	.L41:
1094:Lib/FATFs/ff.c **** 
 807               		.loc 1 1094 0
 808 00dc C801      		movw r24,r16
 809 00de 8296      		adiw r24,34
 810 00e0 9B8B      		std Y+19,r25
 811 00e2 8A8B      		std Y+18,r24
1096:Lib/FATFs/ff.c **** }
 812               		.loc 1 1096 0
 813 00e4 80E0      		ldi r24,0
 814 00e6 00C0      		rjmp .L37
 815               	.LVL66:
 816               	.L44:
1085:Lib/FATFs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 817               		.loc 1 1085 0
 818 00e8 81E0      		ldi r24,lo8(1)
 819               	.LVL67:
 820               	.L37:
 821               	/* epilogue start */
1097:Lib/FATFs/ff.c **** 
 822               		.loc 1 1097 0
 823 00ea DF91      		pop r29
 824 00ec CF91      		pop r28
 825               	.LVL68:
 826 00ee 1F91      		pop r17
 827 00f0 0F91      		pop r16
 828 00f2 0895      		ret
 829               		.cfi_endproc
 830               	.LFE231:
 832               		.section	.text.f_mount,"ax",@progbits
 833               	.global	f_mount
 835               	f_mount:
 836               	.LFB220:
2181:Lib/FATFs/ff.c **** 
2182:Lib/FATFs/ff.c **** 
2183:Lib/FATFs/ff.c **** 
2184:Lib/FATFs/ff.c **** 
2185:Lib/FATFs/ff.c **** /*--------------------------------------------------------------------------
2186:Lib/FATFs/ff.c **** 
2187:Lib/FATFs/ff.c ****    Public Functions
2188:Lib/FATFs/ff.c **** 
2189:Lib/FATFs/ff.c **** --------------------------------------------------------------------------*/
2190:Lib/FATFs/ff.c **** 
2191:Lib/FATFs/ff.c **** 
2192:Lib/FATFs/ff.c **** 
2193:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2194:Lib/FATFs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2195:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2196:Lib/FATFs/ff.c **** 
2197:Lib/FATFs/ff.c **** FRESULT f_mount (
2198:Lib/FATFs/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2199:Lib/FATFs/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2200:Lib/FATFs/ff.c **** )
2201:Lib/FATFs/ff.c **** {
 837               		.loc 1 2201 0
 838               		.cfi_startproc
 839               	.LVL69:
 840               	/* prologue: function */
 841               	/* frame size = 0 */
 842               	/* stack size = 0 */
 843               	.L__stack_usage = 0
2202:Lib/FATFs/ff.c **** 	FATFS *rfs;
2203:Lib/FATFs/ff.c **** 
2204:Lib/FATFs/ff.c **** 
2205:Lib/FATFs/ff.c **** 	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 844               		.loc 1 2205 0
 845 0000 8111      		cpse r24,__zero_reg__
 846 0002 00C0      		rjmp .L52
2206:Lib/FATFs/ff.c **** 		return FR_INVALID_DRIVE;
2207:Lib/FATFs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 847               		.loc 1 2207 0
 848 0004 E091 0000 		lds r30,FatFs
 849 0008 F091 0000 		lds r31,FatFs+1
 850               	.LVL70:
2208:Lib/FATFs/ff.c **** 
2209:Lib/FATFs/ff.c **** 	if (rfs) {
 851               		.loc 1 2209 0
 852 000c 3097      		sbiw r30,0
 853 000e 01F0      		breq .L50
2210:Lib/FATFs/ff.c **** #if _FS_SHARE
2211:Lib/FATFs/ff.c **** 		clear_lock(rfs);
2212:Lib/FATFs/ff.c **** #endif
2213:Lib/FATFs/ff.c **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
2214:Lib/FATFs/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2215:Lib/FATFs/ff.c **** #endif
2216:Lib/FATFs/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
 854               		.loc 1 2216 0
 855 0010 1082      		st Z,__zero_reg__
 856               	.L50:
2217:Lib/FATFs/ff.c **** 	}
2218:Lib/FATFs/ff.c **** 
2219:Lib/FATFs/ff.c **** 	if (fs) {
 857               		.loc 1 2219 0
 858 0012 6115      		cp r22,__zero_reg__
 859 0014 7105      		cpc r23,__zero_reg__
 860 0016 01F0      		breq .L51
2220:Lib/FATFs/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
 861               		.loc 1 2220 0
 862 0018 FB01      		movw r30,r22
 863               	.LVL71:
 864 001a 1082      		st Z,__zero_reg__
 865               	.L51:
2221:Lib/FATFs/ff.c **** #if _FS_REENTRANT					/* Create sync object for the new volume */
2222:Lib/FATFs/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2223:Lib/FATFs/ff.c **** #endif
2224:Lib/FATFs/ff.c **** 	}
2225:Lib/FATFs/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
 866               		.loc 1 2225 0
 867 001c 7093 0000 		sts FatFs+1,r23
 868 0020 6093 0000 		sts FatFs,r22
 869               	.LVL72:
2226:Lib/FATFs/ff.c **** 
2227:Lib/FATFs/ff.c **** 	return FR_OK;
 870               		.loc 1 2227 0
 871 0024 80E0      		ldi r24,0
 872               	.LVL73:
 873 0026 0895      		ret
 874               	.LVL74:
 875               	.L52:
2206:Lib/FATFs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 876               		.loc 1 2206 0
 877 0028 8BE0      		ldi r24,lo8(11)
 878               	.LVL75:
2228:Lib/FATFs/ff.c **** }
 879               		.loc 1 2228 0
 880 002a 0895      		ret
 881               		.cfi_endproc
 882               	.LFE220:
 884               		.section	.rodata.str1.1,"aMS",@progbits,1
 885               	.LC0:
 886 0000 222A 2B2C 		.string	"\"*+,:;<=>?[]|\177"
 886      3A3B 3C3D 
 886      3E3F 5B5D 
 886      7C7F 00
 887               		.section	.text.f_open,"ax",@progbits
 888               	.global	f_open
 890               	f_open:
 891               	.LFB221:
2229:Lib/FATFs/ff.c **** 
2230:Lib/FATFs/ff.c **** 
2231:Lib/FATFs/ff.c **** 
2232:Lib/FATFs/ff.c **** 
2233:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2234:Lib/FATFs/ff.c **** /* Open or Create a File                                                 */
2235:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2236:Lib/FATFs/ff.c **** 
2237:Lib/FATFs/ff.c **** FRESULT f_open (
2238:Lib/FATFs/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
2239:Lib/FATFs/ff.c **** 	const TCHAR *path,	/* Pointer to the file name */
2240:Lib/FATFs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2241:Lib/FATFs/ff.c **** )
2242:Lib/FATFs/ff.c **** {
 892               		.loc 1 2242 0
 893               		.cfi_startproc
 894               	.LVL76:
 895 0000 2F92      		push r2
 896               	.LCFI26:
 897               		.cfi_def_cfa_offset 3
 898               		.cfi_offset 2, -2
 899 0002 3F92      		push r3
 900               	.LCFI27:
 901               		.cfi_def_cfa_offset 4
 902               		.cfi_offset 3, -3
 903 0004 4F92      		push r4
 904               	.LCFI28:
 905               		.cfi_def_cfa_offset 5
 906               		.cfi_offset 4, -4
 907 0006 5F92      		push r5
 908               	.LCFI29:
 909               		.cfi_def_cfa_offset 6
 910               		.cfi_offset 5, -5
 911 0008 6F92      		push r6
 912               	.LCFI30:
 913               		.cfi_def_cfa_offset 7
 914               		.cfi_offset 6, -6
 915 000a 7F92      		push r7
 916               	.LCFI31:
 917               		.cfi_def_cfa_offset 8
 918               		.cfi_offset 7, -7
 919 000c 8F92      		push r8
 920               	.LCFI32:
 921               		.cfi_def_cfa_offset 9
 922               		.cfi_offset 8, -8
 923 000e 9F92      		push r9
 924               	.LCFI33:
 925               		.cfi_def_cfa_offset 10
 926               		.cfi_offset 9, -9
 927 0010 AF92      		push r10
 928               	.LCFI34:
 929               		.cfi_def_cfa_offset 11
 930               		.cfi_offset 10, -10
 931 0012 BF92      		push r11
 932               	.LCFI35:
 933               		.cfi_def_cfa_offset 12
 934               		.cfi_offset 11, -11
 935 0014 CF92      		push r12
 936               	.LCFI36:
 937               		.cfi_def_cfa_offset 13
 938               		.cfi_offset 12, -12
 939 0016 DF92      		push r13
 940               	.LCFI37:
 941               		.cfi_def_cfa_offset 14
 942               		.cfi_offset 13, -13
 943 0018 EF92      		push r14
 944               	.LCFI38:
 945               		.cfi_def_cfa_offset 15
 946               		.cfi_offset 14, -14
 947 001a FF92      		push r15
 948               	.LCFI39:
 949               		.cfi_def_cfa_offset 16
 950               		.cfi_offset 15, -15
 951 001c 0F93      		push r16
 952               	.LCFI40:
 953               		.cfi_def_cfa_offset 17
 954               		.cfi_offset 16, -16
 955 001e 1F93      		push r17
 956               	.LCFI41:
 957               		.cfi_def_cfa_offset 18
 958               		.cfi_offset 17, -17
 959 0020 CF93      		push r28
 960               	.LCFI42:
 961               		.cfi_def_cfa_offset 19
 962               		.cfi_offset 28, -18
 963 0022 DF93      		push r29
 964               	.LCFI43:
 965               		.cfi_def_cfa_offset 20
 966               		.cfi_offset 29, -19
 967 0024 CDB7      		in r28,__SP_L__
 968 0026 DEB7      		in r29,__SP_H__
 969               	.LCFI44:
 970               		.cfi_def_cfa_register 28
 971 0028 E397      		sbiw r28,51
 972               	.LCFI45:
 973               		.cfi_def_cfa_offset 71
 974 002a 0FB6      		in __tmp_reg__,__SREG__
 975 002c F894      		cli
 976 002e DEBF      		out __SP_H__,r29
 977 0030 0FBE      		out __SREG__,__tmp_reg__
 978 0032 CDBF      		out __SP_L__,r28
 979               	/* prologue: function */
 980               	/* frame size = 51 */
 981               	/* stack size = 69 */
 982               	.L__stack_usage = 69
 983 0034 9CA3      		std Y+36,r25
 984 0036 8BA3      		std Y+35,r24
 985 0038 1B01      		movw r2,r22
 986 003a 4BAB      		std Y+51,r20
2243:Lib/FATFs/ff.c **** 	FRESULT res;
2244:Lib/FATFs/ff.c **** 	DIR dj;
2245:Lib/FATFs/ff.c **** 	BYTE *dir;
2246:Lib/FATFs/ff.c **** 	DEF_NAMEBUF;
2247:Lib/FATFs/ff.c **** 
2248:Lib/FATFs/ff.c **** 
2249:Lib/FATFs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 987               		.loc 1 2249 0
 988 003c DC01      		movw r26,r24
 989 003e 1D92      		st X+,__zero_reg__
 990 0040 1C92      		st X,__zero_reg__
 991               	.LVL77:
 992               	.LBB18:
 993               	.LBB19:
2016:Lib/FATFs/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 994               		.loc 1 2016 0
 995 0042 FB01      		movw r30,r22
 996 0044 8081      		ld r24,Z
 997               	.LVL78:
 998 0046 90E0      		ldi r25,0
 999 0048 C097      		sbiw r24,48
 1000               	.LVL79:
2017:Lib/FATFs/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
 1001               		.loc 1 2017 0
 1002 004a 8A30      		cpi r24,10
 1003 004c 9105      		cpc r25,__zero_reg__
 1004 004e 00F4      		brsh .L60
 1005 0050 2181      		ldd r18,Z+1
 1006 0052 2A33      		cpi r18,lo8(58)
 1007 0054 01F4      		brne .L60
2018:Lib/FATFs/ff.c **** 	} else {							/* No drive number is given */
 1008               		.loc 1 2018 0
 1009 0056 F2E0      		ldi r31,2
 1010 0058 2F0E      		add r2,r31
 1011 005a 311C      		adc r3,__zero_reg__
 1012               	.LVL80:
2028:Lib/FATFs/ff.c **** 		return FR_INVALID_DRIVE;
 1013               		.loc 1 2028 0
 1014 005c 892B      		or r24,r25
 1015 005e 01F0      		breq .+2
 1016 0060 00C0      		rjmp .L116
 1017               	.L60:
 1018               	.LVL81:
2030:Lib/FATFs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1019               		.loc 1 2030 0
 1020 0062 0091 0000 		lds r16,FatFs
 1021 0066 1091 0000 		lds r17,FatFs+1
 1022               	.LVL82:
 1023 006a 1A83      		std Y+2,r17
 1024 006c 0983      		std Y+1,r16
2031:Lib/FATFs/ff.c **** 
 1025               		.loc 1 2031 0
 1026 006e 0115      		cp r16,__zero_reg__
 1027 0070 1105      		cpc r17,__zero_reg__
 1028 0072 01F4      		brne .+2
 1029 0074 00C0      		rjmp .L117
2035:Lib/FATFs/ff.c **** 		stat = disk_status(fs->drv);
 1030               		.loc 1 2035 0
 1031 0076 D801      		movw r26,r16
 1032               	.LVL83:
 1033 0078 8C91      		ld r24,X
 1034 007a 8111      		cpse r24,__zero_reg__
 1035 007c 00C0      		rjmp .L62
 1036               	.LVL84:
 1037               	.L64:
2049:Lib/FATFs/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 1038               		.loc 1 2049 0
 1039 007e F801      		movw r30,r16
 1040 0080 1082      		st Z,__zero_reg__
2050:Lib/FATFs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 1041               		.loc 1 2050 0
 1042 0082 1182      		std Z+1,__zero_reg__
2051:Lib/FATFs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1043               		.loc 1 2051 0
 1044 0084 80E0      		ldi r24,0
 1045 0086 0E94 0000 		call disk_initialize
 1046               	.LVL85:
2052:Lib/FATFs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 1047               		.loc 1 2052 0
 1048 008a 80FD      		sbrc r24,0
 1049 008c 00C0      		rjmp .L118
 1050 008e 00C0      		rjmp .L183
 1051               	.LVL86:
 1052               	.L62:
2036:Lib/FATFs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 1053               		.loc 1 2036 0
 1054 0090 D801      		movw r26,r16
 1055 0092 1196      		adiw r26,1
 1056 0094 8C91      		ld r24,X
 1057 0096 0E94 0000 		call disk_status
 1058               	.LVL87:
2037:Lib/FATFs/ff.c **** #if !_FS_READONLY
 1059               		.loc 1 2037 0
 1060 009a 80FD      		sbrc r24,0
 1061 009c 00C0      		rjmp .L64
 1062 009e 00C0      		rjmp .L119
 1063               	.L183:
 1064               	.LVL88:
2063:Lib/FATFs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 1065               		.loc 1 2063 0
 1066 00a0 40E0      		ldi r20,0
 1067 00a2 50E0      		ldi r21,0
 1068 00a4 BA01      		movw r22,r20
 1069 00a6 C801      		movw r24,r16
 1070               	.LVL89:
 1071 00a8 0E94 0000 		call check_fs
 1072               	.LVL90:
2064:Lib/FATFs/ff.c **** 		/* Check the partition listed in top of the partition table */
 1073               		.loc 1 2064 0
 1074 00ac 8130      		cpi r24,lo8(1)
 1075 00ae 01F4      		brne .L120
 1076               	.LVL91:
2067:Lib/FATFs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 1077               		.loc 1 2067 0
 1078 00b0 F801      		movw r30,r16
 1079 00b2 EC51      		subi r30,28
 1080 00b4 FE4F      		sbci r31,-2
 1081 00b6 8081      		ld r24,Z
 1082               	.LVL92:
 1083 00b8 8823      		tst r24
 1084 00ba 01F4      		brne .+2
 1085 00bc 00C0      		rjmp .L148
2068:Lib/FATFs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
 1086               		.loc 1 2068 0
 1087 00be 3496      		adiw r30,4
 1088 00c0 4080      		ld r4,Z
 1089 00c2 5180      		ldd r5,Z+1
 1090 00c4 6280      		ldd r6,Z+2
 1091 00c6 7380      		ldd r7,Z+3
 1092               	.LVL93:
2069:Lib/FATFs/ff.c **** 		}
 1093               		.loc 1 2069 0
 1094 00c8 B301      		movw r22,r6
 1095 00ca A201      		movw r20,r4
 1096 00cc C801      		movw r24,r16
 1097 00ce 0E94 0000 		call check_fs
 1098               	.LVL94:
 1099 00d2 00C0      		rjmp .L65
 1100               	.LVL95:
 1101               	.L120:
2063:Lib/FATFs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 1102               		.loc 1 2063 0
 1103 00d4 412C      		mov r4,__zero_reg__
 1104 00d6 512C      		mov r5,__zero_reg__
 1105 00d8 3201      		movw r6,r4
 1106               	.LVL96:
 1107               	.L65:
2072:Lib/FATFs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 1108               		.loc 1 2072 0
 1109 00da 8330      		cpi r24,lo8(3)
 1110 00dc 01F4      		brne .+2
 1111 00de 00C0      		rjmp .L122
2073:Lib/FATFs/ff.c **** 
 1112               		.loc 1 2073 0
 1113 00e0 8111      		cpse r24,__zero_reg__
 1114 00e2 00C0      		rjmp .L148
2077:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
 1115               		.loc 1 2077 0
 1116 00e4 F801      		movw r30,r16
 1117 00e6 85A5      		ldd r24,Z+45
 1118 00e8 96A5      		ldd r25,Z+46
 1119               	.LVL97:
 1120 00ea 8115      		cp r24,__zero_reg__
 1121 00ec 9240      		sbci r25,2
 1122 00ee 01F0      		breq .+2
 1123 00f0 00C0      		rjmp .L148
2080:Lib/FATFs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 1124               		.loc 1 2080 0
 1125 00f2 D801      		movw r26,r16
 1126 00f4 D896      		adiw r26,56
 1127 00f6 8D90      		ld r8,X+
 1128 00f8 9C90      		ld r9,X
 1129 00fa D997      		sbiw r26,56+1
 1130 00fc A12C      		mov r10,__zero_reg__
 1131 00fe B12C      		mov r11,__zero_reg__
 1132               	.LVL98:
2081:Lib/FATFs/ff.c **** 	fs->fsize = fasize;
 1133               		.loc 1 2081 0
 1134 0100 8114      		cp r8,__zero_reg__
 1135 0102 9104      		cpc r9,__zero_reg__
 1136 0104 A104      		cpc r10,__zero_reg__
 1137 0106 B104      		cpc r11,__zero_reg__
 1138 0108 01F4      		brne .L66
 1139 010a F801      		movw r30,r16
 1140 010c EA5B      		subi r30,-70
 1141 010e FF4F      		sbci r31,-1
 1142 0110 8080      		ld r8,Z
 1143 0112 9180      		ldd r9,Z+1
 1144 0114 A280      		ldd r10,Z+2
 1145 0116 B380      		ldd r11,Z+3
 1146               	.LVL99:
 1147               	.L66:
2082:Lib/FATFs/ff.c **** 
 1148               		.loc 1 2082 0
 1149 0118 F801      		movw r30,r16
 1150 011a 8686      		std Z+14,r8
 1151 011c 9786      		std Z+15,r9
 1152 011e A08A      		std Z+16,r10
 1153 0120 B18A      		std Z+17,r11
2084:Lib/FATFs/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 1154               		.loc 1 2084 0
 1155 0122 A2A9      		ldd r26,Z+50
 1156               	.LVL100:
 1157 0124 A383      		std Z+3,r26
2085:Lib/FATFs/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
 1158               		.loc 1 2085 0
 1159 0126 8FEF      		ldi r24,lo8(-1)
 1160 0128 8A0F      		add r24,r26
 1161 012a 8230      		cpi r24,lo8(2)
 1162 012c 00F0      		brlo .+2
 1163 012e 00C0      		rjmp .L148
2086:Lib/FATFs/ff.c **** 
 1164               		.loc 1 2086 0
 1165 0130 B0E0      		ldi r27,0
 1166 0132 A501      		movw r20,r10
 1167 0134 9401      		movw r18,r8
 1168 0136 0E94 0000 		call __muluhisi3
 1169 013a 6BA7      		std Y+43,r22
 1170 013c 7CA7      		std Y+44,r23
 1171 013e 8DA7      		std Y+45,r24
 1172 0140 9EA7      		std Y+46,r25
 1173               	.LVL101:
2088:Lib/FATFs/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 1174               		.loc 1 2088 0
 1175 0142 27A5      		ldd r18,Z+47
 1176               	.LVL102:
 1177 0144 2283      		std Z+2,r18
2089:Lib/FATFs/ff.c **** 
 1178               		.loc 1 2089 0
 1179 0146 2223      		tst r18
 1180 0148 01F4      		brne .+2
 1181 014a 00C0      		rjmp .L148
 1182 014c 822F      		mov r24,r18
 1183 014e 90E0      		ldi r25,0
 1184 0150 AC01      		movw r20,r24
 1185 0152 4150      		subi r20,1
 1186 0154 5109      		sbc r21,__zero_reg__
 1187 0156 8423      		and r24,r20
 1188 0158 9523      		and r25,r21
 1189 015a 892B      		or r24,r25
 1190 015c 01F0      		breq .+2
 1191 015e 00C0      		rjmp .L148
2091:Lib/FATFs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 1192               		.loc 1 2091 0
 1193 0160 C3A8      		ldd r12,Z+51
 1194 0162 D4A8      		ldd r13,Z+52
 1195 0164 DAA6      		std Y+42,r13
 1196 0166 C9A6      		std Y+41,r12
 1197 0168 D186      		std Z+9,r13
 1198 016a C086      		std Z+8,r12
2092:Lib/FATFs/ff.c **** 
 1199               		.loc 1 2092 0
 1200 016c C601      		movw r24,r12
 1201 016e 8F70      		andi r24,15
 1202 0170 9927      		clr r25
 1203 0172 892B      		or r24,r25
 1204 0174 01F0      		breq .+2
 1205 0176 00C0      		rjmp .L148
2094:Lib/FATFs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 1206               		.loc 1 2094 0
 1207 0178 65A9      		ldd r22,Z+53
 1208 017a 76A9      		ldd r23,Z+54
 1209               	.LVL103:
 1210 017c CB01      		movw r24,r22
 1211 017e A0E0      		ldi r26,0
 1212 0180 B0E0      		ldi r27,0
 1213               	.LVL104:
2095:Lib/FATFs/ff.c **** 
 1214               		.loc 1 2095 0
 1215 0182 0097      		sbiw r24,0
 1216 0184 A105      		cpc r26,__zero_reg__
 1217 0186 B105      		cpc r27,__zero_reg__
 1218 0188 01F4      		brne .L67
 1219 018a EE5B      		subi r30,-66
 1220 018c FF4F      		sbci r31,-1
 1221 018e 8081      		ld r24,Z
 1222 0190 9181      		ldd r25,Z+1
 1223 0192 A281      		ldd r26,Z+2
 1224 0194 B381      		ldd r27,Z+3
 1225               	.LVL105:
 1226               	.L67:
2097:Lib/FATFs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 1227               		.loc 1 2097 0
 1228 0196 F801      		movw r30,r16
 1229 0198 40A9      		ldd r20,Z+48
 1230 019a 51A9      		ldd r21,Z+49
 1231               	.LVL106:
2098:Lib/FATFs/ff.c **** 
 1232               		.loc 1 2098 0
 1233 019c 4115      		cp r20,__zero_reg__
 1234 019e 5105      		cpc r21,__zero_reg__
 1235 01a0 01F4      		brne .+2
 1236 01a2 00C0      		rjmp .L148
2101:Lib/FATFs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1237               		.loc 1 2101 0
 1238 01a4 6A01      		movw r12,r20
 1239 01a6 E12C      		mov r14,__zero_reg__
 1240 01a8 F12C      		mov r15,__zero_reg__
 1241 01aa CFA6      		std Y+47,r12
 1242 01ac D8AA      		std Y+48,r13
 1243 01ae E9AA      		std Y+49,r14
 1244 01b0 FAAA      		std Y+50,r15
 1245 01b2 49A5      		ldd r20,Y+41
 1246 01b4 5AA5      		ldd r21,Y+42
 1247               	.LVL107:
 1248 01b6 64E0      		ldi r22,4
 1249               		1:
 1250 01b8 5695      		lsr r21
 1251 01ba 4795      		ror r20
 1252 01bc 6A95      		dec r22
 1253 01be 01F4      		brne 1b
 1254 01c0 C40E      		add r12,r20
 1255 01c2 D51E      		adc r13,r21
 1256 01c4 E11C      		adc r14,__zero_reg__
 1257 01c6 F11C      		adc r15,__zero_reg__
 1258               	.LVL108:
 1259 01c8 4BA5      		ldd r20,Y+43
 1260 01ca 5CA5      		ldd r21,Y+44
 1261 01cc 6DA5      		ldd r22,Y+45
 1262 01ce 7EA5      		ldd r23,Y+46
 1263 01d0 4C0D      		add r20,r12
 1264 01d2 5D1D      		adc r21,r13
 1265 01d4 6E1D      		adc r22,r14
 1266 01d6 7F1D      		adc r23,r15
 1267 01d8 4DA3      		std Y+37,r20
 1268 01da 5EA3      		std Y+38,r21
 1269 01dc 6FA3      		std Y+39,r22
 1270 01de 78A7      		std Y+40,r23
 1271               	.LVL109:
2102:Lib/FATFs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1272               		.loc 1 2102 0
 1273 01e0 8417      		cp r24,r20
 1274 01e2 9507      		cpc r25,r21
 1275 01e4 A607      		cpc r26,r22
 1276 01e6 B707      		cpc r27,r23
 1277 01e8 00F4      		brsh .+2
 1278 01ea 00C0      		rjmp .L148
2103:Lib/FATFs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1279               		.loc 1 2103 0
 1280 01ec BC01      		movw r22,r24
 1281 01ee CD01      		movw r24,r26
 1282 01f0 CDA0      		ldd r12,Y+37
 1283 01f2 DEA0      		ldd r13,Y+38
 1284 01f4 EFA0      		ldd r14,Y+39
 1285 01f6 F8A4      		ldd r15,Y+40
 1286 01f8 6C19      		sub r22,r12
 1287 01fa 7D09      		sbc r23,r13
 1288 01fc 8E09      		sbc r24,r14
 1289 01fe 9F09      		sbc r25,r15
 1290 0200 30E0      		ldi r19,0
 1291 0202 40E0      		ldi r20,0
 1292 0204 50E0      		ldi r21,0
 1293               	.LVL110:
 1294 0206 0E94 0000 		call __udivmodsi4
 1295               	.LVL111:
2104:Lib/FATFs/ff.c **** 	fmt = FS_FAT12;
 1296               		.loc 1 2104 0
 1297 020a 2115      		cp r18,__zero_reg__
 1298 020c 3105      		cpc r19,__zero_reg__
 1299 020e 4105      		cpc r20,__zero_reg__
 1300 0210 5105      		cpc r21,__zero_reg__
 1301 0212 01F4      		brne .+2
 1302 0214 00C0      		rjmp .L148
 1303               	.LVL112:
 1304 0216 6901      		movw r12,r18
 1305 0218 7A01      		movw r14,r20
 1306               	.LVL113:
 1307 021a 62E0      		ldi r22,2
 1308 021c C60E      		add r12,r22
 1309 021e D11C      		adc r13,__zero_reg__
 1310 0220 E11C      		adc r14,__zero_reg__
 1311 0222 F11C      		adc r15,__zero_reg__
 1312 0224 8DA1      		ldd r24,Y+37
 1313 0226 9EA1      		ldd r25,Y+38
 1314 0228 AFA1      		ldd r26,Y+39
 1315 022a B8A5      		ldd r27,Y+40
 1316               	.LVL114:
 1317 022c 840D      		add r24,r4
 1318 022e 951D      		adc r25,r5
 1319 0230 A61D      		adc r26,r6
 1320 0232 B71D      		adc r27,r7
 1321 0234 8DA3      		std Y+37,r24
 1322 0236 9EA3      		std Y+38,r25
 1323 0238 AFA3      		std Y+39,r26
 1324 023a B8A7      		std Y+40,r27
 1325               	.LVL115:
 1326 023c 8FA5      		ldd r24,Y+47
 1327 023e 98A9      		ldd r25,Y+48
 1328 0240 A9A9      		ldd r26,Y+49
 1329 0242 BAA9      		ldd r27,Y+50
 1330 0244 840D      		add r24,r4
 1331 0246 951D      		adc r25,r5
 1332 0248 A61D      		adc r26,r6
 1333 024a B71D      		adc r27,r7
2106:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1334               		.loc 1 2106 0
 1335 024c 263F      		cpi r18,-10
 1336 024e EFE0      		ldi r30,15
 1337 0250 3E07      		cpc r19,r30
 1338 0252 4105      		cpc r20,__zero_reg__
 1339 0254 5105      		cpc r21,__zero_reg__
 1340 0256 00F0      		brlo .L132
 1341               	.LVL116:
2107:Lib/FATFs/ff.c **** 
 1342               		.loc 1 2107 0
 1343 0258 263F      		cpi r18,-10
 1344 025a 3F4F      		sbci r19,-1
 1345 025c 4105      		cpc r20,__zero_reg__
 1346 025e 5105      		cpc r21,__zero_reg__
 1347 0260 00F4      		brsh .+2
 1348 0262 00C0      		rjmp .L133
 1349               	.LVL117:
2110:Lib/FATFs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1350               		.loc 1 2110 0
 1351 0264 F801      		movw r30,r16
 1352 0266 C286      		std Z+10,r12
 1353 0268 D386      		std Z+11,r13
 1354 026a E486      		std Z+12,r14
 1355 026c F586      		std Z+13,r15
2111:Lib/FATFs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1356               		.loc 1 2111 0
 1357 026e 2DA1      		ldd r18,Y+37
 1358 0270 3EA1      		ldd r19,Y+38
 1359 0272 4FA1      		ldd r20,Y+39
 1360 0274 58A5      		ldd r21,Y+40
 1361               	.LVL118:
 1362 0276 228F      		std Z+26,r18
 1363 0278 338F      		std Z+27,r19
 1364 027a 448F      		std Z+28,r20
 1365 027c 558F      		std Z+29,r21
2112:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
 1366               		.loc 1 2112 0
 1367 027e 828B      		std Z+18,r24
 1368 0280 938B      		std Z+19,r25
 1369 0282 A48B      		std Z+20,r26
 1370 0284 B58B      		std Z+21,r27
2114:Lib/FATFs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 1371               		.loc 1 2114 0
 1372 0286 29A5      		ldd r18,Y+41
 1373 0288 3AA5      		ldd r19,Y+42
 1374 028a 232B      		or r18,r19
 1375 028c 01F0      		breq .+2
 1376 028e 00C0      		rjmp .L148
2115:Lib/FATFs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 1377               		.loc 1 2115 0
 1378 0290 E25B      		subi r30,-78
 1379 0292 FF4F      		sbci r31,-1
 1380 0294 8081      		ld r24,Z
 1381 0296 9181      		ldd r25,Z+1
 1382 0298 A281      		ldd r26,Z+2
 1383 029a B381      		ldd r27,Z+3
 1384 029c F801      		movw r30,r16
 1385 029e 868B      		std Z+22,r24
 1386 02a0 978B      		std Z+23,r25
 1387 02a2 A08F      		std Z+24,r26
 1388 02a4 B18F      		std Z+25,r27
2116:Lib/FATFs/ff.c **** 	} else {
 1389               		.loc 1 2116 0
 1390 02a6 42E0      		ldi r20,2
 1391               		1:
 1392 02a8 CC0C      		lsl r12
 1393 02aa DD1C      		rol r13
 1394 02ac EE1C      		rol r14
 1395 02ae FF1C      		rol r15
 1396 02b0 4A95      		dec r20
 1397 02b2 01F4      		brne 1b
 1398               	.LVL119:
2107:Lib/FATFs/ff.c **** 
 1399               		.loc 1 2107 0
 1400 02b4 23E0      		ldi r18,lo8(3)
 1401 02b6 00C0      		rjmp .L69
 1402               	.LVL120:
 1403               	.L132:
2105:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 1404               		.loc 1 2105 0
 1405 02b8 21E0      		ldi r18,lo8(1)
 1406               	.LVL121:
 1407               	.L68:
2110:Lib/FATFs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1408               		.loc 1 2110 0
 1409 02ba F801      		movw r30,r16
 1410 02bc C286      		std Z+10,r12
 1411 02be D386      		std Z+11,r13
 1412 02c0 E486      		std Z+12,r14
 1413 02c2 F586      		std Z+13,r15
2111:Lib/FATFs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1414               		.loc 1 2111 0
 1415 02c4 4DA1      		ldd r20,Y+37
 1416 02c6 5EA1      		ldd r21,Y+38
 1417 02c8 6FA1      		ldd r22,Y+39
 1418 02ca 78A5      		ldd r23,Y+40
 1419 02cc 428F      		std Z+26,r20
 1420 02ce 538F      		std Z+27,r21
 1421 02d0 648F      		std Z+28,r22
 1422 02d2 758F      		std Z+29,r23
2112:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
 1423               		.loc 1 2112 0
 1424 02d4 828B      		std Z+18,r24
 1425 02d6 938B      		std Z+19,r25
 1426 02d8 A48B      		std Z+20,r26
 1427 02da B58B      		std Z+21,r27
2118:Lib/FATFs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1428               		.loc 1 2118 0
 1429 02dc 49A5      		ldd r20,Y+41
 1430 02de 5AA5      		ldd r21,Y+42
 1431 02e0 452B      		or r20,r21
 1432 02e2 01F4      		brne .+2
 1433 02e4 00C0      		rjmp .L148
2119:Lib/FATFs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 1434               		.loc 1 2119 0
 1435 02e6 4BA4      		ldd r4,Y+43
 1436 02e8 5CA4      		ldd r5,Y+44
 1437 02ea 6DA4      		ldd r6,Y+45
 1438 02ec 7EA4      		ldd r7,Y+46
 1439               	.LVL122:
 1440 02ee 480E      		add r4,r24
 1441 02f0 591E      		adc r5,r25
 1442 02f2 6A1E      		adc r6,r26
 1443 02f4 7B1E      		adc r7,r27
 1444 02f6 D801      		movw r26,r16
 1445 02f8 5696      		adiw r26,22
 1446 02fa 4D92      		st X+,r4
 1447 02fc 5D92      		st X+,r5
 1448 02fe 6D92      		st X+,r6
 1449 0300 7C92      		st X,r7
 1450 0302 5997      		sbiw r26,22+3
2121:Lib/FATFs/ff.c **** 	}
 1451               		.loc 1 2121 0
 1452 0304 2230      		cpi r18,lo8(2)
 1453 0306 01F0      		breq .+2
 1454 0308 00C0      		rjmp .L70
 1455 030a CC0C      		lsl r12
 1456 030c DD1C      		rol r13
 1457 030e EE1C      		rol r14
 1458 0310 FF1C      		rol r15
 1459               	.LVL123:
 1460               	.L69:
2123:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
 1461               		.loc 1 2123 0
 1462 0312 FFEF      		ldi r31,-1
 1463 0314 CF0E      		add r12,r31
 1464 0316 F1E0      		ldi r31,1
 1465 0318 DF1E      		adc r13,r31
 1466 031a E11C      		adc r14,__zero_reg__
 1467 031c F11C      		adc r15,__zero_reg__
 1468               	.LVL124:
 1469 031e 99E0      		ldi r25,9
 1470               		1:
 1471 0320 F694      		lsr r15
 1472 0322 E794      		ror r14
 1473 0324 D794      		ror r13
 1474 0326 C794      		ror r12
 1475 0328 9A95      		dec r25
 1476 032a 01F4      		brne 1b
 1477               	.LVL125:
 1478 032c 8C14      		cp r8,r12
 1479 032e 9D04      		cpc r9,r13
 1480 0330 AE04      		cpc r10,r14
 1481 0332 BF04      		cpc r11,r15
 1482 0334 00F0      		brlo .L148
2144:Lib/FATFs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 1483               		.loc 1 2144 0
 1484 0336 D801      		movw r26,r16
 1485 0338 2C93      		st X,r18
2145:Lib/FATFs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 1486               		.loc 1 2145 0
 1487 033a 8091 0000 		lds r24,Fsid
 1488 033e 9091 0000 		lds r25,Fsid+1
 1489 0342 0196      		adiw r24,1
 1490 0344 9093 0000 		sts Fsid+1,r25
 1491 0348 8093 0000 		sts Fsid,r24
 1492 034c 1796      		adiw r26,6+1
 1493 034e 9C93      		st X,r25
 1494 0350 8E93      		st -X,r24
 1495 0352 1697      		sbiw r26,6
2146:Lib/FATFs/ff.c **** 	fs->wflag = 0;
 1496               		.loc 1 2146 0
 1497 0354 F801      		movw r30,r16
 1498 0356 168E      		std Z+30,__zero_reg__
 1499 0358 178E      		std Z+31,__zero_reg__
 1500 035a 10A2      		std Z+32,__zero_reg__
 1501 035c 11A2      		std Z+33,__zero_reg__
2147:Lib/FATFs/ff.c **** #if _FS_RPATH
 1502               		.loc 1 2147 0
 1503 035e 1482      		std Z+4,__zero_reg__
 1504 0360 00C0      		rjmp .L119
 1505               	.LVL126:
 1506               	.L116:
2029:Lib/FATFs/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 1507               		.loc 1 2029 0
 1508 0362 1BE0      		ldi r17,lo8(11)
 1509 0364 00C0      		rjmp .L61
 1510               	.LVL127:
 1511               	.L117:
2031:Lib/FATFs/ff.c **** 
 1512               		.loc 1 2031 0
 1513 0366 1CE0      		ldi r17,lo8(12)
 1514 0368 00C0      		rjmp .L61
 1515               	.LVL128:
 1516               	.L118:
2053:Lib/FATFs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
 1517               		.loc 1 2053 0
 1518 036a 13E0      		ldi r17,lo8(3)
 1519 036c 00C0      		rjmp .L61
 1520               	.LVL129:
 1521               	.L119:
2042:Lib/FATFs/ff.c **** 		}
 1522               		.loc 1 2042 0
 1523 036e 10E0      		ldi r17,0
 1524 0370 00C0      		rjmp .L61
 1525               	.LVL130:
 1526               	.L122:
2072:Lib/FATFs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 1527               		.loc 1 2072 0
 1528 0372 11E0      		ldi r17,lo8(1)
 1529 0374 00C0      		rjmp .L61
 1530               	.LVL131:
 1531               	.L148:
2118:Lib/FATFs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1532               		.loc 1 2118 0
 1533 0376 1DE0      		ldi r17,lo8(13)
 1534               	.LVL132:
 1535               	.L61:
 1536               	.LBE19:
 1537               	.LBE18:
2250:Lib/FATFs/ff.c **** 
2251:Lib/FATFs/ff.c **** #if !_FS_READONLY
2252:Lib/FATFs/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
2253:Lib/FATFs/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
2254:Lib/FATFs/ff.c **** #else
2255:Lib/FATFs/ff.c **** 	mode &= FA_READ;
2256:Lib/FATFs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2257:Lib/FATFs/ff.c **** #endif
2258:Lib/FATFs/ff.c **** 	INIT_BUF(dj);
 1538               		.loc 1 2258 0
 1539 0378 CE01      		movw r24,r28
 1540 037a 4796      		adiw r24,23
 1541 037c 9E8B      		std Y+22,r25
 1542 037e 8D8B      		std Y+21,r24
2259:Lib/FATFs/ff.c **** 	if (res == FR_OK)
 1543               		.loc 1 2259 0
 1544 0380 1111      		cpse r17,__zero_reg__
 1545 0382 00C0      		rjmp .L71
 1546               	.LVL133:
 1547               	.LBB21:
 1548               	.LBB22:
1928:Lib/FATFs/ff.c **** 		path++;
 1549               		.loc 1 1928 0
 1550 0384 D101      		movw r26,r2
 1551 0386 8C91      		ld r24,X
 1552 0388 8F32      		cpi r24,lo8(47)
 1553 038a 01F0      		breq .L72
 1554 038c 8C35      		cpi r24,lo8(92)
 1555 038e 01F4      		brne .L73
 1556               	.L72:
1929:Lib/FATFs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
 1557               		.loc 1 1929 0
 1558 0390 BFEF      		ldi r27,-1
 1559 0392 2B1A      		sub r2,r27
 1560 0394 3B0A      		sbc r3,r27
 1561               	.LVL134:
 1562               	.L73:
1930:Lib/FATFs/ff.c **** #endif
 1563               		.loc 1 1930 0
 1564 0396 1F82      		std Y+7,__zero_reg__
 1565 0398 1886      		std Y+8,__zero_reg__
 1566 039a 1986      		std Y+9,__zero_reg__
 1567 039c 1A86      		std Y+10,__zero_reg__
1933:Lib/FATFs/ff.c **** 		res = dir_sdi(dj, 0);
 1568               		.loc 1 1933 0
 1569 039e F101      		movw r30,r2
 1570 03a0 8081      		ld r24,Z
 1571 03a2 8032      		cpi r24,lo8(32)
 1572 03a4 00F0      		brlo .L74
 1573               	.LBB23:
 1574               	.LBB24:
 1575               	.LBB25:
 1576               	.LBB26:
 542:Lib/FATFs/ff.c **** }
 1577               		.loc 1 542 0
 1578 03a6 00E2      		ldi r16,lo8(32)
 1579 03a8 B02E      		mov r11,r16
 1580               	.LBE26:
 1581               	.LBE25:
1810:Lib/FATFs/ff.c **** 
 1582               		.loc 1 1810 0
 1583 03aa 85E0      		ldi r24,lo8(5)
 1584 03ac A82E      		mov r10,r24
 1585 03ae 00C0      		rjmp .L75
 1586               	.L74:
 1587               	.LBE24:
 1588               	.LBE23:
1934:Lib/FATFs/ff.c **** 		dj->dir = 0;
 1589               		.loc 1 1934 0
 1590 03b0 CE01      		movw r24,r28
 1591 03b2 0196      		adiw r24,1
 1592 03b4 0E94 0000 		call dir_sdi.constprop.3
 1593               	.LVL135:
1935:Lib/FATFs/ff.c **** 
 1594               		.loc 1 1935 0
 1595 03b8 1C8A      		std Y+20,__zero_reg__
 1596 03ba 1B8A      		std Y+19,__zero_reg__
 1597               	.LVL136:
 1598               	.LBE22:
 1599               	.LBE21:
2260:Lib/FATFs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2261:Lib/FATFs/ff.c **** 	dir = dj.dir;
2262:Lib/FATFs/ff.c **** 
2263:Lib/FATFs/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2264:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2265:Lib/FATFs/ff.c **** 		if (!dir)	/* Current dir itself */
2266:Lib/FATFs/ff.c **** 			res = FR_INVALID_NAME;
2267:Lib/FATFs/ff.c **** #if _FS_SHARE
2268:Lib/FATFs/ff.c **** 		else
2269:Lib/FATFs/ff.c **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2270:Lib/FATFs/ff.c **** #endif
2271:Lib/FATFs/ff.c **** 	}
2272:Lib/FATFs/ff.c **** 	/* Create or Open a file */
2273:Lib/FATFs/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2274:Lib/FATFs/ff.c **** 		DWORD dw, cl;
2275:Lib/FATFs/ff.c **** 
2276:Lib/FATFs/ff.c **** 		if (res != FR_OK) {					/* No file, create new */
2277:Lib/FATFs/ff.c **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
2278:Lib/FATFs/ff.c **** #if _FS_SHARE
2279:Lib/FATFs/ff.c **** 				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2280:Lib/FATFs/ff.c **** #else
2281:Lib/FATFs/ff.c **** 				res = dir_register(&dj);
2282:Lib/FATFs/ff.c **** #endif
2283:Lib/FATFs/ff.c **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
2284:Lib/FATFs/ff.c **** 			dir = dj.dir;					/* New entry */
2285:Lib/FATFs/ff.c **** 		}
2286:Lib/FATFs/ff.c **** 		else {								/* Any object is already existing */
2287:Lib/FATFs/ff.c **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2288:Lib/FATFs/ff.c **** 				res = FR_DENIED;
2289:Lib/FATFs/ff.c **** 			} else {
2290:Lib/FATFs/ff.c **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2291:Lib/FATFs/ff.c **** 					res = FR_EXIST;
2292:Lib/FATFs/ff.c **** 			}
2293:Lib/FATFs/ff.c **** 		}
2294:Lib/FATFs/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2295:Lib/FATFs/ff.c **** 			dw = get_fattime();					/* Created time */
2296:Lib/FATFs/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
2297:Lib/FATFs/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
2298:Lib/FATFs/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
2299:Lib/FATFs/ff.c **** 			cl = LD_CLUST(dir);					/* Get start cluster */
2300:Lib/FATFs/ff.c **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
2301:Lib/FATFs/ff.c **** 			dj.fs->wflag = 1;
2302:Lib/FATFs/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
2303:Lib/FATFs/ff.c **** 				dw = dj.fs->winsect;
2304:Lib/FATFs/ff.c **** 				res = remove_chain(dj.fs, cl);
2305:Lib/FATFs/ff.c **** 				if (res == FR_OK) {
2306:Lib/FATFs/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
2307:Lib/FATFs/ff.c **** 					res = move_window(dj.fs, dw);
2308:Lib/FATFs/ff.c **** 				}
2309:Lib/FATFs/ff.c **** 			}
2310:Lib/FATFs/ff.c **** 		}
2311:Lib/FATFs/ff.c **** 	}
2312:Lib/FATFs/ff.c **** 	else {	/* Open an existing file */
2313:Lib/FATFs/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
2314:Lib/FATFs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
2315:Lib/FATFs/ff.c **** 				res = FR_NO_FILE;
2316:Lib/FATFs/ff.c **** 			} else {
2317:Lib/FATFs/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2318:Lib/FATFs/ff.c **** 					res = FR_DENIED;
2319:Lib/FATFs/ff.c **** 			}
2320:Lib/FATFs/ff.c **** 		}
2321:Lib/FATFs/ff.c **** 	}
2322:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2323:Lib/FATFs/ff.c **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
2324:Lib/FATFs/ff.c **** 			mode |= FA__WRITTEN;
2325:Lib/FATFs/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
2326:Lib/FATFs/ff.c **** 		fp->dir_ptr = dir;
2327:Lib/FATFs/ff.c **** #if _FS_SHARE
2328:Lib/FATFs/ff.c **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2329:Lib/FATFs/ff.c **** 		if (!fp->lockid) res = FR_INT_ERR;
2330:Lib/FATFs/ff.c **** #endif
2331:Lib/FATFs/ff.c **** 	}
2332:Lib/FATFs/ff.c **** 
2333:Lib/FATFs/ff.c **** #else				/* R/O configuration */
2334:Lib/FATFs/ff.c **** 	if (res == FR_OK) {					/* Follow succeeded */
 1600               		.loc 1 2334 0
 1601 03bc 8823      		tst r24
 1602 03be 01F4      		brne .+2
 1603 03c0 00C0      		rjmp .L76
 1604 03c2 00C0      		rjmp .L77
 1605               	.LVL137:
 1606               	.L109:
 1607               	.LBB56:
 1608               	.LBB51:
1955:Lib/FATFs/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 1609               		.loc 1 1955 0
 1610 03c4 92FD      		sbrc r25,2
 1611 03c6 00C0      		rjmp .L76
1956:Lib/FATFs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 1612               		.loc 1 1956 0
 1613 03c8 EB89      		ldd r30,Y+19
 1614 03ca FC89      		ldd r31,Y+20
 1615               	.LVL138:
1957:Lib/FATFs/ff.c **** 				res = FR_NO_PATH; break;
 1616               		.loc 1 1957 0
 1617 03cc 8385      		ldd r24,Z+11
 1618 03ce 84FF      		sbrs r24,4
 1619 03d0 00C0      		rjmp .L145
1960:Lib/FATFs/ff.c **** 		}
 1620               		.loc 1 1960 0
 1621 03d2 8489      		ldd r24,Z+20
 1622 03d4 9589      		ldd r25,Z+21
 1623 03d6 A0E0      		ldi r26,0
 1624 03d8 B0E0      		ldi r27,0
 1625 03da DC01      		movw r26,r24
 1626 03dc 9927      		clr r25
 1627 03de 8827      		clr r24
 1628 03e0 428D      		ldd r20,Z+26
 1629 03e2 538D      		ldd r21,Z+27
 1630 03e4 60E0      		ldi r22,0
 1631 03e6 70E0      		ldi r23,0
 1632 03e8 842B      		or r24,r20
 1633 03ea 952B      		or r25,r21
 1634 03ec A62B      		or r26,r22
 1635 03ee B72B      		or r27,r23
 1636 03f0 8F83      		std Y+7,r24
 1637 03f2 9887      		std Y+8,r25
 1638 03f4 A987      		std Y+9,r26
 1639 03f6 BA87      		std Y+10,r27
 1640               	.LVL139:
 1641               	.L75:
 1642 03f8 9101      		movw r18,r2
 1643               	.LVL140:
 1644               	.L78:
 1645 03fa 1901      		movw r2,r18
 1646               	.LVL141:
 1647               	.LBB34:
 1648               	.LBB31:
1752:Lib/FATFs/ff.c **** 	sfn = dj->fn;
 1649               		.loc 1 1752 0
 1650 03fc D901      		movw r26,r18
 1651 03fe 8C91      		ld r24,X
 1652 0400 2F5F      		subi r18,-1
 1653 0402 3F4F      		sbci r19,-1
 1654 0404 8F32      		cpi r24,lo8(47)
 1655 0406 01F0      		breq .L78
 1656 0408 8C35      		cpi r24,lo8(92)
 1657 040a 01F0      		breq .L78
1753:Lib/FATFs/ff.c **** 	mem_set(sfn, ' ', 11);
 1658               		.loc 1 1753 0
 1659 040c ED89      		ldd r30,Y+21
 1660 040e FE89      		ldd r31,Y+22
 1661               	.LVL142:
 1662 0410 CF01      		movw r24,r30
 1663 0412 9F01      		movw r18,r30
 1664 0414 255F      		subi r18,-11
 1665 0416 3F4F      		sbci r19,-1
 1666               	.LVL143:
 1667               	.L80:
 1668               	.LBB28:
 1669               	.LBB27:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 1670               		.loc 1 541 0
 1671 0418 8217      		cp r24,r18
 1672 041a 9307      		cpc r25,r19
 1673 041c 01F0      		breq .L184
 1674               	.LVL144:
 542:Lib/FATFs/ff.c **** }
 1675               		.loc 1 542 0
 1676 041e DC01      		movw r26,r24
 1677 0420 BD92      		st X+,r11
 1678               	.LVL145:
 1679 0422 CD01      		movw r24,r26
 1680               	.LVL146:
 1681 0424 00C0      		rjmp .L80
 1682               	.LVL147:
 1683               	.L184:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 1684               		.loc 1 541 0
 1685 0426 80E0      		ldi r24,0
 1686 0428 90E0      		ldi r25,0
 1687               	.LVL148:
 1688 042a 60E0      		ldi r22,0
 1689 042c 70E0      		ldi r23,0
 1690 042e 48E0      		ldi r20,lo8(8)
 1691 0430 50E0      		ldi r21,0
 1692 0432 912C      		mov r9,__zero_reg__
 1693               	.L82:
 1694               	.LVL149:
 1695               	.LBE27:
 1696               	.LBE28:
1770:Lib/FATFs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 1697               		.loc 1 1770 0
 1698 0434 9B01      		movw r18,r22
 1699 0436 2F5F      		subi r18,-1
 1700 0438 3F4F      		sbci r19,-1
 1701               	.LVL150:
 1702 043a 7101      		movw r14,r2
 1703 043c E60E      		add r14,r22
 1704 043e F71E      		adc r15,r23
 1705 0440 D701      		movw r26,r14
 1706 0442 0C91      		ld r16,X
 1707               	.LVL151:
1771:Lib/FATFs/ff.c **** 		if (c == '.' || i >= ni) {
 1708               		.loc 1 1771 0
 1709 0444 0132      		cpi r16,lo8(33)
 1710 0446 00F4      		brsh .+2
 1711 0448 00C0      		rjmp .L83
 1712 044a 0F32      		cpi r16,lo8(47)
 1713 044c 01F4      		brne .+2
 1714 044e 00C0      		rjmp .L83
 1715 0450 0C35      		cpi r16,lo8(92)
 1716 0452 01F4      		brne .+2
 1717 0454 00C0      		rjmp .L83
1772:Lib/FATFs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 1718               		.loc 1 1772 0
 1719 0456 0E32      		cpi r16,lo8(46)
 1720 0458 01F0      		breq .L84
 1721 045a 8417      		cp r24,r20
 1722 045c 9507      		cpc r25,r21
 1723 045e 00F0      		brlo .L85
 1724               	.L84:
1773:Lib/FATFs/ff.c **** 			i = 8; ni = 11;
 1725               		.loc 1 1773 0
 1726 0460 4830      		cpi r20,8
 1727 0462 5105      		cpc r21,__zero_reg__
 1728 0464 01F0      		breq .+2
 1729 0466 00C0      		rjmp .L141
 1730 0468 0E32      		cpi r16,lo8(46)
 1731 046a 01F0      		breq .+2
 1732 046c 00C0      		rjmp .L141
 1733               	.LVL152:
1775:Lib/FATFs/ff.c **** 		}
 1734               		.loc 1 1775 0
 1735 046e 990C      		lsl r9
 1736 0470 990C      		lsl r9
 1737               	.LVL153:
1774:Lib/FATFs/ff.c **** 			b <<= 2; continue;
 1738               		.loc 1 1774 0
 1739 0472 88E0      		ldi r24,lo8(8)
 1740 0474 90E0      		ldi r25,0
 1741 0476 4BE0      		ldi r20,lo8(11)
 1742 0478 50E0      		ldi r21,0
 1743               	.LVL154:
 1744               	.L86:
 1745 047a B901      		movw r22,r18
 1746 047c 00C0      		rjmp .L82
 1747               	.LVL155:
 1748               	.L85:
1777:Lib/FATFs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
 1749               		.loc 1 1777 0
 1750 047e 07FF      		sbrs r16,7
 1751 0480 00C0      		rjmp .L87
1778:Lib/FATFs/ff.c **** #ifdef _EXCVT
 1752               		.loc 1 1778 0
 1753 0482 B92D      		mov r27,r9
 1754 0484 B360      		ori r27,lo8(3)
 1755 0486 9B2E      		mov r9,r27
 1756               	.LVL156:
 1757               	.L87:
1787:Lib/FATFs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 1758               		.loc 1 1787 0
 1759 0488 AFE7      		ldi r26,lo8(127)
 1760 048a FA2E      		mov r15,r26
 1761 048c F00E      		add r15,r16
 1762 048e BEE1      		ldi r27,lo8(30)
 1763 0490 CB2E      		mov r12,r27
 1764 0492 CF14      		cp r12,r15
 1765 0494 00F4      		brsh .L88
 1766 0496 A0E2      		ldi r26,lo8(32)
 1767 0498 FA2E      		mov r15,r26
 1768 049a F00E      		add r15,r16
 1769 049c BCE1      		ldi r27,lo8(28)
 1770 049e DB2E      		mov r13,r27
 1771 04a0 DF14      		cp r13,r15
 1772 04a2 00F0      		brlo .L89
 1773               	.L88:
1788:Lib/FATFs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 1774               		.loc 1 1788 0
 1775 04a4 6E5F      		subi r22,-2
 1776 04a6 7F4F      		sbci r23,-1
 1777               	.LVL157:
 1778 04a8 220D      		add r18,r2
 1779 04aa 331D      		adc r19,r3
 1780 04ac D901      		movw r26,r18
 1781 04ae FC90      		ld r15,X
 1782               	.LVL158:
1789:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
 1783               		.loc 1 1789 0
 1784 04b0 20EC      		ldi r18,lo8(-64)
 1785 04b2 2F0D      		add r18,r15
 1786 04b4 2F33      		cpi r18,lo8(63)
 1787 04b6 00F0      		brlo .L90
 1788 04b8 20E8      		ldi r18,lo8(-128)
 1789 04ba 2F0D      		add r18,r15
 1790 04bc 2D37      		cpi r18,lo8(125)
 1791 04be 00F0      		brlo .+2
 1792 04c0 00C0      		rjmp .L141
 1793               	.L90:
 1794 04c2 9A01      		movw r18,r20
 1795 04c4 2150      		subi r18,1
 1796 04c6 3109      		sbc r19,__zero_reg__
 1797 04c8 8217      		cp r24,r18
 1798 04ca 9307      		cpc r25,r19
 1799 04cc 00F0      		brlo .+2
 1800 04ce 00C0      		rjmp .L141
 1801               	.LVL159:
1791:Lib/FATFs/ff.c **** 			sfn[i++] = d;
 1802               		.loc 1 1791 0
 1803 04d0 9F01      		movw r18,r30
 1804 04d2 280F      		add r18,r24
 1805 04d4 391F      		adc r19,r25
 1806 04d6 D901      		movw r26,r18
 1807 04d8 0C93      		st X,r16
 1808               	.LVL160:
1792:Lib/FATFs/ff.c **** 		} else {						/* Single byte code */
 1809               		.loc 1 1792 0
 1810 04da 9C01      		movw r18,r24
 1811 04dc 2F5F      		subi r18,-1
 1812 04de 3F4F      		sbci r19,-1
 1813 04e0 2E0F      		add r18,r30
 1814 04e2 3F1F      		adc r19,r31
 1815 04e4 0296      		adiw r24,2
 1816               	.LVL161:
 1817 04e6 D901      		movw r26,r18
 1818 04e8 FC92      		st X,r15
1788:Lib/FATFs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 1819               		.loc 1 1788 0
 1820 04ea 9B01      		movw r18,r22
 1821 04ec 00C0      		rjmp .L86
 1822               	.LVL162:
 1823               	.L89:
1794:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
 1824               		.loc 1 1794 0
 1825 04ee C02E      		mov r12,r16
 1826 04f0 D12C      		mov r13,__zero_reg__
 1827               	.LVL163:
 1828 04f2 B0E0      		ldi r27,lo8(.LC0)
 1829 04f4 EB2E      		mov r14,r27
 1830 04f6 B0E0      		ldi r27,hi8(.LC0)
 1831 04f8 FB2E      		mov r15,r27
 1832               	.LVL164:
 1833               	.L92:
 1834               	.LBB29:
 1835               	.LBB30:
 558:Lib/FATFs/ff.c **** 	return *str;
 1836               		.loc 1 558 0
 1837 04fa D701      		movw r26,r14
 1838 04fc 6D91      		ld r22,X+
 1839 04fe 7D01      		movw r14,r26
 1840               	.LVL165:
 1841 0500 6623      		tst r22
 1842 0502 01F4      		brne .+2
 1843 0504 00C0      		rjmp .L91
 1844 0506 70E0      		ldi r23,0
 1845 0508 C616      		cp r12,r22
 1846 050a D706      		cpc r13,r23
 1847 050c 01F4      		brne .L92
 1848 050e 00C0      		rjmp .L141
 1849               	.LVL166:
 1850               	.L83:
 1851               	.LBE30:
 1852               	.LBE29:
1806:Lib/FATFs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 1853               		.loc 1 1806 0
 1854 0510 220E      		add r2,r18
 1855 0512 331E      		adc r3,r19
 1856               	.LVL167:
1807:Lib/FATFs/ff.c **** 
 1857               		.loc 1 1807 0
 1858 0514 0132      		cpi r16,lo8(33)
 1859 0516 00F0      		brlo .L140
 1860 0518 20E0      		ldi r18,0
 1861               	.LVL168:
 1862 051a 00C0      		rjmp .L94
 1863               	.LVL169:
 1864               	.L140:
 1865 051c 24E0      		ldi r18,lo8(4)
 1866               	.LVL170:
 1867               	.L94:
1809:Lib/FATFs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 1868               		.loc 1 1809 0
 1869 051e 892B      		or r24,r25
 1870 0520 01F4      		brne .+2
 1871 0522 00C0      		rjmp .L141
1810:Lib/FATFs/ff.c **** 
 1872               		.loc 1 1810 0
 1873 0524 8081      		ld r24,Z
 1874               	.LVL171:
 1875 0526 853E      		cpi r24,lo8(-27)
 1876 0528 01F4      		brne .L95
 1877 052a A082      		st Z,r10
 1878               	.L95:
1812:Lib/FATFs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 1879               		.loc 1 1812 0
 1880 052c 4830      		cpi r20,8
 1881 052e 5105      		cpc r21,__zero_reg__
 1882 0530 01F4      		brne .L96
 1883 0532 990C      		lsl r9
 1884 0534 990C      		lsl r9
 1885               	.LVL172:
 1886               	.L96:
1813:Lib/FATFs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 1887               		.loc 1 1813 0
 1888 0536 892D      		mov r24,r9
 1889 0538 8370      		andi r24,lo8(3)
 1890 053a 8130      		cpi r24,lo8(1)
 1891 053c 01F4      		brne .L97
 1892 053e 2061      		ori r18,lo8(16)
 1893               	.LVL173:
 1894               	.L97:
1814:Lib/FATFs/ff.c **** 
 1895               		.loc 1 1814 0
 1896 0540 892D      		mov r24,r9
 1897 0542 8C70      		andi r24,lo8(12)
 1898 0544 8430      		cpi r24,lo8(4)
 1899 0546 01F4      		brne .L98
 1900 0548 2860      		ori r18,lo8(8)
 1901               	.LVL174:
 1902               	.L98:
1816:Lib/FATFs/ff.c **** 
 1903               		.loc 1 1816 0
 1904 054a 2387      		std Z+11,r18
 1905               	.LVL175:
 1906               	.LBE31:
 1907               	.LBE34:
 1908               	.LBB35:
 1909               	.LBB36:
1356:Lib/FATFs/ff.c **** 	if (res != FR_OK) return res;
 1910               		.loc 1 1356 0
 1911 054c CE01      		movw r24,r28
 1912 054e 0196      		adiw r24,1
 1913 0550 0E94 0000 		call dir_sdi.constprop.3
 1914               	.LVL176:
1357:Lib/FATFs/ff.c **** 
 1915               		.loc 1 1357 0
 1916 0554 8111      		cpse r24,__zero_reg__
 1917 0556 00C0      		rjmp .L99
 1918               	.LVL177:
 1919               	.L108:
1363:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
 1920               		.loc 1 1363 0
 1921 0558 4F85      		ldd r20,Y+15
 1922 055a 5889      		ldd r21,Y+16
 1923 055c 6989      		ldd r22,Y+17
 1924 055e 7A89      		ldd r23,Y+18
 1925 0560 8981      		ldd r24,Y+1
 1926 0562 9A81      		ldd r25,Y+2
 1927 0564 0E94 0000 		call move_window
 1928               	.LVL178:
1364:Lib/FATFs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 1929               		.loc 1 1364 0
 1930 0568 8111      		cpse r24,__zero_reg__
 1931 056a 00C0      		rjmp .L99
1365:Lib/FATFs/ff.c **** 		c = dir[DIR_Name];
 1932               		.loc 1 1365 0
 1933 056c EB89      		ldd r30,Y+19
 1934 056e FC89      		ldd r31,Y+20
 1935               	.LVL179:
1367:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
 1936               		.loc 1 1367 0
 1937 0570 9081      		ld r25,Z
 1938 0572 9923      		tst r25
 1939 0574 01F4      		brne .+2
 1940 0576 00C0      		rjmp .L142
1390:Lib/FATFs/ff.c **** 			break;
 1941               		.loc 1 1390 0
 1942 0578 9385      		ldd r25,Z+11
 1943 057a 93FD      		sbrc r25,3
 1944 057c 00C0      		rjmp .L100
 1945               	.LVL180:
 1946 057e AD89      		ldd r26,Y+21
 1947 0580 BE89      		ldd r27,Y+22
 1948 0582 AF01      		movw r20,r30
 1949 0584 455F      		subi r20,-11
 1950 0586 5F4F      		sbci r21,-1
 1951               	.LVL181:
 1952               	.L101:
 1953               	.LBB37:
 1954               	.LBB38:
 551:Lib/FATFs/ff.c **** 	return r;
 1955               		.loc 1 551 0
 1956 0588 4E17      		cp r20,r30
 1957 058a 5F07      		cpc r21,r31
 1958 058c 01F4      		brne .+2
 1959 058e 00C0      		rjmp .L99
 1960               	.LVL182:
 1961 0590 2191      		ld r18,Z+
 1962               	.LVL183:
 1963 0592 9D91      		ld r25,X+
 1964               	.LVL184:
 1965 0594 2917      		cp r18,r25
 1966 0596 01F0      		breq .L101
 1967               	.LVL185:
 1968               	.L100:
 1969               	.LBE38:
 1970               	.LBE37:
 1971               	.LBB39:
 1972               	.LBB40:
1116:Lib/FATFs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1973               		.loc 1 1116 0
 1974 0598 CD80      		ldd r12,Y+5
 1975 059a DE80      		ldd r13,Y+6
 1976 059c BFEF      		ldi r27,-1
 1977 059e CB1A      		sub r12,r27
 1978 05a0 DB0A      		sbc r13,r27
 1979               	.LVL186:
1117:Lib/FATFs/ff.c **** 		return FR_NO_FILE;
 1980               		.loc 1 1117 0
 1981 05a2 01F4      		brne .+2
 1982 05a4 00C0      		rjmp .L102
 1983 05a6 8F85      		ldd r24,Y+15
 1984 05a8 9889      		ldd r25,Y+16
 1985 05aa A989      		ldd r26,Y+17
 1986 05ac BA89      		ldd r27,Y+18
 1987               	.LVL187:
 1988 05ae 0097      		sbiw r24,0
 1989 05b0 A105      		cpc r26,__zero_reg__
 1990 05b2 B105      		cpc r27,__zero_reg__
 1991 05b4 01F4      		brne .+2
 1992 05b6 00C0      		rjmp .L102
1120:Lib/FATFs/ff.c **** 		dj->sect++;					/* Next sector */
 1993               		.loc 1 1120 0
 1994 05b8 7601      		movw r14,r12
 1995 05ba EFE0      		ldi r30,15
 1996 05bc EE22      		and r14,r30
 1997 05be FF24      		clr r15
 1998 05c0 E114      		cp r14,__zero_reg__
 1999 05c2 F104      		cpc r15,__zero_reg__
 2000 05c4 01F0      		breq .+2
 2001 05c6 00C0      		rjmp .L104
1121:Lib/FATFs/ff.c **** 
 2002               		.loc 1 1121 0
 2003 05c8 0196      		adiw r24,1
 2004 05ca A11D      		adc r26,__zero_reg__
 2005 05cc B11D      		adc r27,__zero_reg__
 2006 05ce 8F87      		std Y+15,r24
 2007 05d0 988B      		std Y+16,r25
 2008 05d2 A98B      		std Y+17,r26
 2009 05d4 BA8B      		std Y+18,r27
 2010               	.LVL188:
1123:Lib/FATFs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 2011               		.loc 1 1123 0
 2012 05d6 4B85      		ldd r20,Y+11
 2013 05d8 5C85      		ldd r21,Y+12
 2014 05da 6D85      		ldd r22,Y+13
 2015 05dc 7E85      		ldd r23,Y+14
 2016 05de 8981      		ldd r24,Y+1
 2017 05e0 9A81      		ldd r25,Y+2
 2018 05e2 4115      		cp r20,__zero_reg__
 2019 05e4 5105      		cpc r21,__zero_reg__
 2020 05e6 6105      		cpc r22,__zero_reg__
 2021 05e8 7105      		cpc r23,__zero_reg__
 2022 05ea 01F4      		brne .L105
1124:Lib/FATFs/ff.c **** 				return FR_NO_FILE;
 2023               		.loc 1 1124 0
 2024 05ec DC01      		movw r26,r24
 2025 05ee 1896      		adiw r26,8
 2026 05f0 8D91      		ld r24,X+
 2027 05f2 9C91      		ld r25,X
 2028 05f4 1997      		sbiw r26,8+1
 2029 05f6 C816      		cp r12,r24
 2030 05f8 D906      		cpc r13,r25
 2031 05fa 00F0      		brlo .+2
 2032 05fc 00C0      		rjmp .L102
 2033 05fe 00C0      		rjmp .L104
 2034               	.L105:
1128:Lib/FATFs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 2035               		.loc 1 1128 0
 2036 0600 FC01      		movw r30,r24
 2037 0602 2281      		ldd r18,Z+2
 2038 0604 30E0      		ldi r19,0
 2039 0606 2150      		subi r18,1
 2040 0608 3109      		sbc r19,__zero_reg__
 2041 060a F601      		movw r30,r12
 2042 060c A4E0      		ldi r26,4
 2043               		1:
 2044 060e F695      		lsr r31
 2045 0610 E795      		ror r30
 2046 0612 AA95      		dec r26
 2047 0614 01F4      		brne 1b
 2048 0616 2E23      		and r18,r30
 2049 0618 3F23      		and r19,r31
 2050 061a 232B      		or r18,r19
 2051 061c 01F4      		brne .L104
1129:Lib/FATFs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 2052               		.loc 1 1129 0
 2053 061e 0E94 0000 		call get_fat
 2054               	.LVL189:
 2055 0622 AB01      		movw r20,r22
 2056 0624 BC01      		movw r22,r24
 2057               	.LVL190:
1130:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2058               		.loc 1 1130 0
 2059 0626 4230      		cpi r20,2
 2060 0628 5105      		cpc r21,__zero_reg__
 2061 062a 6105      		cpc r22,__zero_reg__
 2062 062c 7105      		cpc r23,__zero_reg__
 2063 062e 00F4      		brsh .+2
 2064 0630 00C0      		rjmp .L143
1131:Lib/FATFs/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 2065               		.loc 1 1131 0
 2066 0632 4F3F      		cpi r20,-1
 2067 0634 FFEF      		ldi r31,-1
 2068 0636 5F07      		cpc r21,r31
 2069 0638 6F07      		cpc r22,r31
 2070 063a 7F07      		cpc r23,r31
 2071 063c 01F4      		brne .+2
 2072 063e 00C0      		rjmp .L144
1132:Lib/FATFs/ff.c **** #if !_FS_READONLY
 2073               		.loc 1 1132 0
 2074 0640 8981      		ldd r24,Y+1
 2075 0642 9A81      		ldd r25,Y+2
 2076 0644 DC01      		movw r26,r24
 2077 0646 1A96      		adiw r26,10
 2078 0648 4D90      		ld r4,X+
 2079 064a 5D90      		ld r5,X+
 2080 064c 6D90      		ld r6,X+
 2081 064e 7C90      		ld r7,X
 2082 0650 1D97      		sbiw r26,10+3
 2083 0652 4415      		cp r20,r4
 2084 0654 5505      		cpc r21,r5
 2085 0656 6605      		cpc r22,r6
 2086 0658 7705      		cpc r23,r7
 2087 065a 00F0      		brlo .+2
 2088 065c 00C0      		rjmp .L102
1154:Lib/FATFs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 2089               		.loc 1 1154 0
 2090 065e 4B87      		std Y+11,r20
 2091 0660 5C87      		std Y+12,r21
 2092 0662 6D87      		std Y+13,r22
 2093 0664 7E87      		std Y+14,r23
1155:Lib/FATFs/ff.c **** 			}
 2094               		.loc 1 1155 0
 2095 0666 0E94 0000 		call clust2sect
 2096               	.LVL191:
 2097 066a 6F87      		std Y+15,r22
 2098 066c 788B      		std Y+16,r23
 2099 066e 898B      		std Y+17,r24
 2100 0670 9A8B      		std Y+18,r25
 2101               	.L104:
1160:Lib/FATFs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 2102               		.loc 1 1160 0
 2103 0672 DE82      		std Y+6,r13
 2104 0674 CD82      		std Y+5,r12
1161:Lib/FATFs/ff.c **** 
 2105               		.loc 1 1161 0
 2106 0676 8981      		ldd r24,Y+1
 2107 0678 9A81      		ldd r25,Y+2
 2108 067a 8296      		adiw r24,34
 2109 067c 45E0      		ldi r20,5
 2110               		1:
 2111 067e EE0C      		lsl r14
 2112 0680 FF1C      		rol r15
 2113 0682 4A95      		dec r20
 2114 0684 01F4      		brne 1b
 2115 0686 E80E      		add r14,r24
 2116 0688 F91E      		adc r15,r25
 2117 068a FC8A      		std Y+20,r15
 2118 068c EB8A      		std Y+19,r14
 2119               	.LVL192:
 2120 068e 00C0      		rjmp .L108
 2121               	.LVL193:
 2122               	.L142:
 2123               	.LBE40:
 2124               	.LBE39:
1367:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
 2125               		.loc 1 1367 0
 2126 0690 84E0      		ldi r24,lo8(4)
 2127               	.LVL194:
 2128               	.L99:
 2129               	.LBE36:
 2130               	.LBE35:
1942:Lib/FATFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 2131               		.loc 1 1942 0
 2132 0692 ED89      		ldd r30,Y+21
 2133 0694 FE89      		ldd r31,Y+22
 2134 0696 9385      		ldd r25,Z+11
 2135               	.LVL195:
1943:Lib/FATFs/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 2136               		.loc 1 1943 0
 2137 0698 8823      		tst r24
 2138 069a 01F4      		brne .+2
 2139 069c 00C0      		rjmp .L109
 2140 069e 182F      		mov r17,r24
 2141               	.L115:
1944:Lib/FATFs/ff.c **** 				/* Object not found */
 2142               		.loc 1 1944 0
 2143 06a0 1430      		cpi r17,lo8(4)
 2144 06a2 01F4      		brne .L71
1951:Lib/FATFs/ff.c **** 				}
 2145               		.loc 1 1951 0
 2146 06a4 92FF      		sbrs r25,2
 2147 06a6 00C0      		rjmp .L145
 2148 06a8 00C0      		rjmp .L71
 2149               	.LVL196:
 2150               	.L76:
 2151               	.LBE51:
 2152               	.LBE56:
2261:Lib/FATFs/ff.c **** 
 2153               		.loc 1 2261 0
 2154 06aa EB89      		ldd r30,Y+19
 2155 06ac FC89      		ldd r31,Y+20
2335:Lib/FATFs/ff.c **** 		if (!dir) {						/* Current dir itself */
 2156               		.loc 1 2335 0
 2157 06ae 3097      		sbiw r30,0
 2158 06b0 01F0      		breq .L146
2336:Lib/FATFs/ff.c **** 			res = FR_INVALID_NAME;
2337:Lib/FATFs/ff.c **** 		} else {
2338:Lib/FATFs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
 2159               		.loc 1 2338 0
 2160 06b2 8385      		ldd r24,Z+11
 2161 06b4 84FF      		sbrs r24,4
 2162 06b6 00C0      		rjmp .L185
2339:Lib/FATFs/ff.c **** 				res = FR_NO_FILE;
 2163               		.loc 1 2339 0
 2164 06b8 84E0      		ldi r24,lo8(4)
 2165 06ba 00C0      		rjmp .L77
 2166               	.LVL197:
 2167               	.L91:
 2168               	.LBB57:
 2169               	.LBB52:
 2170               	.LBB47:
 2171               	.LBB32:
1796:Lib/FATFs/ff.c **** 				b |= 2;
 2172               		.loc 1 1796 0
 2173 06bc 6FEB      		ldi r22,lo8(-65)
 2174 06be 600F      		add r22,r16
 2175 06c0 6A31      		cpi r22,lo8(26)
 2176 06c2 00F4      		brsh .L186
1797:Lib/FATFs/ff.c **** 			} else {
 2177               		.loc 1 1797 0
 2178 06c4 B92D      		mov r27,r9
 2179 06c6 B260      		ori r27,lo8(2)
 2180 06c8 9B2E      		mov r9,r27
 2181               	.LVL198:
 2182 06ca 00C0      		rjmp .L93
 2183               	.L186:
1799:Lib/FATFs/ff.c **** 					b |= 1; c -= 0x20;
 2184               		.loc 1 1799 0
 2185 06cc 6FE9      		ldi r22,lo8(-97)
 2186 06ce 600F      		add r22,r16
 2187 06d0 6A31      		cpi r22,lo8(26)
 2188 06d2 00F4      		brsh .L93
1800:Lib/FATFs/ff.c **** 				}
 2189               		.loc 1 1800 0
 2190 06d4 692D      		mov r22,r9
 2191 06d6 6160      		ori r22,lo8(1)
 2192 06d8 962E      		mov r9,r22
 2193               	.LVL199:
 2194 06da 0052      		subi r16,lo8(-(-32))
 2195               	.LVL200:
 2196               	.L93:
1803:Lib/FATFs/ff.c **** 		}
 2197               		.loc 1 1803 0
 2198 06dc BF01      		movw r22,r30
 2199 06de 680F      		add r22,r24
 2200 06e0 791F      		adc r23,r25
 2201 06e2 DB01      		movw r26,r22
 2202 06e4 0C93      		st X,r16
 2203 06e6 0196      		adiw r24,1
 2204               	.LVL201:
 2205 06e8 00C0      		rjmp .L86
 2206               	.LVL202:
 2207               	.L102:
 2208               	.LBE32:
 2209               	.LBE47:
 2210               	.LBB48:
 2211               	.LBB45:
 2212               	.LBB43:
 2213               	.LBB41:
1118:Lib/FATFs/ff.c **** 
 2214               		.loc 1 1118 0
 2215 06ea 14E0      		ldi r17,lo8(4)
 2216 06ec 00C0      		rjmp .L107
 2217               	.LVL203:
 2218               	.L146:
 2219               	.LBE41:
 2220               	.LBE43:
 2221               	.LBE45:
 2222               	.LBE48:
 2223               	.LBE52:
 2224               	.LBE57:
2336:Lib/FATFs/ff.c **** 		} else {
 2225               		.loc 1 2336 0
 2226 06ee 86E0      		ldi r24,lo8(6)
 2227 06f0 00C0      		rjmp .L77
 2228               	.LVL204:
 2229               	.L141:
 2230               	.LBB58:
 2231               	.LBB53:
 2232               	.LBB49:
 2233               	.LBB33:
1809:Lib/FATFs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 2234               		.loc 1 1809 0
 2235 06f2 16E0      		ldi r17,lo8(6)
 2236               	.LVL205:
 2237               	.L71:
 2238               	.LBE33:
 2239               	.LBE49:
 2240               	.LBE53:
 2241               	.LBE58:
2336:Lib/FATFs/ff.c **** 		} else {
 2242               		.loc 1 2336 0
 2243 06f4 812F      		mov r24,r17
 2244               	.LVL206:
 2245               	.L77:
 2246               	.LBB59:
 2247               	.LBB54:
1943:Lib/FATFs/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 2248               		.loc 1 1943 0
 2249 06f6 182F      		mov r17,r24
 2250 06f8 00C0      		rjmp .L181
 2251               	.LVL207:
 2252               	.L185:
 2253               	.LBE54:
 2254               	.LBE59:
2340:Lib/FATFs/ff.c **** 		}
2341:Lib/FATFs/ff.c **** 	}
2342:Lib/FATFs/ff.c **** #endif
2343:Lib/FATFs/ff.c **** 	FREE_BUF();
2344:Lib/FATFs/ff.c **** 
2345:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2346:Lib/FATFs/ff.c **** 		fp->flag = mode;					/* File access mode */
 2255               		.loc 1 2346 0
 2256 06fa 8BA9      		ldd r24,Y+51
 2257 06fc 8170      		andi r24,lo8(1)
 2258 06fe ABA1      		ldd r26,Y+35
 2259 0700 BCA1      		ldd r27,Y+36
 2260 0702 1496      		adiw r26,4
 2261 0704 8C93      		st X,r24
2347:Lib/FATFs/ff.c **** 		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 2262               		.loc 1 2347 0
 2263 0706 8489      		ldd r24,Z+20
 2264 0708 9589      		ldd r25,Z+21
 2265 070a A0E0      		ldi r26,0
 2266 070c B0E0      		ldi r27,0
 2267 070e DC01      		movw r26,r24
 2268 0710 9927      		clr r25
 2269 0712 8827      		clr r24
 2270 0714 428D      		ldd r20,Z+26
 2271 0716 538D      		ldd r21,Z+27
 2272 0718 60E0      		ldi r22,0
 2273 071a 70E0      		ldi r23,0
 2274 071c 482B      		or r20,r24
 2275 071e 592B      		or r21,r25
 2276 0720 6A2B      		or r22,r26
 2277 0722 7B2B      		or r23,r27
 2278 0724 ABA1      		ldd r26,Y+35
 2279 0726 BCA1      		ldd r27,Y+36
 2280 0728 1E96      		adiw r26,14
 2281 072a 4D93      		st X+,r20
 2282 072c 5D93      		st X+,r21
 2283 072e 6D93      		st X+,r22
 2284 0730 7C93      		st X,r23
 2285 0732 5197      		sbiw r26,14+3
2348:Lib/FATFs/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 2286               		.loc 1 2348 0
 2287 0734 848D      		ldd r24,Z+28
 2288 0736 958D      		ldd r25,Z+29
 2289 0738 A68D      		ldd r26,Z+30
 2290 073a B78D      		ldd r27,Z+31
 2291 073c EBA1      		ldd r30,Y+35
 2292 073e FCA1      		ldd r31,Y+36
 2293               	.LVL208:
 2294 0740 8287      		std Z+10,r24
 2295 0742 9387      		std Z+11,r25
 2296 0744 A487      		std Z+12,r26
 2297 0746 B587      		std Z+13,r27
2349:Lib/FATFs/ff.c **** 		fp->fptr = 0;						/* File pointer */
 2298               		.loc 1 2349 0
 2299 0748 DF01      		movw r26,r30
 2300 074a 1682      		std Z+6,__zero_reg__
 2301 074c 1782      		std Z+7,__zero_reg__
 2302 074e 1086      		std Z+8,__zero_reg__
 2303 0750 1186      		std Z+9,__zero_reg__
2350:Lib/FATFs/ff.c **** 		fp->dsect = 0;
 2304               		.loc 1 2350 0
 2305 0752 168A      		std Z+22,__zero_reg__
 2306 0754 178A      		std Z+23,__zero_reg__
 2307 0756 108E      		std Z+24,__zero_reg__
 2308 0758 118E      		std Z+25,__zero_reg__
2351:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2352:Lib/FATFs/ff.c **** 		fp->cltbl = 0;						/* Normal seek mode */
2353:Lib/FATFs/ff.c **** #endif
2354:Lib/FATFs/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 2309               		.loc 1 2354 0
 2310 075a E981      		ldd r30,Y+1
 2311 075c FA81      		ldd r31,Y+2
 2312 075e 1196      		adiw r26,1
 2313 0760 FC93      		st X,r31
 2314 0762 EE93      		st -X,r30
 2315 0764 8681      		ldd r24,Z+6
 2316 0766 9781      		ldd r25,Z+7
 2317 0768 1396      		adiw r26,2+1
 2318 076a 9C93      		st X,r25
 2319 076c 8E93      		st -X,r24
 2320 076e 1297      		sbiw r26,2
2355:Lib/FATFs/ff.c **** 	}
2356:Lib/FATFs/ff.c **** 
2357:Lib/FATFs/ff.c **** 	LEAVE_FF(dj.fs, res);
 2321               		.loc 1 2357 0
 2322 0770 00C0      		rjmp .L181
 2323               	.LVL209:
 2324               	.L133:
 2325               	.LBB60:
 2326               	.LBB20:
2106:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 2327               		.loc 1 2106 0
 2328 0772 22E0      		ldi r18,lo8(2)
 2329               	.LVL210:
 2330 0774 00C0      		rjmp .L68
 2331               	.LVL211:
 2332               	.L70:
2121:Lib/FATFs/ff.c **** 	}
 2333               		.loc 1 2121 0
 2334 0776 A3E0      		ldi r26,lo8(3)
 2335 0778 B0E0      		ldi r27,0
 2336 077a A701      		movw r20,r14
 2337 077c 9601      		movw r18,r12
 2338               	.LVL212:
 2339 077e 0E94 0000 		call __muluhisi3
 2340 0782 DC01      		movw r26,r24
 2341 0784 CB01      		movw r24,r22
 2342 0786 B695      		lsr r27
 2343 0788 A795      		ror r26
 2344 078a 9795      		ror r25
 2345 078c 8795      		ror r24
 2346 078e E1E0      		ldi r30,1
 2347 0790 CE22      		and r12,r30
 2348 0792 DD24      		clr r13
 2349 0794 EE24      		clr r14
 2350 0796 FF24      		clr r15
 2351               	.LVL213:
 2352 0798 C80E      		add r12,r24
 2353 079a D91E      		adc r13,r25
 2354 079c EA1E      		adc r14,r26
 2355 079e FB1E      		adc r15,r27
 2356 07a0 21E0      		ldi r18,lo8(1)
 2357 07a2 00C0      		rjmp .L69
 2358               	.LVL214:
 2359               	.L145:
 2360               	.LBE20:
 2361               	.LBE60:
 2362               	.LBB61:
 2363               	.LBB55:
1958:Lib/FATFs/ff.c **** 			}
 2364               		.loc 1 1958 0
 2365 07a4 15E0      		ldi r17,lo8(5)
 2366 07a6 00C0      		rjmp .L71
 2367               	.LVL215:
 2368               	.L143:
 2369               	.LBB50:
 2370               	.LBB46:
 2371               	.LBB44:
 2372               	.LBB42:
1130:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2373               		.loc 1 1130 0
 2374 07a8 12E0      		ldi r17,lo8(2)
 2375 07aa 00C0      		rjmp .L107
 2376               	.L144:
1131:Lib/FATFs/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 2377               		.loc 1 1131 0
 2378 07ac 11E0      		ldi r17,lo8(1)
 2379               	.LVL216:
 2380               	.L107:
 2381               	.LBE42:
 2382               	.LBE44:
 2383               	.LBE46:
 2384               	.LBE50:
1942:Lib/FATFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 2385               		.loc 1 1942 0
 2386 07ae ED89      		ldd r30,Y+21
 2387 07b0 FE89      		ldd r31,Y+22
 2388 07b2 9385      		ldd r25,Z+11
 2389               	.LVL217:
 2390 07b4 00C0      		rjmp .L115
 2391               	.LVL218:
 2392               	.L181:
 2393               	.LBE55:
 2394               	.LBE61:
2358:Lib/FATFs/ff.c **** }
 2395               		.loc 1 2358 0
 2396 07b6 812F      		mov r24,r17
 2397               	/* epilogue start */
 2398 07b8 E396      		adiw r28,51
 2399               	.LVL219:
 2400 07ba 0FB6      		in __tmp_reg__,__SREG__
 2401 07bc F894      		cli
 2402 07be DEBF      		out __SP_H__,r29
 2403 07c0 0FBE      		out __SREG__,__tmp_reg__
 2404 07c2 CDBF      		out __SP_L__,r28
 2405 07c4 DF91      		pop r29
 2406 07c6 CF91      		pop r28
 2407               	.LVL220:
 2408 07c8 1F91      		pop r17
 2409 07ca 0F91      		pop r16
 2410 07cc FF90      		pop r15
 2411 07ce EF90      		pop r14
 2412 07d0 DF90      		pop r13
 2413 07d2 CF90      		pop r12
 2414 07d4 BF90      		pop r11
 2415 07d6 AF90      		pop r10
 2416 07d8 9F90      		pop r9
 2417 07da 8F90      		pop r8
 2418 07dc 7F90      		pop r7
 2419 07de 6F90      		pop r6
 2420 07e0 5F90      		pop r5
 2421 07e2 4F90      		pop r4
 2422 07e4 3F90      		pop r3
 2423 07e6 2F90      		pop r2
 2424 07e8 0895      		ret
 2425               		.cfi_endproc
 2426               	.LFE221:
 2428               		.section	.text.f_read,"ax",@progbits
 2429               	.global	f_read
 2431               	f_read:
 2432               	.LFB222:
2359:Lib/FATFs/ff.c **** 
2360:Lib/FATFs/ff.c **** 
2361:Lib/FATFs/ff.c **** 
2362:Lib/FATFs/ff.c **** 
2363:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2364:Lib/FATFs/ff.c **** /* Read File                                                             */
2365:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2366:Lib/FATFs/ff.c **** 
2367:Lib/FATFs/ff.c **** FRESULT f_read (
2368:Lib/FATFs/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
2369:Lib/FATFs/ff.c **** 	void *buff,		/* Pointer to data buffer */
2370:Lib/FATFs/ff.c **** 	UINT btr,		/* Number of bytes to read */
2371:Lib/FATFs/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
2372:Lib/FATFs/ff.c **** )
2373:Lib/FATFs/ff.c **** {
 2433               		.loc 1 2373 0
 2434               		.cfi_startproc
 2435               	.LVL221:
 2436 0000 4F92      		push r4
 2437               	.LCFI46:
 2438               		.cfi_def_cfa_offset 3
 2439               		.cfi_offset 4, -2
 2440 0002 5F92      		push r5
 2441               	.LCFI47:
 2442               		.cfi_def_cfa_offset 4
 2443               		.cfi_offset 5, -3
 2444 0004 6F92      		push r6
 2445               	.LCFI48:
 2446               		.cfi_def_cfa_offset 5
 2447               		.cfi_offset 6, -4
 2448 0006 7F92      		push r7
 2449               	.LCFI49:
 2450               		.cfi_def_cfa_offset 6
 2451               		.cfi_offset 7, -5
 2452 0008 8F92      		push r8
 2453               	.LCFI50:
 2454               		.cfi_def_cfa_offset 7
 2455               		.cfi_offset 8, -6
 2456 000a 9F92      		push r9
 2457               	.LCFI51:
 2458               		.cfi_def_cfa_offset 8
 2459               		.cfi_offset 9, -7
 2460 000c AF92      		push r10
 2461               	.LCFI52:
 2462               		.cfi_def_cfa_offset 9
 2463               		.cfi_offset 10, -8
 2464 000e BF92      		push r11
 2465               	.LCFI53:
 2466               		.cfi_def_cfa_offset 10
 2467               		.cfi_offset 11, -9
 2468 0010 CF92      		push r12
 2469               	.LCFI54:
 2470               		.cfi_def_cfa_offset 11
 2471               		.cfi_offset 12, -10
 2472 0012 DF92      		push r13
 2473               	.LCFI55:
 2474               		.cfi_def_cfa_offset 12
 2475               		.cfi_offset 13, -11
 2476 0014 EF92      		push r14
 2477               	.LCFI56:
 2478               		.cfi_def_cfa_offset 13
 2479               		.cfi_offset 14, -12
 2480 0016 FF92      		push r15
 2481               	.LCFI57:
 2482               		.cfi_def_cfa_offset 14
 2483               		.cfi_offset 15, -13
 2484 0018 0F93      		push r16
 2485               	.LCFI58:
 2486               		.cfi_def_cfa_offset 15
 2487               		.cfi_offset 16, -14
 2488 001a 1F93      		push r17
 2489               	.LCFI59:
 2490               		.cfi_def_cfa_offset 16
 2491               		.cfi_offset 17, -15
 2492 001c CF93      		push r28
 2493               	.LCFI60:
 2494               		.cfi_def_cfa_offset 17
 2495               		.cfi_offset 28, -16
 2496 001e DF93      		push r29
 2497               	.LCFI61:
 2498               		.cfi_def_cfa_offset 18
 2499               		.cfi_offset 29, -17
 2500               	/* prologue: function */
 2501               	/* frame size = 0 */
 2502               	/* stack size = 16 */
 2503               	.L__stack_usage = 16
 2504 0020 EC01      		movw r28,r24
 2505 0022 6B01      		movw r12,r22
 2506 0024 7A01      		movw r14,r20
 2507 0026 5901      		movw r10,r18
 2508               	.LVL222:
2374:Lib/FATFs/ff.c **** 	FRESULT res;
2375:Lib/FATFs/ff.c **** 	DWORD clst, sect, remain;
2376:Lib/FATFs/ff.c **** 	UINT rcnt, cc;
2377:Lib/FATFs/ff.c **** 	BYTE csect, *rbuff = buff;
2378:Lib/FATFs/ff.c **** 
2379:Lib/FATFs/ff.c **** 
2380:Lib/FATFs/ff.c **** 	*br = 0;	/* Initialize byte counter */
 2509               		.loc 1 2380 0
 2510 0028 F901      		movw r30,r18
 2511 002a 1182      		std Z+1,__zero_reg__
 2512 002c 1082      		st Z,__zero_reg__
2381:Lib/FATFs/ff.c **** 
2382:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);				/* Check validity */
 2513               		.loc 1 2382 0
 2514 002e 6A81      		ldd r22,Y+2
 2515 0030 7B81      		ldd r23,Y+3
 2516               	.LVL223:
 2517 0032 8881      		ld r24,Y
 2518 0034 9981      		ldd r25,Y+1
 2519               	.LVL224:
 2520 0036 0E94 0000 		call validate
 2521               	.LVL225:
2383:Lib/FATFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 2522               		.loc 1 2383 0
 2523 003a 8111      		cpse r24,__zero_reg__
 2524 003c 00C0      		rjmp .L188
2384:Lib/FATFs/ff.c **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 2525               		.loc 1 2384 0
 2526 003e 8C81      		ldd r24,Y+4
 2527               	.LVL226:
 2528 0040 87FD      		sbrc r24,7
 2529 0042 00C0      		rjmp .L208
2385:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2386:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 2530               		.loc 1 2386 0
 2531 0044 80FF      		sbrs r24,0
 2532 0046 00C0      		rjmp .L209
2387:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2388:Lib/FATFs/ff.c **** 	remain = fp->fsize - fp->fptr;
 2533               		.loc 1 2388 0
 2534 0048 8A85      		ldd r24,Y+10
 2535 004a 9B85      		ldd r25,Y+11
 2536 004c AC85      		ldd r26,Y+12
 2537 004e BD85      		ldd r27,Y+13
 2538 0050 4E81      		ldd r20,Y+6
 2539 0052 5F81      		ldd r21,Y+7
 2540 0054 6885      		ldd r22,Y+8
 2541 0056 7985      		ldd r23,Y+9
 2542 0058 841B      		sub r24,r20
 2543 005a 950B      		sbc r25,r21
 2544 005c A60B      		sbc r26,r22
 2545 005e B70B      		sbc r27,r23
 2546               	.LVL227:
2389:Lib/FATFs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 2547               		.loc 1 2389 0
 2548 0060 A701      		movw r20,r14
 2549 0062 60E0      		ldi r22,0
 2550 0064 70E0      		ldi r23,0
 2551 0066 8417      		cp r24,r20
 2552 0068 9507      		cpc r25,r21
 2553 006a A607      		cpc r26,r22
 2554 006c B707      		cpc r27,r23
 2555 006e 00F4      		brsh .L189
 2556               		.loc 1 2389 0 is_stmt 0 discriminator 1
 2557 0070 7C01      		movw r14,r24
 2558               	.LVL228:
 2559               	.L189:
2390:Lib/FATFs/ff.c **** 
2391:Lib/FATFs/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
2392:Lib/FATFs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2393:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
2394:Lib/FATFs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2395:Lib/FATFs/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
2396:Lib/FATFs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
2397:Lib/FATFs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
2398:Lib/FATFs/ff.c **** 				} else {						/* Middle or end of the file */
2399:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2400:Lib/FATFs/ff.c **** 					if (fp->cltbl)
2401:Lib/FATFs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2402:Lib/FATFs/ff.c **** 					else
2403:Lib/FATFs/ff.c **** #endif
2404:Lib/FATFs/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
2405:Lib/FATFs/ff.c **** 				}
2406:Lib/FATFs/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
2407:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2408:Lib/FATFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
2409:Lib/FATFs/ff.c **** 			}
2410:Lib/FATFs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2411:Lib/FATFs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2412:Lib/FATFs/ff.c **** 			sect += csect;
2413:Lib/FATFs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
2414:Lib/FATFs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
2415:Lib/FATFs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2416:Lib/FATFs/ff.c **** 					cc = fp->fs->csize - csect;
2417:Lib/FATFs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
2418:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2419:Lib/FATFs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2420:Lib/FATFs/ff.c **** #if _FS_TINY
2421:Lib/FATFs/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2422:Lib/FATFs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2423:Lib/FATFs/ff.c **** #else
2424:Lib/FATFs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2425:Lib/FATFs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2426:Lib/FATFs/ff.c **** #endif
2427:Lib/FATFs/ff.c **** #endif
2428:Lib/FATFs/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
2429:Lib/FATFs/ff.c **** 				continue;
2430:Lib/FATFs/ff.c **** 			}
2431:Lib/FATFs/ff.c **** #if !_FS_TINY
2432:Lib/FATFs/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
2433:Lib/FATFs/ff.c **** #if !_FS_READONLY
2434:Lib/FATFs/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2435:Lib/FATFs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2436:Lib/FATFs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2437:Lib/FATFs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2438:Lib/FATFs/ff.c **** 				}
2439:Lib/FATFs/ff.c **** #endif
2440:Lib/FATFs/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
2441:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2442:Lib/FATFs/ff.c **** 			}
2443:Lib/FATFs/ff.c **** #endif
2444:Lib/FATFs/ff.c **** 			fp->dsect = sect;
2445:Lib/FATFs/ff.c **** 		}
2446:Lib/FATFs/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 2560               		.loc 1 2446 0 is_stmt 1
 2561 0072 412C      		mov r4,__zero_reg__
 2562 0074 32E0      		ldi r19,lo8(2)
 2563 0076 532E      		mov r5,r19
 2564               	.LVL229:
 2565               	.L190:
2391:Lib/FATFs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 2566               		.loc 1 2391 0
 2567 0078 E114      		cp r14,__zero_reg__
 2568 007a F104      		cpc r15,__zero_reg__
 2569 007c 01F4      		brne .+2
 2570 007e 00C0      		rjmp .L215
2393:Lib/FATFs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 2571               		.loc 1 2393 0
 2572 0080 4E81      		ldd r20,Y+6
 2573 0082 5F81      		ldd r21,Y+7
 2574 0084 6885      		ldd r22,Y+8
 2575 0086 7985      		ldd r23,Y+9
 2576 0088 DB01      		movw r26,r22
 2577 008a CA01      		movw r24,r20
 2578 008c 9170      		andi r25,1
 2579 008e AA27      		clr r26
 2580 0090 BB27      		clr r27
 2581 0092 892B      		or r24,r25
 2582 0094 8A2B      		or r24,r26
 2583 0096 8B2B      		or r24,r27
 2584 0098 01F0      		breq .+2
 2585 009a 00C0      		rjmp .L191
2394:Lib/FATFs/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 2586               		.loc 1 2394 0
 2587 009c 8881      		ld r24,Y
 2588 009e 9981      		ldd r25,Y+1
 2589 00a0 FC01      		movw r30,r24
 2590 00a2 1281      		ldd r17,Z+2
 2591 00a4 1150      		subi r17,lo8(-(-1))
 2592 00a6 3A01      		movw r6,r20
 2593 00a8 4B01      		movw r8,r22
 2594 00aa 29E0      		ldi r18,9
 2595               		1:
 2596 00ac 9694      		lsr r9
 2597 00ae 8794      		ror r8
 2598 00b0 7794      		ror r7
 2599 00b2 6794      		ror r6
 2600 00b4 2A95      		dec r18
 2601 00b6 01F4      		brne 1b
 2602 00b8 1621      		and r17,r6
 2603               	.LVL230:
2395:Lib/FATFs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 2604               		.loc 1 2395 0
 2605 00ba 01F4      		brne .L192
2396:Lib/FATFs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 2606               		.loc 1 2396 0
 2607 00bc 452B      		or r20,r21
 2608 00be 462B      		or r20,r22
 2609 00c0 472B      		or r20,r23
 2610 00c2 01F4      		brne .L193
2397:Lib/FATFs/ff.c **** 				} else {						/* Middle or end of the file */
 2611               		.loc 1 2397 0
 2612 00c4 6E85      		ldd r22,Y+14
 2613 00c6 7F85      		ldd r23,Y+15
 2614 00c8 8889      		ldd r24,Y+16
 2615 00ca 9989      		ldd r25,Y+17
 2616               	.LVL231:
 2617 00cc 00C0      		rjmp .L194
 2618               	.LVL232:
 2619               	.L193:
2404:Lib/FATFs/ff.c **** 				}
 2620               		.loc 1 2404 0
 2621 00ce 4A89      		ldd r20,Y+18
 2622 00d0 5B89      		ldd r21,Y+19
 2623 00d2 6C89      		ldd r22,Y+20
 2624 00d4 7D89      		ldd r23,Y+21
 2625 00d6 0E94 0000 		call get_fat
 2626               	.LVL233:
 2627               	.L194:
2406:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 2628               		.loc 1 2406 0
 2629 00da 6230      		cpi r22,2
 2630 00dc 7105      		cpc r23,__zero_reg__
 2631 00de 8105      		cpc r24,__zero_reg__
 2632 00e0 9105      		cpc r25,__zero_reg__
 2633 00e2 00F0      		brlo .L213
2407:Lib/FATFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 2634               		.loc 1 2407 0
 2635 00e4 6F3F      		cpi r22,-1
 2636 00e6 FFEF      		ldi r31,-1
 2637 00e8 7F07      		cpc r23,r31
 2638 00ea 8F07      		cpc r24,r31
 2639 00ec 9F07      		cpc r25,r31
 2640 00ee 01F4      		brne .+2
 2641 00f0 00C0      		rjmp .L214
2408:Lib/FATFs/ff.c **** 			}
 2642               		.loc 1 2408 0
 2643 00f2 6A8B      		std Y+18,r22
 2644 00f4 7B8B      		std Y+19,r23
 2645 00f6 8C8B      		std Y+20,r24
 2646 00f8 9D8B      		std Y+21,r25
 2647               	.LVL234:
 2648               	.L192:
2410:Lib/FATFs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 2649               		.loc 1 2410 0
 2650 00fa 6880      		ld r6,Y
 2651 00fc 7980      		ldd r7,Y+1
 2652 00fe 4A89      		ldd r20,Y+18
 2653 0100 5B89      		ldd r21,Y+19
 2654 0102 6C89      		ldd r22,Y+20
 2655 0104 7D89      		ldd r23,Y+21
 2656 0106 C301      		movw r24,r6
 2657 0108 0E94 0000 		call clust2sect
 2658               	.LVL235:
2411:Lib/FATFs/ff.c **** 			sect += csect;
 2659               		.loc 1 2411 0
 2660 010c 6115      		cp r22,__zero_reg__
 2661 010e 7105      		cpc r23,__zero_reg__
 2662 0110 8105      		cpc r24,__zero_reg__
 2663 0112 9105      		cpc r25,__zero_reg__
 2664 0114 01F4      		brne .L197
 2665               	.LVL236:
 2666               	.L213:
2411:Lib/FATFs/ff.c **** 			sect += csect;
 2667               		.loc 1 2411 0 is_stmt 0 discriminator 1
 2668 0116 8C81      		ldd r24,Y+4
 2669 0118 8068      		ori r24,lo8(-128)
 2670 011a 8C83      		std Y+4,r24
 2671 011c 00C0      		rjmp .L208
 2672               	.LVL237:
 2673               	.L197:
2412:Lib/FATFs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 2674               		.loc 1 2412 0 is_stmt 1
 2675 011e 9B01      		movw r18,r22
 2676 0120 AC01      		movw r20,r24
 2677 0122 210F      		add r18,r17
 2678 0124 311D      		adc r19,__zero_reg__
 2679 0126 411D      		adc r20,__zero_reg__
 2680 0128 511D      		adc r21,__zero_reg__
 2681               	.LVL238:
2413:Lib/FATFs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 2682               		.loc 1 2413 0
 2683 012a 4701      		movw r8,r14
 2684 012c 892C      		mov r8,r9
 2685 012e 9924      		clr r9
 2686 0130 8694      		lsr r8
 2687               	.LVL239:
2414:Lib/FATFs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 2688               		.loc 1 2414 0
 2689 0132 8114      		cp r8,__zero_reg__
 2690 0134 9104      		cpc r9,__zero_reg__
 2691 0136 01F0      		breq .L198
2415:Lib/FATFs/ff.c **** 					cc = fp->fs->csize - csect;
 2692               		.loc 1 2415 0
 2693 0138 F301      		movw r30,r6
 2694 013a 8281      		ldd r24,Z+2
 2695 013c 612F      		mov r22,r17
 2696 013e 70E0      		ldi r23,0
 2697 0140 FB01      		movw r30,r22
 2698 0142 E80D      		add r30,r8
 2699 0144 F91D      		adc r31,r9
 2700 0146 90E0      		ldi r25,0
 2701 0148 8E17      		cp r24,r30
 2702 014a 9F07      		cpc r25,r31
 2703 014c 00F4      		brsh .L199
2416:Lib/FATFs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 2704               		.loc 1 2416 0
 2705 014e 4C01      		movw r8,r24
 2706               	.LVL240:
 2707 0150 861A      		sub r8,r22
 2708 0152 970A      		sbc r9,r23
 2709               	.LVL241:
 2710               	.L199:
2417:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 2711               		.loc 1 2417 0
 2712 0154 082D      		mov r16,r8
 2713 0156 B601      		movw r22,r12
 2714 0158 F301      		movw r30,r6
 2715 015a 8181      		ldd r24,Z+1
 2716 015c 0E94 0000 		call disk_read
 2717               	.LVL242:
 2718 0160 8111      		cpse r24,__zero_reg__
 2719 0162 00C0      		rjmp .L214
2428:Lib/FATFs/ff.c **** 				continue;
 2720               		.loc 1 2428 0
 2721 0164 8401      		movw r16,r8
 2722 0166 102F      		mov r17,r16
 2723 0168 0027      		clr r16
 2724 016a 110F      		lsl r17
 2725               	.LVL243:
2429:Lib/FATFs/ff.c **** 			}
 2726               		.loc 1 2429 0
 2727 016c 00C0      		rjmp .L201
 2728               	.LVL244:
 2729               	.L198:
2444:Lib/FATFs/ff.c **** 		}
 2730               		.loc 1 2444 0
 2731 016e 2E8B      		std Y+22,r18
 2732 0170 3F8B      		std Y+23,r19
 2733 0172 488F      		std Y+24,r20
 2734 0174 598F      		std Y+25,r21
 2735               	.LVL245:
 2736               	.L191:
 2737               		.loc 1 2446 0
 2738 0176 8E81      		ldd r24,Y+6
 2739 0178 9F81      		ldd r25,Y+7
 2740 017a 9170      		andi r25,1
 2741 017c 9201      		movw r18,r4
 2742 017e 281B      		sub r18,r24
 2743 0180 390B      		sbc r19,r25
 2744               	.LVL246:
 2745 0182 8701      		movw r16,r14
 2746 0184 2E15      		cp r18,r14
 2747 0186 3F05      		cpc r19,r15
 2748 0188 00F4      		brsh .L202
 2749 018a 8901      		movw r16,r18
 2750               	.L202:
 2751               	.LVL247:
2447:Lib/FATFs/ff.c **** 		if (rcnt > btr) rcnt = btr;
2448:Lib/FATFs/ff.c **** #if _FS_TINY
2449:Lib/FATFs/ff.c **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
 2752               		.loc 1 2449 0
 2753 018c 4E89      		ldd r20,Y+22
 2754 018e 5F89      		ldd r21,Y+23
 2755 0190 688D      		ldd r22,Y+24
 2756 0192 798D      		ldd r23,Y+25
 2757 0194 8881      		ld r24,Y
 2758 0196 9981      		ldd r25,Y+1
 2759 0198 0E94 0000 		call move_window
 2760               	.LVL248:
 2761 019c 8823      		tst r24
 2762 019e 01F0      		breq .L203
 2763               	.LVL249:
 2764               	.L214:
2450:Lib/FATFs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
 2765               		.loc 1 2450 0
 2766 01a0 8C81      		ldd r24,Y+4
 2767 01a2 8068      		ori r24,lo8(-128)
 2768 01a4 8C83      		std Y+4,r24
 2769 01a6 81E0      		ldi r24,lo8(1)
 2770 01a8 00C0      		rjmp .L188
 2771               	.LVL250:
 2772               	.L203:
2451:Lib/FATFs/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 2773               		.loc 1 2451 0
 2774 01aa 8E81      		ldd r24,Y+6
 2775 01ac 9F81      		ldd r25,Y+7
 2776 01ae A885      		ldd r26,Y+8
 2777 01b0 B985      		ldd r27,Y+9
 2778 01b2 9170      		andi r25,1
 2779 01b4 AA27      		clr r26
 2780 01b6 BB27      		clr r27
 2781 01b8 8296      		adiw r24,34
 2782 01ba 2881      		ld r18,Y
 2783 01bc 3981      		ldd r19,Y+1
 2784 01be 820F      		add r24,r18
 2785 01c0 931F      		adc r25,r19
 2786               	.LVL251:
 2787 01c2 DC01      		movw r26,r24
 2788               	.LBB64:
 2789               	.LBB65:
 522:Lib/FATFs/ff.c **** 	const BYTE *s = (const BYTE*)src;
 2790               		.loc 1 522 0
 2791 01c4 F601      		movw r30,r12
 2792               	.LBE65:
 2793               	.LBE64:
 2794               		.loc 1 2451 0
 2795 01c6 9801      		movw r18,r16
 2796               	.LVL252:
 2797               	.L204:
 2798               	.LBB67:
 2799               	.LBB66:
 526:Lib/FATFs/ff.c **** 		*(int*)d = *(int*)s;
 2800               		.loc 1 526 0
 2801 01c8 2230      		cpi r18,2
 2802 01ca 3105      		cpc r19,__zero_reg__
 2803 01cc 00F0      		brlo .L216
 527:Lib/FATFs/ff.c **** 		d += sizeof(int); s += sizeof(int);
 2804               		.loc 1 527 0
 2805 01ce 4D91      		ld r20,X+
 2806 01d0 5D91      		ld r21,X+
 2807               	.LVL253:
 2808 01d2 4193      		st Z+,r20
 2809 01d4 5193      		st Z+,r21
 2810               	.LVL254:
 529:Lib/FATFs/ff.c **** 	}
 2811               		.loc 1 529 0
 2812 01d6 2250      		subi r18,2
 2813 01d8 3109      		sbc r19,__zero_reg__
 2814               	.LVL255:
 2815 01da 00C0      		rjmp .L204
 2816               	.L216:
 2817 01dc 9801      		movw r18,r16
 2818               	.LVL256:
 2819 01de 2E7F      		andi r18,254
 2820 01e0 DC01      		movw r26,r24
 2821               	.LVL257:
 2822 01e2 A20F      		add r26,r18
 2823 01e4 B31F      		adc r27,r19
 2824 01e6 F601      		movw r30,r12
 2825               	.LVL258:
 2826 01e8 E20F      		add r30,r18
 2827 01ea F31F      		adc r31,r19
 2828               	.LVL259:
 532:Lib/FATFs/ff.c **** 		*d++ = *s++;
 2829               		.loc 1 532 0
 2830 01ec 0217      		cp r16,r18
 2831 01ee 1307      		cpc r17,r19
 2832 01f0 01F0      		breq .L201
 2833               	.LVL260:
 533:Lib/FATFs/ff.c **** }
 2834               		.loc 1 533 0
 2835 01f2 8C91      		ld r24,X
 2836               	.LVL261:
 2837 01f4 8083      		st Z,r24
 2838               	.LVL262:
 2839               	.L201:
 2840               	.LBE66:
 2841               	.LBE67:
2392:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 2842               		.loc 1 2392 0
 2843 01f6 C00E      		add r12,r16
 2844 01f8 D11E      		adc r13,r17
 2845               	.LVL263:
 2846 01fa 8E81      		ldd r24,Y+6
 2847 01fc 9F81      		ldd r25,Y+7
 2848 01fe A885      		ldd r26,Y+8
 2849 0200 B985      		ldd r27,Y+9
 2850 0202 800F      		add r24,r16
 2851 0204 911F      		adc r25,r17
 2852 0206 A11D      		adc r26,__zero_reg__
 2853 0208 B11D      		adc r27,__zero_reg__
 2854 020a 8E83      		std Y+6,r24
 2855 020c 9F83      		std Y+7,r25
 2856 020e A887      		std Y+8,r26
 2857 0210 B987      		std Y+9,r27
 2858 0212 F501      		movw r30,r10
 2859 0214 8081      		ld r24,Z
 2860 0216 9181      		ldd r25,Z+1
 2861 0218 800F      		add r24,r16
 2862 021a 911F      		adc r25,r17
 2863 021c 9183      		std Z+1,r25
 2864 021e 8083      		st Z,r24
 2865 0220 E01A      		sub r14,r16
 2866 0222 F10A      		sbc r15,r17
 2867               	.LVL264:
 2868 0224 00C0      		rjmp .L190
 2869               	.LVL265:
 2870               	.L215:
2452:Lib/FATFs/ff.c **** #else
2453:Lib/FATFs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2454:Lib/FATFs/ff.c **** #endif
2455:Lib/FATFs/ff.c **** 	}
2456:Lib/FATFs/ff.c **** 
2457:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 2871               		.loc 1 2457 0
 2872 0226 80E0      		ldi r24,0
 2873 0228 00C0      		rjmp .L188
 2874               	.L208:
2385:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 2875               		.loc 1 2385 0
 2876 022a 82E0      		ldi r24,lo8(2)
 2877 022c 00C0      		rjmp .L188
 2878               	.LVL266:
 2879               	.L209:
2387:Lib/FATFs/ff.c **** 	remain = fp->fsize - fp->fptr;
 2880               		.loc 1 2387 0
 2881 022e 87E0      		ldi r24,lo8(7)
 2882               	.LVL267:
 2883               	.L188:
 2884               	/* epilogue start */
2458:Lib/FATFs/ff.c **** }
 2885               		.loc 1 2458 0
 2886 0230 DF91      		pop r29
 2887 0232 CF91      		pop r28
 2888               	.LVL268:
 2889 0234 1F91      		pop r17
 2890 0236 0F91      		pop r16
 2891 0238 FF90      		pop r15
 2892 023a EF90      		pop r14
 2893               	.LVL269:
 2894 023c DF90      		pop r13
 2895 023e CF90      		pop r12
 2896               	.LVL270:
 2897 0240 BF90      		pop r11
 2898 0242 AF90      		pop r10
 2899               	.LVL271:
 2900 0244 9F90      		pop r9
 2901 0246 8F90      		pop r8
 2902 0248 7F90      		pop r7
 2903 024a 6F90      		pop r6
 2904 024c 5F90      		pop r5
 2905 024e 4F90      		pop r4
 2906 0250 0895      		ret
 2907               		.cfi_endproc
 2908               	.LFE222:
 2910               		.section	.text.f_close,"ax",@progbits
 2911               	.global	f_close
 2913               	f_close:
 2914               	.LFB223:
2459:Lib/FATFs/ff.c **** 
2460:Lib/FATFs/ff.c **** 
2461:Lib/FATFs/ff.c **** 
2462:Lib/FATFs/ff.c **** 
2463:Lib/FATFs/ff.c **** #if !_FS_READONLY
2464:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2465:Lib/FATFs/ff.c **** /* Write File                                                            */
2466:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2467:Lib/FATFs/ff.c **** 
2468:Lib/FATFs/ff.c **** FRESULT f_write (
2469:Lib/FATFs/ff.c **** 	FIL *fp,			/* Pointer to the file object */
2470:Lib/FATFs/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2471:Lib/FATFs/ff.c **** 	UINT btw,			/* Number of bytes to write */
2472:Lib/FATFs/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
2473:Lib/FATFs/ff.c **** )
2474:Lib/FATFs/ff.c **** {
2475:Lib/FATFs/ff.c **** 	FRESULT res;
2476:Lib/FATFs/ff.c **** 	DWORD clst, sect;
2477:Lib/FATFs/ff.c **** 	UINT wcnt, cc;
2478:Lib/FATFs/ff.c **** 	const BYTE *wbuff = buff;
2479:Lib/FATFs/ff.c **** 	BYTE csect;
2480:Lib/FATFs/ff.c **** 
2481:Lib/FATFs/ff.c **** 
2482:Lib/FATFs/ff.c **** 	*bw = 0;	/* Initialize byte counter */
2483:Lib/FATFs/ff.c **** 
2484:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);			/* Check validity */
2485:Lib/FATFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2486:Lib/FATFs/ff.c **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
2487:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2488:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
2489:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2490:Lib/FATFs/ff.c **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
2491:Lib/FATFs/ff.c **** 
2492:Lib/FATFs/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
2493:Lib/FATFs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2494:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
2495:Lib/FATFs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2496:Lib/FATFs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
2497:Lib/FATFs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
2498:Lib/FATFs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
2499:Lib/FATFs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
2500:Lib/FATFs/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2501:Lib/FATFs/ff.c **** 				} else {					/* Middle or end of the file */
2502:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2503:Lib/FATFs/ff.c **** 					if (fp->cltbl)
2504:Lib/FATFs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2505:Lib/FATFs/ff.c **** 					else
2506:Lib/FATFs/ff.c **** #endif
2507:Lib/FATFs/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2508:Lib/FATFs/ff.c **** 				}
2509:Lib/FATFs/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2510:Lib/FATFs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2511:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2512:Lib/FATFs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
2513:Lib/FATFs/ff.c **** 			}
2514:Lib/FATFs/ff.c **** #if _FS_TINY
2515:Lib/FATFs/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
2516:Lib/FATFs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2517:Lib/FATFs/ff.c **** #else
2518:Lib/FATFs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2519:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2520:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2521:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2522:Lib/FATFs/ff.c **** 			}
2523:Lib/FATFs/ff.c **** #endif
2524:Lib/FATFs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2525:Lib/FATFs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2526:Lib/FATFs/ff.c **** 			sect += csect;
2527:Lib/FATFs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2528:Lib/FATFs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
2529:Lib/FATFs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2530:Lib/FATFs/ff.c **** 					cc = fp->fs->csize - csect;
2531:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
2532:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2533:Lib/FATFs/ff.c **** #if _FS_TINY
2534:Lib/FATFs/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2535:Lib/FATFs/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2536:Lib/FATFs/ff.c **** 					fp->fs->wflag = 0;
2537:Lib/FATFs/ff.c **** 				}
2538:Lib/FATFs/ff.c **** #else
2539:Lib/FATFs/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
2540:Lib/FATFs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2541:Lib/FATFs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2542:Lib/FATFs/ff.c **** 				}
2543:Lib/FATFs/ff.c **** #endif
2544:Lib/FATFs/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
2545:Lib/FATFs/ff.c **** 				continue;
2546:Lib/FATFs/ff.c **** 			}
2547:Lib/FATFs/ff.c **** #if _FS_TINY
2548:Lib/FATFs/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2549:Lib/FATFs/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2550:Lib/FATFs/ff.c **** 				fp->fs->winsect = sect;
2551:Lib/FATFs/ff.c **** 			}
2552:Lib/FATFs/ff.c **** #else
2553:Lib/FATFs/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2554:Lib/FATFs/ff.c **** 				if (fp->fptr < fp->fsize &&
2555:Lib/FATFs/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2556:Lib/FATFs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2557:Lib/FATFs/ff.c **** 			}
2558:Lib/FATFs/ff.c **** #endif
2559:Lib/FATFs/ff.c **** 			fp->dsect = sect;
2560:Lib/FATFs/ff.c **** 		}
2561:Lib/FATFs/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2562:Lib/FATFs/ff.c **** 		if (wcnt > btw) wcnt = btw;
2563:Lib/FATFs/ff.c **** #if _FS_TINY
2564:Lib/FATFs/ff.c **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2565:Lib/FATFs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2566:Lib/FATFs/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2567:Lib/FATFs/ff.c **** 		fp->fs->wflag = 1;
2568:Lib/FATFs/ff.c **** #else
2569:Lib/FATFs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2570:Lib/FATFs/ff.c **** 		fp->flag |= FA__DIRTY;
2571:Lib/FATFs/ff.c **** #endif
2572:Lib/FATFs/ff.c **** 	}
2573:Lib/FATFs/ff.c **** 
2574:Lib/FATFs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
2575:Lib/FATFs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
2576:Lib/FATFs/ff.c **** 
2577:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2578:Lib/FATFs/ff.c **** }
2579:Lib/FATFs/ff.c **** 
2580:Lib/FATFs/ff.c **** 
2581:Lib/FATFs/ff.c **** 
2582:Lib/FATFs/ff.c **** 
2583:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2584:Lib/FATFs/ff.c **** /* Synchronize the File Object                                           */
2585:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2586:Lib/FATFs/ff.c **** 
2587:Lib/FATFs/ff.c **** FRESULT f_sync (
2588:Lib/FATFs/ff.c **** 	FIL *fp		/* Pointer to the file object */
2589:Lib/FATFs/ff.c **** )
2590:Lib/FATFs/ff.c **** {
2591:Lib/FATFs/ff.c **** 	FRESULT res;
2592:Lib/FATFs/ff.c **** 	DWORD tim;
2593:Lib/FATFs/ff.c **** 	BYTE *dir;
2594:Lib/FATFs/ff.c **** 
2595:Lib/FATFs/ff.c **** 
2596:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2597:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2598:Lib/FATFs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
2599:Lib/FATFs/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
2600:Lib/FATFs/ff.c **** 			if (fp->flag & FA__DIRTY) {
2601:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2602:Lib/FATFs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2603:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2604:Lib/FATFs/ff.c **** 			}
2605:Lib/FATFs/ff.c **** #endif
2606:Lib/FATFs/ff.c **** 			/* Update the directory entry */
2607:Lib/FATFs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
2608:Lib/FATFs/ff.c **** 			if (res == FR_OK) {
2609:Lib/FATFs/ff.c **** 				dir = fp->dir_ptr;
2610:Lib/FATFs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
2611:Lib/FATFs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
2612:Lib/FATFs/ff.c **** 				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
2613:Lib/FATFs/ff.c **** 				tim = get_fattime();						/* Update updated time */
2614:Lib/FATFs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
2615:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
2616:Lib/FATFs/ff.c **** 				fp->fs->wflag = 1;
2617:Lib/FATFs/ff.c **** 				res = sync(fp->fs);
2618:Lib/FATFs/ff.c **** 			}
2619:Lib/FATFs/ff.c **** 		}
2620:Lib/FATFs/ff.c **** 	}
2621:Lib/FATFs/ff.c **** 
2622:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, res);
2623:Lib/FATFs/ff.c **** }
2624:Lib/FATFs/ff.c **** 
2625:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
2626:Lib/FATFs/ff.c **** 
2627:Lib/FATFs/ff.c **** 
2628:Lib/FATFs/ff.c **** 
2629:Lib/FATFs/ff.c **** 
2630:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2631:Lib/FATFs/ff.c **** /* Close File                                                            */
2632:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2633:Lib/FATFs/ff.c **** 
2634:Lib/FATFs/ff.c **** FRESULT f_close (
2635:Lib/FATFs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2636:Lib/FATFs/ff.c **** )
2637:Lib/FATFs/ff.c **** {
 2915               		.loc 1 2637 0
 2916               		.cfi_startproc
 2917               	.LVL272:
 2918 0000 CF93      		push r28
 2919               	.LCFI62:
 2920               		.cfi_def_cfa_offset 3
 2921               		.cfi_offset 28, -2
 2922 0002 DF93      		push r29
 2923               	.LCFI63:
 2924               		.cfi_def_cfa_offset 4
 2925               		.cfi_offset 29, -3
 2926               	/* prologue: function */
 2927               	/* frame size = 0 */
 2928               	/* stack size = 2 */
 2929               	.L__stack_usage = 2
 2930 0004 EC01      		movw r28,r24
 2931               	.LVL273:
2638:Lib/FATFs/ff.c **** 	FRESULT res;
2639:Lib/FATFs/ff.c **** 
2640:Lib/FATFs/ff.c **** #if _FS_READONLY
2641:Lib/FATFs/ff.c **** 	FATFS *fs = fp->fs;
2642:Lib/FATFs/ff.c **** 	res = validate(fs, fp->id);
 2932               		.loc 1 2642 0
 2933 0006 6A81      		ldd r22,Y+2
 2934 0008 7B81      		ldd r23,Y+3
 2935 000a 8881      		ld r24,Y
 2936 000c 9981      		ldd r25,Y+1
 2937               	.LVL274:
 2938 000e 0E94 0000 		call validate
 2939               	.LVL275:
2643:Lib/FATFs/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 2940               		.loc 1 2643 0
 2941 0012 8111      		cpse r24,__zero_reg__
 2942 0014 00C0      		rjmp .L218
 2943               		.loc 1 2643 0 is_stmt 0 discriminator 1
 2944 0016 1982      		std Y+1,__zero_reg__
 2945 0018 1882      		st Y,__zero_reg__
 2946               	.L218:
 2947               	/* epilogue start */
2644:Lib/FATFs/ff.c **** 	LEAVE_FF(fs, res);
2645:Lib/FATFs/ff.c **** 
2646:Lib/FATFs/ff.c **** #else
2647:Lib/FATFs/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
2648:Lib/FATFs/ff.c **** #if _FS_SHARE
2649:Lib/FATFs/ff.c **** 	if (res == FR_OK) {		/* Decrement open counter */
2650:Lib/FATFs/ff.c **** #if _FS_REENTRANT
2651:Lib/FATFs/ff.c **** 		res = validate(fp->fs, fp->id);
2652:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
2653:Lib/FATFs/ff.c **** 			res = dec_lock(fp->lockid);	
2654:Lib/FATFs/ff.c **** 			unlock_fs(fp->fs, FR_OK);
2655:Lib/FATFs/ff.c **** 		}
2656:Lib/FATFs/ff.c **** #else
2657:Lib/FATFs/ff.c **** 		res = dec_lock(fp->lockid);
2658:Lib/FATFs/ff.c **** #endif
2659:Lib/FATFs/ff.c **** 	}
2660:Lib/FATFs/ff.c **** #endif
2661:Lib/FATFs/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2662:Lib/FATFs/ff.c **** 	return res;
2663:Lib/FATFs/ff.c **** #endif
2664:Lib/FATFs/ff.c **** }
 2948               		.loc 1 2664 0 is_stmt 1
 2949 001a DF91      		pop r29
 2950 001c CF91      		pop r28
 2951               	.LVL276:
 2952 001e 0895      		ret
 2953               		.cfi_endproc
 2954               	.LFE223:
 2956               		.section	.text.f_lseek,"ax",@progbits
 2957               	.global	f_lseek
 2959               	f_lseek:
 2960               	.LFB224:
2665:Lib/FATFs/ff.c **** 
2666:Lib/FATFs/ff.c **** 
2667:Lib/FATFs/ff.c **** 
2668:Lib/FATFs/ff.c **** 
2669:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2670:Lib/FATFs/ff.c **** /* Current Drive/Directory Handlings                                     */
2671:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2672:Lib/FATFs/ff.c **** 
2673:Lib/FATFs/ff.c **** #if _FS_RPATH >= 1
2674:Lib/FATFs/ff.c **** 
2675:Lib/FATFs/ff.c **** FRESULT f_chdrive (
2676:Lib/FATFs/ff.c **** 	BYTE drv		/* Drive number */
2677:Lib/FATFs/ff.c **** )
2678:Lib/FATFs/ff.c **** {
2679:Lib/FATFs/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
2680:Lib/FATFs/ff.c **** 
2681:Lib/FATFs/ff.c **** 	CurrVol = drv;
2682:Lib/FATFs/ff.c **** 
2683:Lib/FATFs/ff.c **** 	return FR_OK;
2684:Lib/FATFs/ff.c **** }
2685:Lib/FATFs/ff.c **** 
2686:Lib/FATFs/ff.c **** 
2687:Lib/FATFs/ff.c **** 
2688:Lib/FATFs/ff.c **** FRESULT f_chdir (
2689:Lib/FATFs/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2690:Lib/FATFs/ff.c **** )
2691:Lib/FATFs/ff.c **** {
2692:Lib/FATFs/ff.c **** 	FRESULT res;
2693:Lib/FATFs/ff.c **** 	DIR dj;
2694:Lib/FATFs/ff.c **** 	DEF_NAMEBUF;
2695:Lib/FATFs/ff.c **** 
2696:Lib/FATFs/ff.c **** 
2697:Lib/FATFs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2698:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2699:Lib/FATFs/ff.c **** 		INIT_BUF(dj);
2700:Lib/FATFs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
2701:Lib/FATFs/ff.c **** 		FREE_BUF();
2702:Lib/FATFs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2703:Lib/FATFs/ff.c **** 			if (!dj.dir) {
2704:Lib/FATFs/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2705:Lib/FATFs/ff.c **** 			} else {
2706:Lib/FATFs/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2707:Lib/FATFs/ff.c **** 					dj.fs->cdir = LD_CLUST(dj.dir);
2708:Lib/FATFs/ff.c **** 				else
2709:Lib/FATFs/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
2710:Lib/FATFs/ff.c **** 			}
2711:Lib/FATFs/ff.c **** 		}
2712:Lib/FATFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2713:Lib/FATFs/ff.c **** 	}
2714:Lib/FATFs/ff.c **** 
2715:Lib/FATFs/ff.c **** 	LEAVE_FF(dj.fs, res);
2716:Lib/FATFs/ff.c **** }
2717:Lib/FATFs/ff.c **** 
2718:Lib/FATFs/ff.c **** 
2719:Lib/FATFs/ff.c **** #if _FS_RPATH >= 2
2720:Lib/FATFs/ff.c **** FRESULT f_getcwd (
2721:Lib/FATFs/ff.c **** 	TCHAR *path,	/* Pointer to the directory path */
2722:Lib/FATFs/ff.c **** 	UINT sz_path	/* Size of path */
2723:Lib/FATFs/ff.c **** )
2724:Lib/FATFs/ff.c **** {
2725:Lib/FATFs/ff.c **** 	FRESULT res;
2726:Lib/FATFs/ff.c **** 	DIR dj;
2727:Lib/FATFs/ff.c **** 	UINT i, n;
2728:Lib/FATFs/ff.c **** 	DWORD ccl;
2729:Lib/FATFs/ff.c **** 	TCHAR *tp;
2730:Lib/FATFs/ff.c **** 	FILINFO fno;
2731:Lib/FATFs/ff.c **** 	DEF_NAMEBUF;
2732:Lib/FATFs/ff.c **** 
2733:Lib/FATFs/ff.c **** 
2734:Lib/FATFs/ff.c **** 	*path = 0;
2735:Lib/FATFs/ff.c **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2736:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2737:Lib/FATFs/ff.c **** 		INIT_BUF(dj);
2738:Lib/FATFs/ff.c **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2739:Lib/FATFs/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2740:Lib/FATFs/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2741:Lib/FATFs/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2742:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2743:Lib/FATFs/ff.c **** 			res = dir_read(&dj);
2744:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2745:Lib/FATFs/ff.c **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
2746:Lib/FATFs/ff.c **** 			res = dir_sdi(&dj, 0);
2747:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2748:Lib/FATFs/ff.c **** 			do {							/* Find the entry links to the child dir */
2749:Lib/FATFs/ff.c **** 				res = dir_read(&dj);
2750:Lib/FATFs/ff.c **** 				if (res != FR_OK) break;
2751:Lib/FATFs/ff.c **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
2752:Lib/FATFs/ff.c **** 				res = dir_next(&dj, 0);	
2753:Lib/FATFs/ff.c **** 			} while (res == FR_OK);
2754:Lib/FATFs/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2755:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2756:Lib/FATFs/ff.c **** #if _USE_LFN
2757:Lib/FATFs/ff.c **** 			fno.lfname = path;
2758:Lib/FATFs/ff.c **** 			fno.lfsize = i;
2759:Lib/FATFs/ff.c **** #endif
2760:Lib/FATFs/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2761:Lib/FATFs/ff.c **** 			tp = fno.fname;
2762:Lib/FATFs/ff.c **** 			if (_USE_LFN && *path) tp = path;
2763:Lib/FATFs/ff.c **** 			for (n = 0; tp[n]; n++) ;
2764:Lib/FATFs/ff.c **** 			if (i < n + 3) {
2765:Lib/FATFs/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2766:Lib/FATFs/ff.c **** 			}
2767:Lib/FATFs/ff.c **** 			while (n) path[--i] = tp[--n];
2768:Lib/FATFs/ff.c **** 			path[--i] = '/';
2769:Lib/FATFs/ff.c **** 		}
2770:Lib/FATFs/ff.c **** 		tp = path;
2771:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
2772:Lib/FATFs/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2773:Lib/FATFs/ff.c **** 			*tp++ = ':';
2774:Lib/FATFs/ff.c **** 			if (i == sz_path) {				/* Root-dir */
2775:Lib/FATFs/ff.c **** 				*tp++ = '/';
2776:Lib/FATFs/ff.c **** 			} else {						/* Sub-dir */
2777:Lib/FATFs/ff.c **** 				do		/* Add stacked path str */
2778:Lib/FATFs/ff.c **** 					*tp++ = path[i++];
2779:Lib/FATFs/ff.c **** 				while (i < sz_path);
2780:Lib/FATFs/ff.c **** 			}
2781:Lib/FATFs/ff.c **** 		}
2782:Lib/FATFs/ff.c **** 		*tp = 0;
2783:Lib/FATFs/ff.c **** 		FREE_BUF();
2784:Lib/FATFs/ff.c **** 	}
2785:Lib/FATFs/ff.c **** 
2786:Lib/FATFs/ff.c **** 	LEAVE_FF(dj.fs, res);
2787:Lib/FATFs/ff.c **** }
2788:Lib/FATFs/ff.c **** #endif /* _FS_RPATH >= 2 */
2789:Lib/FATFs/ff.c **** #endif /* _FS_RPATH >= 1 */
2790:Lib/FATFs/ff.c **** 
2791:Lib/FATFs/ff.c **** 
2792:Lib/FATFs/ff.c **** 
2793:Lib/FATFs/ff.c **** #if _FS_MINIMIZE <= 2
2794:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2795:Lib/FATFs/ff.c **** /* Seek File R/W Pointer                                                 */
2796:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2797:Lib/FATFs/ff.c **** 
2798:Lib/FATFs/ff.c **** FRESULT f_lseek (
2799:Lib/FATFs/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2800:Lib/FATFs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2801:Lib/FATFs/ff.c **** )
2802:Lib/FATFs/ff.c **** {
 2961               		.loc 1 2802 0
 2962               		.cfi_startproc
 2963               	.LVL277:
 2964 0000 4F92      		push r4
 2965               	.LCFI64:
 2966               		.cfi_def_cfa_offset 3
 2967               		.cfi_offset 4, -2
 2968 0002 5F92      		push r5
 2969               	.LCFI65:
 2970               		.cfi_def_cfa_offset 4
 2971               		.cfi_offset 5, -3
 2972 0004 6F92      		push r6
 2973               	.LCFI66:
 2974               		.cfi_def_cfa_offset 5
 2975               		.cfi_offset 6, -4
 2976 0006 7F92      		push r7
 2977               	.LCFI67:
 2978               		.cfi_def_cfa_offset 6
 2979               		.cfi_offset 7, -5
 2980 0008 8F92      		push r8
 2981               	.LCFI68:
 2982               		.cfi_def_cfa_offset 7
 2983               		.cfi_offset 8, -6
 2984 000a 9F92      		push r9
 2985               	.LCFI69:
 2986               		.cfi_def_cfa_offset 8
 2987               		.cfi_offset 9, -7
 2988 000c AF92      		push r10
 2989               	.LCFI70:
 2990               		.cfi_def_cfa_offset 9
 2991               		.cfi_offset 10, -8
 2992 000e BF92      		push r11
 2993               	.LCFI71:
 2994               		.cfi_def_cfa_offset 10
 2995               		.cfi_offset 11, -9
 2996 0010 CF92      		push r12
 2997               	.LCFI72:
 2998               		.cfi_def_cfa_offset 11
 2999               		.cfi_offset 12, -10
 3000 0012 DF92      		push r13
 3001               	.LCFI73:
 3002               		.cfi_def_cfa_offset 12
 3003               		.cfi_offset 13, -11
 3004 0014 EF92      		push r14
 3005               	.LCFI74:
 3006               		.cfi_def_cfa_offset 13
 3007               		.cfi_offset 14, -12
 3008 0016 FF92      		push r15
 3009               	.LCFI75:
 3010               		.cfi_def_cfa_offset 14
 3011               		.cfi_offset 15, -13
 3012 0018 CF93      		push r28
 3013               	.LCFI76:
 3014               		.cfi_def_cfa_offset 15
 3015               		.cfi_offset 28, -14
 3016 001a DF93      		push r29
 3017               	.LCFI77:
 3018               		.cfi_def_cfa_offset 16
 3019               		.cfi_offset 29, -15
 3020 001c 00D0      		rcall .
 3021 001e 00D0      		rcall .
 3022 0020 00D0      		rcall .
 3023               	.LCFI78:
 3024               		.cfi_def_cfa_offset 22
 3025 0022 CDB7      		in r28,__SP_L__
 3026 0024 DEB7      		in r29,__SP_H__
 3027               	.LCFI79:
 3028               		.cfi_def_cfa_register 28
 3029               	/* prologue: function */
 3030               	/* frame size = 6 */
 3031               	/* stack size = 20 */
 3032               	.L__stack_usage = 20
 3033 0026 9E83      		std Y+6,r25
 3034 0028 8D83      		std Y+5,r24
 3035 002a 4A01      		movw r8,r20
 3036 002c 5B01      		movw r10,r22
2803:Lib/FATFs/ff.c **** 	FRESULT res;
2804:Lib/FATFs/ff.c **** 
2805:Lib/FATFs/ff.c **** 
2806:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 3037               		.loc 1 2806 0
 3038 002e DC01      		movw r26,r24
 3039 0030 1296      		adiw r26,2
 3040 0032 6D91      		ld r22,X+
 3041 0034 7C91      		ld r23,X
 3042 0036 1397      		sbiw r26,2+1
 3043 0038 8D91      		ld r24,X+
 3044 003a 9C91      		ld r25,X
 3045               	.LVL278:
 3046 003c 0E94 0000 		call validate
 3047               	.LVL279:
2807:Lib/FATFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3048               		.loc 1 2807 0
 3049 0040 8111      		cpse r24,__zero_reg__
 3050 0042 00C0      		rjmp .L220
2808:Lib/FATFs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 3051               		.loc 1 2808 0
 3052 0044 ED81      		ldd r30,Y+5
 3053 0046 FE81      		ldd r31,Y+6
 3054 0048 8481      		ldd r24,Z+4
 3055               	.LVL280:
 3056 004a 87FD      		sbrc r24,7
 3057 004c 00C0      		rjmp .L235
 3058               	.LBB68:
2809:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2810:Lib/FATFs/ff.c **** 
2811:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2812:Lib/FATFs/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
2813:Lib/FATFs/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2814:Lib/FATFs/ff.c **** 
2815:Lib/FATFs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2816:Lib/FATFs/ff.c **** 			tbl = fp->cltbl;
2817:Lib/FATFs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2818:Lib/FATFs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
2819:Lib/FATFs/ff.c **** 			if (cl) {
2820:Lib/FATFs/ff.c **** 				do {
2821:Lib/FATFs/ff.c **** 					/* Get a fragment */
2822:Lib/FATFs/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2823:Lib/FATFs/ff.c **** 					do {
2824:Lib/FATFs/ff.c **** 						pcl = cl; ncl++;
2825:Lib/FATFs/ff.c **** 						cl = get_fat(fp->fs, cl);
2826:Lib/FATFs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2827:Lib/FATFs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2828:Lib/FATFs/ff.c **** 					} while (cl == pcl + 1);
2829:Lib/FATFs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2830:Lib/FATFs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
2831:Lib/FATFs/ff.c **** 					}
2832:Lib/FATFs/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
2833:Lib/FATFs/ff.c **** 			}
2834:Lib/FATFs/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
2835:Lib/FATFs/ff.c **** 			if (ulen <= tlen)
2836:Lib/FATFs/ff.c **** 				*tbl = 0;		/* Terminate table */
2837:Lib/FATFs/ff.c **** 			else
2838:Lib/FATFs/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2839:Lib/FATFs/ff.c **** 
2840:Lib/FATFs/ff.c **** 		} else {						/* Fast seek */
2841:Lib/FATFs/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2842:Lib/FATFs/ff.c **** 				ofs = fp->fsize;
2843:Lib/FATFs/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
2844:Lib/FATFs/ff.c **** 			if (ofs) {
2845:Lib/FATFs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
2846:Lib/FATFs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
2847:Lib/FATFs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2848:Lib/FATFs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
2849:Lib/FATFs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2850:Lib/FATFs/ff.c **** #if !_FS_TINY
2851:Lib/FATFs/ff.c **** #if !_FS_READONLY
2852:Lib/FATFs/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2853:Lib/FATFs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2854:Lib/FATFs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
2855:Lib/FATFs/ff.c **** 						fp->flag &= ~FA__DIRTY;
2856:Lib/FATFs/ff.c **** 					}
2857:Lib/FATFs/ff.c **** #endif
2858:Lib/FATFs/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2859:Lib/FATFs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2860:Lib/FATFs/ff.c **** #endif
2861:Lib/FATFs/ff.c **** 					fp->dsect = dsc;
2862:Lib/FATFs/ff.c **** 				}
2863:Lib/FATFs/ff.c **** 			}
2864:Lib/FATFs/ff.c **** 		}
2865:Lib/FATFs/ff.c **** 	} else
2866:Lib/FATFs/ff.c **** #endif
2867:Lib/FATFs/ff.c **** 
2868:Lib/FATFs/ff.c **** 	/* Normal Seek */
2869:Lib/FATFs/ff.c **** 	{
2870:Lib/FATFs/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
2871:Lib/FATFs/ff.c **** 
2872:Lib/FATFs/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 3059               		.loc 1 2872 0
 3060 004e C284      		ldd r12,Z+10
 3061 0050 D384      		ldd r13,Z+11
 3062 0052 E484      		ldd r14,Z+12
 3063 0054 F584      		ldd r15,Z+13
 3064 0056 8C14      		cp r8,r12
 3065 0058 9D04      		cpc r9,r13
 3066 005a AE04      		cpc r10,r14
 3067 005c BF04      		cpc r11,r15
 3068 005e 00F4      		brsh .L221
 3069 0060 7501      		movw r14,r10
 3070 0062 6401      		movw r12,r8
 3071               	.L221:
 3072               	.LVL281:
2873:Lib/FATFs/ff.c **** #if !_FS_READONLY
2874:Lib/FATFs/ff.c **** 			 && !(fp->flag & FA_WRITE)
2875:Lib/FATFs/ff.c **** #endif
2876:Lib/FATFs/ff.c **** 			) ofs = fp->fsize;
2877:Lib/FATFs/ff.c **** 
2878:Lib/FATFs/ff.c **** 		ifptr = fp->fptr;
 3073               		.loc 1 2878 0
 3074 0064 AD81      		ldd r26,Y+5
 3075 0066 BE81      		ldd r27,Y+6
 3076 0068 1696      		adiw r26,6
 3077 006a 4D90      		ld r4,X+
 3078 006c 5D90      		ld r5,X+
 3079 006e 6D90      		ld r6,X+
 3080 0070 7C90      		ld r7,X
 3081 0072 1997      		sbiw r26,6+3
 3082               	.LVL282:
2879:Lib/FATFs/ff.c **** 		fp->fptr = nsect = 0;
 3083               		.loc 1 2879 0
 3084 0074 FD01      		movw r30,r26
 3085 0076 1682      		std Z+6,__zero_reg__
 3086 0078 1782      		std Z+7,__zero_reg__
 3087 007a 1086      		std Z+8,__zero_reg__
 3088 007c 1186      		std Z+9,__zero_reg__
2880:Lib/FATFs/ff.c **** 		if (ofs) {
 3089               		.loc 1 2880 0
 3090 007e C114      		cp r12,__zero_reg__
 3091 0080 D104      		cpc r13,__zero_reg__
 3092 0082 E104      		cpc r14,__zero_reg__
 3093 0084 F104      		cpc r15,__zero_reg__
 3094 0086 01F4      		brne .+2
 3095 0088 00C0      		rjmp .L248
2881:Lib/FATFs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 3096               		.loc 1 2881 0
 3097 008a AD81      		ldd r26,Y+5
 3098 008c BE81      		ldd r27,Y+6
 3099 008e ED91      		ld r30,X+
 3100 0090 FC91      		ld r31,X
 3101 0092 8280      		ldd r8,Z+2
 3102 0094 912C      		mov r9,__zero_reg__
 3103 0096 A12C      		mov r10,__zero_reg__
 3104 0098 B12C      		mov r11,__zero_reg__
 3105 009a 39E0      		ldi r19,9
 3106               		1:
 3107 009c 880C      		lsl r8
 3108 009e 991C      		rol r9
 3109 00a0 AA1C      		rol r10
 3110 00a2 BB1C      		rol r11
 3111 00a4 3A95      		dec r19
 3112 00a6 01F4      		brne 1b
 3113               	.LVL283:
2882:Lib/FATFs/ff.c **** 			if (ifptr > 0 &&
 3114               		.loc 1 2882 0
 3115 00a8 4114      		cp r4,__zero_reg__
 3116 00aa 5104      		cpc r5,__zero_reg__
 3117 00ac 6104      		cpc r6,__zero_reg__
 3118 00ae 7104      		cpc r7,__zero_reg__
 3119 00b0 01F4      		brne .+2
 3120 00b2 00C0      		rjmp .L225
2883:Lib/FATFs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 3121               		.loc 1 2883 0 discriminator 1
 3122 00b4 B1E0      		ldi r27,1
 3123 00b6 4B1A      		sub r4,r27
 3124 00b8 5108      		sbc r5,__zero_reg__
 3125 00ba 6108      		sbc r6,__zero_reg__
 3126 00bc 7108      		sbc r7,__zero_reg__
 3127               	.LVL284:
2882:Lib/FATFs/ff.c **** 			if (ifptr > 0 &&
 3128               		.loc 1 2882 0 discriminator 1
 3129 00be C701      		movw r24,r14
 3130 00c0 B601      		movw r22,r12
 3131 00c2 6150      		subi r22,1
 3132 00c4 7109      		sbc r23,__zero_reg__
 3133 00c6 8109      		sbc r24,__zero_reg__
 3134 00c8 9109      		sbc r25,__zero_reg__
 3135 00ca A501      		movw r20,r10
 3136 00cc 9401      		movw r18,r8
 3137 00ce 0E94 0000 		call __udivmodsi4
 3138 00d2 2983      		std Y+1,r18
 3139 00d4 3A83      		std Y+2,r19
 3140 00d6 4B83      		std Y+3,r20
 3141 00d8 5C83      		std Y+4,r21
 3142 00da C301      		movw r24,r6
 3143 00dc B201      		movw r22,r4
 3144 00de A501      		movw r20,r10
 3145 00e0 9401      		movw r18,r8
 3146 00e2 0E94 0000 		call __udivmodsi4
 3147 00e6 8981      		ldd r24,Y+1
 3148 00e8 9A81      		ldd r25,Y+2
 3149 00ea AB81      		ldd r26,Y+3
 3150 00ec BC81      		ldd r27,Y+4
 3151 00ee 8217      		cp r24,r18
 3152 00f0 9307      		cpc r25,r19
 3153 00f2 A407      		cpc r26,r20
 3154 00f4 B507      		cpc r27,r21
 3155 00f6 00F0      		brlo .L225
2884:Lib/FATFs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 3156               		.loc 1 2884 0
 3157 00f8 8827      		clr r24
 3158 00fa 9927      		clr r25
 3159 00fc DC01      		movw r26,r24
 3160 00fe 8819      		sub r24,r8
 3161 0100 9909      		sbc r25,r9
 3162 0102 AA09      		sbc r26,r10
 3163 0104 BB09      		sbc r27,r11
 3164 0106 4822      		and r4,r24
 3165 0108 5922      		and r5,r25
 3166 010a 6A22      		and r6,r26
 3167 010c 7B22      		and r7,r27
 3168               	.LVL285:
 3169 010e AD81      		ldd r26,Y+5
 3170 0110 BE81      		ldd r27,Y+6
 3171 0112 1696      		adiw r26,6
 3172 0114 4D92      		st X+,r4
 3173 0116 5D92      		st X+,r5
 3174 0118 6D92      		st X+,r6
 3175 011a 7C92      		st X,r7
 3176 011c 1997      		sbiw r26,6+3
 3177               	.LVL286:
2885:Lib/FATFs/ff.c **** 				ofs -= fp->fptr;
2886:Lib/FATFs/ff.c **** 				clst = fp->clust;
 3178               		.loc 1 2886 0
 3179 011e 5296      		adiw r26,18
 3180 0120 4D91      		ld r20,X+
 3181 0122 5D91      		ld r21,X+
 3182 0124 6D91      		ld r22,X+
 3183 0126 7C91      		ld r23,X
 3184 0128 5597      		sbiw r26,18+3
 3185               	.LVL287:
2887:Lib/FATFs/ff.c **** 			} else {									/* When seek to back cluster, */
2888:Lib/FATFs/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
2889:Lib/FATFs/ff.c **** #if !_FS_READONLY
2890:Lib/FATFs/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
2891:Lib/FATFs/ff.c **** 					clst = create_chain(fp->fs, 0);
2892:Lib/FATFs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2893:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2894:Lib/FATFs/ff.c **** 					fp->sclust = clst;
2895:Lib/FATFs/ff.c **** 				}
2896:Lib/FATFs/ff.c **** #endif
2897:Lib/FATFs/ff.c **** 				fp->clust = clst;
2898:Lib/FATFs/ff.c **** 			}
2899:Lib/FATFs/ff.c **** 			if (clst != 0) {
 3186               		.loc 1 2899 0
 3187 012a 4115      		cp r20,__zero_reg__
 3188 012c 5105      		cpc r21,__zero_reg__
 3189 012e 6105      		cpc r22,__zero_reg__
 3190 0130 7105      		cpc r23,__zero_reg__
 3191 0132 01F4      		brne .L249
 3192               	.LVL288:
 3193               	.L226:
2879:Lib/FATFs/ff.c **** 		if (ofs) {
 3194               		.loc 1 2879 0
 3195 0134 C12C      		mov r12,__zero_reg__
 3196 0136 D12C      		mov r13,__zero_reg__
 3197 0138 7601      		movw r14,r12
 3198 013a 00C0      		rjmp .L224
 3199               	.LVL289:
 3200               	.L249:
2885:Lib/FATFs/ff.c **** 				ofs -= fp->fptr;
 3201               		.loc 1 2885 0
 3202 013c C418      		sub r12,r4
 3203 013e D508      		sbc r13,r5
 3204 0140 E608      		sbc r14,r6
 3205 0142 F708      		sbc r15,r7
 3206               	.LVL290:
 3207 0144 00C0      		rjmp .L228
 3208               	.LVL291:
 3209               	.L225:
2888:Lib/FATFs/ff.c **** #if !_FS_READONLY
 3210               		.loc 1 2888 0
 3211 0146 ED81      		ldd r30,Y+5
 3212 0148 FE81      		ldd r31,Y+6
 3213 014a 4685      		ldd r20,Z+14
 3214 014c 5785      		ldd r21,Z+15
 3215 014e 6089      		ldd r22,Z+16
 3216 0150 7189      		ldd r23,Z+17
 3217               	.LVL292:
2897:Lib/FATFs/ff.c **** 			}
 3218               		.loc 1 2897 0
 3219 0152 428B      		std Z+18,r20
 3220 0154 538B      		std Z+19,r21
 3221 0156 648B      		std Z+20,r22
 3222 0158 758B      		std Z+21,r23
 3223               		.loc 1 2899 0
 3224 015a 4115      		cp r20,__zero_reg__
 3225 015c 5105      		cpc r21,__zero_reg__
 3226 015e 6105      		cpc r22,__zero_reg__
 3227 0160 7105      		cpc r23,__zero_reg__
 3228 0162 01F4      		brne .L228
 3229 0164 00C0      		rjmp .L248
 3230               	.L229:
2900:Lib/FATFs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
2901:Lib/FATFs/ff.c **** #if !_FS_READONLY
2902:Lib/FATFs/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2903:Lib/FATFs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
2904:Lib/FATFs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
2905:Lib/FATFs/ff.c **** 							ofs = bcs; break;
2906:Lib/FATFs/ff.c **** 						}
2907:Lib/FATFs/ff.c **** 					} else
2908:Lib/FATFs/ff.c **** #endif
2909:Lib/FATFs/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2910:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2911:Lib/FATFs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 3231               		.loc 1 2911 0
 3232 0166 4230      		cpi r20,2
 3233 0168 5105      		cpc r21,__zero_reg__
 3234 016a 6105      		cpc r22,__zero_reg__
 3235 016c 7105      		cpc r23,__zero_reg__
 3236 016e 00F4      		brsh .+2
 3237 0170 00C0      		rjmp .L230
 3238               		.loc 1 2911 0 is_stmt 0 discriminator 2
 3239 0172 AD81      		ldd r26,Y+5
 3240 0174 BE81      		ldd r27,Y+6
 3241 0176 ED91      		ld r30,X+
 3242 0178 FC91      		ld r31,X
 3243 017a 8285      		ldd r24,Z+10
 3244 017c 9385      		ldd r25,Z+11
 3245 017e A485      		ldd r26,Z+12
 3246 0180 B585      		ldd r27,Z+13
 3247 0182 4817      		cp r20,r24
 3248 0184 5907      		cpc r21,r25
 3249 0186 6A07      		cpc r22,r26
 3250 0188 7B07      		cpc r23,r27
 3251 018a 00F4      		brsh .L230
2912:Lib/FATFs/ff.c **** 					fp->clust = clst;
 3252               		.loc 1 2912 0 is_stmt 1
 3253 018c AD81      		ldd r26,Y+5
 3254 018e BE81      		ldd r27,Y+6
 3255 0190 5296      		adiw r26,18
 3256 0192 4D93      		st X+,r20
 3257 0194 5D93      		st X+,r21
 3258 0196 6D93      		st X+,r22
 3259 0198 7C93      		st X,r23
 3260 019a 5597      		sbiw r26,18+3
2913:Lib/FATFs/ff.c **** 					fp->fptr += bcs;
 3261               		.loc 1 2913 0
 3262 019c FD01      		movw r30,r26
 3263 019e 8681      		ldd r24,Z+6
 3264 01a0 9781      		ldd r25,Z+7
 3265 01a2 A085      		ldd r26,Z+8
 3266 01a4 B185      		ldd r27,Z+9
 3267 01a6 880D      		add r24,r8
 3268 01a8 991D      		adc r25,r9
 3269 01aa AA1D      		adc r26,r10
 3270 01ac BB1D      		adc r27,r11
 3271 01ae 8683      		std Z+6,r24
 3272 01b0 9783      		std Z+7,r25
 3273 01b2 A087      		std Z+8,r26
 3274 01b4 B187      		std Z+9,r27
2914:Lib/FATFs/ff.c **** 					ofs -= bcs;
 3275               		.loc 1 2914 0
 3276 01b6 C818      		sub r12,r8
 3277 01b8 D908      		sbc r13,r9
 3278 01ba EA08      		sbc r14,r10
 3279 01bc FB08      		sbc r15,r11
 3280               	.LVL293:
 3281               	.L228:
2909:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3282               		.loc 1 2909 0
 3283 01be ED81      		ldd r30,Y+5
 3284 01c0 FE81      		ldd r31,Y+6
2900:Lib/FATFs/ff.c **** #if !_FS_READONLY
 3285               		.loc 1 2900 0
 3286 01c2 8C14      		cp r8,r12
 3287 01c4 9D04      		cpc r9,r13
 3288 01c6 AE04      		cpc r10,r14
 3289 01c8 BF04      		cpc r11,r15
 3290 01ca 00F4      		brsh .L250
2909:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3291               		.loc 1 2909 0
 3292 01cc 8081      		ld r24,Z
 3293 01ce 9181      		ldd r25,Z+1
 3294 01d0 0E94 0000 		call get_fat
 3295               	.LVL294:
 3296 01d4 AB01      		movw r20,r22
 3297 01d6 BC01      		movw r22,r24
 3298               	.LVL295:
2910:Lib/FATFs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 3299               		.loc 1 2910 0
 3300 01d8 4F3F      		cpi r20,-1
 3301 01da FFEF      		ldi r31,-1
 3302 01dc 5F07      		cpc r21,r31
 3303 01de 6F07      		cpc r22,r31
 3304 01e0 7F07      		cpc r23,r31
 3305 01e2 01F4      		brne .L229
2910:Lib/FATFs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 3306               		.loc 1 2910 0 is_stmt 0 discriminator 1
 3307 01e4 AD81      		ldd r26,Y+5
 3308 01e6 BE81      		ldd r27,Y+6
 3309 01e8 1496      		adiw r26,4
 3310 01ea 8C91      		ld r24,X
 3311 01ec 1497      		sbiw r26,4
 3312 01ee 8068      		ori r24,lo8(-128)
 3313 01f0 1496      		adiw r26,4
 3314 01f2 8C93      		st X,r24
 3315 01f4 81E0      		ldi r24,lo8(1)
 3316 01f6 00C0      		rjmp .L220
 3317               	.L230:
2911:Lib/FATFs/ff.c **** 					fp->clust = clst;
 3318               		.loc 1 2911 0 is_stmt 1 discriminator 3
 3319 01f8 ED81      		ldd r30,Y+5
 3320 01fa FE81      		ldd r31,Y+6
 3321 01fc 8481      		ldd r24,Z+4
 3322 01fe 8068      		ori r24,lo8(-128)
 3323 0200 8483      		std Z+4,r24
 3324 0202 00C0      		rjmp .L235
 3325               	.L250:
2915:Lib/FATFs/ff.c **** 				}
2916:Lib/FATFs/ff.c **** 				fp->fptr += ofs;
 3326               		.loc 1 2916 0
 3327 0204 8681      		ldd r24,Z+6
 3328 0206 9781      		ldd r25,Z+7
 3329 0208 A085      		ldd r26,Z+8
 3330 020a B185      		ldd r27,Z+9
 3331 020c 8C0D      		add r24,r12
 3332 020e 9D1D      		adc r25,r13
 3333 0210 AE1D      		adc r26,r14
 3334 0212 BF1D      		adc r27,r15
 3335 0214 8683      		std Z+6,r24
 3336 0216 9783      		std Z+7,r25
 3337 0218 A087      		std Z+8,r26
 3338 021a B187      		std Z+9,r27
2917:Lib/FATFs/ff.c **** 				if (ofs % SS(fp->fs)) {
 3339               		.loc 1 2917 0
 3340 021c D701      		movw r26,r14
 3341 021e C601      		movw r24,r12
 3342 0220 9170      		andi r25,1
 3343 0222 AA27      		clr r26
 3344 0224 BB27      		clr r27
 3345 0226 892B      		or r24,r25
 3346 0228 8A2B      		or r24,r26
 3347 022a 8B2B      		or r24,r27
 3348 022c 01F4      		brne .+2
 3349 022e 00C0      		rjmp .L226
2918:Lib/FATFs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 3350               		.loc 1 2918 0
 3351 0230 8081      		ld r24,Z
 3352 0232 9181      		ldd r25,Z+1
 3353 0234 0E94 0000 		call clust2sect
 3354               	.LVL296:
2919:Lib/FATFs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 3355               		.loc 1 2919 0
 3356 0238 6115      		cp r22,__zero_reg__
 3357 023a 7105      		cpc r23,__zero_reg__
 3358 023c 8105      		cpc r24,__zero_reg__
 3359 023e 9105      		cpc r25,__zero_reg__
 3360 0240 01F4      		brne .L233
 3361               		.loc 1 2919 0 is_stmt 0 discriminator 1
 3362 0242 AD81      		ldd r26,Y+5
 3363 0244 BE81      		ldd r27,Y+6
 3364 0246 1496      		adiw r26,4
 3365 0248 8C91      		ld r24,X
 3366 024a 1497      		sbiw r26,4
 3367 024c 8068      		ori r24,lo8(-128)
 3368 024e 1496      		adiw r26,4
 3369 0250 8C93      		st X,r24
 3370 0252 00C0      		rjmp .L235
 3371               	.L233:
2920:Lib/FATFs/ff.c **** 					nsect += ofs / SS(fp->fs);
 3372               		.loc 1 2920 0 is_stmt 1
 3373 0254 29E0      		ldi r18,9
 3374               		1:
 3375 0256 F694      		lsr r15
 3376 0258 E794      		ror r14
 3377 025a D794      		ror r13
 3378 025c C794      		ror r12
 3379 025e 2A95      		dec r18
 3380 0260 01F4      		brne 1b
 3381               	.LVL297:
 3382 0262 C60E      		add r12,r22
 3383 0264 D71E      		adc r13,r23
 3384 0266 E81E      		adc r14,r24
 3385 0268 F91E      		adc r15,r25
 3386               	.LVL298:
 3387               	.L224:
2921:Lib/FATFs/ff.c **** 				}
2922:Lib/FATFs/ff.c **** 			}
2923:Lib/FATFs/ff.c **** 		}
2924:Lib/FATFs/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 3388               		.loc 1 2924 0
 3389 026a ED81      		ldd r30,Y+5
 3390 026c FE81      		ldd r31,Y+6
 3391 026e 8681      		ldd r24,Z+6
 3392 0270 9781      		ldd r25,Z+7
 3393 0272 A085      		ldd r26,Z+8
 3394 0274 B185      		ldd r27,Z+9
 3395 0276 9170      		andi r25,1
 3396 0278 AA27      		clr r26
 3397 027a BB27      		clr r27
 3398 027c 892B      		or r24,r25
 3399 027e 8A2B      		or r24,r26
 3400 0280 8B2B      		or r24,r27
 3401 0282 01F0      		breq .L248
 3402               		.loc 1 2924 0 is_stmt 0 discriminator 1
 3403 0284 8689      		ldd r24,Z+22
 3404 0286 9789      		ldd r25,Z+23
 3405 0288 A08D      		ldd r26,Z+24
 3406 028a B18D      		ldd r27,Z+25
 3407 028c C816      		cp r12,r24
 3408 028e D906      		cpc r13,r25
 3409 0290 EA06      		cpc r14,r26
 3410 0292 FB06      		cpc r15,r27
 3411 0294 01F0      		breq .L248
2925:Lib/FATFs/ff.c **** #if !_FS_TINY
2926:Lib/FATFs/ff.c **** #if !_FS_READONLY
2927:Lib/FATFs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
2928:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2929:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2930:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2931:Lib/FATFs/ff.c **** 			}
2932:Lib/FATFs/ff.c **** #endif
2933:Lib/FATFs/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
2934:Lib/FATFs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2935:Lib/FATFs/ff.c **** #endif
2936:Lib/FATFs/ff.c **** 			fp->dsect = nsect;
 3412               		.loc 1 2936 0 is_stmt 1
 3413 0296 C68A      		std Z+22,r12
 3414 0298 D78A      		std Z+23,r13
 3415 029a E08E      		std Z+24,r14
 3416 029c F18E      		std Z+25,r15
 3417               	.LVL299:
 3418               	.L248:
 3419 029e 80E0      		ldi r24,0
 3420 02a0 00C0      		rjmp .L220
 3421               	.L235:
 3422               	.LBE68:
2809:Lib/FATFs/ff.c **** 
 3423               		.loc 1 2809 0
 3424 02a2 82E0      		ldi r24,lo8(2)
 3425               	.L220:
 3426               	/* epilogue start */
2937:Lib/FATFs/ff.c **** 		}
2938:Lib/FATFs/ff.c **** #if !_FS_READONLY
2939:Lib/FATFs/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
2940:Lib/FATFs/ff.c **** 			fp->fsize = fp->fptr;
2941:Lib/FATFs/ff.c **** 			fp->flag |= FA__WRITTEN;
2942:Lib/FATFs/ff.c **** 		}
2943:Lib/FATFs/ff.c **** #endif
2944:Lib/FATFs/ff.c **** 	}
2945:Lib/FATFs/ff.c **** 
2946:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, res);
2947:Lib/FATFs/ff.c **** }
 3427               		.loc 1 2947 0
 3428 02a4 2696      		adiw r28,6
 3429               	.LVL300:
 3430 02a6 0FB6      		in __tmp_reg__,__SREG__
 3431 02a8 F894      		cli
 3432 02aa DEBF      		out __SP_H__,r29
 3433 02ac 0FBE      		out __SREG__,__tmp_reg__
 3434 02ae CDBF      		out __SP_L__,r28
 3435               	.LVL301:
 3436 02b0 DF91      		pop r29
 3437 02b2 CF91      		pop r28
 3438 02b4 FF90      		pop r15
 3439 02b6 EF90      		pop r14
 3440 02b8 DF90      		pop r13
 3441 02ba CF90      		pop r12
 3442 02bc BF90      		pop r11
 3443 02be AF90      		pop r10
 3444 02c0 9F90      		pop r9
 3445 02c2 8F90      		pop r8
 3446 02c4 7F90      		pop r7
 3447 02c6 6F90      		pop r6
 3448 02c8 5F90      		pop r5
 3449 02ca 4F90      		pop r4
 3450 02cc 0895      		ret
 3451               		.cfi_endproc
 3452               	.LFE224:
 3454               		.local	Fsid
 3455               		.comm	Fsid,2,1
 3456               		.local	FatFs
 3457               		.comm	FatFs,2,1
 3458               		.text
 3459               	.Letext0:
 3460               		.file 2 "Lib/FATFs/integer.h"
 3461               		.file 3 "Lib/FATFs/ff.h"
 3462               		.file 4 "/usr/lib/avr/include/stdint.h"
 3463               		.file 5 "Lib/FATFs/diskio.h"
 3464               		.file 6 "../../LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
     /tmp/cc6KLf8m.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6KLf8m.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6KLf8m.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6KLf8m.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc6KLf8m.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6KLf8m.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6KLf8m.s:13     .text.move_window:0000000000000000 move_window
     /tmp/cc6KLf8m.s:118    .text.check_fs:0000000000000000 check_fs
     /tmp/cc6KLf8m.s:217    .text.validate:0000000000000000 validate
     /tmp/cc6KLf8m.s:268    .text.clust2sect:0000000000000000 clust2sect
     /tmp/cc6KLf8m.s:338    .text.get_fat:0000000000000000 get_fat
     /tmp/cc6KLf8m.s:638    .text.dir_sdi.constprop.3:0000000000000000 dir_sdi.constprop.3
     /tmp/cc6KLf8m.s:835    .text.f_mount:0000000000000000 f_mount
     /tmp/cc6KLf8m.s:3455   .bss:0000000000000002 FatFs
     /tmp/cc6KLf8m.s:890    .text.f_open:0000000000000000 f_open
                             .bss:0000000000000000 Fsid
     /tmp/cc6KLf8m.s:2431   .text.f_read:0000000000000000 f_read
     /tmp/cc6KLf8m.s:2913   .text.f_close:0000000000000000 f_close
     /tmp/cc6KLf8m.s:2959   .text.f_lseek:0000000000000000 f_lseek

UNDEFINED SYMBOLS
disk_read
disk_status
__muluhisi3
disk_initialize
__udivmodsi4
__do_copy_data
__do_clear_bss
