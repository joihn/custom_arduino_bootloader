
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001a8c  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800122  00800122  00001b42  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e12  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000221d  00000000  00000000  00007cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000313e  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  0000d024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025ed  00000000  00000000  0000d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b3f  00000000  00000000  0000ffc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00013b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	27 c1       	rjmp	.+590    	; 0x250 <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c5       	rjmp	.+2880   	; 0xb6a <__vector_10>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c1       	rjmp	.+550    	; 0x28c <__bad_interrupt>
      66:	00 00       	nop
      68:	11 c1       	rjmp	.+546    	; 0x28c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c1       	rjmp	.+514    	; 0x28c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	7a 03       	fmul	r23, r18
      9a:	6b 04       	cpc	r6, r11
      9c:	98 03       	fmulsu	r17, r16
      9e:	a2 03       	fmuls	r18, r18
      a0:	cd 03       	fmulsu	r20, r21
      a2:	f5 03       	fmuls	r23, r21
      a4:	00 04       	cpc	r0, r0
      a6:	11 04       	cpc	r1, r1
      a8:	2d 04       	cpc	r2, r13
      aa:	54 04       	cpc	r5, r4

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4540>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4535>:
     131:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     141:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

0000014b <__c.4533>:
     14b:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     15b:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     16b:	6f 6e 2e 0d 0a 00                                   on....

00000171 <__c.4531>:
     171:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     181:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI
     191:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
     1a1:	00                                                  .

000001a2 <__c.4529>:
     1a2:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1b2:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1c2:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001cf <__c.4522>:
     1cf:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1df:	68 65 64 2e 0d 0a 00                                hed....

000001e6 <__c.4517>:
     1e6:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f6:	0d 0a 00                                            ...

000001f9 <__c.4498>:
     1f9:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     209:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     219:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     229:	0d 0a 00                                            ...

0000022c <__c.4486>:
     22c:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     23c:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     24c:	33 37 6d 00                                         37m.

00000250 <__ctors_end>:
     250:	11 24       	eor	r1, r1
     252:	1f be       	out	0x3f, r1	; 63
     254:	cf ef       	ldi	r28, 0xFF	; 255
     256:	d0 e2       	ldi	r29, 0x20	; 32
     258:	de bf       	out	0x3e, r29	; 62
     25a:	cd bf       	out	0x3d, r28	; 61

0000025c <__do_copy_data>:
     25c:	11 e0       	ldi	r17, 0x01	; 1
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b1 e0       	ldi	r27, 0x01	; 1
     262:	ec e8       	ldi	r30, 0x8C	; 140
     264:	fa e1       	ldi	r31, 0x1A	; 26
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	0b bf       	out	0x3b, r16	; 59
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x14>
     26c:	07 90       	elpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a2 32       	cpi	r26, 0x22	; 34
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0x10>

00000276 <__do_clear_bss>:
     276:	21 e0       	ldi	r18, 0x01	; 1
     278:	a2 e2       	ldi	r26, 0x22	; 34
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a5 34       	cpi	r26, 0x45	; 69
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	f9 d0       	rcall	.+498    	; 0x47a <main>
     288:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     28e:	9b b1       	in	r25, 0x0b	; 11
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8b b9       	out	0x0b, r24	; 11
     296:	08 95       	ret

00000298 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     298:	84 b7       	in	r24, 0x34	; 52
     29a:	87 7f       	andi	r24, 0xF7	; 247
     29c:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	a8 95       	wdr
     2a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2a8:	88 61       	ori	r24, 0x18	; 24
     2aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2b2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	80 e8       	ldi	r24, 0x80	; 128
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2c4:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2c6:	83 e3       	ldi	r24, 0x33	; 51
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2ce:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2d2:	86 e0       	ldi	r24, 0x06	; 6
     2d4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2d8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2dc:	88 e1       	ldi	r24, 0x18	; 24
     2de:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2e2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2e4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2e6:	8a b1       	in	r24, 0x0a	; 10
     2e8:	80 6f       	ori	r24, 0xF0	; 240
     2ea:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2ec:	8b b1       	in	r24, 0x0b	; 11
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     2f2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     2f4:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     2f6:	84 b1       	in	r24, 0x04	; 4
     2f8:	8f 71       	andi	r24, 0x1F	; 31
     2fa:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     2fc:	8d b1       	in	r24, 0x0d	; 13
     2fe:	8f 7c       	andi	r24, 0xCF	; 207
     300:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     302:	85 b1       	in	r24, 0x05	; 5
     304:	80 6e       	ori	r24, 0xE0	; 224
     306:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     308:	8e b1       	in	r24, 0x0e	; 14
     30a:	80 63       	ori	r24, 0x30	; 48
     30c:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     30e:	17 d4       	rcall	.+2094   	; 0xb3e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     310:	af e3       	ldi	r26, 0x3F	; 63
     312:	b1 e0       	ldi	r27, 0x01	; 1
     314:	e1 e3       	ldi	r30, 0x31	; 49
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	11 96       	adiw	r26, 0x01	; 1
     31a:	fc 93       	st	X, r31
     31c:	ee 93       	st	-X, r30
					stdout = Stream;
     31e:	13 96       	adiw	r26, 0x03	; 3
     320:	fc 93       	st	X, r31
     322:	ee 93       	st	-X, r30
     324:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     326:	8e e0       	ldi	r24, 0x0E	; 14
     328:	df 01       	movw	r26, r30
     32a:	1d 92       	st	X+, r1
     32c:	8a 95       	dec	r24
     32e:	e9 f7       	brne	.-6      	; 0x32a <SetupHardware+0x92>
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	83 83       	std	Z+3, r24	; 0x03
     334:	8b e1       	ldi	r24, 0x1B	; 27
     336:	9a e0       	ldi	r25, 0x0A	; 10
     338:	91 87       	std	Z+9, r25	; 0x09
     33a:	80 87       	std	Z+8, r24	; 0x08
     33c:	84 e2       	ldi	r24, 0x24	; 36
     33e:	9a e0       	ldi	r25, 0x0A	; 10
     340:	93 87       	std	Z+11, r25	; 0x0b
     342:	82 87       	std	Z+10, r24	; 0x0a
     344:	08 95       	ret

00000346 <CheckJoystickMovement>:

/** Checks for movement of the board's joystick, and sends corresponding MIDI note on/off
 *  messages to the host.
 */
void CheckJoystickMovement(void)
{
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <CheckJoystickMovement+0x8>
     34e:	00 d0       	rcall	.+0      	; 0x350 <CheckJoystickMovement+0xa>
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     354:	83 b1       	in	r24, 0x03	; 3
     356:	1c b1       	in	r17, 0x0c	; 12
     358:	10 95       	com	r17
     35a:	10 73       	andi	r17, 0x30	; 48
     35c:	16 95       	lsr	r17
     35e:	80 95       	com	r24
     360:	80 7e       	andi	r24, 0xE0	; 224
     362:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     364:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
     368:	91 27       	eor	r25, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     36a:	62 9b       	sbis	0x0c, 2	; 12
     36c:	02 c0       	rjmp	.+4      	; 0x372 <CheckJoystickMovement+0x2c>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	01 c0       	rjmp	.+2      	; 0x374 <CheckJoystickMovement+0x2e>
     372:	29 e0       	ldi	r18, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
     374:	96 ff       	sbrs	r25, 6
     376:	04 c0       	rjmp	.+8      	; 0x380 <CheckJoystickMovement+0x3a>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     378:	16 fd       	sbrc	r17, 6
     37a:	36 c0       	rjmp	.+108    	; 0x3e8 <CheckJoystickMovement+0xa2>
		MIDIPitch   = 0x3C;
     37c:	9c e3       	ldi	r25, 0x3C	; 60
     37e:	17 c0       	rjmp	.+46     	; 0x3ae <CheckJoystickMovement+0x68>
	}
	else if (JoystickChanges & JOY_UP)
     380:	97 ff       	sbrs	r25, 7
     382:	04 c0       	rjmp	.+8      	; 0x38c <CheckJoystickMovement+0x46>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
     384:	9d e3       	ldi	r25, 0x3D	; 61
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3C;
	}
	else if (JoystickChanges & JOY_UP)
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     386:	17 fd       	sbrc	r17, 7
     388:	30 c0       	rjmp	.+96     	; 0x3ea <CheckJoystickMovement+0xa4>
     38a:	11 c0       	rjmp	.+34     	; 0x3ae <CheckJoystickMovement+0x68>
		MIDIPitch   = 0x3D;
	}
	else if (JoystickChanges & JOY_RIGHT)
     38c:	93 ff       	sbrs	r25, 3
     38e:	04 c0       	rjmp	.+8      	; 0x398 <CheckJoystickMovement+0x52>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3E;
     390:	9e e3       	ldi	r25, 0x3E	; 62
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
	}
	else if (JoystickChanges & JOY_RIGHT)
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     392:	13 fd       	sbrc	r17, 3
     394:	2a c0       	rjmp	.+84     	; 0x3ea <CheckJoystickMovement+0xa4>
     396:	0b c0       	rjmp	.+22     	; 0x3ae <CheckJoystickMovement+0x68>
		MIDIPitch   = 0x3E;
	}
	else if (JoystickChanges & JOY_DOWN)
     398:	94 ff       	sbrs	r25, 4
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <CheckJoystickMovement+0x5e>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
     39c:	9f e3       	ldi	r25, 0x3F	; 63
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3E;
	}
	else if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     39e:	14 fd       	sbrc	r17, 4
     3a0:	24 c0       	rjmp	.+72     	; 0x3ea <CheckJoystickMovement+0xa4>
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <CheckJoystickMovement+0x68>
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
     3a4:	95 ff       	sbrs	r25, 5
     3a6:	16 c0       	rjmp	.+44     	; 0x3d4 <CheckJoystickMovement+0x8e>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3B;
     3a8:	9b e3       	ldi	r25, 0x3B	; 59
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     3aa:	15 fd       	sbrc	r17, 5
     3ac:	1e c0       	rjmp	.+60     	; 0x3ea <CheckJoystickMovement+0xa4>
	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

	if (JoystickChanges & JOY_LEFT)
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     3ae:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     3b0:	38 2f       	mov	r19, r24
     3b2:	32 95       	swap	r19
     3b4:	3f 70       	andi	r19, 0x0F	; 15
     3b6:	39 83       	std	Y+1, r19	; 0x01
     3b8:	82 2b       	or	r24, r18
     3ba:	8a 83       	std	Y+2, r24	; 0x02
     3bc:	9b 83       	std	Y+3, r25	; 0x03
     3be:	80 e4       	ldi	r24, 0x40	; 64
     3c0:	8c 83       	std	Y+4, r24	; 0x04
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};

		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     3c2:	be 01       	movw	r22, r28
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	eb d7       	rcall	.+4054   	; 0x13a4 <MIDI_Host_SendEventPacket>
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	c4 d7       	rcall	.+3976   	; 0x135c <MIDI_Host_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
     3d4:	10 93 22 01 	sts	0x0122, r17	; 0x800122 <__data_end>
}
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	08 95       	ret
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

	if (JoystickChanges & JOY_LEFT)
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3C;
     3e8:	9c e3       	ldi	r25, 0x3C	; 60
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     3ea:	80 e9       	ldi	r24, 0x90	; 144
     3ec:	e1 cf       	rjmp	.-62     	; 0x3b0 <CheckJoystickMovement+0x6a>

000003ee <JoystickHost_Task>:

/** Task to manage an enumerated USB MIDI device once connected, to display received
 *  note events from the host and send note changes in response to tbe board's joystick.
 */
void JoystickHost_Task(void)
{
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <JoystickHost_Task+0xa>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <JoystickHost_Task+0xc>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     3fe:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_HostState>
     402:	8b 30       	cpi	r24, 0x0B	; 11
     404:	89 f5       	brne	.+98     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     406:	09 ef       	ldi	r16, 0xF9	; 249
     408:	11 e0       	ldi	r17, 0x01	; 1
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     40a:	be 01       	movw	r22, r28
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	ea d7       	rcall	.+4052   	; 0x13ea <MIDI_Host_ReceiveEventPacket>
     416:	88 23       	and	r24, r24
     418:	31 f1       	breq	.+76     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	2f 70       	andi	r18, 0x0F	; 15
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	82 0f       	add	r24, r18
     422:	8f 70       	andi	r24, 0x0F	; 15
     424:	82 30       	cpi	r24, 0x02	; 2
     426:	88 f7       	brcc	.-30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     428:	5c 81       	ldd	r21, Y+4	; 0x04
     42a:	4b 81       	ldd	r20, Y+3	; 0x03
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	29 30       	cpi	r18, 0x09	; 9
     436:	19 f0       	breq	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	2e e1       	ldi	r18, 0x1E	; 30
     43a:	31 e0       	ldi	r19, 0x01	; 1
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	2b e1       	ldi	r18, 0x1B	; 27
     440:	31 e0       	ldi	r19, 0x01	; 1
     442:	1f 92       	push	r1
     444:	5f 93       	push	r21
     446:	1f 92       	push	r1
     448:	4f 93       	push	r20
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	3f 93       	push	r19
     450:	2f 93       	push	r18
     452:	1f 93       	push	r17
     454:	0f 93       	push	r16
     456:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf_P>
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	d2 cf       	rjmp	.-92     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
																				   MIDIEvent.Data2, MIDIEvent.Data3);
		}
	}

	CheckJoystickMovement();
     466:	6f df       	rcall	.-290    	; 0x346 <CheckJoystickMovement>
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret

0000047a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     47a:	0e df       	rcall	.-484    	; 0x298 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     47c:	8c e2       	ldi	r24, 0x2C	; 44
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 66 0a 	call	0x14cc	; 0x14cc <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     484:	80 e1       	ldi	r24, 0x10	; 16
     486:	03 df       	rcall	.-506    	; 0x28e <LEDs_SetAllLEDs>
	sei();
     488:	78 94       	sei

	for (;;)
	{
		JoystickHost_Task();
     48a:	b1 df       	rcall	.-158    	; 0x3ee <JoystickHost_Task>

		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	80 d7       	rcall	.+3840   	; 0x1392 <MIDI_Host_USBTask>
		USB_USBTask();
     492:	89 d6       	rcall	.+3346   	; 0x11a6 <USB_USBTask>
     494:	fa cf       	rjmp	.-12     	; 0x48a <main+0x10>

00000496 <EVENT_USB_Host_DeviceAttached>:
     496:	86 ee       	ldi	r24, 0xE6	; 230
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     49e:	80 ea       	ldi	r24, 0xA0	; 160
     4a0:	f6 ce       	rjmp	.-532    	; 0x28e <LEDs_SetAllLEDs>

000004a2 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4a2:	8f ec       	ldi	r24, 0xCF	; 207
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4aa:	80 e1       	ldi	r24, 0x10	; 16
     4ac:	f0 ce       	rjmp	.-544    	; 0x28e <LEDs_SetAllLEDs>

000004ae <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	c2 50       	subi	r28, 0x02	; 2
     4b8:	d2 40       	sbci	r29, 0x02	; 2
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4c4:	80 ea       	ldi	r24, 0xA0	; 160
     4c6:	e3 de       	rcall	.-570    	; 0x28e <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	ae 01       	movw	r20, r28
     4ce:	4f 5f       	subi	r20, 0xFF	; 255
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	be 01       	movw	r22, r28
     4d4:	6f 5f       	subi	r22, 0xFF	; 255
     4d6:	7d 4f       	sbci	r23, 0xFD	; 253
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	96 d4       	rcall	.+2348   	; 0xe08 <USB_Host_GetDeviceConfigDescriptor>
     4dc:	88 23       	and	r24, r24
     4de:	19 f0       	breq	.+6      	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4e0:	82 ea       	ldi	r24, 0xA2	; 162
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	dd 4f       	sbci	r29, 0xFD	; 253
     4ea:	68 81       	ld	r22, Y
     4ec:	79 81       	ldd	r23, Y+1	; 0x01
     4ee:	c1 50       	subi	r28, 0x01	; 1
     4f0:	d2 40       	sbci	r29, 0x02	; 2
     4f2:	ae 01       	movw	r20, r28
     4f4:	4f 5f       	subi	r20, 0xFF	; 255
     4f6:	5f 4f       	sbci	r21, 0xFF	; 255
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	86 d6       	rcall	.+3340   	; 0x120a <MIDI_Host_ConfigurePipes>
     4fe:	88 23       	and	r24, r24
     500:	19 f0       	breq	.+6      	; 0x508 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid MIDI Class Device.\r\n"));
     502:	81 e7       	ldi	r24, 0x71	; 113
     504:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     506:	06 c0       	rjmp	.+12     	; 0x514 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	26 d6       	rcall	.+3148   	; 0x1158 <USB_Host_SetDeviceConfiguration>
     50c:	88 23       	and	r24, r24
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     50e:	29 f0       	breq	.+10     	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     510:	8b e4       	ldi	r24, 0x4B	; 75
     512:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     514:	db d7       	rcall	.+4022   	; 0x14cc <puts_P>
     516:	80 e9       	ldi	r24, 0x90	; 144
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     518:	04 c0       	rjmp	.+8      	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     51a:	81 e3       	ldi	r24, 0x31	; 49
     51c:	91 e0       	ldi	r25, 0x01	; 1
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     51e:	d6 d7       	rcall	.+4012   	; 0x14cc <puts_P>
     520:	80 e6       	ldi	r24, 0x60	; 96
     522:	b5 de       	rcall	.-662    	; 0x28e <LEDs_SetAllLEDs>
}
     524:	ce 5f       	subi	r28, 0xFE	; 254
     526:	dd 4f       	sbci	r29, 0xFD	; 253
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     538:	c8 2f       	mov	r28, r24
	USB_Disable();
     53a:	99 d2       	rcall	.+1330   	; 0xa6e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     53c:	1f 92       	push	r1
     53e:	cf 93       	push	r28
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	9f 93       	push	r25
     546:	8f 93       	push	r24
     548:	9a d7       	rcall	.+3892   	; 0x147e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     54a:	80 e9       	ldi	r24, 0x90	; 144
     54c:	a0 de       	rcall	.-704    	; 0x28e <LEDs_SetAllLEDs>
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	ff cf       	rjmp	.-2      	; 0x556 <EVENT_USB_Host_HostError+0x1e>

00000558 <EVENT_USB_Host_DeviceEnumerationFailed>:
     558:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     55c:	1f 92       	push	r1
     55e:	9f 93       	push	r25
     560:	1f 92       	push	r1
     562:	6f 93       	push	r22
     564:	1f 92       	push	r1
     566:	8f 93       	push	r24
     568:	8c ea       	ldi	r24, 0xAC	; 172
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	86 d7       	rcall	.+3852   	; 0x147e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     572:	8d b7       	in	r24, 0x3d	; 61
     574:	9e b7       	in	r25, 0x3e	; 62
     576:	08 96       	adiw	r24, 0x08	; 8
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	9e bf       	out	0x3e, r25	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	8d bf       	out	0x3d, r24	; 61
     582:	80 e9       	ldi	r24, 0x90	; 144
     584:	84 ce       	rjmp	.-760    	; 0x28e <LEDs_SetAllLEDs>

00000586 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     586:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     58a:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     58c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     590:	9d 7f       	andi	r25, 0xFD	; 253
     592:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     596:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     59a:	92 60       	ori	r25, 0x02	; 2
     59c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5a0:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5a4:	91 fd       	sbrc	r25, 1
     5a6:	fc cf       	rjmp	.-8      	; 0x5a0 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5a8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5ac:	91 60       	ori	r25, 0x01	; 1
     5ae:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     5b2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5b6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5ba:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5bc:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5c0:	2f 7d       	andi	r18, 0xDF	; 223
     5c2:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5c6:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5ca:	2f 7d       	andi	r18, 0xDF	; 223
     5cc:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5d0:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5d2:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5d6:	35 ff       	sbrs	r19, 5
     5d8:	0b c0       	rjmp	.+22     	; 0x5f0 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5da:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5de:	2f 7d       	andi	r18, 0xDF	; 223
     5e0:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     5e4:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5e8:	2d 7f       	andi	r18, 0xFD	; 253
     5ea:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5ee:	08 c0       	rjmp	.+16     	; 0x600 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f0:	ef ec       	ldi	r30, 0xCF	; 207
     5f2:	f7 e0       	ldi	r31, 0x07	; 7
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <USB_Host_ResetDevice+0x6e>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <USB_Host_ResetDevice+0x74>
     5fa:	00 00       	nop
     5fc:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5fe:	49 f7       	brne	.-46     	; 0x5d2 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     600:	99 23       	and	r25, r25
     602:	29 f0       	breq	.+10     	; 0x60e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     604:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     608:	90 62       	ori	r25, 0x20	; 32
     60a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     60e:	81 11       	cpse	r24, r1
     610:	05 c0       	rjmp	.+10     	; 0x61c <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     612:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     616:	8e 7f       	andi	r24, 0xFE	; 254
     618:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     61c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     620:	82 60       	ori	r24, 0x02	; 2
     622:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     626:	08 95       	ret

00000628 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     628:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     62c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     62e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     632:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     634:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     638:	3f 7d       	andi	r19, 0xDF	; 223
     63a:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     63e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     642:	3f 7d       	andi	r19, 0xDF	; 223
     644:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     648:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     64c:	31 60       	ori	r19, 0x01	; 1
     64e:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     652:	88 23       	and	r24, r24
     654:	39 f1       	breq	.+78     	; 0x6a4 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     656:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     65a:	35 ff       	sbrs	r19, 5
     65c:	06 c0       	rjmp	.+12     	; 0x66a <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     65e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     662:	3f 7d       	andi	r19, 0xDF	; 223
     664:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     668:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     66a:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <USB_HostState>
     66e:	31 30       	cpi	r19, 0x01	; 1
     670:	c1 f0       	breq	.+48     	; 0x6a2 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     672:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     676:	34 ff       	sbrs	r19, 4
     678:	09 c0       	rjmp	.+18     	; 0x68c <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     67a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     67e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     682:	8f 7e       	andi	r24, 0xEF	; 239
     684:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     688:	82 e0       	ldi	r24, 0x02	; 2

			break;
     68a:	0c c0       	rjmp	.+24     	; 0x6a4 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     68c:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     690:	31 ff       	sbrs	r19, 1
     692:	df cf       	rjmp	.-66     	; 0x652 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     694:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     698:	8d 7f       	andi	r24, 0xFD	; 253
     69a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     69e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     6a2:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     6a4:	21 11       	cpse	r18, r1
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6a8:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6ac:	2e 7f       	andi	r18, 0xFE	; 254
     6ae:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6b2:	99 23       	and	r25, r25
     6b4:	29 f0       	breq	.+10     	; 0x6c0 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6b6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6ba:	90 62       	ori	r25, 0x20	; 32
     6bc:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6c0:	08 95       	ret

000006c2 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6c2:	ef 92       	push	r14
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	28 97       	sbiw	r28, 0x08	; 8
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6dc:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <USB_HostState>
     6e0:	8e 2f       	mov	r24, r30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	8a 30       	cpi	r24, 0x0A	; 10
     6e6:	91 05       	cpc	r25, r1
     6e8:	08 f0       	brcs	.+2      	; 0x6ec <USB_Host_ProcessNextHostState+0x2a>
     6ea:	f5 c0       	rjmp	.+490    	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
     6ec:	fc 01       	movw	r30, r24
     6ee:	e4 5b       	subi	r30, 0xB4	; 180
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	bc c6       	rjmp	.+3448   	; 0x146c <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6f4:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <WaitMSRemaining.2935>
     6f8:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <WaitMSRemaining.2935+0x1>
     6fc:	01 15       	cp	r16, r1
     6fe:	11 05       	cpc	r17, r1
     700:	09 f4       	brne	.+2      	; 0x704 <USB_Host_ProcessNextHostState+0x42>
     702:	e9 c0       	rjmp	.+466    	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 df       	rcall	.-224    	; 0x628 <USB_Host_WaitMS>
     708:	88 23       	and	r24, r24
     70a:	31 f0       	breq	.+12     	; 0x718 <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     70c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <PostWaitState.2936>
     710:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     714:	91 e0       	ldi	r25, 0x01	; 1
					break;
     716:	d1 c0       	rjmp	.+418    	; 0x8ba <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     718:	01 50       	subi	r16, 0x01	; 1
     71a:	11 09       	sbc	r17, r1
     71c:	10 93 25 01 	sts	0x0125, r17	; 0x800125 <WaitMSRemaining.2935+0x1>
     720:	00 93 24 01 	sts	0x0124, r16	; 0x800124 <WaitMSRemaining.2935>
     724:	01 2b       	or	r16, r17
     726:	09 f0       	breq	.+2      	; 0x72a <USB_Host_ProcessNextHostState+0x68>
     728:	d6 c0       	rjmp	.+428    	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     72a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <PostWaitState.2936>
     72e:	07 c0       	rjmp	.+14     	; 0x73e <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     730:	88 ee       	ldi	r24, 0xE8	; 232
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <WaitMSRemaining.2935+0x1>
     738:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <USB_HostState>
			break;
     742:	c9 c0       	rjmp	.+402    	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     744:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <WaitMSRemaining.2935>
     748:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <WaitMSRemaining.2935+0x1>
     74c:	9c 01       	movw	r18, r24
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	31 09       	sbc	r19, r1
     752:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <WaitMSRemaining.2935+0x1>
     756:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <WaitMSRemaining.2935>
     75a:	89 2b       	or	r24, r25
     75c:	39 f0       	breq	.+14     	; 0x76c <USB_Host_ProcessNextHostState+0xaa>
     75e:	8f ec       	ldi	r24, 0xCF	; 207
     760:	97 e0       	ldi	r25, 0x07	; 7
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <USB_Host_ProcessNextHostState+0xa0>
     766:	00 c0       	rjmp	.+0      	; 0x768 <USB_Host_ProcessNextHostState+0xa6>
     768:	00 00       	nop
     76a:	b5 c0       	rjmp	.+362    	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     76c:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     76e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     772:	80 61       	ori	r24, 0x10	; 16
     774:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     778:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     77c:	8b 7f       	andi	r24, 0xFB	; 251
     77e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     782:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     786:	80 61       	ori	r24, 0x10	; 16
     788:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     78c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     790:	82 60       	ori	r24, 0x02	; 2
     792:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	d2 cf       	rjmp	.-92     	; 0x73e <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     79a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     79e:	80 ff       	sbrs	r24, 0
     7a0:	9a c0       	rjmp	.+308    	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7a2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7a6:	8e 7f       	andi	r24, 0xFE	; 254
     7a8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ac:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7b6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     7ba:	8d 7f       	andi	r24, 0xFD	; 253
     7bc:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7c0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     7c4:	82 60       	ori	r24, 0x02	; 2
     7c6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ca:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7ce:	81 60       	ori	r24, 0x01	; 1
     7d0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7d4:	e8 d0       	rcall	.+464    	; 0x9a6 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7d6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_HostState>
     7da:	84 e6       	ldi	r24, 0x64	; 100
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <WaitMSRemaining.2935+0x1>
     7e2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <WaitMSRemaining.2935>
     7e6:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7e8:	5c c0       	rjmp	.+184    	; 0x8a2 <USB_Host_ProcessNextHostState+0x1e0>
     7ea:	cd de       	rcall	.-614    	; 0x586 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7ec:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_HostState>
     7f0:	88 ec       	ldi	r24, 0xC8	; 200
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <WaitMSRemaining.2935+0x1>
     7f8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <WaitMSRemaining.2935>
     7fc:	86 e0       	ldi	r24, 0x06	; 6
     7fe:	51 c0       	rjmp	.+162    	; 0x8a2 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     800:	e1 2c       	mov	r14, r1
     802:	00 e4       	ldi	r16, 0x40	; 64
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	6f d0       	rcall	.+222    	; 0x8ee <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     810:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     814:	87 fd       	sbrc	r24, 7
     816:	03 c0       	rjmp	.+6      	; 0x81e <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     818:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	4e c0       	rjmp	.+156    	; 0x8ba <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	8e cf       	rjmp	.-228    	; 0x73e <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	eb e0       	ldi	r30, 0x0B	; 11
     826:	f1 e0       	ldi	r31, 0x01	; 1
     828:	a8 e2       	ldi	r26, 0x28	; 40
     82a:	b1 e0       	ldi	r27, 0x01	; 1
     82c:	01 90       	ld	r0, Z+
     82e:	0d 92       	st	X+, r0
     830:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     832:	e1 f7       	brne	.-8      	; 0x82c <USB_Host_ProcessNextHostState+0x16a>
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	99 d3       	rcall	.+1842   	; 0xf6c <USB_Host_SendControlRequest>
     83a:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     83c:	3d c0       	rjmp	.+122    	; 0x8b8 <USB_Host_ProcessNextHostState+0x1f6>
     83e:	88 85       	ldd	r24, Y+8	; 0x08
     840:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     844:	a0 de       	rcall	.-704    	; 0x586 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     846:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_HostState>
     84a:	88 ec       	ldi	r24, 0xC8	; 200
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <WaitMSRemaining.2935+0x1>
     852:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <WaitMSRemaining.2935>
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	24 c0       	rjmp	.+72     	; 0x8a2 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     85a:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <USB_Host_ControlPipeSize>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	e1 2c       	mov	r14, r1
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	41 d0       	rcall	.+130    	; 0x8ee <Pipe_ConfigurePipe>
     86c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     870:	87 ff       	sbrs	r24, 7
     872:	d2 cf       	rjmp	.-92     	; 0x818 <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	e3 e1       	ldi	r30, 0x13	; 19
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	a8 e2       	ldi	r26, 0x28	; 40
     87c:	b1 e0       	ldi	r27, 0x01	; 1
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     884:	e1 f7       	brne	.-8      	; 0x87e <USB_Host_ProcessNextHostState+0x1bc>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	70 d3       	rcall	.+1760   	; 0xf6c <USB_Host_SendControlRequest>
     88c:	81 11       	cpse	r24, r1
     88e:	14 c0       	rjmp	.+40     	; 0x8b8 <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     890:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_HostState>
     894:	84 e6       	ldi	r24, 0x64	; 100
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <WaitMSRemaining.2935+0x1>
     89c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <WaitMSRemaining.2935>
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8a6:	17 c0       	rjmp	.+46     	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8ae:	8a e0       	ldi	r24, 0x0A	; 10
     8b0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     8b4:	fc dd       	rcall	.-1032   	; 0x4ae <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8be:	21 30       	cpi	r18, 0x01	; 1
     8c0:	51 f0       	breq	.+20     	; 0x8d6 <USB_Host_ProcessNextHostState+0x214>
     8c2:	68 2f       	mov	r22, r24
     8c4:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8c6:	48 de       	rcall	.-880    	; 0x558 <EVENT_USB_Host_DeviceEnumerationFailed>
     8c8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8d2:	e7 dd       	rcall	.-1074   	; 0x4a2 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8d4:	e4 d0       	rcall	.+456    	; 0xa9e <USB_ResetInterface>
     8d6:	28 96       	adiw	r28, 0x08	; 8
	}
}
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ef 90       	pop	r14
     8ec:	08 95       	ret

000008ee <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8ee:	ef 92       	push	r14
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8f4:	2f 70       	andi	r18, 0x0F	; 15
     8f6:	42 2b       	or	r20, r18
     8f8:	90 e4       	ldi	r25, 0x40	; 64
     8fa:	69 9f       	mul	r22, r25
     8fc:	b0 01       	movw	r22, r0
     8fe:	11 24       	eor	r1, r1
     900:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     902:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     904:	2e 2d       	mov	r18, r14
     906:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     908:	37 30       	cpi	r19, 0x07	; 7
     90a:	08 f0       	brcs	.+2      	; 0x90e <Pipe_ConfigurePipe+0x20>
     90c:	45 c0       	rjmp	.+138    	; 0x998 <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     90e:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     912:	38 13       	cpse	r19, r24
     914:	13 c0       	rjmp	.+38     	; 0x93c <Pipe_ConfigurePipe+0x4e>
     916:	48 e0       	ldi	r20, 0x08	; 8
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     91c:	40 17       	cp	r20, r16
     91e:	51 07       	cpc	r21, r17
     920:	38 f0       	brcs	.+14     	; 0x930 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     922:	92 95       	swap	r25
     924:	90 7f       	andi	r25, 0xF0	; 240
     926:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     928:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     92a:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e c0       	rjmp	.+28     	; 0x94c <Pipe_ConfigurePipe+0x5e>
     930:	95 30       	cpi	r25, 0x05	; 5
     932:	b9 f3       	breq	.-18     	; 0x922 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     934:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     936:	44 0f       	add	r20, r20
     938:	55 1f       	adc	r21, r21
     93a:	f0 cf       	rjmp	.-32     	; 0x91c <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     93c:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     940:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     944:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     948:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     94c:	91 fd       	sbrc	r25, 1
     94e:	02 c0       	rjmp	.+4      	; 0x954 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     950:	3f 5f       	subi	r19, 0xFF	; 255
     952:	da cf       	rjmp	.-76     	; 0x908 <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     954:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     958:	4e 7f       	andi	r20, 0xFE	; 254
     95a:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     95e:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     962:	4d 7f       	andi	r20, 0xFD	; 253
     964:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     968:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     96c:	41 60       	ori	r20, 0x01	; 1
     96e:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     972:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     976:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     97a:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     97e:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     982:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     986:	90 62       	ori	r25, 0x20	; 32
     988:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     98c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     990:	97 fd       	sbrc	r25, 7
     992:	de cf       	rjmp	.-68     	; 0x950 <Pipe_ConfigurePipe+0x62>
		  return false;		
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	03 c0       	rjmp	.+6      	; 0x99e <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     998:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     99c:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ef 90       	pop	r14
     9a4:	08 95       	ret

000009a6 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9a6:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9b0:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     9b4:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     9b8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9bc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9c0:	9e 7f       	andi	r25, 0xFE	; 254
     9c2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	87 30       	cpi	r24, 0x07	; 7
     9ca:	81 f7       	brne	.-32     	; 0x9ac <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9cc:	08 95       	ret

000009ce <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9ce:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     9d2:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9d4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9d6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9da:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9de:	27 ff       	sbrs	r18, 7
     9e0:	0f c0       	rjmp	.+30     	; 0xa00 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9e2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     9e6:	42 2f       	mov	r20, r18
     9e8:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9ea:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9ee:	20 73       	andi	r18, 0x30	; 48
     9f0:	20 31       	cpi	r18, 0x10	; 16
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <Pipe_IsEndpointBound+0x2a>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <Pipe_IsEndpointBound+0x2c>
     9f8:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9fa:	24 2b       	or	r18, r20
     9fc:	82 17       	cp	r24, r18
     9fe:	39 f0       	breq	.+14     	; 0xa0e <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a00:	9f 5f       	subi	r25, 0xFF	; 255
     a02:	97 30       	cpi	r25, 0x07	; 7
     a04:	41 f7       	brne	.-48     	; 0x9d6 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a06:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a10:	08 95       	ret

00000a12 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a12:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a16:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     a1a:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a1c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a20:	90 73       	andi	r25, 0x30	; 48
     a22:	90 31       	cpi	r25, 0x10	; 16
     a24:	29 f4       	brne	.+10     	; 0xa30 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a26:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     a2a:	90 ff       	sbrs	r25, 0
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <Pipe_WaitUntilReady+0x26>
     a2e:	19 c0       	rjmp	.+50     	; 0xa62 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a30:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a34:	92 fd       	sbrc	r25, 2
     a36:	15 c0       	rjmp	.+42     	; 0xa62 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a38:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a3c:	91 fd       	sbrc	r25, 1
     a3e:	13 c0       	rjmp	.+38     	; 0xa66 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a40:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <USB_HostState>
     a44:	91 30       	cpi	r25, 0x01	; 1
     a46:	89 f0       	breq	.+34     	; 0xa6a <Pipe_WaitUntilReady+0x58>
     a48:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a4c:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a50:	42 17       	cp	r20, r18
     a52:	53 07       	cpc	r21, r19
     a54:	19 f3       	breq	.-58     	; 0xa1c <Pipe_WaitUntilReady+0xa>
     a56:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a58:	11 f0       	breq	.+4      	; 0xa5e <Pipe_WaitUntilReady+0x4c>
     a5a:	a9 01       	movw	r20, r18
     a5c:	df cf       	rjmp	.-66     	; 0xa1c <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a6a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a6c:	08 95       	ret

00000a6e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a6e:	70 d0       	rcall	.+224    	; 0xb50 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a70:	77 d0       	rcall	.+238    	; 0xb60 <USB_INT_ClearAllInterrupts>
     a72:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	80 83       	st	Z, r24
     a7c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	80 83       	st	Z, r24
     a86:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a88:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	8c 91       	ld	r24, X
     a8e:	8e 7f       	andi	r24, 0xFE	; 254
     a90:	8c 93       	st	X, r24
     a92:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a94:	8f 7e       	andi	r24, 0xEF	; 239
     a96:	80 83       	st	Z, r24
     a98:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a9c:	08 95       	ret

00000a9e <USB_ResetInterface>:
     a9e:	58 d0       	rcall	.+176    	; 0xb50 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     aa0:	5f d0       	rcall	.+190    	; 0xb60 <USB_INT_ClearAllInterrupts>
     aa2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aa6:	8f 77       	andi	r24, 0x7F	; 127
     aa8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     aac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     ab0:	80 68       	ori	r24, 0x80	; 128
     ab2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ab6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     aba:	8f 7d       	andi	r24, 0xDF	; 223
     abc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ac0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     aca:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     acc:	89 bd       	out	0x29, r24	; 41
     ace:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ad0:	89 bd       	out	0x29, r24	; 41
     ad2:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ad4:	00 fe       	sbrs	r0, 0
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <USB_ResetInterface+0x34>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ada:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <USB_HostState>
     ade:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ae4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <USB_Host_ControlPipeSize>
     ae8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     af2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     afc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b06:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b10:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     b12:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b14:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b1e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b22:	84 60       	ori	r24, 0x04	; 4
     b24:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b28:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b2c:	8e 7f       	andi	r24, 0xFE	; 254
     b2e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     b32:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b3c:	08 95       	ret

00000b3e <USB_Init>:
     b3e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <USB_IsInitialized>

	USB_ResetInterface();
     b4e:	a7 cf       	rjmp	.-178    	; 0xa9e <USB_ResetInterface>

00000b50 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b50:	e8 ed       	ldi	r30, 0xD8	; 216
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8c 7f       	andi	r24, 0xFC	; 252
     b58:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b5a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b5e:	08 95       	ret

00000b60 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b60:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b64:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b68:	08 95       	ret

00000b6a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	0b b6       	in	r0, 0x3b	; 59
     b76:	0f 92       	push	r0
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b90:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b94:	85 ff       	sbrs	r24, 5
     b96:	0a c0       	rjmp	.+20     	; 0xbac <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b98:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b9c:	85 ff       	sbrs	r24, 5
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ba0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ba4:	8f 7d       	andi	r24, 0xDF	; 223
     ba6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     baa:	b9 d1       	rcall	.+882    	; 0xf1e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bac:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bb0:	81 ff       	sbrs	r24, 1
     bb2:	15 c0       	rjmp	.+42     	; 0xbde <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bb4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bb8:	81 ff       	sbrs	r24, 1
     bba:	11 c0       	rjmp	.+34     	; 0xbde <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bbc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bc6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bd0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     bda:	63 dc       	rcall	.-1850   	; 0x4a2 <EVENT_USB_Host_DeviceUnattached>
     bdc:	60 df       	rcall	.-320    	; 0xa9e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bde:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     be2:	81 ff       	sbrs	r24, 1
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     be6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     bea:	81 ff       	sbrs	r24, 1
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bee:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bf8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bfa:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bfe:	81 60       	ori	r24, 0x01	; 1
     c00:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	98 dc       	rcall	.-1744   	; 0x538 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c08:	4c dc       	rcall	.-1896   	; 0x4a2 <EVENT_USB_Host_DeviceUnattached>
     c0a:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     c0c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <USB_HostState>
     c10:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c14:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c16:	17 c0       	rjmp	.+46     	; 0xc46 <__vector_10+0xdc>
     c18:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c1c:	80 ff       	sbrs	r24, 0
     c1e:	13 c0       	rjmp	.+38     	; 0xc46 <__vector_10+0xdc>
     c20:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     c2a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c34:	30 dc       	rcall	.-1952   	; 0x496 <EVENT_USB_Host_DeviceAttached>
     c36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c3a:	82 60       	ori	r24, 0x02	; 2
     c3c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c40:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c42:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <USB_HostState>
     c46:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c4a:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__vector_10+0x100>
     c4e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c52:	82 ff       	sbrs	r24, 2
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <__vector_10+0x100>
     c56:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c5a:	8b 7f       	andi	r24, 0xFB	; 251
     c5c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	79 dc       	rcall	.-1806   	; 0x558 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c66:	1d dc       	rcall	.-1990   	; 0x4a2 <EVENT_USB_Host_DeviceUnattached>
     c68:	1a df       	rcall	.-460    	; 0xa9e <USB_ResetInterface>

		USB_ResetInterface();
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <Pipe_Write_Stream_LE>:
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	8b 01       	movw	r16, r22
     ca4:	7a 01       	movw	r14, r20
     ca6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     caa:	8f 7c       	andi	r24, 0xCF	; 207
     cac:	80 62       	ori	r24, 0x20	; 32
     cae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     cb2:	af de       	rcall	.-674    	; 0xa12 <Pipe_WaitUntilReady>
     cb4:	81 11       	cpse	r24, r1
     cb6:	32 c0       	rjmp	.+100    	; 0xd1c <Pipe_Write_Stream_LE+0x8c>
     cb8:	e1 14       	cp	r14, r1
     cba:	f1 04       	cpc	r15, r1
     cbc:	39 f0       	breq	.+14     	; 0xccc <Pipe_Write_Stream_LE+0x3c>
     cbe:	f7 01       	movw	r30, r14
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	08 1b       	sub	r16, r24
     cc6:	19 0b       	sbc	r17, r25
     cc8:	c8 0f       	add	r28, r24
     cca:	d9 1f       	adc	r29, r25
     ccc:	c1 2c       	mov	r12, r1
     cce:	d1 2c       	mov	r13, r1
     cd0:	01 15       	cp	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	11 f1       	breq	.+68     	; 0xd1a <Pipe_Write_Stream_LE+0x8a>
     cd6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     cda:	85 fd       	sbrc	r24, 5
     cdc:	15 c0       	rjmp	.+42     	; 0xd08 <Pipe_Write_Stream_LE+0x78>
     cde:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ce2:	8b 77       	andi	r24, 0x7B	; 123
     ce4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ce8:	e1 14       	cp	r14, r1
     cea:	f1 04       	cpc	r15, r1
     cec:	49 f0       	breq	.+18     	; 0xd00 <Pipe_Write_Stream_LE+0x70>
     cee:	f7 01       	movw	r30, r14
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	c8 0e       	add	r12, r24
     cf6:	d9 1e       	adc	r13, r25
     cf8:	d1 82       	std	Z+1, r13	; 0x01
     cfa:	c0 82       	st	Z, r12
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <Pipe_Write_Stream_LE+0x8c>
     d00:	88 de       	rcall	.-752    	; 0xa12 <Pipe_WaitUntilReady>
     d02:	88 23       	and	r24, r24
     d04:	29 f3       	breq	.-54     	; 0xcd0 <Pipe_Write_Stream_LE+0x40>
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <Pipe_Write_Stream_LE+0x8c>
     d08:	89 91       	ld	r24, Y+
     d0a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     d0e:	01 50       	subi	r16, 0x01	; 1
     d10:	11 09       	sbc	r17, r1
     d12:	ff ef       	ldi	r31, 0xFF	; 255
     d14:	cf 1a       	sub	r12, r31
     d16:	df 0a       	sbc	r13, r31
     d18:	db cf       	rjmp	.-74     	; 0xcd0 <Pipe_Write_Stream_LE+0x40>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	08 95       	ret

00000d2e <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	ec 01       	movw	r28, r24
     d40:	8b 01       	movw	r16, r22
     d42:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d44:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d48:	8f 7c       	andi	r24, 0xCF	; 207
     d4a:	80 61       	ori	r24, 0x10	; 16
     d4c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d50:	60 de       	rcall	.-832    	; 0xa12 <Pipe_WaitUntilReady>
     d52:	81 11       	cpse	r24, r1
     d54:	32 c0       	rjmp	.+100    	; 0xdba <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d56:	e1 14       	cp	r14, r1
     d58:	f1 04       	cpc	r15, r1
     d5a:	39 f0       	breq	.+14     	; 0xd6a <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	08 1b       	sub	r16, r24
     d64:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d66:	c8 0f       	add	r28, r24
     d68:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d6a:	c1 2c       	mov	r12, r1
     d6c:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d6e:	01 15       	cp	r16, r1
     d70:	11 05       	cpc	r17, r1
     d72:	11 f1       	breq	.+68     	; 0xdb8 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d74:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d78:	85 fd       	sbrc	r24, 5
     d7a:	15 c0       	rjmp	.+42     	; 0xda6 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d7c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d80:	8e 77       	andi	r24, 0x7E	; 126
     d82:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d86:	e1 14       	cp	r14, r1
     d88:	f1 04       	cpc	r15, r1
     d8a:	49 f0       	breq	.+18     	; 0xd9e <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     d8c:	f7 01       	movw	r30, r14
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	c8 0e       	add	r12, r24
     d94:	d9 1e       	adc	r13, r25
     d96:	d1 82       	std	Z+1, r13	; 0x01
     d98:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     d9a:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d9c:	0e c0       	rjmp	.+28     	; 0xdba <Pipe_Read_Stream_LE+0x8c>
     d9e:	39 de       	rcall	.-910    	; 0xa12 <Pipe_WaitUntilReady>
     da0:	88 23       	and	r24, r24
     da2:	29 f3       	breq	.-54     	; 0xd6e <Pipe_Read_Stream_LE+0x40>
     da4:	0a c0       	rjmp	.+20     	; 0xdba <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     da6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     daa:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dac:	01 50       	subi	r16, 0x01	; 1
     dae:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     db0:	ff ef       	ldi	r31, 0xFF	; 255
     db2:	cf 1a       	sub	r12, r31
     db4:	df 0a       	sbc	r13, r31
     db6:	db cf       	rjmp	.-74     	; 0xd6e <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     db8:	80 e0       	ldi	r24, 0x00	; 0
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	08 95       	ret

00000dcc <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	dc 01       	movw	r26, r24
     dd2:	eb 01       	movw	r28, r22
     dd4:	e8 81       	ld	r30, Y
     dd6:	f9 81       	ldd	r31, Y+1	; 0x01
     dd8:	20 81       	ld	r18, Z
     dda:	8d 91       	ld	r24, X+
     ddc:	9c 91       	ld	r25, X
     dde:	11 97       	sbiw	r26, 0x01	; 1
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	82 17       	cp	r24, r18
     de4:	93 07       	cpc	r25, r19
     de6:	08 f4       	brcc	.+2      	; 0xdea <USB_GetNextDescriptor+0x1e>
     de8:	9c 01       	movw	r18, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	eb 01       	movw	r28, r22
     df0:	f9 83       	std	Y+1, r31	; 0x01
     df2:	e8 83       	st	Y, r30
     df4:	8d 91       	ld	r24, X+
     df6:	9c 91       	ld	r25, X
     df8:	11 97       	sbiw	r26, 0x01	; 1
     dfa:	82 1b       	sub	r24, r18
     dfc:	93 0b       	sbc	r25, r19
     dfe:	8d 93       	st	X+, r24
     e00:	9c 93       	st	X, r25
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <USB_Host_GetDeviceConfigDescriptor>:
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	29 97       	sbiw	r28, 0x09	; 9
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	6b 01       	movw	r12, r22
     e2a:	8a 01       	movw	r16, r20
     e2c:	79 01       	movw	r14, r18
     e2e:	90 e8       	ldi	r25, 0x80	; 128
     e30:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <USB_ControlRequest>
     e34:	96 e0       	ldi	r25, 0x06	; 6
     e36:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <USB_ControlRequest+0x1>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	92 60       	ori	r25, 0x02	; 2
     e40:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <USB_ControlRequest+0x3>
     e44:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_ControlRequest+0x2>
     e48:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x5>
     e4c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x4>
     e50:	89 e0       	ldi	r24, 0x09	; 9
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <USB_ControlRequest+0x7>
     e58:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_ControlRequest+0x6>
     e5c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	83 d0       	rcall	.+262    	; 0xf6c <USB_Host_SendControlRequest>
     e66:	81 11       	cpse	r24, r1
     e68:	19 c0       	rjmp	.+50     	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	f6 01       	movw	r30, r12
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	e8 16       	cp	r14, r24
     e76:	f9 06       	cpc	r15, r25
     e78:	70 f0       	brcs	.+28     	; 0xe96 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     e7a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <USB_ControlRequest+0x7>
     e7e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_ControlRequest+0x6>
     e82:	c8 01       	movw	r24, r16
     e84:	73 d0       	rcall	.+230    	; 0xf6c <USB_Host_SendControlRequest>
     e86:	81 11       	cpse	r24, r1
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e8a:	f8 01       	movw	r30, r16
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	21 f4       	brne	.+8      	; 0xe9a <USB_Host_GetDeviceConfigDescriptor+0x92>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	29 96       	adiw	r28, 0x09	; 9
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	08 95       	ret

00000eba <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	8c 01       	movw	r16, r24
     ed0:	eb 01       	movw	r28, r22
     ed2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ed4:	f8 01       	movw	r30, r16
     ed6:	e0 80       	ld	r14, Z
     ed8:	f1 80       	ldd	r15, Z+1	; 0x01
     eda:	e1 14       	cp	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	99 f0       	breq	.+38     	; 0xf06 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ee0:	a8 80       	ld	r10, Y
     ee2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     ee4:	be 01       	movw	r22, r28
     ee6:	c8 01       	movw	r24, r16
     ee8:	71 df       	rcall	.-286    	; 0xdcc <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eea:	88 81       	ld	r24, Y
     eec:	99 81       	ldd	r25, Y+1	; 0x01
     eee:	f6 01       	movw	r30, r12
     ef0:	09 95       	icall
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	79 f3       	breq	.-34     	; 0xed4 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	39 f4       	brne	.+14     	; 0xf08 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     efa:	b9 82       	std	Y+1, r11	; 0x01
     efc:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     efe:	f8 01       	movw	r30, r16
     f00:	f1 82       	std	Z+1, r15	; 0x01
     f02:	e0 82       	st	Z, r14
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f06:	82 e0       	ldi	r24, 0x02	; 2
}
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	08 95       	ret

00000f1e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f1e:	08 95       	ret

00000f20 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f28:	c9 ee       	ldi	r28, 0xE9	; 233
     f2a:	d3 e0       	ldi	r29, 0x03	; 3
     f2c:	11 11       	cpse	r17, r1
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f30:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f34:	83 fd       	sbrc	r24, 3
     f36:	15 c0       	rjmp	.+42     	; 0xf62 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	76 db       	rcall	.-2324   	; 0x628 <USB_Host_WaitMS>
     f3c:	81 11       	cpse	r24, r1
     f3e:	12 c0       	rjmp	.+36     	; 0xf64 <USB_Host_WaitForIOS+0x44>
     f40:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f42:	a1 f7       	brne	.-24     	; 0xf2c <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	0e c0       	rjmp	.+28     	; 0xf64 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f48:	11 30       	cpi	r17, 0x01	; 1
     f4a:	29 f4       	brne	.+10     	; 0xf56 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f4c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f50:	80 ff       	sbrs	r24, 0
     f52:	f2 cf       	rjmp	.-28     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f54:	06 c0       	rjmp	.+12     	; 0xf62 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f56:	12 30       	cpi	r17, 0x02	; 2
     f58:	79 f7       	brne	.-34     	; 0xf38 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f5a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f5e:	82 ff       	sbrs	r24, 2
     f60:	eb cf       	rjmp	.-42     	; 0xf38 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f62:	80 e0       	ldi	r24, 0x00	; 0
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	08 95       	ret

00000f6c <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f78:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f80:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <USB_ControlRequest+0x6>
     f84:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f88:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	49 db       	rcall	.-2414   	; 0x628 <USB_Host_WaitMS>
     f96:	81 11       	cpse	r24, r1
     f98:	c8 c0       	rjmp	.+400    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f9a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f9e:	8f 7c       	andi	r24, 0xCF	; 207
     fa0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fa4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     fa8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fac:	8f 7e       	andi	r24, 0xEF	; 239
     fae:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fb2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fbc:	e8 e2       	ldi	r30, 0x28	; 40
     fbe:	f1 e0       	ldi	r31, 0x01	; 1
     fc0:	80 e3       	ldi	r24, 0x30	; 48
     fc2:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     fc4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fc6:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fca:	8e 17       	cp	r24, r30
     fcc:	9f 07       	cpc	r25, r31
     fce:	d1 f7       	brne	.-12     	; 0xfc4 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fd0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fd4:	87 77       	andi	r24, 0x77	; 119
     fd6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	a1 df       	rcall	.-190    	; 0xf20 <USB_Host_WaitForIOS>
     fde:	81 11       	cpse	r24, r1
     fe0:	a4 c0       	rjmp	.+328    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fe6:	80 64       	ori	r24, 0x40	; 64
     fe8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	1c db       	rcall	.-2504   	; 0x628 <USB_Host_WaitMS>
     ff0:	81 11       	cpse	r24, r1
     ff2:	9b c0       	rjmp	.+310    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ff4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <USB_ControlRequest>
     ff8:	87 ff       	sbrs	r24, 7
     ffa:	4e c0       	rjmp	.+156    	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ffc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1000:	8f 7c       	andi	r24, 0xCF	; 207
    1002:	80 61       	ori	r24, 0x10	; 16
    1004:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1008:	01 15       	cp	r16, r1
    100a:	11 05       	cpc	r17, r1
    100c:	09 f0       	breq	.+2      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100e:	3a c0       	rjmp	.+116    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1010:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1014:	8f 7c       	andi	r24, 0xCF	; 207
    1016:	80 62       	ori	r24, 0x20	; 32
    1018:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1020:	8f 7b       	andi	r24, 0xBF	; 191
    1022:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	7b df       	rcall	.-266    	; 0xf20 <USB_Host_WaitForIOS>
    102a:	81 11       	cpse	r24, r1
    102c:	7e c0       	rjmp	.+252    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    102e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1032:	8b 77       	andi	r24, 0x7B	; 123
    1034:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	72 df       	rcall	.-284    	; 0xf20 <USB_Host_WaitForIOS>
    103c:	76 c0       	rjmp	.+236    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    103e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1042:	8f 7b       	andi	r24, 0xBF	; 191
    1044:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	6a df       	rcall	.-300    	; 0xf20 <USB_Host_WaitForIOS>
    104c:	81 11       	cpse	r24, r1
    104e:	6d c0       	rjmp	.+218    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1050:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1054:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1058:	89 2b       	or	r24, r25
    105a:	11 f4       	brne	.+4      	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
				  DataLen = 0;
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
    1060:	f8 01       	movw	r30, r16
    1062:	8f 01       	movw	r16, r30
    1064:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1068:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    106c:	89 2b       	or	r24, r25
    106e:	69 f4       	brne	.+26     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1070:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1074:	80 64       	ori	r24, 0x40	; 64
    1076:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    107a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    107e:	8e 77       	andi	r24, 0x7E	; 126
    1080:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1084:	20 97       	sbiw	r28, 0x00	; 0
    1086:	d9 f6       	brne	.-74     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1088:	c3 cf       	rjmp	.-122    	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    108a:	20 97       	sbiw	r28, 0x00	; 0
    108c:	89 f3       	breq	.-30     	; 0x1070 <__EEPROM_REGION_LENGTH__+0x70>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    108e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    1092:	81 93       	st	Z+, r24
					DataLen--;
    1094:	21 97       	sbiw	r28, 0x01	; 1
    1096:	e5 cf       	rjmp	.-54     	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1098:	01 15       	cp	r16, r1
    109a:	11 05       	cpc	r17, r1
    109c:	91 f1       	breq	.+100    	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    109e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10a2:	8f 7c       	andi	r24, 0xCF	; 207
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10aa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10ae:	8f 7b       	andi	r24, 0xBF	; 191
    10b0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10b8:	e1 f0       	breq	.+56     	; 0x10f2 <__EEPROM_REGION_LENGTH__+0xf2>
    10ba:	32 df       	rcall	.-412    	; 0xf20 <USB_Host_WaitForIOS>
    10bc:	81 11       	cpse	r24, r1
    10be:	35 c0       	rjmp	.+106    	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10c0:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    10c4:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_Host_ControlPipeSize>
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	48 f4       	brcc	.+18     	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
				{
					Pipe_Write_8(*(DataStream++));
    10d4:	0f 5f       	subi	r16, 0xFF	; 255
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
    10d8:	f8 01       	movw	r30, r16
    10da:	31 97       	sbiw	r30, 0x01	; 1
    10dc:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10de:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    10e2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    10e6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10ea:	8b 77       	andi	r24, 0x7B	; 123
    10ec:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10f0:	e1 cf       	rjmp	.-62     	; 0x10b4 <__EEPROM_REGION_LENGTH__+0xb4>
    10f2:	16 df       	rcall	.-468    	; 0xf20 <USB_Host_WaitForIOS>
    10f4:	81 11       	cpse	r24, r1
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10f8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10fc:	80 64       	ori	r24, 0x40	; 64
    10fe:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1102:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1106:	8f 7c       	andi	r24, 0xCF	; 207
    1108:	80 61       	ori	r24, 0x10	; 16
    110a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    110e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1112:	8f 7b       	andi	r24, 0xBF	; 191
    1114:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	02 df       	rcall	.-508    	; 0xf20 <USB_Host_WaitForIOS>
    111c:	81 11       	cpse	r24, r1
    111e:	05 c0       	rjmp	.+10     	; 0x112a <__EEPROM_REGION_LENGTH__+0x12a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1120:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1124:	9e 77       	andi	r25, 0x7E	; 126
    1126:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    112a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    112e:	90 64       	ori	r25, 0x40	; 64
    1130:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1134:	f1 10       	cpse	r15, r1
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <__EEPROM_REGION_LENGTH__+0x142>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1138:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    113c:	9e 7f       	andi	r25, 0xFE	; 254
    113e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    1148:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	08 95       	ret

00001158 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1158:	cf 93       	push	r28
    115a:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    115c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_ControlRequest>
    1160:	89 e0       	ldi	r24, 0x09	; 9
    1162:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x1>
    1166:	8c 2f       	mov	r24, r28
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <USB_ControlRequest+0x3>
    116e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_ControlRequest+0x2>
    1172:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x5>
    1176:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x4>
    117a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_ControlRequest+0x7>
    117e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1182:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	f0 de       	rcall	.-544    	; 0xf6c <USB_Host_SendControlRequest>
    118c:	81 11       	cpse	r24, r1
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1190:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1194:	c1 11       	cpse	r28, r1
    1196:	02 c0       	rjmp	.+4      	; 0x119c <USB_Host_SetDeviceConfiguration+0x44>
    1198:	9a e0       	ldi	r25, 0x0A	; 10
    119a:	01 c0       	rjmp	.+2      	; 0x119e <USB_Host_SetDeviceConfiguration+0x46>
    119c:	9b e0       	ldi	r25, 0x0B	; 11
    119e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_HostState>
	}

	return ErrorCode;
}
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11ac:	c7 ea       	ldi	r28, 0xA7	; 167
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    11b0:	18 81       	ld	r17, Y
    11b2:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11b4:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11b6:	85 da       	rcall	.-2806   	; 0x6c2 <USB_Host_ProcessNextHostState>
    11b8:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	08 95       	ret

000011c2 <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:

	return MIDI_ENUMERROR_NoError;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    11c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	51 f4       	brne	.+20     	; 0x11de <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    11ca:	85 81       	ldd	r24, Z+5	; 0x05
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	39 f4       	brne	.+14     	; 0x11de <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
    11d0:	86 81       	ldd	r24, Z+6	; 0x06
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	21 f4       	brne	.+8      	; 0x11de <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
    11d6:	87 81       	ldd	r24, Z+7	; 0x07
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
    11d8:	81 11       	cpse	r24, r1
    11da:	01 c0       	rjmp	.+2      	; 0x11de <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
    11dc:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11de:	82 e0       	ldi	r24, 0x02	; 2
}
    11e0:	08 95       	ret

000011e2 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11e2:	fc 01       	movw	r30, r24
    11e4:	21 81       	ldd	r18, Z+1	; 0x01
    11e6:	25 30       	cpi	r18, 0x05	; 5
    11e8:	51 f4       	brne	.+20     	; 0x11fe <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    11ea:	23 81       	ldd	r18, Z+3	; 0x03
    11ec:	23 70       	andi	r18, 0x03	; 3
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	21 f4       	brne	.+8      	; 0x11fa <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x18>
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	ec db       	rcall	.-2088   	; 0x9ce <Pipe_IsEndpointBound>
    11f6:	88 23       	and	r24, r24
    11f8:	31 f0       	breq	.+12     	; 0x1206 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x24>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11fe:	24 30       	cpi	r18, 0x04	; 4
    1200:	e1 f7       	brne	.-8      	; 0x11fa <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x18>
	{
		return DESCRIPTOR_SEARCH_Fail;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1206:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1208:	08 95       	ret

0000120a <MIDI_Host_ConfigurePipes>:
#include "MIDI.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    120a:	6f 92       	push	r6
    120c:	7f 92       	push	r7
    120e:	8f 92       	push	r8
    1210:	9f 92       	push	r9
    1212:	af 92       	push	r10
    1214:	bf 92       	push	r11
    1216:	cf 92       	push	r12
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	00 d0       	rcall	.+0      	; 0x1228 <MIDI_Host_ConfigurePipes+0x1e>
    1228:	00 d0       	rcall	.+0      	; 0x122a <MIDI_Host_ConfigurePipes+0x20>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	69 83       	std	Y+1, r22	; 0x01
    1232:	5c 83       	std	Y+4, r21	; 0x04
    1234:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    1236:	fc 01       	movw	r30, r24
    1238:	34 96       	adiw	r30, 0x04	; 4
    123a:	26 e0       	ldi	r18, 0x06	; 6
    123c:	df 01       	movw	r26, r30
    123e:	1d 92       	st	X+, r1
    1240:	2a 95       	dec	r18
    1242:	e9 f7       	brne	.-6      	; 0x123e <MIDI_Host_ConfigurePipes+0x34>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1244:	eb 81       	ldd	r30, Y+3	; 0x03
    1246:	fc 81       	ldd	r31, Y+4	; 0x04
    1248:	11 81       	ldd	r17, Z+1	; 0x01
    124a:	12 30       	cpi	r17, 0x02	; 2
    124c:	09 f0       	breq	.+2      	; 0x1250 <MIDI_Host_ConfigurePipes+0x46>
    124e:	71 c0       	rjmp	.+226    	; 0x1332 <MIDI_Host_ConfigurePipes+0x128>
    1250:	6c 01       	movw	r12, r24
	{
		if (!(MIDIInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1252:	41 ee       	ldi	r20, 0xE1	; 225
    1254:	58 e0       	ldi	r21, 0x08	; 8
    1256:	be 01       	movw	r22, r28
    1258:	6d 5f       	subi	r22, 0xFD	; 253
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	2c de       	rcall	.-936    	; 0xeba <USB_GetNextDescriptorComp>
    1262:	81 11       	cpse	r24, r1
    1264:	67 c0       	rjmp	.+206    	; 0x1334 <MIDI_Host_ConfigurePipes+0x12a>
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1266:	6b 80       	ldd	r6, Y+3	; 0x03
    1268:	7c 80       	ldd	r7, Y+4	; 0x04

			DataINEndpoint  = NULL;
    126a:	f1 2c       	mov	r15, r1
    126c:	00 e0       	ldi	r16, 0x00	; 0
			DataOUTEndpoint = NULL;
    126e:	81 2c       	mov	r8, r1
    1270:	91 2c       	mov	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    1272:	61 14       	cp	r6, r1
    1274:	71 04       	cpc	r7, r1
    1276:	69 f3       	breq	.-38     	; 0x1252 <MIDI_Host_ConfigurePipes+0x48>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1278:	41 ef       	ldi	r20, 0xF1	; 241
    127a:	58 e0       	ldi	r21, 0x08	; 8
    127c:	be 01       	movw	r22, r28
    127e:	6d 5f       	subi	r22, 0xFD	; 253
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	19 de       	rcall	.-974    	; 0xeba <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    1288:	81 11       	cpse	r24, r1
    128a:	e3 cf       	rjmp	.-58     	; 0x1252 <MIDI_Host_ConfigurePipes+0x48>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    128c:	ab 80       	ldd	r10, Y+3	; 0x03
    128e:	bc 80       	ldd	r11, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1290:	f5 01       	movw	r30, r10
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	87 fd       	sbrc	r24, 7
    1296:	03 c0       	rjmp	.+6      	; 0x129e <MIDI_Host_ConfigurePipes+0x94>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
    1298:	45 01       	movw	r8, r10
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    129a:	af 2c       	mov	r10, r15
    129c:	b0 2e       	mov	r11, r16
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    129e:	a1 14       	cp	r10, r1
    12a0:	b1 04       	cpc	r11, r1
    12a2:	19 f4       	brne	.+6      	; 0x12aa <MIDI_Host_ConfigurePipes+0xa0>
#include "MIDI.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    12a4:	fa 2c       	mov	r15, r10
    12a6:	0b 2d       	mov	r16, r11
    12a8:	e4 cf       	rjmp	.-56     	; 0x1272 <MIDI_Host_ConfigurePipes+0x68>
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12aa:	81 14       	cp	r8, r1
    12ac:	91 04       	cpc	r9, r1
    12ae:	d1 f3       	breq	.-12     	; 0x12a4 <MIDI_Host_ConfigurePipes+0x9a>
    12b0:	ff 24       	eor	r15, r15
    12b2:	f3 94       	inc	r15
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == MIDIInterfaceInfo->Config.DataINPipeNumber)
    12b4:	d6 01       	movw	r26, r12
    12b6:	8c 91       	ld	r24, X
    12b8:	8f 11       	cpse	r24, r15
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <MIDI_Host_ConfigurePipes+0xcc>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    12bc:	f5 01       	movw	r30, r10
    12be:	04 81       	ldd	r16, Z+4	; 0x04
    12c0:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = DataINEndpoint->EndpointAddress;
    12c2:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataINPipeDoubleBank;
    12c4:	11 96       	adiw	r26, 0x01	; 1
    12c6:	8c 91       	ld	r24, X
    12c8:	11 97       	sbiw	r26, 0x01	; 1

			MIDIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    12ca:	17 96       	adiw	r26, 0x07	; 7
    12cc:	1c 93       	st	X, r17
    12ce:	0e 93       	st	-X, r16
    12d0:	16 97       	sbiw	r26, 0x06	; 6

		if (PipeNum == MIDIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    12d2:	40 e1       	ldi	r20, 0x10	; 16
    12d4:	21 c0       	rjmp	.+66     	; 0x1318 <MIDI_Host_ConfigurePipes+0x10e>
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataINPipeDoubleBank;

			MIDIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == MIDIInterfaceInfo->Config.DataOUTPipeNumber)
    12d6:	d6 01       	movw	r26, r12
    12d8:	12 96       	adiw	r26, 0x02	; 2
    12da:	8c 91       	ld	r24, X
    12dc:	8f 15       	cp	r24, r15
    12de:	79 f0       	breq	.+30     	; 0x12fe <MIDI_Host_ConfigurePipes+0xf4>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    12e0:	f3 94       	inc	r15
    12e2:	b7 e0       	ldi	r27, 0x07	; 7
    12e4:	fb 12       	cpse	r15, r27
    12e6:	e6 cf       	rjmp	.-52     	; 0x12b4 <MIDI_Host_ConfigurePipes+0xaa>
		{
			return MIDI_ENUMERROR_PipeConfigurationFailed;
		}
	}

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    12e8:	f3 01       	movw	r30, r6
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	d6 01       	movw	r26, r12
    12ee:	15 96       	adiw	r26, 0x05	; 5
    12f0:	8c 93       	st	X, r24
    12f2:	15 97       	sbiw	r26, 0x05	; 5
	MIDIInterfaceInfo->State.IsActive = true;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	14 96       	adiw	r26, 0x04	; 4
    12f8:	8c 93       	st	X, r24

	return MIDI_ENUMERROR_NoError;
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <MIDI_Host_ConfigurePipes+0x12a>

			MIDIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == MIDIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    12fe:	f4 01       	movw	r30, r8
    1300:	04 81       	ldd	r16, Z+4	; 0x04
    1302:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1304:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1306:	d6 01       	movw	r26, r12
    1308:	13 96       	adiw	r26, 0x03	; 3
    130a:	8c 91       	ld	r24, X
    130c:	13 97       	sbiw	r26, 0x03	; 3

			MIDIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    130e:	19 96       	adiw	r26, 0x09	; 9
    1310:	1c 93       	st	X, r17
    1312:	0e 93       	st	-X, r16
    1314:	18 97       	sbiw	r26, 0x08	; 8
		}
		else if (PipeNum == MIDIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1316:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1318:	81 11       	cpse	r24, r1
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <MIDI_Host_ConfigurePipes+0x116>
    131c:	e1 2c       	mov	r14, r1
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <MIDI_Host_ConfigurePipes+0x11a>
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	e8 2e       	mov	r14, r24
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	8f 2d       	mov	r24, r15
    1328:	e2 da       	rcall	.-2620   	; 0x8ee <Pipe_ConfigurePipe>
    132a:	81 11       	cpse	r24, r1
    132c:	d9 cf       	rjmp	.-78     	; 0x12e0 <MIDI_Host_ConfigurePipes+0xd6>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return MIDI_ENUMERROR_PipeConfigurationFailed;
    132e:	13 e0       	ldi	r17, 0x03	; 3
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <MIDI_Host_ConfigurePipes+0x12a>
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;
    1332:	11 e0       	ldi	r17, 0x01	; 1

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
	MIDIInterfaceInfo->State.IsActive = true;

	return MIDI_ENUMERROR_NoError;
}
    1334:	81 2f       	mov	r24, r17
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	9f 90       	pop	r9
    1354:	8f 90       	pop	r8
    1356:	7f 90       	pop	r7
    1358:	6f 90       	pop	r6
    135a:	08 95       	ret

0000135c <MIDI_Host_Flush>:
	#endif	
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    135c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_HostState>
    1360:	2b 30       	cpi	r18, 0x0B	; 11
    1362:	99 f4       	brne	.+38     	; 0x138a <MIDI_Host_Flush+0x2e>
    1364:	fc 01       	movw	r30, r24
    1366:	24 81       	ldd	r18, Z+4	; 0x04
    1368:	22 23       	and	r18, r18
    136a:	79 f0       	breq	.+30     	; 0x138a <MIDI_Host_Flush+0x2e>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    136c:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    136e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1372:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1376:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	if (Pipe_BytesInPipe())
    137a:	89 2b       	or	r24, r25
    137c:	41 f0       	breq	.+16     	; 0x138e <MIDI_Host_Flush+0x32>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    137e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1382:	8b 77       	andi	r24, 0x7B	; 123
    1384:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1388:	44 cb       	rjmp	.-2424   	; 0xa12 <Pipe_WaitUntilReady>
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	08 95       	ret

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
		  return ErrorCode;
	}

	return PIPE_READYWAIT_NoError;
    138e:	80 e0       	ldi	r24, 0x00	; 0
}
    1390:	08 95       	ret

00001392 <MIDI_Host_USBTask>:
	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1392:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_HostState>
    1396:	2b 30       	cpi	r18, 0x0B	; 11
    1398:	21 f4       	brne	.+8      	; 0x13a2 <MIDI_Host_USBTask+0x10>
    139a:	fc 01       	movw	r30, r24
    139c:	24 81       	ldd	r18, Z+4	; 0x04
    139e:	21 11       	cpse	r18, r1
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    13a0:	dd cf       	rjmp	.-70     	; 0x135c <MIDI_Host_Flush>
    13a2:	08 95       	ret

000013a4 <MIDI_Host_SendEventPacket>:
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    13a4:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    13a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_HostState>
    13aa:	8b 30       	cpi	r24, 0x0B	; 11
    13ac:	d1 f4       	brne	.+52     	; 0x13e2 <MIDI_Host_SendEventPacket+0x3e>
    13ae:	84 81       	ldd	r24, Z+4	; 0x04
    13b0:	88 23       	and	r24, r24
    13b2:	b9 f0       	breq	.+46     	; 0x13e2 <MIDI_Host_SendEventPacket+0x3e>
    13b4:	cb 01       	movw	r24, r22
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    13b6:	22 81       	ldd	r18, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13b8:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != PIPE_RWSTREAM_NoError)
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	65 dc       	rcall	.-1846   	; 0xc90 <Pipe_Write_Stream_LE>
    13c6:	81 11       	cpse	r24, r1
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <MIDI_Host_SendEventPacket+0x44>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    13ca:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  return ErrorCode;

	if (!(Pipe_IsReadWriteAllowed()))
    13ce:	89 2f       	mov	r24, r25
    13d0:	80 72       	andi	r24, 0x20	; 32
    13d2:	95 fd       	sbrc	r25, 5
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <MIDI_Host_SendEventPacket+0x42>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13d6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13da:	9b 77       	andi	r25, 0x7B	; 123
    13dc:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13e0:	08 95       	ret

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret
	  return ErrorCode;

	if (!(Pipe_IsReadWriteAllowed()))
	  Pipe_ClearOUT();

	return PIPE_RWSTREAM_NoError;
    13e6:	80 e0       	ldi	r24, 0x00	; 0
}
    13e8:	08 95       	ret

000013ea <MIDI_Host_ReceiveEventPacket>:

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    13ea:	cf 93       	push	r28
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    13ec:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_HostState>
    13f0:	2b 30       	cpi	r18, 0x0B	; 11
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <MIDI_Host_ReceiveEventPacket+0xe>
	  return HOST_SENDCONTROL_DeviceDisconnected;
    13f4:	c1 e0       	ldi	r28, 0x01	; 1
    13f6:	1c c0       	rjmp	.+56     	; 0x1430 <MIDI_Host_ReceiveEventPacket+0x46>
}

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    13f8:	fc 01       	movw	r30, r24
    13fa:	c4 81       	ldd	r28, Z+4	; 0x04
    13fc:	cc 23       	and	r28, r28
    13fe:	d1 f3       	breq	.-12     	; 0x13f4 <MIDI_Host_ReceiveEventPacket+0xa>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);
    1400:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1402:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1406:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

	if (!(Pipe_IsReadWriteAllowed()))
    140a:	85 ff       	sbrs	r24, 5
    140c:	10 c0       	rjmp	.+32     	; 0x142e <MIDI_Host_ReceiveEventPacket+0x44>
    140e:	cb 01       	movw	r24, r22
	  return false;

	Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	64 e0       	ldi	r22, 0x04	; 4
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	8a dc       	rcall	.-1772   	; 0xd2e <Pipe_Read_Stream_LE>
    141a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

	if (!(Pipe_IsReadWriteAllowed()))
    141e:	85 fd       	sbrc	r24, 5
    1420:	e9 cf       	rjmp	.-46     	; 0x13f4 <MIDI_Host_ReceiveEventPacket+0xa>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1422:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1426:	8e 77       	andi	r24, 0x7E	; 126
    1428:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <MIDI_Host_ReceiveEventPacket+0x46>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);

	if (!(Pipe_IsReadWriteAllowed()))
	  return false;
    142e:	c0 e0       	ldi	r28, 0x00	; 0

	if (!(Pipe_IsReadWriteAllowed()))
	  Pipe_ClearIN();

	return true;
}
    1430:	8c 2f       	mov	r24, r28
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1436:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    143a:	95 ff       	sbrs	r25, 5
    143c:	fc cf       	rjmp	.-8      	; 0x1436 <Serial_putchar>
				UDR1 = DataByte;
    143e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	08 95       	ret

00001448 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1448:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    144c:	87 ff       	sbrs	r24, 7
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <Serial_getchar+0x18>
    1450:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1454:	87 ff       	sbrs	r24, 7
    1456:	07 c0       	rjmp	.+14     	; 0x1466 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1458:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	08 95       	ret
	  return _FDEV_EOF;
    1460:	8e ef       	ldi	r24, 0xFE	; 254
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    146a:	08 95       	ret

0000146c <__tablejump2__>:
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	00 24       	eor	r0, r0
    1472:	00 1c       	adc	r0, r0
    1474:	0b be       	out	0x3b, r0	; 59
    1476:	07 90       	elpm	r0, Z+
    1478:	f6 91       	elpm	r31, Z
    147a:	e0 2d       	mov	r30, r0
    147c:	09 94       	ijmp

0000147e <printf_P>:
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	ae 01       	movw	r20, r28
    148c:	49 5f       	subi	r20, 0xF9	; 249
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	da 01       	movw	r26, r20
    1492:	6d 91       	ld	r22, X+
    1494:	7d 91       	ld	r23, X+
    1496:	ad 01       	movw	r20, r26
    1498:	0f e3       	ldi	r16, 0x3F	; 63
    149a:	11 e0       	ldi	r17, 0x01	; 1
    149c:	f8 01       	movw	r30, r16
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	dc 01       	movw	r26, r24
    14a4:	13 96       	adiw	r26, 0x03	; 3
    14a6:	2c 91       	ld	r18, X
    14a8:	13 97       	sbiw	r26, 0x03	; 3
    14aa:	28 60       	ori	r18, 0x08	; 8
    14ac:	13 96       	adiw	r26, 0x03	; 3
    14ae:	2c 93       	st	X, r18
    14b0:	3e d0       	rcall	.+124    	; 0x152e <vfprintf>
    14b2:	d8 01       	movw	r26, r16
    14b4:	12 96       	adiw	r26, 0x02	; 2
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	13 97       	sbiw	r26, 0x03	; 3
    14bc:	23 81       	ldd	r18, Z+3	; 0x03
    14be:	27 7f       	andi	r18, 0xF7	; 247
    14c0:	23 83       	std	Z+3, r18	; 0x03
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	08 95       	ret

000014cc <puts_P>:
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	8c 01       	movw	r16, r24
    14d6:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <__iob+0x2>
    14da:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <__iob+0x3>
    14de:	83 81       	ldd	r24, Z+3	; 0x03
    14e0:	81 ff       	sbrs	r24, 1
    14e2:	1b c0       	rjmp	.+54     	; 0x151a <puts_P+0x4e>
    14e4:	d0 e0       	ldi	r29, 0x00	; 0
    14e6:	c0 e0       	ldi	r28, 0x00	; 0
    14e8:	f8 01       	movw	r30, r16
    14ea:	84 91       	lpm	r24, Z
    14ec:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <__iob+0x2>
    14f0:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <__iob+0x3>
    14f4:	db 01       	movw	r26, r22
    14f6:	18 96       	adiw	r26, 0x08	; 8
    14f8:	ed 91       	ld	r30, X+
    14fa:	fc 91       	ld	r31, X
    14fc:	19 97       	sbiw	r26, 0x09	; 9
    14fe:	88 23       	and	r24, r24
    1500:	41 f0       	breq	.+16     	; 0x1512 <puts_P+0x46>
    1502:	09 95       	icall
    1504:	89 2b       	or	r24, r25
    1506:	11 f0       	breq	.+4      	; 0x150c <puts_P+0x40>
    1508:	df ef       	ldi	r29, 0xFF	; 255
    150a:	cf ef       	ldi	r28, 0xFF	; 255
    150c:	0f 5f       	subi	r16, 0xFF	; 255
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	eb cf       	rjmp	.-42     	; 0x14e8 <puts_P+0x1c>
    1512:	8a e0       	ldi	r24, 0x0A	; 10
    1514:	09 95       	icall
    1516:	89 2b       	or	r24, r25
    1518:	19 f0       	breq	.+6      	; 0x1520 <puts_P+0x54>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <puts_P+0x58>
    1520:	8d 2f       	mov	r24, r29
    1522:	9c 2f       	mov	r25, r28
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <vfprintf>:
    152e:	2f 92       	push	r2
    1530:	3f 92       	push	r3
    1532:	4f 92       	push	r4
    1534:	5f 92       	push	r5
    1536:	6f 92       	push	r6
    1538:	7f 92       	push	r7
    153a:	8f 92       	push	r8
    153c:	9f 92       	push	r9
    153e:	af 92       	push	r10
    1540:	bf 92       	push	r11
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	2b 97       	sbiw	r28, 0x0b	; 11
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	6c 01       	movw	r12, r24
    1564:	7b 01       	movw	r14, r22
    1566:	8a 01       	movw	r16, r20
    1568:	fc 01       	movw	r30, r24
    156a:	17 82       	std	Z+7, r1	; 0x07
    156c:	16 82       	std	Z+6, r1	; 0x06
    156e:	83 81       	ldd	r24, Z+3	; 0x03
    1570:	81 ff       	sbrs	r24, 1
    1572:	bf c1       	rjmp	.+894    	; 0x18f2 <vfprintf+0x3c4>
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	3c 01       	movw	r6, r24
    157a:	f6 01       	movw	r30, r12
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	f7 01       	movw	r30, r14
    1580:	93 fd       	sbrc	r25, 3
    1582:	85 91       	lpm	r24, Z+
    1584:	93 ff       	sbrs	r25, 3
    1586:	81 91       	ld	r24, Z+
    1588:	7f 01       	movw	r14, r30
    158a:	88 23       	and	r24, r24
    158c:	09 f4       	brne	.+2      	; 0x1590 <vfprintf+0x62>
    158e:	ad c1       	rjmp	.+858    	; 0x18ea <vfprintf+0x3bc>
    1590:	85 32       	cpi	r24, 0x25	; 37
    1592:	39 f4       	brne	.+14     	; 0x15a2 <vfprintf+0x74>
    1594:	93 fd       	sbrc	r25, 3
    1596:	85 91       	lpm	r24, Z+
    1598:	93 ff       	sbrs	r25, 3
    159a:	81 91       	ld	r24, Z+
    159c:	7f 01       	movw	r14, r30
    159e:	85 32       	cpi	r24, 0x25	; 37
    15a0:	21 f4       	brne	.+8      	; 0x15aa <vfprintf+0x7c>
    15a2:	b6 01       	movw	r22, r12
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	d6 d1       	rcall	.+940    	; 0x1954 <fputc>
    15a8:	e8 cf       	rjmp	.-48     	; 0x157a <vfprintf+0x4c>
    15aa:	91 2c       	mov	r9, r1
    15ac:	21 2c       	mov	r2, r1
    15ae:	31 2c       	mov	r3, r1
    15b0:	ff e1       	ldi	r31, 0x1F	; 31
    15b2:	f3 15       	cp	r31, r3
    15b4:	d8 f0       	brcs	.+54     	; 0x15ec <vfprintf+0xbe>
    15b6:	8b 32       	cpi	r24, 0x2B	; 43
    15b8:	79 f0       	breq	.+30     	; 0x15d8 <vfprintf+0xaa>
    15ba:	38 f4       	brcc	.+14     	; 0x15ca <vfprintf+0x9c>
    15bc:	80 32       	cpi	r24, 0x20	; 32
    15be:	79 f0       	breq	.+30     	; 0x15de <vfprintf+0xb0>
    15c0:	83 32       	cpi	r24, 0x23	; 35
    15c2:	a1 f4       	brne	.+40     	; 0x15ec <vfprintf+0xbe>
    15c4:	23 2d       	mov	r18, r3
    15c6:	20 61       	ori	r18, 0x10	; 16
    15c8:	1d c0       	rjmp	.+58     	; 0x1604 <vfprintf+0xd6>
    15ca:	8d 32       	cpi	r24, 0x2D	; 45
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <vfprintf+0xb8>
    15ce:	80 33       	cpi	r24, 0x30	; 48
    15d0:	69 f4       	brne	.+26     	; 0x15ec <vfprintf+0xbe>
    15d2:	23 2d       	mov	r18, r3
    15d4:	21 60       	ori	r18, 0x01	; 1
    15d6:	16 c0       	rjmp	.+44     	; 0x1604 <vfprintf+0xd6>
    15d8:	83 2d       	mov	r24, r3
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	38 2e       	mov	r3, r24
    15de:	e3 2d       	mov	r30, r3
    15e0:	e4 60       	ori	r30, 0x04	; 4
    15e2:	3e 2e       	mov	r3, r30
    15e4:	2a c0       	rjmp	.+84     	; 0x163a <vfprintf+0x10c>
    15e6:	f3 2d       	mov	r31, r3
    15e8:	f8 60       	ori	r31, 0x08	; 8
    15ea:	1d c0       	rjmp	.+58     	; 0x1626 <vfprintf+0xf8>
    15ec:	37 fc       	sbrc	r3, 7
    15ee:	2d c0       	rjmp	.+90     	; 0x164a <vfprintf+0x11c>
    15f0:	20 ed       	ldi	r18, 0xD0	; 208
    15f2:	28 0f       	add	r18, r24
    15f4:	2a 30       	cpi	r18, 0x0A	; 10
    15f6:	40 f0       	brcs	.+16     	; 0x1608 <vfprintf+0xda>
    15f8:	8e 32       	cpi	r24, 0x2E	; 46
    15fa:	b9 f4       	brne	.+46     	; 0x162a <vfprintf+0xfc>
    15fc:	36 fc       	sbrc	r3, 6
    15fe:	75 c1       	rjmp	.+746    	; 0x18ea <vfprintf+0x3bc>
    1600:	23 2d       	mov	r18, r3
    1602:	20 64       	ori	r18, 0x40	; 64
    1604:	32 2e       	mov	r3, r18
    1606:	19 c0       	rjmp	.+50     	; 0x163a <vfprintf+0x10c>
    1608:	36 fe       	sbrs	r3, 6
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <vfprintf+0xea>
    160c:	8a e0       	ldi	r24, 0x0A	; 10
    160e:	98 9e       	mul	r9, r24
    1610:	20 0d       	add	r18, r0
    1612:	11 24       	eor	r1, r1
    1614:	92 2e       	mov	r9, r18
    1616:	11 c0       	rjmp	.+34     	; 0x163a <vfprintf+0x10c>
    1618:	ea e0       	ldi	r30, 0x0A	; 10
    161a:	2e 9e       	mul	r2, r30
    161c:	20 0d       	add	r18, r0
    161e:	11 24       	eor	r1, r1
    1620:	22 2e       	mov	r2, r18
    1622:	f3 2d       	mov	r31, r3
    1624:	f0 62       	ori	r31, 0x20	; 32
    1626:	3f 2e       	mov	r3, r31
    1628:	08 c0       	rjmp	.+16     	; 0x163a <vfprintf+0x10c>
    162a:	8c 36       	cpi	r24, 0x6C	; 108
    162c:	21 f4       	brne	.+8      	; 0x1636 <vfprintf+0x108>
    162e:	83 2d       	mov	r24, r3
    1630:	80 68       	ori	r24, 0x80	; 128
    1632:	38 2e       	mov	r3, r24
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0x10c>
    1636:	88 36       	cpi	r24, 0x68	; 104
    1638:	41 f4       	brne	.+16     	; 0x164a <vfprintf+0x11c>
    163a:	f7 01       	movw	r30, r14
    163c:	93 fd       	sbrc	r25, 3
    163e:	85 91       	lpm	r24, Z+
    1640:	93 ff       	sbrs	r25, 3
    1642:	81 91       	ld	r24, Z+
    1644:	7f 01       	movw	r14, r30
    1646:	81 11       	cpse	r24, r1
    1648:	b3 cf       	rjmp	.-154    	; 0x15b0 <vfprintf+0x82>
    164a:	98 2f       	mov	r25, r24
    164c:	9f 7d       	andi	r25, 0xDF	; 223
    164e:	95 54       	subi	r25, 0x45	; 69
    1650:	93 30       	cpi	r25, 0x03	; 3
    1652:	28 f4       	brcc	.+10     	; 0x165e <vfprintf+0x130>
    1654:	0c 5f       	subi	r16, 0xFC	; 252
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	9f e3       	ldi	r25, 0x3F	; 63
    165a:	99 83       	std	Y+1, r25	; 0x01
    165c:	0d c0       	rjmp	.+26     	; 0x1678 <vfprintf+0x14a>
    165e:	83 36       	cpi	r24, 0x63	; 99
    1660:	31 f0       	breq	.+12     	; 0x166e <vfprintf+0x140>
    1662:	83 37       	cpi	r24, 0x73	; 115
    1664:	71 f0       	breq	.+28     	; 0x1682 <vfprintf+0x154>
    1666:	83 35       	cpi	r24, 0x53	; 83
    1668:	09 f0       	breq	.+2      	; 0x166c <vfprintf+0x13e>
    166a:	55 c0       	rjmp	.+170    	; 0x1716 <vfprintf+0x1e8>
    166c:	20 c0       	rjmp	.+64     	; 0x16ae <vfprintf+0x180>
    166e:	f8 01       	movw	r30, r16
    1670:	80 81       	ld	r24, Z
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	88 24       	eor	r8, r8
    167a:	83 94       	inc	r8
    167c:	91 2c       	mov	r9, r1
    167e:	53 01       	movw	r10, r6
    1680:	12 c0       	rjmp	.+36     	; 0x16a6 <vfprintf+0x178>
    1682:	28 01       	movw	r4, r16
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	4f 0e       	add	r4, r31
    1688:	51 1c       	adc	r5, r1
    168a:	f8 01       	movw	r30, r16
    168c:	a0 80       	ld	r10, Z
    168e:	b1 80       	ldd	r11, Z+1	; 0x01
    1690:	36 fe       	sbrs	r3, 6
    1692:	03 c0       	rjmp	.+6      	; 0x169a <vfprintf+0x16c>
    1694:	69 2d       	mov	r22, r9
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x170>
    169a:	6f ef       	ldi	r22, 0xFF	; 255
    169c:	7f ef       	ldi	r23, 0xFF	; 255
    169e:	c5 01       	movw	r24, r10
    16a0:	4e d1       	rcall	.+668    	; 0x193e <strnlen>
    16a2:	4c 01       	movw	r8, r24
    16a4:	82 01       	movw	r16, r4
    16a6:	f3 2d       	mov	r31, r3
    16a8:	ff 77       	andi	r31, 0x7F	; 127
    16aa:	3f 2e       	mov	r3, r31
    16ac:	15 c0       	rjmp	.+42     	; 0x16d8 <vfprintf+0x1aa>
    16ae:	28 01       	movw	r4, r16
    16b0:	22 e0       	ldi	r18, 0x02	; 2
    16b2:	42 0e       	add	r4, r18
    16b4:	51 1c       	adc	r5, r1
    16b6:	f8 01       	movw	r30, r16
    16b8:	a0 80       	ld	r10, Z
    16ba:	b1 80       	ldd	r11, Z+1	; 0x01
    16bc:	36 fe       	sbrs	r3, 6
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <vfprintf+0x198>
    16c0:	69 2d       	mov	r22, r9
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <vfprintf+0x19c>
    16c6:	6f ef       	ldi	r22, 0xFF	; 255
    16c8:	7f ef       	ldi	r23, 0xFF	; 255
    16ca:	c5 01       	movw	r24, r10
    16cc:	2d d1       	rcall	.+602    	; 0x1928 <strnlen_P>
    16ce:	4c 01       	movw	r8, r24
    16d0:	f3 2d       	mov	r31, r3
    16d2:	f0 68       	ori	r31, 0x80	; 128
    16d4:	3f 2e       	mov	r3, r31
    16d6:	82 01       	movw	r16, r4
    16d8:	33 fc       	sbrc	r3, 3
    16da:	19 c0       	rjmp	.+50     	; 0x170e <vfprintf+0x1e0>
    16dc:	82 2d       	mov	r24, r2
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	88 16       	cp	r8, r24
    16e2:	99 06       	cpc	r9, r25
    16e4:	a0 f4       	brcc	.+40     	; 0x170e <vfprintf+0x1e0>
    16e6:	b6 01       	movw	r22, r12
    16e8:	80 e2       	ldi	r24, 0x20	; 32
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	33 d1       	rcall	.+614    	; 0x1954 <fputc>
    16ee:	2a 94       	dec	r2
    16f0:	f5 cf       	rjmp	.-22     	; 0x16dc <vfprintf+0x1ae>
    16f2:	f5 01       	movw	r30, r10
    16f4:	37 fc       	sbrc	r3, 7
    16f6:	85 91       	lpm	r24, Z+
    16f8:	37 fe       	sbrs	r3, 7
    16fa:	81 91       	ld	r24, Z+
    16fc:	5f 01       	movw	r10, r30
    16fe:	b6 01       	movw	r22, r12
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	28 d1       	rcall	.+592    	; 0x1954 <fputc>
    1704:	21 10       	cpse	r2, r1
    1706:	2a 94       	dec	r2
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	82 1a       	sub	r8, r18
    170c:	91 08       	sbc	r9, r1
    170e:	81 14       	cp	r8, r1
    1710:	91 04       	cpc	r9, r1
    1712:	79 f7       	brne	.-34     	; 0x16f2 <vfprintf+0x1c4>
    1714:	e1 c0       	rjmp	.+450    	; 0x18d8 <vfprintf+0x3aa>
    1716:	84 36       	cpi	r24, 0x64	; 100
    1718:	11 f0       	breq	.+4      	; 0x171e <vfprintf+0x1f0>
    171a:	89 36       	cpi	r24, 0x69	; 105
    171c:	39 f5       	brne	.+78     	; 0x176c <vfprintf+0x23e>
    171e:	f8 01       	movw	r30, r16
    1720:	37 fe       	sbrs	r3, 7
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <vfprintf+0x204>
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0c 5f       	subi	r16, 0xFC	; 252
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <vfprintf+0x214>
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	07 2e       	mov	r0, r23
    1738:	00 0c       	add	r0, r0
    173a:	88 0b       	sbc	r24, r24
    173c:	99 0b       	sbc	r25, r25
    173e:	0e 5f       	subi	r16, 0xFE	; 254
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	f3 2d       	mov	r31, r3
    1744:	ff 76       	andi	r31, 0x6F	; 111
    1746:	3f 2e       	mov	r3, r31
    1748:	97 ff       	sbrs	r25, 7
    174a:	09 c0       	rjmp	.+18     	; 0x175e <vfprintf+0x230>
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	f0 68       	ori	r31, 0x80	; 128
    175c:	3f 2e       	mov	r3, r31
    175e:	2a e0       	ldi	r18, 0x0A	; 10
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	a3 01       	movw	r20, r6
    1764:	33 d1       	rcall	.+614    	; 0x19cc <__ultoa_invert>
    1766:	88 2e       	mov	r8, r24
    1768:	86 18       	sub	r8, r6
    176a:	44 c0       	rjmp	.+136    	; 0x17f4 <vfprintf+0x2c6>
    176c:	85 37       	cpi	r24, 0x75	; 117
    176e:	31 f4       	brne	.+12     	; 0x177c <vfprintf+0x24e>
    1770:	23 2d       	mov	r18, r3
    1772:	2f 7e       	andi	r18, 0xEF	; 239
    1774:	b2 2e       	mov	r11, r18
    1776:	2a e0       	ldi	r18, 0x0A	; 10
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	25 c0       	rjmp	.+74     	; 0x17c6 <vfprintf+0x298>
    177c:	93 2d       	mov	r25, r3
    177e:	99 7f       	andi	r25, 0xF9	; 249
    1780:	b9 2e       	mov	r11, r25
    1782:	8f 36       	cpi	r24, 0x6F	; 111
    1784:	c1 f0       	breq	.+48     	; 0x17b6 <vfprintf+0x288>
    1786:	18 f4       	brcc	.+6      	; 0x178e <vfprintf+0x260>
    1788:	88 35       	cpi	r24, 0x58	; 88
    178a:	79 f0       	breq	.+30     	; 0x17aa <vfprintf+0x27c>
    178c:	ae c0       	rjmp	.+348    	; 0x18ea <vfprintf+0x3bc>
    178e:	80 37       	cpi	r24, 0x70	; 112
    1790:	19 f0       	breq	.+6      	; 0x1798 <vfprintf+0x26a>
    1792:	88 37       	cpi	r24, 0x78	; 120
    1794:	21 f0       	breq	.+8      	; 0x179e <vfprintf+0x270>
    1796:	a9 c0       	rjmp	.+338    	; 0x18ea <vfprintf+0x3bc>
    1798:	e9 2f       	mov	r30, r25
    179a:	e0 61       	ori	r30, 0x10	; 16
    179c:	be 2e       	mov	r11, r30
    179e:	b4 fe       	sbrs	r11, 4
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <vfprintf+0x28e>
    17a2:	fb 2d       	mov	r31, r11
    17a4:	f4 60       	ori	r31, 0x04	; 4
    17a6:	bf 2e       	mov	r11, r31
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <vfprintf+0x28e>
    17aa:	34 fe       	sbrs	r3, 4
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <vfprintf+0x294>
    17ae:	29 2f       	mov	r18, r25
    17b0:	26 60       	ori	r18, 0x06	; 6
    17b2:	b2 2e       	mov	r11, r18
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0x294>
    17b6:	28 e0       	ldi	r18, 0x08	; 8
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <vfprintf+0x298>
    17bc:	20 e1       	ldi	r18, 0x10	; 16
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <vfprintf+0x298>
    17c2:	20 e1       	ldi	r18, 0x10	; 16
    17c4:	32 e0       	ldi	r19, 0x02	; 2
    17c6:	f8 01       	movw	r30, r16
    17c8:	b7 fe       	sbrs	r11, 7
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <vfprintf+0x2ac>
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	0c 5f       	subi	r16, 0xFC	; 252
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <vfprintf+0x2b8>
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 5f       	subi	r16, 0xFE	; 254
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	a3 01       	movw	r20, r6
    17e8:	f1 d0       	rcall	.+482    	; 0x19cc <__ultoa_invert>
    17ea:	88 2e       	mov	r8, r24
    17ec:	86 18       	sub	r8, r6
    17ee:	fb 2d       	mov	r31, r11
    17f0:	ff 77       	andi	r31, 0x7F	; 127
    17f2:	3f 2e       	mov	r3, r31
    17f4:	36 fe       	sbrs	r3, 6
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <vfprintf+0x2e4>
    17f8:	23 2d       	mov	r18, r3
    17fa:	2e 7f       	andi	r18, 0xFE	; 254
    17fc:	a2 2e       	mov	r10, r18
    17fe:	89 14       	cp	r8, r9
    1800:	58 f4       	brcc	.+22     	; 0x1818 <vfprintf+0x2ea>
    1802:	34 fe       	sbrs	r3, 4
    1804:	0b c0       	rjmp	.+22     	; 0x181c <vfprintf+0x2ee>
    1806:	32 fc       	sbrc	r3, 2
    1808:	09 c0       	rjmp	.+18     	; 0x181c <vfprintf+0x2ee>
    180a:	83 2d       	mov	r24, r3
    180c:	8e 7e       	andi	r24, 0xEE	; 238
    180e:	a8 2e       	mov	r10, r24
    1810:	05 c0       	rjmp	.+10     	; 0x181c <vfprintf+0x2ee>
    1812:	b8 2c       	mov	r11, r8
    1814:	a3 2c       	mov	r10, r3
    1816:	03 c0       	rjmp	.+6      	; 0x181e <vfprintf+0x2f0>
    1818:	b8 2c       	mov	r11, r8
    181a:	01 c0       	rjmp	.+2      	; 0x181e <vfprintf+0x2f0>
    181c:	b9 2c       	mov	r11, r9
    181e:	a4 fe       	sbrs	r10, 4
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <vfprintf+0x312>
    1822:	fe 01       	movw	r30, r28
    1824:	e8 0d       	add	r30, r8
    1826:	f1 1d       	adc	r31, r1
    1828:	80 81       	ld	r24, Z
    182a:	80 33       	cpi	r24, 0x30	; 48
    182c:	21 f4       	brne	.+8      	; 0x1836 <vfprintf+0x308>
    182e:	9a 2d       	mov	r25, r10
    1830:	99 7e       	andi	r25, 0xE9	; 233
    1832:	a9 2e       	mov	r10, r25
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x31a>
    1836:	a2 fe       	sbrs	r10, 2
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <vfprintf+0x318>
    183a:	b3 94       	inc	r11
    183c:	b3 94       	inc	r11
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <vfprintf+0x31a>
    1840:	8a 2d       	mov	r24, r10
    1842:	86 78       	andi	r24, 0x86	; 134
    1844:	09 f0       	breq	.+2      	; 0x1848 <vfprintf+0x31a>
    1846:	b3 94       	inc	r11
    1848:	a3 fc       	sbrc	r10, 3
    184a:	10 c0       	rjmp	.+32     	; 0x186c <vfprintf+0x33e>
    184c:	a0 fe       	sbrs	r10, 0
    184e:	06 c0       	rjmp	.+12     	; 0x185c <vfprintf+0x32e>
    1850:	b2 14       	cp	r11, r2
    1852:	80 f4       	brcc	.+32     	; 0x1874 <vfprintf+0x346>
    1854:	28 0c       	add	r2, r8
    1856:	92 2c       	mov	r9, r2
    1858:	9b 18       	sub	r9, r11
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <vfprintf+0x348>
    185c:	b2 14       	cp	r11, r2
    185e:	58 f4       	brcc	.+22     	; 0x1876 <vfprintf+0x348>
    1860:	b6 01       	movw	r22, r12
    1862:	80 e2       	ldi	r24, 0x20	; 32
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	76 d0       	rcall	.+236    	; 0x1954 <fputc>
    1868:	b3 94       	inc	r11
    186a:	f8 cf       	rjmp	.-16     	; 0x185c <vfprintf+0x32e>
    186c:	b2 14       	cp	r11, r2
    186e:	18 f4       	brcc	.+6      	; 0x1876 <vfprintf+0x348>
    1870:	2b 18       	sub	r2, r11
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x34a>
    1874:	98 2c       	mov	r9, r8
    1876:	21 2c       	mov	r2, r1
    1878:	a4 fe       	sbrs	r10, 4
    187a:	0f c0       	rjmp	.+30     	; 0x189a <vfprintf+0x36c>
    187c:	b6 01       	movw	r22, r12
    187e:	80 e3       	ldi	r24, 0x30	; 48
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	68 d0       	rcall	.+208    	; 0x1954 <fputc>
    1884:	a2 fe       	sbrs	r10, 2
    1886:	16 c0       	rjmp	.+44     	; 0x18b4 <vfprintf+0x386>
    1888:	a1 fc       	sbrc	r10, 1
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <vfprintf+0x364>
    188c:	88 e7       	ldi	r24, 0x78	; 120
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <vfprintf+0x368>
    1892:	88 e5       	ldi	r24, 0x58	; 88
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	b6 01       	movw	r22, r12
    1898:	0c c0       	rjmp	.+24     	; 0x18b2 <vfprintf+0x384>
    189a:	8a 2d       	mov	r24, r10
    189c:	86 78       	andi	r24, 0x86	; 134
    189e:	51 f0       	breq	.+20     	; 0x18b4 <vfprintf+0x386>
    18a0:	a1 fe       	sbrs	r10, 1
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x37a>
    18a4:	8b e2       	ldi	r24, 0x2B	; 43
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <vfprintf+0x37c>
    18a8:	80 e2       	ldi	r24, 0x20	; 32
    18aa:	a7 fc       	sbrc	r10, 7
    18ac:	8d e2       	ldi	r24, 0x2D	; 45
    18ae:	b6 01       	movw	r22, r12
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	50 d0       	rcall	.+160    	; 0x1954 <fputc>
    18b4:	89 14       	cp	r8, r9
    18b6:	30 f4       	brcc	.+12     	; 0x18c4 <vfprintf+0x396>
    18b8:	b6 01       	movw	r22, r12
    18ba:	80 e3       	ldi	r24, 0x30	; 48
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	4a d0       	rcall	.+148    	; 0x1954 <fputc>
    18c0:	9a 94       	dec	r9
    18c2:	f8 cf       	rjmp	.-16     	; 0x18b4 <vfprintf+0x386>
    18c4:	8a 94       	dec	r8
    18c6:	f3 01       	movw	r30, r6
    18c8:	e8 0d       	add	r30, r8
    18ca:	f1 1d       	adc	r31, r1
    18cc:	80 81       	ld	r24, Z
    18ce:	b6 01       	movw	r22, r12
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	40 d0       	rcall	.+128    	; 0x1954 <fputc>
    18d4:	81 10       	cpse	r8, r1
    18d6:	f6 cf       	rjmp	.-20     	; 0x18c4 <vfprintf+0x396>
    18d8:	22 20       	and	r2, r2
    18da:	09 f4       	brne	.+2      	; 0x18de <vfprintf+0x3b0>
    18dc:	4e ce       	rjmp	.-868    	; 0x157a <vfprintf+0x4c>
    18de:	b6 01       	movw	r22, r12
    18e0:	80 e2       	ldi	r24, 0x20	; 32
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	37 d0       	rcall	.+110    	; 0x1954 <fputc>
    18e6:	2a 94       	dec	r2
    18e8:	f7 cf       	rjmp	.-18     	; 0x18d8 <vfprintf+0x3aa>
    18ea:	f6 01       	movw	r30, r12
    18ec:	86 81       	ldd	r24, Z+6	; 0x06
    18ee:	97 81       	ldd	r25, Z+7	; 0x07
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x3c8>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	9f ef       	ldi	r25, 0xFF	; 255
    18f6:	2b 96       	adiw	r28, 0x0b	; 11
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	df 90       	pop	r13
    1910:	cf 90       	pop	r12
    1912:	bf 90       	pop	r11
    1914:	af 90       	pop	r10
    1916:	9f 90       	pop	r9
    1918:	8f 90       	pop	r8
    191a:	7f 90       	pop	r7
    191c:	6f 90       	pop	r6
    191e:	5f 90       	pop	r5
    1920:	4f 90       	pop	r4
    1922:	3f 90       	pop	r3
    1924:	2f 90       	pop	r2
    1926:	08 95       	ret

00001928 <strnlen_P>:
    1928:	fc 01       	movw	r30, r24
    192a:	05 90       	lpm	r0, Z+
    192c:	61 50       	subi	r22, 0x01	; 1
    192e:	70 40       	sbci	r23, 0x00	; 0
    1930:	01 10       	cpse	r0, r1
    1932:	d8 f7       	brcc	.-10     	; 0x192a <strnlen_P+0x2>
    1934:	80 95       	com	r24
    1936:	90 95       	com	r25
    1938:	8e 0f       	add	r24, r30
    193a:	9f 1f       	adc	r25, r31
    193c:	08 95       	ret

0000193e <strnlen>:
    193e:	fc 01       	movw	r30, r24
    1940:	61 50       	subi	r22, 0x01	; 1
    1942:	70 40       	sbci	r23, 0x00	; 0
    1944:	01 90       	ld	r0, Z+
    1946:	01 10       	cpse	r0, r1
    1948:	d8 f7       	brcc	.-10     	; 0x1940 <strnlen+0x2>
    194a:	80 95       	com	r24
    194c:	90 95       	com	r25
    194e:	8e 0f       	add	r24, r30
    1950:	9f 1f       	adc	r25, r31
    1952:	08 95       	ret

00001954 <fputc>:
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	fb 01       	movw	r30, r22
    195e:	23 81       	ldd	r18, Z+3	; 0x03
    1960:	21 fd       	sbrc	r18, 1
    1962:	03 c0       	rjmp	.+6      	; 0x196a <fputc+0x16>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9f ef       	ldi	r25, 0xFF	; 255
    1968:	2c c0       	rjmp	.+88     	; 0x19c2 <fputc+0x6e>
    196a:	22 ff       	sbrs	r18, 2
    196c:	16 c0       	rjmp	.+44     	; 0x199a <fputc+0x46>
    196e:	46 81       	ldd	r20, Z+6	; 0x06
    1970:	57 81       	ldd	r21, Z+7	; 0x07
    1972:	24 81       	ldd	r18, Z+4	; 0x04
    1974:	35 81       	ldd	r19, Z+5	; 0x05
    1976:	42 17       	cp	r20, r18
    1978:	53 07       	cpc	r21, r19
    197a:	44 f4       	brge	.+16     	; 0x198c <fputc+0x38>
    197c:	a0 81       	ld	r26, Z
    197e:	b1 81       	ldd	r27, Z+1	; 0x01
    1980:	9d 01       	movw	r18, r26
    1982:	2f 5f       	subi	r18, 0xFF	; 255
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	31 83       	std	Z+1, r19	; 0x01
    1988:	20 83       	st	Z, r18
    198a:	8c 93       	st	X, r24
    198c:	26 81       	ldd	r18, Z+6	; 0x06
    198e:	37 81       	ldd	r19, Z+7	; 0x07
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	37 83       	std	Z+7, r19	; 0x07
    1996:	26 83       	std	Z+6, r18	; 0x06
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <fputc+0x6e>
    199a:	8b 01       	movw	r16, r22
    199c:	ec 01       	movw	r28, r24
    199e:	fb 01       	movw	r30, r22
    19a0:	00 84       	ldd	r0, Z+8	; 0x08
    19a2:	f1 85       	ldd	r31, Z+9	; 0x09
    19a4:	e0 2d       	mov	r30, r0
    19a6:	09 95       	icall
    19a8:	89 2b       	or	r24, r25
    19aa:	e1 f6       	brne	.-72     	; 0x1964 <fputc+0x10>
    19ac:	d8 01       	movw	r26, r16
    19ae:	16 96       	adiw	r26, 0x06	; 6
    19b0:	8d 91       	ld	r24, X+
    19b2:	9c 91       	ld	r25, X
    19b4:	17 97       	sbiw	r26, 0x07	; 7
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	17 96       	adiw	r26, 0x07	; 7
    19ba:	9c 93       	st	X, r25
    19bc:	8e 93       	st	-X, r24
    19be:	16 97       	sbiw	r26, 0x06	; 6
    19c0:	ce 01       	movw	r24, r28
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	08 95       	ret

000019cc <__ultoa_invert>:
    19cc:	fa 01       	movw	r30, r20
    19ce:	aa 27       	eor	r26, r26
    19d0:	28 30       	cpi	r18, 0x08	; 8
    19d2:	51 f1       	breq	.+84     	; 0x1a28 <__ultoa_invert+0x5c>
    19d4:	20 31       	cpi	r18, 0x10	; 16
    19d6:	81 f1       	breq	.+96     	; 0x1a38 <__ultoa_invert+0x6c>
    19d8:	e8 94       	clt
    19da:	6f 93       	push	r22
    19dc:	6e 7f       	andi	r22, 0xFE	; 254
    19de:	6e 5f       	subi	r22, 0xFE	; 254
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	8f 4f       	sbci	r24, 0xFF	; 255
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	af 4f       	sbci	r26, 0xFF	; 255
    19e8:	b1 e0       	ldi	r27, 0x01	; 1
    19ea:	3e d0       	rcall	.+124    	; 0x1a68 <__ultoa_invert+0x9c>
    19ec:	b4 e0       	ldi	r27, 0x04	; 4
    19ee:	3c d0       	rcall	.+120    	; 0x1a68 <__ultoa_invert+0x9c>
    19f0:	67 0f       	add	r22, r23
    19f2:	78 1f       	adc	r23, r24
    19f4:	89 1f       	adc	r24, r25
    19f6:	9a 1f       	adc	r25, r26
    19f8:	a1 1d       	adc	r26, r1
    19fa:	68 0f       	add	r22, r24
    19fc:	79 1f       	adc	r23, r25
    19fe:	8a 1f       	adc	r24, r26
    1a00:	91 1d       	adc	r25, r1
    1a02:	a1 1d       	adc	r26, r1
    1a04:	6a 0f       	add	r22, r26
    1a06:	71 1d       	adc	r23, r1
    1a08:	81 1d       	adc	r24, r1
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	a1 1d       	adc	r26, r1
    1a0e:	20 d0       	rcall	.+64     	; 0x1a50 <__ultoa_invert+0x84>
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <__ultoa_invert+0x48>
    1a12:	68 94       	set
    1a14:	3f 91       	pop	r19
    1a16:	2a e0       	ldi	r18, 0x0A	; 10
    1a18:	26 9f       	mul	r18, r22
    1a1a:	11 24       	eor	r1, r1
    1a1c:	30 19       	sub	r19, r0
    1a1e:	30 5d       	subi	r19, 0xD0	; 208
    1a20:	31 93       	st	Z+, r19
    1a22:	de f6       	brtc	.-74     	; 0x19da <__ultoa_invert+0xe>
    1a24:	cf 01       	movw	r24, r30
    1a26:	08 95       	ret
    1a28:	46 2f       	mov	r20, r22
    1a2a:	47 70       	andi	r20, 0x07	; 7
    1a2c:	40 5d       	subi	r20, 0xD0	; 208
    1a2e:	41 93       	st	Z+, r20
    1a30:	b3 e0       	ldi	r27, 0x03	; 3
    1a32:	0f d0       	rcall	.+30     	; 0x1a52 <__ultoa_invert+0x86>
    1a34:	c9 f7       	brne	.-14     	; 0x1a28 <__ultoa_invert+0x5c>
    1a36:	f6 cf       	rjmp	.-20     	; 0x1a24 <__ultoa_invert+0x58>
    1a38:	46 2f       	mov	r20, r22
    1a3a:	4f 70       	andi	r20, 0x0F	; 15
    1a3c:	40 5d       	subi	r20, 0xD0	; 208
    1a3e:	4a 33       	cpi	r20, 0x3A	; 58
    1a40:	18 f0       	brcs	.+6      	; 0x1a48 <__ultoa_invert+0x7c>
    1a42:	49 5d       	subi	r20, 0xD9	; 217
    1a44:	31 fd       	sbrc	r19, 1
    1a46:	40 52       	subi	r20, 0x20	; 32
    1a48:	41 93       	st	Z+, r20
    1a4a:	02 d0       	rcall	.+4      	; 0x1a50 <__ultoa_invert+0x84>
    1a4c:	a9 f7       	brne	.-22     	; 0x1a38 <__ultoa_invert+0x6c>
    1a4e:	ea cf       	rjmp	.-44     	; 0x1a24 <__ultoa_invert+0x58>
    1a50:	b4 e0       	ldi	r27, 0x04	; 4
    1a52:	a6 95       	lsr	r26
    1a54:	97 95       	ror	r25
    1a56:	87 95       	ror	r24
    1a58:	77 95       	ror	r23
    1a5a:	67 95       	ror	r22
    1a5c:	ba 95       	dec	r27
    1a5e:	c9 f7       	brne	.-14     	; 0x1a52 <__ultoa_invert+0x86>
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	61 05       	cpc	r22, r1
    1a64:	71 05       	cpc	r23, r1
    1a66:	08 95       	ret
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	0a 2e       	mov	r0, r26
    1a6e:	06 94       	lsr	r0
    1a70:	57 95       	ror	r21
    1a72:	47 95       	ror	r20
    1a74:	37 95       	ror	r19
    1a76:	27 95       	ror	r18
    1a78:	ba 95       	dec	r27
    1a7a:	c9 f7       	brne	.-14     	; 0x1a6e <__ultoa_invert+0xa2>
    1a7c:	62 0f       	add	r22, r18
    1a7e:	73 1f       	adc	r23, r19
    1a80:	84 1f       	adc	r24, r20
    1a82:	95 1f       	adc	r25, r21
    1a84:	a0 1d       	adc	r26, r0
    1a86:	08 95       	ret

00001a88 <_exit>:
    1a88:	f8 94       	cli

00001a8a <__stop_program>:
    1a8a:	ff cf       	rjmp	.-2      	; 0x1a8a <__stop_program>
