
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002276  0000230a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  0000231c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006c6e  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002661  00000000  00000000  00009346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003742  00000000  00000000  0000b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  0000f0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002997  00000000  00000000  0000fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041cf  00000000  00000000  000125e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  000167b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6d c1       	rjmp	.+730    	; 0x2dc <__ctors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c1       	rjmp	.+774    	; 0x318 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c1       	rjmp	.+762    	; 0x318 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c7       	rjmp	.+3774   	; 0xee8 <__vector_10>
      2a:	00 00       	nop
      2c:	75 c1       	rjmp	.+746    	; 0x318 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c1       	rjmp	.+726    	; 0x318 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	67 c1       	rjmp	.+718    	; 0x318 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	65 c1       	rjmp	.+714    	; 0x318 <__bad_interrupt>
      4e:	00 00       	nop
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
      66:	00 00       	nop
      68:	57 c1       	rjmp	.+686    	; 0x318 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	55 c1       	rjmp	.+682    	; 0x318 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c1       	rjmp	.+678    	; 0x318 <__bad_interrupt>
      72:	00 00       	nop
      74:	51 c1       	rjmp	.+674    	; 0x318 <__bad_interrupt>
      76:	00 00       	nop
      78:	4f c1       	rjmp	.+670    	; 0x318 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c1       	rjmp	.+666    	; 0x318 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c1       	rjmp	.+662    	; 0x318 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c1       	rjmp	.+658    	; 0x318 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c1       	rjmp	.+654    	; 0x318 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 c1       	rjmp	.+650    	; 0x318 <__bad_interrupt>
      8e:	00 00       	nop
      90:	43 c1       	rjmp	.+646    	; 0x318 <__bad_interrupt>
      92:	00 00       	nop
      94:	41 c1       	rjmp	.+642    	; 0x318 <__bad_interrupt>
      96:	00 00       	nop
      98:	5b 05       	cpc	r21, r11
      9a:	4c 06       	cpc	r4, r28
      9c:	79 05       	cpc	r23, r9
      9e:	83 05       	cpc	r24, r3
      a0:	ae 05       	cpc	r26, r14
      a2:	d6 05       	cpc	r29, r6
      a4:	e1 05       	cpc	r30, r1
      a6:	f2 05       	cpc	r31, r2
      a8:	0e 06       	cpc	r0, r30
      aa:	35 06       	cpc	r3, r21

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4536>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4531>:
     131:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     141:	2e 0d 0a 00                                         ....

00000145 <__c.4529>:
     145:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     155:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000015f <__c.4527>:
     15f:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4d 6f 75 73     Not a valid Mous
     16f:	65 2e 1b 5b 33 37 6d 00                             e..[37m.

00000177 <__c.4525>:
     177:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     187:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000192 <__c.4523>:
     192:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     1a2:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1b2:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001bb <__c.4521>:
     1bb:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1cb:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1db:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1eb:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1fb:	37 6d 00                                            7m.

000001fe <__c.4519>:
     1fe:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     20e:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000218 <__c.4517>:
     218:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     228:	69 63 65 2e 0d 0a 00                                ice....

0000022f <__c.4515>:
     22f:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     23f:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     24f:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000259 <__c.4512>:
     259:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     269:	61 74 61 2e 0d 0a 00                                ata....

00000270 <__c.4507>:
     270:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     280:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000028f <__c.4502>:
     28f:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     29f:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002ac <__c.4493>:
     2ac:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 50     .[36mMouse HID P
     2bc:	61 72 73 65 72 20 48 6f 73 74 20 44 65 6d 6f 20     arser Host Demo 
     2cc:	72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00     running....[37m.

000002dc <__ctors_end>:
     2dc:	11 24       	eor	r1, r1
     2de:	1f be       	out	0x3f, r1	; 63
     2e0:	cf ef       	ldi	r28, 0xFF	; 255
     2e2:	d0 e2       	ldi	r29, 0x20	; 32
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	cd bf       	out	0x3d, r28	; 61

000002e8 <__do_copy_data>:
     2e8:	11 e0       	ldi	r17, 0x01	; 1
     2ea:	a0 e0       	ldi	r26, 0x00	; 0
     2ec:	b1 e0       	ldi	r27, 0x01	; 1
     2ee:	e6 e7       	ldi	r30, 0x76	; 118
     2f0:	f2 e2       	ldi	r31, 0x22	; 34
     2f2:	00 e0       	ldi	r16, 0x00	; 0
     2f4:	0b bf       	out	0x3b, r16	; 59
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <__do_copy_data+0x14>
     2f8:	07 90       	elpm	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	a2 31       	cpi	r26, 0x12	; 18
     2fe:	b1 07       	cpc	r27, r17
     300:	d9 f7       	brne	.-10     	; 0x2f8 <__do_copy_data+0x10>

00000302 <__do_clear_bss>:
     302:	25 e0       	ldi	r18, 0x05	; 5
     304:	a2 e1       	ldi	r26, 0x12	; 18
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	01 c0       	rjmp	.+2      	; 0x30c <.do_clear_bss_start>

0000030a <.do_clear_bss_loop>:
     30a:	1d 92       	st	X+, r1

0000030c <.do_clear_bss_start>:
     30c:	af 30       	cpi	r26, 0x0F	; 15
     30e:	b2 07       	cpc	r27, r18
     310:	e1 f7       	brne	.-8      	; 0x30a <.do_clear_bss_loop>
     312:	e1 d1       	rcall	.+962    	; 0x6d6 <main>
     314:	0c 94 39 11 	jmp	0x2272	; 0x2272 <_exit>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     31a:	9b b1       	in	r25, 0x0b	; 11
     31c:	9f 70       	andi	r25, 0x0F	; 15
     31e:	89 2b       	or	r24, r25
     320:	8b b9       	out	0x0b, r24	; 11
     322:	08 95       	ret

00000324 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     324:	84 b7       	in	r24, 0x34	; 52
     326:	87 7f       	andi	r24, 0xF7	; 247
     328:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	a8 95       	wdr
     330:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     334:	88 61       	ori	r24, 0x18	; 24
     336:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     33a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     33e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	80 e8       	ldi	r24, 0x80	; 128
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     34c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     350:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     352:	83 e3       	ldi	r24, 0x33	; 51
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     35a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     35e:	86 e0       	ldi	r24, 0x06	; 6
     360:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     364:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     368:	88 e1       	ldi	r24, 0x18	; 24
     36a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     36e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     370:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     372:	8a b1       	in	r24, 0x0a	; 10
     374:	80 6f       	ori	r24, 0xF0	; 240
     376:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     378:	8b b1       	in	r24, 0x0b	; 11
     37a:	8f 70       	andi	r24, 0x0F	; 15
     37c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     37e:	9e d5       	rcall	.+2876   	; 0xebc <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     380:	a9 e0       	ldi	r26, 0x09	; 9
     382:	b5 e0       	ldi	r27, 0x05	; 5
     384:	eb ef       	ldi	r30, 0xFB	; 251
     386:	f4 e0       	ldi	r31, 0x04	; 4
     388:	11 96       	adiw	r26, 0x01	; 1
     38a:	fc 93       	st	X, r31
     38c:	ee 93       	st	-X, r30
					stdout = Stream;
     38e:	13 96       	adiw	r26, 0x03	; 3
     390:	fc 93       	st	X, r31
     392:	ee 93       	st	-X, r30
     394:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     396:	8e e0       	ldi	r24, 0x0E	; 14
     398:	df 01       	movw	r26, r30
     39a:	1d 92       	st	X+, r1
     39c:	8a 95       	dec	r24
     39e:	e9 f7       	brne	.-6      	; 0x39a <SetupHardware+0x76>
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	83 83       	std	Z+3, r24	; 0x03
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	9e e0       	ldi	r25, 0x0E	; 14
     3a8:	91 87       	std	Z+9, r25	; 0x09
     3aa:	80 87       	std	Z+8, r24	; 0x08
     3ac:	89 e1       	ldi	r24, 0x19	; 25
     3ae:	9e e0       	ldi	r25, 0x0E	; 14
     3b0:	93 87       	std	Z+11, r25	; 0x0b
     3b2:	82 87       	std	Z+10, r24	; 0x0a
     3b4:	08 95       	ret

000003b6 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3b6:	8f e8       	ldi	r24, 0x8F	; 143
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3be:	80 ea       	ldi	r24, 0xA0	; 160
     3c0:	ac cf       	rjmp	.-168    	; 0x31a <LEDs_SetAllLEDs>

000003c2 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3c2:	80 e7       	ldi	r24, 0x70	; 112
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	a6 cf       	rjmp	.-180    	; 0x31a <LEDs_SetAllLEDs>

000003ce <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3ce:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     3d0:	89 e5       	ldi	r24, 0x59	; 89
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3d8:	a8 d1       	rcall	.+848    	; 0x72a <ProcessConfigurationDescriptor>
     3da:	c8 2f       	mov	r28, r24
     3dc:	88 23       	and	r24, r24
     3de:	b9 f0       	breq	.+46     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		if (ErrorCode == ControlError)
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	19 f4       	brne	.+6      	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3e4:	8f e2       	ldi	r24, 0x2F	; 47
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3ea:	88 e1       	ldi	r24, 0x18	; 24
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3f2:	1f 92       	push	r1
     3f4:	cf 93       	push	r28
     3f6:	8e ef       	ldi	r24, 0xFE	; 254
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	80 e9       	ldi	r24, 0x90	; 144
     40c:	41 c0       	rjmp	.+130    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 1c 0a 	call	0x1438	; 0x1438 <USB_Host_SetDeviceConfiguration>
     414:	88 23       	and	r24, r24
     416:	29 f0       	breq	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     418:	1f 92       	push	r1
     41a:	8f 93       	push	r24
     41c:	8b eb       	ldi	r24, 0xBB	; 187
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	ec cf       	rjmp	.-40     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     422:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <HIDReportSize+0x1>
     426:	8f 93       	push	r24
     428:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <HIDReportSize>
     42c:	8f 93       	push	r24
     42e:	82 e9       	ldi	r24, 0x92	; 146
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     43a:	16 d2       	rcall	.+1068   	; 0x868 <GetHIDReportData>
     43c:	c8 2f       	mov	r28, r24
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	88 23       	and	r24, r24
     448:	f1 f0       	breq	.+60     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     44a:	87 e7       	ldi	r24, 0x77	; 119
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     452:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <HIDReportInfo>
     456:	81 11       	cpse	r24, r1
     458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			puts_P(PSTR("Not a valid Mouse." ESC_FG_WHITE));
     45a:	8f e5       	ldi	r24, 0x5F	; 95
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>
     462:	0c c0       	rjmp	.+24     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     464:	1f 92       	push	r1
     466:	cf 93       	push	r28
     468:	85 e4       	ldi	r24, 0x45	; 69
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <printf_P>
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     47a:	0f 90       	pop	r0
     47c:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     47e:	4d df       	rcall	.-358    	; 0x31a <LEDs_SetAllLEDs>
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     480:	80 e0       	ldi	r24, 0x00	; 0
			puts_P(PSTR("Not a valid Mouse." ESC_FG_WHITE));
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     482:	cf 91       	pop	r28
     484:	d9 c7       	rjmp	.+4018   	; 0x1438 <USB_Host_SetDeviceConfiguration>
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     486:	81 e3       	ldi	r24, 0x31	; 49
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     48e:	80 e6       	ldi	r24, 0x60	; 96
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     490:	cf 91       	pop	r28
     492:	43 cf       	rjmp	.-378    	; 0x31a <LEDs_SetAllLEDs>

00000494 <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     494:	c8 2f       	mov	r28, r24
	USB_Disable();
     496:	aa d4       	rcall	.+2388   	; 0xdec <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     498:	1f 92       	push	r1
     49a:	cf 93       	push	r28
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4a8:	80 e9       	ldi	r24, 0x90	; 144
     4aa:	37 df       	rcall	.-402    	; 0x31a <LEDs_SetAllLEDs>
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <EVENT_USB_Host_HostError+0x20>

000004b6 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4b6:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <USB_HostState>
     4ba:	1f 92       	push	r1
     4bc:	9f 93       	push	r25
     4be:	1f 92       	push	r1
     4c0:	6f 93       	push	r22
     4c2:	1f 92       	push	r1
     4c4:	8f 93       	push	r24
     4c6:	8c ea       	ldi	r24, 0xAC	; 172
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4d2:	8d b7       	in	r24, 0x3d	; 61
     4d4:	9e b7       	in	r25, 0x3e	; 62
     4d6:	08 96       	adiw	r24, 0x08	; 8
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	9e bf       	out	0x3e, r25	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	8d bf       	out	0x3d, r24	; 61
     4e2:	80 e9       	ldi	r24, 0x90	; 144
     4e4:	1a cf       	rjmp	.-460    	; 0x31a <LEDs_SetAllLEDs>

000004e6 <ProcessMouseReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	7c 01       	movw	r14, r24
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4fa:	00 e0       	ldi	r16, 0x00	; 0
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;
     4fc:	10 e0       	ldi	r17, 0x00	; 0

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     4fe:	8a e2       	ldi	r24, 0x2A	; 42
     500:	b8 2e       	mov	r11, r24

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     502:	90 e1       	ldi	r25, 0x10	; 16
     504:	c9 2e       	mov	r12, r25
     506:	d1 2c       	mov	r13, r1
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     508:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <HIDReportInfo>
     50c:	08 17       	cp	r16, r24
     50e:	08 f0       	brcs	.+2      	; 0x512 <ProcessMouseReport+0x2c>
     510:	84 c0       	rjmp	.+264    	; 0x61a <ProcessMouseReport+0x134>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     512:	20 2f       	mov	r18, r16
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	b2 9e       	mul	r11, r18
     518:	e0 01       	movw	r28, r0
     51a:	b3 9e       	mul	r11, r19
     51c:	d0 0d       	add	r29, r0
     51e:	11 24       	eor	r1, r1
     520:	be 01       	movw	r22, r28
     522:	6a 5e       	subi	r22, 0xEA	; 234
     524:	7e 4f       	sbci	r23, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     526:	cb 5e       	subi	r28, 0xEB	; 235
     528:	de 4f       	sbci	r29, 0xFE	; 254
     52a:	8a 85       	ldd	r24, Y+10	; 0x0a
     52c:	9b 85       	ldd	r25, Y+11	; 0x0b
     52e:	89 30       	cpi	r24, 0x09	; 9
     530:	91 05       	cpc	r25, r1
     532:	a1 f4       	brne	.+40     	; 0x55c <ProcessMouseReport+0x76>
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	81 11       	cpse	r24, r1
     538:	6e c0       	rjmp	.+220    	; 0x616 <ProcessMouseReport+0x130>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the mouse button value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     53a:	c7 01       	movw	r24, r14
     53c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     540:	88 23       	and	r24, r24
     542:	09 f4       	brne	.+2      	; 0x546 <ProcessMouseReport+0x60>
     544:	68 c0       	rjmp	.+208    	; 0x616 <ProcessMouseReport+0x130>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     546:	8b a1       	ldd	r24, Y+35	; 0x23
     548:	9c a1       	ldd	r25, Y+36	; 0x24
     54a:	ad a1       	ldd	r26, Y+37	; 0x25
     54c:	be a1       	ldd	r27, Y+38	; 0x26
     54e:	89 2b       	or	r24, r25
     550:	8a 2b       	or	r24, r26
     552:	8b 2b       	or	r24, r27
     554:	09 f4       	brne	.+2      	; 0x558 <ProcessMouseReport+0x72>
     556:	5f c0       	rjmp	.+190    	; 0x616 <ProcessMouseReport+0x130>
			  LEDMask = LEDS_ALL_LEDS;
     558:	10 ef       	ldi	r17, 0xF0	; 240
     55a:	5d c0       	rjmp	.+186    	; 0x616 <ProcessMouseReport+0x130>
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	09 f0       	breq	.+2      	; 0x562 <ProcessMouseReport+0x7c>
     560:	5a c0       	rjmp	.+180    	; 0x616 <ProcessMouseReport+0x130>
				 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     562:	8c 85       	ldd	r24, Y+12	; 0x0c
     564:	9d 85       	ldd	r25, Y+13	; 0x0d

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     566:	88 33       	cpi	r24, 0x38	; 56
     568:	91 05       	cpc	r25, r1
     56a:	e9 f4       	brne	.+58     	; 0x5a6 <ProcessMouseReport+0xc0>
				 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     56c:	4b 81       	ldd	r20, Y+3	; 0x03
     56e:	41 11       	cpse	r20, r1
     570:	1a c0       	rjmp	.+52     	; 0x5a6 <ProcessMouseReport+0xc0>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse wheel value if it is contained within the current
			 * report, if not, skip to the next item in the parser list
			 */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     572:	c7 01       	movw	r24, r14
     574:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <USB_GetHIDReportItemInfo>
     578:	88 23       	and	r24, r24
     57a:	09 f4       	brne	.+2      	; 0x57e <ProcessMouseReport+0x98>
     57c:	4c c0       	rjmp	.+152    	; 0x616 <ProcessMouseReport+0x130>
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     57e:	89 85       	ldd	r24, Y+9	; 0x09
     580:	96 01       	movw	r18, r12
     582:	28 1b       	sub	r18, r24
     584:	31 09       	sbc	r19, r1
     586:	8b a1       	ldd	r24, Y+35	; 0x23
     588:	9c a1       	ldd	r25, Y+36	; 0x24
     58a:	ad a1       	ldd	r26, Y+37	; 0x25
     58c:	be a1       	ldd	r27, Y+38	; 0x26
     58e:	04 c0       	rjmp	.+8      	; 0x598 <ProcessMouseReport+0xb2>
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 1f       	adc	r26, r26
     596:	bb 1f       	adc	r27, r27
     598:	2a 95       	dec	r18
     59a:	d2 f7       	brpl	.-12     	; 0x590 <ProcessMouseReport+0xaa>

			if (WheelDelta)
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	d9 f1       	breq	.+118    	; 0x616 <ProcessMouseReport+0x130>
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     5a0:	cc f5       	brge	.+114    	; 0x614 <ProcessMouseReport+0x12e>
     5a2:	10 e7       	ldi	r17, 0x70	; 112
     5a4:	38 c0       	rjmp	.+112    	; 0x616 <ProcessMouseReport+0x130>
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5a6:	c0 97       	sbiw	r24, 0x30	; 48
     5a8:	02 97       	sbiw	r24, 0x02	; 2
     5aa:	a8 f5       	brcc	.+106    	; 0x616 <ProcessMouseReport+0x130>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
     5ac:	b2 9e       	mul	r11, r18
     5ae:	e0 01       	movw	r28, r0
     5b0:	b3 9e       	mul	r11, r19
     5b2:	d0 0d       	add	r29, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	cb 5e       	subi	r28, 0xEB	; 235
     5b8:	de 4f       	sbci	r29, 0xFE	; 254
			if (WheelDelta)
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	81 11       	cpse	r24, r1
     5be:	2b c0       	rjmp	.+86     	; 0x616 <ProcessMouseReport+0x130>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse relative position value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     5c0:	c7 01       	movw	r24, r14
     5c2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     5c6:	88 23       	and	r24, r24
     5c8:	31 f1       	breq	.+76     	; 0x616 <ProcessMouseReport+0x130>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     5ca:	89 85       	ldd	r24, Y+9	; 0x09
     5cc:	96 01       	movw	r18, r12
     5ce:	28 1b       	sub	r18, r24
     5d0:	31 09       	sbc	r19, r1
     5d2:	8b a1       	ldd	r24, Y+35	; 0x23
     5d4:	9c a1       	ldd	r25, Y+36	; 0x24
     5d6:	ad a1       	ldd	r26, Y+37	; 0x25
     5d8:	be a1       	ldd	r27, Y+38	; 0x26
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <ProcessMouseReport+0xfe>
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	aa 1f       	adc	r26, r26
     5e2:	bb 1f       	adc	r27, r27
     5e4:	2a 95       	dec	r18
     5e6:	d2 f7       	brpl	.-12     	; 0x5dc <ProcessMouseReport+0xf6>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     5e8:	00 97       	sbiw	r24, 0x00	; 0
     5ea:	a9 f0       	breq	.+42     	; 0x616 <ProcessMouseReport+0x130>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     5ec:	2c 85       	ldd	r18, Y+12	; 0x0c
     5ee:	3d 85       	ldd	r19, Y+13	; 0x0d
     5f0:	20 33       	cpi	r18, 0x30	; 48
     5f2:	31 05       	cpc	r19, r1
     5f4:	39 f4       	brne	.+14     	; 0x604 <ProcessMouseReport+0x11e>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     5f6:	18 16       	cp	r1, r24
     5f8:	19 06       	cpc	r1, r25
     5fa:	14 f0       	brlt	.+4      	; 0x600 <ProcessMouseReport+0x11a>
     5fc:	80 e2       	ldi	r24, 0x20	; 32
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <ProcessMouseReport+0x12a>
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	06 c0       	rjmp	.+12     	; 0x610 <ProcessMouseReport+0x12a>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     604:	18 16       	cp	r1, r24
     606:	19 06       	cpc	r1, r25
     608:	14 f0       	brlt	.+4      	; 0x60e <ProcessMouseReport+0x128>
     60a:	80 e4       	ldi	r24, 0x40	; 64
     60c:	01 c0       	rjmp	.+2      	; 0x610 <ProcessMouseReport+0x12a>
     60e:	80 e8       	ldi	r24, 0x80	; 128
     610:	18 2b       	or	r17, r24
     612:	01 c0       	rjmp	.+2      	; 0x616 <ProcessMouseReport+0x130>
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

			if (WheelDelta)
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     614:	10 eb       	ldi	r17, 0xB0	; 176
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     616:	0f 5f       	subi	r16, 0xFF	; 255
     618:	77 cf       	rjmp	.-274    	; 0x508 <ProcessMouseReport+0x22>
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     61a:	81 2f       	mov	r24, r17
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	bf 90       	pop	r11
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     62e:	75 ce       	rjmp	.-790    	; 0x31a <LEDs_SetAllLEDs>

00000630 <MouseHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     640:	0d b7       	in	r16, 0x3d	; 61
     642:	1e b7       	in	r17, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     644:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <USB_HostState>
     648:	8b 30       	cpi	r24, 0x0B	; 11
     64a:	c9 f5       	brne	.+114    	; 0x6be <MouseHost_Task+0x8e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     652:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     656:	8f 7b       	andi	r24, 0xBF	; 191
     658:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     65c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	/* Select and unfreeze mouse data pipe */
	Pipe_SelectPipe(MOUSE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     660:	80 ff       	sbrs	r24, 0
     662:	28 c0       	rjmp	.+80     	; 0x6b4 <MouseHost_Task+0x84>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     664:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		/* Check if data has been received from the attached mouse */
		if (Pipe_IsReadWriteAllowed())
     668:	85 ff       	sbrs	r24, 5
     66a:	1f c0       	rjmp	.+62     	; 0x6aa <MouseHost_Task+0x7a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     66c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     670:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		{
			/* Create buffer big enough for the report */
			uint8_t MouseReport[Pipe_BytesInPipe()];
     674:	2d b7       	in	r18, 0x3d	; 61
     676:	3e b7       	in	r19, 0x3e	; 62
     678:	28 1b       	sub	r18, r24
     67a:	39 0b       	sbc	r19, r25
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	3e bf       	out	0x3e, r19	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	2d bf       	out	0x3d, r18	; 61
     686:	8d b7       	in	r24, 0x3d	; 61
     688:	9e b7       	in	r25, 0x3e	; 62
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	7c 01       	movw	r14, r24
     68e:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     692:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

			/* Load in the mouse report */
			Pipe_Read_Stream_LE(MouseReport, Pipe_BytesInPipe(), NULL);
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	b9 d4       	rcall	.+2418   	; 0x100e <Pipe_Read_Stream_LE>

			/* Process the read in mouse report from the device */
			ProcessMouseReport(MouseReport);
     69c:	c7 01       	movw	r24, r14
     69e:	23 df       	rcall	.-442    	; 0x4e6 <ProcessMouseReport>
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	1e bf       	out	0x3e, r17	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	0d bf       	out	0x3d, r16	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     6aa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6ae:	8e 77       	andi	r24, 0x7E	; 126
     6b0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     6b4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     6b8:	80 64       	ori	r24, 0x40	; 64
     6ba:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	1e bf       	out	0x3e, r17	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0d bf       	out	0x3d, r16	; 61
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	08 95       	ret

000006d6 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6d6:	26 de       	rcall	.-948    	; 0x324 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     6d8:	8c ea       	ldi	r24, 0xAC	; 172
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     6e0:	80 e1       	ldi	r24, 0x10	; 16
     6e2:	1b de       	rcall	.-970    	; 0x31a <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		MouseHost_Task();
     6e4:	78 94       	sei
     6e6:	a4 df       	rcall	.-184    	; 0x630 <MouseHost_Task>

		USB_USBTask();
     6e8:	ce d6       	rcall	.+3484   	; 0x1486 <USB_USBTask>
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <main+0x10>

000006ec <DComp_NextMouseInterface>:
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6ec:	fc 01       	movw	r30, r24
     6ee:	21 81       	ldd	r18, Z+1	; 0x01
     6f0:	24 30       	cpi	r18, 0x04	; 4
     6f2:	29 f4       	brne	.+10     	; 0x6fe <DComp_NextMouseInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     6f4:	85 81       	ldd	r24, Z+5	; 0x05
     6f6:	83 30       	cpi	r24, 0x03	; 3
     6f8:	11 f4       	brne	.+4      	; 0x6fe <DComp_NextMouseInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6fe:	82 e0       	ldi	r24, 0x02	; 2
}
     700:	08 95       	ret

00000702 <DComp_NextMouseInterfaceDataEndpoint>:
 */
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     702:	fc 01       	movw	r30, r24
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	21 f0       	breq	.+8      	; 0x712 <DComp_NextMouseInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     70a:	84 30       	cpi	r24, 0x04	; 4
     70c:	21 f0       	breq	.+8      	; 0x716 <DComp_NextMouseInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	08 95       	ret
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
     716:	81 e0       	ldi	r24, 0x01	; 1
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     718:	08 95       	ret

0000071a <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     71a:	fc 01       	movw	r30, r24
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	81 32       	cpi	r24, 0x21	; 33
     720:	11 f0       	breq	.+4      	; 0x726 <DComp_NextHID+0xc>
	  return DESCRIPTOR_SEARCH_Found;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	08 95       	ret
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
     726:	80 e0       	ldi	r24, 0x00	; 0
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     728:	08 95       	ret

0000072a <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     72a:	af 92       	push	r10
     72c:	bf 92       	push	r11
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	c4 50       	subi	r28, 0x04	; 4
     744:	d2 40       	sbci	r29, 0x02	; 2
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     750:	ae 01       	movw	r20, r28
     752:	4f 5f       	subi	r20, 0xFF	; 255
     754:	5f 4f       	sbci	r21, 0xFF	; 255
     756:	cd 5f       	subi	r28, 0xFD	; 253
     758:	dd 4f       	sbci	r29, 0xFD	; 253
     75a:	59 83       	std	Y+1, r21	; 0x01
     75c:	48 83       	st	Y, r20
     75e:	c3 50       	subi	r28, 0x03	; 3
     760:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	32 e0       	ldi	r19, 0x02	; 2
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7d 4f       	sbci	r23, 0xFD	; 253
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	bc d4       	rcall	.+2424   	; 0x10e8 <USB_Host_GetDeviceConfigDescriptor>
     770:	85 30       	cpi	r24, 0x05	; 5
     772:	09 f4       	brne	.+2      	; 0x776 <ProcessConfigurationDescriptor+0x4c>
     774:	64 c0       	rjmp	.+200    	; 0x83e <ProcessConfigurationDescriptor+0x114>
     776:	86 30       	cpi	r24, 0x06	; 6
     778:	39 f0       	breq	.+14     	; 0x788 <ProcessConfigurationDescriptor+0x5e>
     77a:	81 11       	cpse	r24, r1
     77c:	08 c0       	rjmp	.+16     	; 0x78e <ProcessConfigurationDescriptor+0x64>
     77e:	a1 2c       	mov	r10, r1
     780:	b1 2c       	mov	r11, r1
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	10 e0       	ldi	r17, 0x00	; 0
     786:	34 c0       	rjmp	.+104    	; 0x7f0 <ProcessConfigurationDescriptor+0xc6>
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     788:	23 e0       	ldi	r18, 0x03	; 3
     78a:	f2 2e       	mov	r15, r18
     78c:	5a c0       	rjmp	.+180    	; 0x842 <ProcessConfigurationDescriptor+0x118>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     78e:	ff 24       	eor	r15, r15
     790:	f3 94       	inc	r15
     792:	57 c0       	rjmp	.+174    	; 0x842 <ProcessConfigurationDescriptor+0x118>

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     794:	41 e8       	ldi	r20, 0x81	; 129
     796:	53 e0       	ldi	r21, 0x03	; 3
     798:	be 01       	movw	r22, r28
     79a:	6d 5f       	subi	r22, 0xFD	; 253
     79c:	7d 4f       	sbci	r23, 0xFD	; 253
     79e:	ce 01       	movw	r24, r28
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	9d 4f       	sbci	r25, 0xFD	; 253
     7a4:	fa d4       	rcall	.+2548   	; 0x119a <USB_GetNextDescriptorComp>
     7a6:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7a8:	88 23       	and	r24, r24
     7aa:	49 f1       	breq	.+82     	; 0x7fe <ProcessConfigurationDescriptor+0xd4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7ac:	46 e7       	ldi	r20, 0x76	; 118
     7ae:	53 e0       	ldi	r21, 0x03	; 3
     7b0:	be 01       	movw	r22, r28
     7b2:	6d 5f       	subi	r22, 0xFD	; 253
     7b4:	7d 4f       	sbci	r23, 0xFD	; 253
     7b6:	ce 01       	movw	r24, r28
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	9d 4f       	sbci	r25, 0xFD	; 253
     7bc:	ee d4       	rcall	.+2524   	; 0x119a <USB_GetNextDescriptorComp>
     7be:	81 11       	cpse	r24, r1
     7c0:	1b c0       	rjmp	.+54     	; 0x7f8 <ProcessConfigurationDescriptor+0xce>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7c2:	cd 5f       	subi	r28, 0xFD	; 253
     7c4:	dd 4f       	sbci	r29, 0xFD	; 253
     7c6:	08 81       	ld	r16, Y
     7c8:	19 81       	ldd	r17, Y+1	; 0x01
     7ca:	c3 50       	subi	r28, 0x03	; 3
     7cc:	d2 40       	sbci	r29, 0x02	; 2

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7ce:	4d e8       	ldi	r20, 0x8D	; 141
     7d0:	53 e0       	ldi	r21, 0x03	; 3
     7d2:	be 01       	movw	r22, r28
     7d4:	6d 5f       	subi	r22, 0xFD	; 253
     7d6:	7d 4f       	sbci	r23, 0xFD	; 253
     7d8:	ce 01       	movw	r24, r28
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	9d 4f       	sbci	r25, 0xFD	; 253
     7de:	dd d4       	rcall	.+2490   	; 0x119a <USB_GetNextDescriptorComp>
     7e0:	81 11       	cpse	r24, r1
     7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <ProcessConfigurationDescriptor+0xce>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     7e4:	cd 5f       	subi	r28, 0xFD	; 253
     7e6:	dd 4f       	sbci	r29, 0xFD	; 253
     7e8:	a8 80       	ld	r10, Y
     7ea:	b9 80       	ldd	r11, Y+1	; 0x01
     7ec:	c3 50       	subi	r28, 0x03	; 3
     7ee:	d2 40       	sbci	r29, 0x02	; 2
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7f0:	01 15       	cp	r16, r1
     7f2:	11 05       	cpc	r17, r1
     7f4:	79 f6       	brne	.-98     	; 0x794 <ProcessConfigurationDescriptor+0x6a>
     7f6:	da cf       	rjmp	.-76     	; 0x7ac <ProcessConfigurationDescriptor+0x82>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMouseInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     7f8:	94 e0       	ldi	r25, 0x04	; 4
     7fa:	f9 2e       	mov	r15, r25
     7fc:	22 c0       	rjmp	.+68     	; 0x842 <ProcessConfigurationDescriptor+0x118>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7fe:	cd 5f       	subi	r28, 0xFD	; 253
     800:	dd 4f       	sbci	r29, 0xFD	; 253
     802:	c8 80       	ld	r12, Y
     804:	d9 80       	ldd	r13, Y+1	; 0x01
     806:	c3 50       	subi	r28, 0x03	; 3
     808:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     80a:	f6 01       	movw	r30, r12
     80c:	22 81       	ldd	r18, Z+2	; 0x02
     80e:	27 ff       	sbrs	r18, 7
     810:	ef cf       	rjmp	.-34     	; 0x7f0 <ProcessConfigurationDescriptor+0xc6>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     812:	c1 14       	cp	r12, r1
     814:	d1 04       	cpc	r13, r1
     816:	61 f3       	breq	.-40     	; 0x7f0 <ProcessConfigurationDescriptor+0xc6>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     818:	04 81       	ldd	r16, Z+4	; 0x04
     81a:	15 81       	ldd	r17, Z+5	; 0x05
     81c:	e1 2c       	mov	r14, r1
     81e:	40 e1       	ldi	r20, 0x10	; 16
     820:	63 e0       	ldi	r22, 0x03	; 3
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	45 d2       	rcall	.+1162   	; 0xcb0 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     826:	f6 01       	movw	r30, r12
     828:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     82a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     82e:	f5 01       	movw	r30, r10
     830:	87 81       	ldd	r24, Z+7	; 0x07
     832:	90 85       	ldd	r25, Z+8	; 0x08
     834:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <HIDReportSize+0x1>
     838:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <HIDReportSize>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     83c:	02 c0       	rjmp	.+4      	; 0x842 <ProcessConfigurationDescriptor+0x118>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	f8 2e       	mov	r15, r24
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     842:	8f 2d       	mov	r24, r15
     844:	cc 5f       	subi	r28, 0xFC	; 252
     846:	dd 4f       	sbci	r29, 0xFD	; 253
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
     866:	08 95       	ret

00000868 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     878:	ed b6       	in	r14, 0x3d	; 61
     87a:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     87c:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <HIDReportSize>
     880:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <HIDReportSize+0x1>
     884:	2d b7       	in	r18, 0x3d	; 61
     886:	3e b7       	in	r19, 0x3e	; 62
     888:	28 1b       	sub	r18, r24
     88a:	39 0b       	sbc	r19, r25
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	3e bf       	out	0x3e, r19	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	2d bf       	out	0x3d, r18	; 61
     896:	0d b7       	in	r16, 0x3d	; 61
     898:	1e b7       	in	r17, 0x3e	; 62
     89a:	0f 5f       	subi	r16, 0xFF	; 255
     89c:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     89e:	21 e8       	ldi	r18, 0x81	; 129
     8a0:	20 93 f2 04 	sts	0x04F2, r18	; 0x8004f2 <USB_ControlRequest>
     8a4:	26 e0       	ldi	r18, 0x06	; 6
     8a6:	20 93 f3 04 	sts	0x04F3, r18	; 0x8004f3 <USB_ControlRequest+0x1>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	32 e2       	ldi	r19, 0x22	; 34
     8ae:	30 93 f5 04 	sts	0x04F5, r19	; 0x8004f5 <USB_ControlRequest+0x3>
     8b2:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <USB_ControlRequest+0x2>
     8b6:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <USB_ControlRequest+0x5>
     8ba:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <USB_ControlRequest+0x4>
     8be:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <USB_ControlRequest+0x7>
     8c2:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8c6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     8ca:	c8 01       	movw	r24, r16
     8cc:	bf d4       	rcall	.+2430   	; 0x124c <USB_Host_SendControlRequest>
     8ce:	81 11       	cpse	r24, r1
     8d0:	0d c0       	rjmp	.+26     	; 0x8ec <GetHIDReportData+0x84>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     8d2:	60 91 ee 04 	lds	r22, 0x04EE	; 0x8004ee <HIDReportSize>
     8d6:	70 91 ef 04 	lds	r23, 0x04EF	; 0x8004ef <HIDReportSize+0x1>
     8da:	45 e1       	ldi	r20, 0x15	; 21
     8dc:	51 e0       	ldi	r21, 0x01	; 1
     8de:	c8 01       	movw	r24, r16
     8e0:	e0 d5       	rcall	.+3008   	; 0x14a2 <USB_ProcessHIDReport>
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	81 11       	cpse	r24, r1
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <GetHIDReportData+0x86>
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <GetHIDReportData+0x86>
     8ec:	92 e0       	ldi	r25, 0x02	; 2
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     8ee:	89 2f       	mov	r24, r25
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	fe be       	out	0x3e, r15	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	ed be       	out	0x3d, r14	; 61
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <CALLBACK_HIDParser_FilterHIDReportItem>:

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     908:	dc 01       	movw	r26, r24
     90a:	16 96       	adiw	r26, 0x06	; 6
     90c:	ed 91       	ld	r30, X+
     90e:	fc 91       	ld	r31, X
     910:	17 97       	sbiw	r26, 0x07	; 7
     912:	30 97       	sbiw	r30, 0x00	; 0
     914:	b1 f0       	breq	.+44     	; 0x942 <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     916:	21 81       	ldd	r18, Z+1	; 0x01
     918:	32 81       	ldd	r19, Z+2	; 0x02
     91a:	21 30       	cpi	r18, 0x01	; 1
     91c:	31 05       	cpc	r19, r1
     91e:	29 f4       	brne	.+10     	; 0x92a <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     920:	23 81       	ldd	r18, Z+3	; 0x03
     922:	34 81       	ldd	r19, Z+4	; 0x04
     924:	22 30       	cpi	r18, 0x02	; 2
     926:	31 05       	cpc	r19, r1
     928:	21 f0       	breq	.+8      	; 0x932 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     92a:	05 80       	ldd	r0, Z+5	; 0x05
     92c:	f6 81       	ldd	r31, Z+6	; 0x06
     92e:	e0 2d       	mov	r30, r0
     930:	f0 cf       	rjmp	.-32     	; 0x912 <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current mouse item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     932:	fc 01       	movw	r30, r24
     934:	21 85       	ldd	r18, Z+9	; 0x09
     936:	32 85       	ldd	r19, Z+10	; 0x0a
     938:	27 7f       	andi	r18, 0xF7	; 247
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	21 30       	cpi	r18, 0x01	; 1
     93e:	31 05       	cpc	r19, r1
     940:	09 f0       	breq	.+2      	; 0x944 <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     942:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     944:	08 95       	ret

00000946 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     946:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     94a:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     94c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     950:	9d 7f       	andi	r25, 0xFD	; 253
     952:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     956:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     95a:	92 60       	ori	r25, 0x02	; 2
     95c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     960:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     964:	91 fd       	sbrc	r25, 1
     966:	fc cf       	rjmp	.-8      	; 0x960 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     968:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     96c:	91 60       	ori	r25, 0x01	; 1
     96e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     972:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     976:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     97a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     97c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     980:	2f 7d       	andi	r18, 0xDF	; 223
     982:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     986:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     98a:	2f 7d       	andi	r18, 0xDF	; 223
     98c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     990:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     992:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     996:	35 ff       	sbrs	r19, 5
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     99a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     99e:	2f 7d       	andi	r18, 0xDF	; 223
     9a0:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9a4:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9a8:	2d 7f       	andi	r18, 0xFD	; 253
     9aa:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b0:	ef ec       	ldi	r30, 0xCF	; 207
     9b2:	f7 e0       	ldi	r31, 0x07	; 7
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <USB_Host_ResetDevice+0x6e>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <USB_Host_ResetDevice+0x74>
     9ba:	00 00       	nop
     9bc:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     9be:	49 f7       	brne	.-46     	; 0x992 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     9c0:	99 23       	and	r25, r25
     9c2:	29 f0       	breq	.+10     	; 0x9ce <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9c4:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9c8:	90 62       	ori	r25, 0x20	; 32
     9ca:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     9ce:	81 11       	cpse	r24, r1
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9d2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9d6:	8e 7f       	andi	r24, 0xFE	; 254
     9d8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     9dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9e0:	82 60       	ori	r24, 0x02	; 2
     9e2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9e6:	08 95       	ret

000009e8 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9e8:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9ec:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9ee:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9f2:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9f4:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9f8:	3f 7d       	andi	r19, 0xDF	; 223
     9fa:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9fe:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a02:	3f 7d       	andi	r19, 0xDF	; 223
     a04:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a08:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     a0c:	31 60       	ori	r19, 0x01	; 1
     a0e:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a12:	88 23       	and	r24, r24
     a14:	39 f1       	breq	.+78     	; 0xa64 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a16:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a1a:	35 ff       	sbrs	r19, 5
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a1e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a22:	3f 7d       	andi	r19, 0xDF	; 223
     a24:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     a28:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     a2a:	30 91 fa 04 	lds	r19, 0x04FA	; 0x8004fa <USB_HostState>
     a2e:	31 30       	cpi	r19, 0x01	; 1
     a30:	c1 f0       	breq	.+48     	; 0xa62 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a32:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     a36:	34 ff       	sbrs	r19, 4
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a3a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     a3e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a42:	8f 7e       	andi	r24, 0xEF	; 239
     a44:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     a48:	82 e0       	ldi	r24, 0x02	; 2

			break;
     a4a:	0c c0       	rjmp	.+24     	; 0xa64 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a4c:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     a50:	31 ff       	sbrs	r19, 1
     a52:	df cf       	rjmp	.-66     	; 0xa12 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a54:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a58:	8d 7f       	andi	r24, 0xFD	; 253
     a5a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     a5e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     a62:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     a64:	21 11       	cpse	r18, r1
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a68:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     a6c:	2e 7f       	andi	r18, 0xFE	; 254
     a6e:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a72:	99 23       	and	r25, r25
     a74:	29 f0       	breq	.+10     	; 0xa80 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a76:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a7a:	90 62       	ori	r25, 0x20	; 32
     a7c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a80:	08 95       	ret

00000a82 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a82:	ef 92       	push	r14
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	28 97       	sbiw	r28, 0x08	; 8
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     a9c:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <USB_HostState>
     aa0:	8e 2f       	mov	r24, r30
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	8a 30       	cpi	r24, 0x0A	; 10
     aa6:	91 05       	cpc	r25, r1
     aa8:	08 f0       	brcs	.+2      	; 0xaac <USB_Host_ProcessNextHostState+0x2a>
     aaa:	f6 c0       	rjmp	.+492    	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
     aac:	fc 01       	movw	r30, r24
     aae:	e4 5b       	subi	r30, 0xB4	; 180
     ab0:	ff 4f       	sbci	r31, 0xFF	; 255
     ab2:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     ab6:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     aba:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     abe:	01 15       	cp	r16, r1
     ac0:	11 05       	cpc	r17, r1
     ac2:	09 f4       	brne	.+2      	; 0xac6 <USB_Host_ProcessNextHostState+0x44>
     ac4:	e9 c0       	rjmp	.+466    	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	8f df       	rcall	.-226    	; 0x9e8 <USB_Host_WaitMS>
     aca:	88 23       	and	r24, r24
     acc:	31 f0       	breq	.+12     	; 0xada <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     ace:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
     ad2:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     ad6:	91 e0       	ldi	r25, 0x01	; 1
					break;
     ad8:	d1 c0       	rjmp	.+418    	; 0xc7c <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     ada:	01 50       	subi	r16, 0x01	; 1
     adc:	11 09       	sbc	r17, r1
     ade:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <WaitMSRemaining.2935+0x1>
     ae2:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <WaitMSRemaining.2935>
     ae6:	01 2b       	or	r16, r17
     ae8:	09 f0       	breq	.+2      	; 0xaec <USB_Host_ProcessNextHostState+0x6a>
     aea:	d6 c0       	rjmp	.+428    	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     aec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     af2:	88 ee       	ldi	r24, 0xE8	; 232
     af4:	93 e0       	ldi	r25, 0x03	; 3
     af6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     afa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
			break;
     b04:	c9 c0       	rjmp	.+402    	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b06:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     b0a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     b0e:	9c 01       	movw	r18, r24
     b10:	21 50       	subi	r18, 0x01	; 1
     b12:	31 09       	sbc	r19, r1
     b14:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <WaitMSRemaining.2935+0x1>
     b18:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <WaitMSRemaining.2935>
     b1c:	89 2b       	or	r24, r25
     b1e:	39 f0       	breq	.+14     	; 0xb2e <USB_Host_ProcessNextHostState+0xac>
     b20:	8f ec       	ldi	r24, 0xCF	; 207
     b22:	97 e0       	ldi	r25, 0x07	; 7
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <USB_Host_ProcessNextHostState+0xa2>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <USB_Host_ProcessNextHostState+0xa8>
     b2a:	00 00       	nop
     b2c:	b5 c0       	rjmp	.+362    	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b2e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b30:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b34:	80 61       	ori	r24, 0x10	; 16
     b36:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b3a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b3e:	8b 7f       	andi	r24, 0xFB	; 251
     b40:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     b44:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b48:	80 61       	ori	r24, 0x10	; 16
     b4a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b4e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	d2 cf       	rjmp	.-92     	; 0xb00 <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b5c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b60:	80 ff       	sbrs	r24, 0
     b62:	9a c0       	rjmp	.+308    	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b64:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b6e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b72:	8d 7f       	andi	r24, 0xFD	; 253
     b74:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b78:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b7c:	8d 7f       	andi	r24, 0xFD	; 253
     b7e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b82:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b86:	82 60       	ori	r24, 0x02	; 2
     b88:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b8c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b96:	e8 d0       	rcall	.+464    	; 0xd68 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b98:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     b9c:	84 e6       	ldi	r24, 0x64	; 100
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     ba4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     ba8:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     baa:	5c c0       	rjmp	.+184    	; 0xc64 <USB_Host_ProcessNextHostState+0x1e2>
     bac:	cc de       	rcall	.-616    	; 0x946 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     bae:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     bb2:	88 ec       	ldi	r24, 0xC8	; 200
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     bba:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	51 c0       	rjmp	.+162    	; 0xc64 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     bc2:	e1 2c       	mov	r14, r1
     bc4:	00 e4       	ldi	r16, 0x40	; 64
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	6f d0       	rcall	.+222    	; 0xcb0 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bd2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     bd6:	87 fd       	sbrc	r24, 7
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     bda:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	4e c0       	rjmp	.+156    	; 0xc7c <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     be0:	87 e0       	ldi	r24, 0x07	; 7
     be2:	8e cf       	rjmp	.-228    	; 0xb00 <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     be4:	88 e0       	ldi	r24, 0x08	; 8
     be6:	e1 e0       	ldi	r30, 0x01	; 1
     be8:	f1 e0       	ldi	r31, 0x01	; 1
     bea:	a2 ef       	ldi	r26, 0xF2	; 242
     bec:	b4 e0       	ldi	r27, 0x04	; 4
     bee:	01 90       	ld	r0, Z+
     bf0:	0d 92       	st	X+, r0
     bf2:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     bf4:	e1 f7       	brne	.-8      	; 0xbee <USB_Host_ProcessNextHostState+0x16c>
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	28 d3       	rcall	.+1616   	; 0x124c <USB_Host_SendControlRequest>
     bfc:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     bfe:	3d c0       	rjmp	.+122    	; 0xc7a <USB_Host_ProcessNextHostState+0x1f8>
     c00:	88 85       	ldd	r24, Y+8	; 0x08
     c02:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     c06:	9f de       	rcall	.-706    	; 0x946 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c08:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     c0c:	88 ec       	ldi	r24, 0xC8	; 200
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     c14:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     c18:	88 e0       	ldi	r24, 0x08	; 8
     c1a:	24 c0       	rjmp	.+72     	; 0xc64 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c1c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	e1 2c       	mov	r14, r1
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	41 d0       	rcall	.+130    	; 0xcb0 <Pipe_ConfigurePipe>
     c2e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c32:	87 ff       	sbrs	r24, 7
     c34:	d2 cf       	rjmp	.-92     	; 0xbda <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c36:	88 e0       	ldi	r24, 0x08	; 8
     c38:	e9 e0       	ldi	r30, 0x09	; 9
     c3a:	f1 e0       	ldi	r31, 0x01	; 1
     c3c:	a2 ef       	ldi	r26, 0xF2	; 242
     c3e:	b4 e0       	ldi	r27, 0x04	; 4
     c40:	01 90       	ld	r0, Z+
     c42:	0d 92       	st	X+, r0
     c44:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c46:	e1 f7       	brne	.-8      	; 0xc40 <USB_Host_ProcessNextHostState+0x1be>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	ff d2       	rcall	.+1534   	; 0x124c <USB_Host_SendControlRequest>
     c4e:	81 11       	cpse	r24, r1
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c52:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     c56:	84 e6       	ldi	r24, 0x64	; 100
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     c5e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     c62:	89 e0       	ldi	r24, 0x09	; 9
     c64:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     c68:	17 c0       	rjmp	.+46     	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     c76:	ab db       	rcall	.-2218   	; 0x3ce <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     c78:	0f c0       	rjmp	.+30     	; 0xc98 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c80:	21 30       	cpi	r18, 0x01	; 1
     c82:	51 f0       	breq	.+20     	; 0xc98 <USB_Host_ProcessNextHostState+0x216>
     c84:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c86:	89 2f       	mov	r24, r25
     c88:	16 dc       	rcall	.-2004   	; 0x4b6 <EVENT_USB_Host_DeviceEnumerationFailed>
     c8a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c8e:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c90:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     c94:	96 db       	rcall	.-2260   	; 0x3c2 <EVENT_USB_Host_DeviceUnattached>
     c96:	c2 d0       	rcall	.+388    	; 0xe1c <USB_ResetInterface>
	}
}
     c98:	28 96       	adiw	r28, 0x08	; 8
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ef 90       	pop	r14
     cae:	08 95       	ret

00000cb0 <Pipe_ConfigurePipe>:
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     cb0:	ef 92       	push	r14
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	2f 70       	andi	r18, 0x0F	; 15
     cb8:	42 2b       	or	r20, r18
     cba:	90 e4       	ldi	r25, 0x40	; 64
     cbc:	69 9f       	mul	r22, r25
     cbe:	b0 01       	movw	r22, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	64 2b       	or	r22, r20
     cc4:	38 2f       	mov	r19, r24
     cc6:	2e 2d       	mov	r18, r14
     cc8:	22 60       	ori	r18, 0x02	; 2
     cca:	37 30       	cpi	r19, 0x07	; 7
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <Pipe_ConfigurePipe+0x20>
     cce:	45 c0       	rjmp	.+138    	; 0xd5a <Pipe_ConfigurePipe+0xaa>
     cd0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     cd4:	38 13       	cpse	r19, r24
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <Pipe_ConfigurePipe+0x4e>
     cd8:	48 e0       	ldi	r20, 0x08	; 8
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	40 17       	cp	r20, r16
     ce0:	51 07       	cpc	r21, r17
     ce2:	38 f0       	brcs	.+14     	; 0xcf2 <Pipe_ConfigurePipe+0x42>
     ce4:	92 95       	swap	r25
     ce6:	90 7f       	andi	r25, 0xF0	; 240
     ce8:	92 2b       	or	r25, r18
     cea:	e6 2f       	mov	r30, r22
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <Pipe_ConfigurePipe+0x5e>
     cf2:	95 30       	cpi	r25, 0x05	; 5
     cf4:	b9 f3       	breq	.-18     	; 0xce4 <Pipe_ConfigurePipe+0x34>
     cf6:	9f 5f       	subi	r25, 0xFF	; 255
     cf8:	44 0f       	add	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	f0 cf       	rjmp	.-32     	; 0xcde <Pipe_ConfigurePipe+0x2e>
     cfe:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d02:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d06:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     d0a:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     d0e:	91 fd       	sbrc	r25, 1
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <Pipe_ConfigurePipe+0x66>
     d12:	3f 5f       	subi	r19, 0xFF	; 255
     d14:	da cf       	rjmp	.-76     	; 0xcca <Pipe_ConfigurePipe+0x1a>
     d16:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d1a:	4e 7f       	andi	r20, 0xFE	; 254
     d1c:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d20:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d24:	4d 7f       	andi	r20, 0xFD	; 253
     d26:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d2a:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d2e:	41 60       	ori	r20, 0x01	; 1
     d30:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d34:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d38:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d3c:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     d40:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     d44:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d48:	90 62       	ori	r25, 0x20	; 32
     d4a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d4e:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     d52:	97 fd       	sbrc	r25, 7
     d54:	de cf       	rjmp	.-68     	; 0xd12 <Pipe_ConfigurePipe+0x62>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <Pipe_ConfigurePipe+0xb0>
     d5a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ef 90       	pop	r14
     d66:	08 95       	ret

00000d68 <Pipe_ClearPipes>:
     d68:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d72:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     d76:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d7a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d7e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d82:	9e 7f       	andi	r25, 0xFE	; 254
     d84:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	87 30       	cpi	r24, 0x07	; 7
     d8c:	81 f7       	brne	.-32     	; 0xd6e <Pipe_ClearPipes+0x6>
     d8e:	08 95       	ret

00000d90 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d90:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     d94:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     d98:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d9a:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d9e:	90 73       	andi	r25, 0x30	; 48
     da0:	90 31       	cpi	r25, 0x10	; 16
     da2:	29 f4       	brne	.+10     	; 0xdae <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     da4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     da8:	90 ff       	sbrs	r25, 0
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <Pipe_WaitUntilReady+0x26>
     dac:	19 c0       	rjmp	.+50     	; 0xde0 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     dae:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     db2:	92 fd       	sbrc	r25, 2
     db4:	15 c0       	rjmp	.+42     	; 0xde0 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     db6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     dba:	91 fd       	sbrc	r25, 1
     dbc:	13 c0       	rjmp	.+38     	; 0xde4 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     dbe:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <USB_HostState>
     dc2:	91 30       	cpi	r25, 0x01	; 1
     dc4:	89 f0       	breq	.+34     	; 0xde8 <Pipe_WaitUntilReady+0x58>
     dc6:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     dca:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     dce:	42 17       	cp	r20, r18
     dd0:	53 07       	cpc	r21, r19
     dd2:	19 f3       	breq	.-58     	; 0xd9a <Pipe_WaitUntilReady+0xa>
     dd4:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     dd6:	11 f0       	breq	.+4      	; 0xddc <Pipe_WaitUntilReady+0x4c>
     dd8:	a9 01       	movw	r20, r18
     dda:	df cf       	rjmp	.-66     	; 0xd9a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     de8:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     dea:	08 95       	ret

00000dec <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     dec:	70 d0       	rcall	.+224    	; 0xece <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     dee:	77 d0       	rcall	.+238    	; 0xede <USB_INT_ClearAllInterrupts>
     df0:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	80 83       	st	Z, r24
     dfa:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8f 77       	andi	r24, 0x7F	; 127
     e02:	80 83       	st	Z, r24
     e04:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e06:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	8c 91       	ld	r24, X
     e0c:	8e 7f       	andi	r24, 0xFE	; 254
     e0e:	8c 93       	st	X, r24
     e10:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	80 83       	st	Z, r24
     e16:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     e1a:	08 95       	ret

00000e1c <USB_ResetInterface>:
     e1c:	58 d0       	rcall	.+176    	; 0xece <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     e1e:	5f d0       	rcall	.+190    	; 0xede <USB_INT_ClearAllInterrupts>
     e20:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e24:	8f 77       	andi	r24, 0x7F	; 127
     e26:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e2a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e34:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e38:	8f 7d       	andi	r24, 0xDF	; 223
     e3a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e3e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e42:	8f 77       	andi	r24, 0x7F	; 127
     e44:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e48:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e4a:	89 bd       	out	0x29, r24	; 41
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e4e:	89 bd       	out	0x29, r24	; 41
     e50:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     e52:	00 fe       	sbrs	r0, 0
     e54:	fd cf       	rjmp	.-6      	; 0xe50 <USB_ResetInterface+0x34>
     e56:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e58:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
     e5c:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     e60:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     e66:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e6a:	80 64       	ori	r24, 0x40	; 64
     e6c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e70:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e74:	81 60       	ori	r24, 0x01	; 1
     e76:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e7a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e84:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e8e:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     e90:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     e92:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e9c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ea0:	84 60       	ori	r24, 0x04	; 4
     ea2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ea6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     eaa:	8e 7f       	andi	r24, 0xFE	; 254
     eac:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     eb0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     eb4:	80 61       	ori	r24, 0x10	; 16
     eb6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     eba:	08 95       	ret

00000ebc <USB_Init>:
     ebc:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <USB_IsInitialized>

	USB_ResetInterface();
     ecc:	a7 cf       	rjmp	.-178    	; 0xe1c <USB_ResetInterface>

00000ece <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ece:	e8 ed       	ldi	r30, 0xD8	; 216
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8c 7f       	andi	r24, 0xFC	; 252
     ed6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ed8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     edc:	08 95       	ret

00000ede <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ede:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     ee2:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ee6:	08 95       	ret

00000ee8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	0b b6       	in	r0, 0x3b	; 59
     ef4:	0f 92       	push	r0
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f0e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f12:	85 ff       	sbrs	r24, 5
     f14:	0a c0       	rjmp	.+20     	; 0xf2a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f16:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f1a:	85 ff       	sbrs	r24, 5
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f1e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f22:	8f 7d       	andi	r24, 0xDF	; 223
     f24:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f28:	6a d1       	rcall	.+724    	; 0x11fe <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f2a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f2e:	81 ff       	sbrs	r24, 1
     f30:	15 c0       	rjmp	.+42     	; 0xf5c <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f32:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f36:	81 ff       	sbrs	r24, 1
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f3a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f3e:	8d 7f       	andi	r24, 0xFD	; 253
     f40:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f44:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f48:	8e 7f       	andi	r24, 0xFE	; 254
     f4a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f4e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f52:	8d 7f       	andi	r24, 0xFD	; 253
     f54:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     f58:	34 da       	rcall	.-2968   	; 0x3c2 <EVENT_USB_Host_DeviceUnattached>
     f5a:	60 df       	rcall	.-320    	; 0xe1c <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     f5c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f60:	81 ff       	sbrs	r24, 1
     f62:	15 c0       	rjmp	.+42     	; 0xf8e <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     f64:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     f68:	81 ff       	sbrs	r24, 1
     f6a:	11 c0       	rjmp	.+34     	; 0xf8e <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f6c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f70:	8d 7f       	andi	r24, 0xFD	; 253
     f72:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     f76:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f78:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	87 da       	rcall	.-2802   	; 0x494 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f86:	1d da       	rcall	.-3014   	; 0x3c2 <EVENT_USB_Host_DeviceUnattached>
     f88:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     f8a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
     f8e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f92:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f94:	17 c0       	rjmp	.+46     	; 0xfc4 <__vector_10+0xdc>
     f96:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f9a:	80 ff       	sbrs	r24, 0
     f9c:	13 c0       	rjmp	.+38     	; 0xfc4 <__vector_10+0xdc>
     f9e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     fa8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     fac:	8e 7f       	andi	r24, 0xFE	; 254
     fae:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     fb2:	01 da       	rcall	.-3070   	; 0x3b6 <EVENT_USB_Host_DeviceAttached>
     fb4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     fbe:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     fc0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
     fc4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     fc8:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     fca:	0e c0       	rjmp	.+28     	; 0xfe8 <__vector_10+0x100>
     fcc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     fd0:	82 ff       	sbrs	r24, 2
     fd2:	0a c0       	rjmp	.+20     	; 0xfe8 <__vector_10+0x100>
     fd4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     fd8:	8b 7f       	andi	r24, 0xFB	; 251
     fda:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	69 da       	rcall	.-2862   	; 0x4b6 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     fe4:	ee d9       	rcall	.-3108   	; 0x3c2 <EVENT_USB_Host_DeviceUnattached>
     fe6:	1a df       	rcall	.-460    	; 0xe1c <USB_ResetInterface>

		USB_ResetInterface();
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <Pipe_Read_Stream_LE>:
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	ec 01       	movw	r28, r24
    1020:	8b 01       	movw	r16, r22
    1022:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1024:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1028:	8f 7c       	andi	r24, 0xCF	; 207
    102a:	80 61       	ori	r24, 0x10	; 16
    102c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1030:	af de       	rcall	.-674    	; 0xd90 <Pipe_WaitUntilReady>
    1032:	81 11       	cpse	r24, r1
    1034:	32 c0       	rjmp	.+100    	; 0x109a <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1036:	e1 14       	cp	r14, r1
    1038:	f1 04       	cpc	r15, r1
    103a:	39 f0       	breq	.+14     	; 0x104a <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
    103c:	f7 01       	movw	r30, r14
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	08 1b       	sub	r16, r24
    1044:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1046:	c8 0f       	add	r28, r24
    1048:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    104a:	c1 2c       	mov	r12, r1
    104c:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    104e:	01 15       	cp	r16, r1
    1050:	11 05       	cpc	r17, r1
    1052:	11 f1       	breq	.+68     	; 0x1098 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1054:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1058:	85 fd       	sbrc	r24, 5
    105a:	15 c0       	rjmp	.+42     	; 0x1086 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    105c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1060:	8e 77       	andi	r24, 0x7E	; 126
    1062:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1066:	e1 14       	cp	r14, r1
    1068:	f1 04       	cpc	r15, r1
    106a:	49 f0       	breq	.+18     	; 0x107e <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    106c:	f7 01       	movw	r30, r14
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	c8 0e       	add	r12, r24
    1074:	d9 1e       	adc	r13, r25
    1076:	d1 82       	std	Z+1, r13	; 0x01
    1078:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    107a:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    107c:	0e c0       	rjmp	.+28     	; 0x109a <Pipe_Read_Stream_LE+0x8c>
    107e:	88 de       	rcall	.-752    	; 0xd90 <Pipe_WaitUntilReady>
    1080:	88 23       	and	r24, r24
    1082:	29 f3       	breq	.-54     	; 0x104e <Pipe_Read_Stream_LE+0x40>
    1084:	0a c0       	rjmp	.+20     	; 0x109a <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1086:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    108a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    108c:	01 50       	subi	r16, 0x01	; 1
    108e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1090:	ff ef       	ldi	r31, 0xFF	; 255
    1092:	cf 1a       	sub	r12, r31
    1094:	df 0a       	sbc	r13, r31
    1096:	db cf       	rjmp	.-74     	; 0x104e <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    1098:	80 e0       	ldi	r24, 0x00	; 0
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	08 95       	ret

000010ac <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	dc 01       	movw	r26, r24
    10b2:	eb 01       	movw	r28, r22
    10b4:	e8 81       	ld	r30, Y
    10b6:	f9 81       	ldd	r31, Y+1	; 0x01
    10b8:	20 81       	ld	r18, Z
    10ba:	8d 91       	ld	r24, X+
    10bc:	9c 91       	ld	r25, X
    10be:	11 97       	sbiw	r26, 0x01	; 1
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	82 17       	cp	r24, r18
    10c4:	93 07       	cpc	r25, r19
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <USB_GetNextDescriptor+0x1e>
    10c8:	9c 01       	movw	r18, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	eb 01       	movw	r28, r22
    10d0:	f9 83       	std	Y+1, r31	; 0x01
    10d2:	e8 83       	st	Y, r30
    10d4:	8d 91       	ld	r24, X+
    10d6:	9c 91       	ld	r25, X
    10d8:	11 97       	sbiw	r26, 0x01	; 1
    10da:	82 1b       	sub	r24, r18
    10dc:	93 0b       	sbc	r25, r19
    10de:	8d 93       	st	X+, r24
    10e0:	9c 93       	st	X, r25
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <USB_Host_GetDeviceConfigDescriptor>:
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	29 97       	sbiw	r28, 0x09	; 9
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	6b 01       	movw	r12, r22
    110a:	8a 01       	movw	r16, r20
    110c:	79 01       	movw	r14, r18
    110e:	90 e8       	ldi	r25, 0x80	; 128
    1110:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <USB_ControlRequest>
    1114:	96 e0       	ldi	r25, 0x06	; 6
    1116:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <USB_ControlRequest+0x1>
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	92 60       	ori	r25, 0x02	; 2
    1120:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <USB_ControlRequest+0x3>
    1124:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <USB_ControlRequest+0x2>
    1128:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <USB_ControlRequest+0x5>
    112c:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <USB_ControlRequest+0x4>
    1130:	89 e0       	ldi	r24, 0x09	; 9
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <USB_ControlRequest+0x7>
    1138:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <USB_ControlRequest+0x6>
    113c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	83 d0       	rcall	.+262    	; 0x124c <USB_Host_SendControlRequest>
    1146:	81 11       	cpse	r24, r1
    1148:	19 c0       	rjmp	.+50     	; 0x117c <USB_Host_GetDeviceConfigDescriptor+0x94>
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	f6 01       	movw	r30, r12
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	80 83       	st	Z, r24
    1154:	e8 16       	cp	r14, r24
    1156:	f9 06       	cpc	r15, r25
    1158:	70 f0       	brcs	.+28     	; 0x1176 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    115a:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <USB_ControlRequest+0x7>
    115e:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <USB_ControlRequest+0x6>
    1162:	c8 01       	movw	r24, r16
    1164:	73 d0       	rcall	.+230    	; 0x124c <USB_Host_SendControlRequest>
    1166:	81 11       	cpse	r24, r1
    1168:	09 c0       	rjmp	.+18     	; 0x117c <USB_Host_GetDeviceConfigDescriptor+0x94>
    116a:	f8 01       	movw	r30, r16
    116c:	81 81       	ldd	r24, Z+1	; 0x01
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	21 f4       	brne	.+8      	; 0x117a <USB_Host_GetDeviceConfigDescriptor+0x92>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	03 c0       	rjmp	.+6      	; 0x117c <USB_Host_GetDeviceConfigDescriptor+0x94>
    1176:	85 e0       	ldi	r24, 0x05	; 5
    1178:	01 c0       	rjmp	.+2      	; 0x117c <USB_Host_GetDeviceConfigDescriptor+0x94>
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	29 96       	adiw	r28, 0x09	; 9
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret

0000119a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	8c 01       	movw	r16, r24
    11b0:	eb 01       	movw	r28, r22
    11b2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    11b4:	f8 01       	movw	r30, r16
    11b6:	e0 80       	ld	r14, Z
    11b8:	f1 80       	ldd	r15, Z+1	; 0x01
    11ba:	e1 14       	cp	r14, r1
    11bc:	f1 04       	cpc	r15, r1
    11be:	99 f0       	breq	.+38     	; 0x11e6 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    11c0:	a8 80       	ld	r10, Y
    11c2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    11c4:	be 01       	movw	r22, r28
    11c6:	c8 01       	movw	r24, r16
    11c8:	71 df       	rcall	.-286    	; 0x10ac <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	f6 01       	movw	r30, r12
    11d0:	09 95       	icall
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	79 f3       	breq	.-34     	; 0x11b4 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	39 f4       	brne	.+14     	; 0x11e8 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    11da:	b9 82       	std	Y+1, r11	; 0x01
    11dc:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    11de:	f8 01       	movw	r30, r16
    11e0:	f1 82       	std	Z+1, r15	; 0x01
    11e2:	e0 82       	st	Z, r14
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    11e6:	82 e0       	ldi	r24, 0x02	; 2
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	08 95       	ret

000011fe <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    11fe:	08 95       	ret

00001200 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1208:	c9 ee       	ldi	r28, 0xE9	; 233
    120a:	d3 e0       	ldi	r29, 0x03	; 3
    120c:	11 11       	cpse	r17, r1
    120e:	0c c0       	rjmp	.+24     	; 0x1228 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1210:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1214:	83 fd       	sbrc	r24, 3
    1216:	15 c0       	rjmp	.+42     	; 0x1242 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	e6 db       	rcall	.-2100   	; 0x9e8 <USB_Host_WaitMS>
    121c:	81 11       	cpse	r24, r1
    121e:	12 c0       	rjmp	.+36     	; 0x1244 <USB_Host_WaitForIOS+0x44>
    1220:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1222:	a1 f7       	brne	.-24     	; 0x120c <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1228:	11 30       	cpi	r17, 0x01	; 1
    122a:	29 f4       	brne	.+10     	; 0x1236 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    122c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1230:	80 ff       	sbrs	r24, 0
    1232:	f2 cf       	rjmp	.-28     	; 0x1218 <USB_Host_WaitForIOS+0x18>
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1236:	12 30       	cpi	r17, 0x02	; 2
    1238:	79 f7       	brne	.-34     	; 0x1218 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    123a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    123e:	82 ff       	sbrs	r24, 2
    1240:	eb cf       	rjmp	.-42     	; 0x1218 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1242:	80 e0       	ldi	r24, 0x00	; 0
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	08 95       	ret

0000124c <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1258:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1260:	c0 91 f8 04 	lds	r28, 0x04F8	; 0x8004f8 <USB_ControlRequest+0x6>
    1264:	d0 91 f9 04 	lds	r29, 0x04F9	; 0x8004f9 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1268:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    126c:	81 60       	ori	r24, 0x01	; 1
    126e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	b9 db       	rcall	.-2190   	; 0x9e8 <USB_Host_WaitMS>
    1276:	81 11       	cpse	r24, r1
    1278:	c8 c0       	rjmp	.+400    	; 0x140a <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    127a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    127e:	8f 7c       	andi	r24, 0xCF	; 207
    1280:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1284:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    1288:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    128c:	8f 7e       	andi	r24, 0xEF	; 239
    128e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1292:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1296:	8f 7b       	andi	r24, 0xBF	; 191
    1298:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    129c:	e2 ef       	ldi	r30, 0xF2	; 242
    129e:	f4 e0       	ldi	r31, 0x04	; 4
    12a0:	8a ef       	ldi	r24, 0xFA	; 250
    12a2:	94 e0       	ldi	r25, 0x04	; 4
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    12a4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    12a6:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    12aa:	8e 17       	cp	r24, r30
    12ac:	9f 07       	cpc	r25, r31
    12ae:	d1 f7       	brne	.-12     	; 0x12a4 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    12b0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12b4:	87 77       	andi	r24, 0x77	; 119
    12b6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	a1 df       	rcall	.-190    	; 0x1200 <USB_Host_WaitForIOS>
    12be:	81 11       	cpse	r24, r1
    12c0:	a4 c0       	rjmp	.+328    	; 0x140a <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12c2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12c6:	80 64       	ori	r24, 0x40	; 64
    12c8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	8c db       	rcall	.-2280   	; 0x9e8 <USB_Host_WaitMS>
    12d0:	81 11       	cpse	r24, r1
    12d2:	9b c0       	rjmp	.+310    	; 0x140a <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    12d4:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <USB_ControlRequest>
    12d8:	87 ff       	sbrs	r24, 7
    12da:	4e c0       	rjmp	.+156    	; 0x1378 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12dc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    12e0:	8f 7c       	andi	r24, 0xCF	; 207
    12e2:	80 61       	ori	r24, 0x10	; 16
    12e4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    12e8:	01 15       	cp	r16, r1
    12ea:	11 05       	cpc	r17, r1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <USB_Host_SendControlRequest+0xa4>
    12ee:	3a c0       	rjmp	.+116    	; 0x1364 <USB_Host_SendControlRequest+0x118>
    12f0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    12f4:	8f 7c       	andi	r24, 0xCF	; 207
    12f6:	80 62       	ori	r24, 0x20	; 32
    12f8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12fc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1300:	8f 7b       	andi	r24, 0xBF	; 191
    1302:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	7b df       	rcall	.-266    	; 0x1200 <USB_Host_WaitForIOS>
    130a:	81 11       	cpse	r24, r1
    130c:	7e c0       	rjmp	.+252    	; 0x140a <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    130e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1312:	8b 77       	andi	r24, 0x7B	; 123
    1314:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	72 df       	rcall	.-284    	; 0x1200 <USB_Host_WaitForIOS>
    131c:	76 c0       	rjmp	.+236    	; 0x140a <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    131e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1322:	8f 7b       	andi	r24, 0xBF	; 191
    1324:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	6a df       	rcall	.-300    	; 0x1200 <USB_Host_WaitForIOS>
    132c:	81 11       	cpse	r24, r1
    132e:	6d c0       	rjmp	.+218    	; 0x140a <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1330:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1334:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1338:	89 2b       	or	r24, r25
    133a:	11 f4       	brne	.+4      	; 0x1340 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    133c:	c0 e0       	ldi	r28, 0x00	; 0
    133e:	d0 e0       	ldi	r29, 0x00	; 0
    1340:	f8 01       	movw	r30, r16
    1342:	8f 01       	movw	r16, r30
    1344:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1348:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    134c:	89 2b       	or	r24, r25
    134e:	69 f4       	brne	.+26     	; 0x136a <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1350:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1354:	80 64       	ori	r24, 0x40	; 64
    1356:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    135a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    135e:	8e 77       	andi	r24, 0x7E	; 126
    1360:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1364:	20 97       	sbiw	r28, 0x00	; 0
    1366:	d9 f6       	brne	.-74     	; 0x131e <USB_Host_SendControlRequest+0xd2>
    1368:	c3 cf       	rjmp	.-122    	; 0x12f0 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    136a:	20 97       	sbiw	r28, 0x00	; 0
    136c:	89 f3       	breq	.-30     	; 0x1350 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    136e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    1372:	81 93       	st	Z+, r24
					DataLen--;
    1374:	21 97       	sbiw	r28, 0x01	; 1
    1376:	e5 cf       	rjmp	.-54     	; 0x1342 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1378:	01 15       	cp	r16, r1
    137a:	11 05       	cpc	r17, r1
    137c:	91 f1       	breq	.+100    	; 0x13e2 <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    137e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1382:	8f 7c       	andi	r24, 0xCF	; 207
    1384:	80 62       	ori	r24, 0x20	; 32
    1386:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    138a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    138e:	8f 7b       	andi	r24, 0xBF	; 191
    1390:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1398:	e1 f0       	breq	.+56     	; 0x13d2 <USB_Host_SendControlRequest+0x186>
    139a:	32 df       	rcall	.-412    	; 0x1200 <USB_Host_WaitForIOS>
    139c:	81 11       	cpse	r24, r1
    139e:	35 c0       	rjmp	.+106    	; 0x140a <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13a0:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    13a4:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    13a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	28 17       	cp	r18, r24
    13b0:	39 07       	cpc	r19, r25
    13b2:	48 f4       	brcc	.+18     	; 0x13c6 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	f8 01       	movw	r30, r16
    13ba:	31 97       	sbiw	r30, 0x01	; 1
    13bc:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    13be:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    13c2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <USB_Host_SendControlRequest+0x154>
    13c6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13ca:	8b 77       	andi	r24, 0x7B	; 123
    13cc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13d0:	e1 cf       	rjmp	.-62     	; 0x1394 <USB_Host_SendControlRequest+0x148>
    13d2:	16 df       	rcall	.-468    	; 0x1200 <USB_Host_WaitForIOS>
    13d4:	81 11       	cpse	r24, r1
    13d6:	19 c0       	rjmp	.+50     	; 0x140a <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13dc:	80 64       	ori	r24, 0x40	; 64
    13de:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13e2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    13e6:	8f 7c       	andi	r24, 0xCF	; 207
    13e8:	80 61       	ori	r24, 0x10	; 16
    13ea:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ee:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13f2:	8f 7b       	andi	r24, 0xBF	; 191
    13f4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	02 df       	rcall	.-508    	; 0x1200 <USB_Host_WaitForIOS>
    13fc:	81 11       	cpse	r24, r1
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1400:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1404:	9e 77       	andi	r25, 0x7E	; 126
    1406:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    140a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    140e:	90 64       	ori	r25, 0x40	; 64
    1410:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1414:	f1 10       	cpse	r15, r1
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1418:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    141c:	9e 7f       	andi	r25, 0xFE	; 254
    141e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    1428:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	08 95       	ret

00001438 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1438:	cf 93       	push	r28
    143a:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    143c:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <USB_ControlRequest>
    1440:	89 e0       	ldi	r24, 0x09	; 9
    1442:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <USB_ControlRequest+0x1>
    1446:	8c 2f       	mov	r24, r28
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <USB_ControlRequest+0x3>
    144e:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <USB_ControlRequest+0x2>
    1452:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <USB_ControlRequest+0x5>
    1456:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <USB_ControlRequest+0x4>
    145a:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <USB_ControlRequest+0x7>
    145e:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1462:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	f0 de       	rcall	.-544    	; 0x124c <USB_Host_SendControlRequest>
    146c:	81 11       	cpse	r24, r1
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1470:	c0 93 f0 04 	sts	0x04F0, r28	; 0x8004f0 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1474:	c1 11       	cpse	r28, r1
    1476:	02 c0       	rjmp	.+4      	; 0x147c <USB_Host_SetDeviceConfiguration+0x44>
    1478:	9a e0       	ldi	r25, 0x0A	; 10
    147a:	01 c0       	rjmp	.+2      	; 0x147e <USB_Host_SetDeviceConfiguration+0x46>
    147c:	9b e0       	ldi	r25, 0x0B	; 11
    147e:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <USB_HostState>
	}

	return ErrorCode;
}
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    148c:	c7 ea       	ldi	r28, 0xA7	; 167
    148e:	d0 e0       	ldi	r29, 0x00	; 0
    1490:	18 81       	ld	r17, Y
    1492:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1494:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1496:	f5 da       	rcall	.-2582   	; 0xa82 <USB_Host_ProcessNextHostState>
    1498:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	08 95       	ret

000014a2 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    14a2:	2f 92       	push	r2
    14a4:	3f 92       	push	r3
    14a6:	4f 92       	push	r4
    14a8:	5f 92       	push	r5
    14aa:	6f 92       	push	r6
    14ac:	7f 92       	push	r7
    14ae:	8f 92       	push	r8
    14b0:	9f 92       	push	r9
    14b2:	af 92       	push	r10
    14b4:	bf 92       	push	r11
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	cc 58       	subi	r28, 0x8C	; 140
    14cc:	d1 09       	sbc	r29, r1
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	6c 01       	movw	r12, r24
    14da:	e7 96       	adiw	r28, 0x37	; 55
    14dc:	7f af       	std	Y+63, r23	; 0x3f
    14de:	6e af       	std	Y+62, r22	; 0x3e
    14e0:	e7 97       	sbiw	r28, 0x37	; 55
    14e2:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    14e4:	9a 01       	movw	r18, r20
    14e6:	20 57       	subi	r18, 0x70	; 112
    14e8:	3c 4f       	sbci	r19, 0xFC	; 252
    14ea:	e9 96       	adiw	r28, 0x39	; 57
    14ec:	3f af       	std	Y+63, r19	; 0x3f
    14ee:	2e af       	std	Y+62, r18	; 0x3e
    14f0:	e9 97       	sbiw	r28, 0x39	; 57
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    14f2:	89 ed       	ldi	r24, 0xD9	; 217
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	da 01       	movw	r26, r20
    14f8:	fc 01       	movw	r30, r24
    14fa:	1d 92       	st	X+, r1
    14fc:	31 97       	sbiw	r30, 0x01	; 1
    14fe:	e9 f7       	brne	.-6      	; 0x14fa <USB_ProcessHIDReport+0x58>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1500:	fe 01       	movw	r30, r28
    1502:	31 96       	adiw	r30, 0x01	; 1
    1504:	8c e1       	ldi	r24, 0x1C	; 28
    1506:	df 01       	movw	r26, r30
    1508:	1d 92       	st	X+, r1
    150a:	8a 95       	dec	r24
    150c:	e9 f7       	brne	.-6      	; 0x1508 <USB_ProcessHIDReport+0x66>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	d9 01       	movw	r26, r18
    1512:	1d 92       	st	X+, r1
    1514:	8a 95       	dec	r24
    1516:	e9 f7       	brne	.-6      	; 0x1512 <USB_ProcessHIDReport+0x70>

	ParserData->TotalDeviceReports = 1;
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	31 09       	sbc	r19, r1
    151c:	c1 58       	subi	r28, 0x81	; 129
    151e:	df 4f       	sbci	r29, 0xFF	; 255
    1520:	39 83       	std	Y+1, r19	; 0x01
    1522:	28 83       	st	Y, r18
    1524:	cf 57       	subi	r28, 0x7F	; 127
    1526:	d0 40       	sbci	r29, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	d9 01       	movw	r26, r18
    152c:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
    152e:	ed 96       	adiw	r28, 0x3d	; 61
    1530:	1c ae       	std	Y+60, r1	; 0x3c
    1532:	1d ae       	std	Y+61, r1	; 0x3d
    1534:	1e ae       	std	Y+62, r1	; 0x3e
    1536:	1f ae       	std	Y+63, r1	; 0x3f
    1538:	ed 97       	sbiw	r28, 0x3d	; 61
    153a:	41 2c       	mov	r4, r1
    153c:	51 2c       	mov	r5, r1
    153e:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
    1540:	00 e0       	ldi	r16, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
    1542:	e5 96       	adiw	r28, 0x35	; 53
    1544:	1f ae       	std	Y+63, r1	; 0x3f
    1546:	1e ae       	std	Y+62, r1	; 0x3e
    1548:	e5 97       	sbiw	r28, 0x35	; 53
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
    154a:	7f 01       	movw	r14, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    154c:	fa 01       	movw	r30, r20
    154e:	ea 52       	subi	r30, 0x2A	; 42
    1550:	fc 4f       	sbci	r31, 0xFC	; 252
    1552:	cf 57       	subi	r28, 0x7F	; 127
    1554:	df 4f       	sbci	r29, 0xFF	; 255
    1556:	f9 83       	std	Y+1, r31	; 0x01
    1558:	e8 83       	st	Y, r30
    155a:	c1 58       	subi	r28, 0x81	; 129
    155c:	d0 40       	sbci	r29, 0x00	; 0

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    155e:	27 50       	subi	r18, 0x07	; 7
    1560:	31 09       	sbc	r19, r1
    1562:	c7 57       	subi	r28, 0x77	; 119
    1564:	df 4f       	sbci	r29, 0xFF	; 255
    1566:	39 83       	std	Y+1, r19	; 0x01
    1568:	28 83       	st	Y, r18
    156a:	c9 58       	subi	r28, 0x89	; 137
    156c:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    156e:	48 52       	subi	r20, 0x28	; 40
    1570:	5c 4f       	sbci	r21, 0xFC	; 252
    1572:	cd 57       	subi	r28, 0x7D	; 125
    1574:	df 4f       	sbci	r29, 0xFF	; 255
    1576:	59 83       	std	Y+1, r21	; 0x01
    1578:	48 83       	st	Y, r20
    157a:	c3 58       	subi	r28, 0x83	; 131
    157c:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    157e:	c5 57       	subi	r28, 0x75	; 117
    1580:	df 4f       	sbci	r29, 0xFF	; 255
    1582:	b9 83       	std	Y+1, r27	; 0x01
    1584:	a8 83       	st	Y, r26
    1586:	cb 58       	subi	r28, 0x8B	; 139
    1588:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    158a:	e7 96       	adiw	r28, 0x37	; 55
    158c:	2e ad       	ldd	r18, Y+62	; 0x3e
    158e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1590:	e7 97       	sbiw	r28, 0x37	; 55
    1592:	23 2b       	or	r18, r19
    1594:	09 f4       	brne	.+2      	; 0x1598 <USB_ProcessHIDReport+0xf6>
    1596:	b9 c2       	rjmp	.+1394   	; 0x1b0a <USB_ProcessHIDReport+0x668>
	{
		uint8_t  HIDReportItem  = *ReportData;
    1598:	d6 01       	movw	r26, r12
    159a:	bc 91       	ld	r27, X
    159c:	ef 96       	adiw	r28, 0x3f	; 63
    159e:	bf af       	std	Y+63, r27	; 0x3f
    15a0:	ef 97       	sbiw	r28, 0x3f	; 63
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    15a2:	8b 2f       	mov	r24, r27
    15a4:	83 70       	andi	r24, 0x03	; 3
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	49 f1       	breq	.+82     	; 0x15fc <USB_ProcessHIDReport+0x15a>
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	99 f0       	breq	.+38     	; 0x15d4 <USB_ProcessHIDReport+0x132>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	c9 f1       	breq	.+114    	; 0x1624 <USB_ProcessHIDReport+0x182>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
    15b2:	ef ef       	ldi	r30, 0xFF	; 255
    15b4:	ce 1a       	sub	r12, r30
    15b6:	de 0a       	sbc	r13, r30
		ReportSize--;
    15b8:	e7 96       	adiw	r28, 0x37	; 55
    15ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    15bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    15be:	e7 97       	sbiw	r28, 0x37	; 55
    15c0:	21 50       	subi	r18, 0x01	; 1
    15c2:	31 09       	sbc	r19, r1
    15c4:	e7 96       	adiw	r28, 0x37	; 55
    15c6:	3f af       	std	Y+63, r19	; 0x3f
    15c8:	2e af       	std	Y+62, r18	; 0x3e
    15ca:	e7 97       	sbiw	r28, 0x37	; 55
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
    15cc:	81 2c       	mov	r8, r1
    15ce:	91 2c       	mov	r9, r1
    15d0:	54 01       	movw	r10, r8
    15d2:	3a c0       	rjmp	.+116    	; 0x1648 <USB_ProcessHIDReport+0x1a6>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    15d4:	d6 01       	movw	r26, r12
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	8d 90       	ld	r8, X+
    15da:	9d 90       	ld	r9, X+
    15dc:	ad 90       	ld	r10, X+
    15de:	bc 90       	ld	r11, X
    15e0:	14 97       	sbiw	r26, 0x04	; 4
				ReportSize     -= 4;
    15e2:	e7 96       	adiw	r28, 0x37	; 55
    15e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    15e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    15e8:	e7 97       	sbiw	r28, 0x37	; 55
    15ea:	35 97       	sbiw	r30, 0x05	; 5
    15ec:	e7 96       	adiw	r28, 0x37	; 55
    15ee:	ff af       	std	Y+63, r31	; 0x3f
    15f0:	ee af       	std	Y+62, r30	; 0x3e
    15f2:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
    15f4:	f5 e0       	ldi	r31, 0x05	; 5
    15f6:	cf 0e       	add	r12, r31
    15f8:	d1 1c       	adc	r13, r1
				break;
    15fa:	26 c0       	rjmp	.+76     	; 0x1648 <USB_ProcessHIDReport+0x1a6>
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    15fc:	d6 01       	movw	r26, r12
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	8d 90       	ld	r8, X+
    1602:	9c 90       	ld	r9, X
    1604:	12 97       	sbiw	r26, 0x02	; 2
    1606:	a1 2c       	mov	r10, r1
    1608:	b1 2c       	mov	r11, r1
				ReportSize     -= 2;
    160a:	e7 96       	adiw	r28, 0x37	; 55
    160c:	ee ad       	ldd	r30, Y+62	; 0x3e
    160e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1610:	e7 97       	sbiw	r28, 0x37	; 55
    1612:	33 97       	sbiw	r30, 0x03	; 3
    1614:	e7 96       	adiw	r28, 0x37	; 55
    1616:	ff af       	std	Y+63, r31	; 0x3f
    1618:	ee af       	std	Y+62, r30	; 0x3e
    161a:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
    161c:	f3 e0       	ldi	r31, 0x03	; 3
    161e:	cf 0e       	add	r12, r31
    1620:	d1 1c       	adc	r13, r1
				break;
    1622:	12 c0       	rjmp	.+36     	; 0x1648 <USB_ProcessHIDReport+0x1a6>
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    1624:	d6 01       	movw	r26, r12
    1626:	11 96       	adiw	r26, 0x01	; 1
    1628:	8c 90       	ld	r8, X
    162a:	91 2c       	mov	r9, r1
    162c:	a1 2c       	mov	r10, r1
    162e:	b1 2c       	mov	r11, r1
				ReportSize     -= 1;
    1630:	e7 96       	adiw	r28, 0x37	; 55
    1632:	ee ad       	ldd	r30, Y+62	; 0x3e
    1634:	ff ad       	ldd	r31, Y+63	; 0x3f
    1636:	e7 97       	sbiw	r28, 0x37	; 55
    1638:	32 97       	sbiw	r30, 0x02	; 2
    163a:	e7 96       	adiw	r28, 0x37	; 55
    163c:	ff af       	std	Y+63, r31	; 0x3f
    163e:	ee af       	std	Y+62, r30	; 0x3e
    1640:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
    1642:	f2 e0       	ldi	r31, 0x02	; 2
    1644:	cf 0e       	add	r12, r31
    1646:	d1 1c       	adc	r13, r1
    1648:	ef 96       	adiw	r28, 0x3f	; 63
    164a:	1f ad       	ldd	r17, Y+63	; 0x3f
    164c:	ef 97       	sbiw	r28, 0x3f	; 63
    164e:	1c 7f       	andi	r17, 0xFC	; 252
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1650:	14 36       	cpi	r17, 0x64	; 100
    1652:	09 f4       	brne	.+2      	; 0x1656 <USB_ProcessHIDReport+0x1b4>
    1654:	9d c0       	rjmp	.+314    	; 0x1790 <USB_ProcessHIDReport+0x2ee>
    1656:	88 f5       	brcc	.+98     	; 0x16ba <USB_ProcessHIDReport+0x218>
    1658:	14 32       	cpi	r17, 0x24	; 36
    165a:	09 f4       	brne	.+2      	; 0x165e <USB_ProcessHIDReport+0x1bc>
    165c:	83 c0       	rjmp	.+262    	; 0x1764 <USB_ProcessHIDReport+0x2c2>
    165e:	b0 f4       	brcc	.+44     	; 0x168c <USB_ProcessHIDReport+0x1ea>
    1660:	18 30       	cpi	r17, 0x08	; 8
    1662:	09 f4       	brne	.+2      	; 0x1666 <USB_ProcessHIDReport+0x1c4>
    1664:	ff c0       	rjmp	.+510    	; 0x1864 <USB_ProcessHIDReport+0x3c2>
    1666:	48 f4       	brcc	.+18     	; 0x167a <USB_ProcessHIDReport+0x1d8>
    1668:	14 30       	cpi	r17, 0x04	; 4
    166a:	09 f0       	breq	.+2      	; 0x166e <USB_ProcessHIDReport+0x1cc>
    166c:	3d c2       	rjmp	.+1146   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    166e:	d7 01       	movw	r26, r14
    1670:	12 96       	adiw	r26, 0x02	; 2
    1672:	9c 92       	st	X, r9
    1674:	8e 92       	st	-X, r8
    1676:	11 97       	sbiw	r26, 0x01	; 1
				break;
    1678:	37 c2       	rjmp	.+1134   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    167a:	14 31       	cpi	r17, 0x14	; 20
    167c:	09 f4       	brne	.+2      	; 0x1680 <USB_ProcessHIDReport+0x1de>
    167e:	6c c0       	rjmp	.+216    	; 0x1758 <USB_ProcessHIDReport+0x2b6>
    1680:	18 31       	cpi	r17, 0x18	; 24
    1682:	09 f0       	breq	.+2      	; 0x1686 <USB_ProcessHIDReport+0x1e4>
    1684:	31 c2       	rjmp	.+1122   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
				break;
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
    1686:	24 01       	movw	r4, r8
    1688:	35 01       	movw	r6, r10
    168a:	2e c2       	rjmp	.+1116   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    168c:	14 33       	cpi	r17, 0x34	; 52
    168e:	09 f4       	brne	.+2      	; 0x1692 <USB_ProcessHIDReport+0x1f0>
    1690:	71 c0       	rjmp	.+226    	; 0x1774 <USB_ProcessHIDReport+0x2d2>
    1692:	50 f4       	brcc	.+20     	; 0x16a8 <USB_ProcessHIDReport+0x206>
    1694:	18 32       	cpi	r17, 0x28	; 40
    1696:	09 f0       	breq	.+2      	; 0x169a <USB_ProcessHIDReport+0x1f8>
    1698:	27 c2       	rjmp	.+1102   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
    169a:	ed 96       	adiw	r28, 0x3d	; 61
    169c:	8c ae       	std	Y+60, r8	; 0x3c
    169e:	9d ae       	std	Y+61, r9	; 0x3d
    16a0:	ae ae       	std	Y+62, r10	; 0x3e
    16a2:	bf ae       	std	Y+63, r11	; 0x3f
    16a4:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
    16a6:	20 c2       	rjmp	.+1088   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    16a8:	14 34       	cpi	r17, 0x44	; 68
    16aa:	09 f4       	brne	.+2      	; 0x16ae <USB_ProcessHIDReport+0x20c>
    16ac:	69 c0       	rjmp	.+210    	; 0x1780 <USB_ProcessHIDReport+0x2de>
    16ae:	14 35       	cpi	r17, 0x54	; 84
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <USB_ProcessHIDReport+0x212>
    16b2:	1a c2       	rjmp	.+1076   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    16b4:	f7 01       	movw	r30, r14
    16b6:	81 86       	std	Z+9, r8	; 0x09
				break;
    16b8:	17 c2       	rjmp	.+1070   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    16ba:	14 39       	cpi	r17, 0x94	; 148
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <USB_ProcessHIDReport+0x21e>
    16be:	70 c0       	rjmp	.+224    	; 0x17a0 <USB_ProcessHIDReport+0x2fe>
    16c0:	78 f4       	brcc	.+30     	; 0x16e0 <USB_ProcessHIDReport+0x23e>
    16c2:	10 38       	cpi	r17, 0x80	; 128
    16c4:	e1 f0       	breq	.+56     	; 0x16fe <USB_ProcessHIDReport+0x25c>
    16c6:	30 f4       	brcc	.+12     	; 0x16d4 <USB_ProcessHIDReport+0x232>
    16c8:	14 37       	cpi	r17, 0x74	; 116
    16ca:	09 f0       	breq	.+2      	; 0x16ce <USB_ProcessHIDReport+0x22c>
    16cc:	0d c2       	rjmp	.+1050   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    16ce:	f7 01       	movw	r30, r14
    16d0:	80 82       	st	Z, r8
				break;
    16d2:	0a c2       	rjmp	.+1044   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    16d4:	14 38       	cpi	r17, 0x84	; 132
    16d6:	09 f4       	brne	.+2      	; 0x16da <USB_ProcessHIDReport+0x238>
    16d8:	67 c0       	rjmp	.+206    	; 0x17a8 <USB_ProcessHIDReport+0x306>
    16da:	10 39       	cpi	r17, 0x90	; 144
    16dc:	81 f0       	breq	.+32     	; 0x16fe <USB_ProcessHIDReport+0x25c>
    16de:	04 c2       	rjmp	.+1032   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
    16e0:	10 3b       	cpi	r17, 0xB0	; 176
    16e2:	69 f0       	breq	.+26     	; 0x16fe <USB_ProcessHIDReport+0x25c>
    16e4:	30 f4       	brcc	.+12     	; 0x16f2 <USB_ProcessHIDReport+0x250>
    16e6:	10 3a       	cpi	r17, 0xA0	; 160
    16e8:	09 f4       	brne	.+2      	; 0x16ec <USB_ProcessHIDReport+0x24a>
    16ea:	ca c0       	rjmp	.+404    	; 0x1880 <USB_ProcessHIDReport+0x3de>
    16ec:	14 3a       	cpi	r17, 0xA4	; 164
    16ee:	c9 f0       	breq	.+50     	; 0x1722 <USB_ProcessHIDReport+0x280>
    16f0:	fb c1       	rjmp	.+1014   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
    16f2:	14 3b       	cpi	r17, 0xB4	; 180
    16f4:	39 f1       	breq	.+78     	; 0x1744 <USB_ProcessHIDReport+0x2a2>
    16f6:	10 3c       	cpi	r17, 0xC0	; 192
    16f8:	09 f4       	brne	.+2      	; 0x16fc <USB_ProcessHIDReport+0x25a>
    16fa:	2a c1       	rjmp	.+596    	; 0x1950 <USB_ProcessHIDReport+0x4ae>
    16fc:	f5 c1       	rjmp	.+1002   	; 0x1ae8 <USB_ProcessHIDReport+0x646>
    16fe:	ee 96       	adiw	r28, 0x3e	; 62
    1700:	1f ae       	std	Y+63, r1	; 0x3f
    1702:	ee 97       	sbiw	r28, 0x3e	; 62
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1704:	a5 01       	movw	r20, r10
    1706:	94 01       	movw	r18, r8
    1708:	21 70       	andi	r18, 0x01	; 1
    170a:	33 27       	eor	r19, r19
    170c:	44 27       	eor	r20, r20
    170e:	55 27       	eor	r21, r21
    1710:	cb 57       	subi	r28, 0x7B	; 123
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	28 83       	st	Y, r18
    1716:	39 83       	std	Y+1, r19	; 0x01
    1718:	4a 83       	std	Y+2, r20	; 0x02
    171a:	5b 83       	std	Y+3, r21	; 0x03
    171c:	c5 58       	subi	r28, 0x85	; 133
    171e:	d0 40       	sbci	r29, 0x00	; 0
    1720:	47 c1       	rjmp	.+654    	; 0x19b0 <USB_ProcessHIDReport+0x50e>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1722:	ce 01       	movw	r24, r28
    1724:	4d 96       	adiw	r24, 0x1d	; 29
    1726:	e8 16       	cp	r14, r24
    1728:	f9 06       	cpc	r15, r25
    172a:	09 f4       	brne	.+2      	; 0x172e <USB_ProcessHIDReport+0x28c>
    172c:	f4 c1       	rjmp	.+1000   	; 0x1b16 <USB_ProcessHIDReport+0x674>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    172e:	c7 01       	movw	r24, r14
    1730:	4c 96       	adiw	r24, 0x1c	; 28
    1732:	2a e2       	ldi	r18, 0x2A	; 42
    1734:	f7 01       	movw	r30, r14
    1736:	dc 01       	movw	r26, r24
    1738:	01 90       	ld	r0, Z+
    173a:	0d 92       	st	X+, r0
    173c:	2a 95       	dec	r18
    173e:	e1 f7       	brne	.-8      	; 0x1738 <USB_ProcessHIDReport+0x296>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    1740:	7c 01       	movw	r14, r24
				break;
    1742:	d2 c1       	rjmp	.+932    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	8e 15       	cp	r24, r14
    174a:	9f 05       	cpc	r25, r15
    174c:	09 f4       	brne	.+2      	; 0x1750 <USB_ProcessHIDReport+0x2ae>
    174e:	e5 c1       	rjmp	.+970    	; 0x1b1a <USB_ProcessHIDReport+0x678>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    1750:	3c e1       	ldi	r19, 0x1C	; 28
    1752:	e3 1a       	sub	r14, r19
    1754:	f1 08       	sbc	r15, r1
				break;
    1756:	c8 c1       	rjmp	.+912    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1758:	f7 01       	movw	r30, r14
    175a:	82 86       	std	Z+10, r8	; 0x0a
    175c:	93 86       	std	Z+11, r9	; 0x0b
    175e:	a4 86       	std	Z+12, r10	; 0x0c
    1760:	b5 86       	std	Z+13, r11	; 0x0d
				break;
    1762:	c2 c1       	rjmp	.+900    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    1764:	d7 01       	movw	r26, r14
    1766:	1e 96       	adiw	r26, 0x0e	; 14
    1768:	8d 92       	st	X+, r8
    176a:	9d 92       	st	X+, r9
    176c:	ad 92       	st	X+, r10
    176e:	bc 92       	st	X, r11
    1770:	51 97       	sbiw	r26, 0x11	; 17
				break;
    1772:	ba c1       	rjmp	.+884    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    1774:	f7 01       	movw	r30, r14
    1776:	82 8a       	std	Z+18, r8	; 0x12
    1778:	93 8a       	std	Z+19, r9	; 0x13
    177a:	a4 8a       	std	Z+20, r10	; 0x14
    177c:	b5 8a       	std	Z+21, r11	; 0x15
				break;
    177e:	b4 c1       	rjmp	.+872    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    1780:	d7 01       	movw	r26, r14
    1782:	56 96       	adiw	r26, 0x16	; 22
    1784:	8d 92       	st	X+, r8
    1786:	9d 92       	st	X+, r9
    1788:	ad 92       	st	X+, r10
    178a:	bc 92       	st	X, r11
    178c:	59 97       	sbiw	r26, 0x19	; 25
				break;
    178e:	ac c1       	rjmp	.+856    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1790:	d7 01       	movw	r26, r14
    1792:	15 96       	adiw	r26, 0x05	; 5
    1794:	8d 92       	st	X+, r8
    1796:	9d 92       	st	X+, r9
    1798:	ad 92       	st	X+, r10
    179a:	bc 92       	st	X, r11
    179c:	18 97       	sbiw	r26, 0x08	; 8
				break;
    179e:	a4 c1       	rjmp	.+840    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    17a0:	d7 01       	movw	r26, r14
    17a2:	5a 96       	adiw	r26, 0x1a	; 26
    17a4:	8c 92       	st	X, r8
				break;
    17a6:	a0 c1       	rjmp	.+832    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    17a8:	98 2d       	mov	r25, r8
    17aa:	f7 01       	movw	r30, r14
    17ac:	83 8e       	std	Z+27, r8	; 0x1b

				if (ParserData->UsingReportIDs)
    17ae:	cd 57       	subi	r28, 0x7D	; 125
    17b0:	df 4f       	sbci	r29, 0xFF	; 255
    17b2:	a8 81       	ld	r26, Y
    17b4:	b9 81       	ldd	r27, Y+1	; 0x01
    17b6:	c3 58       	subi	r28, 0x83	; 131
    17b8:	d0 40       	sbci	r29, 0x00	; 0
    17ba:	8c 91       	ld	r24, X
    17bc:	88 23       	and	r24, r24
    17be:	09 f4       	brne	.+2      	; 0x17c2 <USB_ProcessHIDReport+0x320>
    17c0:	41 c0       	rjmp	.+130    	; 0x1844 <USB_ProcessHIDReport+0x3a2>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    17c2:	c5 57       	subi	r28, 0x75	; 117
    17c4:	df 4f       	sbci	r29, 0xFF	; 255
    17c6:	e8 81       	ld	r30, Y
    17c8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ca:	cb 58       	subi	r28, 0x8B	; 139
    17cc:	d0 40       	sbci	r29, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	f1 01       	movw	r30, r2
    17d2:	e0 57       	subi	r30, 0x70	; 112
    17d4:	fc 4f       	sbci	r31, 0xFC	; 252
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	28 17       	cp	r18, r24
    17dc:	b8 f4       	brcc	.+46     	; 0x180c <USB_ProcessHIDReport+0x36a>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    17de:	a9 01       	movw	r20, r18
    17e0:	60 81       	ld	r22, Z
    17e2:	2f 5f       	subi	r18, 0xFF	; 255
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	37 96       	adiw	r30, 0x07	; 7
    17e8:	96 13       	cpse	r25, r22
    17ea:	f7 cf       	rjmp	.-18     	; 0x17da <USB_ProcessHIDReport+0x338>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    17ec:	27 e0       	ldi	r18, 0x07	; 7
    17ee:	24 9f       	mul	r18, r20
    17f0:	c0 01       	movw	r24, r0
    17f2:	25 9f       	mul	r18, r21
    17f4:	90 0d       	add	r25, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	80 57       	subi	r24, 0x70	; 112
    17fa:	9c 4f       	sbci	r25, 0xFC	; 252
    17fc:	91 01       	movw	r18, r2
    17fe:	28 0f       	add	r18, r24
    1800:	39 1f       	adc	r19, r25
    1802:	e9 96       	adiw	r28, 0x39	; 57
    1804:	3f af       	std	Y+63, r19	; 0x3f
    1806:	2e af       	std	Y+62, r18	; 0x3e
    1808:	e9 97       	sbiw	r28, 0x39	; 57
    180a:	1c c0       	rjmp	.+56     	; 0x1844 <USB_ProcessHIDReport+0x3a2>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    180c:	8a 30       	cpi	r24, 0x0A	; 10
    180e:	09 f4       	brne	.+2      	; 0x1812 <USB_ProcessHIDReport+0x370>
    1810:	8e c1       	rjmp	.+796    	; 0x1b2e <USB_ProcessHIDReport+0x68c>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	98 0f       	add	r25, r24
    1816:	c1 58       	subi	r28, 0x81	; 129
    1818:	df 4f       	sbci	r29, 0xFF	; 255
    181a:	a8 81       	ld	r26, Y
    181c:	b9 81       	ldd	r27, Y+1	; 0x01
    181e:	cf 57       	subi	r28, 0x7F	; 127
    1820:	d0 40       	sbci	r29, 0x00	; 0
    1822:	9c 93       	st	X, r25
    1824:	97 e0       	ldi	r25, 0x07	; 7
    1826:	91 01       	movw	r18, r2
    1828:	98 9f       	mul	r25, r24
    182a:	20 0d       	add	r18, r0
    182c:	31 1d       	adc	r19, r1
    182e:	11 24       	eor	r1, r1
    1830:	f9 01       	movw	r30, r18
    1832:	e0 57       	subi	r30, 0x70	; 112
    1834:	fc 4f       	sbci	r31, 0xFC	; 252
    1836:	e9 96       	adiw	r28, 0x39	; 57
    1838:	ff af       	std	Y+63, r31	; 0x3f
    183a:	ee af       	std	Y+62, r30	; 0x3e
    183c:	e9 97       	sbiw	r28, 0x39	; 57
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    183e:	11 92       	st	Z+, r1
    1840:	9a 95       	dec	r25
    1842:	e9 f7       	brne	.-6      	; 0x183e <USB_ProcessHIDReport+0x39c>
					}
				}

				ParserData->UsingReportIDs = true;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	cd 57       	subi	r28, 0x7D	; 125
    1848:	df 4f       	sbci	r29, 0xFF	; 255
    184a:	a8 81       	ld	r26, Y
    184c:	b9 81       	ldd	r27, Y+1	; 0x01
    184e:	c3 58       	subi	r28, 0x83	; 131
    1850:	d0 40       	sbci	r29, 0x00	; 0
    1852:	8c 93       	st	X, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1854:	f7 01       	movw	r30, r14
    1856:	83 8d       	ldd	r24, Z+27	; 0x1b
    1858:	e9 96       	adiw	r28, 0x39	; 57
    185a:	ae ad       	ldd	r26, Y+62	; 0x3e
    185c:	bf ad       	ldd	r27, Y+63	; 0x3f
    185e:	e9 97       	sbiw	r28, 0x39	; 57
    1860:	8c 93       	st	X, r24
				break;
    1862:	42 c1       	rjmp	.+644    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1864:	08 30       	cpi	r16, 0x08	; 8
    1866:	09 f4       	brne	.+2      	; 0x186a <USB_ProcessHIDReport+0x3c8>
    1868:	5a c1       	rjmp	.+692    	; 0x1b1e <USB_ProcessHIDReport+0x67c>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    186a:	fe 01       	movw	r30, r28
    186c:	ed 59       	subi	r30, 0x9D	; 157
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	e0 0f       	add	r30, r16
    1872:	f1 1d       	adc	r31, r1
    1874:	e0 0f       	add	r30, r16
    1876:	f1 1d       	adc	r31, r1
    1878:	91 82       	std	Z+1, r9	; 0x01
    187a:	80 82       	st	Z, r8
    187c:	0f 5f       	subi	r16, 0xFF	; 255
				break;
    187e:	34 c1       	rjmp	.+616    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1880:	e5 96       	adiw	r28, 0x35	; 53
    1882:	ee ad       	ldd	r30, Y+62	; 0x3e
    1884:	ff ad       	ldd	r31, Y+63	; 0x3f
    1886:	e5 97       	sbiw	r28, 0x35	; 53
    1888:	ef 2b       	or	r30, r31
    188a:	41 f4       	brne	.+16     	; 0x189c <USB_ProcessHIDReport+0x3fa>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    188c:	91 01       	movw	r18, r2
    188e:	27 5b       	subi	r18, 0xB7	; 183
    1890:	3c 4f       	sbci	r19, 0xFC	; 252
    1892:	e5 96       	adiw	r28, 0x35	; 53
    1894:	3f af       	std	Y+63, r19	; 0x3f
    1896:	2e af       	std	Y+62, r18	; 0x3e
    1898:	e5 97       	sbiw	r28, 0x35	; 53
    189a:	1d c0       	rjmp	.+58     	; 0x18d6 <USB_ProcessHIDReport+0x434>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    189c:	f1 01       	movw	r30, r2
    189e:	e0 5b       	subi	r30, 0xB0	; 176
    18a0:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
    18a2:	85 81       	ldd	r24, Z+5	; 0x05
    18a4:	96 81       	ldd	r25, Z+6	; 0x06
    18a6:	89 2b       	or	r24, r25
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <USB_ProcessHIDReport+0x420>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    18aa:	c7 57       	subi	r28, 0x77	; 119
    18ac:	df 4f       	sbci	r29, 0xFF	; 255
    18ae:	48 81       	ld	r20, Y
    18b0:	59 81       	ldd	r21, Y+1	; 0x01
    18b2:	c9 58       	subi	r28, 0x89	; 137
    18b4:	d0 40       	sbci	r29, 0x00	; 0
    18b6:	e4 17       	cp	r30, r20
    18b8:	f5 07       	cpc	r31, r21
    18ba:	09 f4       	brne	.+2      	; 0x18be <USB_ProcessHIDReport+0x41c>
    18bc:	32 c1       	rjmp	.+612    	; 0x1b22 <USB_ProcessHIDReport+0x680>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    18be:	37 96       	adiw	r30, 0x07	; 7
    18c0:	f0 cf       	rjmp	.-32     	; 0x18a2 <USB_ProcessHIDReport+0x400>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    18c2:	e5 96       	adiw	r28, 0x35	; 53
    18c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    18c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    18c8:	e5 97       	sbiw	r28, 0x35	; 53
    18ca:	96 83       	std	Z+6, r25	; 0x06
    18cc:	85 83       	std	Z+5, r24	; 0x05
    18ce:	e5 96       	adiw	r28, 0x35	; 53
    18d0:	ff af       	std	Y+63, r31	; 0x3f
    18d2:	ee af       	std	Y+62, r30	; 0x3e
    18d4:	e5 97       	sbiw	r28, 0x35	; 53
				}

				CurrCollectionPath->Type       = ReportItemData;
    18d6:	e5 96       	adiw	r28, 0x35	; 53
    18d8:	ae ad       	ldd	r26, Y+62	; 0x3e
    18da:	bf ad       	ldd	r27, Y+63	; 0x3f
    18dc:	e5 97       	sbiw	r28, 0x35	; 53
    18de:	8c 92       	st	X, r8
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    18e0:	f7 01       	movw	r30, r14
    18e2:	81 81       	ldd	r24, Z+1	; 0x01
    18e4:	92 81       	ldd	r25, Z+2	; 0x02
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	9c 93       	st	X, r25
    18ea:	8e 93       	st	-X, r24
    18ec:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
    18ee:	00 23       	and	r16, r16
    18f0:	a9 f0       	breq	.+42     	; 0x191c <USB_ProcessHIDReport+0x47a>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    18f2:	a5 96       	adiw	r28, 0x25	; 37
    18f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    18f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    18f8:	a5 97       	sbiw	r28, 0x25	; 37
    18fa:	14 96       	adiw	r26, 0x04	; 4
    18fc:	9c 93       	st	X, r25
    18fe:	8e 93       	st	-X, r24
    1900:	13 97       	sbiw	r26, 0x03	; 3
    1902:	fe 01       	movw	r30, r28
    1904:	ed 59       	subi	r30, 0x9D	; 157
    1906:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 0; i < UsageListSize; i++)
    1908:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
    190a:	22 81       	ldd	r18, Z+2	; 0x02
    190c:	33 81       	ldd	r19, Z+3	; 0x03
    190e:	21 93       	st	Z+, r18
    1910:	31 93       	st	Z+, r19

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1912:	8f 5f       	subi	r24, 0xFF	; 255
    1914:	08 13       	cpse	r16, r24
    1916:	f9 cf       	rjmp	.-14     	; 0x190a <USB_ProcessHIDReport+0x468>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1918:	01 50       	subi	r16, 0x01	; 1
    191a:	e6 c0       	rjmp	.+460    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    191c:	ed 96       	adiw	r28, 0x3d	; 61
    191e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1920:	3d ad       	ldd	r19, Y+61	; 0x3d
    1922:	4e ad       	ldd	r20, Y+62	; 0x3e
    1924:	5f ad       	ldd	r21, Y+63	; 0x3f
    1926:	ed 97       	sbiw	r28, 0x3d	; 61
    1928:	24 15       	cp	r18, r4
    192a:	35 05       	cpc	r19, r5
    192c:	46 05       	cpc	r20, r6
    192e:	57 05       	cpc	r21, r7
    1930:	08 f4       	brcc	.+2      	; 0x1934 <USB_ProcessHIDReport+0x492>
    1932:	da c0       	rjmp	.+436    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1934:	e5 96       	adiw	r28, 0x35	; 53
    1936:	ae ad       	ldd	r26, Y+62	; 0x3e
    1938:	bf ad       	ldd	r27, Y+63	; 0x3f
    193a:	e5 97       	sbiw	r28, 0x35	; 53
    193c:	14 96       	adiw	r26, 0x04	; 4
    193e:	5c 92       	st	X, r5
    1940:	4e 92       	st	-X, r4
    1942:	13 97       	sbiw	r26, 0x03	; 3
    1944:	bf ef       	ldi	r27, 0xFF	; 255
    1946:	4b 1a       	sub	r4, r27
    1948:	5b 0a       	sbc	r5, r27
    194a:	6b 0a       	sbc	r6, r27
    194c:	7b 0a       	sbc	r7, r27
    194e:	cc c0       	rjmp	.+408    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1950:	e5 96       	adiw	r28, 0x35	; 53
    1952:	ee ad       	ldd	r30, Y+62	; 0x3e
    1954:	ff ad       	ldd	r31, Y+63	; 0x3f
    1956:	e5 97       	sbiw	r28, 0x35	; 53
    1958:	30 97       	sbiw	r30, 0x00	; 0
    195a:	09 f4       	brne	.+2      	; 0x195e <USB_ProcessHIDReport+0x4bc>
    195c:	e4 c0       	rjmp	.+456    	; 0x1b26 <USB_ProcessHIDReport+0x684>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    195e:	25 81       	ldd	r18, Z+5	; 0x05
    1960:	36 81       	ldd	r19, Z+6	; 0x06
    1962:	e5 96       	adiw	r28, 0x35	; 53
    1964:	3f af       	std	Y+63, r19	; 0x3f
    1966:	2e af       	std	Y+62, r18	; 0x3e
    1968:	e5 97       	sbiw	r28, 0x35	; 53
				break;
    196a:	be c0       	rjmp	.+380    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    196c:	d1 01       	movw	r26, r2
    196e:	ea e2       	ldi	r30, 0x2A	; 42
    1970:	e8 9f       	mul	r30, r24
    1972:	a0 0d       	add	r26, r0
    1974:	b1 1d       	adc	r27, r1
    1976:	11 24       	eor	r1, r1
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	fe 01       	movw	r30, r28
    197c:	f9 96       	adiw	r30, 0x39	; 57
    197e:	8a e2       	ldi	r24, 0x2A	; 42
    1980:	01 90       	ld	r0, Z+
    1982:	0d 92       	st	X+, r0
    1984:	8a 95       	dec	r24
    1986:	e1 f7       	brne	.-8      	; 0x1980 <USB_ProcessHIDReport+0x4de>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1988:	cb 57       	subi	r28, 0x7B	; 123
    198a:	df 4f       	sbci	r29, 0xFF	; 255
    198c:	28 81       	ld	r18, Y
    198e:	39 81       	ldd	r19, Y+1	; 0x01
    1990:	4a 81       	ldd	r20, Y+2	; 0x02
    1992:	5b 81       	ldd	r21, Y+3	; 0x03
    1994:	c5 58       	subi	r28, 0x85	; 133
    1996:	d0 40       	sbci	r29, 0x00	; 0
    1998:	23 2b       	or	r18, r19
    199a:	24 2b       	or	r18, r20
    199c:	25 2b       	or	r18, r21
    199e:	09 f4       	brne	.+2      	; 0x19a2 <USB_ProcessHIDReport+0x500>
    19a0:	97 c0       	rjmp	.+302    	; 0x1ad0 <USB_ProcessHIDReport+0x62e>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    19a2:	ee 96       	adiw	r28, 0x3e	; 62
    19a4:	bf ad       	ldd	r27, Y+63	; 0x3f
    19a6:	ee 97       	sbiw	r28, 0x3e	; 62
    19a8:	bf 5f       	subi	r27, 0xFF	; 255
    19aa:	ee 96       	adiw	r28, 0x3e	; 62
    19ac:	bf af       	std	Y+63, r27	; 0x3f
    19ae:	ee 97       	sbiw	r28, 0x3e	; 62
    19b0:	f7 01       	movw	r30, r14
    19b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    19b4:	ee 96       	adiw	r28, 0x3e	; 62
    19b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b8:	ee 97       	sbiw	r28, 0x3e	; 62
    19ba:	f8 17       	cp	r31, r24
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <USB_ProcessHIDReport+0x51e>
    19be:	94 c0       	rjmp	.+296    	; 0x1ae8 <USB_ProcessHIDReport+0x646>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    19c0:	8a e1       	ldi	r24, 0x1A	; 26
    19c2:	f7 01       	movw	r30, r14
    19c4:	de 01       	movw	r26, r28
    19c6:	af 5b       	subi	r26, 0xBF	; 191
    19c8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ca:	01 90       	ld	r0, Z+
    19cc:	0d 92       	st	X+, r0
    19ce:	8a 95       	dec	r24
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <USB_ProcessHIDReport+0x528>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    19d2:	9d ae       	std	Y+61, r9	; 0x3d
    19d4:	8c ae       	std	Y+60, r8	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
    19d6:	e5 96       	adiw	r28, 0x35	; 53
    19d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    19da:	5f ad       	ldd	r21, Y+63	; 0x3f
    19dc:	e5 97       	sbiw	r28, 0x35	; 53
    19de:	21 96       	adiw	r28, 0x01	; 1
    19e0:	5f af       	std	Y+63, r21	; 0x3f
    19e2:	4e af       	std	Y+62, r20	; 0x3e
    19e4:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    19e6:	d7 01       	movw	r26, r14
    19e8:	5b 96       	adiw	r26, 0x1b	; 27
    19ea:	8c 91       	ld	r24, X
    19ec:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
    19ee:	00 23       	and	r16, r16
    19f0:	a9 f0       	breq	.+42     	; 0x1a1c <USB_ProcessHIDReport+0x57a>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    19f2:	a5 96       	adiw	r28, 0x25	; 37
    19f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f8:	a5 97       	sbiw	r28, 0x25	; 37
    19fa:	26 96       	adiw	r28, 0x06	; 6
    19fc:	9f af       	std	Y+63, r25	; 0x3f
    19fe:	8e af       	std	Y+62, r24	; 0x3e
    1a00:	26 97       	sbiw	r28, 0x06	; 6
    1a02:	fe 01       	movw	r30, r28
    1a04:	ed 59       	subi	r30, 0x9D	; 157
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 0; i < UsageListSize; i++)
    1a08:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
    1a0a:	22 81       	ldd	r18, Z+2	; 0x02
    1a0c:	33 81       	ldd	r19, Z+3	; 0x03
    1a0e:	21 93       	st	Z+, r18
    1a10:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	08 13       	cpse	r16, r24
    1a16:	f9 cf       	rjmp	.-14     	; 0x1a0a <USB_ProcessHIDReport+0x568>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1a18:	01 50       	subi	r16, 0x01	; 1
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <USB_ProcessHIDReport+0x5a2>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1a1c:	ed 96       	adiw	r28, 0x3d	; 61
    1a1e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a20:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a22:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a24:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a26:	ed 97       	sbiw	r28, 0x3d	; 61
    1a28:	24 15       	cp	r18, r4
    1a2a:	35 05       	cpc	r19, r5
    1a2c:	46 05       	cpc	r20, r6
    1a2e:	57 05       	cpc	r21, r7
    1a30:	48 f0       	brcs	.+18     	; 0x1a44 <USB_ProcessHIDReport+0x5a2>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1a32:	26 96       	adiw	r28, 0x06	; 6
    1a34:	5f ae       	std	Y+63, r5	; 0x3f
    1a36:	4e ae       	std	Y+62, r4	; 0x3e
    1a38:	26 97       	sbiw	r28, 0x06	; 6
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	43 1a       	sub	r4, r19
    1a3e:	53 0a       	sbc	r5, r19
    1a40:	63 0a       	sbc	r6, r19
    1a42:	73 0a       	sbc	r7, r19
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1a44:	10 38       	cpi	r17, 0x80	; 128
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <USB_ProcessHIDReport+0x5aa>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1a48:	1b ae       	std	Y+59, r1	; 0x3b
    1a4a:	07 c0       	rjmp	.+14     	; 0x1a5a <USB_ProcessHIDReport+0x5b8>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1a4c:	10 39       	cpi	r17, 0x90	; 144
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <USB_ProcessHIDReport+0x5b4>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	4b af       	std	Y+59, r20	; 0x3b
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <USB_ProcessHIDReport+0x5b8>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1a56:	52 e0       	ldi	r21, 0x02	; 2
    1a58:	5b af       	std	Y+59, r21	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1a5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a5c:	e9 96       	adiw	r28, 0x39	; 57
    1a5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a60:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a62:	e9 97       	sbiw	r28, 0x39	; 57
    1a64:	e8 0f       	add	r30, r24
    1a66:	f1 1d       	adc	r31, r1
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f1 1d       	adc	r31, r1
    1a6c:	81 81       	ldd	r24, Z+1	; 0x01
    1a6e:	92 81       	ldd	r25, Z+2	; 0x02
    1a70:	9a af       	std	Y+58, r25	; 0x3a
    1a72:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1a74:	d7 01       	movw	r26, r14
    1a76:	2c 91       	ld	r18, X
    1a78:	81 81       	ldd	r24, Z+1	; 0x01
    1a7a:	92 81       	ldd	r25, Z+2	; 0x02
    1a7c:	82 0f       	add	r24, r18
    1a7e:	91 1d       	adc	r25, r1
    1a80:	92 83       	std	Z+2, r25	; 0x02
    1a82:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1a84:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a86:	e9 96       	adiw	r28, 0x39	; 57
    1a88:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a8c:	e9 97       	sbiw	r28, 0x39	; 57
    1a8e:	e8 0f       	add	r30, r24
    1a90:	f1 1d       	adc	r31, r1
    1a92:	e8 0f       	add	r30, r24
    1a94:	f1 1d       	adc	r31, r1
    1a96:	cf 57       	subi	r28, 0x7F	; 127
    1a98:	df 4f       	sbci	r29, 0xFF	; 255
    1a9a:	a8 81       	ld	r26, Y
    1a9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a9e:	c1 58       	subi	r28, 0x81	; 129
    1aa0:	d0 40       	sbci	r29, 0x00	; 0
    1aa2:	2d 91       	ld	r18, X+
    1aa4:	3c 91       	ld	r19, X
    1aa6:	81 81       	ldd	r24, Z+1	; 0x01
    1aa8:	92 81       	ldd	r25, Z+2	; 0x02
    1aaa:	82 17       	cp	r24, r18
    1aac:	93 07       	cpc	r25, r19
    1aae:	08 f4       	brcc	.+2      	; 0x1ab2 <USB_ProcessHIDReport+0x610>
    1ab0:	c9 01       	movw	r24, r18
    1ab2:	cf 57       	subi	r28, 0x7F	; 127
    1ab4:	df 4f       	sbci	r29, 0xFF	; 255
    1ab6:	e8 81       	ld	r30, Y
    1ab8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aba:	c1 58       	subi	r28, 0x81	; 129
    1abc:	d0 40       	sbci	r29, 0x00	; 0
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1ac2:	d1 01       	movw	r26, r2
    1ac4:	8c 91       	ld	r24, X
    1ac6:	84 31       	cpi	r24, 0x14	; 20
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <USB_ProcessHIDReport+0x62a>
    1aca:	50 cf       	rjmp	.-352    	; 0x196c <USB_ProcessHIDReport+0x4ca>
					  return HID_PARSE_InsufficientReportItems;
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	30 c0       	rjmp	.+96     	; 0x1b30 <USB_ProcessHIDReport+0x68e>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	c9 96       	adiw	r24, 0x39	; 57
    1ad4:	0e 94 84 04 	call	0x908	; 0x908 <CALLBACK_HIDParser_FilterHIDReportItem>
    1ad8:	88 23       	and	r24, r24
    1ada:	09 f4       	brne	.+2      	; 0x1ade <USB_ProcessHIDReport+0x63c>
    1adc:	62 cf       	rjmp	.-316    	; 0x19a2 <USB_ProcessHIDReport+0x500>
					  ParserData->TotalReportItems++;
    1ade:	d1 01       	movw	r26, r2
    1ae0:	8c 91       	ld	r24, X
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	8c 93       	st	X, r24
    1ae6:	5d cf       	rjmp	.-326    	; 0x19a2 <USB_ProcessHIDReport+0x500>
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1ae8:	ef 96       	adiw	r28, 0x3f	; 63
    1aea:	8f ad       	ldd	r24, Y+63	; 0x3f
    1aec:	ef 97       	sbiw	r28, 0x3f	; 63
    1aee:	8c 70       	andi	r24, 0x0C	; 12
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <USB_ProcessHIDReport+0x652>
    1af2:	4b cd       	rjmp	.-1386   	; 0x158a <USB_ProcessHIDReport+0xe8>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    1af4:	ed 96       	adiw	r28, 0x3d	; 61
    1af6:	1c ae       	std	Y+60, r1	; 0x3c
    1af8:	1d ae       	std	Y+61, r1	; 0x3d
    1afa:	1e ae       	std	Y+62, r1	; 0x3e
    1afc:	1f ae       	std	Y+63, r1	; 0x3f
    1afe:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    1b00:	41 2c       	mov	r4, r1
    1b02:	51 2c       	mov	r5, r1
    1b04:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    1b06:	00 e0       	ldi	r16, 0x00	; 0
    1b08:	40 cd       	rjmp	.-1408   	; 0x158a <USB_ProcessHIDReport+0xe8>
		}
	}

	if (!(ParserData->TotalReportItems))
    1b0a:	d1 01       	movw	r26, r2
    1b0c:	8c 91       	ld	r24, X
    1b0e:	88 23       	and	r24, r24
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <USB_ProcessHIDReport+0x688>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <USB_ProcessHIDReport+0x68e>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <USB_ProcessHIDReport+0x68e>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <USB_ProcessHIDReport+0x68e>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    1b1e:	86 e0       	ldi	r24, 0x06	; 6
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <USB_ProcessHIDReport+0x68e>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1b22:	85 e0       	ldi	r24, 0x05	; 5
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <USB_ProcessHIDReport+0x68e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1b26:	84 e0       	ldi	r24, 0x04	; 4
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <USB_ProcessHIDReport+0x68e>
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;
    1b2a:	88 e0       	ldi	r24, 0x08	; 8
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <USB_ProcessHIDReport+0x68e>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    1b2e:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1b30:	c4 57       	subi	r28, 0x74	; 116
    1b32:	df 4f       	sbci	r29, 0xFF	; 255
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	9f 90       	pop	r9
    1b54:	8f 90       	pop	r8
    1b56:	7f 90       	pop	r7
    1b58:	6f 90       	pop	r6
    1b5a:	5f 90       	pop	r5
    1b5c:	4f 90       	pop	r4
    1b5e:	3f 90       	pop	r3
    1b60:	2f 90       	pop	r2
    1b62:	08 95       	ret

00001b64 <USB_GetHIDReportItemInfo>:

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1b64:	8f 92       	push	r8
    1b66:	9f 92       	push	r9
    1b68:	af 92       	push	r10
    1b6a:	bf 92       	push	r11
    1b6c:	cf 92       	push	r12
    1b6e:	df 92       	push	r13
    1b70:	ef 92       	push	r14
    1b72:	ff 92       	push	r15
    1b74:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
    1b76:	30 97       	sbiw	r30, 0x00	; 0
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <USB_GetHIDReportItemInfo+0x18>
    1b7a:	48 c0       	rjmp	.+144    	; 0x1c0c <USB_GetHIDReportItemInfo+0xa8>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1b7c:	25 81       	ldd	r18, Z+5	; 0x05
    1b7e:	22 23       	and	r18, r18
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <USB_GetHIDReportItemInfo+0x28>
	{
		if (ReportItem->ReportID != ReportData[0])
    1b82:	dc 01       	movw	r26, r24
    1b84:	3c 91       	ld	r19, X
    1b86:	23 13       	cpse	r18, r19
    1b88:	41 c0       	rjmp	.+130    	; 0x1c0c <USB_GetHIDReportItemInfo+0xa8>
		  return false;

		ReportData++;
    1b8a:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1b8c:	20 85       	ldd	r18, Z+8	; 0x08
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1b94:	c2 a0       	ldd	r12, Z+34	; 0x22
    1b96:	d3 a0       	ldd	r13, Z+35	; 0x23
    1b98:	e4 a0       	ldd	r14, Z+36	; 0x24
    1b9a:	f5 a0       	ldd	r15, Z+37	; 0x25
    1b9c:	c6 a2       	std	Z+38, r12	; 0x26
    1b9e:	d7 a2       	std	Z+39, r13	; 0x27
    1ba0:	e0 a6       	std	Z+40, r14	; 0x28
    1ba2:	f1 a6       	std	Z+41, r15	; 0x29
	ReportItem->Value = 0;
    1ba4:	12 a2       	std	Z+34, r1	; 0x22
    1ba6:	13 a2       	std	Z+35, r1	; 0x23
    1ba8:	14 a2       	std	Z+36, r1	; 0x24
    1baa:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
    1bac:	c1 2c       	mov	r12, r1
    1bae:	d1 2c       	mov	r13, r1
    1bb0:	76 01       	movw	r14, r12
    1bb2:	c3 94       	inc	r12
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1bb4:	21 50       	subi	r18, 0x01	; 1
    1bb6:	31 09       	sbc	r19, r1
    1bb8:	38 f1       	brcs	.+78     	; 0x1c08 <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1bba:	db 01       	movw	r26, r22
    1bbc:	53 e0       	ldi	r21, 0x03	; 3
    1bbe:	b6 95       	lsr	r27
    1bc0:	a7 95       	ror	r26
    1bc2:	5a 95       	dec	r21
    1bc4:	e1 f7       	brne	.-8      	; 0x1bbe <USB_GetHIDReportItemInfo+0x5a>
    1bc6:	a8 0f       	add	r26, r24
    1bc8:	b9 1f       	adc	r27, r25
    1bca:	4c 91       	ld	r20, X
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	db 01       	movw	r26, r22
    1bd0:	a7 70       	andi	r26, 0x07	; 7
    1bd2:	bb 27       	eor	r27, r27
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <USB_GetHIDReportItemInfo+0x76>
    1bd6:	55 95       	asr	r21
    1bd8:	47 95       	ror	r20
    1bda:	aa 95       	dec	r26
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <USB_GetHIDReportItemInfo+0x72>
    1bde:	40 ff       	sbrs	r20, 0
    1be0:	0c c0       	rjmp	.+24     	; 0x1bfa <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
    1be2:	82 a0       	ldd	r8, Z+34	; 0x22
    1be4:	93 a0       	ldd	r9, Z+35	; 0x23
    1be6:	a4 a0       	ldd	r10, Z+36	; 0x24
    1be8:	b5 a0       	ldd	r11, Z+37	; 0x25
    1bea:	8c 28       	or	r8, r12
    1bec:	9d 28       	or	r9, r13
    1bee:	ae 28       	or	r10, r14
    1bf0:	bf 28       	or	r11, r15
    1bf2:	82 a2       	std	Z+34, r8	; 0x22
    1bf4:	93 a2       	std	Z+35, r9	; 0x23
    1bf6:	a4 a2       	std	Z+36, r10	; 0x24
    1bf8:	b5 a2       	std	Z+37, r11	; 0x25

		CurrentBit++;
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
    1bfe:	cc 0c       	add	r12, r12
    1c00:	dd 1c       	adc	r13, r13
    1c02:	ee 1c       	adc	r14, r14
    1c04:	ff 1c       	adc	r15, r15
    1c06:	d6 cf       	rjmp	.-84     	; 0x1bb4 <USB_GetHIDReportItemInfo+0x50>
	}

	return true;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <USB_GetHIDReportItemInfo+0xaa>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	df 90       	pop	r13
    1c14:	cf 90       	pop	r12
    1c16:	bf 90       	pop	r11
    1c18:	af 90       	pop	r10
    1c1a:	9f 90       	pop	r9
    1c1c:	8f 90       	pop	r8
    1c1e:	08 95       	ret

00001c20 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1c20:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1c24:	95 ff       	sbrs	r25, 5
    1c26:	fc cf       	rjmp	.-8      	; 0x1c20 <Serial_putchar>
				UDR1 = DataByte;
    1c28:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	08 95       	ret

00001c32 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1c32:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1c36:	87 ff       	sbrs	r24, 7
    1c38:	08 c0       	rjmp	.+16     	; 0x1c4a <Serial_getchar+0x18>
    1c3a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1c3e:	87 ff       	sbrs	r24, 7
    1c40:	07 c0       	rjmp	.+14     	; 0x1c50 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1c42:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	08 95       	ret
	  return _FDEV_EOF;
    1c4a:	8e ef       	ldi	r24, 0xFE	; 254
    1c4c:	9f ef       	ldi	r25, 0xFF	; 255
    1c4e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1c54:	08 95       	ret

00001c56 <__tablejump2__>:
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	00 24       	eor	r0, r0
    1c5c:	00 1c       	adc	r0, r0
    1c5e:	0b be       	out	0x3b, r0	; 59
    1c60:	07 90       	elpm	r0, Z+
    1c62:	f6 91       	elpm	r31, Z
    1c64:	e0 2d       	mov	r30, r0
    1c66:	09 94       	ijmp

00001c68 <printf_P>:
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	ae 01       	movw	r20, r28
    1c76:	49 5f       	subi	r20, 0xF9	; 249
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	da 01       	movw	r26, r20
    1c7c:	6d 91       	ld	r22, X+
    1c7e:	7d 91       	ld	r23, X+
    1c80:	ad 01       	movw	r20, r26
    1c82:	09 e0       	ldi	r16, 0x09	; 9
    1c84:	15 e0       	ldi	r17, 0x05	; 5
    1c86:	f8 01       	movw	r30, r16
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	13 96       	adiw	r26, 0x03	; 3
    1c90:	2c 91       	ld	r18, X
    1c92:	13 97       	sbiw	r26, 0x03	; 3
    1c94:	28 60       	ori	r18, 0x08	; 8
    1c96:	13 96       	adiw	r26, 0x03	; 3
    1c98:	2c 93       	st	X, r18
    1c9a:	3e d0       	rcall	.+124    	; 0x1d18 <vfprintf>
    1c9c:	d8 01       	movw	r26, r16
    1c9e:	12 96       	adiw	r26, 0x02	; 2
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	13 97       	sbiw	r26, 0x03	; 3
    1ca6:	23 81       	ldd	r18, Z+3	; 0x03
    1ca8:	27 7f       	andi	r18, 0xF7	; 247
    1caa:	23 83       	std	Z+3, r18	; 0x03
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <puts_P>:
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	8c 01       	movw	r16, r24
    1cc0:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <__iob+0x2>
    1cc4:	f0 91 0c 05 	lds	r31, 0x050C	; 0x80050c <__iob+0x3>
    1cc8:	83 81       	ldd	r24, Z+3	; 0x03
    1cca:	81 ff       	sbrs	r24, 1
    1ccc:	1b c0       	rjmp	.+54     	; 0x1d04 <puts_P+0x4e>
    1cce:	d0 e0       	ldi	r29, 0x00	; 0
    1cd0:	c0 e0       	ldi	r28, 0x00	; 0
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	84 91       	lpm	r24, Z
    1cd6:	60 91 0b 05 	lds	r22, 0x050B	; 0x80050b <__iob+0x2>
    1cda:	70 91 0c 05 	lds	r23, 0x050C	; 0x80050c <__iob+0x3>
    1cde:	db 01       	movw	r26, r22
    1ce0:	18 96       	adiw	r26, 0x08	; 8
    1ce2:	ed 91       	ld	r30, X+
    1ce4:	fc 91       	ld	r31, X
    1ce6:	19 97       	sbiw	r26, 0x09	; 9
    1ce8:	88 23       	and	r24, r24
    1cea:	41 f0       	breq	.+16     	; 0x1cfc <puts_P+0x46>
    1cec:	09 95       	icall
    1cee:	89 2b       	or	r24, r25
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <puts_P+0x40>
    1cf2:	df ef       	ldi	r29, 0xFF	; 255
    1cf4:	cf ef       	ldi	r28, 0xFF	; 255
    1cf6:	0f 5f       	subi	r16, 0xFF	; 255
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	eb cf       	rjmp	.-42     	; 0x1cd2 <puts_P+0x1c>
    1cfc:	8a e0       	ldi	r24, 0x0A	; 10
    1cfe:	09 95       	icall
    1d00:	89 2b       	or	r24, r25
    1d02:	19 f0       	breq	.+6      	; 0x1d0a <puts_P+0x54>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <puts_P+0x58>
    1d0a:	8d 2f       	mov	r24, r29
    1d0c:	9c 2f       	mov	r25, r28
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <vfprintf>:
    1d18:	2f 92       	push	r2
    1d1a:	3f 92       	push	r3
    1d1c:	4f 92       	push	r4
    1d1e:	5f 92       	push	r5
    1d20:	6f 92       	push	r6
    1d22:	7f 92       	push	r7
    1d24:	8f 92       	push	r8
    1d26:	9f 92       	push	r9
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	2b 97       	sbiw	r28, 0x0b	; 11
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	6c 01       	movw	r12, r24
    1d4e:	7b 01       	movw	r14, r22
    1d50:	8a 01       	movw	r16, r20
    1d52:	fc 01       	movw	r30, r24
    1d54:	17 82       	std	Z+7, r1	; 0x07
    1d56:	16 82       	std	Z+6, r1	; 0x06
    1d58:	83 81       	ldd	r24, Z+3	; 0x03
    1d5a:	81 ff       	sbrs	r24, 1
    1d5c:	bf c1       	rjmp	.+894    	; 0x20dc <__DATA_REGION_LENGTH__+0xdc>
    1d5e:	ce 01       	movw	r24, r28
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	3c 01       	movw	r6, r24
    1d64:	f6 01       	movw	r30, r12
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	f7 01       	movw	r30, r14
    1d6a:	93 fd       	sbrc	r25, 3
    1d6c:	85 91       	lpm	r24, Z+
    1d6e:	93 ff       	sbrs	r25, 3
    1d70:	81 91       	ld	r24, Z+
    1d72:	7f 01       	movw	r14, r30
    1d74:	88 23       	and	r24, r24
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <vfprintf+0x62>
    1d78:	ad c1       	rjmp	.+858    	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    1d7a:	85 32       	cpi	r24, 0x25	; 37
    1d7c:	39 f4       	brne	.+14     	; 0x1d8c <vfprintf+0x74>
    1d7e:	93 fd       	sbrc	r25, 3
    1d80:	85 91       	lpm	r24, Z+
    1d82:	93 ff       	sbrs	r25, 3
    1d84:	81 91       	ld	r24, Z+
    1d86:	7f 01       	movw	r14, r30
    1d88:	85 32       	cpi	r24, 0x25	; 37
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <vfprintf+0x7c>
    1d8c:	b6 01       	movw	r22, r12
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	d6 d1       	rcall	.+940    	; 0x213e <fputc>
    1d92:	e8 cf       	rjmp	.-48     	; 0x1d64 <vfprintf+0x4c>
    1d94:	91 2c       	mov	r9, r1
    1d96:	21 2c       	mov	r2, r1
    1d98:	31 2c       	mov	r3, r1
    1d9a:	ff e1       	ldi	r31, 0x1F	; 31
    1d9c:	f3 15       	cp	r31, r3
    1d9e:	d8 f0       	brcs	.+54     	; 0x1dd6 <vfprintf+0xbe>
    1da0:	8b 32       	cpi	r24, 0x2B	; 43
    1da2:	79 f0       	breq	.+30     	; 0x1dc2 <vfprintf+0xaa>
    1da4:	38 f4       	brcc	.+14     	; 0x1db4 <vfprintf+0x9c>
    1da6:	80 32       	cpi	r24, 0x20	; 32
    1da8:	79 f0       	breq	.+30     	; 0x1dc8 <vfprintf+0xb0>
    1daa:	83 32       	cpi	r24, 0x23	; 35
    1dac:	a1 f4       	brne	.+40     	; 0x1dd6 <vfprintf+0xbe>
    1dae:	23 2d       	mov	r18, r3
    1db0:	20 61       	ori	r18, 0x10	; 16
    1db2:	1d c0       	rjmp	.+58     	; 0x1dee <vfprintf+0xd6>
    1db4:	8d 32       	cpi	r24, 0x2D	; 45
    1db6:	61 f0       	breq	.+24     	; 0x1dd0 <vfprintf+0xb8>
    1db8:	80 33       	cpi	r24, 0x30	; 48
    1dba:	69 f4       	brne	.+26     	; 0x1dd6 <vfprintf+0xbe>
    1dbc:	23 2d       	mov	r18, r3
    1dbe:	21 60       	ori	r18, 0x01	; 1
    1dc0:	16 c0       	rjmp	.+44     	; 0x1dee <vfprintf+0xd6>
    1dc2:	83 2d       	mov	r24, r3
    1dc4:	82 60       	ori	r24, 0x02	; 2
    1dc6:	38 2e       	mov	r3, r24
    1dc8:	e3 2d       	mov	r30, r3
    1dca:	e4 60       	ori	r30, 0x04	; 4
    1dcc:	3e 2e       	mov	r3, r30
    1dce:	2a c0       	rjmp	.+84     	; 0x1e24 <vfprintf+0x10c>
    1dd0:	f3 2d       	mov	r31, r3
    1dd2:	f8 60       	ori	r31, 0x08	; 8
    1dd4:	1d c0       	rjmp	.+58     	; 0x1e10 <vfprintf+0xf8>
    1dd6:	37 fc       	sbrc	r3, 7
    1dd8:	2d c0       	rjmp	.+90     	; 0x1e34 <vfprintf+0x11c>
    1dda:	20 ed       	ldi	r18, 0xD0	; 208
    1ddc:	28 0f       	add	r18, r24
    1dde:	2a 30       	cpi	r18, 0x0A	; 10
    1de0:	40 f0       	brcs	.+16     	; 0x1df2 <vfprintf+0xda>
    1de2:	8e 32       	cpi	r24, 0x2E	; 46
    1de4:	b9 f4       	brne	.+46     	; 0x1e14 <vfprintf+0xfc>
    1de6:	36 fc       	sbrc	r3, 6
    1de8:	75 c1       	rjmp	.+746    	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    1dea:	23 2d       	mov	r18, r3
    1dec:	20 64       	ori	r18, 0x40	; 64
    1dee:	32 2e       	mov	r3, r18
    1df0:	19 c0       	rjmp	.+50     	; 0x1e24 <vfprintf+0x10c>
    1df2:	36 fe       	sbrs	r3, 6
    1df4:	06 c0       	rjmp	.+12     	; 0x1e02 <vfprintf+0xea>
    1df6:	8a e0       	ldi	r24, 0x0A	; 10
    1df8:	98 9e       	mul	r9, r24
    1dfa:	20 0d       	add	r18, r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	92 2e       	mov	r9, r18
    1e00:	11 c0       	rjmp	.+34     	; 0x1e24 <vfprintf+0x10c>
    1e02:	ea e0       	ldi	r30, 0x0A	; 10
    1e04:	2e 9e       	mul	r2, r30
    1e06:	20 0d       	add	r18, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	22 2e       	mov	r2, r18
    1e0c:	f3 2d       	mov	r31, r3
    1e0e:	f0 62       	ori	r31, 0x20	; 32
    1e10:	3f 2e       	mov	r3, r31
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <vfprintf+0x10c>
    1e14:	8c 36       	cpi	r24, 0x6C	; 108
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <vfprintf+0x108>
    1e18:	83 2d       	mov	r24, r3
    1e1a:	80 68       	ori	r24, 0x80	; 128
    1e1c:	38 2e       	mov	r3, r24
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <vfprintf+0x10c>
    1e20:	88 36       	cpi	r24, 0x68	; 104
    1e22:	41 f4       	brne	.+16     	; 0x1e34 <vfprintf+0x11c>
    1e24:	f7 01       	movw	r30, r14
    1e26:	93 fd       	sbrc	r25, 3
    1e28:	85 91       	lpm	r24, Z+
    1e2a:	93 ff       	sbrs	r25, 3
    1e2c:	81 91       	ld	r24, Z+
    1e2e:	7f 01       	movw	r14, r30
    1e30:	81 11       	cpse	r24, r1
    1e32:	b3 cf       	rjmp	.-154    	; 0x1d9a <vfprintf+0x82>
    1e34:	98 2f       	mov	r25, r24
    1e36:	9f 7d       	andi	r25, 0xDF	; 223
    1e38:	95 54       	subi	r25, 0x45	; 69
    1e3a:	93 30       	cpi	r25, 0x03	; 3
    1e3c:	28 f4       	brcc	.+10     	; 0x1e48 <vfprintf+0x130>
    1e3e:	0c 5f       	subi	r16, 0xFC	; 252
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	9f e3       	ldi	r25, 0x3F	; 63
    1e44:	99 83       	std	Y+1, r25	; 0x01
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <vfprintf+0x14a>
    1e48:	83 36       	cpi	r24, 0x63	; 99
    1e4a:	31 f0       	breq	.+12     	; 0x1e58 <vfprintf+0x140>
    1e4c:	83 37       	cpi	r24, 0x73	; 115
    1e4e:	71 f0       	breq	.+28     	; 0x1e6c <vfprintf+0x154>
    1e50:	83 35       	cpi	r24, 0x53	; 83
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <vfprintf+0x13e>
    1e54:	55 c0       	rjmp	.+170    	; 0x1f00 <vfprintf+0x1e8>
    1e56:	20 c0       	rjmp	.+64     	; 0x1e98 <vfprintf+0x180>
    1e58:	f8 01       	movw	r30, r16
    1e5a:	80 81       	ld	r24, Z
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	0e 5f       	subi	r16, 0xFE	; 254
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	88 24       	eor	r8, r8
    1e64:	83 94       	inc	r8
    1e66:	91 2c       	mov	r9, r1
    1e68:	53 01       	movw	r10, r6
    1e6a:	12 c0       	rjmp	.+36     	; 0x1e90 <vfprintf+0x178>
    1e6c:	28 01       	movw	r4, r16
    1e6e:	f2 e0       	ldi	r31, 0x02	; 2
    1e70:	4f 0e       	add	r4, r31
    1e72:	51 1c       	adc	r5, r1
    1e74:	f8 01       	movw	r30, r16
    1e76:	a0 80       	ld	r10, Z
    1e78:	b1 80       	ldd	r11, Z+1	; 0x01
    1e7a:	36 fe       	sbrs	r3, 6
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <vfprintf+0x16c>
    1e7e:	69 2d       	mov	r22, r9
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x170>
    1e84:	6f ef       	ldi	r22, 0xFF	; 255
    1e86:	7f ef       	ldi	r23, 0xFF	; 255
    1e88:	c5 01       	movw	r24, r10
    1e8a:	4e d1       	rcall	.+668    	; 0x2128 <strnlen>
    1e8c:	4c 01       	movw	r8, r24
    1e8e:	82 01       	movw	r16, r4
    1e90:	f3 2d       	mov	r31, r3
    1e92:	ff 77       	andi	r31, 0x7F	; 127
    1e94:	3f 2e       	mov	r3, r31
    1e96:	15 c0       	rjmp	.+42     	; 0x1ec2 <vfprintf+0x1aa>
    1e98:	28 01       	movw	r4, r16
    1e9a:	22 e0       	ldi	r18, 0x02	; 2
    1e9c:	42 0e       	add	r4, r18
    1e9e:	51 1c       	adc	r5, r1
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	a0 80       	ld	r10, Z
    1ea4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea6:	36 fe       	sbrs	r3, 6
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <vfprintf+0x198>
    1eaa:	69 2d       	mov	r22, r9
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <vfprintf+0x19c>
    1eb0:	6f ef       	ldi	r22, 0xFF	; 255
    1eb2:	7f ef       	ldi	r23, 0xFF	; 255
    1eb4:	c5 01       	movw	r24, r10
    1eb6:	2d d1       	rcall	.+602    	; 0x2112 <strnlen_P>
    1eb8:	4c 01       	movw	r8, r24
    1eba:	f3 2d       	mov	r31, r3
    1ebc:	f0 68       	ori	r31, 0x80	; 128
    1ebe:	3f 2e       	mov	r3, r31
    1ec0:	82 01       	movw	r16, r4
    1ec2:	33 fc       	sbrc	r3, 3
    1ec4:	19 c0       	rjmp	.+50     	; 0x1ef8 <vfprintf+0x1e0>
    1ec6:	82 2d       	mov	r24, r2
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	88 16       	cp	r8, r24
    1ecc:	99 06       	cpc	r9, r25
    1ece:	a0 f4       	brcc	.+40     	; 0x1ef8 <vfprintf+0x1e0>
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	33 d1       	rcall	.+614    	; 0x213e <fputc>
    1ed8:	2a 94       	dec	r2
    1eda:	f5 cf       	rjmp	.-22     	; 0x1ec6 <vfprintf+0x1ae>
    1edc:	f5 01       	movw	r30, r10
    1ede:	37 fc       	sbrc	r3, 7
    1ee0:	85 91       	lpm	r24, Z+
    1ee2:	37 fe       	sbrs	r3, 7
    1ee4:	81 91       	ld	r24, Z+
    1ee6:	5f 01       	movw	r10, r30
    1ee8:	b6 01       	movw	r22, r12
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	28 d1       	rcall	.+592    	; 0x213e <fputc>
    1eee:	21 10       	cpse	r2, r1
    1ef0:	2a 94       	dec	r2
    1ef2:	21 e0       	ldi	r18, 0x01	; 1
    1ef4:	82 1a       	sub	r8, r18
    1ef6:	91 08       	sbc	r9, r1
    1ef8:	81 14       	cp	r8, r1
    1efa:	91 04       	cpc	r9, r1
    1efc:	79 f7       	brne	.-34     	; 0x1edc <vfprintf+0x1c4>
    1efe:	e1 c0       	rjmp	.+450    	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    1f00:	84 36       	cpi	r24, 0x64	; 100
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <vfprintf+0x1f0>
    1f04:	89 36       	cpi	r24, 0x69	; 105
    1f06:	39 f5       	brne	.+78     	; 0x1f56 <vfprintf+0x23e>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	37 fe       	sbrs	r3, 7
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <vfprintf+0x204>
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	0c 5f       	subi	r16, 0xFC	; 252
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <vfprintf+0x214>
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	07 2e       	mov	r0, r23
    1f22:	00 0c       	add	r0, r0
    1f24:	88 0b       	sbc	r24, r24
    1f26:	99 0b       	sbc	r25, r25
    1f28:	0e 5f       	subi	r16, 0xFE	; 254
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	f3 2d       	mov	r31, r3
    1f2e:	ff 76       	andi	r31, 0x6F	; 111
    1f30:	3f 2e       	mov	r3, r31
    1f32:	97 ff       	sbrs	r25, 7
    1f34:	09 c0       	rjmp	.+18     	; 0x1f48 <vfprintf+0x230>
    1f36:	90 95       	com	r25
    1f38:	80 95       	com	r24
    1f3a:	70 95       	com	r23
    1f3c:	61 95       	neg	r22
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	f0 68       	ori	r31, 0x80	; 128
    1f46:	3f 2e       	mov	r3, r31
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	a3 01       	movw	r20, r6
    1f4e:	33 d1       	rcall	.+614    	; 0x21b6 <__ultoa_invert>
    1f50:	88 2e       	mov	r8, r24
    1f52:	86 18       	sub	r8, r6
    1f54:	44 c0       	rjmp	.+136    	; 0x1fde <vfprintf+0x2c6>
    1f56:	85 37       	cpi	r24, 0x75	; 117
    1f58:	31 f4       	brne	.+12     	; 0x1f66 <vfprintf+0x24e>
    1f5a:	23 2d       	mov	r18, r3
    1f5c:	2f 7e       	andi	r18, 0xEF	; 239
    1f5e:	b2 2e       	mov	r11, r18
    1f60:	2a e0       	ldi	r18, 0x0A	; 10
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	25 c0       	rjmp	.+74     	; 0x1fb0 <vfprintf+0x298>
    1f66:	93 2d       	mov	r25, r3
    1f68:	99 7f       	andi	r25, 0xF9	; 249
    1f6a:	b9 2e       	mov	r11, r25
    1f6c:	8f 36       	cpi	r24, 0x6F	; 111
    1f6e:	c1 f0       	breq	.+48     	; 0x1fa0 <vfprintf+0x288>
    1f70:	18 f4       	brcc	.+6      	; 0x1f78 <vfprintf+0x260>
    1f72:	88 35       	cpi	r24, 0x58	; 88
    1f74:	79 f0       	breq	.+30     	; 0x1f94 <vfprintf+0x27c>
    1f76:	ae c0       	rjmp	.+348    	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    1f78:	80 37       	cpi	r24, 0x70	; 112
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <vfprintf+0x26a>
    1f7c:	88 37       	cpi	r24, 0x78	; 120
    1f7e:	21 f0       	breq	.+8      	; 0x1f88 <vfprintf+0x270>
    1f80:	a9 c0       	rjmp	.+338    	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    1f82:	e9 2f       	mov	r30, r25
    1f84:	e0 61       	ori	r30, 0x10	; 16
    1f86:	be 2e       	mov	r11, r30
    1f88:	b4 fe       	sbrs	r11, 4
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <vfprintf+0x28e>
    1f8c:	fb 2d       	mov	r31, r11
    1f8e:	f4 60       	ori	r31, 0x04	; 4
    1f90:	bf 2e       	mov	r11, r31
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <vfprintf+0x28e>
    1f94:	34 fe       	sbrs	r3, 4
    1f96:	0a c0       	rjmp	.+20     	; 0x1fac <vfprintf+0x294>
    1f98:	29 2f       	mov	r18, r25
    1f9a:	26 60       	ori	r18, 0x06	; 6
    1f9c:	b2 2e       	mov	r11, r18
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <vfprintf+0x294>
    1fa0:	28 e0       	ldi	r18, 0x08	; 8
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <vfprintf+0x298>
    1fa6:	20 e1       	ldi	r18, 0x10	; 16
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <vfprintf+0x298>
    1fac:	20 e1       	ldi	r18, 0x10	; 16
    1fae:	32 e0       	ldi	r19, 0x02	; 2
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	b7 fe       	sbrs	r11, 7
    1fb4:	07 c0       	rjmp	.+14     	; 0x1fc4 <vfprintf+0x2ac>
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	0c 5f       	subi	r16, 0xFC	; 252
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <vfprintf+0x2b8>
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 5f       	subi	r16, 0xFE	; 254
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	a3 01       	movw	r20, r6
    1fd2:	f1 d0       	rcall	.+482    	; 0x21b6 <__ultoa_invert>
    1fd4:	88 2e       	mov	r8, r24
    1fd6:	86 18       	sub	r8, r6
    1fd8:	fb 2d       	mov	r31, r11
    1fda:	ff 77       	andi	r31, 0x7F	; 127
    1fdc:	3f 2e       	mov	r3, r31
    1fde:	36 fe       	sbrs	r3, 6
    1fe0:	0d c0       	rjmp	.+26     	; 0x1ffc <vfprintf+0x2e4>
    1fe2:	23 2d       	mov	r18, r3
    1fe4:	2e 7f       	andi	r18, 0xFE	; 254
    1fe6:	a2 2e       	mov	r10, r18
    1fe8:	89 14       	cp	r8, r9
    1fea:	58 f4       	brcc	.+22     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1fec:	34 fe       	sbrs	r3, 4
    1fee:	0b c0       	rjmp	.+22     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1ff0:	32 fc       	sbrc	r3, 2
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1ff4:	83 2d       	mov	r24, r3
    1ff6:	8e 7e       	andi	r24, 0xEE	; 238
    1ff8:	a8 2e       	mov	r10, r24
    1ffa:	05 c0       	rjmp	.+10     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1ffc:	b8 2c       	mov	r11, r8
    1ffe:	a3 2c       	mov	r10, r3
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2002:	b8 2c       	mov	r11, r8
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2006:	b9 2c       	mov	r11, r9
    2008:	a4 fe       	sbrs	r10, 4
    200a:	0f c0       	rjmp	.+30     	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    200c:	fe 01       	movw	r30, r28
    200e:	e8 0d       	add	r30, r8
    2010:	f1 1d       	adc	r31, r1
    2012:	80 81       	ld	r24, Z
    2014:	80 33       	cpi	r24, 0x30	; 48
    2016:	21 f4       	brne	.+8      	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    2018:	9a 2d       	mov	r25, r10
    201a:	99 7e       	andi	r25, 0xE9	; 233
    201c:	a9 2e       	mov	r10, r25
    201e:	09 c0       	rjmp	.+18     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2020:	a2 fe       	sbrs	r10, 2
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    2024:	b3 94       	inc	r11
    2026:	b3 94       	inc	r11
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    202a:	8a 2d       	mov	r24, r10
    202c:	86 78       	andi	r24, 0x86	; 134
    202e:	09 f0       	breq	.+2      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2030:	b3 94       	inc	r11
    2032:	a3 fc       	sbrc	r10, 3
    2034:	10 c0       	rjmp	.+32     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2036:	a0 fe       	sbrs	r10, 0
    2038:	06 c0       	rjmp	.+12     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    203a:	b2 14       	cp	r11, r2
    203c:	80 f4       	brcc	.+32     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    203e:	28 0c       	add	r2, r8
    2040:	92 2c       	mov	r9, r2
    2042:	9b 18       	sub	r9, r11
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    2046:	b2 14       	cp	r11, r2
    2048:	58 f4       	brcc	.+22     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    204a:	b6 01       	movw	r22, r12
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	76 d0       	rcall	.+236    	; 0x213e <fputc>
    2052:	b3 94       	inc	r11
    2054:	f8 cf       	rjmp	.-16     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    2056:	b2 14       	cp	r11, r2
    2058:	18 f4       	brcc	.+6      	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    205a:	2b 18       	sub	r2, r11
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    205e:	98 2c       	mov	r9, r8
    2060:	21 2c       	mov	r2, r1
    2062:	a4 fe       	sbrs	r10, 4
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    2066:	b6 01       	movw	r22, r12
    2068:	80 e3       	ldi	r24, 0x30	; 48
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	68 d0       	rcall	.+208    	; 0x213e <fputc>
    206e:	a2 fe       	sbrs	r10, 2
    2070:	16 c0       	rjmp	.+44     	; 0x209e <__DATA_REGION_LENGTH__+0x9e>
    2072:	a1 fc       	sbrc	r10, 1
    2074:	03 c0       	rjmp	.+6      	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2076:	88 e7       	ldi	r24, 0x78	; 120
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    207c:	88 e5       	ldi	r24, 0x58	; 88
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	b6 01       	movw	r22, r12
    2082:	0c c0       	rjmp	.+24     	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    2084:	8a 2d       	mov	r24, r10
    2086:	86 78       	andi	r24, 0x86	; 134
    2088:	51 f0       	breq	.+20     	; 0x209e <__DATA_REGION_LENGTH__+0x9e>
    208a:	a1 fe       	sbrs	r10, 1
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    208e:	8b e2       	ldi	r24, 0x2B	; 43
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    2092:	80 e2       	ldi	r24, 0x20	; 32
    2094:	a7 fc       	sbrc	r10, 7
    2096:	8d e2       	ldi	r24, 0x2D	; 45
    2098:	b6 01       	movw	r22, r12
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	50 d0       	rcall	.+160    	; 0x213e <fputc>
    209e:	89 14       	cp	r8, r9
    20a0:	30 f4       	brcc	.+12     	; 0x20ae <__DATA_REGION_LENGTH__+0xae>
    20a2:	b6 01       	movw	r22, r12
    20a4:	80 e3       	ldi	r24, 0x30	; 48
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	4a d0       	rcall	.+148    	; 0x213e <fputc>
    20aa:	9a 94       	dec	r9
    20ac:	f8 cf       	rjmp	.-16     	; 0x209e <__DATA_REGION_LENGTH__+0x9e>
    20ae:	8a 94       	dec	r8
    20b0:	f3 01       	movw	r30, r6
    20b2:	e8 0d       	add	r30, r8
    20b4:	f1 1d       	adc	r31, r1
    20b6:	80 81       	ld	r24, Z
    20b8:	b6 01       	movw	r22, r12
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	40 d0       	rcall	.+128    	; 0x213e <fputc>
    20be:	81 10       	cpse	r8, r1
    20c0:	f6 cf       	rjmp	.-20     	; 0x20ae <__DATA_REGION_LENGTH__+0xae>
    20c2:	22 20       	and	r2, r2
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    20c6:	4e ce       	rjmp	.-868    	; 0x1d64 <vfprintf+0x4c>
    20c8:	b6 01       	movw	r22, r12
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	37 d0       	rcall	.+110    	; 0x213e <fputc>
    20d0:	2a 94       	dec	r2
    20d2:	f7 cf       	rjmp	.-18     	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    20d4:	f6 01       	movw	r30, r12
    20d6:	86 81       	ldd	r24, Z+6	; 0x06
    20d8:	97 81       	ldd	r25, Z+7	; 0x07
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <__DATA_REGION_LENGTH__+0xe0>
    20dc:	8f ef       	ldi	r24, 0xFF	; 255
    20de:	9f ef       	ldi	r25, 0xFF	; 255
    20e0:	2b 96       	adiw	r28, 0x0b	; 11
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	bf 90       	pop	r11
    20fe:	af 90       	pop	r10
    2100:	9f 90       	pop	r9
    2102:	8f 90       	pop	r8
    2104:	7f 90       	pop	r7
    2106:	6f 90       	pop	r6
    2108:	5f 90       	pop	r5
    210a:	4f 90       	pop	r4
    210c:	3f 90       	pop	r3
    210e:	2f 90       	pop	r2
    2110:	08 95       	ret

00002112 <strnlen_P>:
    2112:	fc 01       	movw	r30, r24
    2114:	05 90       	lpm	r0, Z+
    2116:	61 50       	subi	r22, 0x01	; 1
    2118:	70 40       	sbci	r23, 0x00	; 0
    211a:	01 10       	cpse	r0, r1
    211c:	d8 f7       	brcc	.-10     	; 0x2114 <strnlen_P+0x2>
    211e:	80 95       	com	r24
    2120:	90 95       	com	r25
    2122:	8e 0f       	add	r24, r30
    2124:	9f 1f       	adc	r25, r31
    2126:	08 95       	ret

00002128 <strnlen>:
    2128:	fc 01       	movw	r30, r24
    212a:	61 50       	subi	r22, 0x01	; 1
    212c:	70 40       	sbci	r23, 0x00	; 0
    212e:	01 90       	ld	r0, Z+
    2130:	01 10       	cpse	r0, r1
    2132:	d8 f7       	brcc	.-10     	; 0x212a <strnlen+0x2>
    2134:	80 95       	com	r24
    2136:	90 95       	com	r25
    2138:	8e 0f       	add	r24, r30
    213a:	9f 1f       	adc	r25, r31
    213c:	08 95       	ret

0000213e <fputc>:
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	fb 01       	movw	r30, r22
    2148:	23 81       	ldd	r18, Z+3	; 0x03
    214a:	21 fd       	sbrc	r18, 1
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <fputc+0x16>
    214e:	8f ef       	ldi	r24, 0xFF	; 255
    2150:	9f ef       	ldi	r25, 0xFF	; 255
    2152:	2c c0       	rjmp	.+88     	; 0x21ac <fputc+0x6e>
    2154:	22 ff       	sbrs	r18, 2
    2156:	16 c0       	rjmp	.+44     	; 0x2184 <fputc+0x46>
    2158:	46 81       	ldd	r20, Z+6	; 0x06
    215a:	57 81       	ldd	r21, Z+7	; 0x07
    215c:	24 81       	ldd	r18, Z+4	; 0x04
    215e:	35 81       	ldd	r19, Z+5	; 0x05
    2160:	42 17       	cp	r20, r18
    2162:	53 07       	cpc	r21, r19
    2164:	44 f4       	brge	.+16     	; 0x2176 <fputc+0x38>
    2166:	a0 81       	ld	r26, Z
    2168:	b1 81       	ldd	r27, Z+1	; 0x01
    216a:	9d 01       	movw	r18, r26
    216c:	2f 5f       	subi	r18, 0xFF	; 255
    216e:	3f 4f       	sbci	r19, 0xFF	; 255
    2170:	31 83       	std	Z+1, r19	; 0x01
    2172:	20 83       	st	Z, r18
    2174:	8c 93       	st	X, r24
    2176:	26 81       	ldd	r18, Z+6	; 0x06
    2178:	37 81       	ldd	r19, Z+7	; 0x07
    217a:	2f 5f       	subi	r18, 0xFF	; 255
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	37 83       	std	Z+7, r19	; 0x07
    2180:	26 83       	std	Z+6, r18	; 0x06
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <fputc+0x6e>
    2184:	8b 01       	movw	r16, r22
    2186:	ec 01       	movw	r28, r24
    2188:	fb 01       	movw	r30, r22
    218a:	00 84       	ldd	r0, Z+8	; 0x08
    218c:	f1 85       	ldd	r31, Z+9	; 0x09
    218e:	e0 2d       	mov	r30, r0
    2190:	09 95       	icall
    2192:	89 2b       	or	r24, r25
    2194:	e1 f6       	brne	.-72     	; 0x214e <fputc+0x10>
    2196:	d8 01       	movw	r26, r16
    2198:	16 96       	adiw	r26, 0x06	; 6
    219a:	8d 91       	ld	r24, X+
    219c:	9c 91       	ld	r25, X
    219e:	17 97       	sbiw	r26, 0x07	; 7
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	17 96       	adiw	r26, 0x07	; 7
    21a4:	9c 93       	st	X, r25
    21a6:	8e 93       	st	-X, r24
    21a8:	16 97       	sbiw	r26, 0x06	; 6
    21aa:	ce 01       	movw	r24, r28
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	08 95       	ret

000021b6 <__ultoa_invert>:
    21b6:	fa 01       	movw	r30, r20
    21b8:	aa 27       	eor	r26, r26
    21ba:	28 30       	cpi	r18, 0x08	; 8
    21bc:	51 f1       	breq	.+84     	; 0x2212 <__ultoa_invert+0x5c>
    21be:	20 31       	cpi	r18, 0x10	; 16
    21c0:	81 f1       	breq	.+96     	; 0x2222 <__ultoa_invert+0x6c>
    21c2:	e8 94       	clt
    21c4:	6f 93       	push	r22
    21c6:	6e 7f       	andi	r22, 0xFE	; 254
    21c8:	6e 5f       	subi	r22, 0xFE	; 254
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	af 4f       	sbci	r26, 0xFF	; 255
    21d2:	b1 e0       	ldi	r27, 0x01	; 1
    21d4:	3e d0       	rcall	.+124    	; 0x2252 <__ultoa_invert+0x9c>
    21d6:	b4 e0       	ldi	r27, 0x04	; 4
    21d8:	3c d0       	rcall	.+120    	; 0x2252 <__ultoa_invert+0x9c>
    21da:	67 0f       	add	r22, r23
    21dc:	78 1f       	adc	r23, r24
    21de:	89 1f       	adc	r24, r25
    21e0:	9a 1f       	adc	r25, r26
    21e2:	a1 1d       	adc	r26, r1
    21e4:	68 0f       	add	r22, r24
    21e6:	79 1f       	adc	r23, r25
    21e8:	8a 1f       	adc	r24, r26
    21ea:	91 1d       	adc	r25, r1
    21ec:	a1 1d       	adc	r26, r1
    21ee:	6a 0f       	add	r22, r26
    21f0:	71 1d       	adc	r23, r1
    21f2:	81 1d       	adc	r24, r1
    21f4:	91 1d       	adc	r25, r1
    21f6:	a1 1d       	adc	r26, r1
    21f8:	20 d0       	rcall	.+64     	; 0x223a <__ultoa_invert+0x84>
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__ultoa_invert+0x48>
    21fc:	68 94       	set
    21fe:	3f 91       	pop	r19
    2200:	2a e0       	ldi	r18, 0x0A	; 10
    2202:	26 9f       	mul	r18, r22
    2204:	11 24       	eor	r1, r1
    2206:	30 19       	sub	r19, r0
    2208:	30 5d       	subi	r19, 0xD0	; 208
    220a:	31 93       	st	Z+, r19
    220c:	de f6       	brtc	.-74     	; 0x21c4 <__ultoa_invert+0xe>
    220e:	cf 01       	movw	r24, r30
    2210:	08 95       	ret
    2212:	46 2f       	mov	r20, r22
    2214:	47 70       	andi	r20, 0x07	; 7
    2216:	40 5d       	subi	r20, 0xD0	; 208
    2218:	41 93       	st	Z+, r20
    221a:	b3 e0       	ldi	r27, 0x03	; 3
    221c:	0f d0       	rcall	.+30     	; 0x223c <__ultoa_invert+0x86>
    221e:	c9 f7       	brne	.-14     	; 0x2212 <__ultoa_invert+0x5c>
    2220:	f6 cf       	rjmp	.-20     	; 0x220e <__ultoa_invert+0x58>
    2222:	46 2f       	mov	r20, r22
    2224:	4f 70       	andi	r20, 0x0F	; 15
    2226:	40 5d       	subi	r20, 0xD0	; 208
    2228:	4a 33       	cpi	r20, 0x3A	; 58
    222a:	18 f0       	brcs	.+6      	; 0x2232 <__ultoa_invert+0x7c>
    222c:	49 5d       	subi	r20, 0xD9	; 217
    222e:	31 fd       	sbrc	r19, 1
    2230:	40 52       	subi	r20, 0x20	; 32
    2232:	41 93       	st	Z+, r20
    2234:	02 d0       	rcall	.+4      	; 0x223a <__ultoa_invert+0x84>
    2236:	a9 f7       	brne	.-22     	; 0x2222 <__ultoa_invert+0x6c>
    2238:	ea cf       	rjmp	.-44     	; 0x220e <__ultoa_invert+0x58>
    223a:	b4 e0       	ldi	r27, 0x04	; 4
    223c:	a6 95       	lsr	r26
    223e:	97 95       	ror	r25
    2240:	87 95       	ror	r24
    2242:	77 95       	ror	r23
    2244:	67 95       	ror	r22
    2246:	ba 95       	dec	r27
    2248:	c9 f7       	brne	.-14     	; 0x223c <__ultoa_invert+0x86>
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	61 05       	cpc	r22, r1
    224e:	71 05       	cpc	r23, r1
    2250:	08 95       	ret
    2252:	9b 01       	movw	r18, r22
    2254:	ac 01       	movw	r20, r24
    2256:	0a 2e       	mov	r0, r26
    2258:	06 94       	lsr	r0
    225a:	57 95       	ror	r21
    225c:	47 95       	ror	r20
    225e:	37 95       	ror	r19
    2260:	27 95       	ror	r18
    2262:	ba 95       	dec	r27
    2264:	c9 f7       	brne	.-14     	; 0x2258 <__ultoa_invert+0xa2>
    2266:	62 0f       	add	r22, r18
    2268:	73 1f       	adc	r23, r19
    226a:	84 1f       	adc	r24, r20
    226c:	95 1f       	adc	r25, r21
    226e:	a0 1d       	adc	r26, r0
    2270:	08 95       	ret

00002272 <_exit>:
    2272:	f8 94       	cli

00002274 <__stop_program>:
    2274:	ff cf       	rjmp	.-2      	; 0x2274 <__stop_program>
