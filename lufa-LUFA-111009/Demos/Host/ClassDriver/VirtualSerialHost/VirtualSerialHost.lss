
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001b16  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066c9  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000230a  00000000  00000000  000085b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003463  00000000  00000000  0000a8bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a78  00000000  00000000  0000dd20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000283f  00000000  00000000  0000e798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f92  00000000  00000000  00010fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00014f69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c c1       	rjmp	.+536    	; 0x21a <__ctors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c1       	rjmp	.+588    	; 0x256 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c1       	rjmp	.+584    	; 0x256 <__bad_interrupt>
       e:	00 00       	nop
      10:	22 c1       	rjmp	.+580    	; 0x256 <__bad_interrupt>
      12:	00 00       	nop
      14:	20 c1       	rjmp	.+576    	; 0x256 <__bad_interrupt>
      16:	00 00       	nop
      18:	1e c1       	rjmp	.+572    	; 0x256 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c1       	rjmp	.+568    	; 0x256 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c1       	rjmp	.+564    	; 0x256 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c1       	rjmp	.+560    	; 0x256 <__bad_interrupt>
      26:	00 00       	nop
      28:	f7 c4       	rjmp	.+2542   	; 0xa18 <__vector_10>
      2a:	00 00       	nop
      2c:	14 c1       	rjmp	.+552    	; 0x256 <__bad_interrupt>
      2e:	00 00       	nop
      30:	12 c1       	rjmp	.+548    	; 0x256 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c1       	rjmp	.+544    	; 0x256 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c1       	rjmp	.+536    	; 0x256 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c1       	rjmp	.+532    	; 0x256 <__bad_interrupt>
      42:	00 00       	nop
      44:	08 c1       	rjmp	.+528    	; 0x256 <__bad_interrupt>
      46:	00 00       	nop
      48:	06 c1       	rjmp	.+524    	; 0x256 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	04 c1       	rjmp	.+520    	; 0x256 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c1       	rjmp	.+516    	; 0x256 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c1       	rjmp	.+512    	; 0x256 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c0       	rjmp	.+508    	; 0x256 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c0       	rjmp	.+504    	; 0x256 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fa c0       	rjmp	.+500    	; 0x256 <__bad_interrupt>
      62:	00 00       	nop
      64:	f8 c0       	rjmp	.+496    	; 0x256 <__bad_interrupt>
      66:	00 00       	nop
      68:	f6 c0       	rjmp	.+492    	; 0x256 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f4 c0       	rjmp	.+488    	; 0x256 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f2 c0       	rjmp	.+484    	; 0x256 <__bad_interrupt>
      72:	00 00       	nop
      74:	f0 c0       	rjmp	.+480    	; 0x256 <__bad_interrupt>
      76:	00 00       	nop
      78:	ee c0       	rjmp	.+476    	; 0x256 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ec c0       	rjmp	.+472    	; 0x256 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ea c0       	rjmp	.+468    	; 0x256 <__bad_interrupt>
      82:	00 00       	nop
      84:	e8 c0       	rjmp	.+464    	; 0x256 <__bad_interrupt>
      86:	00 00       	nop
      88:	e6 c0       	rjmp	.+460    	; 0x256 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e4 c0       	rjmp	.+456    	; 0x256 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e2 c0       	rjmp	.+452    	; 0x256 <__bad_interrupt>
      92:	00 00       	nop
      94:	e0 c0       	rjmp	.+448    	; 0x256 <__bad_interrupt>
      96:	00 00       	nop
      98:	d1 02       	muls	r29, r17
      9a:	c2 03       	fmuls	r20, r18
      9c:	ef 02       	muls	r30, r31
      9e:	f9 02       	muls	r31, r25
      a0:	24 03       	mulsu	r18, r20
      a2:	4c 03       	fmul	r20, r20
      a4:	57 03       	mulsu	r21, r23
      a6:	68 03       	fmul	r22, r16
      a8:	84 03       	fmuls	r16, r20
      aa:	ab 03       	fmulsu	r18, r19

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4504>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4499>:
     131:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     141:	72 61 74 65 64 2e 0d 0a 00                          rated....

0000014a <__c.4497>:
     14a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     15a:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     16a:	6f 6e 2e 0d 0a 00                                   on....

00000170 <__c.4495>:
     170:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     180:	4e 6f 74 20 61 20 56 61 6c 69 64 20 43 44 43 20     Not a Valid CDC 
     190:	43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00     Class Device....

000001a0 <__c.4493>:
     1a0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1b0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1c0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001cd <__c.4486>:
     1cd:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1dd:	68 65 64 2e 0d 0a 00                                hed....

000001e4 <__c.4481>:
     1e4:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f4:	0d 0a 00                                            ...

000001f7 <__c.4468>:
     1f7:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     207:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     217:	37 6d 00                                            7m.

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	d0 e2       	ldi	r29, 0x20	; 32
     222:	de bf       	out	0x3e, r29	; 62
     224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_copy_data>:
     226:	11 e0       	ldi	r17, 0x01	; 1
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b1 e0       	ldi	r27, 0x01	; 1
     22c:	ea e5       	ldi	r30, 0x5A	; 90
     22e:	fa e1       	ldi	r31, 0x1A	; 26
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a8 32       	cpi	r26, 0x28	; 40
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	a8 e2       	ldi	r26, 0x28	; 40
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	aa 34       	cpi	r26, 0x4A	; 74
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>
     250:	66 d0       	rcall	.+204    	; 0x31e <main>
     252:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

00000256 <__bad_interrupt>:
     256:	d4 ce       	rjmp	.-600    	; 0x0 <__vectors>

00000258 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     258:	9b b1       	in	r25, 0x0b	; 11
     25a:	9f 70       	andi	r25, 0x0F	; 15
     25c:	89 2b       	or	r24, r25
     25e:	8b b9       	out	0x0b, r24	; 11
     260:	08 95       	ret

00000262 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     262:	84 b7       	in	r24, 0x34	; 52
     264:	87 7f       	andi	r24, 0xF7	; 247
     266:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	a8 95       	wdr
     26e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     272:	88 61       	ori	r24, 0x18	; 24
     274:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     278:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     27c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     28a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     28e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     290:	83 e3       	ldi	r24, 0x33	; 51
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     298:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     29c:	86 e0       	ldi	r24, 0x06	; 6
     29e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2a2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2a6:	88 e1       	ldi	r24, 0x18	; 24
     2a8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2ac:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ae:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2b0:	8a b1       	in	r24, 0x0a	; 10
     2b2:	80 6f       	ori	r24, 0xF0	; 240
     2b4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2b6:	8b b1       	in	r24, 0x0b	; 11
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2bc:	97 d3       	rcall	.+1838   	; 0x9ec <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     2be:	a4 e4       	ldi	r26, 0x44	; 68
     2c0:	b1 e0       	ldi	r27, 0x01	; 1
     2c2:	e6 e3       	ldi	r30, 0x36	; 54
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	fc 93       	st	X, r31
     2ca:	ee 93       	st	-X, r30
					stdout = Stream;
     2cc:	13 96       	adiw	r26, 0x03	; 3
     2ce:	fc 93       	st	X, r31
     2d0:	ee 93       	st	-X, r30
     2d2:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     2d4:	8e e0       	ldi	r24, 0x0E	; 14
     2d6:	df 01       	movw	r26, r30
     2d8:	1d 92       	st	X+, r1
     2da:	8a 95       	dec	r24
     2dc:	e9 f7       	brne	.-6      	; 0x2d8 <SetupHardware+0x76>
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	83 83       	std	Z+3, r24	; 0x03
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	9a e0       	ldi	r25, 0x0A	; 10
     2e6:	91 87       	std	Z+9, r25	; 0x09
     2e8:	80 87       	std	Z+8, r24	; 0x08
     2ea:	8b e0       	ldi	r24, 0x0B	; 11
     2ec:	9a e0       	ldi	r25, 0x0A	; 10
     2ee:	93 87       	std	Z+11, r25	; 0x0b
     2f0:	82 87       	std	Z+10, r24	; 0x0a
     2f2:	08 95       	ret

000002f4 <CDCHost_Task>:
/** Task to manage an enumerated USB CDC device once connected, to print received data
 *  from the device to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     2f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_HostState>
     2f8:	8b 30       	cpi	r24, 0x0B	; 11
     2fa:	81 f4       	brne	.+32     	; 0x31c <CDCHost_Task+0x28>
	  return;

	if (CDC_Host_BytesReceived(&VirtualSerial_CDC_Interface))
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	8c d7       	rcall	.+3864   	; 0x121a <CDC_Host_BytesReceived>
     302:	89 2b       	or	r24, r25
     304:	59 f0       	breq	.+22     	; 0x31c <CDCHost_Task+0x28>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = CDC_Host_ReceiveByte(&VirtualSerial_CDC_Interface);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	be d7       	rcall	.+3964   	; 0x1288 <CDC_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     30c:	97 fd       	sbrc	r25, 7
     30e:	06 c0       	rjmp	.+12     	; 0x31c <CDCHost_Task+0x28>
		  putchar(ReceivedByte);
     310:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__iob+0x2>
     314:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <__iob+0x3>
     318:	0c 94 26 0a 	jmp	0x144c	; 0x144c <fputc>
     31c:	08 95       	ret

0000031e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     31e:	a1 df       	rcall	.-190    	; 0x262 <SetupHardware>
	
	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     320:	87 ef       	ldi	r24, 0xF7	; 247
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 89 0a 	call	0x1512	; 0x1512 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     328:	80 e1       	ldi	r24, 0x10	; 16
     32a:	96 df       	rcall	.-212    	; 0x258 <LEDs_SetAllLEDs>
	sei();
     32c:	78 94       	sei

	for (;;)
	{
		CDCHost_Task();
     32e:	e2 df       	rcall	.-60     	; 0x2f4 <CDCHost_Task>
     330:	80 e0       	ldi	r24, 0x00	; 0

		CDC_Host_USBTask(&VirtualSerial_CDC_Interface);
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 ae 09 	call	0x135c	; 0x135c <CDC_Host_USBTask>
		USB_USBTask();
     338:	3e d6       	rcall	.+3196   	; 0xfb6 <USB_USBTask>
     33a:	f9 cf       	rjmp	.-14     	; 0x32e <main+0x10>

0000033c <EVENT_USB_Host_DeviceAttached>:
     33c:	84 ee       	ldi	r24, 0xE4	; 228
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 89 0a 	call	0x1512	; 0x1512 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     344:	80 ea       	ldi	r24, 0xA0	; 160
     346:	88 cf       	rjmp	.-240    	; 0x258 <LEDs_SetAllLEDs>

00000348 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     348:	8d ec       	ldi	r24, 0xCD	; 205
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 89 0a 	call	0x1512	; 0x1512 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     350:	80 e1       	ldi	r24, 0x10	; 16
     352:	82 cf       	rjmp	.-252    	; 0x258 <LEDs_SetAllLEDs>

00000354 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	c2 50       	subi	r28, 0x02	; 2
     35e:	d2 40       	sbci	r29, 0x02	; 2
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     36a:	80 ea       	ldi	r24, 0xA0	; 160
     36c:	75 df       	rcall	.-278    	; 0x258 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	32 e0       	ldi	r19, 0x02	; 2
     372:	ae 01       	movw	r20, r28
     374:	4f 5f       	subi	r20, 0xFF	; 255
     376:	5f 4f       	sbci	r21, 0xFF	; 255
     378:	be 01       	movw	r22, r28
     37a:	6f 5f       	subi	r22, 0xFF	; 255
     37c:	7d 4f       	sbci	r23, 0xFD	; 253
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	4b d4       	rcall	.+2198   	; 0xc18 <USB_Host_GetDeviceConfigDescriptor>
     382:	88 23       	and	r24, r24
     384:	19 f0       	breq	.+6      	; 0x38c <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     386:	80 ea       	ldi	r24, 0xA0	; 160
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	17 c0       	rjmp	.+46     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (CDC_Host_ConfigurePipes(&VirtualSerial_CDC_Interface,
     38c:	cf 5f       	subi	r28, 0xFF	; 255
     38e:	dd 4f       	sbci	r29, 0xFD	; 253
     390:	68 81       	ld	r22, Y
     392:	79 81       	ldd	r23, Y+1	; 0x01
     394:	c1 50       	subi	r28, 0x01	; 1
     396:	d2 40       	sbci	r29, 0x02	; 2
     398:	ae 01       	movw	r20, r28
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	4d d6       	rcall	.+3226   	; 0x103e <CDC_Host_ConfigurePipes>
     3a4:	88 23       	and	r24, r24
     3a6:	19 f0       	breq	.+6      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != CDC_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid CDC Class Device.\r\n"));
     3a8:	80 e7       	ldi	r24, 0x70	; 112
     3aa:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	db d5       	rcall	.+2998   	; 0xf68 <USB_Host_SetDeviceConfiguration>
     3b2:	88 23       	and	r24, r24
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3b6:	8a e4       	ldi	r24, 0x4A	; 74
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 89 0a 	call	0x1512	; 0x1512 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3be:	80 e9       	ldi	r24, 0x90	; 144
     3c0:	05 c0       	rjmp	.+10     	; 0x3cc <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     3c2:	81 e3       	ldi	r24, 0x31	; 49
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 89 0a 	call	0x1512	; 0x1512 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3ca:	80 e6       	ldi	r24, 0x60	; 96
     3cc:	45 df       	rcall	.-374    	; 0x258 <LEDs_SetAllLEDs>
}
     3ce:	ce 5f       	subi	r28, 0xFE	; 254
     3d0:	dd 4f       	sbci	r29, 0xFD	; 253
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3e2:	c8 2f       	mov	r28, r24
	USB_Disable();
     3e4:	9b d2       	rcall	.+1334   	; 0x91c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3e6:	1f 92       	push	r1
     3e8:	cf 93       	push	r28
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3f6:	80 e9       	ldi	r24, 0x90	; 144
     3f8:	2f df       	rcall	.-418    	; 0x258 <LEDs_SetAllLEDs>
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	ff cf       	rjmp	.-2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

00000404 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     404:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <USB_HostState>
     408:	1f 92       	push	r1
     40a:	9f 93       	push	r25
     40c:	1f 92       	push	r1
     40e:	6f 93       	push	r22
     410:	1f 92       	push	r1
     412:	8f 93       	push	r24
     414:	8c ea       	ldi	r24, 0xAC	; 172
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     420:	8d b7       	in	r24, 0x3d	; 61
     422:	9e b7       	in	r25, 0x3e	; 62
     424:	08 96       	adiw	r24, 0x08	; 8
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	9e bf       	out	0x3e, r25	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	8d bf       	out	0x3d, r24	; 61
     430:	80 e9       	ldi	r24, 0x90	; 144
     432:	12 cf       	rjmp	.-476    	; 0x258 <LEDs_SetAllLEDs>

00000434 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     434:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     438:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     43a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     43e:	9d 7f       	andi	r25, 0xFD	; 253
     440:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     444:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     448:	92 60       	ori	r25, 0x02	; 2
     44a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     44e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     452:	91 fd       	sbrc	r25, 1
     454:	fc cf       	rjmp	.-8      	; 0x44e <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     456:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     45a:	91 60       	ori	r25, 0x01	; 1
     45c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     460:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     464:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     468:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     46a:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     46e:	2f 7d       	andi	r18, 0xDF	; 223
     470:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     474:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     478:	2f 7d       	andi	r18, 0xDF	; 223
     47a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     47e:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     480:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     484:	35 ff       	sbrs	r19, 5
     486:	0b c0       	rjmp	.+22     	; 0x49e <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     488:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     48c:	2f 7d       	andi	r18, 0xDF	; 223
     48e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     492:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     496:	2d 7f       	andi	r18, 0xFD	; 253
     498:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	ef ec       	ldi	r30, 0xCF	; 207
     4a0:	f7 e0       	ldi	r31, 0x07	; 7
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <USB_Host_ResetDevice+0x6e>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <USB_Host_ResetDevice+0x74>
     4a8:	00 00       	nop
     4aa:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     4ac:	49 f7       	brne	.-46     	; 0x480 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     4ae:	99 23       	and	r25, r25
     4b0:	29 f0       	breq	.+10     	; 0x4bc <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     4b2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4b6:	90 62       	ori	r25, 0x20	; 32
     4b8:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     4bc:	81 11       	cpse	r24, r1
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     4c0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4c4:	8e 7f       	andi	r24, 0xFE	; 254
     4c6:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     4ca:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4ce:	82 60       	ori	r24, 0x02	; 2
     4d0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4d4:	08 95       	ret

000004d6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4d6:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4da:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     4dc:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4e0:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     4e2:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4e6:	3f 7d       	andi	r19, 0xDF	; 223
     4e8:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4ec:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     4f0:	3f 7d       	andi	r19, 0xDF	; 223
     4f2:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     4f6:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4fa:	31 60       	ori	r19, 0x01	; 1
     4fc:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     500:	88 23       	and	r24, r24
     502:	39 f1       	breq	.+78     	; 0x552 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     504:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     508:	35 ff       	sbrs	r19, 5
     50a:	06 c0       	rjmp	.+12     	; 0x518 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     50c:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     510:	3f 7d       	andi	r19, 0xDF	; 223
     512:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     516:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     518:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <USB_HostState>
     51c:	31 30       	cpi	r19, 0x01	; 1
     51e:	c1 f0       	breq	.+48     	; 0x550 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     520:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     524:	34 ff       	sbrs	r19, 4
     526:	09 c0       	rjmp	.+18     	; 0x53a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     528:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     52c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     530:	8f 7e       	andi	r24, 0xEF	; 239
     532:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     536:	82 e0       	ldi	r24, 0x02	; 2

			break;
     538:	0c c0       	rjmp	.+24     	; 0x552 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     53a:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     53e:	31 ff       	sbrs	r19, 1
     540:	df cf       	rjmp	.-66     	; 0x500 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     542:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     54c:	83 e0       	ldi	r24, 0x03	; 3

			break;
     54e:	01 c0       	rjmp	.+2      	; 0x552 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     550:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     552:	21 11       	cpse	r18, r1
     554:	05 c0       	rjmp	.+10     	; 0x560 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     556:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     55a:	2e 7f       	andi	r18, 0xFE	; 254
     55c:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     560:	99 23       	and	r25, r25
     562:	29 f0       	breq	.+10     	; 0x56e <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     564:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     568:	90 62       	ori	r25, 0x20	; 32
     56a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     56e:	08 95       	ret

00000570 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     570:	ef 92       	push	r14
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	28 97       	sbiw	r28, 0x08	; 8
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     58a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <USB_HostState>
     58e:	8e 2f       	mov	r24, r30
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	8a 30       	cpi	r24, 0x0A	; 10
     594:	91 05       	cpc	r25, r1
     596:	08 f0       	brcs	.+2      	; 0x59a <USB_Host_ProcessNextHostState+0x2a>
     598:	f5 c0       	rjmp	.+490    	; 0x784 <USB_Host_ProcessNextHostState+0x214>
     59a:	fc 01       	movw	r30, r24
     59c:	e4 5b       	subi	r30, 0xB4	; 180
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	4c c7       	rjmp	.+3736   	; 0x143a <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     5a2:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <WaitMSRemaining.2935>
     5a6:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <WaitMSRemaining.2935+0x1>
     5aa:	01 15       	cp	r16, r1
     5ac:	11 05       	cpc	r17, r1
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <USB_Host_ProcessNextHostState+0x42>
     5b0:	e9 c0       	rjmp	.+466    	; 0x784 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 df       	rcall	.-224    	; 0x4d6 <USB_Host_WaitMS>
     5b6:	88 23       	and	r24, r24
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     5ba:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <__data_end>
     5be:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     5c2:	91 e0       	ldi	r25, 0x01	; 1
					break;
     5c4:	d1 c0       	rjmp	.+418    	; 0x768 <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     5c6:	01 50       	subi	r16, 0x01	; 1
     5c8:	11 09       	sbc	r17, r1
     5ca:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <WaitMSRemaining.2935+0x1>
     5ce:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <WaitMSRemaining.2935>
     5d2:	01 2b       	or	r16, r17
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <USB_Host_ProcessNextHostState+0x68>
     5d6:	d6 c0       	rjmp	.+428    	; 0x784 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     5d8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     5dc:	07 c0       	rjmp	.+14     	; 0x5ec <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     5de:	88 ee       	ldi	r24, 0xE8	; 232
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <WaitMSRemaining.2935+0x1>
     5e6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_HostState>
			break;
     5f0:	c9 c0       	rjmp	.+402    	; 0x784 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     5f2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <WaitMSRemaining.2935>
     5f6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <WaitMSRemaining.2935+0x1>
     5fa:	9c 01       	movw	r18, r24
     5fc:	21 50       	subi	r18, 0x01	; 1
     5fe:	31 09       	sbc	r19, r1
     600:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <WaitMSRemaining.2935+0x1>
     604:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <WaitMSRemaining.2935>
     608:	89 2b       	or	r24, r25
     60a:	39 f0       	breq	.+14     	; 0x61a <USB_Host_ProcessNextHostState+0xaa>
     60c:	8f ec       	ldi	r24, 0xCF	; 207
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <USB_Host_ProcessNextHostState+0xa0>
     614:	00 c0       	rjmp	.+0      	; 0x616 <USB_Host_ProcessNextHostState+0xa6>
     616:	00 00       	nop
     618:	b5 c0       	rjmp	.+362    	; 0x784 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     61a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     61c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     620:	80 61       	ori	r24, 0x10	; 16
     622:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     626:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     62a:	8b 7f       	andi	r24, 0xFB	; 251
     62c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     630:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     634:	80 61       	ori	r24, 0x10	; 16
     636:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     63a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	d2 cf       	rjmp	.-92     	; 0x5ec <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     648:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     64c:	80 ff       	sbrs	r24, 0
     64e:	9a c0       	rjmp	.+308    	; 0x784 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     650:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     654:	8e 7f       	andi	r24, 0xFE	; 254
     656:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     65a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     65e:	8d 7f       	andi	r24, 0xFD	; 253
     660:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     664:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     668:	8d 7f       	andi	r24, 0xFD	; 253
     66a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     66e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     672:	82 60       	ori	r24, 0x02	; 2
     674:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     678:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     682:	e8 d0       	rcall	.+464    	; 0x854 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     684:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_HostState>
     688:	84 e6       	ldi	r24, 0x64	; 100
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <WaitMSRemaining.2935+0x1>
     690:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <WaitMSRemaining.2935>
     694:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     696:	5c c0       	rjmp	.+184    	; 0x750 <USB_Host_ProcessNextHostState+0x1e0>
     698:	cd de       	rcall	.-614    	; 0x434 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     69a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_HostState>
     69e:	88 ec       	ldi	r24, 0xC8	; 200
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <WaitMSRemaining.2935+0x1>
     6a6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <WaitMSRemaining.2935>
     6aa:	86 e0       	ldi	r24, 0x06	; 6
     6ac:	51 c0       	rjmp	.+162    	; 0x750 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     6ae:	e1 2c       	mov	r14, r1
     6b0:	00 e4       	ldi	r16, 0x40	; 64
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	6f d0       	rcall	.+222    	; 0x79c <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     6be:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     6c2:	87 fd       	sbrc	r24, 7
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     6c8:	94 e0       	ldi	r25, 0x04	; 4
     6ca:	4e c0       	rjmp	.+156    	; 0x768 <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     6cc:	87 e0       	ldi	r24, 0x07	; 7
     6ce:	8e cf       	rjmp	.-228    	; 0x5ec <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     6d0:	88 e0       	ldi	r24, 0x08	; 8
     6d2:	e8 e1       	ldi	r30, 0x18	; 24
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	ad e2       	ldi	r26, 0x2D	; 45
     6d8:	b1 e0       	ldi	r27, 0x01	; 1
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     6e0:	e1 f7       	brne	.-8      	; 0x6da <USB_Host_ProcessNextHostState+0x16a>
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	4a d3       	rcall	.+1684   	; 0xd7c <USB_Host_SendControlRequest>
     6e8:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     6ea:	3d c0       	rjmp	.+122    	; 0x766 <USB_Host_ProcessNextHostState+0x1f6>
     6ec:	88 85       	ldd	r24, Y+8	; 0x08
     6ee:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     6f2:	a0 de       	rcall	.-704    	; 0x434 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     6f4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_HostState>
     6f8:	88 ec       	ldi	r24, 0xC8	; 200
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <WaitMSRemaining.2935+0x1>
     700:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <WaitMSRemaining.2935>
     704:	88 e0       	ldi	r24, 0x08	; 8
     706:	24 c0       	rjmp	.+72     	; 0x750 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     708:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <USB_Host_ControlPipeSize>
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	e1 2c       	mov	r14, r1
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	41 d0       	rcall	.+130    	; 0x79c <Pipe_ConfigurePipe>
     71a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     71e:	87 ff       	sbrs	r24, 7
     720:	d2 cf       	rjmp	.-92     	; 0x6c6 <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	e0 e2       	ldi	r30, 0x20	; 32
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	ad e2       	ldi	r26, 0x2D	; 45
     72a:	b1 e0       	ldi	r27, 0x01	; 1
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     732:	e1 f7       	brne	.-8      	; 0x72c <USB_Host_ProcessNextHostState+0x1bc>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	21 d3       	rcall	.+1602   	; 0xd7c <USB_Host_SendControlRequest>
     73a:	81 11       	cpse	r24, r1
     73c:	14 c0       	rjmp	.+40     	; 0x766 <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     73e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_HostState>
     742:	84 e6       	ldi	r24, 0x64	; 100
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <WaitMSRemaining.2935+0x1>
     74a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <WaitMSRemaining.2935>
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     754:	17 c0       	rjmp	.+46     	; 0x784 <USB_Host_ProcessNextHostState+0x214>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     75c:	8a e0       	ldi	r24, 0x0A	; 10
     75e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     762:	f8 dd       	rcall	.-1040   	; 0x354 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     764:	0f c0       	rjmp	.+30     	; 0x784 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     76c:	21 30       	cpi	r18, 0x01	; 1
     76e:	51 f0       	breq	.+20     	; 0x784 <USB_Host_ProcessNextHostState+0x214>
     770:	68 2f       	mov	r22, r24
     772:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     774:	47 de       	rcall	.-882    	; 0x404 <EVENT_USB_Host_DeviceEnumerationFailed>
     776:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     77a:	81 60       	ori	r24, 0x01	; 1
     77c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     780:	e3 dd       	rcall	.-1082   	; 0x348 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     782:	e4 d0       	rcall	.+456    	; 0x94c <USB_ResetInterface>
     784:	28 96       	adiw	r28, 0x08	; 8
	}
}
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ef 90       	pop	r14
     79a:	08 95       	ret

0000079c <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     79c:	ef 92       	push	r14
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     7a2:	2f 70       	andi	r18, 0x0F	; 15
     7a4:	42 2b       	or	r20, r18
     7a6:	90 e4       	ldi	r25, 0x40	; 64
     7a8:	69 9f       	mul	r22, r25
     7aa:	b0 01       	movw	r22, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     7b0:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     7b2:	2e 2d       	mov	r18, r14
     7b4:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     7b6:	37 30       	cpi	r19, 0x07	; 7
     7b8:	08 f0       	brcs	.+2      	; 0x7bc <Pipe_ConfigurePipe+0x20>
     7ba:	45 c0       	rjmp	.+138    	; 0x846 <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     7bc:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     7c0:	38 13       	cpse	r19, r24
     7c2:	13 c0       	rjmp	.+38     	; 0x7ea <Pipe_ConfigurePipe+0x4e>
     7c4:	48 e0       	ldi	r20, 0x08	; 8
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     7ca:	40 17       	cp	r20, r16
     7cc:	51 07       	cpc	r21, r17
     7ce:	38 f0       	brcs	.+14     	; 0x7de <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     7d0:	92 95       	swap	r25
     7d2:	90 7f       	andi	r25, 0xF0	; 240
     7d4:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     7d6:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     7d8:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <Pipe_ConfigurePipe+0x5e>
     7de:	95 30       	cpi	r25, 0x05	; 5
     7e0:	b9 f3       	breq	.-18     	; 0x7d0 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     7e2:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     7e4:	44 0f       	add	r20, r20
     7e6:	55 1f       	adc	r21, r21
     7e8:	f0 cf       	rjmp	.-32     	; 0x7ca <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     7ea:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     7ee:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     7f2:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     7f6:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     7fa:	91 fd       	sbrc	r25, 1
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     7fe:	3f 5f       	subi	r19, 0xFF	; 255
     800:	da cf       	rjmp	.-76     	; 0x7b6 <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     802:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     806:	4e 7f       	andi	r20, 0xFE	; 254
     808:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     80c:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     810:	4d 7f       	andi	r20, 0xFD	; 253
     812:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     816:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     81a:	41 60       	ori	r20, 0x01	; 1
     81c:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     820:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     824:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     828:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     82c:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     830:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     834:	90 62       	ori	r25, 0x20	; 32
     836:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     83a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     83e:	97 fd       	sbrc	r25, 7
     840:	de cf       	rjmp	.-68     	; 0x7fe <Pipe_ConfigurePipe+0x62>
		  return false;		
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	03 c0       	rjmp	.+6      	; 0x84c <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     846:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     84a:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ef 90       	pop	r14
     852:	08 95       	ret

00000854 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     854:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     85e:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     862:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     866:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     86a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     86e:	9e 7f       	andi	r25, 0xFE	; 254
     870:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	87 30       	cpi	r24, 0x07	; 7
     878:	81 f7       	brne	.-32     	; 0x85a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     87a:	08 95       	ret

0000087c <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     87c:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     880:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     882:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     884:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     888:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     88c:	27 ff       	sbrs	r18, 7
     88e:	0f c0       	rjmp	.+30     	; 0x8ae <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     890:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     894:	42 2f       	mov	r20, r18
     896:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     898:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     89c:	20 73       	andi	r18, 0x30	; 48
     89e:	20 31       	cpi	r18, 0x10	; 16
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <Pipe_IsEndpointBound+0x2a>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <Pipe_IsEndpointBound+0x2c>
     8a6:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     8a8:	24 2b       	or	r18, r20
     8aa:	82 17       	cp	r24, r18
     8ac:	39 f0       	breq	.+14     	; 0x8bc <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     8ae:	9f 5f       	subi	r25, 0xFF	; 255
     8b0:	97 30       	cpi	r25, 0x07	; 7
     8b2:	41 f7       	brne	.-48     	; 0x884 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8b4:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     8be:	08 95       	ret

000008c0 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     8c0:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     8c4:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     8c8:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     8ca:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     8ce:	90 73       	andi	r25, 0x30	; 48
     8d0:	90 31       	cpi	r25, 0x10	; 16
     8d2:	29 f4       	brne	.+10     	; 0x8de <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     8d4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     8d8:	90 ff       	sbrs	r25, 0
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <Pipe_WaitUntilReady+0x26>
     8dc:	19 c0       	rjmp	.+50     	; 0x910 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     8de:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     8e2:	92 fd       	sbrc	r25, 2
     8e4:	15 c0       	rjmp	.+42     	; 0x910 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     8e6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     8ea:	91 fd       	sbrc	r25, 1
     8ec:	13 c0       	rjmp	.+38     	; 0x914 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     8ee:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <USB_HostState>
     8f2:	91 30       	cpi	r25, 0x01	; 1
     8f4:	89 f0       	breq	.+34     	; 0x918 <Pipe_WaitUntilReady+0x58>
     8f6:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     8fa:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     8fe:	42 17       	cp	r20, r18
     900:	53 07       	cpc	r21, r19
     902:	19 f3       	breq	.-58     	; 0x8ca <Pipe_WaitUntilReady+0xa>
     904:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     906:	11 f0       	breq	.+4      	; 0x90c <Pipe_WaitUntilReady+0x4c>
     908:	a9 01       	movw	r20, r18
     90a:	df cf       	rjmp	.-66     	; 0x8ca <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     918:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     91a:	08 95       	ret

0000091c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     91c:	70 d0       	rcall	.+224    	; 0x9fe <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     91e:	77 d0       	rcall	.+238    	; 0xa0e <USB_INT_ClearAllInterrupts>
     920:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	81 60       	ori	r24, 0x01	; 1
     928:	80 83       	st	Z, r24
     92a:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	8f 77       	andi	r24, 0x7F	; 127
     932:	80 83       	st	Z, r24
     934:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     936:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	8c 91       	ld	r24, X
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	8c 93       	st	X, r24
     940:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     942:	8f 7e       	andi	r24, 0xEF	; 239
     944:	80 83       	st	Z, r24
     946:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     94a:	08 95       	ret

0000094c <USB_ResetInterface>:
     94c:	58 d0       	rcall	.+176    	; 0x9fe <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     94e:	5f d0       	rcall	.+190    	; 0xa0e <USB_INT_ClearAllInterrupts>
     950:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     954:	8f 77       	andi	r24, 0x7F	; 127
     956:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     95a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     95e:	80 68       	ori	r24, 0x80	; 128
     960:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     964:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     968:	8f 7d       	andi	r24, 0xDF	; 223
     96a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     96e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     972:	8f 77       	andi	r24, 0x7F	; 127
     974:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     978:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     97a:	89 bd       	out	0x29, r24	; 41
     97c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     97e:	89 bd       	out	0x29, r24	; 41
     980:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     982:	00 fe       	sbrs	r0, 0
     984:	fd cf       	rjmp	.-6      	; 0x980 <USB_ResetInterface+0x34>
     986:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     988:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_HostState>
     98c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     990:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     992:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_Host_ControlPipeSize>
     996:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     99a:	80 64       	ori	r24, 0x40	; 64
     99c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     9a0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9a4:	81 60       	ori	r24, 0x01	; 1
     9a6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9aa:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     9ae:	84 60       	ori	r24, 0x04	; 4
     9b0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9b4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     9b8:	8f 7e       	andi	r24, 0xEF	; 239
     9ba:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     9be:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     9c0:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     9c2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     9cc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     9d0:	84 60       	ori	r24, 0x04	; 4
     9d2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     9d6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     9e0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     9e4:	80 61       	ori	r24, 0x10	; 16
     9e6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     9ea:	08 95       	ret

000009ec <USB_Init>:
     9ec:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <USB_IsInitialized>

	USB_ResetInterface();
     9fc:	a7 cf       	rjmp	.-178    	; 0x94c <USB_ResetInterface>

000009fe <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     9fe:	e8 ed       	ldi	r30, 0xD8	; 216
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8c 7f       	andi	r24, 0xFC	; 252
     a06:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     a08:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a0c:	08 95       	ret

00000a0e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a0e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     a12:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a16:	08 95       	ret

00000a18 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	0b b6       	in	r0, 0x3b	; 59
     a24:	0f 92       	push	r0
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	4f 93       	push	r20
     a2c:	5f 93       	push	r21
     a2e:	6f 93       	push	r22
     a30:	7f 93       	push	r23
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	af 93       	push	r26
     a38:	bf 93       	push	r27
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a3e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     a42:	85 ff       	sbrs	r24, 5
     a44:	0a c0       	rjmp	.+20     	; 0xa5a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a4a:	85 ff       	sbrs	r24, 5
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a4e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a52:	8f 7d       	andi	r24, 0xDF	; 223
     a54:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     a58:	6a d1       	rcall	.+724    	; 0xd2e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     a5a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     a5e:	81 ff       	sbrs	r24, 1
     a60:	15 c0       	rjmp	.+42     	; 0xa8c <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     a62:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a66:	81 ff       	sbrs	r24, 1
     a68:	11 c0       	rjmp	.+34     	; 0xa8c <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a6a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a6e:	8d 7f       	andi	r24, 0xFD	; 253
     a70:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a74:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     a7e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a82:	8d 7f       	andi	r24, 0xFD	; 253
     a84:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     a88:	5f dc       	rcall	.-1858   	; 0x348 <EVENT_USB_Host_DeviceUnattached>
     a8a:	60 df       	rcall	.-320    	; 0x94c <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     a8c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     a90:	81 ff       	sbrs	r24, 1
     a92:	15 c0       	rjmp	.+42     	; 0xabe <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     a94:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a98:	81 ff       	sbrs	r24, 1
     a9a:	11 c0       	rjmp	.+34     	; 0xabe <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a9c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     aa0:	8d 7f       	andi	r24, 0xFD	; 253
     aa2:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     aa6:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     aa8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     aac:	81 60       	ori	r24, 0x01	; 1
     aae:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	96 dc       	rcall	.-1748   	; 0x3e2 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ab6:	48 dc       	rcall	.-1904   	; 0x348 <EVENT_USB_Host_DeviceUnattached>
     ab8:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     aba:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_HostState>
     abe:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ac2:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <__vector_10+0xdc>
     ac6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     aca:	80 ff       	sbrs	r24, 0
     acc:	13 c0       	rjmp	.+38     	; 0xaf4 <__vector_10+0xdc>
     ace:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ad2:	8e 7f       	andi	r24, 0xFE	; 254
     ad4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     ad8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     adc:	8e 7f       	andi	r24, 0xFE	; 254
     ade:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ae2:	2c dc       	rcall	.-1960   	; 0x33c <EVENT_USB_Host_DeviceAttached>
     ae4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ae8:	82 60       	ori	r24, 0x02	; 2
     aea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     aee:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     af0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_HostState>
     af4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     af8:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     afa:	0e c0       	rjmp	.+28     	; 0xb18 <__vector_10+0x100>
     afc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     b00:	82 ff       	sbrs	r24, 2
     b02:	0a c0       	rjmp	.+20     	; 0xb18 <__vector_10+0x100>
     b04:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     b08:	8b 7f       	andi	r24, 0xFB	; 251
     b0a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	78 dc       	rcall	.-1808   	; 0x404 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     b14:	19 dc       	rcall	.-1998   	; 0x348 <EVENT_USB_Host_DeviceUnattached>
     b16:	1a df       	rcall	.-460    	; 0x94c <USB_ResetInterface>

		USB_ResetInterface();
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0b be       	out	0x3b, r0	; 59
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <Pipe_Read_Stream_LE>:
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
     b50:	8b 01       	movw	r16, r22
     b52:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     b54:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     b58:	8f 7c       	andi	r24, 0xCF	; 207
     b5a:	80 61       	ori	r24, 0x10	; 16
     b5c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     b60:	af de       	rcall	.-674    	; 0x8c0 <Pipe_WaitUntilReady>
     b62:	81 11       	cpse	r24, r1
     b64:	32 c0       	rjmp	.+100    	; 0xbca <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b66:	e1 14       	cp	r14, r1
     b68:	f1 04       	cpc	r15, r1
     b6a:	39 f0       	breq	.+14     	; 0xb7a <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     b6c:	f7 01       	movw	r30, r14
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	08 1b       	sub	r16, r24
     b74:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b76:	c8 0f       	add	r28, r24
     b78:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b7a:	c1 2c       	mov	r12, r1
     b7c:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     b7e:	01 15       	cp	r16, r1
     b80:	11 05       	cpc	r17, r1
     b82:	11 f1       	breq	.+68     	; 0xbc8 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b84:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b88:	85 fd       	sbrc	r24, 5
     b8a:	15 c0       	rjmp	.+42     	; 0xbb6 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     b8c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b90:	8e 77       	andi	r24, 0x7E	; 126
     b92:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     b96:	e1 14       	cp	r14, r1
     b98:	f1 04       	cpc	r15, r1
     b9a:	49 f0       	breq	.+18     	; 0xbae <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     b9c:	f7 01       	movw	r30, r14
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	c8 0e       	add	r12, r24
     ba4:	d9 1e       	adc	r13, r25
     ba6:	d1 82       	std	Z+1, r13	; 0x01
     ba8:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     baa:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     bac:	0e c0       	rjmp	.+28     	; 0xbca <Pipe_Read_Stream_LE+0x8c>
     bae:	88 de       	rcall	.-752    	; 0x8c0 <Pipe_WaitUntilReady>
     bb0:	88 23       	and	r24, r24
     bb2:	29 f3       	breq	.-54     	; 0xb7e <Pipe_Read_Stream_LE+0x40>
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     bb6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     bba:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     bbc:	01 50       	subi	r16, 0x01	; 1
     bbe:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     bc0:	ff ef       	ldi	r31, 0xFF	; 255
     bc2:	cf 1a       	sub	r12, r31
     bc4:	df 0a       	sbc	r13, r31
     bc6:	db cf       	rjmp	.-74     	; 0xb7e <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	08 95       	ret

00000bdc <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	dc 01       	movw	r26, r24
     be2:	eb 01       	movw	r28, r22
     be4:	e8 81       	ld	r30, Y
     be6:	f9 81       	ldd	r31, Y+1	; 0x01
     be8:	20 81       	ld	r18, Z
     bea:	8d 91       	ld	r24, X+
     bec:	9c 91       	ld	r25, X
     bee:	11 97       	sbiw	r26, 0x01	; 1
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <USB_GetNextDescriptor+0x1e>
     bf8:	9c 01       	movw	r18, r24
     bfa:	e2 0f       	add	r30, r18
     bfc:	f3 1f       	adc	r31, r19
     bfe:	eb 01       	movw	r28, r22
     c00:	f9 83       	std	Y+1, r31	; 0x01
     c02:	e8 83       	st	Y, r30
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	11 97       	sbiw	r26, 0x01	; 1
     c0a:	82 1b       	sub	r24, r18
     c0c:	93 0b       	sbc	r25, r19
     c0e:	8d 93       	st	X+, r24
     c10:	9c 93       	st	X, r25
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <USB_Host_GetDeviceConfigDescriptor>:
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	29 97       	sbiw	r28, 0x09	; 9
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	6b 01       	movw	r12, r22
     c3a:	8a 01       	movw	r16, r20
     c3c:	79 01       	movw	r14, r18
     c3e:	90 e8       	ldi	r25, 0x80	; 128
     c40:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <USB_ControlRequest>
     c44:	96 e0       	ldi	r25, 0x06	; 6
     c46:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <USB_ControlRequest+0x1>
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	92 60       	ori	r25, 0x02	; 2
     c50:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x3>
     c54:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x2>
     c58:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <USB_ControlRequest+0x5>
     c5c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_ControlRequest+0x4>
     c60:	89 e0       	ldi	r24, 0x09	; 9
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <USB_ControlRequest+0x7>
     c68:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <USB_ControlRequest+0x6>
     c6c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     c70:	ce 01       	movw	r24, r28
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	83 d0       	rcall	.+262    	; 0xd7c <USB_Host_SendControlRequest>
     c76:	81 11       	cpse	r24, r1
     c78:	19 c0       	rjmp	.+50     	; 0xcac <USB_Host_GetDeviceConfigDescriptor+0x94>
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	f6 01       	movw	r30, r12
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
     c84:	e8 16       	cp	r14, r24
     c86:	f9 06       	cpc	r15, r25
     c88:	70 f0       	brcs	.+28     	; 0xca6 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     c8a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <USB_ControlRequest+0x7>
     c8e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <USB_ControlRequest+0x6>
     c92:	c8 01       	movw	r24, r16
     c94:	73 d0       	rcall	.+230    	; 0xd7c <USB_Host_SendControlRequest>
     c96:	81 11       	cpse	r24, r1
     c98:	09 c0       	rjmp	.+18     	; 0xcac <USB_Host_GetDeviceConfigDescriptor+0x94>
     c9a:	f8 01       	movw	r30, r16
     c9c:	81 81       	ldd	r24, Z+1	; 0x01
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	21 f4       	brne	.+8      	; 0xcaa <USB_Host_GetDeviceConfigDescriptor+0x92>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <USB_Host_GetDeviceConfigDescriptor+0x94>
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <USB_Host_GetDeviceConfigDescriptor+0x94>
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	29 96       	adiw	r28, 0x09	; 9
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	08 95       	ret

00000cca <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	8c 01       	movw	r16, r24
     ce0:	eb 01       	movw	r28, r22
     ce2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ce4:	f8 01       	movw	r30, r16
     ce6:	e0 80       	ld	r14, Z
     ce8:	f1 80       	ldd	r15, Z+1	; 0x01
     cea:	e1 14       	cp	r14, r1
     cec:	f1 04       	cpc	r15, r1
     cee:	99 f0       	breq	.+38     	; 0xd16 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     cf0:	a8 80       	ld	r10, Y
     cf2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     cf4:	be 01       	movw	r22, r28
     cf6:	c8 01       	movw	r24, r16
     cf8:	71 df       	rcall	.-286    	; 0xbdc <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     cfa:	88 81       	ld	r24, Y
     cfc:	99 81       	ldd	r25, Y+1	; 0x01
     cfe:	f6 01       	movw	r30, r12
     d00:	09 95       	icall
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	79 f3       	breq	.-34     	; 0xce4 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	39 f4       	brne	.+14     	; 0xd18 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     d0a:	b9 82       	std	Y+1, r11	; 0x01
     d0c:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     d0e:	f8 01       	movw	r30, r16
     d10:	f1 82       	std	Z+1, r15	; 0x01
     d12:	e0 82       	st	Z, r14
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     d16:	82 e0       	ldi	r24, 0x02	; 2
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	08 95       	ret

00000d2e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     d2e:	08 95       	ret

00000d30 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d38:	c9 ee       	ldi	r28, 0xE9	; 233
     d3a:	d3 e0       	ldi	r29, 0x03	; 3
     d3c:	11 11       	cpse	r17, r1
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     d40:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d44:	83 fd       	sbrc	r24, 3
     d46:	15 c0       	rjmp	.+42     	; 0xd72 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	c5 db       	rcall	.-2166   	; 0x4d6 <USB_Host_WaitMS>
     d4c:	81 11       	cpse	r24, r1
     d4e:	12 c0       	rjmp	.+36     	; 0xd74 <USB_Host_WaitForIOS+0x44>
     d50:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     d52:	a1 f7       	brne	.-24     	; 0xd3c <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	0e c0       	rjmp	.+28     	; 0xd74 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d58:	11 30       	cpi	r17, 0x01	; 1
     d5a:	29 f4       	brne	.+10     	; 0xd66 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d5c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     d60:	80 ff       	sbrs	r24, 0
     d62:	f2 cf       	rjmp	.-28     	; 0xd48 <USB_Host_WaitForIOS+0x18>
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d66:	12 30       	cpi	r17, 0x02	; 2
     d68:	79 f7       	brne	.-34     	; 0xd48 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d6a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     d6e:	82 ff       	sbrs	r24, 2
     d70:	eb cf       	rjmp	.-42     	; 0xd48 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     d72:	80 e0       	ldi	r24, 0x00	; 0
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d88:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     d8c:	81 70       	andi	r24, 0x01	; 1
     d8e:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     d90:	c0 91 33 01 	lds	r28, 0x0133	; 0x800133 <USB_ControlRequest+0x6>
     d94:	d0 91 34 01 	lds	r29, 0x0134	; 0x800134 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d98:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	98 db       	rcall	.-2256   	; 0x4d6 <USB_Host_WaitMS>
     da6:	81 11       	cpse	r24, r1
     da8:	c8 c0       	rjmp	.+400    	; 0xf3a <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     daa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     dae:	8f 7c       	andi	r24, 0xCF	; 207
     db0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     db4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     db8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dc2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     dc6:	8f 7b       	andi	r24, 0xBF	; 191
     dc8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     dcc:	ed e2       	ldi	r30, 0x2D	; 45
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	85 e3       	ldi	r24, 0x35	; 53
     dd2:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     dd4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     dd6:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     dda:	8e 17       	cp	r24, r30
     ddc:	9f 07       	cpc	r25, r31
     dde:	d1 f7       	brne	.-12     	; 0xdd4 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     de0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     de4:	87 77       	andi	r24, 0x77	; 119
     de6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	a1 df       	rcall	.-190    	; 0xd30 <USB_Host_WaitForIOS>
     dee:	81 11       	cpse	r24, r1
     df0:	a4 c0       	rjmp	.+328    	; 0xf3a <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     df2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	6b db       	rcall	.-2346   	; 0x4d6 <USB_Host_WaitMS>
     e00:	81 11       	cpse	r24, r1
     e02:	9b c0       	rjmp	.+310    	; 0xf3a <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     e04:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <USB_ControlRequest>
     e08:	87 ff       	sbrs	r24, 7
     e0a:	4e c0       	rjmp	.+156    	; 0xea8 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e0c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e10:	8f 7c       	andi	r24, 0xCF	; 207
     e12:	80 61       	ori	r24, 0x10	; 16
     e14:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     e18:	01 15       	cp	r16, r1
     e1a:	11 05       	cpc	r17, r1
     e1c:	09 f0       	breq	.+2      	; 0xe20 <USB_Host_SendControlRequest+0xa4>
     e1e:	3a c0       	rjmp	.+116    	; 0xe94 <USB_Host_SendControlRequest+0x118>
     e20:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e24:	8f 7c       	andi	r24, 0xCF	; 207
     e26:	80 62       	ori	r24, 0x20	; 32
     e28:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e2c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	7b df       	rcall	.-266    	; 0xd30 <USB_Host_WaitForIOS>
     e3a:	81 11       	cpse	r24, r1
     e3c:	7e c0       	rjmp	.+252    	; 0xf3a <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     e3e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e42:	8b 77       	andi	r24, 0x7B	; 123
     e44:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	72 df       	rcall	.-284    	; 0xd30 <USB_Host_WaitForIOS>
     e4c:	76 c0       	rjmp	.+236    	; 0xf3a <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e4e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e52:	8f 7b       	andi	r24, 0xBF	; 191
     e54:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	6a df       	rcall	.-300    	; 0xd30 <USB_Host_WaitForIOS>
     e5c:	81 11       	cpse	r24, r1
     e5e:	6d c0       	rjmp	.+218    	; 0xf3a <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     e60:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     e64:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     e68:	89 2b       	or	r24, r25
     e6a:	11 f4       	brne	.+4      	; 0xe70 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
     e70:	f8 01       	movw	r30, r16
     e72:	8f 01       	movw	r16, r30
     e74:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     e78:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
     e7c:	89 2b       	or	r24, r25
     e7e:	69 f4       	brne	.+26     	; 0xe9a <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e80:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e8a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e8e:	8e 77       	andi	r24, 0x7E	; 126
     e90:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     e94:	20 97       	sbiw	r28, 0x00	; 0
     e96:	d9 f6       	brne	.-74     	; 0xe4e <USB_Host_SendControlRequest+0xd2>
     e98:	c3 cf       	rjmp	.-122    	; 0xe20 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     e9a:	20 97       	sbiw	r28, 0x00	; 0
     e9c:	89 f3       	breq	.-30     	; 0xe80 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e9e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
     ea2:	81 93       	st	Z+, r24
					DataLen--;
     ea4:	21 97       	sbiw	r28, 0x01	; 1
     ea6:	e5 cf       	rjmp	.-54     	; 0xe72 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     ea8:	01 15       	cp	r16, r1
     eaa:	11 05       	cpc	r17, r1
     eac:	91 f1       	breq	.+100    	; 0xf12 <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eae:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     eb2:	8f 7c       	andi	r24, 0xCF	; 207
     eb4:	80 62       	ori	r24, 0x20	; 32
     eb6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eba:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ebe:	8f 7b       	andi	r24, 0xBF	; 191
     ec0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ec8:	e1 f0       	breq	.+56     	; 0xf02 <USB_Host_SendControlRequest+0x186>
     eca:	32 df       	rcall	.-412    	; 0xd30 <USB_Host_WaitForIOS>
     ecc:	81 11       	cpse	r24, r1
     ece:	35 c0       	rjmp	.+106    	; 0xf3a <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ed0:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     ed4:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     ed8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Host_ControlPipeSize>
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	28 17       	cp	r18, r24
     ee0:	39 07       	cpc	r19, r25
     ee2:	48 f4       	brcc	.+18     	; 0xef6 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	f8 01       	movw	r30, r16
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     eee:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
     ef2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ef4:	69 f7       	brne	.-38     	; 0xed0 <USB_Host_SendControlRequest+0x154>
     ef6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     efa:	8b 77       	andi	r24, 0x7B	; 123
     efc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f00:	e1 cf       	rjmp	.-62     	; 0xec4 <USB_Host_SendControlRequest+0x148>
     f02:	16 df       	rcall	.-468    	; 0xd30 <USB_Host_WaitForIOS>
     f04:	81 11       	cpse	r24, r1
     f06:	19 c0       	rjmp	.+50     	; 0xf3a <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f08:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f12:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f16:	8f 7c       	andi	r24, 0xCF	; 207
     f18:	80 61       	ori	r24, 0x10	; 16
     f1a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f1e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f22:	8f 7b       	andi	r24, 0xBF	; 191
     f24:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	02 df       	rcall	.-508    	; 0xd30 <USB_Host_WaitForIOS>
     f2c:	81 11       	cpse	r24, r1
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f30:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f34:	9e 77       	andi	r25, 0x7E	; 126
     f36:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f3a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f3e:	90 64       	ori	r25, 0x40	; 64
     f40:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     f44:	f1 10       	cpse	r15, r1
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f48:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f4c:	9e 7f       	andi	r25, 0xFE	; 254
     f4e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
     f58:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	08 95       	ret

00000f68 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
     f68:	cf 93       	push	r28
     f6a:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     f6c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest>
     f70:	89 e0       	ldi	r24, 0x09	; 9
     f72:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_ControlRequest+0x1>
     f76:	8c 2f       	mov	r24, r28
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x3>
     f7e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x2>
     f82:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <USB_ControlRequest+0x5>
     f86:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_ControlRequest+0x4>
     f8a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_ControlRequest+0x7>
     f8e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f92:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	f0 de       	rcall	.-544    	; 0xd7c <USB_Host_SendControlRequest>
     f9c:	81 11       	cpse	r24, r1
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
     fa0:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
     fa4:	c1 11       	cpse	r28, r1
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <USB_Host_SetDeviceConfiguration+0x44>
     fa8:	9a e0       	ldi	r25, 0x0A	; 10
     faa:	01 c0       	rjmp	.+2      	; 0xfae <USB_Host_SetDeviceConfiguration+0x46>
     fac:	9b e0       	ldi	r25, 0x0B	; 11
     fae:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <USB_HostState>
	}

	return ErrorCode;
}
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     fbc:	c7 ea       	ldi	r28, 0xA7	; 167
     fbe:	d0 e0       	ldi	r29, 0x00	; 0
     fc0:	18 81       	ld	r17, Y
     fc2:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fc4:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
     fc6:	d4 da       	rcall	.-2648   	; 0x570 <USB_Host_ProcessNextHostState>
     fc8:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <DCOMP_CDC_Host_NextCDCControlInterface>:

void CDC_Host_CreateBlockingStream(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                                   FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Host_putchar, CDC_Host_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     fd2:	fc 01       	movw	r30, r24
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	59 f4       	brne	.+22     	; 0xff0 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
     fda:	85 81       	ldd	r24, Z+5	; 0x05
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	41 f4       	brne	.+16     	; 0xff0 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
     fe0:	86 81       	ldd	r24, Z+6	; 0x06
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	29 f4       	brne	.+10     	; 0xff0 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
     fe6:	97 81       	ldd	r25, Z+7	; 0x07
     fe8:	91 30       	cpi	r25, 0x01	; 1
     fea:	19 f4       	brne	.+6      	; 0xff2 <DCOMP_CDC_Host_NextCDCControlInterface+0x20>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	08 95       	ret

00000ff4 <DCOMP_CDC_Host_NextCDCDataInterface>:
     ff4:	fc 01       	movw	r30, r24
     ff6:	81 81       	ldd	r24, Z+1	; 0x01
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	51 f4       	brne	.+20     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     ffc:	85 81       	ldd	r24, Z+5	; 0x05
     ffe:	8a 30       	cpi	r24, 0x0A	; 10
    1000:	39 f4       	brne	.+14     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    1002:	86 81       	ldd	r24, Z+6	; 0x06
    1004:	81 11       	cpse	r24, r1
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    1008:	87 81       	ldd	r24, Z+7	; 0x07
    100a:	81 11       	cpse	r24, r1
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100e:	08 95       	ret
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	08 95       	ret

00001014 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint>:
    1014:	fc 01       	movw	r30, r24
    1016:	21 81       	ldd	r18, Z+1	; 0x01
    1018:	25 30       	cpi	r18, 0x05	; 5
    101a:	59 f4       	brne	.+22     	; 0x1032 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1e>
    101c:	23 81       	ldd	r18, Z+3	; 0x03
    101e:	23 70       	andi	r18, 0x03	; 3
    1020:	22 50       	subi	r18, 0x02	; 2
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	20 f4       	brcc	.+8      	; 0x102e <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1a>
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	29 dc       	rcall	.-1966   	; 0x87c <Pipe_IsEndpointBound>
    102a:	88 23       	and	r24, r24
    102c:	31 f0       	breq	.+12     	; 0x103a <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x26>
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	08 95       	ret
    1032:	24 30       	cpi	r18, 0x04	; 4
    1034:	e1 f7       	brne	.-8      	; 0x102e <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1a>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	08 95       	ret
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	08 95       	ret

0000103e <CDC_Host_ConfigurePipes>:
    103e:	3f 92       	push	r3
    1040:	4f 92       	push	r4
    1042:	5f 92       	push	r5
    1044:	6f 92       	push	r6
    1046:	7f 92       	push	r7
    1048:	8f 92       	push	r8
    104a:	9f 92       	push	r9
    104c:	af 92       	push	r10
    104e:	bf 92       	push	r11
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 d0       	rcall	.+0      	; 0x1062 <CDC_Host_ConfigurePipes+0x24>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <CDC_Host_ConfigurePipes+0x26>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	7a 83       	std	Y+2, r23	; 0x02
    106a:	69 83       	std	Y+1, r22	; 0x01
    106c:	5c 83       	std	Y+4, r21	; 0x04
    106e:	4b 83       	std	Y+3, r20	; 0x03
    1070:	fc 01       	movw	r30, r24
    1072:	36 96       	adiw	r30, 0x06	; 6
    1074:	21 e1       	ldi	r18, 0x11	; 17
    1076:	df 01       	movw	r26, r30
    1078:	1d 92       	st	X+, r1
    107a:	2a 95       	dec	r18
    107c:	e9 f7       	brne	.-6      	; 0x1078 <CDC_Host_ConfigurePipes+0x3a>
    107e:	eb 81       	ldd	r30, Y+3	; 0x03
    1080:	fc 81       	ldd	r31, Y+4	; 0x04
    1082:	11 81       	ldd	r17, Z+1	; 0x01
    1084:	12 30       	cpi	r17, 0x02	; 2
    1086:	09 f0       	breq	.+2      	; 0x108a <CDC_Host_ConfigurePipes+0x4c>
    1088:	ae c0       	rjmp	.+348    	; 0x11e6 <CDC_Host_ConfigurePipes+0x1a8>
    108a:	6c 01       	movw	r12, r24
    108c:	41 2c       	mov	r4, r1
    108e:	51 2c       	mov	r5, r1
    1090:	a1 2c       	mov	r10, r1
    1092:	b1 2c       	mov	r11, r1
    1094:	61 2c       	mov	r6, r1
    1096:	71 2c       	mov	r7, r1
    1098:	81 2c       	mov	r8, r1
    109a:	91 2c       	mov	r9, r1
    109c:	81 14       	cp	r8, r1
    109e:	91 04       	cpc	r9, r1
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <CDC_Host_ConfigurePipes+0x66>
    10a2:	3e c0       	rjmp	.+124    	; 0x1120 <CDC_Host_ConfigurePipes+0xe2>
    10a4:	41 14       	cp	r4, r1
    10a6:	51 04       	cpc	r5, r1
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <CDC_Host_ConfigurePipes+0x7a>
    10aa:	a1 14       	cp	r10, r1
    10ac:	b1 04       	cpc	r11, r1
    10ae:	79 f4       	brne	.+30     	; 0x10ce <CDC_Host_ConfigurePipes+0x90>
    10b0:	19 c0       	rjmp	.+50     	; 0x10e4 <CDC_Host_ConfigurePipes+0xa6>
    10b2:	41 14       	cp	r4, r1
    10b4:	51 04       	cpc	r5, r1
    10b6:	b1 f0       	breq	.+44     	; 0x10e4 <CDC_Host_ConfigurePipes+0xa6>
    10b8:	4a e0       	ldi	r20, 0x0A	; 10
    10ba:	58 e0       	ldi	r21, 0x08	; 8
    10bc:	be 01       	movw	r22, r28
    10be:	6d 5f       	subi	r22, 0xFD	; 253
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	01 de       	rcall	.-1022   	; 0xcca <USB_GetNextDescriptorComp>
    10c8:	81 11       	cpse	r24, r1
    10ca:	ef cf       	rjmp	.-34     	; 0x10aa <CDC_Host_ConfigurePipes+0x6c>
    10cc:	1a c0       	rjmp	.+52     	; 0x1102 <CDC_Host_ConfigurePipes+0xc4>
    10ce:	4a ef       	ldi	r20, 0xFA	; 250
    10d0:	57 e0       	ldi	r21, 0x07	; 7
    10d2:	be 01       	movw	r22, r28
    10d4:	6d 5f       	subi	r22, 0xFD	; 253
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	f6 dd       	rcall	.-1044   	; 0xcca <USB_GetNextDescriptorComp>
    10de:	81 11       	cpse	r24, r1
    10e0:	85 c0       	rjmp	.+266    	; 0x11ec <CDC_Host_ConfigurePipes+0x1ae>
    10e2:	d8 cf       	rjmp	.-80     	; 0x1094 <CDC_Host_ConfigurePipes+0x56>
    10e4:	49 ee       	ldi	r20, 0xE9	; 233
    10e6:	57 e0       	ldi	r21, 0x07	; 7
    10e8:	be 01       	movw	r22, r28
    10ea:	6d 5f       	subi	r22, 0xFD	; 253
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	ce 01       	movw	r24, r28
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	eb dd       	rcall	.-1066   	; 0xcca <USB_GetNextDescriptorComp>
    10f4:	81 11       	cpse	r24, r1
    10f6:	7a c0       	rjmp	.+244    	; 0x11ec <CDC_Host_ConfigurePipes+0x1ae>
    10f8:	4b 80       	ldd	r4, Y+3	; 0x03
    10fa:	5c 80       	ldd	r5, Y+4	; 0x04
    10fc:	a1 2c       	mov	r10, r1
    10fe:	b1 2c       	mov	r11, r1
    1100:	cd cf       	rjmp	.-102    	; 0x109c <CDC_Host_ConfigurePipes+0x5e>
    1102:	eb 81       	ldd	r30, Y+3	; 0x03
    1104:	fc 81       	ldd	r31, Y+4	; 0x04
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	87 ff       	sbrs	r24, 7
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <CDC_Host_ConfigurePipes+0xda>
    110c:	83 81       	ldd	r24, Z+3	; 0x03
    110e:	83 70       	andi	r24, 0x03	; 3
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	21 f0       	breq	.+8      	; 0x111c <CDC_Host_ConfigurePipes+0xde>
    1114:	4f 01       	movw	r8, r30
    1116:	c2 cf       	rjmp	.-124    	; 0x109c <CDC_Host_ConfigurePipes+0x5e>
    1118:	3f 01       	movw	r6, r30
    111a:	c0 cf       	rjmp	.-128    	; 0x109c <CDC_Host_ConfigurePipes+0x5e>
    111c:	5f 01       	movw	r10, r30
    111e:	be cf       	rjmp	.-132    	; 0x109c <CDC_Host_ConfigurePipes+0x5e>
    1120:	61 14       	cp	r6, r1
    1122:	71 04       	cpc	r7, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <CDC_Host_ConfigurePipes+0xea>
    1126:	be cf       	rjmp	.-132    	; 0x10a4 <CDC_Host_ConfigurePipes+0x66>
    1128:	a1 14       	cp	r10, r1
    112a:	b1 04       	cpc	r11, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <CDC_Host_ConfigurePipes+0xf2>
    112e:	c1 cf       	rjmp	.-126    	; 0x10b2 <CDC_Host_ConfigurePipes+0x74>
    1130:	ff 24       	eor	r15, r15
    1132:	f3 94       	inc	r15
    1134:	f6 01       	movw	r30, r12
    1136:	80 81       	ld	r24, Z
    1138:	8f 11       	cpse	r24, r15
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <CDC_Host_ConfigurePipes+0x118>
    113c:	d4 01       	movw	r26, r8
    113e:	14 96       	adiw	r26, 0x04	; 4
    1140:	0d 91       	ld	r16, X+
    1142:	1c 91       	ld	r17, X
    1144:	15 97       	sbiw	r26, 0x05	; 5
    1146:	12 96       	adiw	r26, 0x02	; 2
    1148:	2c 91       	ld	r18, X
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	11 87       	std	Z+9, r17	; 0x09
    114e:	00 87       	std	Z+8, r16	; 0x08
    1150:	31 2c       	mov	r3, r1
    1152:	40 e1       	ldi	r20, 0x10	; 16
    1154:	10 c0       	rjmp	.+32     	; 0x1176 <CDC_Host_ConfigurePipes+0x138>
    1156:	f6 01       	movw	r30, r12
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	8f 11       	cpse	r24, r15
    115c:	0e c0       	rjmp	.+28     	; 0x117a <CDC_Host_ConfigurePipes+0x13c>
    115e:	d3 01       	movw	r26, r6
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	0d 91       	ld	r16, X+
    1164:	1c 91       	ld	r17, X
    1166:	15 97       	sbiw	r26, 0x05	; 5
    1168:	12 96       	adiw	r26, 0x02	; 2
    116a:	2c 91       	ld	r18, X
    116c:	83 81       	ldd	r24, Z+3	; 0x03
    116e:	13 87       	std	Z+11, r17	; 0x0b
    1170:	02 87       	std	Z+10, r16	; 0x0a
    1172:	31 2c       	mov	r3, r1
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	62 e0       	ldi	r22, 0x02	; 2
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <CDC_Host_ConfigurePipes+0x162>
    117a:	f6 01       	movw	r30, r12
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	8f 11       	cpse	r24, r15
    1180:	1c c0       	rjmp	.+56     	; 0x11ba <CDC_Host_ConfigurePipes+0x17c>
    1182:	d5 01       	movw	r26, r10
    1184:	14 96       	adiw	r26, 0x04	; 4
    1186:	0d 91       	ld	r16, X+
    1188:	1c 91       	ld	r17, X
    118a:	15 97       	sbiw	r26, 0x05	; 5
    118c:	12 96       	adiw	r26, 0x02	; 2
    118e:	2c 91       	ld	r18, X
    1190:	12 97       	sbiw	r26, 0x02	; 2
    1192:	85 81       	ldd	r24, Z+5	; 0x05
    1194:	16 96       	adiw	r26, 0x06	; 6
    1196:	3c 90       	ld	r3, X
    1198:	15 87       	std	Z+13, r17	; 0x0d
    119a:	04 87       	std	Z+12, r16	; 0x0c
    119c:	40 e1       	ldi	r20, 0x10	; 16
    119e:	63 e0       	ldi	r22, 0x03	; 3
    11a0:	81 11       	cpse	r24, r1
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <CDC_Host_ConfigurePipes+0x16a>
    11a4:	e1 2c       	mov	r14, r1
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <CDC_Host_ConfigurePipes+0x16e>
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	e8 2e       	mov	r14, r24
    11ac:	8f 2d       	mov	r24, r15
    11ae:	f6 da       	rcall	.-2580   	; 0x79c <Pipe_ConfigurePipe>
    11b0:	88 23       	and	r24, r24
    11b2:	d9 f0       	breq	.+54     	; 0x11ea <CDC_Host_ConfigurePipes+0x1ac>
    11b4:	31 10       	cpse	r3, r1
    11b6:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    11ba:	f3 94       	inc	r15
    11bc:	b7 e0       	ldi	r27, 0x07	; 7
    11be:	fb 12       	cpse	r15, r27
    11c0:	b9 cf       	rjmp	.-142    	; 0x1134 <CDC_Host_ConfigurePipes+0xf6>
    11c2:	f2 01       	movw	r30, r4
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	d6 01       	movw	r26, r12
    11c8:	17 96       	adiw	r26, 0x07	; 7
    11ca:	8c 93       	st	X, r24
    11cc:	17 97       	sbiw	r26, 0x07	; 7
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	1e 96       	adiw	r26, 0x0e	; 14
    11d2:	8c 93       	st	X, r24
    11d4:	1e 97       	sbiw	r26, 0x0e	; 14
    11d6:	1f 96       	adiw	r26, 0x0f	; 15
    11d8:	8c 93       	st	X, r24
    11da:	1f 97       	sbiw	r26, 0x0f	; 15
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	16 96       	adiw	r26, 0x06	; 6
    11e0:	8c 93       	st	X, r24
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <CDC_Host_ConfigurePipes+0x1ae>
    11e6:	11 e0       	ldi	r17, 0x01	; 1
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <CDC_Host_ConfigurePipes+0x1ae>
    11ea:	13 e0       	ldi	r17, 0x03	; 3
    11ec:	81 2f       	mov	r24, r17
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	5f 90       	pop	r5
    1214:	4f 90       	pop	r4
    1216:	3f 90       	pop	r3
    1218:	08 95       	ret

0000121a <CDC_Host_BytesReceived>:
    121a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_HostState>
    121e:	2b 30       	cpi	r18, 0x0B	; 11
    1220:	81 f5       	brne	.+96     	; 0x1282 <CDC_Host_BytesReceived+0x68>
    1222:	fc 01       	movw	r30, r24
    1224:	26 81       	ldd	r18, Z+6	; 0x06
    1226:	22 23       	and	r18, r18
    1228:	61 f1       	breq	.+88     	; 0x1282 <CDC_Host_BytesReceived+0x68>
    122a:	80 81       	ld	r24, Z
    122c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1230:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1234:	8f 7b       	andi	r24, 0xBF	; 191
    1236:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    123a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    123e:	80 ff       	sbrs	r24, 0
    1240:	1b c0       	rjmp	.+54     	; 0x1278 <CDC_Host_BytesReceived+0x5e>
    1242:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1246:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	59 f4       	brne	.+22     	; 0x1264 <CDC_Host_BytesReceived+0x4a>
    124e:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1252:	2e 77       	andi	r18, 0x7E	; 126
    1254:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1258:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    125c:	20 64       	ori	r18, 0x40	; 64
    125e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1262:	08 95       	ret
    1264:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1268:	80 64       	ori	r24, 0x40	; 64
    126a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    126e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1272:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1276:	08 95       	ret
    1278:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    127c:	80 64       	ori	r24, 0x40	; 64
    127e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	08 95       	ret

00001288 <CDC_Host_ReceiveByte>:
    1288:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_HostState>
    128c:	2b 30       	cpi	r18, 0x0B	; 11
    128e:	89 f5       	brne	.+98     	; 0x12f2 <CDC_Host_ReceiveByte+0x6a>
    1290:	fc 01       	movw	r30, r24
    1292:	26 81       	ldd	r18, Z+6	; 0x06
    1294:	22 23       	and	r18, r18
    1296:	69 f1       	breq	.+90     	; 0x12f2 <CDC_Host_ReceiveByte+0x6a>
    1298:	80 81       	ld	r24, Z
    129a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    129e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12a2:	8f 7b       	andi	r24, 0xBF	; 191
    12a4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12a8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12ac:	80 ff       	sbrs	r24, 0
    12ae:	18 c0       	rjmp	.+48     	; 0x12e0 <CDC_Host_ReceiveByte+0x58>
    12b0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    12b4:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    12b8:	89 2b       	or	r24, r25
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <CDC_Host_ReceiveByte+0x3c>
    12bc:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <CDC_Host_ReceiveByte+0x40>
    12c4:	2f ef       	ldi	r18, 0xFF	; 255
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    12cc:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    12d0:	89 2b       	or	r24, r25
    12d2:	41 f4       	brne	.+16     	; 0x12e4 <CDC_Host_ReceiveByte+0x5c>
    12d4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12d8:	8e 77       	andi	r24, 0x7E	; 126
    12da:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <CDC_Host_ReceiveByte+0x5c>
    12e0:	2f ef       	ldi	r18, 0xFF	; 255
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12ee:	c9 01       	movw	r24, r18
    12f0:	08 95       	ret
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    12f6:	08 95       	ret

000012f8 <CDC_Host_Flush>:
    12f8:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_HostState>
    12fc:	2b 30       	cpi	r18, 0x0B	; 11
    12fe:	49 f5       	brne	.+82     	; 0x1352 <CDC_Host_Flush+0x5a>
    1300:	fc 01       	movw	r30, r24
    1302:	26 81       	ldd	r18, Z+6	; 0x06
    1304:	22 23       	and	r18, r18
    1306:	29 f1       	breq	.+74     	; 0x1352 <CDC_Host_Flush+0x5a>
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    130e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1312:	8f 7b       	andi	r24, 0xBF	; 191
    1314:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1318:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    131c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1320:	89 2b       	or	r24, r25
    1322:	c9 f0       	breq	.+50     	; 0x1356 <CDC_Host_Flush+0x5e>
    1324:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1328:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    132c:	8b 77       	andi	r24, 0x7B	; 123
    132e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1332:	95 fd       	sbrc	r25, 5
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <CDC_Host_Flush+0x4e>
    1336:	c4 da       	rcall	.-2680   	; 0x8c0 <Pipe_WaitUntilReady>
    1338:	81 11       	cpse	r24, r1
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <CDC_Host_Flush+0x60>
    133c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1340:	8b 77       	andi	r24, 0x7B	; 123
    1342:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1346:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    134a:	80 64       	ori	r24, 0x40	; 64
    134c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <CDC_Host_Flush+0x5e>
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	08 95       	ret
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	08 95       	ret

0000135a <CDC_Host_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Host_Event_Stub(void)
{
    135a:	08 95       	ret

0000135c <CDC_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void CDC_Host_USBTask(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	28 97       	sbiw	r28, 0x08	; 8
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1374:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_HostState>
    1378:	2b 30       	cpi	r18, 0x0B	; 11
    137a:	c9 f5       	brne	.+114    	; 0x13ee <CDC_Host_USBTask+0x92>
    137c:	fc 01       	movw	r30, r24
    137e:	26 81       	ldd	r18, Z+6	; 0x06
    1380:	22 23       	and	r18, r18
    1382:	a9 f1       	breq	.+106    	; 0x13ee <CDC_Host_USBTask+0x92>
    1384:	8c 01       	movw	r16, r24
	  return;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.NotificationPipeNumber);
    1386:	84 81       	ldd	r24, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1388:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    138c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1390:	8f 7b       	andi	r24, 0xBF	; 191
    1392:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1396:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    139a:	80 ff       	sbrs	r24, 0
    139c:	21 c0       	rjmp	.+66     	; 0x13e0 <CDC_Host_USBTask+0x84>
	{
		USB_Request_Header_t Notification;
		Pipe_Read_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	68 e0       	ldi	r22, 0x08	; 8
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	ce 01       	movw	r24, r28
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	c9 db       	rcall	.-2158   	; 0xb3e <Pipe_Read_Stream_LE>

		if ((Notification.bRequest      == CDC_NOTIF_SerialState) &&
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 32       	cpi	r24, 0x20	; 32
    13b0:	91 f4       	brne	.+36     	; 0x13d6 <CDC_Host_USBTask+0x7a>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 3a       	cpi	r24, 0xA1	; 161
    13b6:	79 f4       	brne	.+30     	; 0x13d6 <CDC_Host_USBTask+0x7a>
		    (Notification.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)))
		{
			Pipe_Read_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	c8 01       	movw	r24, r16
    13c2:	0f 96       	adiw	r24, 0x0f	; 15
    13c4:	bc db       	rcall	.-2184   	; 0xb3e <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13c6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13ca:	8e 77       	andi	r24, 0x7E	; 126
    13cc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			                    sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
			                    NULL);

			Pipe_ClearIN();

			EVENT_CDC_Host_ControLineStateChanged(CDCInterfaceInfo);
    13d0:	c8 01       	movw	r24, r16
    13d2:	c3 df       	rcall	.-122    	; 0x135a <CDC_Host_Event_Stub>
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <CDC_Host_USBTask+0x84>
    13d6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13da:	8e 77       	andi	r24, 0x7E	; 126
    13dc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13e0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

	Pipe_Freeze();

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Host_Flush(CDCInterfaceInfo);
    13ea:	c8 01       	movw	r24, r16
    13ec:	85 df       	rcall	.-246    	; 0x12f8 <CDC_Host_Flush>
	#endif
}
    13ee:	28 96       	adiw	r28, 0x08	; 8
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1404:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1408:	95 ff       	sbrs	r25, 5
    140a:	fc cf       	rjmp	.-8      	; 0x1404 <Serial_putchar>
				UDR1 = DataByte;
    140c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	08 95       	ret

00001416 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1416:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    141a:	87 ff       	sbrs	r24, 7
    141c:	08 c0       	rjmp	.+16     	; 0x142e <Serial_getchar+0x18>
    141e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1422:	87 ff       	sbrs	r24, 7
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1426:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	08 95       	ret
	  return _FDEV_EOF;
    142e:	8e ef       	ldi	r24, 0xFE	; 254
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1438:	08 95       	ret

0000143a <__tablejump2__>:
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	00 24       	eor	r0, r0
    1440:	00 1c       	adc	r0, r0
    1442:	0b be       	out	0x3b, r0	; 59
    1444:	07 90       	elpm	r0, Z+
    1446:	f6 91       	elpm	r31, Z
    1448:	e0 2d       	mov	r30, r0
    144a:	09 94       	ijmp

0000144c <fputc>:
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	fb 01       	movw	r30, r22
    1456:	23 81       	ldd	r18, Z+3	; 0x03
    1458:	21 fd       	sbrc	r18, 1
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <fputc+0x16>
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	2c c0       	rjmp	.+88     	; 0x14ba <fputc+0x6e>
    1462:	22 ff       	sbrs	r18, 2
    1464:	16 c0       	rjmp	.+44     	; 0x1492 <fputc+0x46>
    1466:	46 81       	ldd	r20, Z+6	; 0x06
    1468:	57 81       	ldd	r21, Z+7	; 0x07
    146a:	24 81       	ldd	r18, Z+4	; 0x04
    146c:	35 81       	ldd	r19, Z+5	; 0x05
    146e:	42 17       	cp	r20, r18
    1470:	53 07       	cpc	r21, r19
    1472:	44 f4       	brge	.+16     	; 0x1484 <fputc+0x38>
    1474:	a0 81       	ld	r26, Z
    1476:	b1 81       	ldd	r27, Z+1	; 0x01
    1478:	9d 01       	movw	r18, r26
    147a:	2f 5f       	subi	r18, 0xFF	; 255
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	31 83       	std	Z+1, r19	; 0x01
    1480:	20 83       	st	Z, r18
    1482:	8c 93       	st	X, r24
    1484:	26 81       	ldd	r18, Z+6	; 0x06
    1486:	37 81       	ldd	r19, Z+7	; 0x07
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	37 83       	std	Z+7, r19	; 0x07
    148e:	26 83       	std	Z+6, r18	; 0x06
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <fputc+0x6e>
    1492:	8b 01       	movw	r16, r22
    1494:	ec 01       	movw	r28, r24
    1496:	fb 01       	movw	r30, r22
    1498:	00 84       	ldd	r0, Z+8	; 0x08
    149a:	f1 85       	ldd	r31, Z+9	; 0x09
    149c:	e0 2d       	mov	r30, r0
    149e:	09 95       	icall
    14a0:	89 2b       	or	r24, r25
    14a2:	e1 f6       	brne	.-72     	; 0x145c <fputc+0x10>
    14a4:	d8 01       	movw	r26, r16
    14a6:	16 96       	adiw	r26, 0x06	; 6
    14a8:	8d 91       	ld	r24, X+
    14aa:	9c 91       	ld	r25, X
    14ac:	17 97       	sbiw	r26, 0x07	; 7
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	17 96       	adiw	r26, 0x07	; 7
    14b2:	9c 93       	st	X, r25
    14b4:	8e 93       	st	-X, r24
    14b6:	16 97       	sbiw	r26, 0x06	; 6
    14b8:	ce 01       	movw	r24, r28
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <printf_P>:
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	ae 01       	movw	r20, r28
    14d2:	49 5f       	subi	r20, 0xF9	; 249
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	da 01       	movw	r26, r20
    14d8:	6d 91       	ld	r22, X+
    14da:	7d 91       	ld	r23, X+
    14dc:	ad 01       	movw	r20, r26
    14de:	04 e4       	ldi	r16, 0x44	; 68
    14e0:	11 e0       	ldi	r17, 0x01	; 1
    14e2:	f8 01       	movw	r30, r16
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	dc 01       	movw	r26, r24
    14ea:	13 96       	adiw	r26, 0x03	; 3
    14ec:	2c 91       	ld	r18, X
    14ee:	13 97       	sbiw	r26, 0x03	; 3
    14f0:	28 60       	ori	r18, 0x08	; 8
    14f2:	13 96       	adiw	r26, 0x03	; 3
    14f4:	2c 93       	st	X, r18
    14f6:	3e d0       	rcall	.+124    	; 0x1574 <vfprintf>
    14f8:	d8 01       	movw	r26, r16
    14fa:	12 96       	adiw	r26, 0x02	; 2
    14fc:	ed 91       	ld	r30, X+
    14fe:	fc 91       	ld	r31, X
    1500:	13 97       	sbiw	r26, 0x03	; 3
    1502:	23 81       	ldd	r18, Z+3	; 0x03
    1504:	27 7f       	andi	r18, 0xF7	; 247
    1506:	23 83       	std	Z+3, r18	; 0x03
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <puts_P>:
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	8c 01       	movw	r16, r24
    151c:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__iob+0x2>
    1520:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <__iob+0x3>
    1524:	83 81       	ldd	r24, Z+3	; 0x03
    1526:	81 ff       	sbrs	r24, 1
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <puts_P+0x4e>
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	c0 e0       	ldi	r28, 0x00	; 0
    152e:	f8 01       	movw	r30, r16
    1530:	84 91       	lpm	r24, Z
    1532:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__iob+0x2>
    1536:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <__iob+0x3>
    153a:	db 01       	movw	r26, r22
    153c:	18 96       	adiw	r26, 0x08	; 8
    153e:	ed 91       	ld	r30, X+
    1540:	fc 91       	ld	r31, X
    1542:	19 97       	sbiw	r26, 0x09	; 9
    1544:	88 23       	and	r24, r24
    1546:	41 f0       	breq	.+16     	; 0x1558 <puts_P+0x46>
    1548:	09 95       	icall
    154a:	89 2b       	or	r24, r25
    154c:	11 f0       	breq	.+4      	; 0x1552 <puts_P+0x40>
    154e:	df ef       	ldi	r29, 0xFF	; 255
    1550:	cf ef       	ldi	r28, 0xFF	; 255
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	eb cf       	rjmp	.-42     	; 0x152e <puts_P+0x1c>
    1558:	8a e0       	ldi	r24, 0x0A	; 10
    155a:	09 95       	icall
    155c:	89 2b       	or	r24, r25
    155e:	19 f0       	breq	.+6      	; 0x1566 <puts_P+0x54>
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	02 c0       	rjmp	.+4      	; 0x156a <puts_P+0x58>
    1566:	8d 2f       	mov	r24, r29
    1568:	9c 2f       	mov	r25, r28
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <vfprintf>:
    1574:	2f 92       	push	r2
    1576:	3f 92       	push	r3
    1578:	4f 92       	push	r4
    157a:	5f 92       	push	r5
    157c:	6f 92       	push	r6
    157e:	7f 92       	push	r7
    1580:	8f 92       	push	r8
    1582:	9f 92       	push	r9
    1584:	af 92       	push	r10
    1586:	bf 92       	push	r11
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	2b 97       	sbiw	r28, 0x0b	; 11
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	6c 01       	movw	r12, r24
    15aa:	7b 01       	movw	r14, r22
    15ac:	8a 01       	movw	r16, r20
    15ae:	fc 01       	movw	r30, r24
    15b0:	17 82       	std	Z+7, r1	; 0x07
    15b2:	16 82       	std	Z+6, r1	; 0x06
    15b4:	83 81       	ldd	r24, Z+3	; 0x03
    15b6:	81 ff       	sbrs	r24, 1
    15b8:	bf c1       	rjmp	.+894    	; 0x1938 <vfprintf+0x3c4>
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	3c 01       	movw	r6, r24
    15c0:	f6 01       	movw	r30, r12
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	f7 01       	movw	r30, r14
    15c6:	93 fd       	sbrc	r25, 3
    15c8:	85 91       	lpm	r24, Z+
    15ca:	93 ff       	sbrs	r25, 3
    15cc:	81 91       	ld	r24, Z+
    15ce:	7f 01       	movw	r14, r30
    15d0:	88 23       	and	r24, r24
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <vfprintf+0x62>
    15d4:	ad c1       	rjmp	.+858    	; 0x1930 <vfprintf+0x3bc>
    15d6:	85 32       	cpi	r24, 0x25	; 37
    15d8:	39 f4       	brne	.+14     	; 0x15e8 <vfprintf+0x74>
    15da:	93 fd       	sbrc	r25, 3
    15dc:	85 91       	lpm	r24, Z+
    15de:	93 ff       	sbrs	r25, 3
    15e0:	81 91       	ld	r24, Z+
    15e2:	7f 01       	movw	r14, r30
    15e4:	85 32       	cpi	r24, 0x25	; 37
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <vfprintf+0x7c>
    15e8:	b6 01       	movw	r22, r12
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	2f df       	rcall	.-418    	; 0x144c <fputc>
    15ee:	e8 cf       	rjmp	.-48     	; 0x15c0 <vfprintf+0x4c>
    15f0:	91 2c       	mov	r9, r1
    15f2:	21 2c       	mov	r2, r1
    15f4:	31 2c       	mov	r3, r1
    15f6:	ff e1       	ldi	r31, 0x1F	; 31
    15f8:	f3 15       	cp	r31, r3
    15fa:	d8 f0       	brcs	.+54     	; 0x1632 <vfprintf+0xbe>
    15fc:	8b 32       	cpi	r24, 0x2B	; 43
    15fe:	79 f0       	breq	.+30     	; 0x161e <vfprintf+0xaa>
    1600:	38 f4       	brcc	.+14     	; 0x1610 <vfprintf+0x9c>
    1602:	80 32       	cpi	r24, 0x20	; 32
    1604:	79 f0       	breq	.+30     	; 0x1624 <vfprintf+0xb0>
    1606:	83 32       	cpi	r24, 0x23	; 35
    1608:	a1 f4       	brne	.+40     	; 0x1632 <vfprintf+0xbe>
    160a:	23 2d       	mov	r18, r3
    160c:	20 61       	ori	r18, 0x10	; 16
    160e:	1d c0       	rjmp	.+58     	; 0x164a <vfprintf+0xd6>
    1610:	8d 32       	cpi	r24, 0x2D	; 45
    1612:	61 f0       	breq	.+24     	; 0x162c <vfprintf+0xb8>
    1614:	80 33       	cpi	r24, 0x30	; 48
    1616:	69 f4       	brne	.+26     	; 0x1632 <vfprintf+0xbe>
    1618:	23 2d       	mov	r18, r3
    161a:	21 60       	ori	r18, 0x01	; 1
    161c:	16 c0       	rjmp	.+44     	; 0x164a <vfprintf+0xd6>
    161e:	83 2d       	mov	r24, r3
    1620:	82 60       	ori	r24, 0x02	; 2
    1622:	38 2e       	mov	r3, r24
    1624:	e3 2d       	mov	r30, r3
    1626:	e4 60       	ori	r30, 0x04	; 4
    1628:	3e 2e       	mov	r3, r30
    162a:	2a c0       	rjmp	.+84     	; 0x1680 <vfprintf+0x10c>
    162c:	f3 2d       	mov	r31, r3
    162e:	f8 60       	ori	r31, 0x08	; 8
    1630:	1d c0       	rjmp	.+58     	; 0x166c <vfprintf+0xf8>
    1632:	37 fc       	sbrc	r3, 7
    1634:	2d c0       	rjmp	.+90     	; 0x1690 <vfprintf+0x11c>
    1636:	20 ed       	ldi	r18, 0xD0	; 208
    1638:	28 0f       	add	r18, r24
    163a:	2a 30       	cpi	r18, 0x0A	; 10
    163c:	40 f0       	brcs	.+16     	; 0x164e <vfprintf+0xda>
    163e:	8e 32       	cpi	r24, 0x2E	; 46
    1640:	b9 f4       	brne	.+46     	; 0x1670 <vfprintf+0xfc>
    1642:	36 fc       	sbrc	r3, 6
    1644:	75 c1       	rjmp	.+746    	; 0x1930 <vfprintf+0x3bc>
    1646:	23 2d       	mov	r18, r3
    1648:	20 64       	ori	r18, 0x40	; 64
    164a:	32 2e       	mov	r3, r18
    164c:	19 c0       	rjmp	.+50     	; 0x1680 <vfprintf+0x10c>
    164e:	36 fe       	sbrs	r3, 6
    1650:	06 c0       	rjmp	.+12     	; 0x165e <vfprintf+0xea>
    1652:	8a e0       	ldi	r24, 0x0A	; 10
    1654:	98 9e       	mul	r9, r24
    1656:	20 0d       	add	r18, r0
    1658:	11 24       	eor	r1, r1
    165a:	92 2e       	mov	r9, r18
    165c:	11 c0       	rjmp	.+34     	; 0x1680 <vfprintf+0x10c>
    165e:	ea e0       	ldi	r30, 0x0A	; 10
    1660:	2e 9e       	mul	r2, r30
    1662:	20 0d       	add	r18, r0
    1664:	11 24       	eor	r1, r1
    1666:	22 2e       	mov	r2, r18
    1668:	f3 2d       	mov	r31, r3
    166a:	f0 62       	ori	r31, 0x20	; 32
    166c:	3f 2e       	mov	r3, r31
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <vfprintf+0x10c>
    1670:	8c 36       	cpi	r24, 0x6C	; 108
    1672:	21 f4       	brne	.+8      	; 0x167c <vfprintf+0x108>
    1674:	83 2d       	mov	r24, r3
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	38 2e       	mov	r3, r24
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <vfprintf+0x10c>
    167c:	88 36       	cpi	r24, 0x68	; 104
    167e:	41 f4       	brne	.+16     	; 0x1690 <vfprintf+0x11c>
    1680:	f7 01       	movw	r30, r14
    1682:	93 fd       	sbrc	r25, 3
    1684:	85 91       	lpm	r24, Z+
    1686:	93 ff       	sbrs	r25, 3
    1688:	81 91       	ld	r24, Z+
    168a:	7f 01       	movw	r14, r30
    168c:	81 11       	cpse	r24, r1
    168e:	b3 cf       	rjmp	.-154    	; 0x15f6 <vfprintf+0x82>
    1690:	98 2f       	mov	r25, r24
    1692:	9f 7d       	andi	r25, 0xDF	; 223
    1694:	95 54       	subi	r25, 0x45	; 69
    1696:	93 30       	cpi	r25, 0x03	; 3
    1698:	28 f4       	brcc	.+10     	; 0x16a4 <vfprintf+0x130>
    169a:	0c 5f       	subi	r16, 0xFC	; 252
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	9f e3       	ldi	r25, 0x3F	; 63
    16a0:	99 83       	std	Y+1, r25	; 0x01
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <vfprintf+0x14a>
    16a4:	83 36       	cpi	r24, 0x63	; 99
    16a6:	31 f0       	breq	.+12     	; 0x16b4 <vfprintf+0x140>
    16a8:	83 37       	cpi	r24, 0x73	; 115
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <vfprintf+0x154>
    16ac:	83 35       	cpi	r24, 0x53	; 83
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <vfprintf+0x13e>
    16b0:	55 c0       	rjmp	.+170    	; 0x175c <vfprintf+0x1e8>
    16b2:	20 c0       	rjmp	.+64     	; 0x16f4 <vfprintf+0x180>
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 81       	ld	r24, Z
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	0e 5f       	subi	r16, 0xFE	; 254
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	88 24       	eor	r8, r8
    16c0:	83 94       	inc	r8
    16c2:	91 2c       	mov	r9, r1
    16c4:	53 01       	movw	r10, r6
    16c6:	12 c0       	rjmp	.+36     	; 0x16ec <vfprintf+0x178>
    16c8:	28 01       	movw	r4, r16
    16ca:	f2 e0       	ldi	r31, 0x02	; 2
    16cc:	4f 0e       	add	r4, r31
    16ce:	51 1c       	adc	r5, r1
    16d0:	f8 01       	movw	r30, r16
    16d2:	a0 80       	ld	r10, Z
    16d4:	b1 80       	ldd	r11, Z+1	; 0x01
    16d6:	36 fe       	sbrs	r3, 6
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <vfprintf+0x16c>
    16da:	69 2d       	mov	r22, r9
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <vfprintf+0x170>
    16e0:	6f ef       	ldi	r22, 0xFF	; 255
    16e2:	7f ef       	ldi	r23, 0xFF	; 255
    16e4:	c5 01       	movw	r24, r10
    16e6:	4e d1       	rcall	.+668    	; 0x1984 <strnlen>
    16e8:	4c 01       	movw	r8, r24
    16ea:	82 01       	movw	r16, r4
    16ec:	f3 2d       	mov	r31, r3
    16ee:	ff 77       	andi	r31, 0x7F	; 127
    16f0:	3f 2e       	mov	r3, r31
    16f2:	15 c0       	rjmp	.+42     	; 0x171e <vfprintf+0x1aa>
    16f4:	28 01       	movw	r4, r16
    16f6:	22 e0       	ldi	r18, 0x02	; 2
    16f8:	42 0e       	add	r4, r18
    16fa:	51 1c       	adc	r5, r1
    16fc:	f8 01       	movw	r30, r16
    16fe:	a0 80       	ld	r10, Z
    1700:	b1 80       	ldd	r11, Z+1	; 0x01
    1702:	36 fe       	sbrs	r3, 6
    1704:	03 c0       	rjmp	.+6      	; 0x170c <vfprintf+0x198>
    1706:	69 2d       	mov	r22, r9
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x19c>
    170c:	6f ef       	ldi	r22, 0xFF	; 255
    170e:	7f ef       	ldi	r23, 0xFF	; 255
    1710:	c5 01       	movw	r24, r10
    1712:	2d d1       	rcall	.+602    	; 0x196e <strnlen_P>
    1714:	4c 01       	movw	r8, r24
    1716:	f3 2d       	mov	r31, r3
    1718:	f0 68       	ori	r31, 0x80	; 128
    171a:	3f 2e       	mov	r3, r31
    171c:	82 01       	movw	r16, r4
    171e:	33 fc       	sbrc	r3, 3
    1720:	19 c0       	rjmp	.+50     	; 0x1754 <vfprintf+0x1e0>
    1722:	82 2d       	mov	r24, r2
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	88 16       	cp	r8, r24
    1728:	99 06       	cpc	r9, r25
    172a:	a0 f4       	brcc	.+40     	; 0x1754 <vfprintf+0x1e0>
    172c:	b6 01       	movw	r22, r12
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	8c de       	rcall	.-744    	; 0x144c <fputc>
    1734:	2a 94       	dec	r2
    1736:	f5 cf       	rjmp	.-22     	; 0x1722 <vfprintf+0x1ae>
    1738:	f5 01       	movw	r30, r10
    173a:	37 fc       	sbrc	r3, 7
    173c:	85 91       	lpm	r24, Z+
    173e:	37 fe       	sbrs	r3, 7
    1740:	81 91       	ld	r24, Z+
    1742:	5f 01       	movw	r10, r30
    1744:	b6 01       	movw	r22, r12
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	81 de       	rcall	.-766    	; 0x144c <fputc>
    174a:	21 10       	cpse	r2, r1
    174c:	2a 94       	dec	r2
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	82 1a       	sub	r8, r18
    1752:	91 08       	sbc	r9, r1
    1754:	81 14       	cp	r8, r1
    1756:	91 04       	cpc	r9, r1
    1758:	79 f7       	brne	.-34     	; 0x1738 <vfprintf+0x1c4>
    175a:	e1 c0       	rjmp	.+450    	; 0x191e <vfprintf+0x3aa>
    175c:	84 36       	cpi	r24, 0x64	; 100
    175e:	11 f0       	breq	.+4      	; 0x1764 <vfprintf+0x1f0>
    1760:	89 36       	cpi	r24, 0x69	; 105
    1762:	39 f5       	brne	.+78     	; 0x17b2 <vfprintf+0x23e>
    1764:	f8 01       	movw	r30, r16
    1766:	37 fe       	sbrs	r3, 7
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <vfprintf+0x204>
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	0c 5f       	subi	r16, 0xFC	; 252
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	08 c0       	rjmp	.+16     	; 0x1788 <vfprintf+0x214>
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	07 2e       	mov	r0, r23
    177e:	00 0c       	add	r0, r0
    1780:	88 0b       	sbc	r24, r24
    1782:	99 0b       	sbc	r25, r25
    1784:	0e 5f       	subi	r16, 0xFE	; 254
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	f3 2d       	mov	r31, r3
    178a:	ff 76       	andi	r31, 0x6F	; 111
    178c:	3f 2e       	mov	r3, r31
    178e:	97 ff       	sbrs	r25, 7
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <vfprintf+0x230>
    1792:	90 95       	com	r25
    1794:	80 95       	com	r24
    1796:	70 95       	com	r23
    1798:	61 95       	neg	r22
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	f0 68       	ori	r31, 0x80	; 128
    17a2:	3f 2e       	mov	r3, r31
    17a4:	2a e0       	ldi	r18, 0x0A	; 10
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	a3 01       	movw	r20, r6
    17aa:	f7 d0       	rcall	.+494    	; 0x199a <__ultoa_invert>
    17ac:	88 2e       	mov	r8, r24
    17ae:	86 18       	sub	r8, r6
    17b0:	44 c0       	rjmp	.+136    	; 0x183a <vfprintf+0x2c6>
    17b2:	85 37       	cpi	r24, 0x75	; 117
    17b4:	31 f4       	brne	.+12     	; 0x17c2 <vfprintf+0x24e>
    17b6:	23 2d       	mov	r18, r3
    17b8:	2f 7e       	andi	r18, 0xEF	; 239
    17ba:	b2 2e       	mov	r11, r18
    17bc:	2a e0       	ldi	r18, 0x0A	; 10
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	25 c0       	rjmp	.+74     	; 0x180c <vfprintf+0x298>
    17c2:	93 2d       	mov	r25, r3
    17c4:	99 7f       	andi	r25, 0xF9	; 249
    17c6:	b9 2e       	mov	r11, r25
    17c8:	8f 36       	cpi	r24, 0x6F	; 111
    17ca:	c1 f0       	breq	.+48     	; 0x17fc <vfprintf+0x288>
    17cc:	18 f4       	brcc	.+6      	; 0x17d4 <vfprintf+0x260>
    17ce:	88 35       	cpi	r24, 0x58	; 88
    17d0:	79 f0       	breq	.+30     	; 0x17f0 <vfprintf+0x27c>
    17d2:	ae c0       	rjmp	.+348    	; 0x1930 <vfprintf+0x3bc>
    17d4:	80 37       	cpi	r24, 0x70	; 112
    17d6:	19 f0       	breq	.+6      	; 0x17de <vfprintf+0x26a>
    17d8:	88 37       	cpi	r24, 0x78	; 120
    17da:	21 f0       	breq	.+8      	; 0x17e4 <vfprintf+0x270>
    17dc:	a9 c0       	rjmp	.+338    	; 0x1930 <vfprintf+0x3bc>
    17de:	e9 2f       	mov	r30, r25
    17e0:	e0 61       	ori	r30, 0x10	; 16
    17e2:	be 2e       	mov	r11, r30
    17e4:	b4 fe       	sbrs	r11, 4
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <vfprintf+0x28e>
    17e8:	fb 2d       	mov	r31, r11
    17ea:	f4 60       	ori	r31, 0x04	; 4
    17ec:	bf 2e       	mov	r11, r31
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <vfprintf+0x28e>
    17f0:	34 fe       	sbrs	r3, 4
    17f2:	0a c0       	rjmp	.+20     	; 0x1808 <vfprintf+0x294>
    17f4:	29 2f       	mov	r18, r25
    17f6:	26 60       	ori	r18, 0x06	; 6
    17f8:	b2 2e       	mov	r11, r18
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <vfprintf+0x294>
    17fc:	28 e0       	ldi	r18, 0x08	; 8
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	05 c0       	rjmp	.+10     	; 0x180c <vfprintf+0x298>
    1802:	20 e1       	ldi	r18, 0x10	; 16
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0x298>
    1808:	20 e1       	ldi	r18, 0x10	; 16
    180a:	32 e0       	ldi	r19, 0x02	; 2
    180c:	f8 01       	movw	r30, r16
    180e:	b7 fe       	sbrs	r11, 7
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <vfprintf+0x2ac>
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	0c 5f       	subi	r16, 0xFC	; 252
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	06 c0       	rjmp	.+12     	; 0x182c <vfprintf+0x2b8>
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 5f       	subi	r16, 0xFE	; 254
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	a3 01       	movw	r20, r6
    182e:	b5 d0       	rcall	.+362    	; 0x199a <__ultoa_invert>
    1830:	88 2e       	mov	r8, r24
    1832:	86 18       	sub	r8, r6
    1834:	fb 2d       	mov	r31, r11
    1836:	ff 77       	andi	r31, 0x7F	; 127
    1838:	3f 2e       	mov	r3, r31
    183a:	36 fe       	sbrs	r3, 6
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <vfprintf+0x2e4>
    183e:	23 2d       	mov	r18, r3
    1840:	2e 7f       	andi	r18, 0xFE	; 254
    1842:	a2 2e       	mov	r10, r18
    1844:	89 14       	cp	r8, r9
    1846:	58 f4       	brcc	.+22     	; 0x185e <vfprintf+0x2ea>
    1848:	34 fe       	sbrs	r3, 4
    184a:	0b c0       	rjmp	.+22     	; 0x1862 <vfprintf+0x2ee>
    184c:	32 fc       	sbrc	r3, 2
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <vfprintf+0x2ee>
    1850:	83 2d       	mov	r24, r3
    1852:	8e 7e       	andi	r24, 0xEE	; 238
    1854:	a8 2e       	mov	r10, r24
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <vfprintf+0x2ee>
    1858:	b8 2c       	mov	r11, r8
    185a:	a3 2c       	mov	r10, r3
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <vfprintf+0x2f0>
    185e:	b8 2c       	mov	r11, r8
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <vfprintf+0x2f0>
    1862:	b9 2c       	mov	r11, r9
    1864:	a4 fe       	sbrs	r10, 4
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <vfprintf+0x312>
    1868:	fe 01       	movw	r30, r28
    186a:	e8 0d       	add	r30, r8
    186c:	f1 1d       	adc	r31, r1
    186e:	80 81       	ld	r24, Z
    1870:	80 33       	cpi	r24, 0x30	; 48
    1872:	21 f4       	brne	.+8      	; 0x187c <vfprintf+0x308>
    1874:	9a 2d       	mov	r25, r10
    1876:	99 7e       	andi	r25, 0xE9	; 233
    1878:	a9 2e       	mov	r10, r25
    187a:	09 c0       	rjmp	.+18     	; 0x188e <vfprintf+0x31a>
    187c:	a2 fe       	sbrs	r10, 2
    187e:	06 c0       	rjmp	.+12     	; 0x188c <vfprintf+0x318>
    1880:	b3 94       	inc	r11
    1882:	b3 94       	inc	r11
    1884:	04 c0       	rjmp	.+8      	; 0x188e <vfprintf+0x31a>
    1886:	8a 2d       	mov	r24, r10
    1888:	86 78       	andi	r24, 0x86	; 134
    188a:	09 f0       	breq	.+2      	; 0x188e <vfprintf+0x31a>
    188c:	b3 94       	inc	r11
    188e:	a3 fc       	sbrc	r10, 3
    1890:	10 c0       	rjmp	.+32     	; 0x18b2 <vfprintf+0x33e>
    1892:	a0 fe       	sbrs	r10, 0
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <vfprintf+0x32e>
    1896:	b2 14       	cp	r11, r2
    1898:	80 f4       	brcc	.+32     	; 0x18ba <vfprintf+0x346>
    189a:	28 0c       	add	r2, r8
    189c:	92 2c       	mov	r9, r2
    189e:	9b 18       	sub	r9, r11
    18a0:	0d c0       	rjmp	.+26     	; 0x18bc <vfprintf+0x348>
    18a2:	b2 14       	cp	r11, r2
    18a4:	58 f4       	brcc	.+22     	; 0x18bc <vfprintf+0x348>
    18a6:	b6 01       	movw	r22, r12
    18a8:	80 e2       	ldi	r24, 0x20	; 32
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	cf dd       	rcall	.-1122   	; 0x144c <fputc>
    18ae:	b3 94       	inc	r11
    18b0:	f8 cf       	rjmp	.-16     	; 0x18a2 <vfprintf+0x32e>
    18b2:	b2 14       	cp	r11, r2
    18b4:	18 f4       	brcc	.+6      	; 0x18bc <vfprintf+0x348>
    18b6:	2b 18       	sub	r2, r11
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <vfprintf+0x34a>
    18ba:	98 2c       	mov	r9, r8
    18bc:	21 2c       	mov	r2, r1
    18be:	a4 fe       	sbrs	r10, 4
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <vfprintf+0x36c>
    18c2:	b6 01       	movw	r22, r12
    18c4:	80 e3       	ldi	r24, 0x30	; 48
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	c1 dd       	rcall	.-1150   	; 0x144c <fputc>
    18ca:	a2 fe       	sbrs	r10, 2
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <vfprintf+0x386>
    18ce:	a1 fc       	sbrc	r10, 1
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <vfprintf+0x364>
    18d2:	88 e7       	ldi	r24, 0x78	; 120
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x368>
    18d8:	88 e5       	ldi	r24, 0x58	; 88
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	b6 01       	movw	r22, r12
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <vfprintf+0x384>
    18e0:	8a 2d       	mov	r24, r10
    18e2:	86 78       	andi	r24, 0x86	; 134
    18e4:	51 f0       	breq	.+20     	; 0x18fa <vfprintf+0x386>
    18e6:	a1 fe       	sbrs	r10, 1
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <vfprintf+0x37a>
    18ea:	8b e2       	ldi	r24, 0x2B	; 43
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <vfprintf+0x37c>
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	a7 fc       	sbrc	r10, 7
    18f2:	8d e2       	ldi	r24, 0x2D	; 45
    18f4:	b6 01       	movw	r22, r12
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a9 dd       	rcall	.-1198   	; 0x144c <fputc>
    18fa:	89 14       	cp	r8, r9
    18fc:	30 f4       	brcc	.+12     	; 0x190a <vfprintf+0x396>
    18fe:	b6 01       	movw	r22, r12
    1900:	80 e3       	ldi	r24, 0x30	; 48
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a3 dd       	rcall	.-1210   	; 0x144c <fputc>
    1906:	9a 94       	dec	r9
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <vfprintf+0x386>
    190a:	8a 94       	dec	r8
    190c:	f3 01       	movw	r30, r6
    190e:	e8 0d       	add	r30, r8
    1910:	f1 1d       	adc	r31, r1
    1912:	80 81       	ld	r24, Z
    1914:	b6 01       	movw	r22, r12
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	99 dd       	rcall	.-1230   	; 0x144c <fputc>
    191a:	81 10       	cpse	r8, r1
    191c:	f6 cf       	rjmp	.-20     	; 0x190a <vfprintf+0x396>
    191e:	22 20       	and	r2, r2
    1920:	09 f4       	brne	.+2      	; 0x1924 <vfprintf+0x3b0>
    1922:	4e ce       	rjmp	.-868    	; 0x15c0 <vfprintf+0x4c>
    1924:	b6 01       	movw	r22, r12
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	90 dd       	rcall	.-1248   	; 0x144c <fputc>
    192c:	2a 94       	dec	r2
    192e:	f7 cf       	rjmp	.-18     	; 0x191e <vfprintf+0x3aa>
    1930:	f6 01       	movw	r30, r12
    1932:	86 81       	ldd	r24, Z+6	; 0x06
    1934:	97 81       	ldd	r25, Z+7	; 0x07
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x3c8>
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	9f ef       	ldi	r25, 0xFF	; 255
    193c:	2b 96       	adiw	r28, 0x0b	; 11
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	8f 90       	pop	r8
    1960:	7f 90       	pop	r7
    1962:	6f 90       	pop	r6
    1964:	5f 90       	pop	r5
    1966:	4f 90       	pop	r4
    1968:	3f 90       	pop	r3
    196a:	2f 90       	pop	r2
    196c:	08 95       	ret

0000196e <strnlen_P>:
    196e:	fc 01       	movw	r30, r24
    1970:	05 90       	lpm	r0, Z+
    1972:	61 50       	subi	r22, 0x01	; 1
    1974:	70 40       	sbci	r23, 0x00	; 0
    1976:	01 10       	cpse	r0, r1
    1978:	d8 f7       	brcc	.-10     	; 0x1970 <strnlen_P+0x2>
    197a:	80 95       	com	r24
    197c:	90 95       	com	r25
    197e:	8e 0f       	add	r24, r30
    1980:	9f 1f       	adc	r25, r31
    1982:	08 95       	ret

00001984 <strnlen>:
    1984:	fc 01       	movw	r30, r24
    1986:	61 50       	subi	r22, 0x01	; 1
    1988:	70 40       	sbci	r23, 0x00	; 0
    198a:	01 90       	ld	r0, Z+
    198c:	01 10       	cpse	r0, r1
    198e:	d8 f7       	brcc	.-10     	; 0x1986 <strnlen+0x2>
    1990:	80 95       	com	r24
    1992:	90 95       	com	r25
    1994:	8e 0f       	add	r24, r30
    1996:	9f 1f       	adc	r25, r31
    1998:	08 95       	ret

0000199a <__ultoa_invert>:
    199a:	fa 01       	movw	r30, r20
    199c:	aa 27       	eor	r26, r26
    199e:	28 30       	cpi	r18, 0x08	; 8
    19a0:	51 f1       	breq	.+84     	; 0x19f6 <__ultoa_invert+0x5c>
    19a2:	20 31       	cpi	r18, 0x10	; 16
    19a4:	81 f1       	breq	.+96     	; 0x1a06 <__ultoa_invert+0x6c>
    19a6:	e8 94       	clt
    19a8:	6f 93       	push	r22
    19aa:	6e 7f       	andi	r22, 0xFE	; 254
    19ac:	6e 5f       	subi	r22, 0xFE	; 254
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	af 4f       	sbci	r26, 0xFF	; 255
    19b6:	b1 e0       	ldi	r27, 0x01	; 1
    19b8:	3e d0       	rcall	.+124    	; 0x1a36 <__ultoa_invert+0x9c>
    19ba:	b4 e0       	ldi	r27, 0x04	; 4
    19bc:	3c d0       	rcall	.+120    	; 0x1a36 <__ultoa_invert+0x9c>
    19be:	67 0f       	add	r22, r23
    19c0:	78 1f       	adc	r23, r24
    19c2:	89 1f       	adc	r24, r25
    19c4:	9a 1f       	adc	r25, r26
    19c6:	a1 1d       	adc	r26, r1
    19c8:	68 0f       	add	r22, r24
    19ca:	79 1f       	adc	r23, r25
    19cc:	8a 1f       	adc	r24, r26
    19ce:	91 1d       	adc	r25, r1
    19d0:	a1 1d       	adc	r26, r1
    19d2:	6a 0f       	add	r22, r26
    19d4:	71 1d       	adc	r23, r1
    19d6:	81 1d       	adc	r24, r1
    19d8:	91 1d       	adc	r25, r1
    19da:	a1 1d       	adc	r26, r1
    19dc:	20 d0       	rcall	.+64     	; 0x1a1e <__ultoa_invert+0x84>
    19de:	09 f4       	brne	.+2      	; 0x19e2 <__ultoa_invert+0x48>
    19e0:	68 94       	set
    19e2:	3f 91       	pop	r19
    19e4:	2a e0       	ldi	r18, 0x0A	; 10
    19e6:	26 9f       	mul	r18, r22
    19e8:	11 24       	eor	r1, r1
    19ea:	30 19       	sub	r19, r0
    19ec:	30 5d       	subi	r19, 0xD0	; 208
    19ee:	31 93       	st	Z+, r19
    19f0:	de f6       	brtc	.-74     	; 0x19a8 <__ultoa_invert+0xe>
    19f2:	cf 01       	movw	r24, r30
    19f4:	08 95       	ret
    19f6:	46 2f       	mov	r20, r22
    19f8:	47 70       	andi	r20, 0x07	; 7
    19fa:	40 5d       	subi	r20, 0xD0	; 208
    19fc:	41 93       	st	Z+, r20
    19fe:	b3 e0       	ldi	r27, 0x03	; 3
    1a00:	0f d0       	rcall	.+30     	; 0x1a20 <__ultoa_invert+0x86>
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <__ultoa_invert+0x5c>
    1a04:	f6 cf       	rjmp	.-20     	; 0x19f2 <__ultoa_invert+0x58>
    1a06:	46 2f       	mov	r20, r22
    1a08:	4f 70       	andi	r20, 0x0F	; 15
    1a0a:	40 5d       	subi	r20, 0xD0	; 208
    1a0c:	4a 33       	cpi	r20, 0x3A	; 58
    1a0e:	18 f0       	brcs	.+6      	; 0x1a16 <__ultoa_invert+0x7c>
    1a10:	49 5d       	subi	r20, 0xD9	; 217
    1a12:	31 fd       	sbrc	r19, 1
    1a14:	40 52       	subi	r20, 0x20	; 32
    1a16:	41 93       	st	Z+, r20
    1a18:	02 d0       	rcall	.+4      	; 0x1a1e <__ultoa_invert+0x84>
    1a1a:	a9 f7       	brne	.-22     	; 0x1a06 <__ultoa_invert+0x6c>
    1a1c:	ea cf       	rjmp	.-44     	; 0x19f2 <__ultoa_invert+0x58>
    1a1e:	b4 e0       	ldi	r27, 0x04	; 4
    1a20:	a6 95       	lsr	r26
    1a22:	97 95       	ror	r25
    1a24:	87 95       	ror	r24
    1a26:	77 95       	ror	r23
    1a28:	67 95       	ror	r22
    1a2a:	ba 95       	dec	r27
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__ultoa_invert+0x86>
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	61 05       	cpc	r22, r1
    1a32:	71 05       	cpc	r23, r1
    1a34:	08 95       	ret
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	0a 2e       	mov	r0, r26
    1a3c:	06 94       	lsr	r0
    1a3e:	57 95       	ror	r21
    1a40:	47 95       	ror	r20
    1a42:	37 95       	ror	r19
    1a44:	27 95       	ror	r18
    1a46:	ba 95       	dec	r27
    1a48:	c9 f7       	brne	.-14     	; 0x1a3c <__ultoa_invert+0xa2>
    1a4a:	62 0f       	add	r22, r18
    1a4c:	73 1f       	adc	r23, r19
    1a4e:	84 1f       	adc	r24, r20
    1a50:	95 1f       	adc	r25, r21
    1a52:	a0 1d       	adc	r26, r0
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
