   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  12               	.global	CALLBACK_USB_GetDescriptor
  14               	CALLBACK_USB_GetDescriptor:
  15               	.LFB97:
  16               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = 0x03EB,
  57:Descriptors.c **** 	.ProductID              = 0x204C,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_VendorSpecificProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_Header,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(01.10),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_ACM,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x00,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_Union,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = 0,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = 1,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = 1,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.RNDIS_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_RX_EPNUM),
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.RNDIS_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_TX_EPNUM),
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 182:Descriptors.c **** {
 183:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 184:Descriptors.c **** 
 185:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 189:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 190:Descriptors.c ****  *  Descriptor.
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 195:Descriptors.c **** 
 196:Descriptors.c **** 	.UnicodeString          = L"Dean Camera"
 197:Descriptors.c **** };
 198:Descriptors.c **** 
 199:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 200:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 201:Descriptors.c ****  *  Descriptor.
 202:Descriptors.c ****  */
 203:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 204:Descriptors.c **** {
 205:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(19), .Type = DTYPE_String},
 206:Descriptors.c **** 
 207:Descriptors.c **** 	.UnicodeString          = L"LUFA RNDIS CDC Demo"
 208:Descriptors.c **** };
 209:Descriptors.c **** 
 210:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 211:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 212:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 213:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 214:Descriptors.c ****  *  USB host.
 215:Descriptors.c ****  */
 216:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 217:Descriptors.c ****                                     const uint8_t wIndex,
 218:Descriptors.c ****                                     const void** const DescriptorAddress)
 219:Descriptors.c **** {
  17               		.loc 1 219 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 220:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 221:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 222:Descriptors.c **** 
 223:Descriptors.c **** 	const void* Address = NULL;
 224:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 225:Descriptors.c **** 
 226:Descriptors.c **** 	switch (DescriptorType)
  24               		.loc 1 226 0
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L12
 227:Descriptors.c **** 	{
 228:Descriptors.c **** 		case DTYPE_Device:
 229:Descriptors.c **** 			Address = &DeviceDescriptor;
 230:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 230 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 229:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  40               		.loc 1 229 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L2
  44               	.LVL2:
  45               	.L3:
 231:Descriptors.c **** 			break;
 232:Descriptors.c **** 		case DTYPE_Configuration:
 233:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 234:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 234 0
  47 0020 8EE3      		ldi r24,lo8(62)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 233:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 233 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 235:Descriptors.c **** 			break;
  53               		.loc 1 235 0
  54 0028 00C0      		rjmp .L2
  55               	.LVL4:
  56               	.L4:
 236:Descriptors.c **** 		case DTYPE_String:
 237:Descriptors.c **** 			switch (DescriptorNumber)
  57               		.loc 1 237 0
  58 002a 9927      		clr r25
  59               	.LVL5:
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 00F0      		brlo .L7
  64 0034 0297      		sbiw r24,2
  65 0036 01F4      		brne .L12
  66               	.LVL6:
  67               	.LBB2:
 238:Descriptors.c **** 			{
 239:Descriptors.c **** 				case 0x00:
 240:Descriptors.c **** 					Address = &LanguageString;
 241:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 242:Descriptors.c **** 					break;
 243:Descriptors.c **** 				case 0x01:
 244:Descriptors.c **** 					Address = &ManufacturerString;
 245:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 246:Descriptors.c **** 					break;
 247:Descriptors.c **** 				case 0x02:
 248:Descriptors.c **** 					Address = &ProductString;
 249:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  68               		.loc 1 249 0
  69 0038 E0E0      		ldi r30,lo8(ProductString)
  70 003a F0E0      		ldi r31,hi8(ProductString)
  71 003c 00C0      		rjmp .L13
  72               	.LVL7:
  73               	.L7:
  74               	.LBE2:
  75               	.LBB3:
 241:Descriptors.c **** 					break;
  76               		.loc 1 241 0
  77 003e E0E0      		ldi r30,lo8(LanguageString)
  78 0040 F0E0      		ldi r31,hi8(LanguageString)
  79 0042 00C0      		rjmp .L13
  80               	.LVL8:
  81               	.L6:
  82               	.LBE3:
  83               	.LBB4:
 245:Descriptors.c **** 					break;
  84               		.loc 1 245 0
  85 0044 E0E0      		ldi r30,lo8(ManufacturerString)
  86 0046 F0E0      		ldi r31,hi8(ManufacturerString)
  87               	.LVL9:
  88               	.L13:
  89               	.LBE4:
  90               	.LBB5:
  91               		.loc 1 249 0
  92               	/* #APP */
  93               	 ;  249 "Descriptors.c" 1
  94 0048 8491      		lpm r24, Z
  95               		
  96               	 ;  0 "" 2
  97               	.LVL10:
  98               	/* #NOAPP */
  99               	.LBE5:
 100 004a 90E0      		ldi r25,0
 101               	.LVL11:
 248:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 102               		.loc 1 248 0
 103 004c 9F01      		movw r18,r30
 250:Descriptors.c **** 					break;
 104               		.loc 1 250 0
 105 004e 00C0      		rjmp .L2
 106               	.LVL12:
 107               	.L12:
 224:Descriptors.c **** 
 108               		.loc 1 224 0
 109 0050 80E0      		ldi r24,0
 110 0052 90E0      		ldi r25,0
 223:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 111               		.loc 1 223 0
 112 0054 20E0      		ldi r18,0
 113 0056 30E0      		ldi r19,0
 114               	.LVL13:
 115               	.L2:
 251:Descriptors.c **** 			}
 252:Descriptors.c **** 
 253:Descriptors.c **** 			break;
 254:Descriptors.c **** 	}
 255:Descriptors.c **** 
 256:Descriptors.c **** 	*DescriptorAddress = Address;
 116               		.loc 1 256 0
 117 0058 FA01      		movw r30,r20
 118 005a 3183      		std Z+1,r19
 119 005c 2083      		st Z,r18
 257:Descriptors.c **** 	return Size;
 258:Descriptors.c **** }
 120               		.loc 1 258 0
 121 005e 0895      		ret
 122               		.cfi_endproc
 123               	.LFE97:
 125               	.global	ProductString
 126               		.section	.progmem.data,"a",@progbits
 129               	ProductString:
 130 0000 28        		.byte	40
 131 0001 03        		.byte	3
 132 0002 4C00      		.string	"L"
 133 0004 5500      		.string	"U"
 134 0006 4600      		.string	"F"
 135 0008 4100      		.string	"A"
 136 000a 2000      		.string	" "
 137 000c 5200      		.string	"R"
 138 000e 4E00      		.string	"N"
 139 0010 4400      		.string	"D"
 140 0012 4900      		.string	"I"
 141 0014 5300      		.string	"S"
 142 0016 2000      		.string	" "
 143 0018 4300      		.string	"C"
 144 001a 4400      		.string	"D"
 145 001c 4300      		.string	"C"
 146 001e 2000      		.string	" "
 147 0020 4400      		.string	"D"
 148 0022 6500      		.string	"e"
 149 0024 6D00      		.string	"m"
 150 0026 6F00      		.string	"o"
 151 0028 00        		.string	""
 152 0029 00        		.string	""
 153               	.global	ManufacturerString
 156               	ManufacturerString:
 157 002a 18        		.byte	24
 158 002b 03        		.byte	3
 159 002c 4400      		.string	"D"
 160 002e 6500      		.string	"e"
 161 0030 6100      		.string	"a"
 162 0032 6E00      		.string	"n"
 163 0034 2000      		.string	" "
 164 0036 4300      		.string	"C"
 165 0038 6100      		.string	"a"
 166 003a 6D00      		.string	"m"
 167 003c 6500      		.string	"e"
 168 003e 7200      		.string	"r"
 169 0040 6100      		.string	"a"
 170 0042 00        		.string	""
 171 0043 00        		.string	""
 172               	.global	LanguageString
 175               	LanguageString:
 176 0044 04        		.byte	4
 177 0045 03        		.byte	3
 178 0046 0904      		.word	1033
 179               	.global	ConfigurationDescriptor
 182               	ConfigurationDescriptor:
 183 0048 09        		.byte	9
 184 0049 02        		.byte	2
 185 004a 3E00      		.word	62
 186 004c 02        		.byte	2
 187 004d 01        		.byte	1
 188 004e 00        		.byte	0
 189 004f C0        		.byte	-64
 190 0050 32        		.byte	50
 191 0051 09        		.byte	9
 192 0052 04        		.byte	4
 193 0053 00        		.byte	0
 194 0054 00        		.byte	0
 195 0055 01        		.byte	1
 196 0056 02        		.byte	2
 197 0057 02        		.byte	2
 198 0058 FF        		.byte	-1
 199 0059 00        		.byte	0
 200 005a 05        		.byte	5
 201 005b 24        		.byte	36
 202 005c 00        		.byte	0
 203 005d 1001      		.word	272
 204 005f 04        		.byte	4
 205 0060 24        		.byte	36
 206 0061 02        		.byte	2
 207 0062 00        		.byte	0
 208 0063 05        		.byte	5
 209 0064 24        		.byte	36
 210 0065 06        		.byte	6
 211 0066 00        		.byte	0
 212 0067 01        		.byte	1
 213 0068 07        		.byte	7
 214 0069 05        		.byte	5
 215 006a 83        		.byte	-125
 216 006b 03        		.byte	3
 217 006c 0800      		.word	8
 218 006e FF        		.byte	-1
 219 006f 09        		.byte	9
 220 0070 04        		.byte	4
 221 0071 01        		.byte	1
 222 0072 00        		.byte	0
 223 0073 02        		.byte	2
 224 0074 0A        		.byte	10
 225 0075 00        		.byte	0
 226 0076 00        		.byte	0
 227 0077 00        		.byte	0
 228 0078 07        		.byte	7
 229 0079 05        		.byte	5
 230 007a 02        		.byte	2
 231 007b 02        		.byte	2
 232 007c 4000      		.word	64
 233 007e 01        		.byte	1
 234 007f 07        		.byte	7
 235 0080 05        		.byte	5
 236 0081 81        		.byte	-127
 237 0082 02        		.byte	2
 238 0083 4000      		.word	64
 239 0085 01        		.byte	1
 240               	.global	DeviceDescriptor
 243               	DeviceDescriptor:
 244 0086 12        		.byte	18
 245 0087 01        		.byte	1
 246 0088 1001      		.word	272
 247 008a 02        		.byte	2
 248 008b 00        		.byte	0
 249 008c 00        		.byte	0
 250 008d 08        		.byte	8
 251 008e EB03      		.word	1003
 252 0090 4C20      		.word	8268
 253 0092 0100      		.word	1
 254 0094 01        		.byte	1
 255 0095 02        		.byte	2
 256 0096 00        		.byte	0
 257 0097 01        		.byte	1
 258               		.text
 259               	.Letext0:
 260               		.file 2 "/usr/lib/avr/include/stdint.h"
 261               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 262               		.file 4 "../../../../LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 263               		.file 5 "../../../../LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 264               		.file 6 "Descriptors.h"
 265               		.file 7 "../../../../LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccnkq8eG.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnkq8eG.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnkq8eG.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnkq8eG.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccnkq8eG.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnkq8eG.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnkq8eG.s:14     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccnkq8eG.s:243    .progmem.data:0000000000000086 DeviceDescriptor
     /tmp/ccnkq8eG.s:182    .progmem.data:0000000000000048 ConfigurationDescriptor
     /tmp/ccnkq8eG.s:129    .progmem.data:0000000000000000 ProductString
     /tmp/ccnkq8eG.s:175    .progmem.data:0000000000000044 LanguageString
     /tmp/ccnkq8eG.s:156    .progmem.data:000000000000002a ManufacturerString

NO UNDEFINED SYMBOLS
