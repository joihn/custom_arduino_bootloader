
XPLAINBridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  0000231c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800178  00800178  00002448  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00002448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000520  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009ebe  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d27  00000000  00000000  0000c87a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004f78  00000000  00000000  0000f5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f74  00000000  00000000  0001451c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000343f  00000000  00000000  00015490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000577e  00000000  00000000  000188cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000638  00000000  00000000  0001e04d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	d4 c2       	rjmp	.+1448   	; 0x5ae <__vector_1>
       6:	00 00       	nop
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
       a:	00 00       	nop
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_10>
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	97 c3       	rjmp	.+1838   	; 0x760 <__vector_12>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c2       	rjmp	.+1456   	; 0x5f6 <__vector_17>
      46:	00 00       	nop
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
      56:	00 00       	nop
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	10 c3       	rjmp	.+1568   	; 0x6a2 <__vector_32>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
      98:	a5 06       	cpc	r10, r21
      9a:	c7 06       	cpc	r12, r23
      9c:	e4 06       	cpc	r14, r20
      9e:	28 07       	cpc	r18, r24
      a0:	2a 07       	cpc	r18, r26
      a2:	2c 07       	cpc	r18, r28
      a4:	75 07       	cpc	r23, r21
      a6:	a2 0e       	add	r10, r18
      a8:	bb 0e       	add	r11, r27
      aa:	9d 0f       	add	r25, r29
      ac:	bb 0e       	add	r11, r27
      ae:	9d 0f       	add	r25, r29
      b0:	f5 0e       	add	r15, r21
      b2:	17 0f       	add	r17, r23
      b4:	9d 0f       	add	r25, r29
      b6:	6a 0f       	add	r22, r26
      b8:	7c 0f       	add	r23, r28

000000ba <AVRISP_SerialString>:
      ba:	1c 03 30 00 30 00 30 00 30 00 41 00 30 00 30 00     ..0.0.0.0.A.0.0.
      ca:	31 00 32 00 38 00 32 00 35 00 35 00 00 00           1.2.8.2.5.5...

000000d8 <AVRISP_ProductString>:
      d8:	2e 03 4c 00 55 00 46 00 41 00 20 00 41 00 56 00     ..L.U.F.A. .A.V.
      e8:	52 00 49 00 53 00 50 00 20 00 4d 00 6b 00 49 00     R.I.S.P. .M.k.I.
      f8:	49 00 20 00 43 00 6c 00 6f 00 6e 00 65 00 00 00     I. .C.l.o.n.e...

00000108 <AVRISP_ManufacturerString>:
     108:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     118:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000122 <AVRISP_LanguageString>:
     122:	04 03 09 04                                         ....

00000126 <AVRISP_ConfigurationDescriptor>:
     126:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
     136:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

00000146 <AVRISP_DeviceDescriptor>:
     146:	12 01 10 01 ff 00 00 08 eb 03 04 21 00 02 01 02     ...........!....
     156:	03 01                                               ..

00000158 <USART_ProductString>:
     158:	26 03 4c 00 55 00 46 00 41 00 20 00 58 00 50 00     &.L.U.F.A. .X.P.
     168:	4c 00 41 00 49 00 4e 00 20 00 42 00 72 00 69 00     L.A.I.N. .B.r.i.
     178:	64 00 67 00 65 00 00 00                             d.g.e...

00000180 <USART_ManufacturerString>:
     180:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     190:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000019a <USART_LanguageString>:
     19a:	04 03 09 04                                         ....

0000019e <USART_ConfigurationDescriptor>:
     19e:	09 02 3e 00 02 01 00 80 32 09 04 00 00 01 02 02     ..>.....2.......
     1ae:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     1be:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     1ce:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000001dc <USART_DeviceDescriptor>:
     1dc:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     1ec:	dc 01                                               ..

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d0 e2       	ldi	r29, 0x20	; 32
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ec e1       	ldi	r30, 0x1C	; 28
     202:	f3 e2       	ldi	r31, 0x23	; 35
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a8 37       	cpi	r26, 0x78	; 120
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	22 e0       	ldi	r18, 0x02	; 2
     216:	a8 e7       	ldi	r26, 0x78	; 120
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a4 3a       	cpi	r26, 0xA4	; 164
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	c9 d0       	rcall	.+402    	; 0x3b8 <main>
     226:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <LEDs_SetAllLEDs>:
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     22c:	95 b1       	in	r25, 0x05	; 5
     22e:	90 64       	ori	r25, 0x40	; 64
     230:	80 95       	com	r24
     232:	89 23       	and	r24, r25
     234:	85 b9       	out	0x05, r24	; 5
     236:	08 95       	ret

00000238 <AVRISP_Task>:
}

void AVRISP_Task(void)
{
	/* Must be in the configured state for the AVRISP code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     238:	8e b3       	in	r24, 0x1e	; 30
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f4       	brne	.+26     	; 0x258 <AVRISP_Task+0x20>
	  return;

	V2Params_UpdateParamValues();
     23e:	bf d3       	rcall	.+1918   	; 0x9be <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     246:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     24a:	82 ff       	sbrs	r24, 2
     24c:	05 c0       	rjmp	.+10     	; 0x258 <AVRISP_Task+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     24e:	80 e4       	ldi	r24, 0x40	; 64

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     250:	ed df       	rcall	.-38     	; 0x22c <LEDs_SetAllLEDs>

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     252:	b0 d2       	rcall	.+1376   	; 0x7b4 <V2Protocol_ProcessCommand>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	ea cf       	rjmp	.-44     	; 0x22c <LEDs_SetAllLEDs>
     258:	08 95       	ret

0000025a <UARTBridge_Task>:
	}
}

void UARTBridge_Task(void)
{
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
	/* Must be in the configured state for the USART Bridge code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     262:	8e b3       	in	r24, 0x1e	; 30
     264:	84 30       	cpi	r24, 0x04	; 4
     266:	09 f0       	breq	.+2      	; 0x26a <UARTBridge_Task+0x10>
     268:	6b c0       	rjmp	.+214    	; 0x340 <UARTBridge_Task+0xe6>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     26a:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     26c:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     26e:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <USBtoUART_Buffer+0x9>
     272:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <USBtoUART_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     276:	8f bf       	out	0x3f, r24	; 63
	  return;

	/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
	if (!(RingBuffer_IsFull(&USBtoUART_Buffer)))
     278:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <USBtoUART_Buffer+0x8>
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	82 17       	cp	r24, r18
     280:	93 07       	cpc	r25, r19
     282:	09 f1       	breq	.+66     	; 0x2c6 <UARTBridge_Task+0x6c>
	{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 74 10 	call	0x20e8	; 0x20e8 <CDC_Device_ReceiveByte>

		/* Read bytes from the USB OUT endpoint into the UART transmit buffer */
		if (!(ReceivedByte < 0))
     28c:	97 fd       	sbrc	r25, 7
     28e:	1b c0       	rjmp	.+54     	; 0x2c6 <UARTBridge_Task+0x6c>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     290:	ee e7       	ldi	r30, 0x7E	; 126
     292:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     294:	a0 81       	ld	r26, Z
     296:	b1 81       	ldd	r27, Z+1	; 0x01
     298:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     29a:	80 81       	ld	r24, Z
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	80 83       	st	Z, r24
     2a4:	26 81       	ldd	r18, Z+6	; 0x06
     2a6:	37 81       	ldd	r19, Z+7	; 0x07
     2a8:	82 17       	cp	r24, r18
     2aa:	93 07       	cpc	r25, r19
     2ac:	21 f4       	brne	.+8      	; 0x2b6 <UARTBridge_Task+0x5c>
			  Buffer->In = Buffer->Start;
     2ae:	84 81       	ldd	r24, Z+4	; 0x04
     2b0:	95 81       	ldd	r25, Z+5	; 0x05
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2b6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2b8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     2ba:	81 85       	ldd	r24, Z+9	; 0x09
     2bc:	92 85       	ldd	r25, Z+10	; 0x0a
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	92 87       	std	Z+10, r25	; 0x0a
     2c2:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2c4:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2c6:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2c8:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     2ca:	c0 91 92 02 	lds	r28, 0x0292	; 0x800292 <UARTtoUSB_Buffer+0x9>
     2ce:	d0 91 93 02 	lds	r29, 0x0293	; 0x800293 <UARTtoUSB_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2d2:	8f bf       	out	0x3f, r24	; 63
		  RingBuffer_Insert(&USBtoUART_Buffer, ReceivedByte);
	}
	
	/* Check if the UART receive buffer flush timer has expired or buffer is nearly full */
	uint16_t BufferCount = RingBuffer_GetCount(&UARTtoUSB_Buffer);
	if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
     2d4:	a8 99       	sbic	0x15, 0	; 21
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <UARTBridge_Task+0x94>
     2d8:	c9 3c       	cpi	r28, 0xC9	; 201
     2da:	d1 05       	cpc	r29, r1
     2dc:	40 f4       	brcc	.+16     	; 0x2ee <UARTBridge_Task+0x94>
			/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
			RingBuffer_Remove(&UARTtoUSB_Buffer);
		}
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	91 e0       	ldi	r25, 0x01	; 1
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
			/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
			RingBuffer_Remove(&UARTtoUSB_Buffer);
		}
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2ea:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <CDC_Device_USBTask>
	/* Check if the UART receive buffer flush timer has expired or buffer is nearly full */
	uint16_t BufferCount = RingBuffer_GetCount(&UARTtoUSB_Buffer);
	if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);
     2ee:	a8 9a       	sbi	0x15, 0	; 21
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     2f0:	09 e8       	ldi	r16, 0x89	; 137
     2f2:	12 e0       	ldi	r17, 0x02	; 2

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     2f4:	20 97       	sbiw	r28, 0x00	; 0
     2f6:	99 f3       	breq	.-26     	; 0x2de <UARTBridge_Task+0x84>
     2f8:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <UARTtoUSB_Buffer+0x2>
     2fc:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <UARTtoUSB_Buffer+0x3>
		{
			/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
			if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     300:	60 81       	ld	r22, Z
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 13 10 	call	0x2026	; 0x2026 <CDC_Device_SendByte>
     30a:	81 11       	cpse	r24, r1
     30c:	e8 cf       	rjmp	.-48     	; 0x2de <UARTBridge_Task+0x84>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     30e:	f8 01       	movw	r30, r16
		
			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	93 83       	std	Z+3, r25	; 0x03
     318:	82 83       	std	Z+2, r24	; 0x02
     31a:	26 81       	ldd	r18, Z+6	; 0x06
     31c:	37 81       	ldd	r19, Z+7	; 0x07
     31e:	82 17       	cp	r24, r18
     320:	93 07       	cpc	r25, r19
     322:	21 f4       	brne	.+8      	; 0x32c <UARTBridge_Task+0xd2>
			  Buffer->Out = Buffer->Start;
     324:	84 81       	ldd	r24, Z+4	; 0x04
     326:	95 81       	ldd	r25, Z+5	; 0x05
     328:	93 83       	std	Z+3, r25	; 0x03
     32a:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     32c:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     32e:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     330:	81 85       	ldd	r24, Z+9	; 0x09
     332:	92 85       	ldd	r25, Z+10	; 0x0a
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	92 87       	std	Z+10, r25	; 0x0a
     338:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     33a:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     33c:	21 97       	sbiw	r28, 0x01	; 1
     33e:	da cf       	rjmp	.-76     	; 0x2f4 <UARTBridge_Task+0x9a>
			RingBuffer_Remove(&UARTtoUSB_Buffer);
		}
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
}
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	08 95       	ret

0000034a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     34a:	84 b7       	in	r24, 0x34	; 52
     34c:	87 7f       	andi	r24, 0xF7	; 247
     34e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	a8 95       	wdr
     356:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     35a:	88 61       	ori	r24, 0x18	; 24
     35c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     360:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     364:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	80 e8       	ldi	r24, 0x80	; 128
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     372:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     376:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	SoftUART_Init();
     378:	00 d1       	rcall	.+512    	; 0x57a <SoftUART_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |= LEDS_ALL_LEDS;
     37a:	26 9a       	sbi	0x04, 6	; 4
				PORTB |= LEDS_ALL_LEDS;
     37c:	2e 9a       	sbi	0x05, 6	; 5
	LEDs_Init();
	USB_Init();
     37e:	0e 94 0e 0c 	call	0x181c	; 0x181c <USB_Init>

	/* Disable JTAG debugging */
	MCUCR |= (1 << JTD);
     382:	85 b7       	in	r24, 0x35	; 53
     384:	80 68       	ori	r24, 0x80	; 128
     386:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << JTD);
     388:	85 b7       	in	r24, 0x35	; 53
     38a:	80 68       	ori	r24, 0x80	; 128
     38c:	85 bf       	out	0x35, r24	; 53

	/* Enable pull-up on the JTAG TDI pin so we can use it to select the mode */
	PORTF |= (1 << 7);
     38e:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     390:	8f e1       	ldi	r24, 0x1F	; 31
     392:	9e e4       	ldi	r25, 0x4E	; 78
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <SetupHardware+0x4a>
     398:	00 c0       	rjmp	.+0      	; 0x39a <SetupHardware+0x50>
     39a:	00 00       	nop
	Delay_MS(10);

	/* Select the firmware mode based on the JTD pin's value */
	CurrentFirmwareMode = (PINF & (1 << 7)) ? MODE_USART_BRIDGE : MODE_PDI_PROGRAMMER;
     39c:	8f b1       	in	r24, 0x0f	; 15
     39e:	80 95       	com	r24
     3a0:	88 1f       	adc	r24, r24
     3a2:	88 27       	eor	r24, r24
     3a4:	88 1f       	adc	r24, r24
     3a6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__data_end>

	/* Re-enable JTAG debugging */
	MCUCR &= ~(1 << JTD);
     3aa:	85 b7       	in	r24, 0x35	; 53
     3ac:	8f 77       	andi	r24, 0x7F	; 127
     3ae:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << JTD);
     3b0:	85 b7       	in	r24, 0x35	; 53
     3b2:	8f 77       	andi	r24, 0x7F	; 127
     3b4:	85 bf       	out	0x35, r24	; 53
     3b6:	08 95       	ret

000003b8 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     3b8:	c8 df       	rcall	.-112    	; 0x34a <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3ba:	80 e4       	ldi	r24, 0x40	; 64
     3bc:	37 df       	rcall	.-402    	; 0x22c <LEDs_SetAllLEDs>
	sei();
     3be:	78 94       	sei

	for (;;)
	{
		if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     3c0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
     3c4:	81 11       	cpse	r24, r1
		  UARTBridge_Task();
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <main+0x14>
     3c8:	48 df       	rcall	.-368    	; 0x25a <UARTBridge_Task>
		else
		  AVRISP_Task();
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <main+0x16>
     3cc:	35 df       	rcall	.-406    	; 0x238 <AVRISP_Task>

		USB_USBTask();
     3ce:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <USB_USBTask>
	}
     3d2:	f6 cf       	rjmp	.-20     	; 0x3c0 <main+0x8>

000003d4 <EVENT_USB_Device_ConfigurationChanged>:
	MCUCR &= ~(1 << JTD);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     3d4:	cf 93       	push	r28
	bool ConfigSuccess = true;

	/* Configure the device endpoints according to the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     3d6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
     3da:	81 11       	cpse	r24, r1
     3dc:	32 c0       	rjmp	.+100    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <CDC_Device_ConfigureEndpoints>
     3e6:	c8 2f       	mov	r28, r24

		/* Configure the UART flush timer - run at Fcpu/1024 for maximum interval before overflow */
		TCCR0B = ((1 << CS02) | (1 << CS00));
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	85 bd       	out	0x25, r24	; 37
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3ec:	ee e7       	ldi	r30, 0x7E	; 126
     3ee:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3f0:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3f2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     3f4:	89 ef       	ldi	r24, 0xF9	; 249
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	91 83       	std	Z+1, r25	; 0x01
     3fa:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     3fc:	93 83       	std	Z+3, r25	; 0x03
     3fe:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     400:	95 83       	std	Z+5, r25	; 0x05
     402:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     404:	89 e7       	ldi	r24, 0x79	; 121
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	97 83       	std	Z+7, r25	; 0x07
     40a:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     40c:	20 e8       	ldi	r18, 0x80	; 128
     40e:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
     410:	12 86       	std	Z+10, r1	; 0x0a
     412:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     414:	3f bf       	out	0x3f, r19	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     416:	e9 e8       	ldi	r30, 0x89	; 137
     418:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     41a:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     41c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     41e:	89 e7       	ldi	r24, 0x79	; 121
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     426:	93 83       	std	Z+3, r25	; 0x03
     428:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     42a:	95 83       	std	Z+5, r25	; 0x05
     42c:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     42e:	89 ef       	ldi	r24, 0xF9	; 249
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	97 83       	std	Z+7, r25	; 0x07
     434:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     436:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
     438:	12 86       	std	Z+10, r1	; 0x0a
     43a:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     43c:	3f bf       	out	0x3f, r19	; 63
		/* Initialize ring buffers used to hold serial data between USB and software UART interfaces */
		RingBuffer_InitBuffer(&USBtoUART_Buffer, USBtoUART_Buffer_Data, sizeof(USBtoUART_Buffer_Data));
		RingBuffer_InitBuffer(&UARTtoUSB_Buffer, UARTtoUSB_Buffer_Data, sizeof(UARTtoUSB_Buffer_Data));

		/* Start the software USART */
		SoftUART_Init();
     43e:	9d d0       	rcall	.+314    	; 0x57a <SoftUART_Init>
     440:	07 c0       	rjmp	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     442:	42 e3       	ldi	r20, 0x32	; 50
     444:	60 e8       	ldi	r22, 0x80	; 128
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <Endpoint_ConfigureEndpoint_Prv>
		ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
		                                            AVRISP_DATA_EPSIZE, ENDPOINT_BANK_SINGLE);
		#endif

		/* Configure the V2 protocol packet handler */
		V2Protocol_Init();
     44c:	c8 2f       	mov	r28, r24
     44e:	a1 d1       	rcall	.+834    	; 0x792 <V2Protocol_Init>
	}

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     450:	c1 11       	cpse	r28, r1
     452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     454:	80 e4       	ldi	r24, 0x40	; 64
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
}
     458:	80 e0       	ldi	r24, 0x00	; 0

		/* Configure the V2 protocol packet handler */
		V2Protocol_Init();
	}

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     45a:	cf 91       	pop	r28
     45c:	e7 ce       	rjmp	.-562    	; 0x22c <LEDs_SetAllLEDs>

0000045e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     45e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
     462:	81 11       	cpse	r24, r1
     464:	04 c0       	rjmp	.+8      	; 0x46e <EVENT_USB_Device_ControlRequest+0x10>
	  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <CDC_Device_ProcessControlRequest>
     46e:	08 95       	ret

00000470 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     470:	80 e4       	ldi	r24, 0x40	; 64
     472:	dc ce       	rjmp	.-584    	; 0x22c <LEDs_SetAllLEDs>

00000474 <EVENT_USB_Device_Connect>:
     474:	fd cf       	rjmp	.-6      	; 0x470 <EVENT_USB_Device_Disconnect>

00000476 <EVENT_CDC_Device_LineEncodingChanged>:
		#define STXDDR     DDRD

	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);
     476:	fc 01       	movw	r30, r24
     478:	27 85       	ldd	r18, Z+15	; 0x0f
     47a:	30 89       	ldd	r19, Z+16	; 0x10
     47c:	41 89       	ldd	r20, Z+17	; 0x11
     47e:	52 89       	ldd	r21, Z+18	; 0x12
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	72 e1       	ldi	r23, 0x12	; 18
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 47 11 	call	0x228e	; 0x228e <__udivmodsi4>
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	31 09       	sbc	r19, r1

			OCR1A = BitTime;
     490:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     494:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR3A = BitTime;
     498:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     49c:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     4a0:	08 95       	ret

000004a2 <CALLBACK_USB_GetDescriptor>:
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	/* Return the correct descriptors based on the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     4a2:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__data_end>
     4a6:	21 11       	cpse	r18, r1
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <CALLBACK_USB_GetDescriptor+0xa>
	  return USART_GetDescriptor(wValue, wIndex, DescriptorAddress);
     4aa:	37 c0       	rjmp	.+110    	; 0x51a <USART_GetDescriptor>
	else
	  return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress);
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <AVRISP_GetDescriptor>

000004ae <AVRISP_GetDescriptor>:
     4ae:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4b0:	33 27       	eor	r19, r19
     4b2:	22 30       	cpi	r18, 0x02	; 2
     4b4:	31 05       	cpc	r19, r1
     4b6:	59 f0       	breq	.+22     	; 0x4ce <AVRISP_GetDescriptor+0x20>
     4b8:	23 30       	cpi	r18, 0x03	; 3
     4ba:	31 05       	cpc	r19, r1
     4bc:	69 f0       	breq	.+26     	; 0x4d8 <AVRISP_GetDescriptor+0x2a>
     4be:	21 30       	cpi	r18, 0x01	; 1
     4c0:	31 05       	cpc	r19, r1
     4c2:	19 f5       	brne	.+70     	; 0x50a <AVRISP_GetDescriptor+0x5c>
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4c4:	82 e1       	ldi	r24, 0x12	; 18
     4c6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     4c8:	26 e4       	ldi	r18, 0x46	; 70
     4ca:	31 e0       	ldi	r19, 0x01	; 1
     4cc:	22 c0       	rjmp	.+68     	; 0x512 <AVRISP_GetDescriptor+0x64>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     4ce:	80 e2       	ldi	r24, 0x20	; 32
     4d0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &AVRISP_ConfigurationDescriptor;
     4d2:	26 e2       	ldi	r18, 0x26	; 38
     4d4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     4d6:	1d c0       	rjmp	.+58     	; 0x512 <AVRISP_GetDescriptor+0x64>
		case DTYPE_String:
			switch (DescriptorNumber)
     4d8:	99 27       	eor	r25, r25
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	91 05       	cpc	r25, r1
     4de:	61 f0       	breq	.+24     	; 0x4f8 <AVRISP_GetDescriptor+0x4a>
     4e0:	40 f0       	brcs	.+16     	; 0x4f2 <AVRISP_GetDescriptor+0x44>
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	91 05       	cpc	r25, r1
     4e6:	59 f0       	breq	.+22     	; 0x4fe <AVRISP_GetDescriptor+0x50>
     4e8:	03 97       	sbiw	r24, 0x03	; 3
     4ea:	79 f4       	brne	.+30     	; 0x50a <AVRISP_GetDescriptor+0x5c>
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = pgm_read_byte(&AVRISP_SerialString.Header.Size);
     4ec:	ea eb       	ldi	r30, 0xBA	; 186
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	08 c0       	rjmp	.+16     	; 0x502 <AVRISP_GetDescriptor+0x54>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     4f2:	e2 e2       	ldi	r30, 0x22	; 34
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <AVRISP_GetDescriptor+0x54>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     4f8:	e8 e0       	ldi	r30, 0x08	; 8
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <AVRISP_GetDescriptor+0x54>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     4fe:	e8 ed       	ldi	r30, 0xD8	; 216
     500:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = pgm_read_byte(&AVRISP_SerialString.Header.Size);
     502:	84 91       	lpm	r24, Z
     504:	90 e0       	ldi	r25, 0x00	; 0
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
     506:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_SerialString.Header.Size);
					break;
     508:	04 c0       	rjmp	.+8      	; 0x512 <AVRISP_GetDescriptor+0x64>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
                              const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     512:	fa 01       	movw	r30, r20
     514:	31 83       	std	Z+1, r19	; 0x01
     516:	20 83       	st	Z, r18
	return Size;
}
     518:	08 95       	ret

0000051a <USART_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     51a:	29 2f       	mov	r18, r25
     51c:	33 27       	eor	r19, r19
     51e:	22 30       	cpi	r18, 0x02	; 2
     520:	31 05       	cpc	r19, r1
     522:	59 f0       	breq	.+22     	; 0x53a <USART_GetDescriptor+0x20>
     524:	23 30       	cpi	r18, 0x03	; 3
     526:	31 05       	cpc	r19, r1
     528:	69 f0       	breq	.+26     	; 0x544 <USART_GetDescriptor+0x2a>
     52a:	21 30       	cpi	r18, 0x01	; 1
     52c:	31 05       	cpc	r19, r1
     52e:	e9 f4       	brne	.+58     	; 0x56a <USART_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     530:	82 e1       	ldi	r24, 0x12	; 18
     532:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
     534:	2c ed       	ldi	r18, 0xDC	; 220
     536:	31 e0       	ldi	r19, 0x01	; 1
     538:	1c c0       	rjmp	.+56     	; 0x572 <USART_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
     53a:	8e e3       	ldi	r24, 0x3E	; 62
     53c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
     53e:	2e e9       	ldi	r18, 0x9E	; 158
     540:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
			break;
     542:	17 c0       	rjmp	.+46     	; 0x572 <USART_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     544:	99 27       	eor	r25, r25
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	91 05       	cpc	r25, r1
     54a:	49 f0       	breq	.+18     	; 0x55e <USART_GetDescriptor+0x44>
     54c:	28 f0       	brcs	.+10     	; 0x558 <USART_GetDescriptor+0x3e>
     54e:	02 97       	sbiw	r24, 0x02	; 2
     550:	61 f4       	brne	.+24     	; 0x56a <USART_GetDescriptor+0x50>
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &USART_ProductString;
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
     552:	e8 e5       	ldi	r30, 0x58	; 88
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	05 c0       	rjmp	.+10     	; 0x562 <USART_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &USART_LanguageString;
					Size    = pgm_read_byte(&USART_LanguageString.Header.Size);
     558:	ea e9       	ldi	r30, 0x9A	; 154
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	02 c0       	rjmp	.+4      	; 0x562 <USART_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
     55e:	e0 e8       	ldi	r30, 0x80	; 128
     560:	f1 e0       	ldi	r31, 0x01	; 1
					break;
				case 0x02:
					Address = &USART_ProductString;
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
     562:	84 91       	lpm	r24, Z
     564:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &USART_ProductString;
     566:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
					break;
     568:	04 c0       	rjmp	.+8      	; 0x572 <USART_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
                             const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     572:	fa 01       	movw	r30, r20
     574:	31 83       	std	Z+1, r19	; 0x01
     576:	20 83       	st	Z, r18
	return Size;
}
     578:	08 95       	ret

0000057a <SoftUART_Init>:

/** Initializes the software UART, ready for data transmission and reception into the global ring buffers. */
void SoftUART_Init(void)
{
	/* Set TX pin to output high, enable RX pull-up */
	STXPORT |= (1 << STX);
     57a:	59 9a       	sbi	0x0b, 1	; 11
	STXDDR  |= (1 << STX);
     57c:	51 9a       	sbi	0x0a, 1	; 10
	SRXPORT |= (1 << SRX);
     57e:	58 9a       	sbi	0x0b, 0	; 11

	/* Enable INT0 for the detection of incoming start bits that signal the start of a byte */
	EICRA  = (1 << ISC01);
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK  = (1 << INT0);
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	9d bb       	out	0x1d, r25	; 29
	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);

			OCR1A = BitTime;
     58a:	20 e4       	ldi	r18, 0x40	; 64
     58c:	33 e0       	ldi	r19, 0x03	; 3
     58e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     592:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR3A = BitTime;
     596:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     59a:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

	/* Set the transmission and reception timer compare values for the default baud rate */
	SoftUART_SetBaud(9600);

	/* Setup reception timer compare ISR */
	TIMSK1 = (1 << OCIE1A);
     59e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	/* Setup transmission timer compare ISR and start the timer */
	TIMSK3 = (1 << OCIE3A);
     5a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TCCR3B = ((1 << CS30) | (1 << WGM32));
     5a6:	89 e0       	ldi	r24, 0x09	; 9
     5a8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     5ac:	08 95       	ret

000005ae <__vector_1>:
}

/** ISR to detect the start of a bit being sent to the software UART. */
ISR(INT0_vect, ISR_BLOCK)
{
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
	/* Reset the number of reception bits remaining counter */
	RX_BitsRemaining = 8;
     5bc:	88 e0       	ldi	r24, 0x08	; 8
     5be:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <RX_BitsRemaining>

	/* Reset the bit reception timer to -(1/2) of the total bit time, so that the first data bit is
	 * sampled mid way through the total bit time, making reception more robust.
	 */
	TCNT1 = -(OCR1A >> 1);
     5c2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5c6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5ca:	96 95       	lsr	r25
     5cc:	87 95       	ror	r24
     5ce:	91 95       	neg	r25
     5d0:	81 95       	neg	r24
     5d2:	91 09       	sbc	r25, r1
     5d4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     5d8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* Check to see that the pin is still low (prevents glitches from starting a frame reception) */
	if (!(SRXPIN & (1 << SRX)))
     5dc:	48 99       	sbic	0x09, 0	; 9
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__vector_1+0x3a>
	{
		/* Disable start bit detection ISR while the next byte is received */
		EIMSK = 0;
     5e0:	1d ba       	out	0x1d, r1	; 29

		/* Start the reception timer */
		TCCR1B = ((1 << CS10) | (1 << WGM12));
     5e2:	89 e0       	ldi	r24, 0x09	; 9
     5e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	}
}
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <__vector_17>:

/** ISR to manage the reception of bits to the software UART. */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	0b b6       	in	r0, 0x3b	; 59
     602:	0f 92       	push	r0
     604:	2f 93       	push	r18
     606:	3f 93       	push	r19
     608:	8f 93       	push	r24
     60a:	9f 93       	push	r25
     60c:	af 93       	push	r26
     60e:	bf 93       	push	r27
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
	/* Cache the current RX pin value for later checking */
	uint8_t SRX_Cached = (SRXPIN & (1 << SRX));
     614:	99 b1       	in	r25, 0x09	; 9
     616:	91 70       	andi	r25, 0x01	; 1

	/* Check if reception has finished */
	if (RX_BitsRemaining)
     618:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <RX_BitsRemaining>
     61c:	22 23       	and	r18, r18
     61e:	71 f0       	breq	.+28     	; 0x63c <__vector_17+0x46>
	{
		/* Shift the current received bit mask to the next bit position */
		RX_Data >>= 1;
     620:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <RX_Data>
     624:	86 95       	lsr	r24
     626:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <RX_Data>
		RX_BitsRemaining--;
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <RX_BitsRemaining>

		/* Store next bit into the received data variable */
		if (SRX_Cached)
     630:	99 23       	and	r25, r25
     632:	41 f1       	breq	.+80     	; 0x684 <__vector_17+0x8e>
		  RX_Data |= (1 << 7);
     634:	80 68       	ori	r24, 0x80	; 128
     636:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <RX_Data>
     63a:	24 c0       	rjmp	.+72     	; 0x684 <__vector_17+0x8e>
	}
	else
	{
		/* Disable the reception timer as all data has now been received, re-enable start bit detection ISR */
		TCCR1B = 0;
     63c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		EIFR   = (1 << INTF0);
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	8c bb       	out	0x1c, r24	; 28
		EIMSK  = (1 << INT0);
     644:	8d bb       	out	0x1d, r24	; 29

		/* Reception complete, store the received byte if stop bit valid */
		if (SRX_Cached)
     646:	99 23       	and	r25, r25
     648:	e9 f0       	breq	.+58     	; 0x684 <__vector_17+0x8e>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     64a:	e9 e8       	ldi	r30, 0x89	; 137
     64c:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     64e:	a0 81       	ld	r26, Z
     650:	b1 81       	ldd	r27, Z+1	; 0x01
     652:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <RX_Data>
     656:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     658:	80 81       	ld	r24, Z
     65a:	91 81       	ldd	r25, Z+1	; 0x01
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24
     662:	26 81       	ldd	r18, Z+6	; 0x06
     664:	37 81       	ldd	r19, Z+7	; 0x07
     666:	82 17       	cp	r24, r18
     668:	93 07       	cpc	r25, r19
     66a:	21 f4       	brne	.+8      	; 0x674 <__vector_17+0x7e>
			  Buffer->In = Buffer->Start;
     66c:	84 81       	ldd	r24, Z+4	; 0x04
     66e:	95 81       	ldd	r25, Z+5	; 0x05
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     674:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     676:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     678:	81 85       	ldd	r24, Z+9	; 0x09
     67a:	92 85       	ldd	r25, Z+10	; 0x0a
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	92 87       	std	Z+10, r25	; 0x0a
     680:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     682:	2f bf       	out	0x3f, r18	; 63
		  RingBuffer_Insert(&UARTtoUSB_Buffer, RX_Data);
	}
}
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	3f 91       	pop	r19
     692:	2f 91       	pop	r18
     694:	0f 90       	pop	r0
     696:	0b be       	out	0x3b, r0	; 59
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <__vector_32>:

/** ISR to manage the transmission of bits via the software UART. */
ISR(TIMER3_COMPA_vect, ISR_BLOCK)
{
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	0b b6       	in	r0, 0x3b	; 59
     6ae:	0f 92       	push	r0
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	ff 93       	push	r31
	/* Check if transmission has finished */
	if (TX_BitsRemaining)
     6c0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TX_BitsRemaining>
     6c4:	88 23       	and	r24, r24
     6c6:	81 f0       	breq	.+32     	; 0x6e8 <__vector_32+0x46>
	{
		/* Set the TX line to the value of the next bit in the byte to send */
		if (TX_Data & (1 << 0))
     6c8:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <TX_Data>
     6cc:	80 ff       	sbrs	r24, 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__vector_32+0x32>
		  STXPORT &= ~(1 << STX);
     6d0:	59 98       	cbi	0x0b, 1	; 11
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <__vector_32+0x34>
		else
		  STXPORT |=  (1 << STX);
     6d4:	59 9a       	sbi	0x0b, 1	; 11

		/* Shift the transmission byte to move the next bit into position and decrement the bits remaining counter */
		TX_Data >>= 1;
     6d6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <TX_Data>
     6da:	86 95       	lsr	r24
     6dc:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <TX_Data>
		TX_BitsRemaining--;
     6e0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TX_BitsRemaining>
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	2b c0       	rjmp	.+86     	; 0x73e <__vector_32+0x9c>
	}
	else if (!(RX_BitsRemaining) && !(RingBuffer_IsEmpty(&USBtoUART_Buffer)))
     6e8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <RX_BitsRemaining>
     6ec:	81 11       	cpse	r24, r1
     6ee:	29 c0       	rjmp	.+82     	; 0x742 <__vector_32+0xa0>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     6f0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     6f2:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     6f4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <USBtoUART_Buffer+0x9>
     6f8:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <USBtoUART_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     6fc:	2f bf       	out	0x3f, r18	; 63
     6fe:	89 2b       	or	r24, r25
     700:	01 f1       	breq	.+64     	; 0x742 <__vector_32+0xa0>
	{
		/* Start bit - TX line low */
		STXPORT &= ~(1 << STX);
     702:	59 98       	cbi	0x0b, 1	; 11
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     704:	ee e7       	ldi	r30, 0x7E	; 126
     706:	f2 e0       	ldi	r31, 0x02	; 2
		
			uint8_t Data = *Buffer->Out;
     708:	a2 81       	ldd	r26, Z+2	; 0x02
     70a:	b3 81       	ldd	r27, Z+3	; 0x03
     70c:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     70e:	b3 83       	std	Z+3, r27	; 0x03
     710:	a2 83       	std	Z+2, r26	; 0x02
     712:	26 81       	ldd	r18, Z+6	; 0x06
     714:	37 81       	ldd	r19, Z+7	; 0x07
     716:	a2 17       	cp	r26, r18
     718:	b3 07       	cpc	r27, r19
     71a:	21 f4       	brne	.+8      	; 0x724 <__vector_32+0x82>
			  Buffer->Out = Buffer->Start;
     71c:	24 81       	ldd	r18, Z+4	; 0x04
     71e:	35 81       	ldd	r19, Z+5	; 0x05
     720:	33 83       	std	Z+3, r19	; 0x03
     722:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     724:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     726:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     728:	21 85       	ldd	r18, Z+9	; 0x09
     72a:	32 85       	ldd	r19, Z+10	; 0x0a
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	31 09       	sbc	r19, r1
     730:	32 87       	std	Z+10, r19	; 0x0a
     732:	21 87       	std	Z+9, r18	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     734:	9f bf       	out	0x3f, r25	; 63

		/* Transmission complete, get the next byte to send (if available) */
		TX_Data          = ~RingBuffer_Remove(&USBtoUART_Buffer);
     736:	80 95       	com	r24
     738:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <TX_Data>
		TX_BitsRemaining = 9;
     73c:	89 e0       	ldi	r24, 0x09	; 9
     73e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <TX_BitsRemaining>
	}
}
     742:	ff 91       	pop	r31
     744:	ef 91       	pop	r30
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0b be       	out	0x3b, r0	; 59
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_12>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(WDT_vect, ISR_BLOCK)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	8f 93       	push	r24
	TimeoutExpired = true;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	8a bd       	out	0x2a, r24	; 42
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	a8 95       	wdr
     776:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     77a:	88 61       	ori	r24, 0x18	; 24
     77c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     780:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     784:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
}
     786:	8f 91       	pop	r24
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <V2Protocol_Init>:
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     792:	ea e7       	ldi	r30, 0x7A	; 122
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	87 ea       	ldi	r24, 0xA7	; 167
     798:	80 83       	st	Z, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     79a:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     79c:	ae e7       	ldi	r26, 0x7E	; 126
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	8c 91       	ld	r24, X
     7a2:	84 60       	ori	r24, 0x04	; 4
     7a4:	8c 93       	st	X, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     7a6:	82 e4       	ldi	r24, 0x42	; 66
     7a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     7ac:	80 81       	ld	r24, Z
     7ae:	80 64       	ori	r24, 0x40	; 64
     7b0:	80 83       	st	Z, r24
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	V2Params_LoadNonVolatileParamValues();
     7b2:	f8 c0       	rjmp	.+496    	; 0x9a4 <V2Params_LoadNonVolatileParamValues>

000007b4 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7ba:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	uint8_t V2Command = Endpoint_Read_8();

	/* Start the watchdog with timeout interrupt enabled to manage the timeout */
	TimeoutExpired = false;
     7be:	1a bc       	out	0x2a, r1	; 42
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     7c0:	9e e0       	ldi	r25, 0x0E	; 14
     7c2:	88 e1       	ldi	r24, 0x18	; 24
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	a8 95       	wdr
     7ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	wdt_enable(WDTO_1S);
	WDTCSR |= (1 << WDIE);
     7d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7d8:	80 64       	ori	r24, 0x40	; 64
     7da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

	switch (V2Command)
     7de:	c6 30       	cpi	r28, 0x06	; 6
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <V2Protocol_ProcessCommand+0x30>
     7e2:	68 c0       	rjmp	.+208    	; 0x8b4 <V2Protocol_ProcessCommand+0x100>
     7e4:	38 f4       	brcc	.+14     	; 0x7f4 <V2Protocol_ProcessCommand+0x40>
     7e6:	c1 30       	cpi	r28, 0x01	; 1
     7e8:	f1 f0       	breq	.+60     	; 0x826 <V2Protocol_ProcessCommand+0x72>
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <V2Protocol_ProcessCommand+0x3a>
     7ec:	8f c0       	rjmp	.+286    	; 0x90c <V2Protocol_ProcessCommand+0x158>
     7ee:	c4 30       	cpi	r28, 0x04	; 4
     7f0:	b8 f1       	brcs	.+110    	; 0x860 <V2Protocol_ProcessCommand+0xac>
     7f2:	8c c0       	rjmp	.+280    	; 0x90c <V2Protocol_ProcessCommand+0x158>
     7f4:	c0 35       	cpi	r28, 0x50	; 80
     7f6:	09 f4       	brne	.+2      	; 0x7fa <V2Protocol_ProcessCommand+0x46>
     7f8:	87 c0       	rjmp	.+270    	; 0x908 <V2Protocol_ProcessCommand+0x154>
     7fa:	c1 35       	cpi	r28, 0x51	; 81
     7fc:	09 f4       	brne	.+2      	; 0x800 <V2Protocol_ProcessCommand+0x4c>
     7fe:	82 c0       	rjmp	.+260    	; 0x904 <V2Protocol_ProcessCommand+0x150>
     800:	ca 30       	cpi	r28, 0x0A	; 10
     802:	09 f0       	breq	.+2      	; 0x806 <V2Protocol_ProcessCommand+0x52>
     804:	83 c0       	rjmp	.+262    	; 0x90c <V2Protocol_ProcessCommand+0x158>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     806:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     80a:	8b 77       	andi	r24, 0x7B	; 123
     80c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     816:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     81a:	81 60       	ori	r24, 0x01	; 1
     81c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     820:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     824:	6c c0       	rjmp	.+216    	; 0x8fe <V2Protocol_ProcessCommand+0x14a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     826:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     82a:	8b 77       	andi	r24, 0x7B	; 123
     82c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     836:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     83a:	81 60       	ori	r24, 0x01	; 1
     83c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     840:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     844:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     848:	8a e0       	ldi	r24, 0x0A	; 10
     84a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	6a e0       	ldi	r22, 0x0A	; 10
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	8c e6       	ldi	r24, 0x6C	; 108
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Endpoint_Write_Stream_LE>
     85e:	76 c0       	rjmp	.+236    	; 0x94c <V2Protocol_ProcessCommand+0x198>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     860:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     864:	c2 30       	cpi	r28, 0x02	; 2
     866:	11 f4       	brne	.+4      	; 0x86c <V2Protocol_ProcessCommand+0xb8>
     868:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     86c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     870:	8b 77       	andi	r24, 0x7B	; 123
     872:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     87c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     880:	81 60       	ori	r24, 0x01	; 1
     882:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     886:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     88a:	8d 2f       	mov	r24, r29
     88c:	b0 d0       	rcall	.+352    	; 0x9ee <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     88e:	c2 30       	cpi	r28, 0x02	; 2
     890:	41 f4       	brne	.+16     	; 0x8a2 <V2Protocol_ProcessCommand+0xee>
     892:	81 ff       	sbrs	r24, 1
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <V2Protocol_ProcessCommand+0xfc>
     896:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     89a:	61 2f       	mov	r22, r17
     89c:	8d 2f       	mov	r24, r29
     89e:	b7 d0       	rcall	.+366    	; 0xa0e <V2Params_SetParameterValue>
     8a0:	55 c0       	rjmp	.+170    	; 0x94c <V2Protocol_ProcessCommand+0x198>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     8a2:	80 ff       	sbrs	r24, 0
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <V2Protocol_ProcessCommand+0xfc>
     8a6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     8aa:	8d 2f       	mov	r24, r29
     8ac:	a8 d0       	rcall	.+336    	; 0x9fe <V2Params_GetParameterValue>
     8ae:	4c c0       	rjmp	.+152    	; 0x948 <V2Protocol_ProcessCommand+0x194>
     8b0:	80 ec       	ldi	r24, 0xC0	; 192
     8b2:	4a c0       	rjmp	.+148    	; 0x948 <V2Protocol_ProcessCommand+0x194>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	64 e0       	ldi	r22, 0x04	; 4
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	85 e9       	ldi	r24, 0x95	; 149
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8c8:	8b 77       	andi	r24, 0x7B	; 123
     8ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     8d4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     8d8:	81 60       	ori	r24, 0x01	; 1
     8da:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     8de:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <CurrentAddress>
     8e2:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <CurrentAddress+0x1>
     8e6:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <CurrentAddress+0x2>
     8ea:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <CurrentAddress+0x3>
     8ee:	b7 ff       	sbrs	r27, 7
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <V2Protocol_ProcessCommand+0x144>
	  MustLoadExtendedAddress = true;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <MustLoadExtendedAddress>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8f8:	86 e0       	ldi	r24, 0x06	; 6
     8fa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8fe:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     902:	24 c0       	rjmp	.+72     	; 0x94c <V2Protocol_ProcessCommand+0x198>
     904:	dd d1       	rcall	.+954    	; 0xcc0 <XPROGProtocol_SetMode>
			break;
     906:	27 c0       	rjmp	.+78     	; 0x956 <V2Protocol_ProcessCommand+0x1a2>
		case CMD_XPROG:
			XPROGProtocol_Command();
     908:	0b d2       	rcall	.+1046   	; 0xd20 <XPROGProtocol_Command>
     90a:	25 c0       	rjmp	.+74     	; 0x956 <V2Protocol_ProcessCommand+0x1a2>
			break;
     90c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     910:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     914:	80 34       	cpi	r24, 0x40	; 64
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     916:	91 05       	cpc	r25, r1
     918:	39 f4       	brne	.+14     	; 0x928 <V2Protocol_ProcessCommand+0x174>
     91a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     91e:	8b 77       	andi	r24, 0x7B	; 123
     920:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     924:	09 d7       	rcall	.+3602   	; 0x1738 <Endpoint_WaitUntilReady>
     926:	f2 cf       	rjmp	.-28     	; 0x90c <V2Protocol_ProcessCommand+0x158>
     928:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     92c:	8b 77       	andi	r24, 0x7B	; 123
     92e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     932:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     934:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     938:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     942:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     946:	89 ec       	ldi	r24, 0xC9	; 201
     948:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     94c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     950:	8e 77       	andi	r24, 0x7E	; 126
     952:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     956:	0f b6       	in	r0, 0x3f	; 63
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     958:	f8 94       	cli
     95a:	a8 95       	wdr
     95c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     960:	88 61       	ori	r24, 0x18	; 24
     962:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     966:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     96a:	0f be       	out	0x3f, r0	; 63
	}

	/* Disable the timeout management watchdog timer */
	wdt_disable();

	Endpoint_WaitUntilReady();
     96c:	e5 d6       	rcall	.+3530   	; 0x1738 <Endpoint_WaitUntilReady>
     96e:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     970:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     974:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     97e:	df 91       	pop	r29
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	08 95       	ret

00000986 <V2Params_GetParamFromTable>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
     986:	e6 e1       	ldi	r30, 0x16	; 22
     988:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     98a:	90 81       	ld	r25, Z
     98c:	98 17       	cp	r25, r24
     98e:	41 f0       	breq	.+16     	; 0x9a0 <V2Params_GetParamFromTable+0x1a>
		  return CurrTableItem;

		CurrTableItem++;
     990:	33 96       	adiw	r30, 0x03	; 3
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	e4 33       	cpi	r30, 0x34	; 52
     996:	f9 07       	cpc	r31, r25
     998:	c1 f7       	brne	.-16     	; 0x98a <V2Params_GetParamFromTable+0x4>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
     9a0:	cf 01       	movw	r24, r30
}
     9a2:	08 95       	ret

000009a4 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
	/* Target RESET line polarity is a non-volatile value, retrieve current parameter value from EEPROM */
	V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = eeprom_read_byte(&EEPROM_Rest_Polarity);
     9a8:	8e e9       	ldi	r24, 0x9E	; 158
     9aa:	ed df       	rcall	.-38     	; 0x986 <V2Params_GetParamFromTable>
     9ac:	ec 01       	movw	r28, r24
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <eeprom_read_byte>
     9b6:	8a 83       	std	Y+2, r24	; 0x02
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <V2Params_UpdateParamValues>:
 */
void V2Params_UpdateParamValues(void)
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
     9be:	84 e9       	ldi	r24, 0x94	; 148
     9c0:	e2 df       	rcall	.-60     	; 0x986 <V2Params_GetParamFromTable>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     9c2:	ea e7       	ldi	r30, 0x7A	; 122
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	20 81       	ld	r18, Z
     9c8:	20 61       	ori	r18, 0x10	; 16
     9ca:	20 83       	st	Z, r18
				return ADC;
     9cc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     9d0:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     9d4:	62 e4       	ldi	r22, 0x42	; 66
     9d6:	64 9f       	mul	r22, r20
     9d8:	90 01       	movw	r18, r0
     9da:	65 9f       	mul	r22, r21
     9dc:	30 0d       	add	r19, r0
     9de:	11 24       	eor	r1, r1
     9e0:	23 2f       	mov	r18, r19
     9e2:	33 27       	eor	r19, r19
     9e4:	26 95       	lsr	r18
     9e6:	26 95       	lsr	r18
     9e8:	fc 01       	movw	r30, r24
     9ea:	22 83       	std	Z+2, r18	; 0x02
     9ec:	08 95       	ret

000009ee <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     9ee:	cb df       	rcall	.-106    	; 0x986 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	19 f0       	breq	.+6      	; 0x9fa <V2Params_GetParameterPrivileges+0xc>
	  return 0;

	return ParamInfo->ParamPrivileges;
     9f4:	fc 01       	movw	r30, r24
     9f6:	81 81       	ldd	r24, Z+1	; 0x01
     9f8:	08 95       	ret
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     9fa:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamPrivileges;
}
     9fc:	08 95       	ret

000009fe <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     9fe:	c3 df       	rcall	.-122    	; 0x986 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	19 f0       	breq	.+6      	; 0xa0a <V2Params_GetParameterValue+0xc>
	  return 0;

	return ParamInfo->ParamValue;
     a04:	fc 01       	movw	r30, r24
     a06:	82 81       	ldd	r24, Z+2	; 0x02
     a08:	08 95       	ret
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     a0a:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamValue;
}
     a0c:	08 95       	ret

00000a0e <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	d8 2f       	mov	r29, r24
     a14:	c6 2f       	mov	r28, r22
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     a16:	b7 df       	rcall	.-146    	; 0x986 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	59 f0       	breq	.+22     	; 0xa32 <V2Params_SetParameterValue+0x24>
	  return;

	ParamInfo->ParamValue = Value;
     a1c:	fc 01       	movw	r30, r24
     a1e:	c2 83       	std	Z+2, r28	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     a20:	de 39       	cpi	r29, 0x9E	; 158
     a22:	39 f4       	brne	.+14     	; 0xa32 <V2Params_SetParameterValue+0x24>
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     a24:	6c 2f       	mov	r22, r28
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28

	ParamInfo->ParamValue = Value;

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     a2e:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <eeprom_update_byte>
}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	8b 01       	movw	r16, r22
     a3e:	9c 01       	movw	r18, r24
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     a40:	c9 01       	movw	r24, r18
     a42:	b8 01       	movw	r22, r16

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[3];
     a44:	63 2f       	mov	r22, r19
				Data.Bytes[3] = Temp;
     a46:	90 2f       	mov	r25, r16

				Temp = Data.Bytes[1];
     a48:	27 2f       	mov	r18, r23
				Data.Bytes[1] = Data.Bytes[2];
     a4a:	78 2f       	mov	r23, r24
				Data.Bytes[2] = Temp;
     a4c:	82 2f       	mov	r24, r18

				return Data.DWord;
			}
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	c8 50       	subi	r28, 0x08	; 8
     a6e:	d1 40       	sbci	r29, 0x01	; 1
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	68 e0       	ldi	r22, 0x08	; 8
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	ef d7       	rcall	.+4062   	; 0x1a66 <Endpoint_Read_Stream_LE>
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
     a88:	6b 81       	ldd	r22, Y+3	; 0x03
     a8a:	7c 81       	ldd	r23, Y+4	; 0x04
     a8c:	8d 81       	ldd	r24, Y+5	; 0x05
     a8e:	9e 81       	ldd	r25, Y+6	; 0x06
     a90:	d3 df       	rcall	.-90     	; 0xa38 <SwapEndian_32>
     a92:	6b 83       	std	Y+3, r22	; 0x03
     a94:	7c 83       	std	Y+4, r23	; 0x04
     a96:	8d 83       	std	Y+5, r24	; 0x05
     a98:	9e 83       	std	Y+6, r25	; 0x06
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     a9a:	6f 81       	ldd	r22, Y+7	; 0x07
     a9c:	78 85       	ldd	r23, Y+8	; 0x08

				Temp = Data.Bytes[0];
     a9e:	86 2f       	mov	r24, r22
				Data.Bytes[0] = Data.Bytes[1];
     aa0:	67 2f       	mov	r22, r23
				Data.Bytes[1] = Temp;
     aa2:	78 2f       	mov	r23, r24
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
     aa4:	78 87       	std	Y+8, r23	; 0x08
     aa6:	6f 83       	std	Y+7, r22	; 0x07
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	ce 01       	movw	r24, r28
     aae:	09 96       	adiw	r24, 0x09	; 9
     ab0:	da d7       	rcall	.+4020   	; 0x1a66 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     ab2:	8f 81       	ldd	r24, Y+7	; 0x07
     ab4:	98 85       	ldd	r25, Y+8	; 0x08
     ab6:	09 96       	adiw	r24, 0x09	; 9
     ab8:	8f 73       	andi	r24, 0x3F	; 63
     aba:	99 27       	eor	r25, r25
     abc:	89 2b       	or	r24, r25
     abe:	31 f4       	brne	.+12     	; 0xacc <XPROGProtocol_WriteMemory+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ac0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ac4:	8b 77       	andi	r24, 0x7B	; 123
     ac6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     aca:	36 d6       	rcall	.+3180   	; 0x1738 <Endpoint_WaitUntilReady>
     acc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ad0:	8b 77       	andi	r24, 0x7B	; 123
     ad2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     adc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     ae6:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <XPROG_SelectedProtocol>
     aea:	81 11       	cpse	r24, r1
     aec:	31 c0       	rjmp	.+98     	; 0xb50 <XPROGProtocol_WriteMemory+0xfc>
     aee:	29 81       	ldd	r18, Y+1	; 0x01
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	4b 81       	ldd	r20, Y+3	; 0x03
     af4:	5c 81       	ldd	r21, Y+4	; 0x04
     af6:	6d 81       	ldd	r22, Y+5	; 0x05
     af8:	7e 81       	ldd	r23, Y+6	; 0x06
     afa:	26 30       	cpi	r18, 0x06	; 6
     afc:	a8 f4       	brcc	.+42     	; 0xb28 <XPROGProtocol_WriteMemory+0xd4>
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	e2 5b       	subi	r30, 0xB2	; 178
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	80 81       	ld	r24, Z
     b08:	f9 01       	movw	r30, r18
     b0a:	e8 5b       	subi	r30, 0xB8	; 184
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	90 81       	ld	r25, Z
     b10:	f9 01       	movw	r30, r18
     b12:	ee 5b       	subi	r30, 0xBE	; 190
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	e0 81       	ld	r30, Z
     b18:	d9 01       	movw	r26, r18
     b1a:	a4 5c       	subi	r26, 0xC4	; 196
     b1c:	be 4f       	sbci	r27, 0xFE	; 254
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     b1e:	2c 91       	ld	r18, X
     b20:	22 23       	and	r18, r18
     b22:	09 f4       	brne	.+2      	; 0xb26 <XPROGProtocol_WriteMemory+0xd2>
     b24:	3e c0       	rjmp	.+124    	; 0xba2 <XPROGProtocol_WriteMemory+0x14e>
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <XPROGProtocol_WriteMemory+0xda>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     b28:	e6 e2       	ldi	r30, 0x26	; 38
     b2a:	93 e2       	ldi	r25, 0x23	; 35
     b2c:	8e e2       	ldi	r24, 0x2E	; 46
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     b2e:	af 80       	ldd	r10, Y+7	; 0x07
     b30:	b8 84       	ldd	r11, Y+8	; 0x08
     b32:	9e 01       	movw	r18, r28
     b34:	27 5f       	subi	r18, 0xF7	; 247
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	69 01       	movw	r12, r18
     b3a:	7a 01       	movw	r14, r20
     b3c:	8b 01       	movw	r16, r22
     b3e:	2a 81       	ldd	r18, Y+2	; 0x02
     b40:	48 2f       	mov	r20, r24
     b42:	6e 2f       	mov	r22, r30
     b44:	89 2f       	mov	r24, r25
     b46:	f7 d3       	rcall	.+2030   	; 0x1336 <XMEGANVM_WritePageMemory>
     b48:	81 11       	cpse	r24, r1
     b4a:	0b c0       	rjmp	.+22     	; 0xb62 <XPROGProtocol_WriteMemory+0x10e>
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData[0]))))
		{
			ReturnStatus = XPRG_ERR_TIMEOUT;
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <XPROGProtocol_WriteMemory+0x110>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
     b50:	4f 81       	ldd	r20, Y+7	; 0x07
     b52:	58 85       	ldd	r21, Y+8	; 0x08
     b54:	be 01       	movw	r22, r28
     b56:	67 5f       	subi	r22, 0xF7	; 247
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	64 d5       	rcall	.+2760   	; 0x1628 <TINYNVM_WriteMemory>
     b60:	f3 cf       	rjmp	.-26     	; 0xb48 <XPROGProtocol_WriteMemory+0xf4>
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     b62:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b64:	90 e5       	ldi	r25, 0x50	; 80
     b66:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b70:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b78:	8e 77       	andi	r24, 0x7E	; 126
     b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
     b7e:	c8 5f       	subi	r28, 0xF8	; 248
     b80:	de 4f       	sbci	r29, 0xFE	; 254
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
     ba0:	08 95       	ret
     ba2:	29 85       	ldd	r18, Y+9	; 0x09
     ba4:	a3 d3       	rcall	.+1862   	; 0x12ec <XMEGANVM_WriteByteMemory>
     ba6:	d0 cf       	rjmp	.-96     	; 0xb48 <XPROGProtocol_WriteMemory+0xf4>

00000ba8 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	c7 50       	subi	r28, 0x07	; 7
     bb2:	d1 40       	sbci	r29, 0x01	; 1
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	67 e0       	ldi	r22, 0x07	; 7
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	9e 4f       	sbci	r25, 0xFE	; 254
     bcc:	4c d7       	rcall	.+3736   	; 0x1a66 <Endpoint_Read_Stream_LE>
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
     bce:	ce 5f       	subi	r28, 0xFE	; 254
     bd0:	de 4f       	sbci	r29, 0xFE	; 254
     bd2:	68 81       	ld	r22, Y
     bd4:	79 81       	ldd	r23, Y+1	; 0x01
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	c2 50       	subi	r28, 0x02	; 2
     bdc:	d1 40       	sbci	r29, 0x01	; 1
     bde:	2c df       	rcall	.-424    	; 0xa38 <SwapEndian_32>
     be0:	ce 5f       	subi	r28, 0xFE	; 254
     be2:	de 4f       	sbci	r29, 0xFE	; 254
     be4:	68 83       	st	Y, r22
     be6:	79 83       	std	Y+1, r23	; 0x01
     be8:	8a 83       	std	Y+2, r24	; 0x02
     bea:	9b 83       	std	Y+3, r25	; 0x03
     bec:	c2 50       	subi	r28, 0x02	; 2
     bee:	d1 40       	sbci	r29, 0x01	; 1
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     bf0:	ca 5f       	subi	r28, 0xFA	; 250
     bf2:	de 4f       	sbci	r29, 0xFE	; 254
     bf4:	88 81       	ld	r24, Y
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	c6 50       	subi	r28, 0x06	; 6
     bfa:	d1 40       	sbci	r29, 0x01	; 1

				Temp = Data.Bytes[0];
     bfc:	28 2f       	mov	r18, r24
				Data.Bytes[0] = Data.Bytes[1];
     bfe:	89 2f       	mov	r24, r25
				Data.Bytes[1] = Temp;
     c00:	92 2f       	mov	r25, r18
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
     c02:	ca 5f       	subi	r28, 0xFA	; 250
     c04:	de 4f       	sbci	r29, 0xFE	; 254
     c06:	99 83       	std	Y+1, r25	; 0x01
     c08:	88 83       	st	Y, r24
     c0a:	c6 50       	subi	r28, 0x06	; 6
     c0c:	d1 40       	sbci	r29, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c12:	8b 77       	andi	r24, 0x7B	; 123
     c14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     c1e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     c28:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <XPROG_SelectedProtocol>
     c2c:	ca 5f       	subi	r28, 0xFA	; 250
     c2e:	de 4f       	sbci	r29, 0xFE	; 254
     c30:	28 81       	ld	r18, Y
     c32:	39 81       	ldd	r19, Y+1	; 0x01
     c34:	c6 50       	subi	r28, 0x06	; 6
     c36:	d1 40       	sbci	r29, 0x01	; 1
     c38:	81 11       	cpse	r24, r1
     c3a:	12 c0       	rjmp	.+36     	; 0xc60 <XPROGProtocol_ReadMemory+0xb8>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     c3c:	ce 5f       	subi	r28, 0xFE	; 254
     c3e:	de 4f       	sbci	r29, 0xFE	; 254
     c40:	68 81       	ld	r22, Y
     c42:	79 81       	ldd	r23, Y+1	; 0x01
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	c2 50       	subi	r28, 0x02	; 2
     c4a:	d1 40       	sbci	r29, 0x01	; 1
     c4c:	ae 01       	movw	r20, r28
     c4e:	4f 5f       	subi	r20, 0xFF	; 255
     c50:	5f 4f       	sbci	r21, 0xFF	; 255
     c52:	13 d3       	rcall	.+1574   	; 0x127a <XMEGANVM_ReadMemory>
     c54:	88 23       	and	r24, r24
     c56:	11 f0       	breq	.+4      	; 0xc5c <XPROGProtocol_ReadMemory+0xb4>
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <XPROGProtocol_ReadMemory+0xd0>

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	0c c0       	rjmp	.+24     	; 0xc78 <XPROGProtocol_ReadMemory+0xd0>
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     c60:	a9 01       	movw	r20, r18
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	ce 5f       	subi	r28, 0xFE	; 254
     c6a:	de 4f       	sbci	r29, 0xFE	; 254
     c6c:	88 81       	ld	r24, Y
     c6e:	99 81       	ldd	r25, Y+1	; 0x01
     c70:	c2 50       	subi	r28, 0x02	; 2
     c72:	d1 40       	sbci	r29, 0x01	; 1
     c74:	ae d4       	rcall	.+2396   	; 0x15d2 <TINYNVM_ReadMemory>
     c76:	ee cf       	rjmp	.-36     	; 0xc54 <XPROGProtocol_ReadMemory+0xac>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c78:	90 e5       	ldi	r25, 0x50	; 80
     c7a:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c7e:	95 e0       	ldi	r25, 0x05	; 5
     c80:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c84:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     c88:	81 11       	cpse	r24, r1
     c8a:	0b c0       	rjmp	.+22     	; 0xca2 <XPROGProtocol_ReadMemory+0xfa>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
     c8c:	ca 5f       	subi	r28, 0xFA	; 250
     c8e:	de 4f       	sbci	r29, 0xFE	; 254
     c90:	68 81       	ld	r22, Y
     c92:	79 81       	ldd	r23, Y+1	; 0x01
     c94:	c6 50       	subi	r28, 0x06	; 6
     c96:	d1 40       	sbci	r29, 0x01	; 1
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	98 d6       	rcall	.+3376   	; 0x19d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ca6:	8e 77       	andi	r24, 0x7E	; 126
     ca8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_ClearIN();
}
     cac:	c9 5f       	subi	r28, 0xF9	; 249
     cae:	de 4f       	sbci	r29, 0xFE	; 254
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	1f 92       	push	r1
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	c7 d6       	rcall	.+3470   	; 0x1a66 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cdc:	8b 77       	andi	r24, 0x7B	; 123
     cde:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ce8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <XPROG_SelectedProtocol>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cf8:	81 e5       	ldi	r24, 0x51	; 81
     cfa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	11 f4       	brne	.+4      	; 0xd08 <XPROGProtocol_SetMode+0x48>
     d04:	80 ec       	ldi	r24, 0xC0	; 192
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <XPROGProtocol_SetMode+0x4a>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d12:	8e 77       	andi	r24, 0x7E	; 126
     d14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();
}
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 d0       	rcall	.+0      	; 0xd26 <XPROGProtocol_Command+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <XPROGProtocol_Command+0x8>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <XPROGProtocol_Command+0xa>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d2e:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
     d32:	8e 2f       	mov	r24, r30
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	e7 30       	cpi	r30, 0x07	; 7
     d3c:	f1 05       	cpc	r31, r1
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <XPROGProtocol_Command+0x22>
     d40:	25 c1       	rjmp	.+586    	; 0xf8c <XPROGProtocol_Command+0x26c>
     d42:	e4 5b       	subi	r30, 0xB4	; 180
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__tablejump2__>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d4e:	8b 77       	andi	r24, 0x7B	; 123
     d50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d5a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     d5e:	81 60       	ori	r24, 0x01	; 1
     d60:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d64:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <XPROG_SelectedProtocol>
     d68:	81 11       	cpse	r24, r1
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <XPROGProtocol_Command+0x50>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
     d6c:	0b d2       	rcall	.+1046   	; 0x1184 <XMEGANVM_EnablePDI>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <XPROGProtocol_Command+0x5a>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
     d70:	82 30       	cpi	r24, 0x02	; 2
	  NVMBusEnabled = TINYNVM_EnableTPI();
     d72:	11 f4       	brne	.+4      	; 0xd78 <XPROGProtocol_Command+0x58>
     d74:	f1 d3       	rcall	.+2018   	; 0x1558 <TINYNVM_EnableTPI>
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <XPROGProtocol_Command+0x5a>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
     d78:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d7a:	90 e5       	ldi	r25, 0x50	; 80
     d7c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
	  NVMBusEnabled = TINYNVM_EnableTPI();

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_ENTER_PROGMODE);
	Endpoint_Write_8(NVMBusEnabled ? XPRG_ERR_OK : XPRG_ERR_FAILED);
     d86:	98 27       	eor	r25, r24
     d88:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d8c:	fa c0       	rjmp	.+500    	; 0xf82 <XPROGProtocol_Command+0x262>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d92:	8b 77       	andi	r24, 0x7B	; 123
     d94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d9e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     da8:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <XPROG_SelectedProtocol>
     dac:	81 11       	cpse	r24, r1
	  XMEGANVM_DisablePDI();
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <XPROGProtocol_Command+0x94>
     db0:	24 d2       	rcall	.+1096   	; 0x11fa <XMEGANVM_DisablePDI>
	else
	  TINYNVM_DisableTPI();
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <XPROGProtocol_Command+0x96>
     db4:	08 d4       	rcall	.+2064   	; 0x15c6 <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     db6:	80 e5       	ldi	r24, 0x50	; 80
     db8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     dc2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     dc6:	dd c0       	rjmp	.+442    	; 0xf82 <XPROGProtocol_Command+0x262>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	65 e0       	ldi	r22, 0x05	; 5
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	48 d6       	rcall	.+3216   	; 0x1a66 <Endpoint_Read_Stream_LE>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
     dd6:	6a 81       	ldd	r22, Y+2	; 0x02
     dd8:	7b 81       	ldd	r23, Y+3	; 0x03
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	2c de       	rcall	.-936    	; 0xa38 <SwapEndian_32>
     de0:	6a 83       	std	Y+2, r22	; 0x02
     de2:	7b 83       	std	Y+3, r23	; 0x03
     de4:	8c 83       	std	Y+4, r24	; 0x04
     de6:	9d 83       	std	Y+5, r25	; 0x05
     de8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dec:	8b 77       	andi	r24, 0x7B	; 123
     dee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     df2:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     df4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     df8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e02:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <XPROG_SelectedProtocol>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	81 11       	cpse	r24, r1
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <XPROGProtocol_Command+0x114>
     e0c:	e1 50       	subi	r30, 0x01	; 1
     e0e:	e8 30       	cpi	r30, 0x08	; 8
     e10:	28 f4       	brcc	.+10     	; 0xe1c <XPROGProtocol_Command+0xfc>
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	ec 5a       	subi	r30, 0xAC	; 172
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	80 81       	ld	r24, Z
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <XPROGProtocol_Command+0xfe>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
     e1c:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     e1e:	4a 81       	ldd	r20, Y+2	; 0x02
     e20:	5b 81       	ldd	r21, Y+3	; 0x03
     e22:	6c 81       	ldd	r22, Y+4	; 0x04
     e24:	7d 81       	ldd	r23, Y+5	; 0x05
     e26:	f9 d2       	rcall	.+1522   	; 0x141a <XMEGANVM_EraseMemory>
     e28:	88 23       	and	r24, r24
     e2a:	11 f0       	breq	.+4      	; 0xe30 <XPROGProtocol_Command+0x110>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <XPROGProtocol_Command+0x126>
     e30:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <XPROGProtocol_Command+0x126>
     e34:	e1 30       	cpi	r30, 0x01	; 1
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
     e36:	11 f0       	breq	.+4      	; 0xe3c <XPROGProtocol_Command+0x11c>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
     e38:	84 e1       	ldi	r24, 0x14	; 20
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <XPROGProtocol_Command+0x11e>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
     e3c:	80 e1       	ldi	r24, 0x10	; 16
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     e3e:	6a 81       	ldd	r22, Y+2	; 0x02
     e40:	7b 81       	ldd	r23, Y+3	; 0x03
     e42:	2d d4       	rcall	.+2138   	; 0x169e <TINYNVM_EraseMemory>
     e44:	f1 cf       	rjmp	.-30     	; 0xe28 <XPROGProtocol_Command+0x108>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e46:	90 e5       	ldi	r25, 0x50	; 80
     e48:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	95 c0       	rjmp	.+298    	; 0xf7a <XPROGProtocol_Command+0x25a>
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
     e50:	01 de       	rcall	.-1022   	; 0xa54 <XPROGProtocol_WriteMemory>
     e52:	9c c0       	rjmp	.+312    	; 0xf8c <XPROGProtocol_Command+0x26c>
			break;
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
     e54:	a9 de       	rcall	.-686    	; 0xba8 <XPROGProtocol_ReadMemory>
     e56:	9a c0       	rjmp	.+308    	; 0xf8c <XPROGProtocol_Command+0x26c>
			break;
     e58:	40 e0       	ldi	r20, 0x00	; 0
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	ce 01       	movw	r24, r28
     e62:	06 96       	adiw	r24, 0x06	; 6
     e64:	00 d6       	rcall	.+3072   	; 0x1a66 <Endpoint_Read_Stream_LE>
     e66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e6a:	8b 77       	andi	r24, 0x7B	; 123
     e6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e76:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e7a:	81 60       	ori	r24, 0x01	; 1
     e7c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e80:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <XPROG_SelectedProtocol>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     e84:	81 11       	cpse	r24, r1
     e86:	12 c0       	rjmp	.+36     	; 0xeac <XPROGProtocol_Command+0x18c>
     e88:	8e 81       	ldd	r24, Y+6	; 0x06
     e8a:	81 30       	cpi	r24, 0x01	; 1
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
     e8c:	31 f0       	breq	.+12     	; 0xe9a <XPROGProtocol_Command+0x17a>
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	11 f4       	brne	.+4      	; 0xe96 <XPROGProtocol_Command+0x176>
     e92:	89 e3       	ldi	r24, 0x39	; 57
		{
			case XPRG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
				break;
			case XPRG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <XPROGProtocol_Command+0x17c>
     e96:	88 e7       	ldi	r24, 0x78	; 120
				break;
			default:
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <XPROGProtocol_Command+0x17c>
     e9a:	88 e3       	ldi	r24, 0x38	; 56

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
		{
			case XPRG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
     e9c:	be 01       	movw	r22, r28
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	b5 d1       	rcall	.+874    	; 0x120e <XMEGANVM_GetMemoryCRC>
     ea4:	81 11       	cpse	r24, r1
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <XPROGProtocol_Command+0x190>
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <XPROGProtocol_Command+0x192>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <XPROGProtocol_Command+0x192>
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPRG_ERR_FAILED;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e5       	ldi	r25, 0x50	; 80
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     eb4:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eb8:	96 e0       	ldi	r25, 0x06	; 6
     eba:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ebe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ec2:	81 11       	cpse	r24, r1
     ec4:	5e c0       	rjmp	.+188    	; 0xf82 <XPROGProtocol_Command+0x262>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
	{
		Endpoint_Write_8(MemoryCRC >> 16);
     eca:	ab 81       	ldd	r26, Y+3	; 0x03
     ecc:	bc 81       	ldd	r27, Y+4	; 0x04
     ece:	cd 01       	movw	r24, r26
     ed0:	aa 27       	eor	r26, r26
     ed2:	bb 27       	eor	r27, r27
     ed4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
     edc:	ab 81       	ldd	r26, Y+3	; 0x03
     ede:	bc 81       	ldd	r27, Y+4	; 0x04
     ee0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ee4:	89 2f       	mov	r24, r25
     ee6:	99 27       	eor	r25, r25
				UEDATX = (Data >> 8);
     ee8:	4a c0       	rjmp	.+148    	; 0xf7e <XPROGProtocol_Command+0x25e>
     eea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	09 f1       	breq	.+66     	; 0xf34 <XPROGProtocol_Command+0x214>
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     ef2:	b8 f4       	brcc	.+46     	; 0xf22 <XPROGProtocol_Command+0x202>
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	79 f5       	brne	.+94     	; 0xf56 <XPROGProtocol_Command+0x236>
     ef8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
     efc:	b2 2f       	mov	r27, r18
     efe:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
     f02:	a2 2f       	mov	r26, r18
     f04:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
     f08:	92 2f       	mov	r25, r18
     f0a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[0] = UEDATX;
     f0e:	82 2f       	mov	r24, r18
     f10:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <XPROG_Param_NVMBase>
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
     f14:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <XPROG_Param_NVMBase+0x1>
     f18:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <XPROG_Param_NVMBase+0x2>
     f1c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <XPROG_Param_NVMBase+0x3>
     f20:	18 c0       	rjmp	.+48     	; 0xf52 <XPROGProtocol_Command+0x232>
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	91 f0       	breq	.+36     	; 0xf4a <XPROGProtocol_Command+0x22a>
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	b1 f4       	brne	.+44     	; 0xf56 <XPROGProtocol_Command+0x236>
     f2a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f2e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <XPROG_Param_NVMCSRRegAddr>
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <XPROGProtocol_Command+0x232>
     f34:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
     f38:	92 2f       	mov	r25, r18
     f3a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[0] = UEDATX;
     f3e:	82 2f       	mov	r24, r18
     f40:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <XPROG_Param_EEPageSize+0x1>
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize = Endpoint_Read_16_BE();
     f44:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <XPROG_Param_EEPageSize>
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <XPROGProtocol_Command+0x232>
     f4a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f4e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <XPROG_Param_NVMCMDRegAddr>
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <XPROGProtocol_Command+0x238>
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f5c:	9b 77       	andi	r25, 0x7B	; 123
     f5e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f68:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     f6c:	91 60       	ori	r25, 0x01	; 1
     f6e:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f72:	90 e5       	ldi	r25, 0x50	; 80
     f74:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f78:	97 e0       	ldi	r25, 0x07	; 7
     f7a:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f7e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f86:	8e 77       	andi	r24, 0x7E	; 126
     f88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f8c:	26 96       	adiw	r28, 0x06	; 6
     f8e:	0f b6       	in	r0, 0x3f	; 63
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <XPROGTarget_SetTxMode>:
		while (!(PIND & (1 << 5)));
	}
}

static void XPROGTarget_SetTxMode(void)
{
     f9e:	8c e0       	ldi	r24, 0x0C	; 12
    /* Need to do nothing for a full frame to send a BREAK - only one cycle should be needed, however
	 * there are reports that sometimes the interface will get stuck in some environments. */
    for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    {
        /* Wait for a full cycle of the clock */
        while (PIND & (1 << 5));
     fa0:	4d 99       	sbic	0x09, 5	; 9
     fa2:	fe cf       	rjmp	.-4      	; 0xfa0 <XPROGTarget_SetTxMode+0x2>
        while (!(PIND & (1 << 5)));
     fa4:	4d 9b       	sbis	0x09, 5	; 9
     fa6:	fe cf       	rjmp	.-4      	; 0xfa4 <XPROGTarget_SetTxMode+0x6>
     fa8:	81 50       	subi	r24, 0x01	; 1

static void XPROGTarget_SetTxMode(void)
{
    /* Need to do nothing for a full frame to send a BREAK - only one cycle should be needed, however
	 * there are reports that sometimes the interface will get stuck in some environments. */
    for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
     faa:	d1 f7       	brne	.-12     	; 0xfa0 <XPROGTarget_SetTxMode+0x2>
        /* Wait for a full cycle of the clock */
        while (PIND & (1 << 5));
        while (!(PIND & (1 << 5)));
    }

	PORTD  |=  (1 << 3);
     fac:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
     fae:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
     fb0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     fb4:	8f 7e       	andi	r24, 0xEF	; 239
     fb6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1B |=  (1 << TXEN1);
     fba:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     fbe:	88 60       	ori	r24, 0x08	; 8
     fc0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

	IsSending = true;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <IsSending>
     fca:	08 95       	ret

00000fcc <XPROGTarget_SetRxMode>:
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
     fcc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     fd0:	86 ff       	sbrs	r24, 6
     fd2:	fc cf       	rjmp	.-8      	; 0xfcc <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
     fd4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     fd8:	80 64       	ori	r24, 0x40	; 64
     fda:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

	UCSR1B &= ~(1 << TXEN1);
     fde:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     fe2:	87 7f       	andi	r24, 0xF7	; 247
     fe4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1B |=  (1 << RXEN1);
     fe8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     fec:	80 61       	ori	r24, 0x10	; 16
     fee:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

	DDRD   &= ~(1 << 3);
     ff2:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
     ff4:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
     ff6:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <IsSending>
     ffa:	08 95       	ret

00000ffc <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
     ffc:	e7 df       	rcall	.-50     	; 0xfcc <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
     ffe:	80 ec       	ldi	r24, 0xC0	; 192
    1000:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B  = 0;
    1004:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C  = 0;
    1008:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    100c:	8a b1       	in	r24, 0x0a	; 10
    100e:	87 7d       	andi	r24, 0xD7	; 215
    1010:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1012:	8b b1       	in	r24, 0x0b	; 11
    1014:	83 7d       	andi	r24, 0xD3	; 211
    1016:	8b b9       	out	0x0b, r24	; 11
    1018:	08 95       	ret

0000101a <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    101a:	d8 df       	rcall	.-80     	; 0xfcc <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    101c:	e8 ec       	ldi	r30, 0xC8	; 200
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 6c       	ori	r24, 0xC0	; 192
    1024:	80 83       	st	Z, r24
	UCSR1B  = 0;
    1026:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C  = 0;
    102a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    102e:	8a b1       	in	r24, 0x0a	; 10
    1030:	87 7d       	andi	r24, 0xD7	; 215
    1032:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1034:	8b b1       	in	r24, 0x0b	; 11
    1036:	83 7d       	andi	r24, 0xD3	; 211
    1038:	8b b9       	out	0x0b, r24	; 11
	
	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    103a:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    103c:	2c 98       	cbi	0x05, 4	; 5
    103e:	08 95       	ret

00001040 <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    1040:	cf 93       	push	r28
    1042:	c8 2f       	mov	r28, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1044:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <IsSending>
    1048:	81 11       	cpse	r24, r1
    104a:	01 c0       	rjmp	.+2      	; 0x104e <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
    104c:	a8 df       	rcall	.-176    	; 0xf9e <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    104e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1052:	85 ff       	sbrs	r24, 5
    1054:	fc cf       	rjmp	.-8      	; 0x104e <XPROGTarget_SendByte+0xe>
	UCSR1A |= (1 << TXC1);
    1056:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UDR1    = Byte;
    1060:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
}
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    1068:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <IsSending>
    106c:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    106e:	ae df       	rcall	.-164    	; 0xfcc <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && !(TimeoutExpired));
    1070:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1074:	87 fd       	sbrc	r24, 7
    1076:	03 c0       	rjmp	.+6      	; 0x107e <XPROGTarget_ReceiveByte+0x16>
    1078:	8a b5       	in	r24, 0x2a	; 42
    107a:	88 23       	and	r24, r24
    107c:	c9 f3       	breq	.-14     	; 0x1070 <XPROGTarget_ReceiveByte+0x8>

	return UDR1;
    107e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
}
    1082:	08 95       	ret

00001084 <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1084:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <IsSending>
    1088:	81 11       	cpse	r24, r1
    108a:	01 c0       	rjmp	.+2      	; 0x108e <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    108c:	88 df       	rcall	.-240    	; 0xf9e <XPROGTarget_SetTxMode>
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    108e:	8c e0       	ldi	r24, 0x0C	; 12
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    1090:	4d 99       	sbic	0x09, 5	; 9
    1092:	fe cf       	rjmp	.-4      	; 0x1090 <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    1094:	4d 9b       	sbis	0x09, 5	; 9
    1096:	fe cf       	rjmp	.-4      	; 0x1094 <XPROGTarget_SendIdle+0x10>
    1098:	81 50       	subi	r24, 0x01	; 1
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    109a:	d1 f7       	brne	.-12     	; 0x1090 <XPROGTarget_SendIdle+0xc>
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
	}
}
    109c:	08 95       	ret

0000109e <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    109e:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <IsSending>

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    10a2:	8a b1       	in	r24, 0x0a	; 10
    10a4:	88 62       	ori	r24, 0x28	; 40
    10a6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    10a8:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    10aa:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	8a 95       	dec	r24
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <XPROGTarget_EnableTargetPDI+0x10>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <XPROGTarget_EnableTargetPDI+0x16>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    10bc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = (1 << TXEN1);
    10c0:	88 e0       	ldi	r24, 0x08	; 8
    10c2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    10c6:	8f e6       	ldi	r24, 0x6F	; 111
    10c8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    10cc:	db df       	rcall	.-74     	; 0x1084 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
    10ce:	da cf       	rjmp	.-76     	; 0x1084 <XPROGTarget_SendIdle>

000010d0 <XPROGTarget_EnableTargetTPI>:
    10d0:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <IsSending>
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    10d4:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10d6:	2c 98       	cbi	0x05, 4	; 5
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	8a 95       	dec	r24
    10dc:	f1 f7       	brne	.-4      	; 0x10da <XPROGTarget_EnableTargetTPI+0xa>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <XPROGTarget_EnableTargetTPI+0x10>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    10e0:	8a b1       	in	r24, 0x0a	; 10
    10e2:	88 62       	ori	r24, 0x28	; 40
    10e4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    10e6:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    10e8:	8f e0       	ldi	r24, 0x0F	; 15
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    10f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = (1 << TXEN1);
    10f4:	88 e0       	ldi	r24, 0x08	; 8
    10f6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    10fa:	8f e6       	ldi	r24, 0x6F	; 111
    10fc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1100:	c1 df       	rcall	.-126    	; 0x1084 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
    1102:	c0 cf       	rjmp	.-128    	; 0x1084 <XPROGTarget_SendIdle>

00001104 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	6b 01       	movw	r12, r22
    110e:	7c 01       	movw	r14, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    1110:	86 2f       	mov	r24, r22
    1112:	96 df       	rcall	.-212    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1114:	8d 2d       	mov	r24, r13
    1116:	94 df       	rcall	.-216    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    1118:	8e 2d       	mov	r24, r14
    111a:	92 df       	rcall	.-220    	; 0x1040 <XPROGTarget_SendByte>
    111c:	8f 2d       	mov	r24, r15
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    111e:	ff 90       	pop	r15
}
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
{
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1126:	8c cf       	rjmp	.-232    	; 0x1040 <XPROGTarget_SendByte>

00001128 <XMEGANVM_SendNVMRegAddress>:
    1128:	0f 93       	push	r16
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
    112a:	1f 93       	push	r17
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    112c:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <XPROG_Param_NVMBase>
    1130:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <XPROG_Param_NVMBase+0x1>
    1134:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <XPROG_Param_NVMBase+0x2>
    1138:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <XPROG_Param_NVMBase+0x3>
    113c:	8a 01       	movw	r16, r20
    113e:	9b 01       	movw	r18, r22
    1140:	08 2b       	or	r16, r24
    1142:	c9 01       	movw	r24, r18
    1144:	b8 01       	movw	r22, r16
}
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    114a:	dc cf       	rjmp	.-72     	; 0x1104 <XMEGANVM_SendAddress>

0000114c <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	78 df       	rcall	.-272    	; 0x1040 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1150:	8b df       	rcall	.-234    	; 0x1068 <XPROGTarget_ReceiveByte>
    1152:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1154:	91 11       	cpse	r25, r1
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <XMEGANVM_WaitWhileNVMBusBusy+0x14>
    1158:	81 ff       	sbrs	r24, 1
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    115a:	f8 cf       	rjmp	.-16     	; 0x114c <XMEGANVM_WaitWhileNVMBusBusy>
    115c:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    115e:	08 95       	ret
    1160:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    1162:	08 95       	ret

00001164 <XMEGANVM_WaitWhileNVMControllerBusy>:

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    1164:	8b e6       	ldi	r24, 0x6B	; 107
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1166:	6c df       	rcall	.-296    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1168:	8f e0       	ldi	r24, 0x0F	; 15
    116a:	de df       	rcall	.-68     	; 0x1128 <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	68 df       	rcall	.-304    	; 0x1040 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1170:	7b df       	rcall	.-266    	; 0x1068 <XPROGTarget_ReceiveByte>
    1172:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1174:	91 11       	cpse	r25, r1
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
    1178:	87 fd       	sbrc	r24, 7
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    117a:	f8 cf       	rjmp	.-16     	; 0x116c <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    117c:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    117e:	08 95       	ret
    1180:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    1182:	08 95       	ret

00001184 <XMEGANVM_EnablePDI>:

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1184:	ef 92       	push	r14
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	28 97       	sbiw	r28, 0x08	; 8
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    11a0:	7e df       	rcall	.-260    	; 0x109e <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    11a2:	81 ec       	ldi	r24, 0xC1	; 193
    11a4:	4d df       	rcall	.-358    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    11a6:	89 e5       	ldi	r24, 0x59	; 89
    11a8:	4b df       	rcall	.-362    	; 0x1040 <XPROGTarget_SendByte>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    11aa:	82 ec       	ldi	r24, 0xC2	; 194
    11ac:	49 df       	rcall	.-366    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	47 df       	rcall	.-370    	; 0x1040 <XPROGTarget_SendByte>
    11b2:	80 ee       	ldi	r24, 0xE0	; 224

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    11b4:	45 df       	rcall	.-374    	; 0x1040 <XPROGTarget_SendByte>
    11b6:	8e 01       	movw	r16, r28
    11b8:	07 5f       	subi	r16, 0xF7	; 247
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	7c 01       	movw	r14, r24
    11c2:	88 e0       	ldi	r24, 0x08	; 8
    11c4:	ec e5       	ldi	r30, 0x5C	; 92
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	d7 01       	movw	r26, r14
    11ca:	01 90       	ld	r0, Z+
    11cc:	0d 92       	st	X+, r0
    11ce:	8a 95       	dec	r24
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <XMEGANVM_EnablePDI+0x46>
    11d2:	f8 01       	movw	r30, r16
    11d4:	82 91       	ld	r24, -Z
    11d6:	8f 01       	movw	r16, r30
    11d8:	33 df       	rcall	.-410    	; 0x1040 <XPROGTarget_SendByte>
    11da:	0e 15       	cp	r16, r14
    11dc:	1f 05       	cpc	r17, r15
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    11de:	89 f7       	brne	.-30     	; 0x11c2 <XMEGANVM_EnablePDI+0x3e>
    11e0:	28 96       	adiw	r28, 0x08	; 8
    11e2:	0f b6       	in	r0, 0x3f	; 63
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
}
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	a9 cf       	rjmp	.-174    	; 0x114c <XMEGANVM_WaitWhileNVMBusBusy>

000011fa <XMEGANVM_DisablePDI>:
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    11fa:	a8 df       	rcall	.-176    	; 0x114c <XMEGANVM_WaitWhileNVMBusBusy>
    11fc:	81 ec       	ldi	r24, 0xC1	; 193
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();

	/* Clear the RESET key in the RESET PDI register to allow the XMEGA to run */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    11fe:	20 df       	rcall	.-448    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	1e df       	rcall	.-452    	; 0x1040 <XPROGTarget_SendByte>

	/* Do it twice to make sure it takes effect (silicon bug?) */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1204:	81 ec       	ldi	r24, 0xC1	; 193
	XPROGTarget_SendByte(0x00);
    1206:	1c df       	rcall	.-456    	; 0x1040 <XPROGTarget_SendByte>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	1a df       	rcall	.-460    	; 0x1040 <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetPDI();
    120c:	f7 ce       	rjmp	.-530    	; 0xffc <XPROGTarget_DisableTargetPDI>

0000120e <XMEGANVM_GetMemoryCRC>:
    120e:	0f 93       	push	r16
 *  \param[out] CRCDest     CRC Destination when read from the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand, uint32_t* const CRCDest)
{
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	18 2f       	mov	r17, r24
    1218:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    121a:	a4 df       	rcall	.-184    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    121c:	88 23       	and	r24, r24
    121e:	39 f1       	breq	.+78     	; 0x126e <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1220:	8c e4       	ldi	r24, 0x4C	; 76
    1222:	0e df       	rcall	.-484    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1224:	8a e0       	ldi	r24, 0x0A	; 10
    1226:	80 df       	rcall	.-256    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    1228:	81 2f       	mov	r24, r17
    122a:	0a df       	rcall	.-492    	; 0x1040 <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    122c:	8c e4       	ldi	r24, 0x4C	; 76
    122e:	08 df       	rcall	.-496    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1230:	8b e0       	ldi	r24, 0x0B	; 11
    1232:	7a df       	rcall	.-268    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(1 << 0);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	04 df       	rcall	.-504    	; 0x1040 <XPROGTarget_SendByte>
    1238:	89 df       	rcall	.-238    	; 0x114c <XMEGANVM_WaitWhileNVMBusBusy>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    123a:	88 23       	and	r24, r24
    123c:	c1 f0       	breq	.+48     	; 0x126e <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    123e:	92 df       	rcall	.-220    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    1240:	88 23       	and	r24, r24
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1242:	a9 f0       	breq	.+42     	; 0x126e <XMEGANVM_GetMemoryCRC+0x60>
    1244:	8b e6       	ldi	r24, 0x6B	; 107
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1246:	fc de       	rcall	.-520    	; 0x1040 <XPROGTarget_SendByte>
    1248:	84 e0       	ldi	r24, 0x04	; 4

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    124a:	6e df       	rcall	.-292    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    124c:	80 ea       	ldi	r24, 0xA0	; 160
    124e:	f8 de       	rcall	.-528    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	f6 de       	rcall	.-532    	; 0x1040 <XPROGTarget_SendByte>
    1254:	84 e2       	ldi	r24, 0x24	; 36

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1256:	f4 de       	rcall	.-536    	; 0x1040 <XPROGTarget_SendByte>
    1258:	8e 01       	movw	r16, r28
    125a:	0d 5f       	subi	r16, 0xFD	; 253
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	04 df       	rcall	.-504    	; 0x1068 <XPROGTarget_ReceiveByte>
    1260:	89 93       	st	Y+, r24
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1262:	c0 17       	cp	r28, r16
    1264:	d1 07       	cpc	r29, r17
    1266:	d9 f7       	brne	.-10     	; 0x125e <XMEGANVM_GetMemoryCRC+0x50>
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
    1268:	9a b5       	in	r25, 0x2a	; 42
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	91 11       	cpse	r25, r1
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutExpired == false);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
}
    1276:	0f 91       	pop	r16
    1278:	08 95       	ret

0000127a <XMEGANVM_ReadMemory>:
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
 *  \param[in]  ReadSize     Number of bytes to read
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress, uint8_t* ReadBuffer, uint16_t ReadSize)
{
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	6b 01       	movw	r12, r22
    128c:	7c 01       	movw	r14, r24
    128e:	ea 01       	movw	r28, r20
    1290:	89 01       	movw	r16, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1292:	68 df       	rcall	.-304    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    1294:	88 23       	and	r24, r24
    1296:	09 f1       	breq	.+66     	; 0x12da <XMEGANVM_ReadMemory+0x60>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1298:	8c e4       	ldi	r24, 0x4C	; 76
    129a:	d2 de       	rcall	.-604    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    129c:	8a e0       	ldi	r24, 0x0A	; 10
    129e:	44 df       	rcall	.-376    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    12a0:	83 e4       	ldi	r24, 0x43	; 67
    12a2:	ce de       	rcall	.-612    	; 0x1040 <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    12a4:	8b e6       	ldi	r24, 0x6B	; 107
    12a6:	cc de       	rcall	.-616    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    12a8:	c7 01       	movw	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	2b df       	rcall	.-426    	; 0x1104 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    12ae:	80 ea       	ldi	r24, 0xA0	; 160
    12b0:	c7 de       	rcall	.-626    	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	80 0f       	add	r24, r16
    12b6:	c4 de       	rcall	.-632    	; 0x1040 <XPROGTarget_SendByte>
    12b8:	84 e2       	ldi	r24, 0x24	; 36

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    12ba:	c2 de       	rcall	.-636    	; 0x1040 <XPROGTarget_SendByte>
    12bc:	0c 0f       	add	r16, r28
    12be:	1d 1f       	adc	r17, r29
    12c0:	c0 17       	cp	r28, r16
	while (ReadSize-- && !(TimeoutExpired))
    12c2:	d1 07       	cpc	r29, r17
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <XMEGANVM_ReadMemory+0x58>
    12c6:	8a b5       	in	r24, 0x2a	; 42
    12c8:	81 11       	cpse	r24, r1
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <XMEGANVM_ReadMemory+0x58>
    12cc:	cd de       	rcall	.-614    	; 0x1068 <XPROGTarget_ReceiveByte>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    12ce:	89 93       	st	Y+, r24
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <XMEGANVM_ReadMemory+0x46>
    12d2:	9a b5       	in	r25, 0x2a	; 42
    12d4:	81 e0       	ldi	r24, 0x01	; 1

	return (TimeoutExpired == false);
    12d6:	91 11       	cpse	r25, r1
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
}
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	08 95       	ret

000012ec <XMEGANVM_WriteByteMemory>:
    12ec:	cf 92       	push	r12
    12ee:	df 92       	push	r13
 *  \param[in]  Byte          Byte to write to the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand, const uint32_t WriteAddress, const uint8_t Byte)
{
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	18 2f       	mov	r17, r24
    12fc:	6a 01       	movw	r12, r20
    12fe:	7b 01       	movw	r14, r22
    1300:	d2 2f       	mov	r29, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1302:	30 df       	rcall	.-416    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    1304:	c8 2f       	mov	r28, r24
    1306:	88 23       	and	r24, r24
    1308:	69 f0       	breq	.+26     	; 0x1324 <XMEGANVM_WriteByteMemory+0x38>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    130a:	8c e4       	ldi	r24, 0x4C	; 76
    130c:	99 de       	rcall	.-718    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    130e:	8a e0       	ldi	r24, 0x0A	; 10
    1310:	0b df       	rcall	.-490    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1312:	81 2f       	mov	r24, r17
    1314:	95 de       	rcall	.-726    	; 0x1040 <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1316:	8c e4       	ldi	r24, 0x4C	; 76
    1318:	93 de       	rcall	.-730    	; 0x1040 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    131a:	c7 01       	movw	r24, r14
    131c:	b6 01       	movw	r22, r12
    131e:	f2 de       	rcall	.-540    	; 0x1104 <XMEGANVM_SendAddress>
    1320:	8d 2f       	mov	r24, r29
	XPROGTarget_SendByte(Byte);
    1322:	8e de       	rcall	.-740    	; 0x1040 <XPROGTarget_SendByte>
    1324:	8c 2f       	mov	r24, r28
    1326:	df 91       	pop	r29

	return true;
}
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	08 95       	ret

00001336 <XMEGANVM_WritePageMemory>:
    1336:	4f 92       	push	r4
    1338:	5f 92       	push	r5
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WritePageMemory(const uint8_t WriteBuffCommand, const uint8_t EraseBuffCommand,
                              const uint8_t WritePageCommand, const uint8_t PageMode, const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer, uint16_t WriteSize)
{
    133a:	6f 92       	push	r6
    133c:	7f 92       	push	r7
    133e:	8f 92       	push	r8
    1340:	9f 92       	push	r9
    1342:	af 92       	push	r10
    1344:	bf 92       	push	r11
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	c8 2f       	mov	r28, r24
    1358:	d6 2f       	mov	r29, r22
    135a:	94 2e       	mov	r9, r20
    135c:	82 2e       	mov	r8, r18
    135e:	27 01       	movw	r4, r14
    1360:	38 01       	movw	r6, r16
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1362:	20 ff       	sbrs	r18, 0
    1364:	11 c0       	rjmp	.+34     	; 0x1388 <XMEGANVM_WritePageMemory+0x52>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1366:	fe de       	rcall	.-516    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    1368:	81 11       	cpse	r24, r1
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <XMEGANVM_WritePageMemory+0x3a>
		  return false;
    136c:	c0 e0       	ldi	r28, 0x00	; 0
    136e:	43 c0       	rjmp	.+134    	; 0x13f6 <XMEGANVM_WritePageMemory+0xc0>

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1370:	8c e4       	ldi	r24, 0x4C	; 76
    1372:	66 de       	rcall	.-820    	; 0x1040 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1374:	8a e0       	ldi	r24, 0x0A	; 10
    1376:	d8 de       	rcall	.-592    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    1378:	8d 2f       	mov	r24, r29
    137a:	62 de       	rcall	.-828    	; 0x1040 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    137c:	8c e4       	ldi	r24, 0x4C	; 76
    137e:	60 de       	rcall	.-832    	; 0x1040 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1380:	8b e0       	ldi	r24, 0x0B	; 11
    1382:	d2 de       	rcall	.-604    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    1384:	81 e0       	ldi	r24, 0x01	; 1
		XPROGTarget_SendByte(1 << 0);
    1386:	5c de       	rcall	.-840    	; 0x1040 <XPROGTarget_SendByte>
    1388:	a1 14       	cp	r10, r1
    138a:	b1 04       	cpc	r11, r1
	}

	if (WriteSize)
    138c:	21 f4       	brne	.+8      	; 0x1396 <XMEGANVM_WritePageMemory+0x60>
    138e:	81 fc       	sbrc	r8, 1
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1390:	20 c0       	rjmp	.+64     	; 0x13d2 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
    1392:	c1 e0       	ldi	r28, 0x01	; 1
	}

	if (WriteSize)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1394:	30 c0       	rjmp	.+96     	; 0x13f6 <XMEGANVM_WritePageMemory+0xc0>
    1396:	e6 de       	rcall	.-564    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    1398:	88 23       	and	r24, r24
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    139a:	41 f3       	breq	.-48     	; 0x136c <XMEGANVM_WritePageMemory+0x36>
    139c:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    139e:	50 de       	rcall	.-864    	; 0x1040 <XPROGTarget_SendByte>
    13a0:	8a e0       	ldi	r24, 0x0A	; 10
		XPROGTarget_SendByte(WriteBuffCommand);
    13a2:	c2 de       	rcall	.-636    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    13a4:	8c 2f       	mov	r24, r28

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    13a6:	4c de       	rcall	.-872    	; 0x1040 <XPROGTarget_SendByte>
    13a8:	8b e6       	ldi	r24, 0x6B	; 107
		XMEGANVM_SendAddress(WriteAddress);
    13aa:	4a de       	rcall	.-876    	; 0x1040 <XPROGTarget_SendByte>
    13ac:	c3 01       	movw	r24, r6
    13ae:	b2 01       	movw	r22, r4
    13b0:	a9 de       	rcall	.-686    	; 0x1104 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    13b2:	80 ea       	ldi	r24, 0xA0	; 160
    13b4:	45 de       	rcall	.-886    	; 0x1040 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	8a 0d       	add	r24, r10
    13ba:	42 de       	rcall	.-892    	; 0x1040 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    13bc:	84 e6       	ldi	r24, 0x64	; 100
    13be:	40 de       	rcall	.-896    	; 0x1040 <XPROGTarget_SendByte>
    13c0:	e6 01       	movw	r28, r12
    13c2:	ac 0c       	add	r10, r12
		while (WriteSize--)
    13c4:	bd 1c       	adc	r11, r13
    13c6:	ca 15       	cp	r28, r10
		  XPROGTarget_SendByte(*(WriteBuffer++));
    13c8:	db 05       	cpc	r29, r11
    13ca:	09 f3       	breq	.-62     	; 0x138e <XMEGANVM_WritePageMemory+0x58>
    13cc:	89 91       	ld	r24, Y+
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    13ce:	38 de       	rcall	.-912    	; 0x1040 <XPROGTarget_SendByte>
    13d0:	fa cf       	rjmp	.-12     	; 0x13c6 <XMEGANVM_WritePageMemory+0x90>
    13d2:	c8 de       	rcall	.-624    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    13d4:	c8 2f       	mov	r28, r24
    13d6:	88 23       	and	r24, r24
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13d8:	09 f4       	brne	.+2      	; 0x13dc <XMEGANVM_WritePageMemory+0xa6>
    13da:	c8 cf       	rjmp	.-112    	; 0x136c <XMEGANVM_WritePageMemory+0x36>
    13dc:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13de:	30 de       	rcall	.-928    	; 0x1040 <XPROGTarget_SendByte>
    13e0:	8a e0       	ldi	r24, 0x0A	; 10
    13e2:	a2 de       	rcall	.-700    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    13e4:	89 2d       	mov	r24, r9
    13e6:	2c de       	rcall	.-936    	; 0x1040 <XPROGTarget_SendByte>
    13e8:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13ea:	2a de       	rcall	.-940    	; 0x1040 <XPROGTarget_SendByte>
    13ec:	c3 01       	movw	r24, r6
    13ee:	b2 01       	movw	r22, r4
		XMEGANVM_SendAddress(WriteAddress);
    13f0:	89 de       	rcall	.-750    	; 0x1104 <XMEGANVM_SendAddress>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	25 de       	rcall	.-950    	; 0x1040 <XPROGTarget_SendByte>
    13f6:	8c 2f       	mov	r24, r28
		XPROGTarget_SendByte(0x00);
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
	}

	return true;
}
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	7f 90       	pop	r7
    1412:	6f 90       	pop	r6
    1414:	5f 90       	pop	r5
    1416:	4f 90       	pop	r4
    1418:	08 95       	ret

0000141a <XMEGANVM_EraseMemory>:
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
 *  \param[in] Address       Address inside the memory space to erase
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand, const uint32_t Address)
{
    1422:	cf 93       	push	r28
    1424:	c8 2f       	mov	r28, r24
    1426:	6a 01       	movw	r12, r20
    1428:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    142a:	9c de       	rcall	.-712    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <XMEGANVM_EraseMemory+0x18>
    1430:	59 c0       	rjmp	.+178    	; 0x14e4 <XMEGANVM_EraseMemory+0xca>

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1432:	8c e4       	ldi	r24, 0x4C	; 76
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1434:	c0 34       	cpi	r28, 0x40	; 64
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1436:	29 f4       	brne	.+10     	; 0x1442 <XMEGANVM_EraseMemory+0x28>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1438:	03 de       	rcall	.-1018   	; 0x1040 <XPROGTarget_SendByte>
    143a:	8a e0       	ldi	r24, 0x0A	; 10
    143c:	75 de       	rcall	.-790    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    143e:	80 e4       	ldi	r24, 0x40	; 64
    1440:	38 c0       	rjmp	.+112    	; 0x14b2 <XMEGANVM_EraseMemory+0x98>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(1 << 0);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1442:	c0 33       	cpi	r28, 0x30	; 48
    1444:	09 f0       	breq	.+2      	; 0x1448 <XMEGANVM_EraseMemory+0x2e>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1446:	3c c0       	rjmp	.+120    	; 0x14c0 <XMEGANVM_EraseMemory+0xa6>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1448:	fb dd       	rcall	.-1034   	; 0x1040 <XPROGTarget_SendByte>
    144a:	8a e0       	ldi	r24, 0x0A	; 10
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    144c:	6d de       	rcall	.-806    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    144e:	86 e3       	ldi	r24, 0x36	; 54

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1450:	f7 dd       	rcall	.-1042   	; 0x1040 <XPROGTarget_SendByte>
    1452:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1454:	f5 dd       	rcall	.-1046   	; 0x1040 <XPROGTarget_SendByte>
    1456:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(1 << 0);
    1458:	67 de       	rcall	.-818    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    145a:	81 e0       	ldi	r24, 0x01	; 1

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    145c:	f1 dd       	rcall	.-1054   	; 0x1040 <XPROGTarget_SendByte>
    145e:	82 de       	rcall	.-764    	; 0x1164 <XMEGANVM_WaitWhileNVMControllerBusy>
    1460:	88 23       	and	r24, r24
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1462:	09 f4       	brne	.+2      	; 0x1466 <XMEGANVM_EraseMemory+0x4c>
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <XMEGANVM_EraseMemory+0xca>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1466:	8c e4       	ldi	r24, 0x4C	; 76
    1468:	eb dd       	rcall	.-1066   	; 0x1040 <XPROGTarget_SendByte>
    146a:	8a e0       	ldi	r24, 0x0A	; 10
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    146c:	5d de       	rcall	.-838    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    146e:	83 e3       	ldi	r24, 0x33	; 51

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1470:	e7 dd       	rcall	.-1074   	; 0x1040 <XPROGTarget_SendByte>
    1472:	8b e6       	ldi	r24, 0x6B	; 107
    1474:	e5 dd       	rcall	.-1078   	; 0x1040 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1476:	c7 01       	movw	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	44 de       	rcall	.-888    	; 0x1104 <XMEGANVM_SendAddress>
    147c:	80 ea       	ldi	r24, 0xA0	; 160

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    147e:	e0 dd       	rcall	.-1088   	; 0x1040 <XPROGTarget_SendByte>
    1480:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <XPROG_Param_EEPageSize>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1484:	81 50       	subi	r24, 0x01	; 1
    1486:	dc dd       	rcall	.-1096   	; 0x1040 <XPROGTarget_SendByte>
    1488:	84 e6       	ldi	r24, 0x64	; 100
    148a:	da dd       	rcall	.-1100   	; 0x1040 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    148c:	c0 e0       	ldi	r28, 0x00	; 0
    148e:	8c 2f       	mov	r24, r28
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <XPROG_Param_EEPageSize>
    1496:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <XPROG_Param_EEPageSize+0x1>
    149a:	82 17       	cp	r24, r18
    149c:	93 07       	cpc	r25, r19
		  XPROGTarget_SendByte(0x00);
    149e:	20 f4       	brcc	.+8      	; 0x14a8 <XMEGANVM_EraseMemory+0x8e>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    14a2:	ce dd       	rcall	.-1124   	; 0x1040 <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    14a4:	cf 5f       	subi	r28, 0xFF	; 255
    14a6:	f3 cf       	rjmp	.-26     	; 0x148e <XMEGANVM_EraseMemory+0x74>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    14a8:	8c e4       	ldi	r24, 0x4C	; 76
    14aa:	ca dd       	rcall	.-1132   	; 0x1040 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(EraseCommand);
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	3c de       	rcall	.-904    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    14b0:	80 e3       	ldi	r24, 0x30	; 48

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    14b2:	c6 dd       	rcall	.-1140   	; 0x1040 <XPROGTarget_SendByte>
    14b4:	8c e4       	ldi	r24, 0x4C	; 76
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    14b6:	c4 dd       	rcall	.-1144   	; 0x1040 <XPROGTarget_SendByte>
    14b8:	8b e0       	ldi	r24, 0x0B	; 11
    14ba:	36 de       	rcall	.-916    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	0b c0       	rjmp	.+22     	; 0x14d6 <XMEGANVM_EraseMemory+0xbc>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    14c0:	bf dd       	rcall	.-1154   	; 0x1040 <XPROGTarget_SendByte>
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    14c4:	31 de       	rcall	.-926    	; 0x1128 <XMEGANVM_SendNVMRegAddress>
    14c6:	8c 2f       	mov	r24, r28
    14c8:	bb dd       	rcall	.-1162   	; 0x1040 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(EraseCommand);
    14ca:	8c e4       	ldi	r24, 0x4C	; 76
    14cc:	b9 dd       	rcall	.-1166   	; 0x1040 <XPROGTarget_SendByte>
    14ce:	c7 01       	movw	r24, r14

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    14d0:	b6 01       	movw	r22, r12
    14d2:	18 de       	rcall	.-976    	; 0x1104 <XMEGANVM_SendAddress>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
		XMEGANVM_SendAddress(Address);
    14d6:	b4 dd       	rcall	.-1176   	; 0x1040 <XPROGTarget_SendByte>
    14d8:	cf 91       	pop	r28
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
		XPROGTarget_SendByte(0x00);
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	34 ce       	rjmp	.-920    	; 0x114c <XMEGANVM_WaitWhileNVMBusBusy>
	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	return true;
}
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	cf 91       	pop	r28
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
		XMEGANVM_SendAddress(Address);
		XPROGTarget_SendByte(0x00);
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    14ee:	cf 90       	pop	r12
    14f0:	08 95       	ret

000014f2 <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    14f2:	98 2f       	mov	r25, r24
    14f4:	90 73       	andi	r25, 0x30	; 48
    14f6:	99 0f       	add	r25, r25
    14f8:	8f 70       	andi	r24, 0x0F	; 15
    14fa:	80 69       	ori	r24, 0x90	; 144
    14fc:	89 2b       	or	r24, r25
    14fe:	a0 cd       	rjmp	.-1216   	; 0x1040 <XPROGTarget_SendByte>

00001500 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ec 01       	movw	r28, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1506:	88 e6       	ldi	r24, 0x68	; 104
    1508:	9b dd       	rcall	.-1226   	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    150a:	8c 2f       	mov	r24, r28
    150c:	99 dd       	rcall	.-1230   	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    150e:	89 e6       	ldi	r24, 0x69	; 105
    1510:	97 dd       	rcall	.-1234   	; 0x1040 <XPROGTarget_SendByte>
    1512:	8d 2f       	mov	r24, r29
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
}
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
{
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1518:	93 cd       	rjmp	.-1242   	; 0x1040 <XPROGTarget_SendByte>

0000151a <TINYNVM_WaitWhileNVMBusBusy>:
    151a:	80 e8       	ldi	r24, 0x80	; 128
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    151c:	91 dd       	rcall	.-1246   	; 0x1040 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    151e:	a4 dd       	rcall	.-1208   	; 0x1068 <XPROGTarget_ReceiveByte>
    1520:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1522:	91 11       	cpse	r25, r1
    1524:	04 c0       	rjmp	.+8      	; 0x152e <TINYNVM_WaitWhileNVMBusBusy+0x14>
    1526:	81 ff       	sbrs	r24, 1
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1528:	f8 cf       	rjmp	.-16     	; 0x151a <TINYNVM_WaitWhileNVMBusBusy>
    152a:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    152c:	08 95       	ret
    152e:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    1530:	08 95       	ret

00001532 <TINYNVM_WaitWhileNVMControllerBusy>:

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
		  return true;
	}
}
    1532:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <XPROG_Param_NVMCSRRegAddr>
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1536:	89 2f       	mov	r24, r25
    1538:	80 73       	andi	r24, 0x30	; 48
    153a:	88 0f       	add	r24, r24
    153c:	9f 70       	andi	r25, 0x0F	; 15
    153e:	90 61       	ori	r25, 0x10	; 16
    1540:	89 2b       	or	r24, r25
    1542:	7e dd       	rcall	.-1284   	; 0x1040 <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1544:	91 dd       	rcall	.-1246   	; 0x1068 <XPROGTarget_ReceiveByte>
    1546:	9a b5       	in	r25, 0x2a	; 42

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1548:	91 11       	cpse	r25, r1
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <TINYNVM_WaitWhileNVMControllerBusy+0x22>
    154c:	87 fd       	sbrc	r24, 7
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    154e:	f1 cf       	rjmp	.-30     	; 0x1532 <TINYNVM_WaitWhileNVMControllerBusy>
    1550:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
    1552:	08 95       	ret
    1554:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
		  return false;
    1556:	08 95       	ret

00001558 <TINYNVM_EnableTPI>:

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1558:	ef 92       	push	r14
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	28 97       	sbiw	r28, 0x08	; 8
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1574:	ad dd       	rcall	.-1190   	; 0x10d0 <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1576:	82 ec       	ldi	r24, 0xC2	; 194
    1578:	63 dd       	rcall	.-1338   	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    157a:	87 e0       	ldi	r24, 0x07	; 7
    157c:	61 dd       	rcall	.-1342   	; 0x1040 <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    157e:	80 ee       	ldi	r24, 0xE0	; 224
    1580:	5f dd       	rcall	.-1346   	; 0x1040 <XPROGTarget_SendByte>
    1582:	8e 01       	movw	r16, r28
    1584:	07 5f       	subi	r16, 0xF7	; 247
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	7c 01       	movw	r14, r24
    158e:	88 e0       	ldi	r24, 0x08	; 8
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1590:	e4 e6       	ldi	r30, 0x64	; 100
    1592:	f1 e0       	ldi	r31, 0x01	; 1
    1594:	d7 01       	movw	r26, r14
    1596:	01 90       	ld	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	8a 95       	dec	r24
    159c:	e1 f7       	brne	.-8      	; 0x1596 <TINYNVM_EnableTPI+0x3e>
    159e:	f8 01       	movw	r30, r16
    15a0:	82 91       	ld	r24, -Z
    15a2:	8f 01       	movw	r16, r30
    15a4:	4d dd       	rcall	.-1382   	; 0x1040 <XPROGTarget_SendByte>
    15a6:	0e 15       	cp	r16, r14
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    15a8:	1f 05       	cpc	r17, r15
    15aa:	89 f7       	brne	.-30     	; 0x158e <TINYNVM_EnableTPI+0x36>
    15ac:	28 96       	adiw	r28, 0x08	; 8
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
}
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    15c4:	aa cf       	rjmp	.-172    	; 0x151a <TINYNVM_WaitWhileNVMBusBusy>

000015c6 <TINYNVM_DisableTPI>:
    15c6:	a9 df       	rcall	.-174    	; 0x151a <TINYNVM_WaitWhileNVMBusBusy>
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();

	/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    15c8:	80 ec       	ldi	r24, 0xC0	; 192
    15ca:	3a dd       	rcall	.-1420   	; 0x1040 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	38 dd       	rcall	.-1424   	; 0x1040 <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetTPI();
    15d0:	24 cd       	rjmp	.-1464   	; 0x101a <XPROGTarget_DisableTargetTPI>

000015d2 <TINYNVM_ReadMemory>:
    15d2:	ef 92       	push	r14
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	7c 01       	movw	r14, r24
    15e0:	eb 01       	movw	r28, r22
    15e2:	8a 01       	movw	r16, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    15e4:	a6 df       	rcall	.-180    	; 0x1532 <TINYNVM_WaitWhileNVMControllerBusy>
    15e6:	88 23       	and	r24, r24
    15e8:	c1 f0       	breq	.+48     	; 0x161a <TINYNVM_ReadMemory+0x48>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    15ea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <XPROG_Param_NVMCMDRegAddr>
    15ee:	81 df       	rcall	.-254    	; 0x14f2 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	26 dd       	rcall	.-1460   	; 0x1040 <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    15f4:	c7 01       	movw	r24, r14
    15f6:	84 df       	rcall	.-248    	; 0x1500 <TINYNVM_SendPointerAddress>
    15f8:	0c 0f       	add	r16, r28
    15fa:	1d 1f       	adc	r17, r29
    15fc:	c0 17       	cp	r28, r16

	while (ReadSize-- && !(TimeoutExpired))
    15fe:	d1 07       	cpc	r29, r17
    1600:	41 f0       	breq	.+16     	; 0x1612 <TINYNVM_ReadMemory+0x40>
    1602:	8a b5       	in	r24, 0x2a	; 42
    1604:	81 11       	cpse	r24, r1
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <TINYNVM_ReadMemory+0x40>
    1608:	84 e2       	ldi	r24, 0x24	; 36
    160a:	1a dd       	rcall	.-1484   	; 0x1040 <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    160c:	2d dd       	rcall	.-1446   	; 0x1068 <XPROGTarget_ReceiveByte>
    160e:	89 93       	st	Y+, r24
    1610:	f5 cf       	rjmp	.-22     	; 0x15fc <TINYNVM_ReadMemory+0x2a>
    1612:	9a b5       	in	r25, 0x2a	; 42
	}

	return (TimeoutExpired == false);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	91 11       	cpse	r25, r1
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	df 91       	pop	r29
}
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	08 95       	ret

00001628 <TINYNVM_WriteMemory>:
    1628:	cf 92       	push	r12
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    162a:	df 92       	push	r13
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	6c 01       	movw	r12, r24
    1638:	8b 01       	movw	r16, r22
    163a:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    163c:	7a df       	rcall	.-268    	; 0x1532 <TINYNVM_WaitWhileNVMControllerBusy>
    163e:	f8 2e       	mov	r15, r24
    1640:	81 11       	cpse	r24, r1
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <TINYNVM_WriteMemory+0x20>
	  return false;
    1644:	f1 2c       	mov	r15, r1
    1646:	22 c0       	rjmp	.+68     	; 0x168c <TINYNVM_WriteMemory+0x64>

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1648:	c0 ff       	sbrs	r28, 0
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <TINYNVM_WriteMemory+0x30>
	  WriteBuffer[WriteLength++] = 0xFF;
    164c:	f8 01       	movw	r30, r16
    164e:	ec 0f       	add	r30, r28
    1650:	fd 1f       	adc	r31, r29
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	21 96       	adiw	r28, 0x01	; 1

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1658:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <XPROG_Param_NVMCMDRegAddr>
    165c:	4a df       	rcall	.-364    	; 0x14f2 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    165e:	8d e1       	ldi	r24, 0x1D	; 29
    1660:	ef dc       	rcall	.-1570   	; 0x1040 <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1662:	c6 01       	movw	r24, r12
    1664:	4d df       	rcall	.-358    	; 0x1500 <TINYNVM_SendPointerAddress>

	while (WriteLength)
    1666:	20 97       	sbiw	r28, 0x00	; 0
    1668:	89 f0       	breq	.+34     	; 0x168c <TINYNVM_WriteMemory+0x64>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    166a:	63 df       	rcall	.-314    	; 0x1532 <TINYNVM_WaitWhileNVMControllerBusy>
    166c:	88 23       	and	r24, r24
    166e:	51 f3       	breq	.-44     	; 0x1644 <TINYNVM_WriteMemory+0x1c>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1670:	84 e6       	ldi	r24, 0x64	; 100
    1672:	e6 dc       	rcall	.-1588   	; 0x1040 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1674:	f8 01       	movw	r30, r16
    1676:	80 81       	ld	r24, Z
    1678:	e3 dc       	rcall	.-1594   	; 0x1040 <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    167a:	84 e6       	ldi	r24, 0x64	; 100
    167c:	e1 dc       	rcall	.-1598   	; 0x1040 <XPROGTarget_SendByte>
    167e:	f8 01       	movw	r30, r16
		XPROGTarget_SendByte(*(WriteBuffer++));
    1680:	81 81       	ldd	r24, Z+1	; 0x01
    1682:	de dc       	rcall	.-1604   	; 0x1040 <XPROGTarget_SendByte>
    1684:	22 97       	sbiw	r28, 0x02	; 2
    1686:	0e 5f       	subi	r16, 0xFE	; 254

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	ed cf       	rjmp	.-38     	; 0x1666 <TINYNVM_WriteMemory+0x3e>
    168c:	8f 2d       	mov	r24, r15
    168e:	df 91       	pop	r29
	}

	return true;
}
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	08 95       	ret

0000169e <TINYNVM_EraseMemory>:
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    16a2:	df 93       	push	r29
    16a4:	18 2f       	mov	r17, r24
    16a6:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    16a8:	44 df       	rcall	.-376    	; 0x1532 <TINYNVM_WaitWhileNVMControllerBusy>
    16aa:	88 23       	and	r24, r24
    16ac:	81 f0       	breq	.+32     	; 0x16ce <TINYNVM_EraseMemory+0x30>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    16ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <XPROG_Param_NVMCMDRegAddr>
    16b2:	1f df       	rcall	.-450    	; 0x14f2 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    16b4:	81 2f       	mov	r24, r17
    16b6:	c4 dc       	rcall	.-1656   	; 0x1040 <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    16b8:	ce 01       	movw	r24, r28
    16ba:	81 60       	ori	r24, 0x01	; 1
    16bc:	21 df       	rcall	.-446    	; 0x1500 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    16be:	80 e6       	ldi	r24, 0x60	; 96
    16c0:	bf dc       	rcall	.-1666   	; 0x1040 <XPROGTarget_SendByte>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(0x00);
    16c4:	bd dc       	rcall	.-1670   	; 0x1040 <XPROGTarget_SendByte>
    16c6:	df 91       	pop	r29
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	return true;
}
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	32 cf       	rjmp	.-412    	; 0x1532 <TINYNVM_WaitWhileNVMControllerBusy>
	TINYNVM_SendPointerAddress(Address | 0x0001);
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
	XPROGTarget_SendByte(0x00);

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	df 91       	pop	r29
	  return false;

	return true;
}
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	08 95       	ret

000016d8 <Endpoint_ConfigureEndpoint_Prv>:
    16d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    16dc:	eb ee       	ldi	r30, 0xEB	; 235
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	81 60       	ori	r24, 0x01	; 1
    16e4:	80 83       	st	Z, r24
    16e6:	ed ee       	ldi	r30, 0xED	; 237
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	10 82       	st	Z, r1
    16ec:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    16f0:	40 83       	st	Z, r20
    16f2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    16f6:	88 1f       	adc	r24, r24
    16f8:	88 27       	eor	r24, r24
    16fa:	88 1f       	adc	r24, r24
    16fc:	08 95       	ret

000016fe <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    16fe:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <USB_ControlRequest>
    1702:	87 ff       	sbrs	r24, 7
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1706:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    170a:	82 fd       	sbrc	r24, 2
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    170e:	8e b3       	in	r24, 0x1e	; 30
    1710:	81 11       	cpse	r24, r1
    1712:	f9 cf       	rjmp	.-14     	; 0x1706 <Endpoint_ClearStatusStage+0x8>
    1714:	10 c0       	rjmp	.+32     	; 0x1736 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1716:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    171a:	8b 77       	andi	r24, 0x7B	; 123
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    171e:	8e b3       	in	r24, 0x1e	; 30
    1720:	88 23       	and	r24, r24
    1722:	49 f0       	breq	.+18     	; 0x1736 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1728:	80 ff       	sbrs	r24, 0
    172a:	f9 cf       	rjmp	.-14     	; 0x171e <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    172c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1730:	8e 77       	andi	r24, 0x7E	; 126
    1732:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1736:	08 95       	ret

00001738 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1738:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    173c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1740:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1742:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1746:	84 2f       	mov	r24, r20
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	40 ff       	sbrs	r20, 0
    174c:	22 c0       	rjmp	.+68     	; 0x1792 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    174e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1752:	80 fd       	sbrc	r24, 0
    1754:	1c c0       	rjmp	.+56     	; 0x178e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1756:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1758:	88 23       	and	r24, r24
    175a:	99 f0       	breq	.+38     	; 0x1782 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    175c:	85 30       	cpi	r24, 0x05	; 5
    175e:	99 f0       	breq	.+38     	; 0x1786 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1760:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1764:	85 fd       	sbrc	r24, 5
    1766:	11 c0       	rjmp	.+34     	; 0x178a <Endpoint_WaitUntilReady+0x52>
    1768:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    176c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1770:	24 17       	cp	r18, r20
    1772:	35 07       	cpc	r19, r21
    1774:	31 f3       	breq	.-52     	; 0x1742 <Endpoint_WaitUntilReady+0xa>
    1776:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1778:	11 f0       	breq	.+4      	; 0x177e <Endpoint_WaitUntilReady+0x46>
    177a:	9a 01       	movw	r18, r20
    177c:	e2 cf       	rjmp	.-60     	; 0x1742 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1792:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1796:	42 ff       	sbrs	r20, 2
    1798:	de cf       	rjmp	.-68     	; 0x1756 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    179a:	08 95       	ret

0000179c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    17a4:	44 d0       	rcall	.+136    	; 0x182e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17a6:	4b d0       	rcall	.+150    	; 0x183e <USB_INT_ClearAllInterrupts>
    17a8:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    17aa:	d0 e0       	ldi	r29, 0x00	; 0
    17ac:	88 81       	ld	r24, Y
    17ae:	8f 77       	andi	r24, 0x7F	; 127
    17b0:	88 83       	st	Y, r24
    17b2:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    17b4:	80 68       	ori	r24, 0x80	; 128
    17b6:	88 83       	st	Y, r24
    17b8:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    17ba:	8f 7d       	andi	r24, 0xDF	; 223
    17bc:	88 83       	st	Y, r24
    17be:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	80 83       	st	Z, r24
    17c8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17ca:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    17cc:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    17d0:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	f8 01       	movw	r30, r16
    17d6:	80 81       	ld	r24, Z
    17d8:	8b 7f       	andi	r24, 0xFB	; 251
    17da:	80 83       	st	Z, r24
    17dc:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    17de:	81 60       	ori	r24, 0x01	; 1
    17e0:	88 83       	st	Y, r24
    17e2:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	77 df       	rcall	.-274    	; 0x16d8 <Endpoint_ConfigureEndpoint_Prv>
    17ea:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	80 83       	st	Z, r24
    17f4:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	81 60       	ori	r24, 0x01	; 1
    17fc:	80 83       	st	Z, r24
    17fe:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	80 83       	st	Z, r24
    1804:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1806:	80 81       	ld	r24, Z
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	80 83       	st	Z, r24
    180c:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    180e:	80 61       	ori	r24, 0x10	; 16
    1810:	88 83       	st	Y, r24
    1812:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	08 95       	ret

0000181c <USB_Init>:
    181c:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	81 60       	ori	r24, 0x01	; 1
    1824:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <USB_IsInitialized>

	USB_ResetInterface();
    182c:	b7 cf       	rjmp	.-146    	; 0x179c <USB_ResetInterface>

0000182e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    182e:	e8 ed       	ldi	r30, 0xD8	; 216
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8c 7f       	andi	r24, 0xFC	; 252
    1836:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1838:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    183c:	08 95       	ret

0000183e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    183e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1842:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1846:	08 95       	ret

00001848 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1848:	1f 92       	push	r1
    184a:	0f 92       	push	r0
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	0f 92       	push	r0
    1850:	11 24       	eor	r1, r1
    1852:	0b b6       	in	r0, 0x3b	; 59
    1854:	0f 92       	push	r0
    1856:	2f 93       	push	r18
    1858:	3f 93       	push	r19
    185a:	4f 93       	push	r20
    185c:	5f 93       	push	r21
    185e:	6f 93       	push	r22
    1860:	7f 93       	push	r23
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    186e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1872:	82 ff       	sbrs	r24, 2
    1874:	0a c0       	rjmp	.+20     	; 0x188a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1876:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    187a:	82 ff       	sbrs	r24, 2
    187c:	06 c0       	rjmp	.+12     	; 0x188a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    187e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1882:	8b 7f       	andi	r24, 0xFB	; 251
    1884:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1888:	71 d3       	rcall	.+1762   	; 0x1f6c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    188a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    188e:	80 ff       	sbrs	r24, 0
    1890:	1d c0       	rjmp	.+58     	; 0x18cc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1892:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1896:	80 ff       	sbrs	r24, 0
    1898:	19 c0       	rjmp	.+50     	; 0x18cc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    189a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    189e:	8e 7f       	andi	r24, 0xFE	; 254
    18a0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    18a4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    18a8:	80 ff       	sbrs	r24, 0
    18aa:	0c c0       	rjmp	.+24     	; 0x18c4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18ac:	8c e0       	ldi	r24, 0x0C	; 12
    18ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18b0:	8e e0       	ldi	r24, 0x0E	; 14
    18b2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    18b4:	09 b4       	in	r0, 0x29	; 41
    18b6:	00 fe       	sbrs	r0, 0
    18b8:	fd cf       	rjmp	.-6      	; 0x18b4 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    18be:	0e 94 3a 02 	call	0x474	; 0x474 <EVENT_USB_Device_Connect>
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18c4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    18c6:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    18c8:	0e 94 38 02 	call	0x470	; 0x470 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    18cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    18d0:	80 ff       	sbrs	r24, 0
    18d2:	17 c0       	rjmp	.+46     	; 0x1902 <__vector_10+0xba>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    18d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    18d8:	80 ff       	sbrs	r24, 0
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <__vector_10+0xba>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    18dc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    18e0:	8e 7f       	andi	r24, 0xFE	; 254
    18e2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    18e6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    18ea:	80 61       	ori	r24, 0x10	; 16
    18ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    18f0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    18f4:	80 62       	ori	r24, 0x20	; 32
    18f6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18fa:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    18fc:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    18fe:	8e bb       	out	0x1e, r24	; 30
    1900:	35 d3       	rcall	.+1642   	; 0x1f6c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1902:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1906:	84 ff       	sbrs	r24, 4
    1908:	2c c0       	rjmp	.+88     	; 0x1962 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    190a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    190e:	84 ff       	sbrs	r24, 4
    1910:	28 c0       	rjmp	.+80     	; 0x1962 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1912:	8c e0       	ldi	r24, 0x0C	; 12
    1914:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1916:	8e e0       	ldi	r24, 0x0E	; 14
    1918:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    191a:	09 b4       	in	r0, 0x29	; 41
    191c:	00 fe       	sbrs	r0, 0
    191e:	fd cf       	rjmp	.-6      	; 0x191a <__vector_10+0xd2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1920:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1924:	8f 7d       	andi	r24, 0xDF	; 223
    1926:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    192a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    192e:	8f 7e       	andi	r24, 0xEF	; 239
    1930:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1934:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1938:	8f 7e       	andi	r24, 0xEF	; 239
    193a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    193e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1942:	81 60       	ori	r24, 0x01	; 1
    1944:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1948:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <USB_Device_ConfigurationNumber>
    194c:	81 11       	cpse	r24, r1
    194e:	06 c0       	rjmp	.+12     	; 0x195c <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1950:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1954:	87 fd       	sbrc	r24, 7
    1956:	02 c0       	rjmp	.+4      	; 0x195c <__vector_10+0x114>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	01 c0       	rjmp	.+2      	; 0x195e <__vector_10+0x116>
    195c:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    195e:	8e bb       	out	0x1e, r24	; 30
    1960:	05 d3       	rcall	.+1546   	; 0x1f6c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1962:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1966:	83 ff       	sbrs	r24, 3
    1968:	21 c0       	rjmp	.+66     	; 0x19ac <__vector_10+0x164>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    196a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    196e:	83 ff       	sbrs	r24, 3
    1970:	1d c0       	rjmp	.+58     	; 0x19ac <__vector_10+0x164>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1972:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1976:	87 7f       	andi	r24, 0xF7	; 247
    1978:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1980:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1984:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1988:	8e 7f       	andi	r24, 0xFE	; 254
    198a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    198e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1992:	8e 7f       	andi	r24, 0xFE	; 254
    1994:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1998:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    199c:	80 61       	ori	r24, 0x10	; 16
    199e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    19a2:	42 e0       	ldi	r20, 0x02	; 2
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    19a8:	97 de       	rcall	.-722    	; 0x16d8 <Endpoint_ConfigureEndpoint_Prv>
    19aa:	e0 d2       	rcall	.+1472   	; 0x1f6c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0b be       	out	0x3b, r0	; 59
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19d2:	cf 92       	push	r12
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	ec 01       	movw	r28, r24
    19e4:	8b 01       	movw	r16, r22
    19e6:	7a 01       	movw	r14, r20
    19e8:	a7 de       	rcall	.-690    	; 0x1738 <Endpoint_WaitUntilReady>
    19ea:	81 11       	cpse	r24, r1
    19ec:	33 c0       	rjmp	.+102    	; 0x1a54 <Endpoint_Write_Stream_LE+0x82>
    19ee:	e1 14       	cp	r14, r1
    19f0:	f1 04       	cpc	r15, r1
    19f2:	39 f0       	breq	.+14     	; 0x1a02 <Endpoint_Write_Stream_LE+0x30>
    19f4:	f7 01       	movw	r30, r14
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	08 1b       	sub	r16, r24
    19fc:	19 0b       	sbc	r17, r25
    19fe:	c8 0f       	add	r28, r24
    1a00:	d9 1f       	adc	r29, r25
    1a02:	c1 2c       	mov	r12, r1
    1a04:	d1 2c       	mov	r13, r1
    1a06:	01 15       	cp	r16, r1
    1a08:	11 05       	cpc	r17, r1
    1a0a:	19 f1       	breq	.+70     	; 0x1a52 <Endpoint_Write_Stream_LE+0x80>
    1a0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a10:	85 fd       	sbrc	r24, 5
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <Endpoint_Write_Stream_LE+0x6e>
    1a14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a18:	8e 77       	andi	r24, 0x7E	; 126
    1a1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a1e:	a7 d2       	rcall	.+1358   	; 0x1f6e <USB_USBTask>
    1a20:	e1 14       	cp	r14, r1
    1a22:	f1 04       	cpc	r15, r1
    1a24:	49 f0       	breq	.+18     	; 0x1a38 <Endpoint_Write_Stream_LE+0x66>
    1a26:	f7 01       	movw	r30, r14
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	c8 0e       	add	r12, r24
    1a2e:	d9 1e       	adc	r13, r25
    1a30:	d1 82       	std	Z+1, r13	; 0x01
    1a32:	c0 82       	st	Z, r12
    1a34:	85 e0       	ldi	r24, 0x05	; 5
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <Endpoint_Write_Stream_LE+0x82>
    1a38:	7f de       	rcall	.-770    	; 0x1738 <Endpoint_WaitUntilReady>
    1a3a:	88 23       	and	r24, r24
    1a3c:	21 f3       	breq	.-56     	; 0x1a06 <Endpoint_Write_Stream_LE+0x34>
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <Endpoint_Write_Stream_LE+0x82>
    1a40:	89 91       	ld	r24, Y+
    1a42:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a46:	01 50       	subi	r16, 0x01	; 1
    1a48:	11 09       	sbc	r17, r1
    1a4a:	ff ef       	ldi	r31, 0xFF	; 255
    1a4c:	cf 1a       	sub	r12, r31
    1a4e:	df 0a       	sbc	r13, r31
    1a50:	da cf       	rjmp	.-76     	; 0x1a06 <Endpoint_Write_Stream_LE+0x34>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	08 95       	ret

00001a66 <Endpoint_Read_Stream_LE>:
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	ec 01       	movw	r28, r24
    1a78:	8b 01       	movw	r16, r22
    1a7a:	7a 01       	movw	r14, r20
    1a7c:	5d de       	rcall	.-838    	; 0x1738 <Endpoint_WaitUntilReady>
    1a7e:	81 11       	cpse	r24, r1
    1a80:	33 c0       	rjmp	.+102    	; 0x1ae8 <Endpoint_Read_Stream_LE+0x82>
    1a82:	e1 14       	cp	r14, r1
    1a84:	f1 04       	cpc	r15, r1
    1a86:	39 f0       	breq	.+14     	; 0x1a96 <Endpoint_Read_Stream_LE+0x30>
    1a88:	f7 01       	movw	r30, r14
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	08 1b       	sub	r16, r24
    1a90:	19 0b       	sbc	r17, r25
    1a92:	c8 0f       	add	r28, r24
    1a94:	d9 1f       	adc	r29, r25
    1a96:	c1 2c       	mov	r12, r1
    1a98:	d1 2c       	mov	r13, r1
    1a9a:	01 15       	cp	r16, r1
    1a9c:	11 05       	cpc	r17, r1
    1a9e:	19 f1       	breq	.+70     	; 0x1ae6 <Endpoint_Read_Stream_LE+0x80>
    1aa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1aa4:	85 fd       	sbrc	r24, 5
    1aa6:	16 c0       	rjmp	.+44     	; 0x1ad4 <Endpoint_Read_Stream_LE+0x6e>
    1aa8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1aac:	8b 77       	andi	r24, 0x7B	; 123
    1aae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ab2:	5d d2       	rcall	.+1210   	; 0x1f6e <USB_USBTask>
    1ab4:	e1 14       	cp	r14, r1
    1ab6:	f1 04       	cpc	r15, r1
    1ab8:	49 f0       	breq	.+18     	; 0x1acc <Endpoint_Read_Stream_LE+0x66>
    1aba:	f7 01       	movw	r30, r14
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	c8 0e       	add	r12, r24
    1ac2:	d9 1e       	adc	r13, r25
    1ac4:	d1 82       	std	Z+1, r13	; 0x01
    1ac6:	c0 82       	st	Z, r12
    1ac8:	85 e0       	ldi	r24, 0x05	; 5
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <Endpoint_Read_Stream_LE+0x82>
    1acc:	35 de       	rcall	.-918    	; 0x1738 <Endpoint_WaitUntilReady>
    1ace:	88 23       	and	r24, r24
    1ad0:	21 f3       	breq	.-56     	; 0x1a9a <Endpoint_Read_Stream_LE+0x34>
    1ad2:	0a c0       	rjmp	.+20     	; 0x1ae8 <Endpoint_Read_Stream_LE+0x82>
    1ad4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ad8:	89 93       	st	Y+, r24
    1ada:	01 50       	subi	r16, 0x01	; 1
    1adc:	11 09       	sbc	r17, r1
    1ade:	ff ef       	ldi	r31, 0xFF	; 255
    1ae0:	cf 1a       	sub	r12, r31
    1ae2:	df 0a       	sbc	r13, r31
    1ae4:	da cf       	rjmp	.-76     	; 0x1a9a <Endpoint_Read_Stream_LE+0x34>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	08 95       	ret

00001afa <Endpoint_Read_Stream_BE>:
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	ec 01       	movw	r28, r24
    1b0c:	8b 01       	movw	r16, r22
    1b0e:	7a 01       	movw	r14, r20
    1b10:	13 de       	rcall	.-986    	; 0x1738 <Endpoint_WaitUntilReady>
    1b12:	81 11       	cpse	r24, r1
    1b14:	38 c0       	rjmp	.+112    	; 0x1b86 <Endpoint_Read_Stream_BE+0x8c>
    1b16:	c8 01       	movw	r24, r16
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	c8 0f       	add	r28, r24
    1b1c:	d9 1f       	adc	r29, r25
    1b1e:	e1 14       	cp	r14, r1
    1b20:	f1 04       	cpc	r15, r1
    1b22:	39 f0       	breq	.+14     	; 0x1b32 <Endpoint_Read_Stream_BE+0x38>
    1b24:	f7 01       	movw	r30, r14
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	08 1b       	sub	r16, r24
    1b2c:	19 0b       	sbc	r17, r25
    1b2e:	c8 1b       	sub	r28, r24
    1b30:	d9 0b       	sbc	r29, r25
    1b32:	c1 2c       	mov	r12, r1
    1b34:	d1 2c       	mov	r13, r1
    1b36:	01 15       	cp	r16, r1
    1b38:	11 05       	cpc	r17, r1
    1b3a:	21 f1       	breq	.+72     	; 0x1b84 <Endpoint_Read_Stream_BE+0x8a>
    1b3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b40:	85 fd       	sbrc	r24, 5
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <Endpoint_Read_Stream_BE+0x76>
    1b44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b48:	8b 77       	andi	r24, 0x7B	; 123
    1b4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b4e:	0f d2       	rcall	.+1054   	; 0x1f6e <USB_USBTask>
    1b50:	e1 14       	cp	r14, r1
    1b52:	f1 04       	cpc	r15, r1
    1b54:	49 f0       	breq	.+18     	; 0x1b68 <Endpoint_Read_Stream_BE+0x6e>
    1b56:	f7 01       	movw	r30, r14
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	c8 0e       	add	r12, r24
    1b5e:	d9 1e       	adc	r13, r25
    1b60:	d1 82       	std	Z+1, r13	; 0x01
    1b62:	c0 82       	st	Z, r12
    1b64:	85 e0       	ldi	r24, 0x05	; 5
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <Endpoint_Read_Stream_BE+0x8c>
    1b68:	e7 dd       	rcall	.-1074   	; 0x1738 <Endpoint_WaitUntilReady>
    1b6a:	88 23       	and	r24, r24
    1b6c:	21 f3       	breq	.-56     	; 0x1b36 <Endpoint_Read_Stream_BE+0x3c>
    1b6e:	0b c0       	rjmp	.+22     	; 0x1b86 <Endpoint_Read_Stream_BE+0x8c>
    1b70:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1b74:	88 83       	st	Y, r24
    1b76:	21 97       	sbiw	r28, 0x01	; 1
    1b78:	01 50       	subi	r16, 0x01	; 1
    1b7a:	11 09       	sbc	r17, r1
    1b7c:	ff ef       	ldi	r31, 0xFF	; 255
    1b7e:	cf 1a       	sub	r12, r31
    1b80:	df 0a       	sbc	r13, r31
    1b82:	d9 cf       	rjmp	.-78     	; 0x1b36 <Endpoint_Read_Stream_BE+0x3c>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	08 95       	ret

00001b98 <Endpoint_Write_Control_Stream_LE>:
    1b98:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <USB_ControlRequest+0x6>
    1b9c:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <USB_ControlRequest+0x7>
    1ba0:	26 17       	cp	r18, r22
    1ba2:	37 07       	cpc	r19, r23
    1ba4:	48 f0       	brcs	.+18     	; 0x1bb8 <Endpoint_Write_Control_Stream_LE+0x20>
    1ba6:	61 15       	cp	r22, r1
    1ba8:	71 05       	cpc	r23, r1
    1baa:	39 f4       	brne	.+14     	; 0x1bba <Endpoint_Write_Control_Stream_LE+0x22>
    1bac:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bb0:	2e 77       	andi	r18, 0x7E	; 126
    1bb2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <Endpoint_Write_Control_Stream_LE+0x22>
    1bb8:	b9 01       	movw	r22, r18
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	61 15       	cp	r22, r1
    1bc0:	71 05       	cpc	r23, r1
    1bc2:	61 f1       	breq	.+88     	; 0x1c1c <Endpoint_Write_Control_Stream_LE+0x84>
    1bc4:	8e b3       	in	r24, 0x1e	; 30
    1bc6:	88 23       	and	r24, r24
    1bc8:	c9 f1       	breq	.+114    	; 0x1c3c <Endpoint_Write_Control_Stream_LE+0xa4>
    1bca:	85 30       	cpi	r24, 0x05	; 5
    1bcc:	c9 f1       	breq	.+114    	; 0x1c40 <Endpoint_Write_Control_Stream_LE+0xa8>
    1bce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bd2:	83 fd       	sbrc	r24, 3
    1bd4:	31 c0       	rjmp	.+98     	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0xa0>
    1bd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bda:	82 fd       	sbrc	r24, 2
    1bdc:	27 c0       	rjmp	.+78     	; 0x1c2c <Endpoint_Write_Control_Stream_LE+0x94>
    1bde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be2:	80 ff       	sbrs	r24, 0
    1be4:	ec cf       	rjmp	.-40     	; 0x1bbe <Endpoint_Write_Control_Stream_LE+0x26>
    1be6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1bea:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1bee:	61 15       	cp	r22, r1
    1bf0:	71 05       	cpc	r23, r1
    1bf2:	51 f0       	breq	.+20     	; 0x1c08 <Endpoint_Write_Control_Stream_LE+0x70>
    1bf4:	88 30       	cpi	r24, 0x08	; 8
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	38 f4       	brcc	.+14     	; 0x1c08 <Endpoint_Write_Control_Stream_LE+0x70>
    1bfa:	21 91       	ld	r18, Z+
    1bfc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1c00:	61 50       	subi	r22, 0x01	; 1
    1c02:	71 09       	sbc	r23, r1
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	f3 cf       	rjmp	.-26     	; 0x1bee <Endpoint_Write_Control_Stream_LE+0x56>
    1c08:	21 e0       	ldi	r18, 0x01	; 1
    1c0a:	08 97       	sbiw	r24, 0x08	; 8
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <Endpoint_Write_Control_Stream_LE+0x78>
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c14:	8e 77       	andi	r24, 0x7E	; 126
    1c16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c1a:	d1 cf       	rjmp	.-94     	; 0x1bbe <Endpoint_Write_Control_Stream_LE+0x26>
    1c1c:	21 11       	cpse	r18, r1
    1c1e:	d2 cf       	rjmp	.-92     	; 0x1bc4 <Endpoint_Write_Control_Stream_LE+0x2c>
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <Endpoint_Write_Control_Stream_LE+0x94>
    1c22:	8e b3       	in	r24, 0x1e	; 30
    1c24:	88 23       	and	r24, r24
    1c26:	51 f0       	breq	.+20     	; 0x1c3c <Endpoint_Write_Control_Stream_LE+0xa4>
    1c28:	85 30       	cpi	r24, 0x05	; 5
    1c2a:	51 f0       	breq	.+20     	; 0x1c40 <Endpoint_Write_Control_Stream_LE+0xa8>
    1c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c30:	82 ff       	sbrs	r24, 2
    1c32:	f7 cf       	rjmp	.-18     	; 0x1c22 <Endpoint_Write_Control_Stream_LE+0x8a>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	08 95       	ret
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	08 95       	ret
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	08 95       	ret
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	08 95       	ret

00001c44 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1c44:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <USB_ControlRequest+0x6>
    1c48:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <USB_ControlRequest+0x7>
    1c4c:	26 17       	cp	r18, r22
    1c4e:	37 07       	cpc	r19, r23
    1c50:	48 f0       	brcs	.+18     	; 0x1c64 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1c52:	61 15       	cp	r22, r1
    1c54:	71 05       	cpc	r23, r1
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c58:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c5c:	2e 77       	andi	r18, 0x7E	; 126
    1c5e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <Endpoint_Write_Control_PStream_LE+0x22>
    1c64:	b9 01       	movw	r22, r18
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c6a:	61 15       	cp	r22, r1
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	69 f1       	breq	.+90     	; 0x1cca <Endpoint_Write_Control_PStream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c70:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c72:	88 23       	and	r24, r24
    1c74:	d1 f1       	breq	.+116    	; 0x1cea <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c76:	85 30       	cpi	r24, 0x05	; 5
    1c78:	d1 f1       	breq	.+116    	; 0x1cee <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c7e:	83 fd       	sbrc	r24, 3
    1c80:	32 c0       	rjmp	.+100    	; 0x1ce6 <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1c86:	82 fd       	sbrc	r24, 2
    1c88:	28 c0       	rjmp	.+80     	; 0x1cda <Endpoint_Write_Control_PStream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1c8e:	80 ff       	sbrs	r24, 0
    1c90:	ec cf       	rjmp	.-40     	; 0x1c6a <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1c92:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1c96:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1c9a:	61 15       	cp	r22, r1
    1c9c:	71 05       	cpc	r23, r1
    1c9e:	59 f0       	breq	.+22     	; 0x1cb6 <Endpoint_Write_Control_PStream_LE+0x72>
    1ca0:	88 30       	cpi	r24, 0x08	; 8
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	40 f4       	brcc	.+16     	; 0x1cb6 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ca6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ca8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1cac:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1cae:	61 50       	subi	r22, 0x01	; 1
    1cb0:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	f2 cf       	rjmp	.-28     	; 0x1c9a <Endpoint_Write_Control_PStream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	08 97       	sbiw	r24, 0x08	; 8
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <Endpoint_Write_Control_PStream_LE+0x7a>
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cc2:	8e 77       	andi	r24, 0x7E	; 126
    1cc4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cc8:	d0 cf       	rjmp	.-96     	; 0x1c6a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1cca:	21 11       	cpse	r18, r1
    1ccc:	d1 cf       	rjmp	.-94     	; 0x1c70 <Endpoint_Write_Control_PStream_LE+0x2c>
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <Endpoint_Write_Control_PStream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cd0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cd2:	88 23       	and	r24, r24
    1cd4:	51 f0       	breq	.+20     	; 0x1cea <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cd6:	85 30       	cpi	r24, 0x05	; 5
    1cd8:	51 f0       	breq	.+20     	; 0x1cee <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1cda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1cde:	82 ff       	sbrs	r24, 2
    1ce0:	f7 cf       	rjmp	.-18     	; 0x1cd0 <Endpoint_Write_Control_PStream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1cee:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1cf0:	08 95       	ret

00001cf2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	aa 97       	sbiw	r28, 0x2a	; 42
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	ec e9       	ldi	r30, 0x9C	; 156
    1d0c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d0e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d12:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d14:	22 e0       	ldi	r18, 0x02	; 2
    1d16:	e4 3a       	cpi	r30, 0xA4	; 164
    1d18:	f2 07       	cpc	r31, r18
    1d1a:	c9 f7       	brne	.-14     	; 0x1d0e <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d1c:	0e 94 2f 02 	call	0x45e	; 0x45e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1d24:	83 ff       	sbrs	r24, 3
    1d26:	09 c1       	rjmp	.+530    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d28:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1d2c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <USB_ControlRequest+0x1>
    1d30:	49 2f       	mov	r20, r25
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	4a 30       	cpi	r20, 0x0A	; 10
    1d36:	51 05       	cpc	r21, r1
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <USB_Device_ProcessControlRequest+0x4a>
    1d3a:	ff c0       	rjmp	.+510    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
    1d3c:	fa 01       	movw	r30, r20
    1d3e:	ed 5a       	subi	r30, 0xAD	; 173
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	c7 c2       	rjmp	.+1422   	; 0x22d2 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d44:	82 38       	cpi	r24, 0x82	; 130
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <USB_Device_ProcessControlRequest+0x58>
    1d48:	f8 c0       	rjmp	.+496    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d4a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <USB_ControlRequest+0x4>
    1d4e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d50:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d58:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d5c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d60:	97 7f       	andi	r25, 0xF7	; 247
    1d62:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d66:	85 fb       	bst	r24, 5
    1d68:	88 27       	eor	r24, r24
    1d6a:	80 f9       	bld	r24, 0
    1d6c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1d70:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d74:	ba c0       	rjmp	.+372    	; 0x1eea <USB_Device_ProcessControlRequest+0x1f8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d76:	28 2f       	mov	r18, r24
    1d78:	2d 7f       	andi	r18, 0xFD	; 253
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <USB_Device_ProcessControlRequest+0x8c>
    1d7c:	de c0       	rjmp	.+444    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1d7e:	82 30       	cpi	r24, 0x02	; 2
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <USB_Device_ProcessControlRequest+0x92>
    1d82:	db c0       	rjmp	.+438    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1d84:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
    1d88:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <USB_ControlRequest+0x3>
    1d8c:	21 11       	cpse	r18, r1
    1d8e:	27 c0       	rjmp	.+78     	; 0x1dde <USB_Device_ProcessControlRequest+0xec>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d90:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <USB_ControlRequest+0x4>
    1d94:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <USB_Device_ProcessControlRequest+0xa8>
    1d98:	d0 c0       	rjmp	.+416    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d9a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1d9e:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1da2:	20 ff       	sbrs	r18, 0
    1da4:	1c c0       	rjmp	.+56     	; 0x1dde <USB_Device_ProcessControlRequest+0xec>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1da6:	93 30       	cpi	r25, 0x03	; 3
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <USB_Device_ProcessControlRequest+0xc0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1daa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1dae:	80 62       	ori	r24, 0x20	; 32
    1db0:	14 c0       	rjmp	.+40     	; 0x1dda <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1db2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1db6:	90 61       	ori	r25, 0x10	; 16
    1db8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	a9 01       	movw	r20, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <USB_Device_ProcessControlRequest+0xd6>
    1dc4:	44 0f       	add	r20, r20
    1dc6:	55 1f       	adc	r21, r21
    1dc8:	8a 95       	dec	r24
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <USB_Device_ProcessControlRequest+0xd2>
    1dcc:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1dd0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1dd4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1dd8:	88 60       	ori	r24, 0x08	; 8
    1dda:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1dde:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1de2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1de6:	87 7f       	andi	r24, 0xF7	; 247
    1de8:	83 c0       	rjmp	.+262    	; 0x1ef0 <USB_Device_ProcessControlRequest+0x1fe>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1dea:	81 11       	cpse	r24, r1
    1dec:	a6 c0       	rjmp	.+332    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1dee:	10 91 9e 02 	lds	r17, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
    1df2:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1df4:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1df6:	f8 94       	cli
    1df8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dfc:	87 7f       	andi	r24, 0xF7	; 247
    1dfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e02:	7d dc       	rcall	.-1798   	; 0x16fe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    1e08:	80 ff       	sbrs	r24, 0
    1e0a:	fc cf       	rjmp	.-8      	; 0x1e04 <USB_Device_ProcessControlRequest+0x112>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e0c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e10:	80 78       	andi	r24, 0x80	; 128
    1e12:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1e14:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    1e18:	80 68       	ori	r24, 0x80	; 128
    1e1a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e1e:	11 11       	cpse	r17, r1
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <USB_Device_ProcessControlRequest+0x134>
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <USB_Device_ProcessControlRequest+0x136>
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1e2a:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1e2c:	86 c0       	rjmp	.+268    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e2e:	80 58       	subi	r24, 0x80	; 128
    1e30:	82 30       	cpi	r24, 0x02	; 2
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <USB_Device_ProcessControlRequest+0x144>
    1e34:	82 c0       	rjmp	.+260    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e36:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
    1e3a:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <USB_ControlRequest+0x3>
    1e3e:	8c 3d       	cpi	r24, 0xDC	; 220
    1e40:	53 e0       	ldi	r21, 0x03	; 3
    1e42:	95 07       	cpc	r25, r21
    1e44:	71 f5       	brne	.+92     	; 0x1ea2 <USB_Device_ProcessControlRequest+0x1b0>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e4a:	8a e2       	ldi	r24, 0x2A	; 42
    1e4c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e4e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e50:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e52:	de 01       	movw	r26, r28
    1e54:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e56:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e58:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e5a:	51 e2       	ldi	r21, 0x21	; 33
    1e5c:	e3 2f       	mov	r30, r19
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1e64:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1e66:	20 ff       	sbrs	r18, 0
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <USB_Device_ProcessControlRequest+0x17e>
					{
						SerialByte >>= 4;
    1e6a:	e2 95       	swap	r30
    1e6c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1e6e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1e70:	ef 70       	andi	r30, 0x0F	; 15
    1e72:	8e 2f       	mov	r24, r30
    1e74:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1e76:	ea 30       	cpi	r30, 0x0A	; 10
    1e78:	10 f0       	brcs	.+4      	; 0x1e7e <USB_Device_ProcessControlRequest+0x18c>
    1e7a:	c7 96       	adiw	r24, 0x37	; 55
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <USB_Device_ProcessControlRequest+0x18e>
    1e7e:	c0 96       	adiw	r24, 0x30	; 48
    1e80:	8d 93       	st	X+, r24
    1e82:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e84:	2f 5f       	subi	r18, 0xFF	; 255
    1e86:	24 31       	cpi	r18, 0x14	; 20
    1e88:	49 f7       	brne	.-46     	; 0x1e5c <USB_Device_ProcessControlRequest+0x16a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1e8a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e90:	87 7f       	andi	r24, 0xF7	; 247
    1e92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1e96:	6a e2       	ldi	r22, 0x2A	; 42
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	7c de       	rcall	.-776    	; 0x1b98 <Endpoint_Write_Control_Stream_LE>
    1ea0:	13 c0       	rjmp	.+38     	; 0x1ec8 <USB_Device_ProcessControlRequest+0x1d6>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ea2:	ae 01       	movw	r20, r28
    1ea4:	4f 5f       	subi	r20, 0xFF	; 255
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <USB_ControlRequest+0x4>
    1eac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <CALLBACK_USB_GetDescriptor>
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	89 2b       	or	r24, r25
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <USB_Device_ProcessControlRequest+0x1c6>
    1eb6:	41 c0       	rjmp	.+130    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
    1eb8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ebc:	97 7f       	andi	r25, 0xF7	; 247
    1ebe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	be de       	rcall	.-644    	; 0x1c44 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ecc:	8b 77       	andi	r24, 0x7B	; 123
    1ece:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ed2:	33 c0       	rjmp	.+102    	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ed4:	80 38       	cpi	r24, 0x80	; 128
    1ed6:	89 f5       	brne	.+98     	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ed8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1edc:	87 7f       	andi	r24, 0xF7	; 247
    1ede:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1ee2:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ee6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1eea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1eee:	8e 77       	andi	r24, 0x7E	; 126
    1ef0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1ef4:	04 dc       	rcall	.-2040   	; 0x16fe <Endpoint_ClearStatusStage>
    1ef6:	21 c0       	rjmp	.+66     	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ef8:	81 11       	cpse	r24, r1
    1efa:	1f c0       	rjmp	.+62     	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1efc:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
    1f00:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <USB_ControlRequest+0x3>
    1f04:	99 27       	eor	r25, r25
    1f06:	02 97       	sbiw	r24, 0x02	; 2
    1f08:	c4 f4       	brge	.+48     	; 0x1f3a <USB_Device_ProcessControlRequest+0x248>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f0e:	87 7f       	andi	r24, 0xF7	; 247
    1f10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f14:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
    1f18:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1f1c:	f0 db       	rcall	.-2080   	; 0x16fe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1f1e:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <USB_Device_ConfigurationNumber>
    1f22:	81 11       	cpse	r24, r1
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <USB_Device_ProcessControlRequest+0x240>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f26:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f2a:	87 fd       	sbrc	r24, 7
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <USB_Device_ProcessControlRequest+0x240>
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <USB_Device_ProcessControlRequest+0x242>
    1f32:	84 e0       	ldi	r24, 0x04	; 4
    1f34:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    1f36:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f3e:	83 ff       	sbrs	r24, 3
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <USB_Device_ProcessControlRequest+0x264>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f42:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f46:	80 62       	ori	r24, 0x20	; 32
    1f48:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f50:	87 7f       	andi	r24, 0xF7	; 247
    1f52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1f56:	aa 96       	adiw	r28, 0x2a	; 42
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	08 95       	ret

00001f6c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1f6c:	08 95       	ret

00001f6e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1f6e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1f70:	8e b3       	in	r24, 0x1e	; 30
    1f72:	88 23       	and	r24, r24
    1f74:	59 f0       	breq	.+22     	; 0x1f8c <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1f76:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f7a:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f7c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1f84:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1f86:	b5 de       	rcall	.-662    	; 0x1cf2 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f88:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1f8c:	cf 91       	pop	r28
    1f8e:	08 95       	ret

00001f90 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	ec 01       	movw	r28, r24
    1f98:	fc 01       	movw	r30, r24
    1f9a:	3d 96       	adiw	r30, 0x0d	; 13
    1f9c:	89 e0       	ldi	r24, 0x09	; 9
    1f9e:	df 01       	movw	r26, r30
    1fa0:	1d 92       	st	X+, r1
    1fa2:	8a 95       	dec	r24
    1fa4:	e9 f7       	brne	.-6      	; 0x1fa0 <CDC_Device_ConfigureEndpoints+0x10>
    1fa6:	11 e0       	ldi	r17, 0x01	; 1
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	81 13       	cpse	r24, r17
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <CDC_Device_ConfigureEndpoints+0x28>
    1fae:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	20 e8       	ldi	r18, 0x80	; 128
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <CDC_Device_ConfigureEndpoints+0x36>
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	81 13       	cpse	r24, r17
    1fbc:	06 c0       	rjmp	.+12     	; 0x1fca <CDC_Device_ConfigureEndpoints+0x3a>
    1fbe:	ee 81       	ldd	r30, Y+6	; 0x06
    1fc0:	ff 81       	ldd	r31, Y+7	; 0x07
    1fc2:	98 85       	ldd	r25, Y+8	; 0x08
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	0d c0       	rjmp	.+26     	; 0x1fe4 <CDC_Device_ConfigureEndpoints+0x54>
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	81 17       	cp	r24, r17
    1fce:	29 f0       	breq	.+10     	; 0x1fda <CDC_Device_ConfigureEndpoints+0x4a>
    1fd0:	1f 5f       	subi	r17, 0xFF	; 255
    1fd2:	17 30       	cpi	r17, 0x07	; 7
    1fd4:	49 f7       	brne	.-46     	; 0x1fa8 <CDC_Device_ConfigureEndpoints+0x18>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	22 c0       	rjmp	.+68     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    1fda:	ea 85       	ldd	r30, Y+10	; 0x0a
    1fdc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1fde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fe0:	20 e8       	ldi	r18, 0x80	; 128
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	91 11       	cpse	r25, r1
    1fe6:	94 e0       	ldi	r25, 0x04	; 4
    1fe8:	68 e0       	ldi	r22, 0x08	; 8
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	6e 17       	cp	r22, r30
    1ff0:	7f 07       	cpc	r23, r31
    1ff2:	20 f4       	brcc	.+8      	; 0x1ffc <CDC_Device_ConfigureEndpoints+0x6c>
    1ff4:	4f 5f       	subi	r20, 0xFF	; 255
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	f9 cf       	rjmp	.-14     	; 0x1fee <CDC_Device_ConfigureEndpoints+0x5e>
    1ffc:	42 95       	swap	r20
    1ffe:	40 7f       	andi	r20, 0xF0	; 240
    2000:	92 60       	ori	r25, 0x02	; 2
    2002:	49 2b       	or	r20, r25
    2004:	b0 e4       	ldi	r27, 0x40	; 64
    2006:	8b 9f       	mul	r24, r27
    2008:	c0 01       	movw	r24, r0
    200a:	11 24       	eor	r1, r1
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	21 11       	cpse	r18, r1
    2010:	01 c0       	rjmp	.+2      	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	68 2b       	or	r22, r24
    2016:	81 2f       	mov	r24, r17
    2018:	5f db       	rcall	.-2370   	; 0x16d8 <Endpoint_ConfigureEndpoint_Prv>
    201a:	81 11       	cpse	r24, r1
    201c:	d9 cf       	rjmp	.-78     	; 0x1fd0 <CDC_Device_ConfigureEndpoints+0x40>
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	08 95       	ret

00002026 <CDC_Device_SendByte>:
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	2e b3       	in	r18, 0x1e	; 30
    202e:	24 30       	cpi	r18, 0x04	; 4
    2030:	f1 f4       	brne	.+60     	; 0x206e <CDC_Device_SendByte+0x48>
    2032:	fc 01       	movw	r30, r24
    2034:	07 85       	ldd	r16, Z+15	; 0x0f
    2036:	10 89       	ldd	r17, Z+16	; 0x10
    2038:	21 89       	ldd	r18, Z+17	; 0x11
    203a:	32 89       	ldd	r19, Z+18	; 0x12
    203c:	01 2b       	or	r16, r17
    203e:	02 2b       	or	r16, r18
    2040:	03 2b       	or	r16, r19
    2042:	a9 f0       	breq	.+42     	; 0x206e <CDC_Device_SendByte+0x48>
    2044:	c6 2f       	mov	r28, r22
    2046:	81 81       	ldd	r24, Z+1	; 0x01
    2048:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    204c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2050:	85 ff       	sbrs	r24, 5
    2052:	04 c0       	rjmp	.+8      	; 0x205c <CDC_Device_SendByte+0x36>
    2054:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0a c0       	rjmp	.+20     	; 0x2070 <CDC_Device_SendByte+0x4a>
    205c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2060:	8e 77       	andi	r24, 0x7E	; 126
    2062:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2066:	68 db       	rcall	.-2352   	; 0x1738 <Endpoint_WaitUntilReady>
    2068:	88 23       	and	r24, r24
    206a:	a1 f3       	breq	.-24     	; 0x2054 <CDC_Device_SendByte+0x2e>
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <CDC_Device_SendByte+0x4a>
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <CDC_Device_Flush>:
    2078:	2e b3       	in	r18, 0x1e	; 30
    207a:	24 30       	cpi	r18, 0x04	; 4
    207c:	29 f5       	brne	.+74     	; 0x20c8 <CDC_Device_Flush+0x50>
    207e:	fc 01       	movw	r30, r24
    2080:	47 85       	ldd	r20, Z+15	; 0x0f
    2082:	50 89       	ldd	r21, Z+16	; 0x10
    2084:	61 89       	ldd	r22, Z+17	; 0x11
    2086:	72 89       	ldd	r23, Z+18	; 0x12
    2088:	45 2b       	or	r20, r21
    208a:	46 2b       	or	r20, r22
    208c:	47 2b       	or	r20, r23
    208e:	e1 f0       	breq	.+56     	; 0x20c8 <CDC_Device_Flush+0x50>
    2090:	81 81       	ldd	r24, Z+1	; 0x01
    2092:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2096:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    209a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    209e:	89 2b       	or	r24, r25
    20a0:	89 f0       	breq	.+34     	; 0x20c4 <CDC_Device_Flush+0x4c>
    20a2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20aa:	8e 77       	andi	r24, 0x7E	; 126
    20ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20b0:	95 fd       	sbrc	r25, 5
    20b2:	08 c0       	rjmp	.+16     	; 0x20c4 <CDC_Device_Flush+0x4c>
    20b4:	41 db       	rcall	.-2430   	; 0x1738 <Endpoint_WaitUntilReady>
    20b6:	81 11       	cpse	r24, r1
    20b8:	08 c0       	rjmp	.+16     	; 0x20ca <CDC_Device_Flush+0x52>
    20ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20be:	8e 77       	andi	r24, 0x7E	; 126
    20c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	08 95       	ret
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	08 95       	ret

000020cc <CDC_Device_USBTask>:
    20cc:	2e b3       	in	r18, 0x1e	; 30
    20ce:	24 30       	cpi	r18, 0x04	; 4
    20d0:	51 f4       	brne	.+20     	; 0x20e6 <CDC_Device_USBTask+0x1a>
    20d2:	fc 01       	movw	r30, r24
    20d4:	47 85       	ldd	r20, Z+15	; 0x0f
    20d6:	50 89       	ldd	r21, Z+16	; 0x10
    20d8:	61 89       	ldd	r22, Z+17	; 0x11
    20da:	72 89       	ldd	r23, Z+18	; 0x12
    20dc:	45 2b       	or	r20, r21
    20de:	46 2b       	or	r20, r22
    20e0:	47 2b       	or	r20, r23
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <CDC_Device_USBTask+0x1a>
    20e4:	c9 cf       	rjmp	.-110    	; 0x2078 <CDC_Device_Flush>
    20e6:	08 95       	ret

000020e8 <CDC_Device_ReceiveByte>:
    20e8:	2e b3       	in	r18, 0x1e	; 30
    20ea:	24 30       	cpi	r18, 0x04	; 4
    20ec:	19 f0       	breq	.+6      	; 0x20f4 <CDC_Device_ReceiveByte+0xc>
    20ee:	8f ef       	ldi	r24, 0xFF	; 255
    20f0:	9f ef       	ldi	r25, 0xFF	; 255
    20f2:	08 95       	ret
    20f4:	fc 01       	movw	r30, r24
    20f6:	47 85       	ldd	r20, Z+15	; 0x0f
    20f8:	50 89       	ldd	r21, Z+16	; 0x10
    20fa:	61 89       	ldd	r22, Z+17	; 0x11
    20fc:	72 89       	ldd	r23, Z+18	; 0x12
    20fe:	45 2b       	or	r20, r21
    2100:	46 2b       	or	r20, r22
    2102:	47 2b       	or	r20, r23
    2104:	a1 f3       	breq	.-24     	; 0x20ee <CDC_Device_ReceiveByte+0x6>
    2106:	85 81       	ldd	r24, Z+5	; 0x05
    2108:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    210c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2110:	82 ff       	sbrs	r24, 2
    2112:	ed cf       	rjmp	.-38     	; 0x20ee <CDC_Device_ReceiveByte+0x6>
    2114:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2118:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    211c:	89 2b       	or	r24, r25
    211e:	21 f0       	breq	.+8      	; 0x2128 <__stack+0x29>
    2120:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 c0       	rjmp	.+4      	; 0x212c <__stack+0x2d>
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	9f ef       	ldi	r25, 0xFF	; 255
    212c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2130:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2134:	23 2b       	or	r18, r19
    2136:	29 f4       	brne	.+10     	; 0x2142 <__stack+0x43>
    2138:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    213c:	2b 77       	andi	r18, 0x7B	; 123
    213e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2142:	08 95       	ret

00002144 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    2144:	08 95       	ret

00002146 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    214c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    2150:	83 ff       	sbrs	r24, 3
    2152:	9a c0       	rjmp	.+308    	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2154:	88 81       	ld	r24, Y
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <USB_ControlRequest+0x4>
    215c:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <USB_ControlRequest+0x5>
    2160:	28 17       	cp	r18, r24
    2162:	39 07       	cpc	r19, r25
    2164:	09 f0       	breq	.+2      	; 0x2168 <CDC_Device_ProcessControlRequest+0x22>
    2166:	90 c0       	rjmp	.+288    	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
	  return;

	switch (USB_ControlRequest.bRequest)
    2168:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <USB_ControlRequest+0x1>
    216c:	81 32       	cpi	r24, 0x21	; 33
    216e:	59 f0       	breq	.+22     	; 0x2186 <CDC_Device_ProcessControlRequest+0x40>
    2170:	18 f4       	brcc	.+6      	; 0x2178 <CDC_Device_ProcessControlRequest+0x32>
    2172:	80 32       	cpi	r24, 0x20	; 32
    2174:	d1 f1       	breq	.+116    	; 0x21ea <CDC_Device_ProcessControlRequest+0xa4>
    2176:	88 c0       	rjmp	.+272    	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
    2178:	82 32       	cpi	r24, 0x22	; 34
    217a:	09 f4       	brne	.+2      	; 0x217e <CDC_Device_ProcessControlRequest+0x38>
    217c:	64 c0       	rjmp	.+200    	; 0x2246 <CDC_Device_ProcessControlRequest+0x100>
    217e:	83 32       	cpi	r24, 0x23	; 35
    2180:	09 f4       	brne	.+2      	; 0x2184 <CDC_Device_ProcessControlRequest+0x3e>
    2182:	72 c0       	rjmp	.+228    	; 0x2268 <CDC_Device_ProcessControlRequest+0x122>
    2184:	81 c0       	rjmp	.+258    	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2186:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <USB_ControlRequest>
    218a:	81 3a       	cpi	r24, 0xA1	; 161
    218c:	09 f0       	breq	.+2      	; 0x2190 <CDC_Device_ProcessControlRequest+0x4a>
    218e:	7c c0       	rjmp	.+248    	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2190:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2194:	87 7f       	andi	r24, 0xF7	; 247
    2196:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    219a:	8f 85       	ldd	r24, Y+15	; 0x0f
    219c:	98 89       	ldd	r25, Y+16	; 0x10
    219e:	a9 89       	ldd	r26, Y+17	; 0x11
    21a0:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    21a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    21a6:	49 2f       	mov	r20, r25
    21a8:	5a 2f       	mov	r21, r26
    21aa:	6b 2f       	mov	r22, r27
    21ac:	77 27       	eor	r23, r23
    21ae:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    21b2:	ad 01       	movw	r20, r26
    21b4:	66 27       	eor	r22, r22
    21b6:	77 27       	eor	r23, r23
    21b8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    21bc:	8b 2f       	mov	r24, r27
    21be:	99 27       	eor	r25, r25
    21c0:	aa 27       	eor	r26, r26
    21c2:	bb 27       	eor	r27, r27
    21c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    21ce:	8c 89       	ldd	r24, Y+20	; 0x14
    21d0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    21d4:	8d 89       	ldd	r24, Y+21	; 0x15
    21d6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21de:	8e 77       	andi	r24, 0x7E	; 126
    21e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    21e8:	8a ca       	rjmp	.-2796   	; 0x16fe <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    21ea:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <USB_ControlRequest>
    21ee:	81 32       	cpi	r24, 0x21	; 33
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <CDC_Device_ProcessControlRequest+0xae>
    21f2:	4a c0       	rjmp	.+148    	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21f8:	87 7f       	andi	r24, 0xF7	; 247
    21fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    21fe:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2202:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    2204:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2208:	92 2f       	mov	r25, r18
				Data.Bytes[2] = UEDATX;
    220a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    220e:	a2 2f       	mov	r26, r18
				Data.Bytes[3] = UEDATX;
    2210:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2214:	b2 2f       	mov	r27, r18
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2216:	8f 87       	std	Y+15, r24	; 0x0f
    2218:	98 8b       	std	Y+16, r25	; 0x10
    221a:	a9 8b       	std	Y+17, r26	; 0x11
    221c:	ba 8b       	std	Y+18, r27	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    221e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2222:	8b 8b       	std	Y+19, r24	; 0x13
    2224:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2228:	8c 8b       	std	Y+20, r24	; 0x14
    222a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    222e:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2234:	8b 77       	andi	r24, 0x7B	; 123
    2236:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    223a:	61 da       	rcall	.-2878   	; 0x16fe <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    223c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2242:	0c 94 3b 02 	jmp	0x476	; 0x476 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2246:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <USB_ControlRequest>
    224a:	81 32       	cpi	r24, 0x21	; 33
    224c:	e9 f4       	brne	.+58     	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    224e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2252:	87 7f       	andi	r24, 0xF7	; 247
    2254:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2258:	52 da       	rcall	.-2908   	; 0x16fe <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    225a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
    225e:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2260:	ce 01       	movw	r24, r28
    2262:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2264:	cf 91       	pop	r28
    2266:	6e cf       	rjmp	.-292    	; 0x2144 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2268:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <USB_ControlRequest>
    226c:	81 32       	cpi	r24, 0x21	; 33
    226e:	61 f4       	brne	.+24     	; 0x2288 <CDC_Device_ProcessControlRequest+0x142>
    2270:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2274:	87 7f       	andi	r24, 0xF7	; 247
    2276:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    227a:	41 da       	rcall	.-2942   	; 0x16fe <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    227c:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <USB_ControlRequest+0x2>
			}

			break;
	}
}
    2280:	ce 01       	movw	r24, r28
    2282:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2284:	cf 91       	pop	r28
    2286:	5e cf       	rjmp	.-324    	; 0x2144 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <__udivmodsi4>:
    228e:	a1 e2       	ldi	r26, 0x21	; 33
    2290:	1a 2e       	mov	r1, r26
    2292:	aa 1b       	sub	r26, r26
    2294:	bb 1b       	sub	r27, r27
    2296:	fd 01       	movw	r30, r26
    2298:	0d c0       	rjmp	.+26     	; 0x22b4 <__udivmodsi4_ep>

0000229a <__udivmodsi4_loop>:
    229a:	aa 1f       	adc	r26, r26
    229c:	bb 1f       	adc	r27, r27
    229e:	ee 1f       	adc	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	a2 17       	cp	r26, r18
    22a4:	b3 07       	cpc	r27, r19
    22a6:	e4 07       	cpc	r30, r20
    22a8:	f5 07       	cpc	r31, r21
    22aa:	20 f0       	brcs	.+8      	; 0x22b4 <__udivmodsi4_ep>
    22ac:	a2 1b       	sub	r26, r18
    22ae:	b3 0b       	sbc	r27, r19
    22b0:	e4 0b       	sbc	r30, r20
    22b2:	f5 0b       	sbc	r31, r21

000022b4 <__udivmodsi4_ep>:
    22b4:	66 1f       	adc	r22, r22
    22b6:	77 1f       	adc	r23, r23
    22b8:	88 1f       	adc	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	1a 94       	dec	r1
    22be:	69 f7       	brne	.-38     	; 0x229a <__udivmodsi4_loop>
    22c0:	60 95       	com	r22
    22c2:	70 95       	com	r23
    22c4:	80 95       	com	r24
    22c6:	90 95       	com	r25
    22c8:	9b 01       	movw	r18, r22
    22ca:	ac 01       	movw	r20, r24
    22cc:	bd 01       	movw	r22, r26
    22ce:	cf 01       	movw	r24, r30
    22d0:	08 95       	ret

000022d2 <__tablejump2__>:
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	00 24       	eor	r0, r0
    22d8:	00 1c       	adc	r0, r0
    22da:	0b be       	out	0x3b, r0	; 59
    22dc:	07 90       	elpm	r0, Z+
    22de:	f6 91       	elpm	r31, Z
    22e0:	e0 2d       	mov	r30, r0
    22e2:	09 94       	ijmp

000022e4 <eeprom_read_byte>:
    22e4:	f9 99       	sbic	0x1f, 1	; 31
    22e6:	fe cf       	rjmp	.-4      	; 0x22e4 <eeprom_read_byte>
    22e8:	92 bd       	out	0x22, r25	; 34
    22ea:	81 bd       	out	0x21, r24	; 33
    22ec:	f8 9a       	sbi	0x1f, 0	; 31
    22ee:	99 27       	eor	r25, r25
    22f0:	80 b5       	in	r24, 0x20	; 32
    22f2:	08 95       	ret

000022f4 <eeprom_update_byte>:
    22f4:	26 2f       	mov	r18, r22

000022f6 <eeprom_update_r18>:
    22f6:	f9 99       	sbic	0x1f, 1	; 31
    22f8:	fe cf       	rjmp	.-4      	; 0x22f6 <eeprom_update_r18>
    22fa:	92 bd       	out	0x22, r25	; 34
    22fc:	81 bd       	out	0x21, r24	; 33
    22fe:	f8 9a       	sbi	0x1f, 0	; 31
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	00 b4       	in	r0, 0x20	; 32
    2304:	02 16       	cp	r0, r18
    2306:	39 f0       	breq	.+14     	; 0x2316 <eeprom_update_r18+0x20>
    2308:	1f ba       	out	0x1f, r1	; 31
    230a:	20 bd       	out	0x20, r18	; 32
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	fa 9a       	sbi	0x1f, 2	; 31
    2312:	f9 9a       	sbi	0x1f, 1	; 31
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	08 95       	ret

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
