
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001112  000011a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011a  0080011a  000011c0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058b2  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ced  00000000  00000000  00006d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000301a  00000000  00000000  00008a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  0000ba48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002420  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031f3  00000000  00000000  0000e668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0001185b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	00 c1       	rjmp	.+512    	; 0x206 <__bad_interrupt>
       6:	00 00       	nop
       8:	fe c0       	rjmp	.+508    	; 0x206 <__bad_interrupt>
       a:	00 00       	nop
       c:	fc c0       	rjmp	.+504    	; 0x206 <__bad_interrupt>
       e:	00 00       	nop
      10:	fa c0       	rjmp	.+500    	; 0x206 <__bad_interrupt>
      12:	00 00       	nop
      14:	f8 c0       	rjmp	.+496    	; 0x206 <__bad_interrupt>
      16:	00 00       	nop
      18:	f6 c0       	rjmp	.+492    	; 0x206 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f4 c0       	rjmp	.+488    	; 0x206 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f2 c0       	rjmp	.+484    	; 0x206 <__bad_interrupt>
      22:	00 00       	nop
      24:	f0 c0       	rjmp	.+480    	; 0x206 <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c2       	rjmp	.+1504   	; 0x60a <__vector_10>
      2a:	00 00       	nop
      2c:	ec c0       	rjmp	.+472    	; 0x206 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ea c0       	rjmp	.+468    	; 0x206 <__bad_interrupt>
      32:	00 00       	nop
      34:	e8 c0       	rjmp	.+464    	; 0x206 <__bad_interrupt>
      36:	00 00       	nop
      38:	e6 c0       	rjmp	.+460    	; 0x206 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e4 c0       	rjmp	.+456    	; 0x206 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e2 c0       	rjmp	.+452    	; 0x206 <__bad_interrupt>
      42:	00 00       	nop
      44:	e0 c0       	rjmp	.+448    	; 0x206 <__bad_interrupt>
      46:	00 00       	nop
      48:	de c0       	rjmp	.+444    	; 0x206 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dc c0       	rjmp	.+440    	; 0x206 <__bad_interrupt>
      4e:	00 00       	nop
      50:	da c0       	rjmp	.+436    	; 0x206 <__bad_interrupt>
      52:	00 00       	nop
      54:	d8 c0       	rjmp	.+432    	; 0x206 <__bad_interrupt>
      56:	00 00       	nop
      58:	d6 c0       	rjmp	.+428    	; 0x206 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d4 c0       	rjmp	.+424    	; 0x206 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d2 c0       	rjmp	.+420    	; 0x206 <__bad_interrupt>
      62:	00 00       	nop
      64:	d0 c0       	rjmp	.+416    	; 0x206 <__bad_interrupt>
      66:	00 00       	nop
      68:	ce c0       	rjmp	.+412    	; 0x206 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	cc c0       	rjmp	.+408    	; 0x206 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ca c0       	rjmp	.+404    	; 0x206 <__bad_interrupt>
      72:	00 00       	nop
      74:	c8 c0       	rjmp	.+400    	; 0x206 <__bad_interrupt>
      76:	00 00       	nop
      78:	c6 c0       	rjmp	.+396    	; 0x206 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c4 c0       	rjmp	.+392    	; 0x206 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c2 c0       	rjmp	.+388    	; 0x206 <__bad_interrupt>
      82:	00 00       	nop
      84:	c0 c0       	rjmp	.+384    	; 0x206 <__bad_interrupt>
      86:	00 00       	nop
      88:	be c0       	rjmp	.+380    	; 0x206 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bc c0       	rjmp	.+376    	; 0x206 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ba c0       	rjmp	.+372    	; 0x206 <__bad_interrupt>
      92:	00 00       	nop
      94:	b8 c0       	rjmp	.+368    	; 0x206 <__bad_interrupt>
      96:	00 00       	nop
      98:	2e 05       	cpc	r18, r14
      9a:	50 05       	cpc	r21, r0
      9c:	3d 06       	cpc	r3, r29
      9e:	50 05       	cpc	r21, r0
      a0:	3d 06       	cpc	r3, r29
      a2:	95 05       	cpc	r25, r5
      a4:	b8 05       	cpc	r27, r8
      a6:	3d 06       	cpc	r3, r29
      a8:	0a 06       	cpc	r0, r26
      aa:	1c 06       	cpc	r1, r28

000000ac <ProductString>:
      ac:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
      bc:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
      cc:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
      dc:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000000e8 <ManufacturerString>:
      e8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      f8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000102 <LanguageString>:
     102:	04 03 09 04                                         ....

00000106 <ConfigurationDescriptor>:
     106:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
     116:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     126:	00 01 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     136:	01 22 3a 00 07 05 83 03 08 00 01                    .":........

00000141 <DeviceDescriptor>:
     141:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     151:	00 01                                               ..

00000153 <KeyboardReport>:
     153:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     163:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     173:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     183:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

00000192 <MouseReport>:
     192:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     1a2:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     1b2:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     1c2:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d0 e2       	ldi	r29, 0x20	; 32
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	e2 e1       	ldi	r30, 0x12	; 18
     1e0:	f1 e1       	ldi	r31, 0x11	; 17
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	0b bf       	out	0x3b, r16	; 59
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x14>
     1e8:	07 90       	elpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	aa 31       	cpi	r26, 0x1A	; 26
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0x10>

000001f2 <__do_clear_bss>:
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	aa e1       	ldi	r26, 0x1A	; 26
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a2 33       	cpi	r26, 0x32	; 50
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	31 d0       	rcall	.+98     	; 0x266 <main>
     204:	84 c7       	rjmp	.+3848   	; 0x110e <_exit>

00000206 <__bad_interrupt>:
     206:	fc ce       	rjmp	.-520    	; 0x0 <__vectors>

00000208 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     208:	9b b1       	in	r25, 0x0b	; 11
     20a:	9f 70       	andi	r25, 0x0F	; 15
     20c:	89 2b       	or	r24, r25
     20e:	8b b9       	out	0x0b, r24	; 11
     210:	08 95       	ret

00000212 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     212:	84 b7       	in	r24, 0x34	; 52
     214:	87 7f       	andi	r24, 0xF7	; 247
     216:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	a8 95       	wdr
     21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	88 61       	ori	r24, 0x18	; 24
     224:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     228:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     22c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	80 e8       	ldi	r24, 0x80	; 128
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     23a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     23e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     240:	84 b1       	in	r24, 0x04	; 4
     242:	8f 71       	andi	r24, 0x1F	; 31
     244:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     246:	8d b1       	in	r24, 0x0d	; 13
     248:	8f 7c       	andi	r24, 0xCF	; 207
     24a:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     24c:	85 b1       	in	r24, 0x05	; 5
     24e:	80 6e       	ori	r24, 0xE0	; 224
     250:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     252:	8e b1       	in	r24, 0x0e	; 14
     254:	80 63       	ori	r24, 0x30	; 48
     256:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     258:	8a b1       	in	r24, 0x0a	; 10
     25a:	80 6f       	ori	r24, 0xF0	; 240
     25c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     25e:	8b b1       	in	r24, 0x0b	; 11
     260:	8f 70       	andi	r24, 0x0F	; 15
     262:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
     264:	bc c1       	rjmp	.+888    	; 0x5de <USB_Init>

00000266 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     266:	d5 df       	rcall	.-86     	; 0x212 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     268:	80 e1       	ldi	r24, 0x10	; 16
     26a:	ce df       	rcall	.-100    	; 0x208 <LEDs_SetAllLEDs>
	sei();
     26c:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     26e:	8d e0       	ldi	r24, 0x0D	; 13
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	81 d6       	rcall	.+3330   	; 0xf76 <HID_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	7e d6       	rcall	.+3324   	; 0xf76 <HID_Device_USBTask>
		USB_USBTask();
     27a:	19 d5       	rcall	.+2610   	; 0xcae <USB_USBTask>
     27c:	f8 cf       	rjmp	.-16     	; 0x26e <main+0x8>

0000027e <EVENT_USB_Device_Connect>:
     27e:	80 ea       	ldi	r24, 0xA0	; 160
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     280:	c3 cf       	rjmp	.-122    	; 0x208 <LEDs_SetAllLEDs>

00000282 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     282:	80 e1       	ldi	r24, 0x10	; 16
     284:	c1 cf       	rjmp	.-126    	; 0x208 <LEDs_SetAllLEDs>

00000286 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     286:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     288:	8d e0       	ldi	r24, 0x0D	; 13
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	49 d6       	rcall	.+3218   	; 0xf20 <HID_Device_ConfigureEndpoints>
     28e:	c8 2f       	mov	r28, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	45 d6       	rcall	.+3210   	; 0xf20 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     296:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     29a:	94 60       	ori	r25, 0x04	; 4
     29c:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2a0:	cc 23       	and	r28, r28
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <EVENT_USB_Device_ConfigurationChanged+0x22>
     2a4:	81 11       	cpse	r24, r1
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <EVENT_USB_Device_ConfigurationChanged+0x26>
     2a8:	80 e9       	ldi	r24, 0x90	; 144
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <EVENT_USB_Device_ConfigurationChanged+0x28>
}
     2ac:	80 e6       	ldi	r24, 0x60	; 96
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ae:	cf 91       	pop	r28
     2b0:	ab cf       	rjmp	.-170    	; 0x208 <LEDs_SetAllLEDs>

000002b2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     2b2:	8d e0       	ldi	r24, 0x0D	; 13
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0d d5       	rcall	.+2586   	; 0xcd2 <HID_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0a c5       	rjmp	.+2580   	; 0xcd2 <HID_Device_ProcessControlRequest>

000002be <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2be:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Keyboard_HID_Interface+0xb>
     2c2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Keyboard_HID_Interface+0xc>
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	29 f0       	breq	.+10     	; 0x2d4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Keyboard_HID_Interface+0xc>
     2d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Keyboard_HID_Interface+0xb>
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     2d8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     2dc:	00 97       	sbiw	r24, 0x00	; 0
     2de:	29 f0       	breq	.+10     	; 0x2ea <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     2e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     2ea:	08 95       	ret

000002ec <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	f9 01       	movw	r30, r18
     2f2:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     2f4:	33 b1       	in	r19, 0x03	; 3
     2f6:	2c b1       	in	r18, 0x0c	; 12
     2f8:	20 95       	com	r18
     2fa:	20 73       	andi	r18, 0x30	; 48
     2fc:	26 95       	lsr	r18
     2fe:	30 95       	com	r19
     300:	30 7e       	andi	r19, 0xE0	; 224
     302:	32 2b       	or	r19, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     304:	2c b1       	in	r18, 0x0c	; 12
     306:	20 95       	com	r18
     308:	24 70       	andi	r18, 0x04	; 4
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Determine which interface must have its report generated */
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     30a:	8d 50       	subi	r24, 0x0D	; 13
     30c:	91 40       	sbci	r25, 0x01	; 1
     30e:	e9 f4       	brne	.+58     	; 0x34a <CALLBACK_HID_Device_CreateHIDReport+0x5e>
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

		/* If first board button not being held down, no keyboard report */
		if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
     310:	22 23       	and	r18, r18
     312:	c1 f1       	breq	.+112    	; 0x384 <CALLBACK_HID_Device_CreateHIDReport+0x98>
		  return 0;

		KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	80 83       	st	Z, r24

		if (JoyStatus_LCL & JOY_UP)
     318:	37 ff       	sbrs	r19, 7
     31a:	02 c0       	rjmp	.+4      	; 0x320 <CALLBACK_HID_Device_CreateHIDReport+0x34>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	03 c0       	rjmp	.+6      	; 0x326 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
		else if (JoyStatus_LCL & JOY_DOWN)
     320:	34 ff       	sbrs	r19, 4
     322:	02 c0       	rjmp	.+4      	; 0x328 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     328:	36 ff       	sbrs	r19, 6
     32a:	02 c0       	rjmp	.+4      	; 0x330 <CALLBACK_HID_Device_CreateHIDReport+0x44>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     32c:	86 e0       	ldi	r24, 0x06	; 6
     32e:	03 c0       	rjmp	.+6      	; 0x336 <CALLBACK_HID_Device_CreateHIDReport+0x4a>
		else if (JoyStatus_LCL & JOY_RIGHT)
     330:	33 ff       	sbrs	r19, 3
     332:	02 c0       	rjmp	.+4      	; 0x338 <CALLBACK_HID_Device_CreateHIDReport+0x4c>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     334:	87 e0       	ldi	r24, 0x07	; 7
     336:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_PRESS)
     338:	35 ff       	sbrs	r19, 5
     33a:	02 c0       	rjmp	.+4      	; 0x340 <CALLBACK_HID_Device_CreateHIDReport+0x54>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	82 83       	std	Z+2, r24	; 0x02

		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	8d 93       	st	X+, r24
     346:	9c 93       	st	X, r25
     348:	1d c0       	rjmp	.+58     	; 0x384 <CALLBACK_HID_Device_CreateHIDReport+0x98>
	else
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

		/* If first board button being held down, no mouse report */
		if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     34a:	21 11       	cpse	r18, r1
     34c:	1b c0       	rjmp	.+54     	; 0x384 <CALLBACK_HID_Device_CreateHIDReport+0x98>
		  return 0;

		if (JoyStatus_LCL & JOY_UP)
     34e:	37 ff       	sbrs	r19, 7
     350:	02 c0       	rjmp	.+4      	; 0x356 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
		  MouseReport->Y = -1;
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	03 c0       	rjmp	.+6      	; 0x35c <CALLBACK_HID_Device_CreateHIDReport+0x70>
		else if (JoyStatus_LCL & JOY_DOWN)
     356:	34 ff       	sbrs	r19, 4
     358:	02 c0       	rjmp	.+4      	; 0x35e <CALLBACK_HID_Device_CreateHIDReport+0x72>
		  MouseReport->Y =  1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     35e:	36 ff       	sbrs	r19, 6
     360:	02 c0       	rjmp	.+4      	; 0x366 <CALLBACK_HID_Device_CreateHIDReport+0x7a>
		  MouseReport->X = -1;
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	03 c0       	rjmp	.+6      	; 0x36c <CALLBACK_HID_Device_CreateHIDReport+0x80>
		else if (JoyStatus_LCL & JOY_RIGHT)
     366:	33 ff       	sbrs	r19, 3
     368:	02 c0       	rjmp	.+4      	; 0x36e <CALLBACK_HID_Device_CreateHIDReport+0x82>
		  MouseReport->X =  1;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	81 83       	std	Z+1, r24	; 0x01

		if (JoyStatus_LCL & JOY_PRESS)
     36e:	35 ff       	sbrs	r19, 5
     370:	03 c0       	rjmp	.+6      	; 0x378 <CALLBACK_HID_Device_CreateHIDReport+0x8c>
		  MouseReport->Button |= (1 << 0);
     372:	80 81       	ld	r24, Z
     374:	81 60       	ori	r24, 0x01	; 1
     376:	80 83       	st	Z, r24

		*ReportSize = sizeof(USB_MouseReport_Data_t);
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	8d 93       	st	X+, r24
     37e:	9c 93       	st	X, r25
		return true;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	01 c0       	rjmp	.+2      	; 0x386 <CALLBACK_HID_Device_CreateHIDReport+0x9a>
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

		/* If first board button not being held down, no keyboard report */
		if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
		  return 0;
     384:	80 e0       	ldi	r24, 0x00	; 0
		  MouseReport->Button |= (1 << 0);

		*ReportSize = sizeof(USB_MouseReport_Data_t);
		return true;
	}
}
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     38c:	8d 50       	subi	r24, 0x0D	; 13
     38e:	91 40       	sbci	r25, 0x01	; 1
     390:	61 f4       	brne	.+24     	; 0x3aa <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     392:	f9 01       	movw	r30, r18
     394:	90 81       	ld	r25, Z
     396:	90 ff       	sbrs	r25, 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <CALLBACK_HID_Device_ProcessHIDReport+0x12>
		  LEDMask |= LEDS_LED1;
     39a:	80 e1       	ldi	r24, 0x10	; 16
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <CALLBACK_HID_Device_ProcessHIDReport+0x14>
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
     39e:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
		  LEDMask |= LEDS_LED1;

		if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     3a0:	91 fd       	sbrc	r25, 1
		  LEDMask |= LEDS_LED3;
     3a2:	80 68       	ori	r24, 0x80	; 128

		if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     3a4:	92 fd       	sbrc	r25, 2
		  LEDMask |= LEDS_LED4;
     3a6:	80 64       	ori	r24, 0x40	; 64

		LEDs_SetAllLEDs(LEDMask);
     3a8:	2f cf       	rjmp	.-418    	; 0x208 <LEDs_SetAllLEDs>
     3aa:	08 95       	ret

000003ac <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ac:	29 2f       	mov	r18, r25
     3ae:	33 27       	eor	r19, r19
     3b0:	23 30       	cpi	r18, 0x03	; 3
     3b2:	31 05       	cpc	r19, r1
     3b4:	c1 f0       	breq	.+48     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x3a>
     3b6:	58 f4       	brcc	.+22     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x22>
     3b8:	21 30       	cpi	r18, 0x01	; 1
     3ba:	31 05       	cpc	r19, r1
     3bc:	79 f0       	breq	.+30     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x30>
     3be:	22 30       	cpi	r18, 0x02	; 2
     3c0:	31 05       	cpc	r19, r1
     3c2:	91 f5       	brne	.+100    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3c4:	8b e3       	ldi	r24, 0x3B	; 59
     3c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3c8:	26 e0       	ldi	r18, 0x06	; 6
     3ca:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3cc:	39 c0       	rjmp	.+114    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ce:	21 32       	cpi	r18, 0x21	; 33
     3d0:	31 05       	cpc	r19, r1
     3d2:	e1 f0       	breq	.+56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3d4:	22 32       	cpi	r18, 0x22	; 34
     3d6:	31 05       	cpc	r19, r1
     3d8:	01 f1       	breq	.+64     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3da:	26 c0       	rjmp	.+76     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3dc:	82 e1       	ldi	r24, 0x12	; 18
     3de:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3e0:	21 e4       	ldi	r18, 0x41	; 65
     3e2:	31 e0       	ldi	r19, 0x01	; 1
     3e4:	2d c0       	rjmp	.+90     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3e6:	99 27       	eor	r25, r25
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	91 05       	cpc	r25, r1
     3ec:	49 f0       	breq	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ee:	28 f0       	brcs	.+10     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x4e>
     3f0:	02 97       	sbiw	r24, 0x02	; 2
     3f2:	d1 f4       	brne	.+52     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3f4:	ec ea       	ldi	r30, 0xAC	; 172
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3fa:	e2 e0       	ldi	r30, 0x02	; 2
     3fc:	f1 e0       	ldi	r31, 0x01	; 1
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     400:	e8 ee       	ldi	r30, 0xE8	; 232
     402:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     404:	84 91       	lpm	r24, Z
     406:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     408:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     40a:	1a c0       	rjmp	.+52     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
     40c:	89 e0       	ldi	r24, 0x09	; 9
     40e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
     410:	66 23       	and	r22, r22
     412:	79 f0       	breq	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
     414:	21 e3       	ldi	r18, 0x31	; 49
     416:	31 e0       	ldi	r19, 0x01	; 1
     418:	13 c0       	rjmp	.+38     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
     41a:	66 23       	and	r22, r22
     41c:	69 f0       	breq	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
     41e:	8a e3       	ldi	r24, 0x3A	; 58
     420:	90 e0       	ldi	r25, 0x00	; 0
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
     422:	22 e9       	ldi	r18, 0x92	; 146
     424:	31 e0       	ldi	r19, 0x01	; 1
     426:	0c c0       	rjmp	.+24     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	07 c0       	rjmp	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
     432:	28 e1       	ldi	r18, 0x18	; 24
     434:	31 e0       	ldi	r19, 0x01	; 1
     436:	04 c0       	rjmp	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
     438:	8f e3       	ldi	r24, 0x3F	; 63
     43a:	90 e0       	ldi	r25, 0x00	; 0
			
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
     43c:	23 e5       	ldi	r18, 0x53	; 83
     43e:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     440:	fa 01       	movw	r30, r20
     442:	31 83       	std	Z+1, r19	; 0x01
     444:	20 83       	st	Z, r18
	return Size;
}
     446:	08 95       	ret

00000448 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     448:	98 2f       	mov	r25, r24
     44a:	97 30       	cpi	r25, 0x07	; 7
     44c:	68 f5       	brcc	.+90     	; 0x4a8 <Endpoint_ConfigureEndpoint_Prv+0x60>
     44e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     452:	98 17       	cp	r25, r24
     454:	39 f0       	breq	.+14     	; 0x464 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     456:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     45a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     45e:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     462:	03 c0       	rjmp	.+6      	; 0x46a <Endpoint_ConfigureEndpoint_Prv+0x22>
     464:	24 2f       	mov	r18, r20
     466:	76 2f       	mov	r23, r22
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	21 fd       	sbrc	r18, 1
     46c:	02 c0       	rjmp	.+4      	; 0x472 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     46e:	9f 5f       	subi	r25, 0xFF	; 255
     470:	ec cf       	rjmp	.-40     	; 0x44a <Endpoint_ConfigureEndpoint_Prv+0x2>
     472:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     476:	3e 7f       	andi	r19, 0xFE	; 254
     478:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     47c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     480:	3d 7f       	andi	r19, 0xFD	; 253
     482:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     486:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     48a:	31 60       	ori	r19, 0x01	; 1
     48c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     490:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     494:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     498:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     49c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     4a0:	27 fd       	sbrc	r18, 7
     4a2:	e5 cf       	rjmp	.-54     	; 0x46e <Endpoint_ConfigureEndpoint_Prv+0x26>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret
     4a8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	08 95       	ret

000004b0 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4b0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     4b4:	87 ff       	sbrs	r24, 7
     4b6:	11 c0       	rjmp	.+34     	; 0x4da <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     4bc:	82 fd       	sbrc	r24, 2
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4c0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     4c4:	81 11       	cpse	r24, r1
     4c6:	f8 cf       	rjmp	.-16     	; 0x4b8 <Endpoint_ClearStatusStage+0x8>
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4ce:	8b 77       	andi	r24, 0x7B	; 123
     4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4d2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     4d6:	88 23       	and	r24, r24
     4d8:	49 f0       	breq	.+18     	; 0x4ec <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     4de:	80 ff       	sbrs	r24, 0
     4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4e6:	8e 77       	andi	r24, 0x7E	; 126
     4e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4ec:	08 95       	ret

000004ee <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     4ee:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     4f2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     4f6:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     4f8:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     4fc:	84 2f       	mov	r24, r20
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	40 ff       	sbrs	r20, 0
     502:	23 c0       	rjmp	.+70     	; 0x54a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     504:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     508:	80 fd       	sbrc	r24, 0
     50a:	1d c0       	rjmp	.+58     	; 0x546 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     50c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     510:	88 23       	and	r24, r24
     512:	99 f0       	breq	.+38     	; 0x53a <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     514:	85 30       	cpi	r24, 0x05	; 5
     516:	99 f0       	breq	.+38     	; 0x53e <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     518:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     51c:	85 fd       	sbrc	r24, 5
     51e:	11 c0       	rjmp	.+34     	; 0x542 <Endpoint_WaitUntilReady+0x54>
     520:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     524:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     528:	24 17       	cp	r18, r20
     52a:	35 07       	cpc	r19, r21
     52c:	29 f3       	breq	.-54     	; 0x4f8 <Endpoint_WaitUntilReady+0xa>
     52e:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     530:	11 f0       	breq	.+4      	; 0x536 <Endpoint_WaitUntilReady+0x48>
     532:	9a 01       	movw	r18, r20
     534:	e1 cf       	rjmp	.-62     	; 0x4f8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     54a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     54e:	42 ff       	sbrs	r20, 2
     550:	dd cf       	rjmp	.-70     	; 0x50c <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     552:	08 95       	ret

00000554 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     55c:	49 d0       	rcall	.+146    	; 0x5f0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     55e:	50 d0       	rcall	.+160    	; 0x600 <USB_INT_ClearAllInterrupts>
     560:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	88 81       	ld	r24, Y
     566:	8f 77       	andi	r24, 0x7F	; 127
     568:	88 83       	st	Y, r24
     56a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     56c:	80 68       	ori	r24, 0x80	; 128
     56e:	88 83       	st	Y, r24
     570:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     572:	8f 7d       	andi	r24, 0xDF	; 223
     574:	88 83       	st	Y, r24
     576:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	80 68       	ori	r24, 0x80	; 128
     57e:	80 83       	st	Z, r24
     580:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     582:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     586:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     58a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     58e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     592:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     594:	10 e0       	ldi	r17, 0x00	; 0
     596:	f8 01       	movw	r30, r16
     598:	80 81       	ld	r24, Z
     59a:	8b 7f       	andi	r24, 0xFB	; 251
     59c:	80 83       	st	Z, r24
     59e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     5a0:	81 60       	ori	r24, 0x01	; 1
     5a2:	88 83       	st	Y, r24
     5a4:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	4e df       	rcall	.-356    	; 0x448 <Endpoint_ConfigureEndpoint_Prv>
     5ac:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	80 83       	st	Z, r24
     5b6:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	80 83       	st	Z, r24
     5c0:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     5c2:	88 60       	ori	r24, 0x08	; 8
     5c4:	80 83       	st	Z, r24
     5c6:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     5c8:	80 81       	ld	r24, Z
     5ca:	8e 7f       	andi	r24, 0xFE	; 254
     5cc:	80 83       	st	Z, r24
     5ce:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     5d0:	80 61       	ori	r24, 0x10	; 16
     5d2:	88 83       	st	Y, r24
     5d4:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <USB_Init>:
     5de:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	81 60       	ori	r24, 0x01	; 1
     5e6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <USB_IsInitialized>

	USB_ResetInterface();
     5ee:	b2 cf       	rjmp	.-156    	; 0x554 <USB_ResetInterface>

000005f0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     5f0:	e8 ed       	ldi	r30, 0xD8	; 216
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	8c 7f       	andi	r24, 0xFC	; 252
     5f8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     5fa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     5fe:	08 95       	ret

00000600 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     600:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     604:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     608:	08 95       	ret

0000060a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     630:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     634:	82 ff       	sbrs	r24, 2
     636:	0a c0       	rjmp	.+20     	; 0x64c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     638:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     63c:	82 ff       	sbrs	r24, 2
     63e:	06 c0       	rjmp	.+12     	; 0x64c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     640:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     644:	8b 7f       	andi	r24, 0xFB	; 251
     646:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     64a:	39 de       	rcall	.-910    	; 0x2be <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     64c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     650:	80 ff       	sbrs	r24, 0
     652:	1d c0       	rjmp	.+58     	; 0x68e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     654:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     658:	80 ff       	sbrs	r24, 0
     65a:	19 c0       	rjmp	.+50     	; 0x68e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     65c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     660:	8e 7f       	andi	r24, 0xFE	; 254
     662:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     666:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     66a:	80 ff       	sbrs	r24, 0
     66c:	0c c0       	rjmp	.+24     	; 0x686 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     66e:	8c e0       	ldi	r24, 0x0C	; 12
     670:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     672:	8e e0       	ldi	r24, 0x0E	; 14
     674:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     676:	09 b4       	in	r0, 0x29	; 41
     678:	00 fe       	sbrs	r0, 0
     67a:	fd cf       	rjmp	.-6      	; 0x676 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     682:	fd dd       	rcall	.-1030   	; 0x27e <EVENT_USB_Device_Connect>
     684:	04 c0       	rjmp	.+8      	; 0x68e <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     686:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     688:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     68c:	fa dd       	rcall	.-1036   	; 0x282 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     68e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     692:	80 ff       	sbrs	r24, 0
     694:	18 c0       	rjmp	.+48     	; 0x6c6 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     696:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     69a:	80 ff       	sbrs	r24, 0
     69c:	14 c0       	rjmp	.+40     	; 0x6c6 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     69e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6a2:	8e 7f       	andi	r24, 0xFE	; 254
     6a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     6a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6ac:	80 61       	ori	r24, 0x10	; 16
     6ae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     6b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6bc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     6be:	85 e0       	ldi	r24, 0x05	; 5
     6c0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     6c4:	f3 d2       	rcall	.+1510   	; 0xcac <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     6c6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     6ca:	84 ff       	sbrs	r24, 4
     6cc:	2d c0       	rjmp	.+90     	; 0x728 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     6ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6d2:	84 ff       	sbrs	r24, 4
     6d4:	29 c0       	rjmp	.+82     	; 0x728 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     6d6:	8c e0       	ldi	r24, 0x0C	; 12
     6d8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     6da:	8e e0       	ldi	r24, 0x0E	; 14
     6dc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     6de:	09 b4       	in	r0, 0x29	; 41
     6e0:	00 fe       	sbrs	r0, 0
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     6e4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6e8:	8f 7d       	andi	r24, 0xDF	; 223
     6ea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     6ee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     6f2:	8f 7e       	andi	r24, 0xEF	; 239
     6f4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     6f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6fc:	8f 7e       	andi	r24, 0xEF	; 239
     6fe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     702:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     706:	81 60       	ori	r24, 0x01	; 1
     708:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     70c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_Device_ConfigurationNumber>
     710:	81 11       	cpse	r24, r1
     712:	06 c0       	rjmp	.+12     	; 0x720 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     714:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     718:	87 fd       	sbrc	r24, 7
     71a:	02 c0       	rjmp	.+4      	; 0x720 <__vector_10+0x116>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	01 c0       	rjmp	.+2      	; 0x722 <__vector_10+0x118>
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     726:	c2 d2       	rcall	.+1412   	; 0xcac <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     728:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     72c:	83 ff       	sbrs	r24, 3
     72e:	22 c0       	rjmp	.+68     	; 0x774 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     730:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     734:	83 ff       	sbrs	r24, 3
     736:	1e c0       	rjmp	.+60     	; 0x774 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     738:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     73c:	87 7f       	andi	r24, 0xF7	; 247
     73e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     748:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     74c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     750:	8e 7f       	andi	r24, 0xFE	; 254
     752:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     756:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     75a:	8e 7f       	andi	r24, 0xFE	; 254
     75c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     760:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     764:	80 61       	ori	r24, 0x10	; 16
     766:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     76a:	42 e0       	ldi	r20, 0x02	; 2
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	6b de       	rcall	.-810    	; 0x448 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     772:	9c d2       	rcall	.+1336   	; 0xcac <USB_Event_Stub>
     774:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     776:	ef 91       	pop	r30
     778:	bf 91       	pop	r27
     77a:	af 91       	pop	r26
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	7f 91       	pop	r23
     782:	6f 91       	pop	r22
     784:	5f 91       	pop	r21
     786:	4f 91       	pop	r20
     788:	3f 91       	pop	r19
     78a:	2f 91       	pop	r18
     78c:	0f 90       	pop	r0
     78e:	0b be       	out	0x3b, r0	; 59
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	1f 90       	pop	r1
     798:	18 95       	reti

0000079a <Endpoint_Write_Stream_LE>:
     79a:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
     7ac:	8b 01       	movw	r16, r22
     7ae:	7a 01       	movw	r14, r20
     7b0:	9e de       	rcall	.-708    	; 0x4ee <Endpoint_WaitUntilReady>
     7b2:	81 11       	cpse	r24, r1
     7b4:	33 c0       	rjmp	.+102    	; 0x81c <Endpoint_Write_Stream_LE+0x82>
     7b6:	e1 14       	cp	r14, r1
     7b8:	f1 04       	cpc	r15, r1
     7ba:	39 f0       	breq	.+14     	; 0x7ca <Endpoint_Write_Stream_LE+0x30>
     7bc:	f7 01       	movw	r30, r14
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	08 1b       	sub	r16, r24
     7c4:	19 0b       	sbc	r17, r25
     7c6:	c8 0f       	add	r28, r24
     7c8:	d9 1f       	adc	r29, r25
     7ca:	c1 2c       	mov	r12, r1
     7cc:	d1 2c       	mov	r13, r1
     7ce:	01 15       	cp	r16, r1
     7d0:	11 05       	cpc	r17, r1
     7d2:	19 f1       	breq	.+70     	; 0x81a <Endpoint_Write_Stream_LE+0x80>
     7d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7d8:	85 fd       	sbrc	r24, 5
     7da:	16 c0       	rjmp	.+44     	; 0x808 <Endpoint_Write_Stream_LE+0x6e>
     7dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7e0:	8e 77       	andi	r24, 0x7E	; 126
     7e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7e6:	63 d2       	rcall	.+1222   	; 0xcae <USB_USBTask>
     7e8:	e1 14       	cp	r14, r1
     7ea:	f1 04       	cpc	r15, r1
     7ec:	49 f0       	breq	.+18     	; 0x800 <Endpoint_Write_Stream_LE+0x66>
     7ee:	f7 01       	movw	r30, r14
     7f0:	80 81       	ld	r24, Z
     7f2:	91 81       	ldd	r25, Z+1	; 0x01
     7f4:	c8 0e       	add	r12, r24
     7f6:	d9 1e       	adc	r13, r25
     7f8:	d1 82       	std	Z+1, r13	; 0x01
     7fa:	c0 82       	st	Z, r12
     7fc:	85 e0       	ldi	r24, 0x05	; 5
     7fe:	0e c0       	rjmp	.+28     	; 0x81c <Endpoint_Write_Stream_LE+0x82>
     800:	76 de       	rcall	.-788    	; 0x4ee <Endpoint_WaitUntilReady>
     802:	88 23       	and	r24, r24
     804:	21 f3       	breq	.-56     	; 0x7ce <Endpoint_Write_Stream_LE+0x34>
     806:	0a c0       	rjmp	.+20     	; 0x81c <Endpoint_Write_Stream_LE+0x82>
     808:	89 91       	ld	r24, Y+
     80a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     80e:	01 50       	subi	r16, 0x01	; 1
     810:	11 09       	sbc	r17, r1
     812:	ff ef       	ldi	r31, 0xFF	; 255
     814:	cf 1a       	sub	r12, r31
     816:	df 0a       	sbc	r13, r31
     818:	da cf       	rjmp	.-76     	; 0x7ce <Endpoint_Write_Stream_LE+0x34>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	df 90       	pop	r13
     82a:	cf 90       	pop	r12
     82c:	08 95       	ret

0000082e <Endpoint_Write_Control_Stream_LE>:
     82e:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_ControlRequest+0x6>
     832:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <USB_ControlRequest+0x7>
     836:	26 17       	cp	r18, r22
     838:	37 07       	cpc	r19, r23
     83a:	48 f0       	brcs	.+18     	; 0x84e <Endpoint_Write_Control_Stream_LE+0x20>
     83c:	61 15       	cp	r22, r1
     83e:	71 05       	cpc	r23, r1
     840:	39 f4       	brne	.+14     	; 0x850 <Endpoint_Write_Control_Stream_LE+0x22>
     842:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     846:	2e 77       	andi	r18, 0x7E	; 126
     848:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     84c:	01 c0       	rjmp	.+2      	; 0x850 <Endpoint_Write_Control_Stream_LE+0x22>
     84e:	b9 01       	movw	r22, r18
     850:	fc 01       	movw	r30, r24
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	61 15       	cp	r22, r1
     856:	71 05       	cpc	r23, r1
     858:	69 f1       	breq	.+90     	; 0x8b4 <Endpoint_Write_Control_Stream_LE+0x86>
     85a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     85e:	88 23       	and	r24, r24
     860:	d1 f1       	breq	.+116    	; 0x8d6 <Endpoint_Write_Control_Stream_LE+0xa8>
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	d1 f1       	breq	.+116    	; 0x8da <Endpoint_Write_Control_Stream_LE+0xac>
     866:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     86a:	83 fd       	sbrc	r24, 3
     86c:	32 c0       	rjmp	.+100    	; 0x8d2 <Endpoint_Write_Control_Stream_LE+0xa4>
     86e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     872:	82 fd       	sbrc	r24, 2
     874:	28 c0       	rjmp	.+80     	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0x98>
     876:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87a:	80 ff       	sbrs	r24, 0
     87c:	eb cf       	rjmp	.-42     	; 0x854 <Endpoint_Write_Control_Stream_LE+0x26>
     87e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     882:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     886:	61 15       	cp	r22, r1
     888:	71 05       	cpc	r23, r1
     88a:	51 f0       	breq	.+20     	; 0x8a0 <Endpoint_Write_Control_Stream_LE+0x72>
     88c:	88 30       	cpi	r24, 0x08	; 8
     88e:	91 05       	cpc	r25, r1
     890:	38 f4       	brcc	.+14     	; 0x8a0 <Endpoint_Write_Control_Stream_LE+0x72>
     892:	21 91       	ld	r18, Z+
     894:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     898:	61 50       	subi	r22, 0x01	; 1
     89a:	71 09       	sbc	r23, r1
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	f3 cf       	rjmp	.-26     	; 0x886 <Endpoint_Write_Control_Stream_LE+0x58>
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	08 97       	sbiw	r24, 0x08	; 8
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <Endpoint_Write_Control_Stream_LE+0x7a>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ac:	8e 77       	andi	r24, 0x7E	; 126
     8ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8b2:	d0 cf       	rjmp	.-96     	; 0x854 <Endpoint_Write_Control_Stream_LE+0x26>
     8b4:	21 11       	cpse	r18, r1
     8b6:	d1 cf       	rjmp	.-94     	; 0x85a <Endpoint_Write_Control_Stream_LE+0x2c>
     8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0x98>
     8ba:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     8be:	88 23       	and	r24, r24
     8c0:	51 f0       	breq	.+20     	; 0x8d6 <Endpoint_Write_Control_Stream_LE+0xa8>
     8c2:	85 30       	cpi	r24, 0x05	; 5
     8c4:	51 f0       	breq	.+20     	; 0x8da <Endpoint_Write_Control_Stream_LE+0xac>
     8c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ca:	82 ff       	sbrs	r24, 2
     8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <Endpoint_Write_Control_Stream_LE+0x8c>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	08 95       	ret
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	08 95       	ret

000008de <Endpoint_Read_Control_Stream_LE>:
     8de:	61 15       	cp	r22, r1
     8e0:	71 05       	cpc	r23, r1
     8e2:	29 f4       	brne	.+10     	; 0x8ee <Endpoint_Read_Control_Stream_LE+0x10>
     8e4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e8:	2b 77       	andi	r18, 0x7B	; 123
     8ea:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ee:	fc 01       	movw	r30, r24
     8f0:	61 15       	cp	r22, r1
     8f2:	71 05       	cpc	r23, r1
     8f4:	31 f1       	breq	.+76     	; 0x942 <Endpoint_Read_Control_Stream_LE+0x64>
     8f6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     8fa:	88 23       	and	r24, r24
     8fc:	51 f1       	breq	.+84     	; 0x952 <Endpoint_Read_Control_Stream_LE+0x74>
     8fe:	85 30       	cpi	r24, 0x05	; 5
     900:	51 f1       	breq	.+84     	; 0x956 <Endpoint_Read_Control_Stream_LE+0x78>
     902:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     906:	83 fd       	sbrc	r24, 3
     908:	22 c0       	rjmp	.+68     	; 0x94e <Endpoint_Read_Control_Stream_LE+0x70>
     90a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     90e:	82 ff       	sbrs	r24, 2
     910:	ef cf       	rjmp	.-34     	; 0x8f0 <Endpoint_Read_Control_Stream_LE+0x12>
     912:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     916:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     91a:	89 2b       	or	r24, r25
     91c:	31 f0       	breq	.+12     	; 0x92a <Endpoint_Read_Control_Stream_LE+0x4c>
     91e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     922:	81 93       	st	Z+, r24
     924:	61 50       	subi	r22, 0x01	; 1
     926:	71 09       	sbc	r23, r1
     928:	a1 f7       	brne	.-24     	; 0x912 <Endpoint_Read_Control_Stream_LE+0x34>
     92a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     92e:	8b 77       	andi	r24, 0x7B	; 123
     930:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     934:	dd cf       	rjmp	.-70     	; 0x8f0 <Endpoint_Read_Control_Stream_LE+0x12>
     936:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     93a:	88 23       	and	r24, r24
     93c:	51 f0       	breq	.+20     	; 0x952 <Endpoint_Read_Control_Stream_LE+0x74>
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	51 f0       	breq	.+20     	; 0x956 <Endpoint_Read_Control_Stream_LE+0x78>
     942:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     946:	80 ff       	sbrs	r24, 0
     948:	f6 cf       	rjmp	.-20     	; 0x936 <Endpoint_Read_Control_Stream_LE+0x58>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	08 95       	ret
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	08 95       	ret
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	08 95       	ret
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	08 95       	ret

0000095a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     95a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <USB_ControlRequest+0x6>
     95e:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <USB_ControlRequest+0x7>
     962:	26 17       	cp	r18, r22
     964:	37 07       	cpc	r19, r23
     966:	48 f0       	brcs	.+18     	; 0x97a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     968:	61 15       	cp	r22, r1
     96a:	71 05       	cpc	r23, r1
     96c:	39 f4       	brne	.+14     	; 0x97c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     96e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     972:	2e 77       	andi	r18, 0x7E	; 126
     974:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     978:	01 c0       	rjmp	.+2      	; 0x97c <Endpoint_Write_Control_PStream_LE+0x22>
     97a:	b9 01       	movw	r22, r18
     97c:	fc 01       	movw	r30, r24
     97e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     980:	61 15       	cp	r22, r1
     982:	71 05       	cpc	r23, r1
     984:	71 f1       	breq	.+92     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     986:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     98a:	88 23       	and	r24, r24
     98c:	d9 f1       	breq	.+118    	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     98e:	85 30       	cpi	r24, 0x05	; 5
     990:	d9 f1       	breq	.+118    	; 0xa08 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     992:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     996:	83 fd       	sbrc	r24, 3
     998:	33 c0       	rjmp	.+102    	; 0xa00 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     99a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     99e:	82 fd       	sbrc	r24, 2
     9a0:	29 c0       	rjmp	.+82     	; 0x9f4 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     9a6:	80 ff       	sbrs	r24, 0
     9a8:	eb cf       	rjmp	.-42     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     9aa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     9ae:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9b2:	61 15       	cp	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	59 f0       	breq	.+22     	; 0x9ce <Endpoint_Write_Control_PStream_LE+0x74>
     9b8:	88 30       	cpi	r24, 0x08	; 8
     9ba:	91 05       	cpc	r25, r1
     9bc:	40 f4       	brcc	.+16     	; 0x9ce <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9be:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9c0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9c4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9c6:	61 50       	subi	r22, 0x01	; 1
     9c8:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	f2 cf       	rjmp	.-28     	; 0x9b2 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	08 97       	sbiw	r24, 0x08	; 8
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x7c>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9da:	8e 77       	andi	r24, 0x7E	; 126
     9dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9e0:	cf cf       	rjmp	.-98     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9e2:	21 11       	cpse	r18, r1
     9e4:	d0 cf       	rjmp	.-96     	; 0x986 <Endpoint_Write_Control_PStream_LE+0x2c>
     9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9e8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ec:	88 23       	and	r24, r24
     9ee:	51 f0       	breq	.+20     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9f0:	85 30       	cpi	r24, 0x05	; 5
     9f2:	51 f0       	breq	.+20     	; 0xa08 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9f8:	82 ff       	sbrs	r24, 2
     9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a08:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a0a:	08 95       	ret

00000a0c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	aa 97       	sbiw	r28, 0x2a	; 42
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	ea e2       	ldi	r30, 0x2A	; 42
     a26:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a28:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a2c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	e2 33       	cpi	r30, 0x32	; 50
     a32:	f2 07       	cpc	r31, r18
     a34:	c9 f7       	brne	.-14     	; 0xa28 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a36:	3d dc       	rcall	.-1926   	; 0x2b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     a3c:	83 ff       	sbrs	r24, 3
     a3e:	1d c1       	rjmp	.+570    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a40:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     a44:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <USB_ControlRequest+0x1>
     a48:	49 2f       	mov	r20, r25
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	4a 30       	cpi	r20, 0x0A	; 10
     a4e:	51 05       	cpc	r21, r1
     a50:	08 f0       	brcs	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x48>
     a52:	13 c1       	rjmp	.+550    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
     a54:	fa 01       	movw	r30, r20
     a56:	e4 5b       	subi	r30, 0xB4	; 180
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	33 c3       	rjmp	.+1638   	; 0x10c2 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a5c:	80 38       	cpi	r24, 0x80	; 128
     a5e:	81 f0       	breq	.+32     	; 0xa80 <USB_Device_ProcessControlRequest+0x74>
     a60:	82 38       	cpi	r24, 0x82	; 130
     a62:	09 f0       	breq	.+2      	; 0xa66 <USB_Device_ProcessControlRequest+0x5a>
     a64:	0a c1       	rjmp	.+532    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a66:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x4>
     a6a:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a6c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
     a74:	85 fb       	bst	r24, 5
     a76:	88 27       	eor	r24, r24
     a78:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a7a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a80:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a84:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <USB_Device_RemoteWakeupEnabled>
     a88:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a8a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a8c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a90:	97 7f       	andi	r25, 0xF7	; 247
     a92:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a96:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     a9a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a9e:	c5 c0       	rjmp	.+394    	; 0xc2a <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aa0:	28 2f       	mov	r18, r24
     aa2:	2d 7f       	andi	r18, 0xFD	; 253
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <USB_Device_ProcessControlRequest+0x9c>
     aa6:	e9 c0       	rjmp	.+466    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     aa8:	88 23       	and	r24, r24
     aaa:	19 f0       	breq	.+6      	; 0xab2 <USB_Device_ProcessControlRequest+0xa6>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	61 f0       	breq	.+24     	; 0xac8 <USB_Device_ProcessControlRequest+0xbc>
     ab0:	e4 c0       	rjmp	.+456    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     ab2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	09 f0       	breq	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0xb0>
     aba:	df c0       	rjmp	.+446    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     abc:	93 30       	cpi	r25, 0x03	; 3
     abe:	09 f0       	breq	.+2      	; 0xac2 <USB_Device_ProcessControlRequest+0xb6>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <USB_Device_RemoteWakeupEnabled>
     ac6:	2b c0       	rjmp	.+86     	; 0xb1e <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ac8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     acc:	81 11       	cpse	r24, r1
     ace:	27 c0       	rjmp	.+78     	; 0xb1e <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ad0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x4>
     ad4:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ad6:	09 f4       	brne	.+2      	; 0xada <USB_Device_ProcessControlRequest+0xce>
     ad8:	d0 c0       	rjmp	.+416    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ada:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ade:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ae2:	20 ff       	sbrs	r18, 0
     ae4:	1c c0       	rjmp	.+56     	; 0xb1e <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ae6:	93 30       	cpi	r25, 0x03	; 3
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     aea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aee:	80 62       	ori	r24, 0x20	; 32
     af0:	14 c0       	rjmp	.+40     	; 0xb1a <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     af2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     af6:	90 61       	ori	r25, 0x10	; 16
     af8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	a9 01       	movw	r20, r18
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <USB_Device_ProcessControlRequest+0xfc>
     b04:	44 0f       	add	r20, r20
     b06:	55 1f       	adc	r21, r21
     b08:	8a 95       	dec	r24
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <USB_Device_ProcessControlRequest+0xf8>
     b0c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     b10:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b14:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b18:	88 60       	ori	r24, 0x08	; 8
     b1a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b1e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b26:	87 7f       	andi	r24, 0xF7	; 247
     b28:	83 c0       	rjmp	.+262    	; 0xc30 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b2a:	81 11       	cpse	r24, r1
     b2c:	a6 c0       	rjmp	.+332    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     b2e:	10 91 2c 01 	lds	r17, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     b32:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b34:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b36:	f8 94       	cli
     b38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b3c:	87 7f       	andi	r24, 0xF7	; 247
     b3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b42:	b6 dc       	rcall	.-1684   	; 0x4b0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
     b48:	80 ff       	sbrs	r24, 0
     b4a:	fc cf       	rjmp	.-8      	; 0xb44 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b4c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     b50:	80 78       	andi	r24, 0x80	; 128
     b52:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b54:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b5e:	11 11       	cpse	r17, r1
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <USB_Device_ProcessControlRequest+0x15a>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x15c>
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b6c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     b6e:	85 c0       	rjmp	.+266    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b70:	80 58       	subi	r24, 0x80	; 128
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	08 f0       	brcs	.+2      	; 0xb78 <USB_Device_ProcessControlRequest+0x16c>
     b76:	81 c0       	rjmp	.+258    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b78:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     b7c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_ControlRequest+0x3>
     b80:	8c 3d       	cpi	r24, 0xDC	; 220
     b82:	53 e0       	ldi	r21, 0x03	; 3
     b84:	95 07       	cpc	r25, r21
     b86:	71 f5       	brne	.+92     	; 0xbe4 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b8c:	8a e2       	ldi	r24, 0x2A	; 42
     b8e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b90:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b92:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b94:	de 01       	movw	r26, r28
     b96:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b98:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b9a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b9c:	51 e2       	ldi	r21, 0x21	; 33
     b9e:	e3 2f       	mov	r30, r19
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     ba6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     ba8:	20 ff       	sbrs	r18, 0
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
     bac:	e2 95       	swap	r30
     bae:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     bb0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     bb2:	ef 70       	andi	r30, 0x0F	; 15
     bb4:	8e 2f       	mov	r24, r30
     bb6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bb8:	ea 30       	cpi	r30, 0x0A	; 10
     bba:	10 f0       	brcs	.+4      	; 0xbc0 <USB_Device_ProcessControlRequest+0x1b4>
     bbc:	c7 96       	adiw	r24, 0x37	; 55
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <USB_Device_ProcessControlRequest+0x1b6>
     bc0:	c0 96       	adiw	r24, 0x30	; 48
     bc2:	8d 93       	st	X+, r24
     bc4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	24 31       	cpi	r18, 0x14	; 20
     bca:	49 f7       	brne	.-46     	; 0xb9e <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bcc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bd2:	87 7f       	andi	r24, 0xF7	; 247
     bd4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bd8:	6a e2       	ldi	r22, 0x2A	; 42
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	26 de       	rcall	.-948    	; 0x82e <Endpoint_Write_Control_Stream_LE>
     be2:	12 c0       	rjmp	.+36     	; 0xc08 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     be4:	ae 01       	movw	r20, r28
     be6:	4f 5f       	subi	r20, 0xFF	; 255
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <USB_ControlRequest+0x4>
     bee:	de db       	rcall	.-2116   	; 0x3ac <CALLBACK_USB_GetDescriptor>
     bf0:	bc 01       	movw	r22, r24
     bf2:	89 2b       	or	r24, r25
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0x1ec>
     bf6:	41 c0       	rjmp	.+130    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
     bf8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bfc:	97 7f       	andi	r25, 0xF7	; 247
     bfe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	a9 de       	rcall	.-686    	; 0x95a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c0c:	8b 77       	andi	r24, 0x7B	; 123
     c0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c12:	33 c0       	rjmp	.+102    	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c14:	80 38       	cpi	r24, 0x80	; 128
     c16:	89 f5       	brne	.+98     	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c22:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c2e:	8e 77       	andi	r24, 0x7E	; 126
     c30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c34:	3d dc       	rcall	.-1926   	; 0x4b0 <Endpoint_ClearStatusStage>
     c36:	21 c0       	rjmp	.+66     	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c38:	81 11       	cpse	r24, r1
     c3a:	1f c0       	rjmp	.+62     	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c3c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     c40:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_ControlRequest+0x3>
     c44:	99 27       	eor	r25, r25
     c46:	02 97       	sbiw	r24, 0x02	; 2
     c48:	c4 f4       	brge	.+48     	; 0xc7a <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c54:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     c58:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     c5c:	29 dc       	rcall	.-1966   	; 0x4b0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c5e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_Device_ConfigurationNumber>
     c62:	81 11       	cpse	r24, r1
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c66:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c6a:	87 fd       	sbrc	r24, 7
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <USB_Device_ProcessControlRequest+0x266>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <USB_Device_ProcessControlRequest+0x268>
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     c78:	06 db       	rcall	.-2548   	; 0x286 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c7e:	83 ff       	sbrs	r24, 3
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c82:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     c86:	80 62       	ori	r24, 0x20	; 32
     c88:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c90:	87 7f       	andi	r24, 0xF7	; 247
     c92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c96:	aa 96       	adiw	r28, 0x2a	; 42
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     cac:	08 95       	ret

00000cae <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     cae:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     cb0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     cb4:	88 23       	and	r24, r24
     cb6:	59 f0       	breq	.+22     	; 0xcce <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     cb8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     cbc:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cbe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     cc6:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     cc8:	a1 de       	rcall	.-702    	; 0xa0c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cca:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     cd2:	6f 92       	push	r6
     cd4:	7f 92       	push	r7
     cd6:	8f 92       	push	r8
     cd8:	9f 92       	push	r9
     cda:	af 92       	push	r10
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <HID_Device_ProcessControlRequest+0x1e>
     cf0:	1f 92       	push	r1
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     cf8:	ad b6       	in	r10, 0x3d	; 61
     cfa:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d00:	83 ff       	sbrs	r24, 3
     d02:	f7 c0       	rjmp	.+494    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     d04:	f7 01       	movw	r30, r14
     d06:	80 81       	ld	r24, Z
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <USB_ControlRequest+0x4>
     d0e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <USB_ControlRequest+0x5>
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	09 f0       	breq	.+2      	; 0xd1a <HID_Device_ProcessControlRequest+0x48>
     d18:	ec c0       	rjmp	.+472    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
	  return;

	switch (USB_ControlRequest.bRequest)
     d1a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_ControlRequest+0x1>
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	09 f4       	brne	.+2      	; 0xd24 <HID_Device_ProcessControlRequest+0x52>
     d22:	96 c0       	rjmp	.+300    	; 0xe50 <HID_Device_ProcessControlRequest+0x17e>
     d24:	30 f4       	brcc	.+12     	; 0xd32 <HID_Device_ProcessControlRequest+0x60>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	71 f0       	breq	.+28     	; 0xd46 <HID_Device_ProcessControlRequest+0x74>
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	09 f4       	brne	.+2      	; 0xd30 <HID_Device_ProcessControlRequest+0x5e>
     d2e:	c9 c0       	rjmp	.+402    	; 0xec2 <HID_Device_ProcessControlRequest+0x1f0>
     d30:	e0 c0       	rjmp	.+448    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
     d32:	8a 30       	cpi	r24, 0x0A	; 10
     d34:	09 f4       	brne	.+2      	; 0xd38 <HID_Device_ProcessControlRequest+0x66>
     d36:	ad c0       	rjmp	.+346    	; 0xe92 <HID_Device_ProcessControlRequest+0x1c0>
     d38:	8b 30       	cpi	r24, 0x0B	; 11
     d3a:	09 f4       	brne	.+2      	; 0xd3e <HID_Device_ProcessControlRequest+0x6c>
     d3c:	96 c0       	rjmp	.+300    	; 0xe6a <HID_Device_ProcessControlRequest+0x198>
     d3e:	89 30       	cpi	r24, 0x09	; 9
     d40:	09 f0       	breq	.+2      	; 0xd44 <HID_Device_ProcessControlRequest+0x72>
     d42:	d7 c0       	rjmp	.+430    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
     d44:	48 c0       	rjmp	.+144    	; 0xdd6 <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d46:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     d4a:	81 3a       	cpi	r24, 0xA1	; 161
     d4c:	09 f0       	breq	.+2      	; 0xd50 <HID_Device_ProcessControlRequest+0x7e>
     d4e:	d1 c0       	rjmp	.+418    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
			{
     d50:	8d b6       	in	r8, 0x3d	; 61
     d52:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
     d54:	1a 82       	std	Y+2, r1	; 0x02
     d56:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d58:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     d5c:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <USB_ControlRequest+0x3>
     d60:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d62:	f7 01       	movw	r30, r14
     d64:	87 81       	ldd	r24, Z+7	; 0x07
     d66:	48 2f       	mov	r20, r24
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	8d b7       	in	r24, 0x3d	; 61
     d6c:	9e b7       	in	r25, 0x3e	; 62
     d6e:	84 1b       	sub	r24, r20
     d70:	95 0b       	sbc	r25, r21
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	9e bf       	out	0x3e, r25	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	8d bf       	out	0x3d, r24	; 61
     d7c:	ed b7       	in	r30, 0x3d	; 61
     d7e:	fe b7       	in	r31, 0x3e	; 62
     d80:	31 96       	adiw	r30, 0x01	; 1
     d82:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	cf 01       	movw	r24, r30
     d8a:	ba d1       	rcall	.+884    	; 0x1100 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d8c:	4f ef       	ldi	r20, 0xFF	; 255
     d8e:	41 0f       	add	r20, r17
     d90:	8e 01       	movw	r16, r28
     d92:	0f 5f       	subi	r16, 0xFF	; 255
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	96 01       	movw	r18, r12
     d98:	be 01       	movw	r22, r28
     d9a:	6d 5f       	subi	r22, 0xFD	; 253
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	c7 01       	movw	r24, r14
     da0:	a5 da       	rcall	.-2742   	; 0x2ec <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     da2:	f7 01       	movw	r30, r14
     da4:	85 81       	ldd	r24, Z+5	; 0x05
     da6:	96 81       	ldd	r25, Z+6	; 0x06
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	21 f0       	breq	.+8      	; 0xdb4 <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     dac:	47 81       	ldd	r20, Z+7	; 0x07
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	b6 01       	movw	r22, r12
     db2:	9d d1       	rcall	.+826    	; 0x10ee <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     db4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dc2:	69 81       	ldd	r22, Y+1	; 0x01
     dc4:	7a 81       	ldd	r23, Y+2	; 0x02
     dc6:	c6 01       	movw	r24, r12
     dc8:	32 dd       	rcall	.-1436   	; 0x82e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dce:	8b 77       	andi	r24, 0x7B	; 123
     dd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dd4:	37 c0       	rjmp	.+110    	; 0xe44 <HID_Device_ProcessControlRequest+0x172>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dd6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     dda:	81 32       	cpi	r24, 0x21	; 33
     ddc:	09 f0       	breq	.+2      	; 0xde0 <HID_Device_ProcessControlRequest+0x10e>
     dde:	89 c0       	rjmp	.+274    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
			{
     de0:	8d b6       	in	r8, 0x3d	; 61
     de2:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     de4:	00 91 30 01 	lds	r16, 0x0130	; 0x800130 <USB_ControlRequest+0x6>
     de8:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     dec:	70 90 2c 01 	lds	r7, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     df0:	60 90 2d 01 	lds	r6, 0x012D	; 0x80012d <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     df4:	8d b7       	in	r24, 0x3d	; 61
     df6:	9e b7       	in	r25, 0x3e	; 62
     df8:	80 1b       	sub	r24, r16
     dfa:	91 0b       	sbc	r25, r17
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	9e bf       	out	0x3e, r25	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	8d bf       	out	0x3d, r24	; 61
     e06:	ed b7       	in	r30, 0x3d	; 61
     e08:	fe b7       	in	r31, 0x3e	; 62
     e0a:	31 96       	adiw	r30, 0x01	; 1
     e0c:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e12:	87 7f       	andi	r24, 0xF7	; 247
     e14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e18:	b8 01       	movw	r22, r16
     e1a:	cf 01       	movw	r24, r30
     e1c:	60 dd       	rcall	.-1344   	; 0x8de <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e22:	8e 77       	andi	r24, 0x7E	; 126
     e24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	71 10       	cpse	r7, r1
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <HID_Device_ProcessControlRequest+0x15e>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	02 1b       	sub	r16, r18
     e34:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     e36:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e38:	3d 1d       	adc	r19, r13
     e3a:	4f ef       	ldi	r20, 0xFF	; 255
     e3c:	46 0d       	add	r20, r6
     e3e:	67 2d       	mov	r22, r7
     e40:	c7 01       	movw	r24, r14
     e42:	a4 da       	rcall	.-2744   	; 0x38c <CALLBACK_HID_Device_ProcessHIDReport>
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	9e be       	out	0x3e, r9	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	8d be       	out	0x3d, r8	; 61
     e4e:	51 c0       	rjmp	.+162    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e50:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     e54:	81 3a       	cpi	r24, 0xA1	; 161
     e56:	09 f0       	breq	.+2      	; 0xe5a <HID_Device_ProcessControlRequest+0x188>
     e58:	4c c0       	rjmp	.+152    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e5e:	87 7f       	andi	r24, 0xF7	; 247
     e60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e64:	f7 01       	movw	r30, r14
     e66:	80 85       	ldd	r24, Z+8	; 0x08
     e68:	3c c0       	rjmp	.+120    	; 0xee2 <HID_Device_ProcessControlRequest+0x210>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e6a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     e6e:	81 32       	cpi	r24, 0x21	; 33
     e70:	09 f0       	breq	.+2      	; 0xe74 <HID_Device_ProcessControlRequest+0x1a2>
     e72:	3f c0       	rjmp	.+126    	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
     e74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e7e:	18 db       	rcall	.-2512   	; 0x4b0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e80:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	91 11       	cpse	r25, r1
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <HID_Device_ProcessControlRequest+0x1ba>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	f7 01       	movw	r30, r14
     e8e:	80 87       	std	Z+8, r24	; 0x08
     e90:	30 c0       	rjmp	.+96     	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e92:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     e96:	81 32       	cpi	r24, 0x21	; 33
     e98:	61 f5       	brne	.+88     	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
     e9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ea4:	05 db       	rcall	.-2550   	; 0x4b0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ea6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest+0x2>
     eaa:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_ControlRequest+0x3>
     eae:	88 27       	eor	r24, r24
     eb0:	36 e0       	ldi	r19, 0x06	; 6
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	3a 95       	dec	r19
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <HID_Device_ProcessControlRequest+0x1e0>
     eba:	f7 01       	movw	r30, r14
     ebc:	92 87       	std	Z+10, r25	; 0x0a
     ebe:	81 87       	std	Z+9, r24	; 0x09
     ec0:	18 c0       	rjmp	.+48     	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ec2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_ControlRequest>
     ec6:	81 3a       	cpi	r24, 0xA1	; 161
     ec8:	a1 f4       	brne	.+40     	; 0xef2 <HID_Device_ProcessControlRequest+0x220>
     eca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ece:	87 7f       	andi	r24, 0xF7	; 247
     ed0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     ed4:	f7 01       	movw	r30, r14
     ed6:	81 85       	ldd	r24, Z+9	; 0x09
     ed8:	92 85       	ldd	r25, Z+10	; 0x0a
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ee0:	87 95       	ror	r24
     ee2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eea:	8e 77       	andi	r24, 0x7E	; 126
     eec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ef0:	df da       	rcall	.-2626   	; 0x4b0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	be be       	out	0x3e, r11	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	ad be       	out	0x3d, r10	; 61
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	7f 90       	pop	r7
     f1c:	6f 90       	pop	r6
     f1e:	08 95       	ret

00000f20 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f26:	dc 01       	movw	r26, r24
     f28:	18 96       	adiw	r26, 0x08	; 8
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	ed 01       	movw	r28, r26
     f2e:	19 92       	st	Y+, r1
     f30:	8a 95       	dec	r24
     f32:	e9 f7       	brne	.-6      	; 0xf2e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
     f38:	84 ef       	ldi	r24, 0xF4	; 244
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	92 87       	std	Z+10, r25	; 0x0a
     f3e:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     f40:	84 81       	ldd	r24, Z+4	; 0x04
     f42:	81 11       	cpse	r24, r1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <HID_Device_ConfigureEndpoints+0x2a>
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <HID_Device_ConfigureEndpoints+0x2c>
     f4a:	44 e0       	ldi	r20, 0x04	; 4
     f4c:	62 81       	ldd	r22, Z+2	; 0x02
     f4e:	73 81       	ldd	r23, Z+3	; 0x03
     f50:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     f52:	28 e0       	ldi	r18, 0x08	; 8
     f54:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     f56:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     f58:	26 17       	cp	r18, r22
     f5a:	37 07       	cpc	r19, r23
     f5c:	20 f4       	brcc	.+8      	; 0xf66 <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	f9 cf       	rjmp	.-14     	; 0xf58 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     f66:	42 60       	ori	r20, 0x02	; 2
     f68:	92 95       	swap	r25
     f6a:	90 7f       	andi	r25, 0xF0	; 240
     f6c:	49 2b       	or	r20, r25
     f6e:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	69 ca       	rjmp	.-2862   	; 0x448 <Endpoint_ConfigureEndpoint_Prv>

00000f76 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	00 d0       	rcall	.+0      	; 0xf96 <HID_Device_USBTask+0x20>
     f96:	1f 92       	push	r1
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     f9e:	ad b6       	in	r10, 0x3d	; 61
     fa0:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     fa2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_DeviceState>
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	09 f0       	breq	.+2      	; 0xfac <HID_Device_USBTask+0x36>
     faa:	73 c0       	rjmp	.+230    	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     fac:	f7 01       	movw	r30, r14
     fae:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     fb0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
     fb8:	85 ff       	sbrs	r24, 5
     fba:	6b c0       	rjmp	.+214    	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
	{
     fbc:	8d b6       	in	r8, 0x3d	; 61
     fbe:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fc0:	47 81       	ldd	r20, Z+7	; 0x07
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	8d b7       	in	r24, 0x3d	; 61
     fc6:	9e b7       	in	r25, 0x3e	; 62
     fc8:	84 1b       	sub	r24, r20
     fca:	95 0b       	sbc	r25, r21
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	9e bf       	out	0x3e, r25	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	8d bf       	out	0x3d, r24	; 61
     fd6:	ed b7       	in	r30, 0x3d	; 61
     fd8:	fe b7       	in	r31, 0x3e	; 62
     fda:	31 96       	adiw	r30, 0x01	; 1
     fdc:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     fde:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     fe0:	1a 82       	std	Y+2, r1	; 0x02
     fe2:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	cf 01       	movw	r24, r30
     fea:	8a d0       	rcall	.+276    	; 0x1100 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     fec:	8e 01       	movw	r16, r28
     fee:	0f 5f       	subi	r16, 0xFF	; 255
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	96 01       	movw	r18, r12
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	be 01       	movw	r22, r28
     ff8:	6d 5f       	subi	r22, 0xFD	; 253
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	c7 01       	movw	r24, r14
     ffe:	76 d9       	rcall	.-3348   	; 0x2ec <CALLBACK_HID_Device_CreateHIDReport>
    1000:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1002:	f7 01       	movw	r30, r14
    1004:	81 85       	ldd	r24, Z+9	; 0x09
    1006:	92 85       	ldd	r25, Z+10	; 0x0a
    1008:	89 2b       	or	r24, r25
    100a:	29 f0       	breq	.+10     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    100c:	11 e0       	ldi	r17, 0x01	; 1
    100e:	83 85       	ldd	r24, Z+11	; 0x0b
    1010:	94 85       	ldd	r25, Z+12	; 0x0c
    1012:	89 2b       	or	r24, r25
    1014:	09 f0       	breq	.+2      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1016:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1018:	f7 01       	movw	r30, r14
    101a:	65 80       	ldd	r6, Z+5	; 0x05
    101c:	76 80       	ldd	r7, Z+6	; 0x06
    101e:	61 14       	cp	r6, r1
    1020:	71 04       	cpc	r7, r1
    1022:	81 f0       	breq	.+32     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1024:	49 81       	ldd	r20, Y+1	; 0x01
    1026:	5a 81       	ldd	r21, Y+2	; 0x02
    1028:	b3 01       	movw	r22, r6
    102a:	c6 01       	movw	r24, r12
    102c:	53 d0       	rcall	.+166    	; 0x10d4 <memcmp>
    102e:	01 e0       	ldi	r16, 0x01	; 1
    1030:	89 2b       	or	r24, r25
    1032:	09 f4       	brne	.+2      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1034:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1036:	f7 01       	movw	r30, r14
    1038:	47 81       	ldd	r20, Z+7	; 0x07
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	b6 01       	movw	r22, r12
    103e:	c3 01       	movw	r24, r6
    1040:	56 d0       	rcall	.+172    	; 0x10ee <memcpy>
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1044:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	89 2b       	or	r24, r25
    104c:	e9 f0       	breq	.+58     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
    104e:	51 10       	cpse	r5, r1
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1052:	01 11       	cpse	r16, r1
    1054:	02 c0       	rjmp	.+4      	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1056:	10 ff       	sbrs	r17, 0
    1058:	17 c0       	rjmp	.+46     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    105a:	f7 01       	movw	r30, r14
    105c:	81 85       	ldd	r24, Z+9	; 0x09
    105e:	92 85       	ldd	r25, Z+10	; 0x0a
    1060:	94 87       	std	Z+12, r25	; 0x0c
    1062:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1064:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1066:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    106e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1072:	69 81       	ldd	r22, Y+1	; 0x01
    1074:	7a 81       	ldd	r23, Y+2	; 0x02
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	c6 01       	movw	r24, r12
    107c:	8e db       	rcall	.-2276   	; 0x79a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    107e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1082:	8e 77       	andi	r24, 0x7E	; 126
    1084:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	9e be       	out	0x3e, r9	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	be be       	out	0x3e, r11	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	ad be       	out	0x3d, r10	; 61
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	5f 90       	pop	r5
    10c0:	08 95       	ret

000010c2 <__tablejump2__>:
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	00 24       	eor	r0, r0
    10c8:	00 1c       	adc	r0, r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	07 90       	elpm	r0, Z+
    10ce:	f6 91       	elpm	r31, Z
    10d0:	e0 2d       	mov	r30, r0
    10d2:	09 94       	ijmp

000010d4 <memcmp>:
    10d4:	fb 01       	movw	r30, r22
    10d6:	dc 01       	movw	r26, r24
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <memcmp+0xe>
    10da:	8d 91       	ld	r24, X+
    10dc:	01 90       	ld	r0, Z+
    10de:	80 19       	sub	r24, r0
    10e0:	21 f4       	brne	.+8      	; 0x10ea <memcmp+0x16>
    10e2:	41 50       	subi	r20, 0x01	; 1
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	c8 f7       	brcc	.-14     	; 0x10da <memcmp+0x6>
    10e8:	88 1b       	sub	r24, r24
    10ea:	99 0b       	sbc	r25, r25
    10ec:	08 95       	ret

000010ee <memcpy>:
    10ee:	fb 01       	movw	r30, r22
    10f0:	dc 01       	movw	r26, r24
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <memcpy+0xa>
    10f4:	01 90       	ld	r0, Z+
    10f6:	0d 92       	st	X+, r0
    10f8:	41 50       	subi	r20, 0x01	; 1
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	d8 f7       	brcc	.-10     	; 0x10f4 <memcpy+0x6>
    10fe:	08 95       	ret

00001100 <memset>:
    1100:	dc 01       	movw	r26, r24
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <memset+0x6>
    1104:	6d 93       	st	X+, r22
    1106:	41 50       	subi	r20, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	e0 f7       	brcc	.-8      	; 0x1104 <memset+0x4>
    110c:	08 95       	ret

0000110e <_exit>:
    110e:	f8 94       	cli

00001110 <__stop_program>:
    1110:	ff cf       	rjmp	.-2      	; 0x1110 <__stop_program>
