
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000d88  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f64  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a33  00000000  00000000  00005f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b55  00000000  00000000  000079bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000710  00000000  00000000  0000a510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020bf  00000000  00000000  0000ac20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c7b  00000000  00000000  0000ccdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000f95a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
   2:	00 00       	nop
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
   6:	00 00       	nop
   8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
   a:	00 00       	nop
   c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
   e:	00 00       	nop
  10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
  12:	00 00       	nop
  14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
  16:	00 00       	nop
  18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
  22:	00 00       	nop
  24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
  26:	00 00       	nop
  28:	bc c2       	rjmp	.+1400   	; 0x5a2 <__vector_10>
  2a:	00 00       	nop
  2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
  32:	00 00       	nop
  34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
  36:	00 00       	nop
  38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
  42:	00 00       	nop
  44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
  46:	00 00       	nop
  48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
  4e:	00 00       	nop
  50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
  52:	00 00       	nop
  54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
  56:	00 00       	nop
  58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
  5e:	00 00       	nop
  60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
  62:	00 00       	nop
  64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
  66:	00 00       	nop
  68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
  6e:	00 00       	nop
  70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
  72:	00 00       	nop
  74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
  76:	00 00       	nop
  78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
  7e:	00 00       	nop
  80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
  82:	00 00       	nop
  84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
  86:	00 00       	nop
  88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
  8e:	00 00       	nop
  90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
  92:	00 00       	nop
  94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 05       	cpc	r20, r4
  9a:	66 05       	cpc	r22, r6
  9c:	53 06       	cpc	r5, r19
  9e:	66 05       	cpc	r22, r6
  a0:	53 06       	cpc	r5, r19
  a2:	ab 05       	cpc	r26, r11
  a4:	ce 05       	cpc	r28, r14
  a6:	53 06       	cpc	r5, r19
  a8:	20 06       	cpc	r2, r16
  aa:	32 06       	cpc	r3, r18

000000ac <ProductString>:
  ac:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
  bc:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
  cc:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000000da <ManufacturerString>:
  da:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ea:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f4 <LanguageString>:
  f4:	04 03 09 04                                         ....

000000f8 <ConfigurationDescriptor>:
  f8:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
 108:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
 118:	00 01 07 05 02 03 08 00 01                          .........

00000121 <DeviceDescriptor>:
 121:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
 131:	00 01                                               ..

00000133 <GenericReport>:
 133:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
 143:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......
 153:	00                                                  .

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d0 e2       	ldi	r29, 0x20	; 32
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_clear_bss>:
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
 168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
 16a:	ad 30       	cpi	r26, 0x0D	; 13
 16c:	b2 07       	cpc	r27, r18
 16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
 170:	ef d0       	rcall	.+478    	; 0x350 <main>
 172:	ce c5       	rjmp	.+2972   	; 0xd10 <_exit>

00000174 <__bad_interrupt>:
 174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	89 2b       	or	r24, r25
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	08 95       	ret

00000180 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 180:	84 b7       	in	r24, 0x34	; 52
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	a8 95       	wdr
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 190:	88 61       	ori	r24, 0x18	; 24
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 196:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 19a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ac:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	80 6f       	ori	r24, 0xF0	; 240
 1b2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 1ba:	dd c1       	rjmp	.+954    	; 0x576 <USB_Init>

000001bc <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1bc:	80 ea       	ldi	r24, 0xA0	; 160
 1be:	db cf       	rjmp	.-74     	; 0x176 <LEDs_SetAllLEDs>

000001c0 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the USB management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	d9 cf       	rjmp	.-78     	; 0x176 <LEDs_SetAllLEDs>

000001c4 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the generic HID device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 1c4:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 1c6:	42 e0       	ldi	r20, 0x02	; 2
 1c8:	61 ec       	ldi	r22, 0xC1	; 193
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	09 d1       	rcall	.+530    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>
 1ce:	c8 2f       	mov	r28, r24
 1d0:	42 e0       	ldi	r20, 0x02	; 2
 1d2:	60 ec       	ldi	r22, 0xC0	; 192
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	04 d1       	rcall	.+520    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>
	                                            GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
	                                            GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1d8:	88 23       	and	r24, r24
 1da:	11 f0       	breq	.+4      	; 0x1e0 <EVENT_USB_Device_ConfigurationChanged+0x1c>
 1dc:	c1 11       	cpse	r28, r1
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <EVENT_USB_Device_ConfigurationChanged+0x20>
 1e0:	80 e9       	ldi	r24, 0x90	; 144
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged+0x22>
}
 1e4:	80 e6       	ldi	r24, 0x60	; 96
	                                            GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
	                                            GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1e6:	cf 91       	pop	r28
 1e8:	c6 cf       	rjmp	.-116    	; 0x176 <LEDs_SetAllLEDs>

000001ea <ProcessGenericHIDReport>:
/** Function to process the last received report from the host.
 *
 *  \param[in] DataArray  Pointer to a buffer where the last received report has been stored
 */
void ProcessGenericHIDReport(uint8_t* DataArray)
{
 1ea:	fc 01       	movw	r30, r24
		holding the report sent from the host.
	*/

	uint8_t NewLEDMask = LEDS_NO_LEDS;	

	if (DataArray[0])
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <ProcessGenericHIDReport+0xc>
	  NewLEDMask |= LEDS_LED1;
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <ProcessGenericHIDReport+0xe>
		This is where you need to process reports sent from the host to the device. This
		function is called each time the host has sent a new report. DataArray is an array
		holding the report sent from the host.
	*/

	uint8_t NewLEDMask = LEDS_NO_LEDS;	
 1f6:	80 e0       	ldi	r24, 0x00	; 0

	if (DataArray[0])
	  NewLEDMask |= LEDS_LED1;

	if (DataArray[1])
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED1;
 1fc:	80 e1       	ldi	r24, 0x10	; 16

	if (DataArray[2])
 1fe:	92 81       	ldd	r25, Z+2	; 0x02
 200:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED1;
 202:	80 e1       	ldi	r24, 0x10	; 16

	if (DataArray[3])
 204:	93 81       	ldd	r25, Z+3	; 0x03
 206:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED1;
 208:	80 e1       	ldi	r24, 0x10	; 16
	  
	LEDs_SetAllLEDs(NewLEDMask);
 20a:	b5 cf       	rjmp	.-150    	; 0x176 <LEDs_SetAllLEDs>

0000020c <CreateGenericHIDReport>:
/** Function to create the next report to send back to the host at the next reporting interval.
 *
 *  \param[out] DataArray  Pointer to a buffer where the next report data should be stored
 */
void CreateGenericHIDReport(uint8_t* DataArray)
{
 20c:	fc 01       	movw	r30, r24
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
 20e:	9b b1       	in	r25, 0x0b	; 11
		an array to hold the report to the host.
	*/

	uint8_t CurrLEDMask = LEDs_GetLEDs();
		
	DataArray[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0);
 210:	94 fb       	bst	r25, 4
 212:	88 27       	eor	r24, r24
 214:	80 f9       	bld	r24, 0
 216:	80 83       	st	Z, r24
	DataArray[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0);
 218:	95 fb       	bst	r25, 5
 21a:	88 27       	eor	r24, r24
 21c:	80 f9       	bld	r24, 0
 21e:	81 83       	std	Z+1, r24	; 0x01
	DataArray[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
 220:	89 2f       	mov	r24, r25
 222:	88 1f       	adc	r24, r24
 224:	88 27       	eor	r24, r24
 226:	88 1f       	adc	r24, r24
 228:	82 83       	std	Z+2, r24	; 0x02
	DataArray[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
 22a:	96 fb       	bst	r25, 6
 22c:	99 27       	eor	r25, r25
 22e:	90 f9       	bld	r25, 0
 230:	93 83       	std	Z+3, r25	; 0x03
 232:	08 95       	ret

00000234 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	28 97       	sbiw	r28, 0x08	; 8
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 248:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest+0x1>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	19 f0       	breq	.+6      	; 0x256 <EVENT_USB_Device_ControlRequest+0x22>
 250:	89 30       	cpi	r24, 0x09	; 9
 252:	c1 f0       	breq	.+48     	; 0x284 <EVENT_USB_Device_ControlRequest+0x50>
 254:	2d c0       	rjmp	.+90     	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x7c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 256:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>
 25a:	81 3a       	cpi	r24, 0xA1	; 161
 25c:	49 f5       	brne	.+82     	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x7c>
			{
				uint8_t GenericData[GENERIC_REPORT_SIZE];
				CreateGenericHIDReport(GenericData);
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	d4 df       	rcall	.-88     	; 0x20c <CreateGenericHIDReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 264:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&GenericData, sizeof(GenericData));
 26e:	68 e0       	ldi	r22, 0x08	; 8
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	f1 d2       	rcall	.+1506   	; 0x85a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 278:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 27c:	8b 77       	andi	r24, 0x7B	; 123
 27e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x7c>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 284:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>
 288:	81 32       	cpi	r24, 0x21	; 33
 28a:	91 f4       	brne	.+36     	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x7c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 28c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 290:	87 7f       	andi	r24, 0xF7	; 247
 292:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				uint8_t GenericData[GENERIC_REPORT_SIZE];

				Endpoint_ClearSETUP();

				/* Read the report data from the control endpoint */
				Endpoint_Read_Control_Stream_LE(&GenericData, sizeof(GenericData));
 296:	68 e0       	ldi	r22, 0x08	; 8
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	35 d3       	rcall	.+1642   	; 0x90a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2a4:	8e 77       	andi	r24, 0x7E	; 126
 2a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();

				ProcessGenericHIDReport(GenericData);
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	9d df       	rcall	.-198    	; 0x1ea <ProcessGenericHIDReport>
			}

			break;
	}
}
 2b0:	28 96       	adiw	r28, 0x08	; 8
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <HID_Task>:
	DataArray[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
	DataArray[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
}

void HID_Task(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	28 97       	sbiw	r28, 0x08	; 8
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	81 f5       	brne	.+96     	; 0x33e <HID_Task+0x7c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;

	Endpoint_SelectEndpoint(GENERIC_OUT_EPNUM);

	/* Check to see if a packet has been sent from the host */
	if (Endpoint_IsOUTReceived())
 2e8:	82 ff       	sbrs	r24, 2
 2ea:	13 c0       	rjmp	.+38     	; 0x312 <HID_Task+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 2ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 2f0:	85 ff       	sbrs	r24, 5
 2f2:	0a c0       	rjmp	.+20     	; 0x308 <HID_Task+0x46>
		{
			/* Create a temporary buffer to hold the read in report from the host */
			uint8_t GenericData[GENERIC_REPORT_SIZE];

			/* Read Generic Report Data */
			Endpoint_Read_Stream_LE(&GenericData, sizeof(GenericData), NULL);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	68 e0       	ldi	r22, 0x08	; 8
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	ce 01       	movw	r24, r28
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	62 d2       	rcall	.+1220   	; 0x7c6 <Endpoint_Read_Stream_LE>

			/* Process Generic Report Data */
			ProcessGenericHIDReport(GenericData);
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	71 df       	rcall	.-286    	; 0x1ea <ProcessGenericHIDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 308:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 30c:	8b 77       	andi	r24, 0x7B	; 123
 30e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_SelectEndpoint(GENERIC_IN_EPNUM);

	/* Check to see if the host is ready to accept another packet */
	if (Endpoint_IsINReady())
 31c:	80 ff       	sbrs	r24, 0
 31e:	0f c0       	rjmp	.+30     	; 0x33e <HID_Task+0x7c>
	{
		/* Create a temporary buffer to hold the report to send to the host */
		uint8_t GenericData[GENERIC_REPORT_SIZE];

		/* Create Generic Report Data */
		CreateGenericHIDReport(GenericData);
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	73 df       	rcall	.-282    	; 0x20c <CreateGenericHIDReport>

		/* Write Generic Report Data */
		Endpoint_Write_Stream_LE(&GenericData, sizeof(GenericData), NULL);
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	68 e0       	ldi	r22, 0x08	; 8
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	ff d1       	rcall	.+1022   	; 0x732 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 338:	8e 77       	andi	r24, 0x7E	; 126
 33a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 33e:	28 96       	adiw	r28, 0x08	; 8
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 350:	17 df       	rcall	.-466    	; 0x180 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	10 df       	rcall	.-480    	; 0x176 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		HID_Task();
 356:	78 94       	sei
 358:	b4 df       	rcall	.-152    	; 0x2c2 <HID_Task>
		USB_USBTask();
 35a:	bf d4       	rcall	.+2430   	; 0xcda <USB_USBTask>
 35c:	fd cf       	rjmp	.-6      	; 0x358 <main+0x8>

0000035e <CALLBACK_USB_GetDescriptor>:
 35e:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 360:	33 27       	eor	r19, r19
 362:	23 30       	cpi	r18, 0x03	; 3
 364:	31 05       	cpc	r19, r1
 366:	e1 f0       	breq	.+56     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x42>
 368:	58 f4       	brcc	.+22     	; 0x380 <CALLBACK_USB_GetDescriptor+0x22>
 36a:	21 30       	cpi	r18, 0x01	; 1
 36c:	31 05       	cpc	r19, r1
 36e:	99 f0       	breq	.+38     	; 0x396 <CALLBACK_USB_GetDescriptor+0x38>
 370:	22 30       	cpi	r18, 0x02	; 2
 372:	31 05       	cpc	r19, r1
 374:	69 f5       	brne	.+90     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 376:	89 e2       	ldi	r24, 0x29	; 41
 378:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 37a:	28 ef       	ldi	r18, 0xF8	; 248
 37c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 37e:	2c c0       	rjmp	.+88     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 380:	21 32       	cpi	r18, 0x21	; 33
 382:	31 05       	cpc	r19, r1
 384:	01 f1       	breq	.+64     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x68>
 386:	22 32       	cpi	r18, 0x22	; 34
 388:	31 05       	cpc	r19, r1
 38a:	11 f5       	brne	.+68     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
 390:	23 e3       	ldi	r18, 0x33	; 51
 392:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
 394:	21 c0       	rjmp	.+66     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 396:	82 e1       	ldi	r24, 0x12	; 18
 398:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 39a:	21 e2       	ldi	r18, 0x21	; 33
 39c:	31 e0       	ldi	r19, 0x01	; 1
 39e:	1c c0       	rjmp	.+56     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 3a0:	99 27       	eor	r25, r25
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	91 05       	cpc	r25, r1
 3a6:	49 f0       	breq	.+18     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x5c>
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x56>
 3aa:	02 97       	sbiw	r24, 0x02	; 2
 3ac:	89 f4       	brne	.+34     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3ae:	ec ea       	ldi	r30, 0xAC	; 172
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3b4:	e4 ef       	ldi	r30, 0xF4	; 244
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3ba:	ea ed       	ldi	r30, 0xDA	; 218
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3be:	84 91       	lpm	r24, Z
 3c0:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 3c2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 3c6:	89 e0       	ldi	r24, 0x09	; 9
 3c8:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
 3ca:	2a e0       	ldi	r18, 0x0A	; 10
 3cc:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
 3d8:	fa 01       	movw	r30, r20
 3da:	31 83       	std	Z+1, r19	; 0x01
 3dc:	20 83       	st	Z, r18
	return Size;
}
 3de:	08 95       	ret

000003e0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 3e0:	98 2f       	mov	r25, r24
 3e2:	97 30       	cpi	r25, 0x07	; 7
 3e4:	68 f5       	brcc	.+90     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3e6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3ea:	98 17       	cp	r25, r24
 3ec:	39 f0       	breq	.+14     	; 0x3fc <Endpoint_ConfigureEndpoint_Prv+0x1c>
 3ee:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3f2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3f6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	24 2f       	mov	r18, r20
 3fe:	76 2f       	mov	r23, r22
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	21 fd       	sbrc	r18, 1
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	9f 5f       	subi	r25, 0xFF	; 255
 408:	ec cf       	rjmp	.-40     	; 0x3e2 <Endpoint_ConfigureEndpoint_Prv+0x2>
 40a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 40e:	3e 7f       	andi	r19, 0xFE	; 254
 410:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 414:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 418:	3d 7f       	andi	r19, 0xFD	; 253
 41a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 41e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 422:	31 60       	ori	r19, 0x01	; 1
 424:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 428:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 42c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 430:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 434:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 438:	27 fd       	sbrc	r18, 7
 43a:	e5 cf       	rjmp	.-54     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	08 95       	ret

00000448 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 448:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>
 44c:	87 ff       	sbrs	r24, 7
 44e:	11 c0       	rjmp	.+34     	; 0x472 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 450:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 454:	82 fd       	sbrc	r24, 2
 456:	05 c0       	rjmp	.+10     	; 0x462 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 458:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 45c:	81 11       	cpse	r24, r1
 45e:	f8 cf       	rjmp	.-16     	; 0x450 <Endpoint_ClearStatusStage+0x8>
 460:	11 c0       	rjmp	.+34     	; 0x484 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 466:	8b 77       	andi	r24, 0x7B	; 123
 468:	0b c0       	rjmp	.+22     	; 0x480 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 46a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 46e:	88 23       	and	r24, r24
 470:	49 f0       	breq	.+18     	; 0x484 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 476:	80 ff       	sbrs	r24, 0
 478:	f8 cf       	rjmp	.-16     	; 0x46a <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 47a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 47e:	8e 77       	andi	r24, 0x7E	; 126
 480:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 484:	08 95       	ret

00000486 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 486:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 48a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 48e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 490:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 494:	84 2f       	mov	r24, r20
 496:	81 70       	andi	r24, 0x01	; 1
 498:	40 ff       	sbrs	r20, 0
 49a:	23 c0       	rjmp	.+70     	; 0x4e2 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 49c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 4a0:	80 fd       	sbrc	r24, 0
 4a2:	1d c0       	rjmp	.+58     	; 0x4de <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4a8:	88 23       	and	r24, r24
 4aa:	99 f0       	breq	.+38     	; 0x4d2 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4ac:	85 30       	cpi	r24, 0x05	; 5
 4ae:	99 f0       	breq	.+38     	; 0x4d6 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 4b0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 4b4:	85 fd       	sbrc	r24, 5
 4b6:	11 c0       	rjmp	.+34     	; 0x4da <Endpoint_WaitUntilReady+0x54>
 4b8:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 4bc:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 4c0:	24 17       	cp	r18, r20
 4c2:	35 07       	cpc	r19, r21
 4c4:	29 f3       	breq	.-54     	; 0x490 <Endpoint_WaitUntilReady+0xa>
 4c6:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 4c8:	11 f0       	breq	.+4      	; 0x4ce <Endpoint_WaitUntilReady+0x48>
 4ca:	9a 01       	movw	r18, r20
 4cc:	e1 cf       	rjmp	.-62     	; 0x490 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 4ce:	84 e0       	ldi	r24, 0x04	; 4
 4d0:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4e2:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4e6:	42 ff       	sbrs	r20, 2
 4e8:	dd cf       	rjmp	.-70     	; 0x4a4 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4ea:	08 95       	ret

000004ec <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4f4:	49 d0       	rcall	.+146    	; 0x588 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4f6:	50 d0       	rcall	.+160    	; 0x598 <USB_INT_ClearAllInterrupts>
 4f8:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	88 81       	ld	r24, Y
 4fe:	8f 77       	andi	r24, 0x7F	; 127
 500:	88 83       	st	Y, r24
 502:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 504:	80 68       	ori	r24, 0x80	; 128
 506:	88 83       	st	Y, r24
 508:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 50a:	8f 7d       	andi	r24, 0xDF	; 223
 50c:	88 83       	st	Y, r24
 50e:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	80 68       	ori	r24, 0x80	; 128
 516:	80 83       	st	Z, r24
 518:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 51a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 51e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	USB_Device_ConfigurationNumber  = 0;
 522:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 526:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 52a:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 52c:	10 e0       	ldi	r17, 0x00	; 0
 52e:	f8 01       	movw	r30, r16
 530:	80 81       	ld	r24, Z
 532:	8b 7f       	andi	r24, 0xFB	; 251
 534:	80 83       	st	Z, r24
 536:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	88 83       	st	Y, r24
 53c:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	4e df       	rcall	.-356    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>
 544:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	8e 7f       	andi	r24, 0xFE	; 254
 54c:	80 83       	st	Z, r24
 54e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	81 60       	ori	r24, 0x01	; 1
 556:	80 83       	st	Z, r24
 558:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 55a:	88 60       	ori	r24, 0x08	; 8
 55c:	80 83       	st	Z, r24
 55e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 560:	80 81       	ld	r24, Z
 562:	8e 7f       	andi	r24, 0xFE	; 254
 564:	80 83       	st	Z, r24
 566:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 568:	80 61       	ori	r24, 0x10	; 16
 56a:	88 83       	st	Y, r24
 56c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <USB_Init>:
 576:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <USB_IsInitialized>

	USB_ResetInterface();
 586:	b2 cf       	rjmp	.-156    	; 0x4ec <USB_ResetInterface>

00000588 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 588:	e8 ed       	ldi	r30, 0xD8	; 216
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	8c 7f       	andi	r24, 0xFC	; 252
 590:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 592:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 596:	08 95       	ret

00000598 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 598:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 59c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5a0:	08 95       	ret

000005a2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	0b b6       	in	r0, 0x3b	; 59
 5ae:	0f 92       	push	r0
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 5c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5cc:	82 ff       	sbrs	r24, 2
 5ce:	0a c0       	rjmp	.+20     	; 0x5e4 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 5d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5d4:	82 ff       	sbrs	r24, 2
 5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 5d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5dc:	8b 7f       	andi	r24, 0xFB	; 251
 5de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5e2:	7a d3       	rcall	.+1780   	; 0xcd8 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 5e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 5e8:	80 ff       	sbrs	r24, 0
 5ea:	1d c0       	rjmp	.+58     	; 0x626 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5ec:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5f0:	80 ff       	sbrs	r24, 0
 5f2:	19 c0       	rjmp	.+50     	; 0x626 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5f4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 5f8:	8e 7f       	andi	r24, 0xFE	; 254
 5fa:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5fe:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 602:	80 ff       	sbrs	r24, 0
 604:	0c c0       	rjmp	.+24     	; 0x61e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 606:	8c e0       	ldi	r24, 0x0C	; 12
 608:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 60a:	8e e0       	ldi	r24, 0x0E	; 14
 60c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 60e:	09 b4       	in	r0, 0x29	; 41
 610:	00 fe       	sbrs	r0, 0
 612:	fd cf       	rjmp	.-6      	; 0x60e <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 61a:	d0 dd       	rcall	.-1120   	; 0x1bc <EVENT_USB_Device_Connect>
 61c:	04 c0       	rjmp	.+8      	; 0x626 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 61e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 620:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 624:	cd dd       	rcall	.-1126   	; 0x1c0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 626:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 62a:	80 ff       	sbrs	r24, 0
 62c:	18 c0       	rjmp	.+48     	; 0x65e <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 62e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 632:	80 ff       	sbrs	r24, 0
 634:	14 c0       	rjmp	.+40     	; 0x65e <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 636:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 640:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 644:	80 61       	ori	r24, 0x10	; 16
 646:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 64a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 64e:	80 62       	ori	r24, 0x20	; 32
 650:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 654:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 65c:	3d d3       	rcall	.+1658   	; 0xcd8 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 65e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 662:	84 ff       	sbrs	r24, 4
 664:	2d c0       	rjmp	.+90     	; 0x6c0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 666:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 66a:	84 ff       	sbrs	r24, 4
 66c:	29 c0       	rjmp	.+82     	; 0x6c0 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 66e:	8c e0       	ldi	r24, 0x0C	; 12
 670:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 672:	8e e0       	ldi	r24, 0x0E	; 14
 674:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 676:	09 b4       	in	r0, 0x29	; 41
 678:	00 fe       	sbrs	r0, 0
 67a:	fd cf       	rjmp	.-6      	; 0x676 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 67c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 680:	8f 7d       	andi	r24, 0xDF	; 223
 682:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 686:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 68a:	8f 7e       	andi	r24, 0xEF	; 239
 68c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 690:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 694:	8f 7e       	andi	r24, 0xEF	; 239
 696:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 69a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6a8:	81 11       	cpse	r24, r1
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6ac:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 6b0:	87 fd       	sbrc	r24, 7
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__vector_10+0x116>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <__vector_10+0x118>
 6b8:	84 e0       	ldi	r24, 0x04	; 4
 6ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 6be:	0c d3       	rcall	.+1560   	; 0xcd8 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6c4:	83 ff       	sbrs	r24, 3
 6c6:	22 c0       	rjmp	.+68     	; 0x70c <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6cc:	83 ff       	sbrs	r24, 3
 6ce:	1e c0       	rjmp	.+60     	; 0x70c <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6d0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 6d6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 6e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6e8:	8e 7f       	andi	r24, 0xFE	; 254
 6ea:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6ee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6f2:	8e 7f       	andi	r24, 0xFE	; 254
 6f4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6fc:	80 61       	ori	r24, 0x10	; 16
 6fe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 702:	42 e0       	ldi	r20, 0x02	; 2
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	6b de       	rcall	.-810    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 70a:	e6 d2       	rcall	.+1484   	; 0xcd8 <USB_Event_Stub>
 70c:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	4f 91       	pop	r20
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	0f 90       	pop	r0
 726:	0b be       	out	0x3b, r0	; 59
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	1f 90       	pop	r1
 730:	18 95       	reti

00000732 <Endpoint_Write_Stream_LE>:
 732:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 734:	df 92       	push	r13
 736:	ef 92       	push	r14
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	ec 01       	movw	r28, r24
 744:	8b 01       	movw	r16, r22
 746:	7a 01       	movw	r14, r20
 748:	9e de       	rcall	.-708    	; 0x486 <Endpoint_WaitUntilReady>
 74a:	81 11       	cpse	r24, r1
 74c:	33 c0       	rjmp	.+102    	; 0x7b4 <Endpoint_Write_Stream_LE+0x82>
 74e:	e1 14       	cp	r14, r1
 750:	f1 04       	cpc	r15, r1
 752:	39 f0       	breq	.+14     	; 0x762 <Endpoint_Write_Stream_LE+0x30>
 754:	f7 01       	movw	r30, r14
 756:	80 81       	ld	r24, Z
 758:	91 81       	ldd	r25, Z+1	; 0x01
 75a:	08 1b       	sub	r16, r24
 75c:	19 0b       	sbc	r17, r25
 75e:	c8 0f       	add	r28, r24
 760:	d9 1f       	adc	r29, r25
 762:	c1 2c       	mov	r12, r1
 764:	d1 2c       	mov	r13, r1
 766:	01 15       	cp	r16, r1
 768:	11 05       	cpc	r17, r1
 76a:	19 f1       	breq	.+70     	; 0x7b2 <Endpoint_Write_Stream_LE+0x80>
 76c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 770:	85 fd       	sbrc	r24, 5
 772:	16 c0       	rjmp	.+44     	; 0x7a0 <Endpoint_Write_Stream_LE+0x6e>
 774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 778:	8e 77       	andi	r24, 0x7E	; 126
 77a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 77e:	ad d2       	rcall	.+1370   	; 0xcda <USB_USBTask>
 780:	e1 14       	cp	r14, r1
 782:	f1 04       	cpc	r15, r1
 784:	49 f0       	breq	.+18     	; 0x798 <Endpoint_Write_Stream_LE+0x66>
 786:	f7 01       	movw	r30, r14
 788:	80 81       	ld	r24, Z
 78a:	91 81       	ldd	r25, Z+1	; 0x01
 78c:	c8 0e       	add	r12, r24
 78e:	d9 1e       	adc	r13, r25
 790:	d1 82       	std	Z+1, r13	; 0x01
 792:	c0 82       	st	Z, r12
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <Endpoint_Write_Stream_LE+0x82>
 798:	76 de       	rcall	.-788    	; 0x486 <Endpoint_WaitUntilReady>
 79a:	88 23       	and	r24, r24
 79c:	21 f3       	breq	.-56     	; 0x766 <Endpoint_Write_Stream_LE+0x34>
 79e:	0a c0       	rjmp	.+20     	; 0x7b4 <Endpoint_Write_Stream_LE+0x82>
 7a0:	89 91       	ld	r24, Y+
 7a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 7a6:	01 50       	subi	r16, 0x01	; 1
 7a8:	11 09       	sbc	r17, r1
 7aa:	ff ef       	ldi	r31, 0xFF	; 255
 7ac:	cf 1a       	sub	r12, r31
 7ae:	df 0a       	sbc	r13, r31
 7b0:	da cf       	rjmp	.-76     	; 0x766 <Endpoint_Write_Stream_LE+0x34>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	08 95       	ret

000007c6 <Endpoint_Read_Stream_LE>:
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ec 01       	movw	r28, r24
 7d8:	8b 01       	movw	r16, r22
 7da:	7a 01       	movw	r14, r20
 7dc:	54 de       	rcall	.-856    	; 0x486 <Endpoint_WaitUntilReady>
 7de:	81 11       	cpse	r24, r1
 7e0:	33 c0       	rjmp	.+102    	; 0x848 <Endpoint_Read_Stream_LE+0x82>
 7e2:	e1 14       	cp	r14, r1
 7e4:	f1 04       	cpc	r15, r1
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <Endpoint_Read_Stream_LE+0x30>
 7e8:	f7 01       	movw	r30, r14
 7ea:	80 81       	ld	r24, Z
 7ec:	91 81       	ldd	r25, Z+1	; 0x01
 7ee:	08 1b       	sub	r16, r24
 7f0:	19 0b       	sbc	r17, r25
 7f2:	c8 0f       	add	r28, r24
 7f4:	d9 1f       	adc	r29, r25
 7f6:	c1 2c       	mov	r12, r1
 7f8:	d1 2c       	mov	r13, r1
 7fa:	01 15       	cp	r16, r1
 7fc:	11 05       	cpc	r17, r1
 7fe:	19 f1       	breq	.+70     	; 0x846 <Endpoint_Read_Stream_LE+0x80>
 800:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 804:	85 fd       	sbrc	r24, 5
 806:	16 c0       	rjmp	.+44     	; 0x834 <Endpoint_Read_Stream_LE+0x6e>
 808:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 80c:	8b 77       	andi	r24, 0x7B	; 123
 80e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 812:	63 d2       	rcall	.+1222   	; 0xcda <USB_USBTask>
 814:	e1 14       	cp	r14, r1
 816:	f1 04       	cpc	r15, r1
 818:	49 f0       	breq	.+18     	; 0x82c <Endpoint_Read_Stream_LE+0x66>
 81a:	f7 01       	movw	r30, r14
 81c:	80 81       	ld	r24, Z
 81e:	91 81       	ldd	r25, Z+1	; 0x01
 820:	c8 0e       	add	r12, r24
 822:	d9 1e       	adc	r13, r25
 824:	d1 82       	std	Z+1, r13	; 0x01
 826:	c0 82       	st	Z, r12
 828:	85 e0       	ldi	r24, 0x05	; 5
 82a:	0e c0       	rjmp	.+28     	; 0x848 <Endpoint_Read_Stream_LE+0x82>
 82c:	2c de       	rcall	.-936    	; 0x486 <Endpoint_WaitUntilReady>
 82e:	88 23       	and	r24, r24
 830:	21 f3       	breq	.-56     	; 0x7fa <Endpoint_Read_Stream_LE+0x34>
 832:	0a c0       	rjmp	.+20     	; 0x848 <Endpoint_Read_Stream_LE+0x82>
 834:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 838:	89 93       	st	Y+, r24
 83a:	01 50       	subi	r16, 0x01	; 1
 83c:	11 09       	sbc	r17, r1
 83e:	ff ef       	ldi	r31, 0xFF	; 255
 840:	cf 1a       	sub	r12, r31
 842:	df 0a       	sbc	r13, r31
 844:	da cf       	rjmp	.-76     	; 0x7fa <Endpoint_Read_Stream_LE+0x34>
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	ff 90       	pop	r15
 852:	ef 90       	pop	r14
 854:	df 90       	pop	r13
 856:	cf 90       	pop	r12
 858:	08 95       	ret

0000085a <Endpoint_Write_Control_Stream_LE>:
 85a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 85e:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 862:	26 17       	cp	r18, r22
 864:	37 07       	cpc	r19, r23
 866:	48 f0       	brcs	.+18     	; 0x87a <Endpoint_Write_Control_Stream_LE+0x20>
 868:	61 15       	cp	r22, r1
 86a:	71 05       	cpc	r23, r1
 86c:	39 f4       	brne	.+14     	; 0x87c <Endpoint_Write_Control_Stream_LE+0x22>
 86e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 872:	2e 77       	andi	r18, 0x7E	; 126
 874:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 878:	01 c0       	rjmp	.+2      	; 0x87c <Endpoint_Write_Control_Stream_LE+0x22>
 87a:	b9 01       	movw	r22, r18
 87c:	fc 01       	movw	r30, r24
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	61 15       	cp	r22, r1
 882:	71 05       	cpc	r23, r1
 884:	69 f1       	breq	.+90     	; 0x8e0 <Endpoint_Write_Control_Stream_LE+0x86>
 886:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 88a:	88 23       	and	r24, r24
 88c:	d1 f1       	breq	.+116    	; 0x902 <Endpoint_Write_Control_Stream_LE+0xa8>
 88e:	85 30       	cpi	r24, 0x05	; 5
 890:	d1 f1       	breq	.+116    	; 0x906 <Endpoint_Write_Control_Stream_LE+0xac>
 892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 896:	83 fd       	sbrc	r24, 3
 898:	32 c0       	rjmp	.+100    	; 0x8fe <Endpoint_Write_Control_Stream_LE+0xa4>
 89a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 89e:	82 fd       	sbrc	r24, 2
 8a0:	28 c0       	rjmp	.+80     	; 0x8f2 <Endpoint_Write_Control_Stream_LE+0x98>
 8a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a6:	80 ff       	sbrs	r24, 0
 8a8:	eb cf       	rjmp	.-42     	; 0x880 <Endpoint_Write_Control_Stream_LE+0x26>
 8aa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 8ae:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 8b2:	61 15       	cp	r22, r1
 8b4:	71 05       	cpc	r23, r1
 8b6:	51 f0       	breq	.+20     	; 0x8cc <Endpoint_Write_Control_Stream_LE+0x72>
 8b8:	88 30       	cpi	r24, 0x08	; 8
 8ba:	91 05       	cpc	r25, r1
 8bc:	38 f4       	brcc	.+14     	; 0x8cc <Endpoint_Write_Control_Stream_LE+0x72>
 8be:	21 91       	ld	r18, Z+
 8c0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8c4:	61 50       	subi	r22, 0x01	; 1
 8c6:	71 09       	sbc	r23, r1
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	f3 cf       	rjmp	.-26     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x58>
 8cc:	21 e0       	ldi	r18, 0x01	; 1
 8ce:	08 97       	sbiw	r24, 0x08	; 8
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0x7a>
 8d2:	20 e0       	ldi	r18, 0x00	; 0
 8d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8d8:	8e 77       	andi	r24, 0x7E	; 126
 8da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8de:	d0 cf       	rjmp	.-96     	; 0x880 <Endpoint_Write_Control_Stream_LE+0x26>
 8e0:	21 11       	cpse	r18, r1
 8e2:	d1 cf       	rjmp	.-94     	; 0x886 <Endpoint_Write_Control_Stream_LE+0x2c>
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <Endpoint_Write_Control_Stream_LE+0x98>
 8e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 8ea:	88 23       	and	r24, r24
 8ec:	51 f0       	breq	.+20     	; 0x902 <Endpoint_Write_Control_Stream_LE+0xa8>
 8ee:	85 30       	cpi	r24, 0x05	; 5
 8f0:	51 f0       	breq	.+20     	; 0x906 <Endpoint_Write_Control_Stream_LE+0xac>
 8f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8f6:	82 ff       	sbrs	r24, 2
 8f8:	f6 cf       	rjmp	.-20     	; 0x8e6 <Endpoint_Write_Control_Stream_LE+0x8c>
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	08 95       	ret
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	08 95       	ret
 902:	82 e0       	ldi	r24, 0x02	; 2
 904:	08 95       	ret
 906:	83 e0       	ldi	r24, 0x03	; 3
 908:	08 95       	ret

0000090a <Endpoint_Read_Control_Stream_LE>:
 90a:	61 15       	cp	r22, r1
 90c:	71 05       	cpc	r23, r1
 90e:	29 f4       	brne	.+10     	; 0x91a <Endpoint_Read_Control_Stream_LE+0x10>
 910:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 914:	2b 77       	andi	r18, 0x7B	; 123
 916:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 91a:	fc 01       	movw	r30, r24
 91c:	61 15       	cp	r22, r1
 91e:	71 05       	cpc	r23, r1
 920:	31 f1       	breq	.+76     	; 0x96e <Endpoint_Read_Control_Stream_LE+0x64>
 922:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 926:	88 23       	and	r24, r24
 928:	51 f1       	breq	.+84     	; 0x97e <Endpoint_Read_Control_Stream_LE+0x74>
 92a:	85 30       	cpi	r24, 0x05	; 5
 92c:	51 f1       	breq	.+84     	; 0x982 <Endpoint_Read_Control_Stream_LE+0x78>
 92e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 932:	83 fd       	sbrc	r24, 3
 934:	22 c0       	rjmp	.+68     	; 0x97a <Endpoint_Read_Control_Stream_LE+0x70>
 936:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 93a:	82 ff       	sbrs	r24, 2
 93c:	ef cf       	rjmp	.-34     	; 0x91c <Endpoint_Read_Control_Stream_LE+0x12>
 93e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 942:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 946:	89 2b       	or	r24, r25
 948:	31 f0       	breq	.+12     	; 0x956 <Endpoint_Read_Control_Stream_LE+0x4c>
 94a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 94e:	81 93       	st	Z+, r24
 950:	61 50       	subi	r22, 0x01	; 1
 952:	71 09       	sbc	r23, r1
 954:	a1 f7       	brne	.-24     	; 0x93e <Endpoint_Read_Control_Stream_LE+0x34>
 956:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 95a:	8b 77       	andi	r24, 0x7B	; 123
 95c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 960:	dd cf       	rjmp	.-70     	; 0x91c <Endpoint_Read_Control_Stream_LE+0x12>
 962:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 966:	88 23       	and	r24, r24
 968:	51 f0       	breq	.+20     	; 0x97e <Endpoint_Read_Control_Stream_LE+0x74>
 96a:	85 30       	cpi	r24, 0x05	; 5
 96c:	51 f0       	breq	.+20     	; 0x982 <Endpoint_Read_Control_Stream_LE+0x78>
 96e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 972:	80 ff       	sbrs	r24, 0
 974:	f6 cf       	rjmp	.-20     	; 0x962 <Endpoint_Read_Control_Stream_LE+0x58>
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	08 95       	ret
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	08 95       	ret
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	08 95       	ret
 982:	83 e0       	ldi	r24, 0x03	; 3
 984:	08 95       	ret

00000986 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 986:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 98a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 98e:	26 17       	cp	r18, r22
 990:	37 07       	cpc	r19, r23
 992:	48 f0       	brcs	.+18     	; 0x9a6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 994:	61 15       	cp	r22, r1
 996:	71 05       	cpc	r23, r1
 998:	39 f4       	brne	.+14     	; 0x9a8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 99a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 99e:	2e 77       	andi	r18, 0x7E	; 126
 9a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <Endpoint_Write_Control_PStream_LE+0x22>
 9a6:	b9 01       	movw	r22, r18
 9a8:	fc 01       	movw	r30, r24
 9aa:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9ac:	61 15       	cp	r22, r1
 9ae:	71 05       	cpc	r23, r1
 9b0:	71 f1       	breq	.+92     	; 0xa0e <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9b6:	88 23       	and	r24, r24
 9b8:	d9 f1       	breq	.+118    	; 0xa30 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9ba:	85 30       	cpi	r24, 0x05	; 5
 9bc:	d9 f1       	breq	.+118    	; 0xa34 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9c2:	83 fd       	sbrc	r24, 3
 9c4:	33 c0       	rjmp	.+102    	; 0xa2c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9ca:	82 fd       	sbrc	r24, 2
 9cc:	29 c0       	rjmp	.+82     	; 0xa20 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 9d2:	80 ff       	sbrs	r24, 0
 9d4:	eb cf       	rjmp	.-42     	; 0x9ac <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9d6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 9da:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 9de:	61 15       	cp	r22, r1
 9e0:	71 05       	cpc	r23, r1
 9e2:	59 f0       	breq	.+22     	; 0x9fa <Endpoint_Write_Control_PStream_LE+0x74>
 9e4:	88 30       	cpi	r24, 0x08	; 8
 9e6:	91 05       	cpc	r25, r1
 9e8:	40 f4       	brcc	.+16     	; 0x9fa <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9ea:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9ec:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 9f0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 9f2:	61 50       	subi	r22, 0x01	; 1
 9f4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 9f6:	01 96       	adiw	r24, 0x01	; 1
 9f8:	f2 cf       	rjmp	.-28     	; 0x9de <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 9fa:	21 e0       	ldi	r18, 0x01	; 1
 9fc:	08 97       	sbiw	r24, 0x08	; 8
 9fe:	09 f0       	breq	.+2      	; 0xa02 <Endpoint_Write_Control_PStream_LE+0x7c>
 a00:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a06:	8e 77       	andi	r24, 0x7E	; 126
 a08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a0c:	cf cf       	rjmp	.-98     	; 0x9ac <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a0e:	21 11       	cpse	r18, r1
 a10:	d0 cf       	rjmp	.-96     	; 0x9b2 <Endpoint_Write_Control_PStream_LE+0x2c>
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a14:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a18:	88 23       	and	r24, r24
 a1a:	51 f0       	breq	.+20     	; 0xa30 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a1c:	85 30       	cpi	r24, 0x05	; 5
 a1e:	51 f0       	breq	.+20     	; 0xa34 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a24:	82 ff       	sbrs	r24, 2
 a26:	f6 cf       	rjmp	.-20     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 a34:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a36:	08 95       	ret

00000a38 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a38:	0f 93       	push	r16
 a3a:	1f 93       	push	r17
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	aa 97       	sbiw	r28, 0x2a	; 42
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	f8 94       	cli
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	cd bf       	out	0x3d, r28	; 61
 a50:	e5 e0       	ldi	r30, 0x05	; 5
 a52:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a54:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a58:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a5a:	21 e0       	ldi	r18, 0x01	; 1
 a5c:	ed 30       	cpi	r30, 0x0D	; 13
 a5e:	f2 07       	cpc	r31, r18
 a60:	c9 f7       	brne	.-14     	; 0xa54 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a62:	e8 db       	rcall	.-2096   	; 0x234 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 a68:	83 ff       	sbrs	r24, 3
 a6a:	1d c1       	rjmp	.+570    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a6c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 a70:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <USB_ControlRequest+0x1>
 a74:	49 2f       	mov	r20, r25
 a76:	50 e0       	ldi	r21, 0x00	; 0
 a78:	4a 30       	cpi	r20, 0x0A	; 10
 a7a:	51 05       	cpc	r21, r1
 a7c:	08 f0       	brcs	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0x48>
 a7e:	13 c1       	rjmp	.+550    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
 a80:	fa 01       	movw	r30, r20
 a82:	e4 5b       	subi	r30, 0xB4	; 180
 a84:	ff 4f       	sbci	r31, 0xFF	; 255
 a86:	3b c1       	rjmp	.+630    	; 0xcfe <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a88:	80 38       	cpi	r24, 0x80	; 128
 a8a:	81 f0       	breq	.+32     	; 0xaac <USB_Device_ProcessControlRequest+0x74>
 a8c:	82 38       	cpi	r24, 0x82	; 130
 a8e:	09 f0       	breq	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0x5a>
 a90:	0a c1       	rjmp	.+532    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a92:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 a96:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a98:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a9c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 aa0:	85 fb       	bst	r24, 5
 aa2:	88 27       	eor	r24, r24
 aa4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aa6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 aac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ab0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 ab4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ab6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 abc:	97 7f       	andi	r25, 0xF7	; 247
 abe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ac2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 ac6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 aca:	c5 c0       	rjmp	.+394    	; 0xc56 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 acc:	28 2f       	mov	r18, r24
 ace:	2d 7f       	andi	r18, 0xFD	; 253
 ad0:	09 f0       	breq	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0x9c>
 ad2:	e9 c0       	rjmp	.+466    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ad4:	88 23       	and	r24, r24
 ad6:	19 f0       	breq	.+6      	; 0xade <USB_Device_ProcessControlRequest+0xa6>
 ad8:	82 30       	cpi	r24, 0x02	; 2
 ada:	61 f0       	breq	.+24     	; 0xaf4 <USB_Device_ProcessControlRequest+0xbc>
 adc:	e4 c0       	rjmp	.+456    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ade:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 ae2:	81 30       	cpi	r24, 0x01	; 1
 ae4:	09 f0       	breq	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0xb0>
 ae6:	df c0       	rjmp	.+446    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ae8:	93 30       	cpi	r25, 0x03	; 3
 aea:	09 f0       	breq	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0xb6>
 aec:	80 e0       	ldi	r24, 0x00	; 0
 aee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 af2:	2b c0       	rjmp	.+86     	; 0xb4a <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 af4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 af8:	81 11       	cpse	r24, r1
 afa:	27 c0       	rjmp	.+78     	; 0xb4a <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 afc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 b00:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b02:	09 f4       	brne	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0xce>
 b04:	d0 c0       	rjmp	.+416    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b06:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b0a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b0e:	20 ff       	sbrs	r18, 0
 b10:	1c c0       	rjmp	.+56     	; 0xb4a <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b12:	93 30       	cpi	r25, 0x03	; 3
 b14:	21 f4       	brne	.+8      	; 0xb1e <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b16:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b1a:	80 62       	ori	r24, 0x20	; 32
 b1c:	14 c0       	rjmp	.+40     	; 0xb46 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b1e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b22:	90 61       	ori	r25, 0x10	; 16
 b24:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 b28:	21 e0       	ldi	r18, 0x01	; 1
 b2a:	30 e0       	ldi	r19, 0x00	; 0
 b2c:	a9 01       	movw	r20, r18
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <USB_Device_ProcessControlRequest+0xfc>
 b30:	44 0f       	add	r20, r20
 b32:	55 1f       	adc	r21, r21
 b34:	8a 95       	dec	r24
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <USB_Device_ProcessControlRequest+0xf8>
 b38:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 b3c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b40:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b44:	88 60       	ori	r24, 0x08	; 8
 b46:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b4a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b52:	87 7f       	andi	r24, 0xF7	; 247
 b54:	83 c0       	rjmp	.+262    	; 0xc5c <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b56:	81 11       	cpse	r24, r1
 b58:	a6 c0       	rjmp	.+332    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b5a:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 b5e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b60:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b62:	f8 94       	cli
 b64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b68:	87 7f       	andi	r24, 0xF7	; 247
 b6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b6e:	6c dc       	rcall	.-1832   	; 0x448 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 b74:	80 ff       	sbrs	r24, 0
 b76:	fc cf       	rjmp	.-8      	; 0xb70 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b78:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 b7c:	80 78       	andi	r24, 0x80	; 128
 b7e:	81 2b       	or	r24, r17

				UDADDR = Temp;
 b80:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 b84:	80 68       	ori	r24, 0x80	; 128
 b86:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b8a:	11 11       	cpse	r17, r1
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <USB_Device_ProcessControlRequest+0x15a>
 b8e:	82 e0       	ldi	r24, 0x02	; 2
 b90:	01 c0       	rjmp	.+2      	; 0xb94 <USB_Device_ProcessControlRequest+0x15c>
 b92:	83 e0       	ldi	r24, 0x03	; 3
 b94:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b98:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 b9a:	85 c0       	rjmp	.+266    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b9c:	80 58       	subi	r24, 0x80	; 128
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	08 f0       	brcs	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x16c>
 ba2:	81 c0       	rjmp	.+258    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ba4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 ba8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 bac:	8c 3d       	cpi	r24, 0xDC	; 220
 bae:	53 e0       	ldi	r21, 0x03	; 3
 bb0:	95 07       	cpc	r25, r21
 bb2:	71 f5       	brne	.+92     	; 0xc10 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bb4:	83 e0       	ldi	r24, 0x03	; 3
 bb6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bb8:	8a e2       	ldi	r24, 0x2A	; 42
 bba:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bbc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bbe:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bc0:	de 01       	movw	r26, r28
 bc2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bc4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bc6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bc8:	51 e2       	ldi	r21, 0x21	; 33
 bca:	e3 2f       	mov	r30, r19
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 bd2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 bd4:	20 ff       	sbrs	r18, 0
 bd6:	03 c0       	rjmp	.+6      	; 0xbde <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 bd8:	e2 95       	swap	r30
 bda:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bdc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 bde:	ef 70       	andi	r30, 0x0F	; 15
 be0:	8e 2f       	mov	r24, r30
 be2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 be4:	ea 30       	cpi	r30, 0x0A	; 10
 be6:	10 f0       	brcs	.+4      	; 0xbec <USB_Device_ProcessControlRequest+0x1b4>
 be8:	c7 96       	adiw	r24, 0x37	; 55
 bea:	01 c0       	rjmp	.+2      	; 0xbee <USB_Device_ProcessControlRequest+0x1b6>
 bec:	c0 96       	adiw	r24, 0x30	; 48
 bee:	8d 93       	st	X+, r24
 bf0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bf2:	2f 5f       	subi	r18, 0xFF	; 255
 bf4:	24 31       	cpi	r18, 0x14	; 20
 bf6:	49 f7       	brne	.-46     	; 0xbca <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bf8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bfe:	87 7f       	andi	r24, 0xF7	; 247
 c00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c04:	6a e2       	ldi	r22, 0x2A	; 42
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	ce 01       	movw	r24, r28
 c0a:	01 96       	adiw	r24, 0x01	; 1
 c0c:	26 de       	rcall	.-948    	; 0x85a <Endpoint_Write_Control_Stream_LE>
 c0e:	12 c0       	rjmp	.+36     	; 0xc34 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c10:	ae 01       	movw	r20, r28
 c12:	4f 5f       	subi	r20, 0xFF	; 255
 c14:	5f 4f       	sbci	r21, 0xFF	; 255
 c16:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 c1a:	a1 db       	rcall	.-2238   	; 0x35e <CALLBACK_USB_GetDescriptor>
 c1c:	bc 01       	movw	r22, r24
 c1e:	89 2b       	or	r24, r25
 c20:	09 f4       	brne	.+2      	; 0xc24 <USB_Device_ProcessControlRequest+0x1ec>
 c22:	41 c0       	rjmp	.+130    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
 c24:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c28:	97 7f       	andi	r25, 0xF7	; 247
 c2a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	9a 81       	ldd	r25, Y+2	; 0x02
 c32:	a9 de       	rcall	.-686    	; 0x986 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c38:	8b 77       	andi	r24, 0x7B	; 123
 c3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c3e:	33 c0       	rjmp	.+102    	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c40:	80 38       	cpi	r24, 0x80	; 128
 c42:	89 f5       	brne	.+98     	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c48:	87 7f       	andi	r24, 0xF7	; 247
 c4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c52:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c5a:	8e 77       	andi	r24, 0x7E	; 126
 c5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c60:	f3 db       	rcall	.-2074   	; 0x448 <Endpoint_ClearStatusStage>
 c62:	21 c0       	rjmp	.+66     	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c64:	81 11       	cpse	r24, r1
 c66:	1f c0       	rjmp	.+62     	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c68:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 c6c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 c70:	99 27       	eor	r25, r25
 c72:	02 97       	sbiw	r24, 0x02	; 2
 c74:	c4 f4       	brge	.+48     	; 0xca6 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c7a:	87 7f       	andi	r24, 0xF7	; 247
 c7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c80:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 c84:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	Endpoint_ClearStatusStage();
 c88:	df db       	rcall	.-2114   	; 0x448 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 c8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c8e:	81 11       	cpse	r24, r1
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c92:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c96:	87 fd       	sbrc	r24, 7
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <USB_Device_ProcessControlRequest+0x266>
 c9a:	81 e0       	ldi	r24, 0x01	; 1
 c9c:	01 c0       	rjmp	.+2      	; 0xca0 <USB_Device_ProcessControlRequest+0x268>
 c9e:	84 e0       	ldi	r24, 0x04	; 4
 ca0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 ca4:	8f da       	rcall	.-2786   	; 0x1c4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ca6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 caa:	83 ff       	sbrs	r24, 3
 cac:	0a c0       	rjmp	.+20     	; 0xcc2 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 cb2:	80 62       	ori	r24, 0x20	; 32
 cb4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cbc:	87 7f       	andi	r24, 0xF7	; 247
 cbe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 cc2:	aa 96       	adiw	r28, 0x2a	; 42
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	f8 94       	cli
 cc8:	de bf       	out	0x3e, r29	; 62
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	cd bf       	out	0x3d, r28	; 61
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
 cd2:	1f 91       	pop	r17
 cd4:	0f 91       	pop	r16
 cd6:	08 95       	ret

00000cd8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 cd8:	08 95       	ret

00000cda <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cda:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 cdc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 ce0:	88 23       	and	r24, r24
 ce2:	59 f0       	breq	.+22     	; 0xcfa <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ce4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 ce8:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cea:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cf2:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 cf4:	a1 de       	rcall	.-702    	; 0xa38 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 cfa:	cf 91       	pop	r28
 cfc:	08 95       	ret

00000cfe <__tablejump2__>:
 cfe:	ee 0f       	add	r30, r30
 d00:	ff 1f       	adc	r31, r31
 d02:	00 24       	eor	r0, r0
 d04:	00 1c       	adc	r0, r0
 d06:	0b be       	out	0x3b, r0	; 59
 d08:	07 90       	elpm	r0, Z+
 d0a:	f6 91       	elpm	r31, Z
 d0c:	e0 2d       	mov	r30, r0
 d0e:	09 94       	ijmp

00000d10 <_exit>:
 d10:	f8 94       	cli

00000d12 <__stop_program>:
 d12:	ff cf       	rjmp	.-2      	; 0xd12 <__stop_program>
