
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  0001fd92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d92  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080018c  0080018c  00000eb2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f75  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019e4  00000000  00000000  000060b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b2f  00000000  00000000  00007a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  0000a5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020dd  00000000  00000000  0000ad04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e46  00000000  00000000  0000cde1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000fc27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	55 c0       	rjmp	.+170    	; 0x1f0ac <__ctors_end>
   1f002:	00 00       	nop
   1f004:	70 c0       	rjmp	.+224    	; 0x1f0e6 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	6e c0       	rjmp	.+220    	; 0x1f0e6 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	6c c0       	rjmp	.+216    	; 0x1f0e6 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	6a c0       	rjmp	.+212    	; 0x1f0e6 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	68 c0       	rjmp	.+208    	; 0x1f0e6 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	66 c0       	rjmp	.+204    	; 0x1f0e6 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	64 c0       	rjmp	.+200    	; 0x1f0e6 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	62 c0       	rjmp	.+196    	; 0x1f0e6 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	60 c0       	rjmp	.+192    	; 0x1f0e6 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	3c c4       	rjmp	.+2168   	; 0x1f8a2 <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	5c c0       	rjmp	.+184    	; 0x1f0e6 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	5a c0       	rjmp	.+180    	; 0x1f0e6 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	58 c0       	rjmp	.+176    	; 0x1f0e6 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	56 c0       	rjmp	.+172    	; 0x1f0e6 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	54 c0       	rjmp	.+168    	; 0x1f0e6 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	52 c0       	rjmp	.+164    	; 0x1f0e6 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	50 c0       	rjmp	.+160    	; 0x1f0e6 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	4e c0       	rjmp	.+156    	; 0x1f0e6 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	4c c0       	rjmp	.+152    	; 0x1f0e6 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	a3 c0       	rjmp	.+326    	; 0x1f198 <__vector_20>
   1f052:	00 00       	nop
   1f054:	48 c0       	rjmp	.+144    	; 0x1f0e6 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	46 c0       	rjmp	.+140    	; 0x1f0e6 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	44 c0       	rjmp	.+136    	; 0x1f0e6 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	42 c0       	rjmp	.+132    	; 0x1f0e6 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	40 c0       	rjmp	.+128    	; 0x1f0e6 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	3e c0       	rjmp	.+124    	; 0x1f0e6 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	3c c0       	rjmp	.+120    	; 0x1f0e6 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	3a c0       	rjmp	.+116    	; 0x1f0e6 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	38 c0       	rjmp	.+112    	; 0x1f0e6 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	36 c0       	rjmp	.+108    	; 0x1f0e6 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	34 c0       	rjmp	.+104    	; 0x1f0e6 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	32 c0       	rjmp	.+100    	; 0x1f0e6 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	30 c0       	rjmp	.+96     	; 0x1f0e6 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	2e c0       	rjmp	.+92     	; 0x1f0e6 <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	2c c0       	rjmp	.+88     	; 0x1f0e6 <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	2a c0       	rjmp	.+84     	; 0x1f0e6 <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	28 c0       	rjmp	.+80     	; 0x1f0e6 <__bad_interrupt>
   1f096:	00 00       	nop
   1f098:	bc fd       	.word	0xfdbc	; ????
   1f09a:	d5 fd       	sbrc	r29, 5
   1f09c:	81 fe       	sbrs	r8, 1
   1f09e:	d5 fd       	sbrc	r29, 5
   1f0a0:	81 fe       	sbrs	r8, 1
   1f0a2:	0d fe       	.word	0xfe0d	; ????
   1f0a4:	2f fe       	.word	0xfe2f	; ????
   1f0a6:	81 fe       	sbrs	r8, 1
   1f0a8:	4f fe       	.word	0xfe4f	; ????
   1f0aa:	61 fe       	sbrs	r6, 1

0001f0ac <__ctors_end>:
   1f0ac:	11 24       	eor	r1, r1
   1f0ae:	1f be       	out	0x3f, r1	; 63
   1f0b0:	cf ef       	ldi	r28, 0xFF	; 255
   1f0b2:	d0 e2       	ldi	r29, 0x20	; 32
   1f0b4:	de bf       	out	0x3e, r29	; 62
   1f0b6:	cd bf       	out	0x3d, r28	; 61

0001f0b8 <__do_copy_data>:
   1f0b8:	11 e0       	ldi	r17, 0x01	; 1
   1f0ba:	a0 e0       	ldi	r26, 0x00	; 0
   1f0bc:	b1 e0       	ldi	r27, 0x01	; 1
   1f0be:	e2 e9       	ldi	r30, 0x92	; 146
   1f0c0:	fd ef       	ldi	r31, 0xFD	; 253
   1f0c2:	01 e0       	ldi	r16, 0x01	; 1
   1f0c4:	0b bf       	out	0x3b, r16	; 59
   1f0c6:	02 c0       	rjmp	.+4      	; 0x1f0cc <__do_copy_data+0x14>
   1f0c8:	07 90       	elpm	r0, Z+
   1f0ca:	0d 92       	st	X+, r0
   1f0cc:	ac 38       	cpi	r26, 0x8C	; 140
   1f0ce:	b1 07       	cpc	r27, r17
   1f0d0:	d9 f7       	brne	.-10     	; 0x1f0c8 <__do_copy_data+0x10>

0001f0d2 <__do_clear_bss>:
   1f0d2:	21 e0       	ldi	r18, 0x01	; 1
   1f0d4:	ac e8       	ldi	r26, 0x8C	; 140
   1f0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1f0d8:	01 c0       	rjmp	.+2      	; 0x1f0dc <.do_clear_bss_start>

0001f0da <.do_clear_bss_loop>:
   1f0da:	1d 92       	st	X+, r1

0001f0dc <.do_clear_bss_start>:
   1f0dc:	aa 39       	cpi	r26, 0x9A	; 154
   1f0de:	b2 07       	cpc	r27, r18
   1f0e0:	e1 f7       	brne	.-8      	; 0x1f0da <.do_clear_bss_loop>
   1f0e2:	13 d3       	rcall	.+1574   	; 0x1f70a <main>
   1f0e4:	54 c6       	rjmp	.+3240   	; 0x1fd8e <_exit>

0001f0e6 <__bad_interrupt>:
   1f0e6:	8c cf       	rjmp	.-232    	; 0x1f000 <__vectors>

0001f0e8 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f0e8:	84 e0       	ldi	r24, 0x04	; 4
   1f0ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f0ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1f0f2:	85 fd       	sbrc	r24, 5
   1f0f4:	0d c0       	rjmp	.+26     	; 0x1f110 <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f0f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f0fa:	8b 77       	andi	r24, 0x7B	; 123
   1f0fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f100:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1f104:	82 fd       	sbrc	r24, 2
   1f106:	f3 cf       	rjmp	.-26     	; 0x1f0ee <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f108:	8e b3       	in	r24, 0x1e	; 30
   1f10a:	81 11       	cpse	r24, r1
   1f10c:	f9 cf       	rjmp	.-14     	; 0x1f100 <FetchNextCommandByte+0x18>
   1f10e:	02 c0       	rjmp	.+4      	; 0x1f114 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f110:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1f114:	08 95       	ret

0001f116 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f116:	93 e0       	ldi	r25, 0x03	; 3
   1f118:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f11c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1f120:	95 ff       	sbrs	r25, 5
   1f122:	03 c0       	rjmp	.+6      	; 0x1f12a <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f124:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f128:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f12a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f12e:	9e 77       	andi	r25, 0x7E	; 126
   1f130:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f134:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1f138:	90 fd       	sbrc	r25, 0
   1f13a:	f4 cf       	rjmp	.-24     	; 0x1f124 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f13c:	9e b3       	in	r25, 0x1e	; 30
   1f13e:	91 11       	cpse	r25, r1
   1f140:	f9 cf       	rjmp	.-14     	; 0x1f134 <WriteNextResponseByte+0x1e>
   1f142:	08 95       	ret

0001f144 <SetupHardware>:
	for (;;);
}

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
   1f144:	cf 93       	push	r28
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f146:	84 b7       	in	r24, 0x34	; 52
   1f148:	87 7f       	andi	r24, 0xF7	; 247
   1f14a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1f14c:	0f b6       	in	r0, 0x3f	; 63
   1f14e:	f8 94       	cli
   1f150:	a8 95       	wdr
   1f152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f156:	88 61       	ori	r24, 0x18	; 24
   1f158:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f15c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f160:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1f162:	90 e0       	ldi	r25, 0x00	; 0
   1f164:	80 e8       	ldi	r24, 0x80	; 128
   1f166:	0f b6       	in	r0, 0x3f	; 63
   1f168:	f8 94       	cli
   1f16a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1f16e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1f172:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1f174:	c1 e0       	ldi	r28, 0x01	; 1
   1f176:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1f178:	82 e0       	ldi	r24, 0x02	; 2
   1f17a:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB Subsystem */
	USB_Init();
   1f17c:	7c d3       	rcall	.+1784   	; 0x1f876 <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1f17e:	8a b1       	in	r24, 0x0a	; 10
   1f180:	80 6f       	ori	r24, 0xF0	; 240
   1f182:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   1f184:	8b b1       	in	r24, 0x0b	; 11
   1f186:	8f 70       	andi	r24, 0x0F	; 15
   1f188:	8b b9       	out	0x0b, r24	; 11
	LEDs_Init();
	
	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1f18a:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));	
   1f18e:	83 e0       	ldi	r24, 0x03	; 3
   1f190:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}
   1f194:	cf 91       	pop	r28
   1f196:	08 95       	ret

0001f198 <__vector_20>:

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1f198:	1f 92       	push	r1
   1f19a:	0f 92       	push	r0
   1f19c:	0f b6       	in	r0, 0x3f	; 63
   1f19e:	0f 92       	push	r0
   1f1a0:	11 24       	eor	r1, r1
   1f1a2:	8f 93       	push	r24
   1f1a4:	9f 93       	push	r25
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
   1f1a6:	9b b1       	in	r25, 0x0b	; 11
   1f1a8:	80 e3       	ldi	r24, 0x30	; 48
   1f1aa:	89 27       	eor	r24, r25
   1f1ac:	8b b9       	out	0x0b, r24	; 11
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1f1ae:	9f 91       	pop	r25
   1f1b0:	8f 91       	pop	r24
   1f1b2:	0f 90       	pop	r0
   1f1b4:	0f be       	out	0x3f, r0	; 63
   1f1b6:	0f 90       	pop	r0
   1f1b8:	1f 90       	pop	r1
   1f1ba:	18 95       	reti

0001f1bc <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f1bc:	42 e0       	ldi	r20, 0x02	; 2
   1f1be:	61 ec       	ldi	r22, 0xC1	; 193
   1f1c0:	82 e0       	ldi	r24, 0x02	; 2
   1f1c2:	e9 d2       	rcall	.+1490   	; 0x1f796 <Endpoint_ConfigureEndpoint_Prv>
   1f1c4:	42 e1       	ldi	r20, 0x12	; 18
   1f1c6:	61 e8       	ldi	r22, 0x81	; 129
   1f1c8:	83 e0       	ldi	r24, 0x03	; 3
   1f1ca:	e5 d2       	rcall	.+1482   	; 0x1f796 <Endpoint_ConfigureEndpoint_Prv>
   1f1cc:	42 e1       	ldi	r20, 0x12	; 18
   1f1ce:	60 e8       	ldi	r22, 0x80	; 128
   1f1d0:	84 e0       	ldi	r24, 0x04	; 4
   1f1d2:	e1 c2       	rjmp	.+1474   	; 0x1f796 <Endpoint_ConfigureEndpoint_Prv>

0001f1d4 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1f1d4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <USB_ControlRequest>
   1f1d8:	8f 77       	andi	r24, 0x7F	; 127
   1f1da:	81 32       	cpi	r24, 0x21	; 33
   1f1dc:	79 f5       	brne	.+94     	; 0x1f23c <EVENT_USB_Device_ControlRequest+0x68>
   1f1de:	9b b1       	in	r25, 0x0b	; 11
   1f1e0:	80 e3       	ldi	r24, 0x30	; 48
   1f1e2:	89 27       	eor	r24, r25
   1f1e4:	8b b9       	out	0x0b, r24	; 11

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1f1e6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <USB_ControlRequest+0x1>
   1f1ea:	80 32       	cpi	r24, 0x20	; 32
   1f1ec:	a1 f0       	breq	.+40     	; 0x1f216 <EVENT_USB_Device_ControlRequest+0x42>
   1f1ee:	81 32       	cpi	r24, 0x21	; 33
   1f1f0:	29 f5       	brne	.+74     	; 0x1f23c <EVENT_USB_Device_ControlRequest+0x68>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1f1f2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <USB_ControlRequest>
   1f1f6:	81 3a       	cpi	r24, 0xA1	; 161
   1f1f8:	09 f5       	brne	.+66     	; 0x1f23c <EVENT_USB_Device_ControlRequest+0x68>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f1fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f1fe:	87 7f       	andi	r24, 0xF7	; 247
   1f200:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1f204:	67 e0       	ldi	r22, 0x07	; 7
   1f206:	70 e0       	ldi	r23, 0x00	; 0
   1f208:	81 e0       	ldi	r24, 0x01	; 1
   1f20a:	91 e0       	ldi	r25, 0x01	; 1
   1f20c:	ff d3       	rcall	.+2046   	; 0x1fa0c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f20e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f212:	8b 77       	andi	r24, 0x7B	; 123
   1f214:	11 c0       	rjmp	.+34     	; 0x1f238 <EVENT_USB_Device_ControlRequest+0x64>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1f216:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <USB_ControlRequest>
   1f21a:	81 32       	cpi	r24, 0x21	; 33
   1f21c:	79 f4       	brne	.+30     	; 0x1f23c <EVENT_USB_Device_ControlRequest+0x68>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f21e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f222:	87 7f       	andi	r24, 0xF7	; 247
   1f224:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1f228:	67 e0       	ldi	r22, 0x07	; 7
   1f22a:	70 e0       	ldi	r23, 0x00	; 0
   1f22c:	81 e0       	ldi	r24, 0x01	; 1
   1f22e:	91 e0       	ldi	r25, 0x01	; 1
   1f230:	43 d4       	rcall	.+2182   	; 0x1fab8 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f232:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f236:	8e 77       	andi	r24, 0x7E	; 126
   1f238:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f23c:	08 95       	ret

0001f23e <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
   1f23e:	4f 92       	push	r4
   1f240:	5f 92       	push	r5
   1f242:	6f 92       	push	r6
   1f244:	7f 92       	push	r7
   1f246:	8f 92       	push	r8
   1f248:	9f 92       	push	r9
   1f24a:	af 92       	push	r10
   1f24c:	bf 92       	push	r11
   1f24e:	cf 92       	push	r12
   1f250:	df 92       	push	r13
   1f252:	ef 92       	push	r14
   1f254:	ff 92       	push	r15
   1f256:	0f 93       	push	r16
   1f258:	1f 93       	push	r17
   1f25a:	cf 93       	push	r28
   1f25c:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f25e:	84 e0       	ldi	r24, 0x04	; 4
   1f260:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f264:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1f268:	82 ff       	sbrs	r24, 2
   1f26a:	3e c2       	rjmp	.+1148   	; 0x1f6e8 <CDC_Task+0x4aa>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1f26c:	3d df       	rcall	.-390    	; 0x1f0e8 <FetchNextCommandByte>
   1f26e:	c8 2f       	mov	r28, r24

	if (Command == 'E')
   1f270:	85 34       	cpi	r24, 0x45	; 69
   1f272:	19 f4       	brne	.+6      	; 0x1f27a <CDC_Task+0x3c>
	{
		RunBootloader = false;
   1f274:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f278:	03 c0       	rjmp	.+6      	; 0x1f280 <CDC_Task+0x42>
	
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
   1f27a:	84 35       	cpi	r24, 0x54	; 84
	{
		FetchNextCommandByte();
   1f27c:	21 f4       	brne	.+8      	; 0x1f286 <CDC_Task+0x48>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1f27e:	34 df       	rcall	.-408    	; 0x1f0e8 <FetchNextCommandByte>
   1f280:	8d e0       	ldi	r24, 0x0D	; 13
   1f282:	49 df       	rcall	.-366    	; 0x1f116 <WriteNextResponseByte>
   1f284:	08 c2       	rjmp	.+1040   	; 0x1f696 <CDC_Task+0x458>
	}
	else if ((Command == 'L') || (Command == 'P'))
   1f286:	8c 34       	cpi	r24, 0x4C	; 76
   1f288:	d9 f3       	breq	.-10     	; 0x1f280 <CDC_Task+0x42>
   1f28a:	80 35       	cpi	r24, 0x50	; 80
   1f28c:	c9 f3       	breq	.-14     	; 0x1f280 <CDC_Task+0x42>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
   1f28e:	84 37       	cpi	r24, 0x74	; 116
   1f290:	11 f4       	brne	.+4      	; 0x1f296 <CDC_Task+0x58>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1f292:	84 e4       	ldi	r24, 0x44	; 68
   1f294:	82 c0       	rjmp	.+260    	; 0x1f39a <CDC_Task+0x15c>
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
   1f296:	81 36       	cpi	r24, 0x61	; 97
   1f298:	11 f4       	brne	.+4      	; 0x1f29e <CDC_Task+0x60>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1f29a:	89 e5       	ldi	r24, 0x59	; 89
	}
	else if (Command == 'A')
   1f29c:	f2 cf       	rjmp	.-28     	; 0x1f282 <CDC_Task+0x44>
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1f29e:	81 34       	cpi	r24, 0x41	; 65
   1f2a0:	91 f4       	brne	.+36     	; 0x1f2c6 <CDC_Task+0x88>
   1f2a2:	22 df       	rcall	.-444    	; 0x1f0e8 <FetchNextCommandByte>
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1f2a4:	c8 2f       	mov	r28, r24
   1f2a6:	20 df       	rcall	.-448    	; 0x1f0e8 <FetchNextCommandByte>
   1f2a8:	2c 2f       	mov	r18, r28
   1f2aa:	30 e0       	ldi	r19, 0x00	; 0
   1f2ac:	32 2f       	mov	r19, r18
   1f2ae:	22 27       	eor	r18, r18
   1f2b0:	33 0f       	add	r19, r19
   1f2b2:	90 e0       	ldi	r25, 0x00	; 0
   1f2b4:	88 0f       	add	r24, r24
   1f2b6:	99 1f       	adc	r25, r25
   1f2b8:	82 2b       	or	r24, r18
   1f2ba:	93 2b       	or	r25, r19
   1f2bc:	09 2e       	mov	r0, r25
   1f2be:	00 0c       	add	r0, r0
   1f2c0:	aa 0b       	sbc	r26, r26
   1f2c2:	bb 0b       	sbc	r27, r27
   1f2c4:	bc c1       	rjmp	.+888    	; 0x1f63e <CDC_Task+0x400>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
   1f2c6:	80 37       	cpi	r24, 0x70	; 112
   1f2c8:	11 f4       	brne	.+4      	; 0x1f2ce <CDC_Task+0x90>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1f2ca:	83 e5       	ldi	r24, 0x53	; 83
   1f2cc:	da cf       	rjmp	.-76     	; 0x1f282 <CDC_Task+0x44>
	}
	else if (Command == 'S')
   1f2ce:	83 35       	cpi	r24, 0x53	; 83
   1f2d0:	49 f4       	brne	.+18     	; 0x1f2e4 <CDC_Task+0xa6>
   1f2d2:	c4 e8       	ldi	r28, 0x84	; 132
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1f2d4:	d1 e0       	ldi	r29, 0x01	; 1
   1f2d6:	89 91       	ld	r24, Y+
   1f2d8:	1e df       	rcall	.-452    	; 0x1f116 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1f2da:	41 e0       	ldi	r20, 0x01	; 1
   1f2dc:	cb 38       	cpi	r28, 0x8B	; 139
   1f2de:	d4 07       	cpc	r29, r20
   1f2e0:	d1 f7       	brne	.-12     	; 0x1f2d6 <CDC_Task+0x98>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
   1f2e2:	d9 c1       	rjmp	.+946    	; 0x1f696 <CDC_Task+0x458>
   1f2e4:	86 35       	cpi	r24, 0x56	; 86
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1f2e6:	21 f4       	brne	.+8      	; 0x1f2f0 <CDC_Task+0xb2>
   1f2e8:	81 e3       	ldi	r24, 0x31	; 49
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1f2ea:	15 df       	rcall	.-470    	; 0x1f116 <WriteNextResponseByte>
	}
	else if (Command == 's')
   1f2ec:	80 e3       	ldi	r24, 0x30	; 48
   1f2ee:	c9 cf       	rjmp	.-110    	; 0x1f282 <CDC_Task+0x44>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1f2f0:	83 37       	cpi	r24, 0x73	; 115
   1f2f2:	31 f4       	brne	.+12     	; 0x1f300 <CDC_Task+0xc2>
   1f2f4:	82 e8       	ldi	r24, 0x82	; 130
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1f2f6:	0f df       	rcall	.-482    	; 0x1f116 <WriteNextResponseByte>
   1f2f8:	87 e9       	ldi	r24, 0x97	; 151
   1f2fa:	0d df       	rcall	.-486    	; 0x1f116 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1f2fc:	8e e1       	ldi	r24, 0x1E	; 30
   1f2fe:	c1 cf       	rjmp	.-126    	; 0x1f282 <CDC_Task+0x44>
	}
	else if (Command == 'e')
   1f300:	85 36       	cpi	r24, 0x65	; 101
   1f302:	11 f5       	brne	.+68     	; 0x1f348 <CDC_Task+0x10a>
   1f304:	80 e0       	ldi	r24, 0x00	; 0
   1f306:	90 e0       	ldi	r25, 0x00	; 0
   1f308:	dc 01       	movw	r26, r24
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1f30a:	23 e0       	ldi	r18, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1f30c:	35 e0       	ldi	r19, 0x05	; 5
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1f30e:	fc 01       	movw	r30, r24
   1f310:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f314:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f318:	e8 95       	spm
			boot_spm_busy_wait();
   1f31a:	07 b6       	in	r0, 0x37	; 55
   1f31c:	00 fc       	sbrc	r0, 0
   1f31e:	fd cf       	rjmp	.-6      	; 0x1f31a <CDC_Task+0xdc>
			boot_page_write(CurrFlashAddress);
   1f320:	fc 01       	movw	r30, r24
   1f322:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f326:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f32a:	e8 95       	spm
			boot_spm_busy_wait();
   1f32c:	07 b6       	in	r0, 0x37	; 55
   1f32e:	00 fc       	sbrc	r0, 0
   1f330:	fd cf       	rjmp	.-6      	; 0x1f32c <CDC_Task+0xee>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1f332:	9f 5f       	subi	r25, 0xFF	; 255
   1f334:	af 4f       	sbci	r26, 0xFF	; 255
   1f336:	bf 4f       	sbci	r27, 0xFF	; 255
   1f338:	81 15       	cp	r24, r1
   1f33a:	50 ef       	ldi	r21, 0xF0	; 240
   1f33c:	95 07       	cpc	r25, r21
   1f33e:	51 e0       	ldi	r21, 0x01	; 1
   1f340:	a5 07       	cpc	r26, r21
   1f342:	b1 05       	cpc	r27, r1
   1f344:	21 f7       	brne	.-56     	; 0x1f30e <CDC_Task+0xd0>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
   1f346:	9c cf       	rjmp	.-200    	; 0x1f280 <CDC_Task+0x42>
   1f348:	8c 36       	cpi	r24, 0x6C	; 108
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1f34a:	51 f4       	brne	.+20     	; 0x1f360 <CDC_Task+0x122>
   1f34c:	cd de       	rcall	.-614    	; 0x1f0e8 <FetchNextCommandByte>
   1f34e:	80 95       	com	r24
   1f350:	99 e0       	ldi	r25, 0x09	; 9
   1f352:	e1 e0       	ldi	r30, 0x01	; 1
   1f354:	f0 e0       	ldi	r31, 0x00	; 0
   1f356:	08 2e       	mov	r0, r24
   1f358:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f35c:	e8 95       	spm
   1f35e:	90 cf       	rjmp	.-224    	; 0x1f280 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
   1f360:	82 37       	cpi	r24, 0x72	; 114
   1f362:	19 f4       	brne	.+6      	; 0x1f36a <CDC_Task+0x12c>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1f364:	e1 e0       	ldi	r30, 0x01	; 1
   1f366:	f0 e0       	ldi	r31, 0x00	; 0
   1f368:	0e c0       	rjmp	.+28     	; 0x1f386 <CDC_Task+0x148>
	}
	else if (Command == 'F')
   1f36a:	86 34       	cpi	r24, 0x46	; 70
   1f36c:	19 f4       	brne	.+6      	; 0x1f374 <CDC_Task+0x136>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1f36e:	e0 e0       	ldi	r30, 0x00	; 0
   1f370:	f0 e0       	ldi	r31, 0x00	; 0
   1f372:	09 c0       	rjmp	.+18     	; 0x1f386 <CDC_Task+0x148>
	}
	else if (Command == 'N')
   1f374:	8e 34       	cpi	r24, 0x4E	; 78
   1f376:	19 f4       	brne	.+6      	; 0x1f37e <CDC_Task+0x140>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1f378:	e3 e0       	ldi	r30, 0x03	; 3
   1f37a:	f0 e0       	ldi	r31, 0x00	; 0
   1f37c:	04 c0       	rjmp	.+8      	; 0x1f386 <CDC_Task+0x148>
	}
	else if (Command == 'Q')
   1f37e:	81 35       	cpi	r24, 0x51	; 81
   1f380:	39 f4       	brne	.+14     	; 0x1f390 <CDC_Task+0x152>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1f382:	e2 e0       	ldi	r30, 0x02	; 2
   1f384:	f0 e0       	ldi	r31, 0x00	; 0
   1f386:	89 e0       	ldi	r24, 0x09	; 9
   1f388:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
   1f38c:	84 91       	lpm	r24, Z
   1f38e:	79 cf       	rjmp	.-270    	; 0x1f282 <CDC_Task+0x44>
	{
		WriteNextResponseByte('Y');
   1f390:	82 36       	cpi	r24, 0x62	; 98
   1f392:	31 f4       	brne	.+12     	; 0x1f3a0 <CDC_Task+0x162>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1f394:	89 e5       	ldi	r24, 0x59	; 89
   1f396:	bf de       	rcall	.-642    	; 0x1f116 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1f398:	81 e0       	ldi	r24, 0x01	; 1
   1f39a:	bd de       	rcall	.-646    	; 0x1f116 <WriteNextResponseByte>
	}
	else if ((Command == 'B') || (Command == 'g'))
   1f39c:	80 e0       	ldi	r24, 0x00	; 0
   1f39e:	71 cf       	rjmp	.-286    	; 0x1f282 <CDC_Task+0x44>
   1f3a0:	82 34       	cpi	r24, 0x42	; 66
   1f3a2:	19 f0       	breq	.+6      	; 0x1f3aa <CDC_Task+0x16c>
   1f3a4:	87 36       	cpi	r24, 0x67	; 103
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1f3a6:	09 f0       	breq	.+2      	; 0x1f3aa <CDC_Task+0x16c>
   1f3a8:	cb c0       	rjmp	.+406    	; 0x1f540 <CDC_Task+0x302>
   1f3aa:	9e de       	rcall	.-708    	; 0x1f0e8 <FetchNextCommandByte>
	BlockSize |=  FetchNextCommandByte();
   1f3ac:	08 2f       	mov	r16, r24
   1f3ae:	9c de       	rcall	.-712    	; 0x1f0e8 <FetchNextCommandByte>
   1f3b0:	d8 2f       	mov	r29, r24

	MemoryType =  FetchNextCommandByte();
   1f3b2:	9a de       	rcall	.-716    	; 0x1f0e8 <FetchNextCommandByte>
   1f3b4:	18 2f       	mov	r17, r24
   1f3b6:	8b eb       	ldi	r24, 0xBB	; 187

	if ((MemoryType != 'E') && (MemoryType != 'F'))
   1f3b8:	81 0f       	add	r24, r17
   1f3ba:	82 30       	cpi	r24, 0x02	; 2
   1f3bc:	10 f0       	brcs	.+4      	; 0x1f3c2 <CDC_Task+0x184>
   1f3be:	8f e3       	ldi	r24, 0x3F	; 63
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
   1f3c0:	60 cf       	rjmp	.-320    	; 0x1f282 <CDC_Task+0x44>
   1f3c2:	8d 2f       	mov	r24, r29
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1f3c4:	90 e0       	ldi	r25, 0x00	; 0
   1f3c6:	90 2b       	or	r25, r16
	BlockSize |=  FetchNextCommandByte();
   1f3c8:	c7 36       	cpi	r28, 0x67	; 103

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
   1f3ca:	09 f0       	breq	.+2      	; 0x1f3ce <CDC_Task+0x190>
   1f3cc:	41 c0       	rjmp	.+130    	; 0x1f450 <CDC_Task+0x212>
   1f3ce:	21 e1       	ldi	r18, 0x11	; 17
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1f3d0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f3d4:	e8 95       	spm
   1f3d6:	ec 01       	movw	r28, r24
   1f3d8:	b1 2c       	mov	r11, r1
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
   1f3da:	01 e0       	ldi	r16, 0x01	; 1

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
   1f3dc:	20 97       	sbiw	r28, 0x00	; 0
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1f3de:	09 f4       	brne	.+2      	; 0x1f3e2 <CDC_Task+0x1a4>
   1f3e0:	5a c1       	rjmp	.+692    	; 0x1f696 <CDC_Task+0x458>
   1f3e2:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <__data_end>
   1f3e6:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <__data_end+0x1>
   1f3ea:	e0 90 8e 01 	lds	r14, 0x018E	; 0x80018e <__data_end+0x2>
   1f3ee:	f0 90 8f 01 	lds	r15, 0x018F	; 0x80018f <__data_end+0x3>
		{
			if (MemoryType == 'F')
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1f3f2:	d7 01       	movw	r26, r14
   1f3f4:	c6 01       	movw	r24, r12
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1f3f6:	16 34       	cpi	r17, 0x46	; 70
   1f3f8:	b1 f4       	brne	.+44     	; 0x1f426 <CDC_Task+0x1e8>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1f3fa:	8b 29       	or	r24, r11
   1f3fc:	ab bf       	out	0x3b, r26	; 59
   1f3fe:	fc 01       	movw	r30, r24
   1f400:	87 91       	elpm	r24, Z+
   1f402:	89 de       	rcall	.-750    	; 0x1f116 <WriteNextResponseByte>
   1f404:	bb 20       	and	r11, r11
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1f406:	69 f0       	breq	.+26     	; 0x1f422 <CDC_Task+0x1e4>
   1f408:	82 e0       	ldi	r24, 0x02	; 2
				  CurrAddress += 2;
   1f40a:	c8 0e       	add	r12, r24
   1f40c:	d1 1c       	adc	r13, r1
   1f40e:	e1 1c       	adc	r14, r1
   1f410:	f1 1c       	adc	r15, r1
   1f412:	c0 92 8c 01 	sts	0x018C, r12	; 0x80018c <__data_end>
   1f416:	d0 92 8d 01 	sts	0x018D, r13	; 0x80018d <__data_end+0x1>
   1f41a:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <__data_end+0x2>
   1f41e:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <__data_end+0x3>

				HighByte = !HighByte;
   1f422:	b0 26       	eor	r11, r16
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1f424:	13 c0       	rjmp	.+38     	; 0x1f44c <CDC_Task+0x20e>
   1f426:	b6 95       	lsr	r27
   1f428:	a7 95       	ror	r26
   1f42a:	97 95       	ror	r25
   1f42c:	87 95       	ror	r24
   1f42e:	99 d4       	rcall	.+2354   	; 0x1fd62 <eeprom_read_byte>
   1f430:	72 de       	rcall	.-796    	; 0x1f116 <WriteNextResponseByte>
   1f432:	42 e0       	ldi	r20, 0x02	; 2

				/* Increment the address counter after use */
				CurrAddress += 2;
   1f434:	c4 0e       	add	r12, r20
   1f436:	d1 1c       	adc	r13, r1
   1f438:	e1 1c       	adc	r14, r1
   1f43a:	f1 1c       	adc	r15, r1
   1f43c:	c0 92 8c 01 	sts	0x018C, r12	; 0x80018c <__data_end>
   1f440:	d0 92 8d 01 	sts	0x018D, r13	; 0x80018d <__data_end+0x1>
   1f444:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <__data_end+0x2>
   1f448:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <__data_end+0x3>
   1f44c:	21 97       	sbiw	r28, 0x01	; 1
   1f44e:	c6 cf       	rjmp	.-116    	; 0x1f3dc <CDC_Task+0x19e>
   1f450:	80 90 8c 01 	lds	r8, 0x018C	; 0x80018c <__data_end>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1f454:	90 90 8d 01 	lds	r9, 0x018D	; 0x80018d <__data_end+0x1>
   1f458:	a0 90 8e 01 	lds	r10, 0x018E	; 0x80018e <__data_end+0x2>
   1f45c:	b0 90 8f 01 	lds	r11, 0x018F	; 0x80018f <__data_end+0x3>
   1f460:	16 34       	cpi	r17, 0x46	; 70

		if (MemoryType == 'F')
   1f462:	51 f4       	brne	.+20     	; 0x1f478 <CDC_Task+0x23a>
   1f464:	23 e0       	ldi	r18, 0x03	; 3
		{
			boot_page_erase(PageStartAddress);
   1f466:	f4 01       	movw	r30, r8
   1f468:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f46c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f470:	e8 95       	spm
   1f472:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1f474:	00 fc       	sbrc	r0, 0
   1f476:	fd cf       	rjmp	.-6      	; 0x1f472 <CDC_Task+0x234>
   1f478:	e1 2c       	mov	r14, r1
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
   1f47a:	f1 2c       	mov	r15, r1
   1f47c:	ec 01       	movw	r28, r24
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
   1f47e:	01 e0       	ldi	r16, 0x01	; 1
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1f480:	20 97       	sbiw	r28, 0x00	; 0
   1f482:	09 f4       	brne	.+2      	; 0x1f486 <CDC_Task+0x248>
   1f484:	4f c0       	rjmp	.+158    	; 0x1f524 <CDC_Task+0x2e6>
		{
			if (MemoryType == 'F')
   1f486:	16 34       	cpi	r17, 0x46	; 70
   1f488:	49 f5       	brne	.+82     	; 0x1f4dc <CDC_Task+0x29e>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1f48a:	ff 20       	and	r15, r15
   1f48c:	19 f1       	breq	.+70     	; 0x1f4d4 <CDC_Task+0x296>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1f48e:	40 90 8c 01 	lds	r4, 0x018C	; 0x80018c <__data_end>
   1f492:	50 90 8d 01 	lds	r5, 0x018D	; 0x80018d <__data_end+0x1>
   1f496:	60 90 8e 01 	lds	r6, 0x018E	; 0x80018e <__data_end+0x2>
   1f49a:	70 90 8f 01 	lds	r7, 0x018F	; 0x80018f <__data_end+0x3>
   1f49e:	24 de       	rcall	.-952    	; 0x1f0e8 <FetchNextCommandByte>
   1f4a0:	2e 2d       	mov	r18, r14
   1f4a2:	30 e0       	ldi	r19, 0x00	; 0
   1f4a4:	a9 01       	movw	r20, r18
   1f4a6:	58 2b       	or	r21, r24
   1f4a8:	0a 01       	movw	r0, r20
   1f4aa:	f2 01       	movw	r30, r4
   1f4ac:	60 92 5b 00 	sts	0x005B, r6	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f4b0:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f4b4:	e8 95       	spm
   1f4b6:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
   1f4b8:	52 e0       	ldi	r21, 0x02	; 2
   1f4ba:	45 0e       	add	r4, r21
   1f4bc:	51 1c       	adc	r5, r1
   1f4be:	61 1c       	adc	r6, r1
   1f4c0:	71 1c       	adc	r7, r1
   1f4c2:	40 92 8c 01 	sts	0x018C, r4	; 0x80018c <__data_end>
   1f4c6:	50 92 8d 01 	sts	0x018D, r5	; 0x80018d <__data_end+0x1>
   1f4ca:	60 92 8e 01 	sts	0x018E, r6	; 0x80018e <__data_end+0x2>
   1f4ce:	70 92 8f 01 	sts	0x018F, r7	; 0x80018f <__data_end+0x3>
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1f4d2:	02 c0       	rjmp	.+4      	; 0x1f4d8 <CDC_Task+0x29a>
   1f4d4:	09 de       	rcall	.-1006   	; 0x1f0e8 <FetchNextCommandByte>
   1f4d6:	e8 2e       	mov	r14, r24
				}
				
				HighByte = !HighByte;
   1f4d8:	f0 26       	eor	r15, r16
   1f4da:	22 c0       	rjmp	.+68     	; 0x1f520 <CDC_Task+0x2e2>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1f4dc:	05 de       	rcall	.-1014   	; 0x1f0e8 <FetchNextCommandByte>
   1f4de:	68 2f       	mov	r22, r24
   1f4e0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
   1f4e4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
   1f4e8:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <__data_end+0x2>
   1f4ec:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <__data_end+0x3>
   1f4f0:	b6 95       	lsr	r27
   1f4f2:	a7 95       	ror	r26
   1f4f4:	97 95       	ror	r25
   1f4f6:	87 95       	ror	r24
   1f4f8:	3c d4       	rcall	.+2168   	; 0x1fd72 <eeprom_write_byte>
   1f4fa:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1f4fe:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
   1f502:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <__data_end+0x2>
   1f506:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <__data_end+0x3>
   1f50a:	02 96       	adiw	r24, 0x02	; 2
   1f50c:	a1 1d       	adc	r26, r1
   1f50e:	b1 1d       	adc	r27, r1
   1f510:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
   1f514:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
   1f518:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <__data_end+0x2>
   1f51c:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <__data_end+0x3>
   1f520:	21 97       	sbiw	r28, 0x01	; 1
   1f522:	ae cf       	rjmp	.-164    	; 0x1f480 <CDC_Task+0x242>
   1f524:	16 34       	cpi	r17, 0x46	; 70
   1f526:	09 f0       	breq	.+2      	; 0x1f52a <CDC_Task+0x2ec>
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
   1f528:	ab ce       	rjmp	.-682    	; 0x1f280 <CDC_Task+0x42>
   1f52a:	85 e0       	ldi	r24, 0x05	; 5
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1f52c:	f4 01       	movw	r30, r8
   1f52e:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f532:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f536:	e8 95       	spm
   1f538:	07 b6       	in	r0, 0x37	; 55

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1f53a:	00 fc       	sbrc	r0, 0
   1f53c:	fd cf       	rjmp	.-6      	; 0x1f538 <CDC_Task+0x2fa>
   1f53e:	a0 ce       	rjmp	.-704    	; 0x1f280 <CDC_Task+0x42>
   1f540:	83 34       	cpi	r24, 0x43	; 67
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
   1f542:	a1 f4       	brne	.+40     	; 0x1f56c <CDC_Task+0x32e>
   1f544:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <__data_end>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1f548:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <__data_end+0x1>
   1f54c:	e0 90 8e 01 	lds	r14, 0x018E	; 0x80018e <__data_end+0x2>
   1f550:	f0 90 8f 01 	lds	r15, 0x018F	; 0x80018f <__data_end+0x3>
   1f554:	c9 dd       	rcall	.-1134   	; 0x1f0e8 <FetchNextCommandByte>
   1f556:	90 e0       	ldi	r25, 0x00	; 0
   1f558:	21 e0       	ldi	r18, 0x01	; 1
   1f55a:	0c 01       	movw	r0, r24
   1f55c:	f6 01       	movw	r30, r12
   1f55e:	e0 92 5b 00 	sts	0x005B, r14	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f562:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f566:	e8 95       	spm
   1f568:	11 24       	eor	r1, r1
   1f56a:	8a ce       	rjmp	.-748    	; 0x1f280 <CDC_Task+0x42>
   1f56c:	83 36       	cpi	r24, 0x63	; 99

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
   1f56e:	21 f5       	brne	.+72     	; 0x1f5b8 <CDC_Task+0x37a>
   1f570:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <__data_end>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1f574:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <__data_end+0x1>
   1f578:	e0 90 8e 01 	lds	r14, 0x018E	; 0x80018e <__data_end+0x2>
   1f57c:	f0 90 8f 01 	lds	r15, 0x018F	; 0x80018f <__data_end+0x3>
   1f580:	b3 dd       	rcall	.-1178   	; 0x1f0e8 <FetchNextCommandByte>
   1f582:	b7 01       	movw	r22, r14
   1f584:	a6 01       	movw	r20, r12
   1f586:	41 60       	ori	r20, 0x01	; 1
   1f588:	90 e0       	ldi	r25, 0x00	; 0
   1f58a:	21 e0       	ldi	r18, 0x01	; 1
   1f58c:	0c 01       	movw	r0, r24
   1f58e:	fa 01       	movw	r30, r20
   1f590:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f594:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f598:	e8 95       	spm
   1f59a:	11 24       	eor	r1, r1
   1f59c:	82 e0       	ldi	r24, 0x02	; 2
   1f59e:	c8 0e       	add	r12, r24

		/* Increment the address */
		CurrAddress += 2;
   1f5a0:	d1 1c       	adc	r13, r1
   1f5a2:	e1 1c       	adc	r14, r1
   1f5a4:	f1 1c       	adc	r15, r1
   1f5a6:	c0 92 8c 01 	sts	0x018C, r12	; 0x80018c <__data_end>
   1f5aa:	d0 92 8d 01 	sts	0x018D, r13	; 0x80018d <__data_end+0x1>
   1f5ae:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <__data_end+0x2>
   1f5b2:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <__data_end+0x3>
   1f5b6:	64 ce       	rjmp	.-824    	; 0x1f280 <CDC_Task+0x42>
   1f5b8:	8d 36       	cpi	r24, 0x6D	; 109
   1f5ba:	99 f4       	brne	.+38     	; 0x1f5e2 <CDC_Task+0x3a4>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
   1f5bc:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <__data_end>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1f5c0:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <__data_end+0x1>
   1f5c4:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <__data_end+0x2>
   1f5c8:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <__data_end+0x3>
   1f5cc:	85 e0       	ldi	r24, 0x05	; 5
   1f5ce:	fa 01       	movw	r30, r20
   1f5d0:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f5d4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f5d8:	e8 95       	spm
   1f5da:	07 b6       	in	r0, 0x37	; 55

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1f5dc:	00 fc       	sbrc	r0, 0
   1f5de:	fd cf       	rjmp	.-6      	; 0x1f5da <CDC_Task+0x39c>
   1f5e0:	4f ce       	rjmp	.-866    	; 0x1f280 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
   1f5e2:	82 35       	cpi	r24, 0x52	; 82
   1f5e4:	81 f4       	brne	.+32     	; 0x1f606 <CDC_Task+0x3c8>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1f5e6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
   1f5ea:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
   1f5ee:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <__data_end+0x2>
   1f5f2:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <__data_end+0x3>
   1f5f6:	ab bf       	out	0x3b, r26	; 59
   1f5f8:	fc 01       	movw	r30, r24
   1f5fa:	c7 91       	elpm	r28, Z+
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1f5fc:	d6 91       	elpm	r29, Z
   1f5fe:	8d 2f       	mov	r24, r29
   1f600:	8a dd       	rcall	.-1260   	; 0x1f116 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
   1f602:	8c 2f       	mov	r24, r28
   1f604:	3e ce       	rjmp	.-900    	; 0x1f282 <CDC_Task+0x44>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
   1f606:	84 34       	cpi	r24, 0x44	; 68
   1f608:	19 f5       	brne	.+70     	; 0x1f650 <CDC_Task+0x412>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1f60a:	6e dd       	rcall	.-1316   	; 0x1f0e8 <FetchNextCommandByte>
   1f60c:	68 2f       	mov	r22, r24
   1f60e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
   1f612:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
   1f616:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <__data_end+0x2>
   1f61a:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <__data_end+0x3>
   1f61e:	b6 95       	lsr	r27
   1f620:	a7 95       	ror	r26
   1f622:	97 95       	ror	r25
   1f624:	87 95       	ror	r24
   1f626:	a5 d3       	rcall	.+1866   	; 0x1fd72 <eeprom_write_byte>
   1f628:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>

		/* Increment the address after use */
		CurrAddress += 2;
   1f62c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
   1f630:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <__data_end+0x2>
   1f634:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <__data_end+0x3>
   1f638:	02 96       	adiw	r24, 0x02	; 2
   1f63a:	a1 1d       	adc	r26, r1
   1f63c:	b1 1d       	adc	r27, r1
   1f63e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
   1f642:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
   1f646:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <__data_end+0x2>
   1f64a:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <__data_end+0x3>
   1f64e:	18 ce       	rjmp	.-976    	; 0x1f280 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
   1f650:	84 36       	cpi	r24, 0x64	; 100
   1f652:	f1 f4       	brne	.+60     	; 0x1f690 <CDC_Task+0x452>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1f654:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <__data_end>
   1f658:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <__data_end+0x1>
   1f65c:	e0 90 8e 01 	lds	r14, 0x018E	; 0x80018e <__data_end+0x2>
   1f660:	f0 90 8f 01 	lds	r15, 0x018F	; 0x80018f <__data_end+0x3>
   1f664:	d7 01       	movw	r26, r14
   1f666:	c6 01       	movw	r24, r12
   1f668:	b6 95       	lsr	r27
   1f66a:	a7 95       	ror	r26
   1f66c:	97 95       	ror	r25
   1f66e:	87 95       	ror	r24
   1f670:	78 d3       	rcall	.+1776   	; 0x1fd62 <eeprom_read_byte>
   1f672:	51 dd       	rcall	.-1374   	; 0x1f116 <WriteNextResponseByte>
   1f674:	42 e0       	ldi	r20, 0x02	; 2
   1f676:	c4 0e       	add	r12, r20

		/* Increment the address after use */
		CurrAddress += 2;
   1f678:	d1 1c       	adc	r13, r1
   1f67a:	e1 1c       	adc	r14, r1
   1f67c:	f1 1c       	adc	r15, r1
   1f67e:	c0 92 8c 01 	sts	0x018C, r12	; 0x80018c <__data_end>
   1f682:	d0 92 8d 01 	sts	0x018D, r13	; 0x80018d <__data_end+0x1>
   1f686:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <__data_end+0x2>
   1f68a:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <__data_end+0x3>
   1f68e:	03 c0       	rjmp	.+6      	; 0x1f696 <CDC_Task+0x458>
   1f690:	8b 31       	cpi	r24, 0x1B	; 27
   1f692:	09 f0       	breq	.+2      	; 0x1f696 <CDC_Task+0x458>
	}
	#endif
	else if (Command != 27)
   1f694:	94 ce       	rjmp	.-728    	; 0x1f3be <CDC_Task+0x180>
   1f696:	83 e0       	ldi	r24, 0x03	; 3
   1f698:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f69c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f6a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f6a4:	8e 77       	andi	r24, 0x7E	; 126
   1f6a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f6aa:	95 fd       	sbrc	r25, 5
   1f6ac:	11 c0       	rjmp	.+34     	; 0x1f6d0 <CDC_Task+0x492>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1f6ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6b2:	80 fd       	sbrc	r24, 0
   1f6b4:	04 c0       	rjmp	.+8      	; 0x1f6be <CDC_Task+0x480>
	{
		while (!(Endpoint_IsINReady()))
   1f6b6:	8e b3       	in	r24, 0x1e	; 30
   1f6b8:	81 11       	cpse	r24, r1
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f6ba:	f9 cf       	rjmp	.-14     	; 0x1f6ae <CDC_Task+0x470>
   1f6bc:	15 c0       	rjmp	.+42     	; 0x1f6e8 <CDC_Task+0x4aa>
   1f6be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f6c2:	8e 77       	andi	r24, 0x7E	; 126
   1f6c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f6c8:	03 c0       	rjmp	.+6      	; 0x1f6d0 <CDC_Task+0x492>
   1f6ca:	8e b3       	in	r24, 0x1e	; 30
   1f6cc:	88 23       	and	r24, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f6ce:	61 f0       	breq	.+24     	; 0x1f6e8 <CDC_Task+0x4aa>
   1f6d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6d4:	80 ff       	sbrs	r24, 0
   1f6d6:	f9 cf       	rjmp	.-14     	; 0x1f6ca <CDC_Task+0x48c>

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1f6d8:	84 e0       	ldi	r24, 0x04	; 4
   1f6da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f6de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f6e2:	8b 77       	andi	r24, 0x7B	; 123
   1f6e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f6e8:	df 91       	pop	r29
   1f6ea:	cf 91       	pop	r28
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
   1f6ec:	1f 91       	pop	r17
   1f6ee:	0f 91       	pop	r16
   1f6f0:	ff 90       	pop	r15
   1f6f2:	ef 90       	pop	r14
   1f6f4:	df 90       	pop	r13
   1f6f6:	cf 90       	pop	r12
   1f6f8:	bf 90       	pop	r11
   1f6fa:	af 90       	pop	r10
   1f6fc:	9f 90       	pop	r9
   1f6fe:	8f 90       	pop	r8
   1f700:	7f 90       	pop	r7
   1f702:	6f 90       	pop	r6
   1f704:	5f 90       	pop	r5
   1f706:	4f 90       	pop	r4
   1f708:	08 95       	ret

0001f70a <main>:
   1f70a:	1c dd       	rcall	.-1480   	; 0x1f144 <SetupHardware>
   1f70c:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1f70e:	8f 70       	andi	r24, 0x0F	; 15
   1f710:	80 61       	ori	r24, 0x10	; 16
   1f712:	8b b9       	out	0x0b, r24	; 11

	/* Turn on first LED on the board to indicate that the bootloader has started */
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1f714:	78 94       	sei

	while (RunBootloader)
   1f716:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f71a:	88 23       	and	r24, r24
	{
		CDC_Task();
   1f71c:	19 f0       	breq	.+6      	; 0x1f724 <main+0x1a>
		USB_USBTask();
   1f71e:	8f dd       	rcall	.-1250   	; 0x1f23e <CDC_Task>
   1f720:	06 d3       	rcall	.+1548   	; 0x1fd2e <USB_USBTask>
   1f722:	f9 cf       	rjmp	.-14     	; 0x1f716 <main+0xc>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f724:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1f728:	81 60       	ori	r24, 0x01	; 1
   1f72a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1f72e:	9c e0       	ldi	r25, 0x0C	; 12
   1f730:	88 e1       	ldi	r24, 0x18	; 24
   1f732:	0f b6       	in	r0, 0x3f	; 63
   1f734:	f8 94       	cli
   1f736:	a8 95       	wdr
   1f738:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f73c:	0f be       	out	0x3f, r0	; 63
   1f73e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f742:	ff cf       	rjmp	.-2      	; 0x1f742 <main+0x38>

0001f744 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1f744:	29 2f       	mov	r18, r25
   1f746:	30 e0       	ldi	r19, 0x00	; 0
   1f748:	22 30       	cpi	r18, 0x02	; 2
   1f74a:	31 05       	cpc	r19, r1
   1f74c:	59 f0       	breq	.+22     	; 0x1f764 <CALLBACK_USB_GetDescriptor+0x20>
   1f74e:	23 30       	cpi	r18, 0x03	; 3
   1f750:	31 05       	cpc	r19, r1
   1f752:	69 f0       	breq	.+26     	; 0x1f76e <CALLBACK_USB_GetDescriptor+0x2a>
   1f754:	21 30       	cpi	r18, 0x01	; 1
   1f756:	31 05       	cpc	r19, r1
   1f758:	89 f4       	brne	.+34     	; 0x1f77c <CALLBACK_USB_GetDescriptor+0x38>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1f75a:	82 e1       	ldi	r24, 0x12	; 18
   1f75c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1f75e:	22 e7       	ldi	r18, 0x72	; 114
   1f760:	31 e0       	ldi	r19, 0x01	; 1
   1f762:	15 c0       	rjmp	.+42     	; 0x1f78e <CALLBACK_USB_GetDescriptor+0x4a>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1f764:	8e e3       	ldi	r24, 0x3E	; 62
   1f766:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1f768:	24 e3       	ldi	r18, 0x34	; 52
   1f76a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1f76c:	10 c0       	rjmp	.+32     	; 0x1f78e <CALLBACK_USB_GetDescriptor+0x4a>
		case DTYPE_String:
			if (!(DescriptorNumber))
   1f76e:	88 23       	and	r24, r24
   1f770:	51 f0       	breq	.+20     	; 0x1f786 <CALLBACK_USB_GetDescriptor+0x42>
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1f772:	86 e2       	ldi	r24, 0x26	; 38
   1f774:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
   1f776:	28 e0       	ldi	r18, 0x08	; 8
   1f778:	31 e0       	ldi	r19, 0x01	; 1
   1f77a:	09 c0       	rjmp	.+18     	; 0x1f78e <CALLBACK_USB_GetDescriptor+0x4a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1f77c:	80 e0       	ldi	r24, 0x00	; 0
   1f77e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1f780:	20 e0       	ldi	r18, 0x00	; 0
   1f782:	30 e0       	ldi	r19, 0x00	; 0
   1f784:	04 c0       	rjmp	.+8      	; 0x1f78e <CALLBACK_USB_GetDescriptor+0x4a>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1f786:	84 e0       	ldi	r24, 0x04	; 4
   1f788:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
   1f78a:	20 e3       	ldi	r18, 0x30	; 48
   1f78c:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
   1f78e:	fa 01       	movw	r30, r20
   1f790:	31 83       	std	Z+1, r19	; 0x01
   1f792:	20 83       	st	Z, r18
	return Size;
}
   1f794:	08 95       	ret

0001f796 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1f796:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1f79a:	eb ee       	ldi	r30, 0xEB	; 235
   1f79c:	f0 e0       	ldi	r31, 0x00	; 0
   1f79e:	80 81       	ld	r24, Z
   1f7a0:	81 60       	ori	r24, 0x01	; 1
   1f7a2:	80 83       	st	Z, r24
   1f7a4:	ed ee       	ldi	r30, 0xED	; 237
   1f7a6:	f0 e0       	ldi	r31, 0x00	; 0
   1f7a8:	10 82       	st	Z, r1
   1f7aa:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1f7ae:	40 83       	st	Z, r20
   1f7b0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1f7b4:	88 1f       	adc	r24, r24
   1f7b6:	88 27       	eor	r24, r24
   1f7b8:	88 1f       	adc	r24, r24
   1f7ba:	08 95       	ret

0001f7bc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f7bc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <USB_ControlRequest>
   1f7c0:	87 ff       	sbrs	r24, 7
   1f7c2:	0f c0       	rjmp	.+30     	; 0x1f7e2 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f7c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1f7c8:	82 fd       	sbrc	r24, 2
   1f7ca:	04 c0       	rjmp	.+8      	; 0x1f7d4 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f7cc:	8e b3       	in	r24, 0x1e	; 30
   1f7ce:	81 11       	cpse	r24, r1
   1f7d0:	f9 cf       	rjmp	.-14     	; 0x1f7c4 <Endpoint_ClearStatusStage+0x8>
   1f7d2:	10 c0       	rjmp	.+32     	; 0x1f7f4 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f7d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f7d8:	8b 77       	andi	r24, 0x7B	; 123
   1f7da:	0a c0       	rjmp	.+20     	; 0x1f7f0 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f7dc:	8e b3       	in	r24, 0x1e	; 30
   1f7de:	88 23       	and	r24, r24
   1f7e0:	49 f0       	breq	.+18     	; 0x1f7f4 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f7e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f7e6:	80 ff       	sbrs	r24, 0
   1f7e8:	f9 cf       	rjmp	.-14     	; 0x1f7dc <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f7ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f7ee:	8e 77       	andi	r24, 0x7E	; 126
   1f7f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f7f4:	08 95       	ret

0001f7f6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1f7f6:	0f 93       	push	r16
   1f7f8:	1f 93       	push	r17
   1f7fa:	cf 93       	push	r28
   1f7fc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f7fe:	44 d0       	rcall	.+136    	; 0x1f888 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f800:	4b d0       	rcall	.+150    	; 0x1f898 <USB_INT_ClearAllInterrupts>
   1f802:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f804:	d0 e0       	ldi	r29, 0x00	; 0
   1f806:	88 81       	ld	r24, Y
   1f808:	8f 77       	andi	r24, 0x7F	; 127
   1f80a:	88 83       	st	Y, r24
   1f80c:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1f80e:	80 68       	ori	r24, 0x80	; 128
   1f810:	88 83       	st	Y, r24
   1f812:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f814:	8f 7d       	andi	r24, 0xDF	; 223
   1f816:	88 83       	st	Y, r24
   1f818:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f81a:	f0 e0       	ldi	r31, 0x00	; 0
   1f81c:	80 81       	ld	r24, Z
   1f81e:	80 68       	ori	r24, 0x80	; 128
   1f820:	80 83       	st	Z, r24
   1f822:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f824:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1f826:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   1f82a:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f82c:	10 e0       	ldi	r17, 0x00	; 0
   1f82e:	f8 01       	movw	r30, r16
   1f830:	80 81       	ld	r24, Z
   1f832:	8b 7f       	andi	r24, 0xFB	; 251
   1f834:	80 83       	st	Z, r24
   1f836:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f838:	81 60       	ori	r24, 0x01	; 1
   1f83a:	88 83       	st	Y, r24
   1f83c:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f83e:	60 e0       	ldi	r22, 0x00	; 0
   1f840:	80 e0       	ldi	r24, 0x00	; 0
   1f842:	a9 df       	rcall	.-174    	; 0x1f796 <Endpoint_ConfigureEndpoint_Prv>
   1f844:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f846:	f0 e0       	ldi	r31, 0x00	; 0
   1f848:	80 81       	ld	r24, Z
   1f84a:	8e 7f       	andi	r24, 0xFE	; 254
   1f84c:	80 83       	st	Z, r24
   1f84e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f850:	f0 e0       	ldi	r31, 0x00	; 0
   1f852:	80 81       	ld	r24, Z
   1f854:	81 60       	ori	r24, 0x01	; 1
   1f856:	80 83       	st	Z, r24
   1f858:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f85a:	88 60       	ori	r24, 0x08	; 8
   1f85c:	80 83       	st	Z, r24
   1f85e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f860:	80 81       	ld	r24, Z
   1f862:	8e 7f       	andi	r24, 0xFE	; 254
   1f864:	80 83       	st	Z, r24
   1f866:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1f868:	80 61       	ori	r24, 0x10	; 16
   1f86a:	88 83       	st	Y, r24
   1f86c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f86e:	cf 91       	pop	r28
   1f870:	1f 91       	pop	r17
   1f872:	0f 91       	pop	r16
   1f874:	08 95       	ret

0001f876 <USB_Init>:
   1f876:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1f878:	f0 e0       	ldi	r31, 0x00	; 0
   1f87a:	80 81       	ld	r24, Z
   1f87c:	81 60       	ori	r24, 0x01	; 1
   1f87e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f880:	81 e0       	ldi	r24, 0x01	; 1
   1f882:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <USB_IsInitialized>

	USB_ResetInterface();
   1f886:	b7 cf       	rjmp	.-146    	; 0x1f7f6 <USB_ResetInterface>

0001f888 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f888:	e8 ed       	ldi	r30, 0xD8	; 216
   1f88a:	f0 e0       	ldi	r31, 0x00	; 0
   1f88c:	80 81       	ld	r24, Z
   1f88e:	8c 7f       	andi	r24, 0xFC	; 252
   1f890:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f892:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f896:	08 95       	ret

0001f898 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f898:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f89c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f8a0:	08 95       	ret

0001f8a2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f8a2:	1f 92       	push	r1
   1f8a4:	0f 92       	push	r0
   1f8a6:	0f b6       	in	r0, 0x3f	; 63
   1f8a8:	0f 92       	push	r0
   1f8aa:	11 24       	eor	r1, r1
   1f8ac:	0b b6       	in	r0, 0x3b	; 59
   1f8ae:	0f 92       	push	r0
   1f8b0:	2f 93       	push	r18
   1f8b2:	3f 93       	push	r19
   1f8b4:	4f 93       	push	r20
   1f8b6:	5f 93       	push	r21
   1f8b8:	6f 93       	push	r22
   1f8ba:	7f 93       	push	r23
   1f8bc:	8f 93       	push	r24
   1f8be:	9f 93       	push	r25
   1f8c0:	af 93       	push	r26
   1f8c2:	bf 93       	push	r27
   1f8c4:	ef 93       	push	r30
   1f8c6:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f8c8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f8cc:	80 ff       	sbrs	r24, 0
   1f8ce:	1b c0       	rjmp	.+54     	; 0x1f906 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f8d0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f8d4:	80 ff       	sbrs	r24, 0
   1f8d6:	17 c0       	rjmp	.+46     	; 0x1f906 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f8d8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1f8dc:	8e 7f       	andi	r24, 0xFE	; 254
   1f8de:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f8e2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f8e6:	80 ff       	sbrs	r24, 0
   1f8e8:	0b c0       	rjmp	.+22     	; 0x1f900 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f8ea:	8c e0       	ldi	r24, 0x0C	; 12
   1f8ec:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f8ee:	8e e0       	ldi	r24, 0x0E	; 14
   1f8f0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f8f2:	09 b4       	in	r0, 0x29	; 41
   1f8f4:	00 fe       	sbrs	r0, 0
   1f8f6:	fd cf       	rjmp	.-6      	; 0x1f8f2 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f8f8:	81 e0       	ldi	r24, 0x01	; 1
   1f8fa:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f8fc:	17 d2       	rcall	.+1070   	; 0x1fd2c <USB_Event_Stub>
   1f8fe:	03 c0       	rjmp	.+6      	; 0x1f906 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f900:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1f902:	1e ba       	out	0x1e, r1	; 30
   1f904:	13 d2       	rcall	.+1062   	; 0x1fd2c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f906:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f90a:	80 ff       	sbrs	r24, 0
   1f90c:	17 c0       	rjmp	.+46     	; 0x1f93c <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f90e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f912:	80 ff       	sbrs	r24, 0
   1f914:	13 c0       	rjmp	.+38     	; 0x1f93c <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f916:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f91a:	8e 7f       	andi	r24, 0xFE	; 254
   1f91c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f920:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f924:	80 61       	ori	r24, 0x10	; 16
   1f926:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1f92a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f92e:	80 62       	ori	r24, 0x20	; 32
   1f930:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f934:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1f936:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1f938:	8e bb       	out	0x1e, r24	; 30
   1f93a:	f8 d1       	rcall	.+1008   	; 0x1fd2c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1f93c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1f940:	84 ff       	sbrs	r24, 4
   1f942:	2c c0       	rjmp	.+88     	; 0x1f99c <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1f944:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f948:	84 ff       	sbrs	r24, 4
   1f94a:	28 c0       	rjmp	.+80     	; 0x1f99c <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f94c:	8c e0       	ldi	r24, 0x0C	; 12
   1f94e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f950:	8e e0       	ldi	r24, 0x0E	; 14
   1f952:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1f954:	09 b4       	in	r0, 0x29	; 41
   1f956:	00 fe       	sbrs	r0, 0
   1f958:	fd cf       	rjmp	.-6      	; 0x1f954 <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f95a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f95e:	8f 7d       	andi	r24, 0xDF	; 223
   1f960:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1f964:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f968:	8f 7e       	andi	r24, 0xEF	; 239
   1f96a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1f96e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f972:	8f 7e       	andi	r24, 0xEF	; 239
   1f974:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f978:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f97c:	81 60       	ori	r24, 0x01	; 1
   1f97e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1f982:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <USB_Device_ConfigurationNumber>
   1f986:	81 11       	cpse	r24, r1
   1f988:	06 c0       	rjmp	.+12     	; 0x1f996 <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f98a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f98e:	87 fd       	sbrc	r24, 7
   1f990:	02 c0       	rjmp	.+4      	; 0x1f996 <__vector_10+0xf4>
   1f992:	81 e0       	ldi	r24, 0x01	; 1
   1f994:	01 c0       	rjmp	.+2      	; 0x1f998 <__vector_10+0xf6>
   1f996:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1f998:	8e bb       	out	0x1e, r24	; 30
   1f99a:	c8 d1       	rcall	.+912    	; 0x1fd2c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1f99c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1f9a0:	83 ff       	sbrs	r24, 3
   1f9a2:	21 c0       	rjmp	.+66     	; 0x1f9e6 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1f9a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f9a8:	83 ff       	sbrs	r24, 3
   1f9aa:	1d c0       	rjmp	.+58     	; 0x1f9e6 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1f9ac:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f9b0:	87 7f       	andi	r24, 0xF7	; 247
   1f9b2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1f9b6:	82 e0       	ldi	r24, 0x02	; 2
   1f9b8:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1f9ba:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f9be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f9c2:	8e 7f       	andi	r24, 0xFE	; 254
   1f9c4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f9c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f9cc:	8e 7f       	andi	r24, 0xFE	; 254
   1f9ce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f9d2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f9d6:	80 61       	ori	r24, 0x10	; 16
   1f9d8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f9dc:	42 e0       	ldi	r20, 0x02	; 2
   1f9de:	60 e0       	ldi	r22, 0x00	; 0
   1f9e0:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1f9e2:	d9 de       	rcall	.-590    	; 0x1f796 <Endpoint_ConfigureEndpoint_Prv>
   1f9e4:	a3 d1       	rcall	.+838    	; 0x1fd2c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1f9e6:	ff 91       	pop	r31
   1f9e8:	ef 91       	pop	r30
   1f9ea:	bf 91       	pop	r27
   1f9ec:	af 91       	pop	r26
   1f9ee:	9f 91       	pop	r25
   1f9f0:	8f 91       	pop	r24
   1f9f2:	7f 91       	pop	r23
   1f9f4:	6f 91       	pop	r22
   1f9f6:	5f 91       	pop	r21
   1f9f8:	4f 91       	pop	r20
   1f9fa:	3f 91       	pop	r19
   1f9fc:	2f 91       	pop	r18
   1f9fe:	0f 90       	pop	r0
   1fa00:	0b be       	out	0x3b, r0	; 59
   1fa02:	0f 90       	pop	r0
   1fa04:	0f be       	out	0x3f, r0	; 63
   1fa06:	0f 90       	pop	r0
   1fa08:	1f 90       	pop	r1
   1fa0a:	18 95       	reti

0001fa0c <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fa0c:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <USB_ControlRequest+0x6>
   1fa10:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <USB_ControlRequest+0x7>
   1fa14:	26 17       	cp	r18, r22
   1fa16:	37 07       	cpc	r19, r23
   1fa18:	48 f0       	brcs	.+18     	; 0x1fa2c <Endpoint_Write_Control_Stream_LE+0x20>
   1fa1a:	61 15       	cp	r22, r1
   1fa1c:	71 05       	cpc	r23, r1
   1fa1e:	39 f4       	brne	.+14     	; 0x1fa2e <Endpoint_Write_Control_Stream_LE+0x22>
   1fa20:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa24:	2e 77       	andi	r18, 0x7E	; 126
   1fa26:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa2a:	01 c0       	rjmp	.+2      	; 0x1fa2e <Endpoint_Write_Control_Stream_LE+0x22>
   1fa2c:	b9 01       	movw	r22, r18
   1fa2e:	fc 01       	movw	r30, r24
   1fa30:	20 e0       	ldi	r18, 0x00	; 0
   1fa32:	61 15       	cp	r22, r1
   1fa34:	71 05       	cpc	r23, r1
   1fa36:	61 f1       	breq	.+88     	; 0x1fa90 <Endpoint_Write_Control_Stream_LE+0x84>
   1fa38:	8e b3       	in	r24, 0x1e	; 30
   1fa3a:	88 23       	and	r24, r24
   1fa3c:	c9 f1       	breq	.+114    	; 0x1fab0 <Endpoint_Write_Control_Stream_LE+0xa4>
   1fa3e:	85 30       	cpi	r24, 0x05	; 5
   1fa40:	c9 f1       	breq	.+114    	; 0x1fab4 <Endpoint_Write_Control_Stream_LE+0xa8>
   1fa42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa46:	83 fd       	sbrc	r24, 3
   1fa48:	31 c0       	rjmp	.+98     	; 0x1faac <Endpoint_Write_Control_Stream_LE+0xa0>
   1fa4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa4e:	82 fd       	sbrc	r24, 2
   1fa50:	27 c0       	rjmp	.+78     	; 0x1faa0 <Endpoint_Write_Control_Stream_LE+0x94>
   1fa52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa56:	80 ff       	sbrs	r24, 0
   1fa58:	ec cf       	rjmp	.-40     	; 0x1fa32 <Endpoint_Write_Control_Stream_LE+0x26>
   1fa5a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1fa5e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1fa62:	61 15       	cp	r22, r1
   1fa64:	71 05       	cpc	r23, r1
   1fa66:	51 f0       	breq	.+20     	; 0x1fa7c <Endpoint_Write_Control_Stream_LE+0x70>
   1fa68:	88 30       	cpi	r24, 0x08	; 8
   1fa6a:	91 05       	cpc	r25, r1
   1fa6c:	38 f4       	brcc	.+14     	; 0x1fa7c <Endpoint_Write_Control_Stream_LE+0x70>
   1fa6e:	21 91       	ld	r18, Z+
   1fa70:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1fa74:	61 50       	subi	r22, 0x01	; 1
   1fa76:	71 09       	sbc	r23, r1
   1fa78:	01 96       	adiw	r24, 0x01	; 1
   1fa7a:	f3 cf       	rjmp	.-26     	; 0x1fa62 <Endpoint_Write_Control_Stream_LE+0x56>
   1fa7c:	21 e0       	ldi	r18, 0x01	; 1
   1fa7e:	08 97       	sbiw	r24, 0x08	; 8
   1fa80:	09 f0       	breq	.+2      	; 0x1fa84 <Endpoint_Write_Control_Stream_LE+0x78>
   1fa82:	20 e0       	ldi	r18, 0x00	; 0
   1fa84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa88:	8e 77       	andi	r24, 0x7E	; 126
   1fa8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fa8e:	d1 cf       	rjmp	.-94     	; 0x1fa32 <Endpoint_Write_Control_Stream_LE+0x26>
   1fa90:	21 11       	cpse	r18, r1
   1fa92:	d2 cf       	rjmp	.-92     	; 0x1fa38 <Endpoint_Write_Control_Stream_LE+0x2c>
   1fa94:	05 c0       	rjmp	.+10     	; 0x1faa0 <Endpoint_Write_Control_Stream_LE+0x94>
   1fa96:	8e b3       	in	r24, 0x1e	; 30
   1fa98:	88 23       	and	r24, r24
   1fa9a:	51 f0       	breq	.+20     	; 0x1fab0 <Endpoint_Write_Control_Stream_LE+0xa4>
   1fa9c:	85 30       	cpi	r24, 0x05	; 5
   1fa9e:	51 f0       	breq	.+20     	; 0x1fab4 <Endpoint_Write_Control_Stream_LE+0xa8>
   1faa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1faa4:	82 ff       	sbrs	r24, 2
   1faa6:	f7 cf       	rjmp	.-18     	; 0x1fa96 <Endpoint_Write_Control_Stream_LE+0x8a>
   1faa8:	80 e0       	ldi	r24, 0x00	; 0
   1faaa:	08 95       	ret
   1faac:	81 e0       	ldi	r24, 0x01	; 1
   1faae:	08 95       	ret
   1fab0:	82 e0       	ldi	r24, 0x02	; 2
   1fab2:	08 95       	ret
   1fab4:	83 e0       	ldi	r24, 0x03	; 3
   1fab6:	08 95       	ret

0001fab8 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1fab8:	61 15       	cp	r22, r1
   1faba:	71 05       	cpc	r23, r1
   1fabc:	29 f4       	brne	.+10     	; 0x1fac8 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fabe:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fac2:	2b 77       	andi	r18, 0x7B	; 123
   1fac4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
   1fac8:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1faca:	61 15       	cp	r22, r1
   1facc:	71 05       	cpc	r23, r1
   1face:	21 f1       	breq	.+72     	; 0x1fb18 <Endpoint_Read_Control_Stream_LE+0x60>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fad0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fad2:	88 23       	and	r24, r24
   1fad4:	49 f1       	breq	.+82     	; 0x1fb28 <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fad6:	85 30       	cpi	r24, 0x05	; 5
   1fad8:	49 f1       	breq	.+82     	; 0x1fb2c <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fada:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1fade:	83 fd       	sbrc	r24, 3
   1fae0:	21 c0       	rjmp	.+66     	; 0x1fb24 <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fae2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1fae6:	82 ff       	sbrs	r24, 2
   1fae8:	f0 cf       	rjmp	.-32     	; 0x1faca <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1faea:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1faee:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			while (Length && Endpoint_BytesInEndpoint())
   1faf2:	89 2b       	or	r24, r25
   1faf4:	31 f0       	breq	.+12     	; 0x1fb02 <Endpoint_Read_Control_Stream_LE+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1faf6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fafa:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1fafc:	61 50       	subi	r22, 0x01	; 1
   1fafe:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1fb00:	a1 f7       	brne	.-24     	; 0x1faea <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fb02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb06:	8b 77       	andi	r24, 0x7B	; 123
   1fb08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb0c:	de cf       	rjmp	.-68     	; 0x1faca <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb0e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb10:	88 23       	and	r24, r24
   1fb12:	51 f0       	breq	.+20     	; 0x1fb28 <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb14:	85 30       	cpi	r24, 0x05	; 5
   1fb16:	51 f0       	breq	.+20     	; 0x1fb2c <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fb18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1fb1c:	80 ff       	sbrs	r24, 0
   1fb1e:	f7 cf       	rjmp	.-18     	; 0x1fb0e <Endpoint_Read_Control_Stream_LE+0x56>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1fb20:	80 e0       	ldi	r24, 0x00	; 0
   1fb22:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1fb24:	81 e0       	ldi	r24, 0x01	; 1
   1fb26:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1fb28:	82 e0       	ldi	r24, 0x02	; 2
   1fb2a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1fb2c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fb2e:	08 95       	ret

0001fb30 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1fb30:	0f 93       	push	r16
   1fb32:	1f 93       	push	r17
   1fb34:	cf 93       	push	r28
   1fb36:	df 93       	push	r29
   1fb38:	00 d0       	rcall	.+0      	; 0x1fb3a <USB_Device_ProcessControlRequest+0xa>
   1fb3a:	cd b7       	in	r28, 0x3d	; 61
   1fb3c:	de b7       	in	r29, 0x3e	; 62
   1fb3e:	e2 e9       	ldi	r30, 0x92	; 146
   1fb40:	f1 e0       	ldi	r31, 0x01	; 1
   1fb42:	8a e9       	ldi	r24, 0x9A	; 154
   1fb44:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fb46:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1fb4a:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1fb4c:	8e 17       	cp	r24, r30
   1fb4e:	9f 07       	cpc	r25, r31
   1fb50:	d1 f7       	brne	.-12     	; 0x1fb46 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1fb52:	40 db       	rcall	.-2432   	; 0x1f1d4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fb54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1fb58:	83 ff       	sbrs	r24, 3
   1fb5a:	d3 c0       	rjmp	.+422    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1fb5c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1fb60:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <USB_ControlRequest+0x1>
   1fb64:	49 2f       	mov	r20, r25
   1fb66:	50 e0       	ldi	r21, 0x00	; 0
   1fb68:	4a 30       	cpi	r20, 0x0A	; 10
   1fb6a:	51 05       	cpc	r21, r1
   1fb6c:	08 f0       	brcs	.+2      	; 0x1fb70 <USB_Device_ProcessControlRequest+0x40>
   1fb6e:	c9 c0       	rjmp	.+402    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
   1fb70:	fa 01       	movw	r30, r20
   1fb72:	e4 5b       	subi	r30, 0xB4	; 180
   1fb74:	f7 40       	sbci	r31, 0x07	; 7
   1fb76:	ec c0       	rjmp	.+472    	; 0x1fd50 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fb78:	82 38       	cpi	r24, 0x82	; 130
   1fb7a:	09 f0       	breq	.+2      	; 0x1fb7e <USB_Device_ProcessControlRequest+0x4e>
   1fb7c:	c2 c0       	rjmp	.+388    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1fb7e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_ControlRequest+0x4>
   1fb82:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fb84:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1fb88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fb8c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fb90:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb94:	97 7f       	andi	r25, 0xF7	; 247
   1fb96:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1fb9a:	85 fb       	bst	r24, 5
   1fb9c:	88 27       	eor	r24, r24
   1fb9e:	80 f9       	bld	r24, 0
   1fba0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1fba4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1fba8:	85 c0       	rjmp	.+266    	; 0x1fcb4 <USB_Device_ProcessControlRequest+0x184>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fbaa:	28 2f       	mov	r18, r24
   1fbac:	2d 7f       	andi	r18, 0xFD	; 253
   1fbae:	09 f0       	breq	.+2      	; 0x1fbb2 <USB_Device_ProcessControlRequest+0x82>
   1fbb0:	a8 c0       	rjmp	.+336    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1fbb2:	82 30       	cpi	r24, 0x02	; 2
   1fbb4:	09 f0       	breq	.+2      	; 0x1fbb8 <USB_Device_ProcessControlRequest+0x88>
   1fbb6:	a5 c0       	rjmp	.+330    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1fbb8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <USB_ControlRequest+0x2>
   1fbbc:	81 11       	cpse	r24, r1
   1fbbe:	27 c0       	rjmp	.+78     	; 0x1fc0e <USB_Device_ProcessControlRequest+0xde>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1fbc0:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_ControlRequest+0x4>
   1fbc4:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1fbc6:	09 f4       	brne	.+2      	; 0x1fbca <USB_Device_ProcessControlRequest+0x9a>
   1fbc8:	9c c0       	rjmp	.+312    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fbca:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1fbce:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1fbd2:	20 ff       	sbrs	r18, 0
   1fbd4:	1c c0       	rjmp	.+56     	; 0x1fc0e <USB_Device_ProcessControlRequest+0xde>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1fbd6:	93 30       	cpi	r25, 0x03	; 3
   1fbd8:	21 f4       	brne	.+8      	; 0x1fbe2 <USB_Device_ProcessControlRequest+0xb2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fbda:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1fbde:	80 62       	ori	r24, 0x20	; 32
   1fbe0:	14 c0       	rjmp	.+40     	; 0x1fc0a <USB_Device_ProcessControlRequest+0xda>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1fbe2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1fbe6:	90 61       	ori	r25, 0x10	; 16
   1fbe8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
   1fbec:	21 e0       	ldi	r18, 0x01	; 1
   1fbee:	30 e0       	ldi	r19, 0x00	; 0
   1fbf0:	a9 01       	movw	r20, r18
   1fbf2:	02 c0       	rjmp	.+4      	; 0x1fbf8 <USB_Device_ProcessControlRequest+0xc8>
   1fbf4:	44 0f       	add	r20, r20
   1fbf6:	55 1f       	adc	r21, r21
   1fbf8:	8a 95       	dec	r24
   1fbfa:	e2 f7       	brpl	.-8      	; 0x1fbf4 <USB_Device_ProcessControlRequest+0xc4>
   1fbfc:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1fc00:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1fc04:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1fc08:	88 60       	ori	r24, 0x08	; 8
   1fc0a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fc0e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc16:	87 7f       	andi	r24, 0xF7	; 247
   1fc18:	50 c0       	rjmp	.+160    	; 0x1fcba <USB_Device_ProcessControlRequest+0x18a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fc1a:	81 11       	cpse	r24, r1
   1fc1c:	72 c0       	rjmp	.+228    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1fc1e:	10 91 94 01 	lds	r17, 0x0194	; 0x800194 <USB_ControlRequest+0x2>
   1fc22:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1fc24:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1fc26:	f8 94       	cli
   1fc28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc2c:	87 7f       	andi	r24, 0xF7	; 247
   1fc2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1fc32:	c4 dd       	rcall	.-1144   	; 0x1f7bc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fc34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1fc38:	80 ff       	sbrs	r24, 0
   1fc3a:	fc cf       	rjmp	.-8      	; 0x1fc34 <USB_Device_ProcessControlRequest+0x104>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1fc3c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1fc40:	80 78       	andi	r24, 0x80	; 128
   1fc42:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1fc44:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
   1fc48:	80 68       	ori	r24, 0x80	; 128
   1fc4a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1fc4e:	11 11       	cpse	r17, r1
   1fc50:	02 c0       	rjmp	.+4      	; 0x1fc56 <USB_Device_ProcessControlRequest+0x126>
   1fc52:	82 e0       	ldi	r24, 0x02	; 2
   1fc54:	01 c0       	rjmp	.+2      	; 0x1fc58 <USB_Device_ProcessControlRequest+0x128>
   1fc56:	83 e0       	ldi	r24, 0x03	; 3
   1fc58:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1fc5a:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
   1fc5c:	52 c0       	rjmp	.+164    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fc5e:	80 58       	subi	r24, 0x80	; 128
   1fc60:	82 30       	cpi	r24, 0x02	; 2
   1fc62:	08 f0       	brcs	.+2      	; 0x1fc66 <USB_Device_ProcessControlRequest+0x136>
   1fc64:	4e c0       	rjmp	.+156    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1fc66:	ae 01       	movw	r20, r28
   1fc68:	4f 5f       	subi	r20, 0xFF	; 255
   1fc6a:	5f 4f       	sbci	r21, 0xFF	; 255
   1fc6c:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <USB_ControlRequest+0x4>
   1fc70:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <USB_ControlRequest+0x2>
   1fc74:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <USB_ControlRequest+0x3>
   1fc78:	65 dd       	rcall	.-1334   	; 0x1f744 <CALLBACK_USB_GetDescriptor>
   1fc7a:	bc 01       	movw	r22, r24
   1fc7c:	89 2b       	or	r24, r25
   1fc7e:	09 f4       	brne	.+2      	; 0x1fc82 <USB_Device_ProcessControlRequest+0x152>
   1fc80:	40 c0       	rjmp	.+128    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc86:	97 7f       	andi	r25, 0xF7	; 247
   1fc88:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1fc8c:	89 81       	ldd	r24, Y+1	; 0x01
   1fc8e:	9a 81       	ldd	r25, Y+2	; 0x02
   1fc90:	bd de       	rcall	.-646    	; 0x1fa0c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fc92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc96:	8b 77       	andi	r24, 0x7B	; 123
   1fc98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc9c:	32 c0       	rjmp	.+100    	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1fc9e:	80 38       	cpi	r24, 0x80	; 128
   1fca0:	81 f5       	brne	.+96     	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fca6:	87 7f       	andi	r24, 0xF7	; 247
   1fca8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1fcac:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fcb0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fcb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fcb8:	8e 77       	andi	r24, 0x7E	; 126
   1fcba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1fcbe:	7e dd       	rcall	.-1284   	; 0x1f7bc <Endpoint_ClearStatusStage>
   1fcc0:	20 c0       	rjmp	.+64     	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fcc2:	81 11       	cpse	r24, r1
   1fcc4:	1e c0       	rjmp	.+60     	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1fcc6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <USB_ControlRequest+0x2>
   1fcca:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <USB_ControlRequest+0x3>
   1fcce:	99 27       	eor	r25, r25
   1fcd0:	02 97       	sbiw	r24, 0x02	; 2
   1fcd2:	bc f4       	brge	.+46     	; 0x1fd02 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fcd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fcd8:	87 7f       	andi	r24, 0xF7	; 247
   1fcda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1fcde:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <USB_ControlRequest+0x2>
   1fce2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   1fce6:	6a dd       	rcall	.-1324   	; 0x1f7bc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1fce8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <USB_Device_ConfigurationNumber>
   1fcec:	81 11       	cpse	r24, r1
   1fcee:	06 c0       	rjmp	.+12     	; 0x1fcfc <USB_Device_ProcessControlRequest+0x1cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fcf0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fcf4:	87 fd       	sbrc	r24, 7
   1fcf6:	02 c0       	rjmp	.+4      	; 0x1fcfc <USB_Device_ProcessControlRequest+0x1cc>
   1fcf8:	81 e0       	ldi	r24, 0x01	; 1
   1fcfa:	01 c0       	rjmp	.+2      	; 0x1fcfe <USB_Device_ProcessControlRequest+0x1ce>
   1fcfc:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1fcfe:	8e bb       	out	0x1e, r24	; 30
   1fd00:	5d da       	rcall	.-2886   	; 0x1f1bc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fd02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1fd06:	83 ff       	sbrs	r24, 3
   1fd08:	0a c0       	rjmp	.+20     	; 0x1fd1e <USB_Device_ProcessControlRequest+0x1ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fd0a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1fd0e:	80 62       	ori	r24, 0x20	; 32
   1fd10:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fd14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fd18:	87 7f       	andi	r24, 0xF7	; 247
   1fd1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1fd1e:	0f 90       	pop	r0
   1fd20:	0f 90       	pop	r0
   1fd22:	df 91       	pop	r29
   1fd24:	cf 91       	pop	r28
   1fd26:	1f 91       	pop	r17
   1fd28:	0f 91       	pop	r16
   1fd2a:	08 95       	ret

0001fd2c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1fd2c:	08 95       	ret

0001fd2e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1fd2e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1fd30:	8e b3       	in	r24, 0x1e	; 30
   1fd32:	88 23       	and	r24, r24
   1fd34:	59 f0       	breq	.+22     	; 0x1fd4c <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1fd36:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1fd3a:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fd3c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fd40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1fd44:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
   1fd46:	f4 de       	rcall	.-536    	; 0x1fb30 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fd48:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
   1fd4c:	cf 91       	pop	r28
   1fd4e:	08 95       	ret

0001fd50 <__tablejump2__>:
   1fd50:	ee 0f       	add	r30, r30
   1fd52:	ff 1f       	adc	r31, r31
   1fd54:	00 24       	eor	r0, r0
   1fd56:	00 1c       	adc	r0, r0
   1fd58:	0b be       	out	0x3b, r0	; 59
   1fd5a:	07 90       	elpm	r0, Z+
   1fd5c:	f6 91       	elpm	r31, Z
   1fd5e:	e0 2d       	mov	r30, r0
   1fd60:	09 94       	ijmp

0001fd62 <eeprom_read_byte>:
   1fd62:	f9 99       	sbic	0x1f, 1	; 31
   1fd64:	fe cf       	rjmp	.-4      	; 0x1fd62 <eeprom_read_byte>
   1fd66:	92 bd       	out	0x22, r25	; 34
   1fd68:	81 bd       	out	0x21, r24	; 33
   1fd6a:	f8 9a       	sbi	0x1f, 0	; 31
   1fd6c:	99 27       	eor	r25, r25
   1fd6e:	80 b5       	in	r24, 0x20	; 32
   1fd70:	08 95       	ret

0001fd72 <eeprom_write_byte>:
   1fd72:	26 2f       	mov	r18, r22

0001fd74 <eeprom_write_r18>:
   1fd74:	f9 99       	sbic	0x1f, 1	; 31
   1fd76:	fe cf       	rjmp	.-4      	; 0x1fd74 <eeprom_write_r18>
   1fd78:	1f ba       	out	0x1f, r1	; 31
   1fd7a:	92 bd       	out	0x22, r25	; 34
   1fd7c:	81 bd       	out	0x21, r24	; 33
   1fd7e:	20 bd       	out	0x20, r18	; 32
   1fd80:	0f b6       	in	r0, 0x3f	; 63
   1fd82:	f8 94       	cli
   1fd84:	fa 9a       	sbi	0x1f, 2	; 31
   1fd86:	f9 9a       	sbi	0x1f, 1	; 31
   1fd88:	0f be       	out	0x3f, r0	; 63
   1fd8a:	01 96       	adiw	r24, 0x01	; 1
   1fd8c:	08 95       	ret

0001fd8e <_exit>:
   1fd8e:	f8 94       	cli

0001fd90 <__stop_program>:
   1fd90:	ff cf       	rjmp	.-2      	; 0x1fd90 <__stop_program>
