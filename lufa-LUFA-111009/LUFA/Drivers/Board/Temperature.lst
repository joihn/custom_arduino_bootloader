   1               		.file	"Temperature.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.Temperature_GetTemperature,"ax",@progbits
  12               	.global	Temperature_GetTemperature
  14               	Temperature_GetTemperature:
  15               	.LFB26:
  16               		.file 1 "../../LUFA/Drivers/Board/Temperature.c"
   1:../../LUFA/Drivers/Board/Temperature.c **** /*
   2:../../LUFA/Drivers/Board/Temperature.c ****              LUFA Library
   3:../../LUFA/Drivers/Board/Temperature.c ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA/Drivers/Board/Temperature.c **** 
   5:../../LUFA/Drivers/Board/Temperature.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/Board/Temperature.c ****            www.lufa-lib.org
   7:../../LUFA/Drivers/Board/Temperature.c **** */
   8:../../LUFA/Drivers/Board/Temperature.c **** 
   9:../../LUFA/Drivers/Board/Temperature.c **** /*
  10:../../LUFA/Drivers/Board/Temperature.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/Board/Temperature.c **** 
  12:../../LUFA/Drivers/Board/Temperature.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/Board/Temperature.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/Board/Temperature.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/Board/Temperature.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/Board/Temperature.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/Board/Temperature.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/Board/Temperature.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/Board/Temperature.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/Board/Temperature.c **** 
  21:../../LUFA/Drivers/Board/Temperature.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/Board/Temperature.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/Board/Temperature.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/Board/Temperature.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/Board/Temperature.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/Board/Temperature.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/Board/Temperature.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/Board/Temperature.c ****   this software.
  29:../../LUFA/Drivers/Board/Temperature.c **** */
  30:../../LUFA/Drivers/Board/Temperature.c **** 
  31:../../LUFA/Drivers/Board/Temperature.c **** #include "Temperature.h"
  32:../../LUFA/Drivers/Board/Temperature.c **** 
  33:../../LUFA/Drivers/Board/Temperature.c **** static const uint16_t PROGMEM Temperature_Lookup[TEMP_TABLE_SIZE] =
  34:../../LUFA/Drivers/Board/Temperature.c **** {
  35:../../LUFA/Drivers/Board/Temperature.c **** 	0x3B4, 0x3B0, 0x3AB, 0x3A6, 0x3A0, 0x39A, 0x394, 0x38E, 0x388, 0x381, 0x37A, 0x373,
  36:../../LUFA/Drivers/Board/Temperature.c **** 	0x36B, 0x363, 0x35B, 0x353, 0x34A, 0x341, 0x338, 0x32F, 0x325, 0x31B, 0x311, 0x307,
  37:../../LUFA/Drivers/Board/Temperature.c **** 	0x2FC, 0x2F1, 0x2E6, 0x2DB, 0x2D0, 0x2C4, 0x2B8, 0x2AC, 0x2A0, 0x294, 0x288, 0x27C,
  38:../../LUFA/Drivers/Board/Temperature.c **** 	0x26F, 0x263, 0x256, 0x24A, 0x23D, 0x231, 0x225, 0x218, 0x20C, 0x200, 0x1F3, 0x1E7,
  39:../../LUFA/Drivers/Board/Temperature.c **** 	0x1DB, 0x1CF, 0x1C4, 0x1B8, 0x1AC, 0x1A1, 0x196, 0x18B, 0x180, 0x176, 0x16B, 0x161,
  40:../../LUFA/Drivers/Board/Temperature.c **** 	0x157, 0x14D, 0x144, 0x13A, 0x131, 0x128, 0x11F, 0x117, 0x10F, 0x106, 0x0FE, 0x0F7,
  41:../../LUFA/Drivers/Board/Temperature.c **** 	0x0EF, 0x0E8, 0x0E1, 0x0DA, 0x0D3, 0x0CD, 0x0C7, 0x0C0, 0x0BA, 0x0B5, 0x0AF, 0x0AA,
  42:../../LUFA/Drivers/Board/Temperature.c **** 	0x0A4, 0x09F, 0x09A, 0x096, 0x091, 0x08C, 0x088, 0x084, 0x080, 0x07C, 0x078, 0x074,
  43:../../LUFA/Drivers/Board/Temperature.c **** 	0x071, 0x06D, 0x06A, 0x067, 0x064, 0x061, 0x05E, 0x05B, 0x058, 0x055, 0x053, 0x050,
  44:../../LUFA/Drivers/Board/Temperature.c **** 	0x04E, 0x04C, 0x049, 0x047, 0x045, 0x043, 0x041, 0x03F, 0x03D, 0x03C, 0x03A, 0x038
  45:../../LUFA/Drivers/Board/Temperature.c **** };
  46:../../LUFA/Drivers/Board/Temperature.c **** 
  47:../../LUFA/Drivers/Board/Temperature.c **** int8_t Temperature_GetTemperature(void)
  48:../../LUFA/Drivers/Board/Temperature.c **** {
  17               		.loc 1 48 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	.LVL0:
  24               	.LBB21:
  25               	.LBB22:
  26               	.LBB23:
  27               	.LBB24:
  28               		.file 2 "../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h"
   1:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** /*
   2:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****              LUFA Library
   3:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
   5:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** */
   8:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
   9:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** /*
  10:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  12:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  21:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****   this software.
  29:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** */
  30:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  31:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** /** \file
  32:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \brief ADC Peripheral Driver (AVR8)
  33:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  34:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  On-chip Analogue-to-Digital converter (ADC) driver for supported U4, U6 and U7 model AVRs that 
  35:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  peripheral internally.
  36:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  37:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *        dispatch header located in LUFA/Drivers/Peripheral/ADC.h.
  39:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  */
  40:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  41:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** /** \ingroup Group_ADC
  42:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \defgroup Group_ADC_AVR8 ADC Peripheral Driver (AVR8)
  43:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  44:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \section Sec_ModDescription Module Description
  45:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  On-chip Analogue-to-Digital converter (ADC) driver for supported U4, U6 and U7 model AVRs that 
  46:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  peripheral internally.
  47:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  48:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  49:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *        dispatch header located in LUFA/Drivers/Peripheral/ADC.h.
  50:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  51:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \section Sec_ExampleUsage Example Usage
  52:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  The following snippet is an example of how this module may be used within a typical
  53:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  application.
  54:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  55:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \code
  56:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      // Initialize the ADC driver before first use
  57:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
  58:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  59:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      // Must setup the ADC channel to read beforehand
  60:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      ADC_SetupChannel(1);
  61:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  62:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      // Perform a single conversion of the ADC channel 1
  63:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL1);
  64:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      printf("Conversion Result: %d\r\n", ADC_GetResult());
  65:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  66:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      // Start reading ADC channel 1 in free running (continuous conversion) mode
  67:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL1);
  68:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      for (;;)
  69:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      {
  70:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *           while (!(ADC_IsReadingComplete())) {};
  71:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *           printf("Conversion Result: %d\r\n", ADC_GetResult());
  72:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *      }
  73:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  \endcode
  74:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *
  75:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  *  @{
  76:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h ****  */
  77:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  78:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** #ifndef __ADC_AVR8_H__
  79:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** #define __ADC_AVR8_H__
  80:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  81:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	/* Includes: */
  82:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#include "../../../Common/Common.h"
  83:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  84:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  85:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#if defined(__cplusplus)
  86:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			extern "C" {
  87:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#endif
  88:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  89:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	/* Preprocessor Checks: */
  90:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#if !defined(__INCLUDE_FROM_ADC_H)
  91:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Peripheral/ADC.h instead.
  92:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#endif
  93:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
  94:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#if !(defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
  95:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		      defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
  96:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			  defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || \
  97:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			  defined(__AVR_ATmega32U6__))
  98:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#error The ADC peripheral driver is not currently available for your selected microcontroller mo
  99:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		#endif
 100:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 101:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	/* Private Interface - For use in library only: */
 102:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	#if !defined(__DOXYGEN__)
 103:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		/* Macros: */
 104:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define _ADC_GET_MUX_MASK2(y)           ADC_CHANNEL ## y
 105:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define _ADC_GET_MUX_MASK(y)            _ADC_GET_MUX_MASK2(y)
 106:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	#endif
 107:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	
 108:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 109:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		/* Macros: */
 110:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** \name ADC Reference Configuration Masks */
 111:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@{
 112:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Reference mask, for using the voltage present at the AVR's AREF pin for the ADC reference. *
 113:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_REFERENCE_AREF              0
 114:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 115:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Reference mask, for using the voltage present at the AVR's AVCC pin for the ADC reference. *
 116:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_REFERENCE_AVCC              (1 << REFS0)
 117:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 118:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Reference mask, for using the internally generated 2.56V reference voltage as the ADC refere
 119:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_REFERENCE_INT2560MV         ((1 << REFS1) | (1 << REFS0))
 120:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@}
 121:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			
 122:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** \name ADC Result Adjustment Configuration Masks */
 123:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@{
 124:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Left-adjusts the 10-bit ADC result, so that the upper 8 bits of the value returned by the
 125:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \ref ADC_GetResult() macro contain the 8 most significant bits of the result.
 126:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 127:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_LEFT_ADJUSTED               (1 << ADLAR)
 128:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 129:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Right-adjusts the 10-bit ADC result, so that the lower 8 bits of the value returned by the
 130:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \ref ADC_GetResult() macro contain the 8 least significant bits of the result.
 131:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 132:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_RIGHT_ADJUSTED              (0 << ADLAR)
 133:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@}
 134:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 135:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** \name ADC Mode Configuration Masks */
 136:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@{
 137:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC mode to free running, so that conversions take place continuously as fast as th
 138:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  is capable of at the given input clock speed.
 139:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 140:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_FREE_RUNNING                (1 << ADATE)
 141:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 142:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC mode to single conversion, so that only a single conversion will take place bef
 143:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  the ADC returns to idle.
 144:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 145:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_SINGLE_CONVERSION           (0 << ADATE)
 146:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@}
 147:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			
 148:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** \name ADC Prescaler Configuration Masks */
 149:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@{
 150:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 2 the AVR's system clock. */
 151:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_2                  (1 << ADPS0)
 152:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 153:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 4 the AVR's system clock. */
 154:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_4                  (1 << ADPS1)
 155:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 156:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 8 the AVR's system clock. */
 157:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_8                  ((1 << ADPS0) | (1 << ADPS1))
 158:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 159:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 16 the AVR's system clock. */
 160:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_16                 (1 << ADPS2)
 161:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 162:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 32 the AVR's system clock. */
 163:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_32                 ((1 << ADPS2) | (1 << ADPS0))
 164:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 165:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 64 the AVR's system clock. */
 166:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_64                 ((1 << ADPS2) | (1 << ADPS1))
 167:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 168:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Sets the ADC input clock to prescale by a factor of 128 the AVR's system clock. */
 169:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_PRESCALE_128                ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0))
 170:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@}
 171:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 172:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** \name ADC MUX Masks */
 173:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@{
 174:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the ADC0 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_Ge
 175:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_CHANNEL0                    (0x00 << MUX0)
 176:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 177:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the ADC1 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_Ge
 178:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_CHANNEL1                    (0x01 << MUX0)
 179:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 180:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#if !(defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
 181:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC2 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_G
 182:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 183:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 184:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 185:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL2                (0x02 << MUX0)
 186:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 187:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC3 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_G
 188:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 189:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 190:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 191:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL3                (0x03 << MUX0)
 192:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#endif
 193:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 194:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the ADC4 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_Ge
 195:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_CHANNEL4                    (0x04 << MUX0)
 196:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 197:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the ADC5 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_Ge
 198:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_CHANNEL5                    (0x05 << MUX0)
 199:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 200:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the ADC6 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_Ge
 201:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_CHANNEL6                    (0x06 << MUX0)
 202:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 203:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the ADC7 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 204:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_CHANNEL7                    (0x07 << MUX0)
 205:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 206:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** MUX mask define for the internal 1.1V bandgap channel of the ADC. See \ref ADC_StartReading(
 207:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_1100MV_BANDGAP              (0x1E << MUX0)
 208:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 209:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
 210:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC8 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_G
 211:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 212:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 213:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 214:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL8                ((1 << 8) | (0x00 << MUX0))
 215:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 216:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC9 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_G
 217:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 218:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 219:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 220:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL9                ((1 << 8) | (0x01 << MUX0))
 221:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 222:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC10 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_
 223:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 224:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 225:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 226:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL10               ((1 << 8) | (0x02 << MUX0))
 227:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 228:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC11 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_
 229:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 230:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 231:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 232:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL11               ((1 << 8) | (0x03 << MUX0))
 233:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 234:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC12 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_
 235:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 236:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 237:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 238:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL12               ((1 << 8) | (0x04 << MUX0))
 239:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 240:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the ADC13 channel of the ADC. See \ref ADC_StartReading() and \ref ADC_
 241:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 242:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 243:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 244:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_CHANNEL13               ((1 << 8) | (0x05 << MUX0))
 245:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 246:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				/** MUX mask define for the internal temperature sensor channel of the ADC. See \ref ADC_StartR
 247:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \ref ADC_GetChannelReading().
 248:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *
 249:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 *  \note Not available on all AVR models.
 250:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				 */
 251:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#define ADC_INT_TEMP_SENS           ((1 << 8) | (0x07 << MUX0))
 252:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#endif
 253:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 254:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Retrieves the ADC MUX mask for the given ADC channel number.
 255:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 256:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \note This macro will only work correctly on channel numbers that are compile-time
 257:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        constants defined by the preprocessor.
 258:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 259:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \param[in] Channel  Index of the ADC channel whose MUX mask is to be retrieved.
 260:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 261:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			#define ADC_GET_CHANNEL_MASK(Channel)   _ADC_GET_MUX_MASK(Channel)
 262:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			//@}
 263:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 264:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 		/* Inline Functions: */
 265:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Configures the given ADC channel, ready for ADC conversions. This function sets the
 266:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  associated port pin as an input and disables the digital portion of the I/O to reduce
 267:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  power consumption.
 268:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 269:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \note This must only be called for ADC channels with are connected to a physical port
 270:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        pin of the AVR, denoted by its special alternative function ADCx.
 271:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        \n\n
 272:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 273:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \note The channel number must be specified as an integer, and <b>not</b> a \c ADC_CHANNEL* m
 274:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 275:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \param[in] ChannelIndex  ADC channel number to set up for conversions.
 276:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 277:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
 278:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			{
 279:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
 280:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
 281:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					 defined(__AVR_ATmega32U6__))
 282:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				DDRF  &= ~(1 << ChannelIndex);
 283:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				DIDR0 |=  (1 << ChannelIndex);
 284:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 285:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				if (ChannelIndex < 8)
 286:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 287:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRF  &= ~(1 << ChannelIndex);
 288:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR0 |=  (1 << ChannelIndex);
 289:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 290:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else if (ChannelIndex == 8)
 291:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 292:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRD  &= ~(1 << 4);
 293:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR2 |=  (1 << 0);
 294:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 295:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else if (ChannelIndex < 11)
 296:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 297:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRD  &= ~(1 << (ChannelIndex - 3));
 298:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR2 |=  (1 << (ChannelIndex - 8));
 299:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 300:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else
 301:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 302:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRB  &= ~(1 << (ChannelIndex - 7));
 303:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR2 |=  (1 << (ChannelIndex - 8));
 304:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 305:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#endif
 306:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			}
 307:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 308:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** De-configures the given ADC channel, re-enabling digital I/O mode instead of analog. This
 309:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  function sets the associated port pin as an input and re-enabled the digital portion of
 310:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  the I/O.
 311:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 312:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \note This must only be called for ADC channels with are connected to a physical port
 313:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        pin of the AVR, denoted by its special alternative function ADCx.
 314:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        \n\n
 315:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 316:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \note The channel number must be specified as an integer, and <b>not</b> a \c ADC_CHANNEL* m
 317:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 318:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \param[in] ChannelIndex  ADC channel number to set up for conversions.
 319:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 320:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline void ADC_DisableChannel(const uint8_t ChannelIndex)
 321:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			{
 322:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
 323:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
 324:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					 defined(__AVR_ATmega32U6__))
 325:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				DDRF  &= ~(1 << ChannelIndex);
 326:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				DIDR0 &= ~(1 << ChannelIndex);
 327:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 328:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				if (ChannelIndex < 8)
 329:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 330:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRF  &= ~(1 << ChannelIndex);
 331:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR0 &= ~(1 << ChannelIndex);
 332:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 333:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else if (ChannelIndex == 8)
 334:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 335:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRD  &= ~(1 << 4);
 336:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR2 &= ~(1 << 0);
 337:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 338:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else if (ChannelIndex < 11)
 339:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 340:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRD  &= ~(1 << (ChannelIndex - 3));
 341:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR2 &= ~(1 << (ChannelIndex - 8));
 342:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 343:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else
 344:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				{
 345:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DDRB  &= ~(1 << (ChannelIndex - 7));
 346:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 					DIDR2 &= ~(1 << (ChannelIndex - 8));
 347:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				}
 348:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#endif
 349:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			}
 350:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 351:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Starts the reading of the given channel, but does not wait until the conversion has complete
 352:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  Once executed, the conversion status can be determined via the \ref ADC_IsReadingComplete() 
 353:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  the result read via the \ref ADC_GetResult() macro.
 354:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 355:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  If the ADC has been initialized in free running mode, calling this function once will begin 
 356:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  conversions. If the ADC is in single conversion mode (or the channel to convert from is to b
 357:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  this function must be called each time a conversion is to take place.
 358:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 359:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
 360:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 361:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline void ADC_StartReading(const uint16_t MUXMask)
 362:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			{
 363:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				ADMUX = MUXMask;
  29               		.loc 2 363 0
  30 0000 80E4      		ldi r24,lo8(64)
  31 0002 8093 7C00 		sts 124,r24
 364:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 365:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
 366:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				if (MUXMask & (1 << 8))
 367:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				  ADCSRB |=  (1 << MUX5);
 368:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				else
 369:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				  ADCSRB &= ~(1 << MUX5);
 370:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				#endif
 371:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 372:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				ADCSRA |= (1 << ADSC);
  32               		.loc 2 372 0
  33 0006 8091 7A00 		lds r24,122
  34 000a 8064      		ori r24,lo8(64)
  35 000c 8093 7A00 		sts 122,r24
  36               	.L2:
  37               	.LBE24:
  38               	.LBE23:
  39               	.LBB25:
  40               	.LBB26:
 373:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			}
 374:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 375:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Indicates if the current ADC conversion is completed, or still in progress.
 376:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 377:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \return Boolean false if the reading is still taking place, or true if the conversion is
 378:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *          complete and ready to be read out with \ref ADC_GetResult().
 379:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 380:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 381:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline bool ADC_IsReadingComplete(void)
 382:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			{
 383:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				return ((ADCSRA & (1 << ADIF)) ? true : false);
  41               		.loc 2 383 0
  42 0010 8091 7A00 		lds r24,122
  43               	.LBE26:
  44               	.LBE25:
 384:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			}
 385:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 386:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Retrieves the conversion value of the last completed ADC conversion and clears the reading
 387:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  completion flag.
 388:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 389:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \return The result of the last ADC conversion as an unsigned value.
 390:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 391:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 392:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline uint16_t ADC_GetResult(void)
 393:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			{
 394:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				ADCSRA |= (1 << ADIF);
 395:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				return ADC;
 396:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			}
 397:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 398:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			/** Performs a complete single reading from channel, including a polling spin-loop to wait for t
 399:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  conversion to complete, and the returning of the converted value.
 400:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 401:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \note For free running mode, the automated conversions should be initialized with a single c
 402:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        to \ref ADC_StartReading() to select the channel and begin the automated conversions, 
 403:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *        the results read directly from the \ref ADC_GetResult() instead to reduce overhead.
 404:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 405:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \param[in] MUXMask  Mask comprising of an ADC channel mask, reference mask and adjustment ma
 406:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *
 407:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 *  \return Converted ADC result for the given ADC channel.
 408:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			 */
 409:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
 410:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
 411:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			{
 412:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				ADC_StartReading(MUXMask);
 413:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 
 414:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				while (!(ADC_IsReadingComplete()));
  45               		.loc 2 414 0
  46 0014 84FF      		sbrs r24,4
  47 0016 00C0      		rjmp .L2
  48               	.LBB27:
  49               	.LBB28:
 394:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 				return ADC;
  50               		.loc 2 394 0
  51 0018 8091 7A00 		lds r24,122
  52 001c 8061      		ori r24,lo8(16)
  53 001e 8093 7A00 		sts 122,r24
 395:../../LUFA/Drivers/Board/../Peripheral/AVR8/ADC_AVR8.h **** 			}
  54               		.loc 2 395 0
  55 0022 4091 7800 		lds r20,120
  56 0026 5091 7900 		lds r21,120+1
  57               	.LVL1:
  58               	.LBE28:
  59               	.LBE27:
  60               	.LBE22:
  61               	.LBE21:
  62               	.LBB29:
  49:../../LUFA/Drivers/Board/Temperature.c **** 	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANN
  50:../../LUFA/Drivers/Board/Temperature.c **** 
  51:../../LUFA/Drivers/Board/Temperature.c **** 	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
  63               		.loc 1 51 0
  64 002a E0E0      		ldi r30,lo8(Temperature_Lookup)
  65 002c F0E0      		ldi r31,hi8(Temperature_Lookup)
  66               	/* #APP */
  67               	 ;  51 "../../LUFA/Drivers/Board/Temperature.c" 1
  68 002e 8591      		lpm r24, Z+
  69 0030 9491      		lpm r25, Z
  70               		
  71               	 ;  0 "" 2
  72               	.LVL2:
  73               	/* #NOAPP */
  74               	.LBE29:
  75 0032 8417      		cp r24,r20
  76 0034 9507      		cpc r25,r21
  77 0036 00F0      		brlo .L6
  78 0038 20E0      		ldi r18,lo8(Temperature_Lookup)
  79 003a 30E0      		ldi r19,hi8(Temperature_Lookup)
  80 003c 80E0      		ldi r24,0
  81 003e 90E0      		ldi r25,0
  82               	.LVL3:
  83               	.L5:
  84               	.LBB30:
  85               	.LBB31:
  52:../../LUFA/Drivers/Board/Temperature.c **** 	  return TEMP_MIN_TEMP;
  53:../../LUFA/Drivers/Board/Temperature.c **** 
  54:../../LUFA/Drivers/Board/Temperature.c **** 	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
  55:../../LUFA/Drivers/Board/Temperature.c **** 	{
  56:../../LUFA/Drivers/Board/Temperature.c **** 		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
  86               		.loc 1 56 0
  87 0040 F901      		movw r30,r18
  88               	/* #APP */
  89               	 ;  56 "../../LUFA/Drivers/Board/Temperature.c" 1
  90 0042 6591      		lpm r22, Z+
  91 0044 7491      		lpm r23, Z
  92               		
  93               	 ;  0 "" 2
  94               	.LVL4:
  95               	/* #NOAPP */
  96               	.LBE31:
  97 0046 6417      		cp r22,r20
  98 0048 7507      		cpc r23,r21
  99 004a 00F4      		brsh .L4
  57:../../LUFA/Drivers/Board/Temperature.c **** 		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
 100               		.loc 1 57 0
 101 004c 8551      		subi r24,lo8(-(-21))
 102               	.LVL5:
 103 004e 0895      		ret
 104               	.LVL6:
 105               	.L4:
  54:../../LUFA/Drivers/Board/Temperature.c **** 	{
 106               		.loc 1 54 0 discriminator 2
 107 0050 0196      		adiw r24,1
 108               	.LVL7:
 109 0052 2E5F      		subi r18,-2
 110 0054 3F4F      		sbci r19,-1
 111 0056 8837      		cpi r24,120
 112 0058 9105      		cpc r25,__zero_reg__
 113 005a 01F4      		brne .L5
 114               	.LBE30:
  58:../../LUFA/Drivers/Board/Temperature.c **** 	}
  59:../../LUFA/Drivers/Board/Temperature.c **** 
  60:../../LUFA/Drivers/Board/Temperature.c **** 	return TEMP_MAX_TEMP;
 115               		.loc 1 60 0
 116 005c 82E6      		ldi r24,lo8(98)
 117               	.LVL8:
 118               	.LBB32:
 119 005e 0895      		ret
 120               	.LVL9:
 121               	.L6:
 122               	.LBE32:
  52:../../LUFA/Drivers/Board/Temperature.c **** 
 123               		.loc 1 52 0
 124 0060 8BEE      		ldi r24,lo8(-21)
 125               	.LVL10:
  61:../../LUFA/Drivers/Board/Temperature.c **** }
 126               		.loc 1 61 0
 127 0062 0895      		ret
 128               		.cfi_endproc
 129               	.LFE26:
 131               		.section	.progmem.data,"a",@progbits
 134               	Temperature_Lookup:
 135 0000 B403      		.word	948
 136 0002 B003      		.word	944
 137 0004 AB03      		.word	939
 138 0006 A603      		.word	934
 139 0008 A003      		.word	928
 140 000a 9A03      		.word	922
 141 000c 9403      		.word	916
 142 000e 8E03      		.word	910
 143 0010 8803      		.word	904
 144 0012 8103      		.word	897
 145 0014 7A03      		.word	890
 146 0016 7303      		.word	883
 147 0018 6B03      		.word	875
 148 001a 6303      		.word	867
 149 001c 5B03      		.word	859
 150 001e 5303      		.word	851
 151 0020 4A03      		.word	842
 152 0022 4103      		.word	833
 153 0024 3803      		.word	824
 154 0026 2F03      		.word	815
 155 0028 2503      		.word	805
 156 002a 1B03      		.word	795
 157 002c 1103      		.word	785
 158 002e 0703      		.word	775
 159 0030 FC02      		.word	764
 160 0032 F102      		.word	753
 161 0034 E602      		.word	742
 162 0036 DB02      		.word	731
 163 0038 D002      		.word	720
 164 003a C402      		.word	708
 165 003c B802      		.word	696
 166 003e AC02      		.word	684
 167 0040 A002      		.word	672
 168 0042 9402      		.word	660
 169 0044 8802      		.word	648
 170 0046 7C02      		.word	636
 171 0048 6F02      		.word	623
 172 004a 6302      		.word	611
 173 004c 5602      		.word	598
 174 004e 4A02      		.word	586
 175 0050 3D02      		.word	573
 176 0052 3102      		.word	561
 177 0054 2502      		.word	549
 178 0056 1802      		.word	536
 179 0058 0C02      		.word	524
 180 005a 0002      		.word	512
 181 005c F301      		.word	499
 182 005e E701      		.word	487
 183 0060 DB01      		.word	475
 184 0062 CF01      		.word	463
 185 0064 C401      		.word	452
 186 0066 B801      		.word	440
 187 0068 AC01      		.word	428
 188 006a A101      		.word	417
 189 006c 9601      		.word	406
 190 006e 8B01      		.word	395
 191 0070 8001      		.word	384
 192 0072 7601      		.word	374
 193 0074 6B01      		.word	363
 194 0076 6101      		.word	353
 195 0078 5701      		.word	343
 196 007a 4D01      		.word	333
 197 007c 4401      		.word	324
 198 007e 3A01      		.word	314
 199 0080 3101      		.word	305
 200 0082 2801      		.word	296
 201 0084 1F01      		.word	287
 202 0086 1701      		.word	279
 203 0088 0F01      		.word	271
 204 008a 0601      		.word	262
 205 008c FE00      		.word	254
 206 008e F700      		.word	247
 207 0090 EF00      		.word	239
 208 0092 E800      		.word	232
 209 0094 E100      		.word	225
 210 0096 DA00      		.word	218
 211 0098 D300      		.word	211
 212 009a CD00      		.word	205
 213 009c C700      		.word	199
 214 009e C000      		.word	192
 215 00a0 BA00      		.word	186
 216 00a2 B500      		.word	181
 217 00a4 AF00      		.word	175
 218 00a6 AA00      		.word	170
 219 00a8 A400      		.word	164
 220 00aa 9F00      		.word	159
 221 00ac 9A00      		.word	154
 222 00ae 9600      		.word	150
 223 00b0 9100      		.word	145
 224 00b2 8C00      		.word	140
 225 00b4 8800      		.word	136
 226 00b6 8400      		.word	132
 227 00b8 8000      		.word	128
 228 00ba 7C00      		.word	124
 229 00bc 7800      		.word	120
 230 00be 7400      		.word	116
 231 00c0 7100      		.word	113
 232 00c2 6D00      		.word	109
 233 00c4 6A00      		.word	106
 234 00c6 6700      		.word	103
 235 00c8 6400      		.word	100
 236 00ca 6100      		.word	97
 237 00cc 5E00      		.word	94
 238 00ce 5B00      		.word	91
 239 00d0 5800      		.word	88
 240 00d2 5500      		.word	85
 241 00d4 5300      		.word	83
 242 00d6 5000      		.word	80
 243 00d8 4E00      		.word	78
 244 00da 4C00      		.word	76
 245 00dc 4900      		.word	73
 246 00de 4700      		.word	71
 247 00e0 4500      		.word	69
 248 00e2 4300      		.word	67
 249 00e4 4100      		.word	65
 250 00e6 3F00      		.word	63
 251 00e8 3D00      		.word	61
 252 00ea 3C00      		.word	60
 253 00ec 3A00      		.word	58
 254 00ee 3800      		.word	56
 255               		.text
 256               	.Letext0:
 257               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Temperature.c
     /tmp/ccLz5eXF.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLz5eXF.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLz5eXF.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLz5eXF.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccLz5eXF.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLz5eXF.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLz5eXF.s:14     .text.Temperature_GetTemperature:0000000000000000 Temperature_GetTemperature
     /tmp/ccLz5eXF.s:134    .progmem.data:0000000000000000 Temperature_Lookup

NO UNDEFINED SYMBOLS
