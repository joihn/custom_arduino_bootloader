
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001874  00001908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800114  00800114  0000191c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e9c  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002041  00000000  00000000  00006a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000253b  00000000  00000000  00008ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  0000b010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002322  00000000  00000000  0000b684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fbf  00000000  00000000  0000d9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000f965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c1       	rjmp	.+700    	; 0x2be <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c1       	rjmp	.+724    	; 0x2fa <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c6       	rjmp	.+3250   	; 0xcdc <__vector_10>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c2       	rjmp	.+1222   	; 0x51c <__vector_21>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c1       	rjmp	.+668    	; 0x2fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c1       	rjmp	.+660    	; 0x2fa <__bad_interrupt>
      66:	00 00       	nop
      68:	48 c1       	rjmp	.+656    	; 0x2fa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	34 c1       	rjmp	.+616    	; 0x2fa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c1       	rjmp	.+612    	; 0x2fa <__bad_interrupt>
      96:	00 00       	nop
      98:	83 04       	cpc	r8, r3
      9a:	74 05       	cpc	r23, r4
      9c:	a1 04       	cpc	r10, r1
      9e:	ab 04       	cpc	r10, r11
      a0:	d6 04       	cpc	r13, r6
      a2:	fe 04       	cpc	r15, r14
      a4:	09 05       	cpc	r16, r9
      a6:	1a 05       	cpc	r17, r10
      a8:	36 05       	cpc	r19, r6
      aa:	5d 05       	cpc	r21, r13

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4521>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4516>:
     131:	4d 69 63 72 6f 70 68 6f 6e 65 20 45 6e 75 6d 65     Microphone Enume
     141:	72 61 74 65 64 2e 0d 0a 00                          rated....

0000014a <__c.4512>:
     14a:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     15a:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     16a:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa
     17a:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
     18a:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     19a:	0a 1b 5b 33 37 6d 00                                ..[37m.

000001a1 <__c.4510>:
     1a1:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1b1:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1c1:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1d1:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1e1:	37 6d 00                                            7m.

000001e4 <__c.4508>:
     1e4:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1f4:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001fe <__c.4506>:
     1fe:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     20e:	69 63 65 2e 0d 0a 00                                ice....

00000215 <__c.4504>:
     215:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     225:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     235:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000023f <__c.4501>:
     23f:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     24f:	61 74 61 2e 0d 0a 00                                ata....

00000256 <__c.4496>:
     256:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     266:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000275 <__c.4491>:
     275:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     285:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000292 <__c.4482>:
     292:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
     2a2:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2b2:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

000002be <__ctors_end>:
     2be:	11 24       	eor	r1, r1
     2c0:	1f be       	out	0x3f, r1	; 63
     2c2:	cf ef       	ldi	r28, 0xFF	; 255
     2c4:	d0 e2       	ldi	r29, 0x20	; 32
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	cd bf       	out	0x3d, r28	; 61

000002ca <__do_copy_data>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	e4 e7       	ldi	r30, 0x74	; 116
     2d2:	f8 e1       	ldi	r31, 0x18	; 24
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	0b bf       	out	0x3b, r16	; 59
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <__do_copy_data+0x14>
     2da:	07 90       	elpm	r0, Z+
     2dc:	0d 92       	st	X+, r0
     2de:	a4 31       	cpi	r26, 0x14	; 20
     2e0:	b1 07       	cpc	r27, r17
     2e2:	d9 f7       	brne	.-10     	; 0x2da <__do_copy_data+0x10>

000002e4 <__do_clear_bss>:
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	a4 e1       	ldi	r26, 0x14	; 20
     2e8:	b1 e0       	ldi	r27, 0x01	; 1
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a9 33       	cpi	r26, 0x39	; 57
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	51 d0       	rcall	.+162    	; 0x398 <main>
     2f6:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2fc:	9b b1       	in	r25, 0x0b	; 11
     2fe:	9f 70       	andi	r25, 0x0F	; 15
     300:	89 2b       	or	r24, r25
     302:	8b b9       	out	0x0b, r24	; 11
     304:	08 95       	ret

00000306 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     306:	84 b7       	in	r24, 0x34	; 52
     308:	87 7f       	andi	r24, 0xF7	; 247
     30a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	a8 95       	wdr
     312:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     316:	88 61       	ori	r24, 0x18	; 24
     318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     31c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     320:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	80 e8       	ldi	r24, 0x80	; 128
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     32e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     332:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     334:	83 e3       	ldi	r24, 0x33	; 51
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     33c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     340:	86 e0       	ldi	r24, 0x06	; 6
     342:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     346:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     34a:	88 e1       	ldi	r24, 0x18	; 24
     34c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     350:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     352:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     354:	8a b1       	in	r24, 0x0a	; 10
     356:	80 6f       	ori	r24, 0xF0	; 240
     358:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     35a:	8b b1       	in	r24, 0x0b	; 11
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     360:	a7 d4       	rcall	.+2382   	; 0xcb0 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     362:	a3 e3       	ldi	r26, 0x33	; 51
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	e5 e2       	ldi	r30, 0x25	; 37
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	11 96       	adiw	r26, 0x01	; 1
     36c:	fc 93       	st	X, r31
     36e:	ee 93       	st	-X, r30
					stdout = Stream;
     370:	13 96       	adiw	r26, 0x03	; 3
     372:	fc 93       	st	X, r31
     374:	ee 93       	st	-X, r30
     376:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     378:	8e e0       	ldi	r24, 0x0E	; 14
     37a:	df 01       	movw	r26, r30
     37c:	1d 92       	st	X+, r1
     37e:	8a 95       	dec	r24
     380:	e9 f7       	brne	.-6      	; 0x37c <SetupHardware+0x76>
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	83 83       	std	Z+3, r24	; 0x03
     386:	8f e0       	ldi	r24, 0x0F	; 15
     388:	99 e0       	ldi	r25, 0x09	; 9
     38a:	91 87       	std	Z+9, r25	; 0x09
     38c:	80 87       	std	Z+8, r24	; 0x08
     38e:	88 e1       	ldi	r24, 0x18	; 24
     390:	99 e0       	ldi	r25, 0x09	; 9
     392:	93 87       	std	Z+11, r25	; 0x0b
     394:	82 87       	std	Z+10, r24	; 0x0a
     396:	08 95       	ret

00000398 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     398:	b6 df       	rcall	.-148    	; 0x306 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     39a:	82 e9       	ldi	r24, 0x92	; 146
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	8a d7       	rcall	.+3860   	; 0x12b4 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3a0:	80 e1       	ldi	r24, 0x10	; 16
     3a2:	ac df       	rcall	.-168    	; 0x2fc <LEDs_SetAllLEDs>
	sei();
     3a4:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
     3a6:	2d d7       	rcall	.+3674   	; 0x1202 <USB_USBTask>
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <main+0xe>

000003aa <EVENT_USB_Host_DeviceAttached>:
     3aa:	85 e7       	ldi	r24, 0x75	; 117
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	82 d7       	rcall	.+3844   	; 0x12b4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	a4 cf       	rjmp	.-184    	; 0x2fc <LEDs_SetAllLEDs>

000003b4 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3b4:	86 e5       	ldi	r24, 0x56	; 86
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	7d d7       	rcall	.+3834   	; 0x12b4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3ba:	80 e1       	ldi	r24, 0x10	; 16
     3bc:	9f cf       	rjmp	.-194    	; 0x2fc <LEDs_SetAllLEDs>

000003be <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     3c6:	1f 92       	push	r1
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Config Data.\r\n"));
     3cc:	8f e3       	ldi	r24, 0x3F	; 63
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	71 d7       	rcall	.+3810   	; 0x12b4 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3d2:	3b d1       	rcall	.+630    	; 0x64a <ProcessConfigurationDescriptor>
     3d4:	18 2f       	mov	r17, r24
     3d6:	88 23       	and	r24, r24
     3d8:	91 f0       	breq	.+36     	; 0x3fe <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     3da:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     3de:	85 e1       	ldi	r24, 0x15	; 21
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
     3e4:	8e ef       	ldi	r24, 0xFE	; 254
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	65 d7       	rcall	.+3786   	; 0x12b4 <puts_P>
     3ea:	1f 92       	push	r1

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3ec:	1f 93       	push	r17
     3ee:	84 ee       	ldi	r24, 0xE4	; 228
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	9f 93       	push	r25
     3f4:	8f 93       	push	r24
     3f6:	37 d7       	rcall	.+3694   	; 0x1266 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3f8:	80 e9       	ldi	r24, 0x90	; 144
     3fa:	80 df       	rcall	.-256    	; 0x2fc <LEDs_SetAllLEDs>
     3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	c6 d6       	rcall	.+3468   	; 0x118e <USB_Host_SetDeviceConfiguration>
     402:	88 23       	and	r24, r24
     404:	29 f0       	breq	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     406:	1f 92       	push	r1
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     408:	8f 93       	push	r24
     40a:	81 ea       	ldi	r24, 0xA1	; 161
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	f1 cf       	rjmp	.-30     	; 0x3f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}
	
	if ((ErrorCode = USB_Host_SetInterfaceAltSetting(StreamingInterfaceIndex,
     410:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <StreamingInterfaceAltSetting>
     414:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <StreamingInterfaceIndex>
     418:	e1 d6       	rcall	.+3522   	; 0x11dc <USB_Host_SetInterfaceAltSetting>
     41a:	88 23       	and	r24, r24
     41c:	81 f0       	breq	.+32     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	                                                 StreamingInterfaceAltSetting)) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Could not set alternative streaming interface setting.\r\n"
     41e:	1f 92       	push	r1
     420:	8f 93       	push	r24
     422:	8a e4       	ldi	r24, 0x4A	; 74
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     42a:	1d d7       	rcall	.+3642   	; 0x1266 <printf_P>
     42c:	80 e9       	ldi	r24, 0x90	; 144
     42e:	66 df       	rcall	.-308    	; 0x2fc <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	ad d6       	rcall	.+3418   	; 0x118e <USB_Host_SetDeviceConfiguration>
     434:	0f 90       	pop	r0
		return;
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	41 c0       	rjmp	.+130    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     43e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
	}

	USB_ControlRequest = (USB_Request_Header_t)
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	22 e2       	ldi	r18, 0x22	; 34
     446:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <USB_ControlRequest>
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <USB_ControlRequest+0x1>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	31 e0       	ldi	r19, 0x01	; 1
     454:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <USB_ControlRequest+0x3>
     458:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <USB_ControlRequest+0x2>
     45c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <USB_ControlRequest+0x5>
     460:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_ControlRequest+0x4>
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <USB_ControlRequest+0x7>
     46c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <USB_ControlRequest+0x6>
     470:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			.wValue        = (AUDIO_EPCONTROL_SamplingFreq << 8),
			.wIndex        = StreamingEndpointAddress,
			.wLength       = sizeof(USB_Audio_SampleFreq_t),
		};
		
	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     474:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     478:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	9a 83       	std	Y+2, r25	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     480:	ab 83       	std	Y+3, r26	; 0x03

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Set the sample rate on the streaming interface endpoint */
	if ((ErrorCode = USB_Host_SendControlRequest(&SampleRate)) != HOST_SENDCONTROL_Successful)
     482:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     486:	ce 01       	movw	r24, r28
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	8b d5       	rcall	.+2838   	; 0xfa2 <USB_Host_SendControlRequest>
     48c:	88 23       	and	r24, r24
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     48e:	29 f0       	breq	.+10     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     490:	80 e9       	ldi	r24, 0x90	; 144
     492:	34 df       	rcall	.-408    	; 0x2fc <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);		
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	7b d6       	rcall	.+3318   	; 0x118e <USB_Host_SetDeviceConfiguration>
     498:	13 c0       	rjmp	.+38     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		return;
     49a:	82 e0       	ldi	r24, 0x02	; 2
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     49c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     4a0:	93 e1       	ldi	r25, 0x13	; 19
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     4a2:	97 bd       	out	0x27, r25	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed	
     4a4:	84 bd       	out	0x24, r24	; 36

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     4a6:	85 bd       	out	0x25, r24	; 37

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     4a8:	3e 9a       	sbi	0x07, 6	; 7
     4aa:	81 ec       	ldi	r24, 0xC1	; 193
     4ac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     4b0:	89 e0       	ldi	r24, 0x09	; 9
     4b2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	
	puts_P(PSTR("Microphone Enumerated.\r\n"));
     4b6:	81 e3       	ldi	r24, 0x31	; 49
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	fc d6       	rcall	.+3576   	; 0x12b4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     4bc:	80 e6       	ldi	r24, 0x60	; 96
     4be:	1e df       	rcall	.-452    	; 0x2fc <LEDs_SetAllLEDs>
     4c0:	0f 90       	pop	r0
}
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	08 95       	ret

000004ce <EVENT_USB_Host_HostError>:
     4ce:	c8 2f       	mov	r28, r24

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     4d0:	87 d3       	rcall	.+1806   	; 0xbe0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4d2:	1f 92       	push	r1
     4d4:	cf 93       	push	r28
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	c3 d6       	rcall	.+3462   	; 0x1266 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4e0:	80 e9       	ldi	r24, 0x90	; 144
     4e2:	0c df       	rcall	.-488    	; 0x2fc <LEDs_SetAllLEDs>
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	ff cf       	rjmp	.-2      	; 0x4ec <EVENT_USB_Host_HostError+0x1e>

000004ee <EVENT_USB_Host_DeviceEnumerationFailed>:
     4ee:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4f2:	1f 92       	push	r1
     4f4:	9f 93       	push	r25
     4f6:	1f 92       	push	r1
     4f8:	6f 93       	push	r22
     4fa:	1f 92       	push	r1
     4fc:	8f 93       	push	r24
     4fe:	8c ea       	ldi	r24, 0xAC	; 172
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	af d6       	rcall	.+3422   	; 0x1266 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     508:	8d b7       	in	r24, 0x3d	; 61
     50a:	9e b7       	in	r25, 0x3e	; 62
     50c:	08 96       	adiw	r24, 0x08	; 8
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	9e bf       	out	0x3e, r25	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	8d bf       	out	0x3d, r24	; 61
     518:	80 e9       	ldi	r24, 0x90	; 144
     51a:	f0 ce       	rjmp	.-544    	; 0x2fc <LEDs_SetAllLEDs>

0000051c <__vector_21>:
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	0f 92       	push	r0
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	cf 93       	push	r28
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     544:	c0 91 a7 00 	lds	r28, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     548:	c7 70       	andi	r28, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     550:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     554:	8f 7b       	andi	r24, 0xBF	; 191
     556:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     55a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

	Pipe_SelectPipe(AUDIO_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check if the current pipe can be read from (contains a packet) and the device is sending data */
	if (Pipe_IsINReceived())
     55e:	80 ff       	sbrs	r24, 0
     560:	28 c0       	rjmp	.+80     	; 0x5b2 <__vector_21+0x96>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     562:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				Data.Bytes[1] = UPDATX;
     566:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     56a:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Pipe_Read_16_LE() >> 8);

		/* Check to see if the bank is now empty */
		if (!(Pipe_IsReadWriteAllowed()))
     56e:	95 fd       	sbrc	r25, 5
     570:	05 c0       	rjmp	.+10     	; 0x57c <__vector_21+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     572:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     576:	9e 77       	andi	r25, 0x7E	; 126
     578:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			/* Acknowledge the packet, clear the bank ready for the next packet */
			Pipe_ClearIN();
		}

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     57c:	28 2f       	mov	r18, r24
     57e:	08 2e       	mov	r0, r24
     580:	00 0c       	add	r0, r0
     582:	33 0b       	sbc	r19, r19
     584:	20 58       	subi	r18, 0x80	; 128
     586:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     58a:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     58e:	81 31       	cpi	r24, 0x11	; 17
     590:	44 f4       	brge	.+16     	; 0x5a2 <__vector_21+0x86>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     592:	89 30       	cpi	r24, 0x09	; 9
     594:	44 f4       	brge	.+16     	; 0x5a6 <__vector_21+0x8a>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     596:	85 30       	cpi	r24, 0x05	; 5
     598:	44 f4       	brge	.+16     	; 0x5aa <__vector_21+0x8e>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	44 f0       	brlt	.+16     	; 0x5ae <__vector_21+0x92>
		  LEDMask = (LEDS_LED1);
     59e:	80 e1       	ldi	r24, 0x10	; 16
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <__vector_21+0x94>

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     5a2:	80 ef       	ldi	r24, 0xF0	; 240
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__vector_21+0x94>
		else if (Sample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     5a6:	80 eb       	ldi	r24, 0xB0	; 176
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <__vector_21+0x94>
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     5aa:	80 e3       	ldi	r24, 0x30	; 48
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <__vector_21+0x94>
		}

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));

		uint8_t LEDMask = LEDS_NO_LEDS;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
		  LEDMask = (LEDS_LED1);

		LEDs_SetAllLEDs(LEDMask);
     5b0:	a5 de       	rcall	.-694    	; 0x2fc <LEDs_SetAllLEDs>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5b2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     5b6:	80 64       	ori	r24, 0x40	; 64
     5b8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     5bc:	c0 93 a7 00 	sts	0x00A7, r28	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
	
	Pipe_Freeze();
	Pipe_SelectPipe(PrevPipe);
}
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	cf 91       	pop	r28
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <DComp_NextAudioControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioControlInterface(void* CurrentDescriptor)
{
     5e8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     5ea:	81 81       	ldd	r24, Z+1	; 0x01
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	51 f4       	brne	.+20     	; 0x604 <DComp_NextAudioControlInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     5f0:	85 81       	ldd	r24, Z+5	; 0x05
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	39 f4       	brne	.+14     	; 0x604 <DComp_NextAudioControlInterface+0x1c>
     5f6:	86 81       	ldd	r24, Z+6	; 0x06
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	21 f4       	brne	.+8      	; 0x604 <DComp_NextAudioControlInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
     5fc:	87 81       	ldd	r24, Z+7	; 0x07
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
     5fe:	81 11       	cpse	r24, r1
     600:	01 c0       	rjmp	.+2      	; 0x604 <DComp_NextAudioControlInterface+0x1c>
     602:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     604:	82 e0       	ldi	r24, 0x02	; 2
}
     606:	08 95       	ret

00000608 <DComp_NextAudioStreamInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioStreamInterface(void* CurrentDescriptor)
{
     608:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	84 30       	cpi	r24, 0x04	; 4
     60e:	59 f4       	brne	.+22     	; 0x626 <DComp_NextAudioStreamInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     610:	85 81       	ldd	r24, Z+5	; 0x05
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	41 f4       	brne	.+16     	; 0x626 <DComp_NextAudioStreamInterface+0x1e>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
     616:	86 81       	ldd	r24, Z+6	; 0x06

	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	29 f4       	brne	.+10     	; 0x626 <DComp_NextAudioStreamInterface+0x1e>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
     61c:	97 81       	ldd	r25, Z+7	; 0x07
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
     61e:	91 11       	cpse	r25, r1
     620:	03 c0       	rjmp	.+6      	; 0x628 <DComp_NextAudioStreamInterface+0x20>
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     626:	82 e0       	ldi	r24, 0x02	; 2
}
     628:	08 95       	ret

0000062a <DComp_NextAudioInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
     62a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	95 30       	cpi	r25, 0x05	; 5
     630:	31 f4       	brne	.+12     	; 0x63e <DComp_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
     632:	83 81       	ldd	r24, Z+3	; 0x03
     634:	83 70       	andi	r24, 0x03	; 3
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	31 f4       	brne	.+12     	; 0x646 <DComp_NextAudioInterfaceDataEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
     63e:	94 30       	cpi	r25, 0x04	; 4
     640:	11 f4       	brne	.+4      	; 0x646 <DComp_NextAudioInterfaceDataEndpoint+0x1c>
	{
		return DESCRIPTOR_SEARCH_Fail;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     646:	82 e0       	ldi	r24, 0x02	; 2
}
     648:	08 95       	ret

0000064a <ProcessConfigurationDescriptor>:
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	c4 50       	subi	r28, 0x04	; 4
     660:	d2 40       	sbci	r29, 0x02	; 2
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     66c:	ae 01       	movw	r20, r28
     66e:	4f 5f       	subi	r20, 0xFF	; 255
     670:	5f 4f       	sbci	r21, 0xFF	; 255
     672:	cd 5f       	subi	r28, 0xFD	; 253
     674:	dd 4f       	sbci	r29, 0xFD	; 253
     676:	59 83       	std	Y+1, r21	; 0x01
     678:	48 83       	st	Y, r20
     67a:	c3 50       	subi	r28, 0x03	; 3
     67c:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	32 e0       	ldi	r19, 0x02	; 2
     682:	be 01       	movw	r22, r28
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7d 4f       	sbci	r23, 0xFD	; 253
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	d9 d3       	rcall	.+1970   	; 0xe3e <USB_Host_GetDeviceConfigDescriptor>
     68c:	85 30       	cpi	r24, 0x05	; 5
     68e:	09 f4       	brne	.+2      	; 0x692 <ProcessConfigurationDescriptor+0x48>
     690:	70 c0       	rjmp	.+224    	; 0x772 <ProcessConfigurationDescriptor+0x128>
     692:	86 30       	cpi	r24, 0x06	; 6
     694:	39 f0       	breq	.+14     	; 0x6a4 <ProcessConfigurationDescriptor+0x5a>
     696:	81 11       	cpse	r24, r1
     698:	08 c0       	rjmp	.+16     	; 0x6aa <ProcessConfigurationDescriptor+0x60>
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	c1 2c       	mov	r12, r1
     6a0:	d1 2c       	mov	r13, r1
     6a2:	3f c0       	rjmp	.+126    	; 0x722 <ProcessConfigurationDescriptor+0xd8>
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6a4:	33 e0       	ldi	r19, 0x03	; 3
     6a6:	f3 2e       	mov	r15, r19
     6a8:	66 c0       	rjmp	.+204    	; 0x776 <ProcessConfigurationDescriptor+0x12c>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6aa:	ff 24       	eor	r15, r15
     6ac:	f3 94       	inc	r15
     6ae:	63 c0       	rjmp	.+198    	; 0x776 <ProcessConfigurationDescriptor+0x12c>

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6b0:	45 e1       	ldi	r20, 0x15	; 21
     6b2:	53 e0       	ldi	r21, 0x03	; 3
     6b4:	be 01       	movw	r22, r28
     6b6:	6d 5f       	subi	r22, 0xFD	; 253
     6b8:	7d 4f       	sbci	r23, 0xFD	; 253
     6ba:	ce 01       	movw	r24, r28
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	9d 4f       	sbci	r25, 0xFD	; 253
     6c0:	17 d4       	rcall	.+2094   	; 0xef0 <USB_GetNextDescriptorComp>
     6c2:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     6c4:	88 23       	and	r24, r24
     6c6:	a9 f1       	breq	.+106    	; 0x732 <ProcessConfigurationDescriptor+0xe8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6c8:	44 e0       	ldi	r20, 0x04	; 4
     6ca:	53 e0       	ldi	r21, 0x03	; 3
     6cc:	be 01       	movw	r22, r28
     6ce:	6d 5f       	subi	r22, 0xFD	; 253
     6d0:	7d 4f       	sbci	r23, 0xFD	; 253
     6d2:	ce 01       	movw	r24, r28
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	9d 4f       	sbci	r25, 0xFD	; 253
     6d8:	0b d4       	rcall	.+2070   	; 0xef0 <USB_GetNextDescriptorComp>
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
     6da:	88 23       	and	r24, r24
     6dc:	e1 f0       	breq	.+56     	; 0x716 <ProcessConfigurationDescriptor+0xcc>
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
			                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6de:	44 ef       	ldi	r20, 0xF4	; 244
     6e0:	52 e0       	ldi	r21, 0x02	; 2
     6e2:	be 01       	movw	r22, r28
     6e4:	6d 5f       	subi	r22, 0xFD	; 253
     6e6:	7d 4f       	sbci	r23, 0xFD	; 253
     6e8:	ce 01       	movw	r24, r28
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	9d 4f       	sbci	r25, 0xFD	; 253
     6ee:	00 d4       	rcall	.+2048   	; 0xef0 <USB_GetNextDescriptorComp>
     6f0:	81 11       	cpse	r24, r1
     6f2:	1c c0       	rjmp	.+56     	; 0x72c <ProcessConfigurationDescriptor+0xe2>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);			
     6f4:	cd 5f       	subi	r28, 0xFD	; 253
     6f6:	dd 4f       	sbci	r29, 0xFD	; 253
     6f8:	c8 80       	ld	r12, Y
     6fa:	d9 80       	ldd	r13, Y+1	; 0x01
     6fc:	c3 50       	subi	r28, 0x03	; 3
     6fe:	d2 40       	sbci	r29, 0x02	; 2

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     700:	44 e0       	ldi	r20, 0x04	; 4
     702:	53 e0       	ldi	r21, 0x03	; 3
     704:	be 01       	movw	r22, r28
     706:	6d 5f       	subi	r22, 0xFD	; 253
     708:	7d 4f       	sbci	r23, 0xFD	; 253
     70a:	ce 01       	movw	r24, r28
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	9d 4f       	sbci	r25, 0xFD	; 253
     710:	ef d3       	rcall	.+2014   	; 0xef0 <USB_GetNextDescriptorComp>
     712:	81 11       	cpse	r24, r1
     714:	0b c0       	rjmp	.+22     	; 0x72c <ProcessConfigurationDescriptor+0xe2>
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     716:	cd 5f       	subi	r28, 0xFD	; 253
     718:	dd 4f       	sbci	r29, 0xFD	; 253
     71a:	08 81       	ld	r16, Y
     71c:	19 81       	ldd	r17, Y+1	; 0x01
     71e:	c3 50       	subi	r28, 0x03	; 3
     720:	d2 40       	sbci	r29, 0x02	; 2
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     722:	c1 14       	cp	r12, r1
     724:	d1 04       	cpc	r13, r1
     726:	09 f0       	breq	.+2      	; 0x72a <ProcessConfigurationDescriptor+0xe0>
     728:	c3 cf       	rjmp	.-122    	; 0x6b0 <ProcessConfigurationDescriptor+0x66>
     72a:	d9 cf       	rjmp	.-78     	; 0x6de <ProcessConfigurationDescriptor+0x94>
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                              DComp_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     72c:	24 e0       	ldi	r18, 0x04	; 4
     72e:	f2 2e       	mov	r15, r18
     730:	22 c0       	rjmp	.+68     	; 0x776 <ProcessConfigurationDescriptor+0x12c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     732:	cd 5f       	subi	r28, 0xFD	; 253
     734:	dd 4f       	sbci	r29, 0xFD	; 253
     736:	e8 81       	ld	r30, Y
     738:	f9 81       	ldd	r31, Y+1	; 0x01
     73a:	c3 50       	subi	r28, 0x03	; 3
     73c:	d2 40       	sbci	r29, 0x02	; 2

		/* Save the endpoint if it is an IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     73e:	22 81       	ldd	r18, Z+2	; 0x02
     740:	27 ff       	sbrs	r18, 7
     742:	ef cf       	rjmp	.-34     	; 0x722 <ProcessConfigurationDescriptor+0xd8>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     744:	30 97       	sbiw	r30, 0x00	; 0
     746:	69 f3       	breq	.-38     	; 0x722 <ProcessConfigurationDescriptor+0xd8>
		/* Save the endpoint if it is an IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     748:	d8 01       	movw	r26, r16
     74a:	12 96       	adiw	r26, 0x02	; 2
     74c:	8c 91       	ld	r24, X
     74e:	12 97       	sbiw	r26, 0x02	; 2
     750:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <StreamingInterfaceIndex>
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     754:	13 96       	adiw	r26, 0x03	; 3
     756:	8c 91       	ld	r24, X
     758:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <StreamingInterfaceAltSetting>
	StreamingEndpointAddress     = DataINEndpoint->EndpointAddress;
     75c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>

	/* Configure the Audio data IN pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_IN_PIPE, EP_TYPE_ISOCHRONOUS, PIPE_TOKEN_IN,
     760:	04 81       	ldd	r16, Z+4	; 0x04
     762:	15 81       	ldd	r17, Z+5	; 0x05
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	e9 2e       	mov	r14, r25
     768:	40 e1       	ldi	r20, 0x10	; 16
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	c8 d1       	rcall	.+912    	; 0xb00 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_DOUBLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     770:	02 c0       	rjmp	.+4      	; 0x776 <ProcessConfigurationDescriptor+0x12c>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	f8 2e       	mov	r15, r24
	Pipe_ConfigurePipe(AUDIO_DATA_IN_PIPE, EP_TYPE_ISOCHRONOUS, PIPE_TOKEN_IN,
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_DOUBLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     776:	8f 2d       	mov	r24, r15
     778:	cc 5f       	subi	r28, 0xFC	; 252
     77a:	dd 4f       	sbci	r29, 0xFD	; 253
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret

00000798 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     798:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     79c:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     79e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7a2:	9d 7f       	andi	r25, 0xFD	; 253
     7a4:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7a8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7ac:	92 60       	ori	r25, 0x02	; 2
     7ae:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7b2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7b6:	91 fd       	sbrc	r25, 1
     7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ba:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7be:	91 60       	ori	r25, 0x01	; 1
     7c0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     7c4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7c8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7cc:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7ce:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7d2:	2f 7d       	andi	r18, 0xDF	; 223
     7d4:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7d8:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7dc:	2f 7d       	andi	r18, 0xDF	; 223
     7de:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7e2:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7e4:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7e8:	35 ff       	sbrs	r19, 5
     7ea:	0b c0       	rjmp	.+22     	; 0x802 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7ec:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7f0:	2f 7d       	andi	r18, 0xDF	; 223
     7f2:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7f6:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7fa:	2d 7f       	andi	r18, 0xFD	; 253
     7fc:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     800:	08 c0       	rjmp	.+16     	; 0x812 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     802:	ef ec       	ldi	r30, 0xCF	; 207
     804:	f7 e0       	ldi	r31, 0x07	; 7
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <USB_Host_ResetDevice+0x6e>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <USB_Host_ResetDevice+0x74>
     80c:	00 00       	nop
     80e:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     810:	49 f7       	brne	.-46     	; 0x7e4 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     812:	99 23       	and	r25, r25
     814:	29 f0       	breq	.+10     	; 0x820 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     816:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     81a:	90 62       	ori	r25, 0x20	; 32
     81c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     820:	81 11       	cpse	r24, r1
     822:	05 c0       	rjmp	.+10     	; 0x82e <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     824:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     828:	8e 7f       	andi	r24, 0xFE	; 254
     82a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     82e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     832:	82 60       	ori	r24, 0x02	; 2
     834:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     838:	08 95       	ret

0000083a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     83a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     83e:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     840:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     844:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     846:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     84a:	3f 7d       	andi	r19, 0xDF	; 223
     84c:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     850:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     854:	3f 7d       	andi	r19, 0xDF	; 223
     856:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     85a:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     85e:	31 60       	ori	r19, 0x01	; 1
     860:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     864:	88 23       	and	r24, r24
     866:	39 f1       	breq	.+78     	; 0x8b6 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     868:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     86c:	35 ff       	sbrs	r19, 5
     86e:	06 c0       	rjmp	.+12     	; 0x87c <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     870:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     874:	3f 7d       	andi	r19, 0xDF	; 223
     876:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     87a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     87c:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <USB_HostState>
     880:	31 30       	cpi	r19, 0x01	; 1
     882:	c1 f0       	breq	.+48     	; 0x8b4 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     884:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     888:	34 ff       	sbrs	r19, 4
     88a:	09 c0       	rjmp	.+18     	; 0x89e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     88c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     890:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     894:	8f 7e       	andi	r24, 0xEF	; 239
     896:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     89a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     89c:	0c c0       	rjmp	.+24     	; 0x8b6 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     89e:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     8a2:	31 ff       	sbrs	r19, 1
     8a4:	df cf       	rjmp	.-66     	; 0x864 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8a6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     8aa:	8d 7f       	andi	r24, 0xFD	; 253
     8ac:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     8b0:	83 e0       	ldi	r24, 0x03	; 3

			break;
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     8b4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     8b6:	21 11       	cpse	r18, r1
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8ba:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8be:	2e 7f       	andi	r18, 0xFE	; 254
     8c0:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     8c4:	99 23       	and	r25, r25
     8c6:	29 f0       	breq	.+10     	; 0x8d2 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8c8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     8cc:	90 62       	ori	r25, 0x20	; 32
     8ce:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     8d2:	08 95       	ret

000008d4 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     8d4:	ef 92       	push	r14
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	28 97       	sbiw	r28, 0x08	; 8
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8ee:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <USB_HostState>
     8f2:	8e 2f       	mov	r24, r30
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	8a 30       	cpi	r24, 0x0A	; 10
     8f8:	91 05       	cpc	r25, r1
     8fa:	08 f0       	brcs	.+2      	; 0x8fe <USB_Host_ProcessNextHostState+0x2a>
     8fc:	f5 c0       	rjmp	.+490    	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
     8fe:	fc 01       	movw	r30, r24
     900:	e4 5b       	subi	r30, 0xB4	; 180
     902:	ff 4f       	sbci	r31, 0xFF	; 255
     904:	a7 c4       	rjmp	.+2382   	; 0x1254 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     906:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <WaitMSRemaining.2935>
     90a:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <WaitMSRemaining.2935+0x1>
     90e:	01 15       	cp	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	09 f4       	brne	.+2      	; 0x916 <USB_Host_ProcessNextHostState+0x42>
     914:	e9 c0       	rjmp	.+466    	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 df       	rcall	.-224    	; 0x83a <USB_Host_WaitMS>
     91a:	88 23       	and	r24, r24
     91c:	31 f0       	breq	.+12     	; 0x92a <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     91e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <PostWaitState.2936>
     922:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     926:	91 e0       	ldi	r25, 0x01	; 1
					break;
     928:	d1 c0       	rjmp	.+418    	; 0xacc <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     92a:	01 50       	subi	r16, 0x01	; 1
     92c:	11 09       	sbc	r17, r1
     92e:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <WaitMSRemaining.2935+0x1>
     932:	00 93 18 01 	sts	0x0118, r16	; 0x800118 <WaitMSRemaining.2935>
     936:	01 2b       	or	r16, r17
     938:	09 f0       	breq	.+2      	; 0x93c <USB_Host_ProcessNextHostState+0x68>
     93a:	d6 c0       	rjmp	.+428    	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     93c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <PostWaitState.2936>
     940:	07 c0       	rjmp	.+14     	; 0x950 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     942:	88 ee       	ldi	r24, 0xE8	; 232
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <WaitMSRemaining.2935+0x1>
     94a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_HostState>
			break;
     954:	c9 c0       	rjmp	.+402    	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     956:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <WaitMSRemaining.2935>
     95a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <WaitMSRemaining.2935+0x1>
     95e:	9c 01       	movw	r18, r24
     960:	21 50       	subi	r18, 0x01	; 1
     962:	31 09       	sbc	r19, r1
     964:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <WaitMSRemaining.2935+0x1>
     968:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <WaitMSRemaining.2935>
     96c:	89 2b       	or	r24, r25
     96e:	39 f0       	breq	.+14     	; 0x97e <USB_Host_ProcessNextHostState+0xaa>
     970:	8f ec       	ldi	r24, 0xCF	; 207
     972:	97 e0       	ldi	r25, 0x07	; 7
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <USB_Host_ProcessNextHostState+0xa0>
     978:	00 c0       	rjmp	.+0      	; 0x97a <USB_Host_ProcessNextHostState+0xa6>
     97a:	00 00       	nop
     97c:	b5 c0       	rjmp	.+362    	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     97e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     980:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     984:	80 61       	ori	r24, 0x10	; 16
     986:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     98a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     98e:	8b 7f       	andi	r24, 0xFB	; 251
     990:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     994:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     998:	80 61       	ori	r24, 0x10	; 16
     99a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     99e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9a2:	82 60       	ori	r24, 0x02	; 2
     9a4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	d2 cf       	rjmp	.-92     	; 0x950 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9ac:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9b0:	80 ff       	sbrs	r24, 0
     9b2:	9a c0       	rjmp	.+308    	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     9b4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9b8:	8e 7f       	andi	r24, 0xFE	; 254
     9ba:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9be:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9c2:	8d 7f       	andi	r24, 0xFD	; 253
     9c4:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     9c8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     9cc:	8d 7f       	andi	r24, 0xFD	; 253
     9ce:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     9d2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     9d6:	82 60       	ori	r24, 0x02	; 2
     9d8:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9dc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     9e6:	e8 d0       	rcall	.+464    	; 0xbb8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     9e8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_HostState>
     9ec:	84 e6       	ldi	r24, 0x64	; 100
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <WaitMSRemaining.2935+0x1>
     9f4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <WaitMSRemaining.2935>
     9f8:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     9fa:	5c c0       	rjmp	.+184    	; 0xab4 <USB_Host_ProcessNextHostState+0x1e0>
     9fc:	cd de       	rcall	.-614    	; 0x798 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     9fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_HostState>
     a02:	88 ec       	ldi	r24, 0xC8	; 200
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <WaitMSRemaining.2935+0x1>
     a0a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <WaitMSRemaining.2935>
     a0e:	86 e0       	ldi	r24, 0x06	; 6
     a10:	51 c0       	rjmp	.+162    	; 0xab4 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a12:	e1 2c       	mov	r14, r1
     a14:	00 e4       	ldi	r16, 0x40	; 64
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	6f d0       	rcall	.+222    	; 0xb00 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a22:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a26:	87 fd       	sbrc	r24, 7
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a2c:	94 e0       	ldi	r25, 0x04	; 4
     a2e:	4e c0       	rjmp	.+156    	; 0xacc <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a30:	87 e0       	ldi	r24, 0x07	; 7
     a32:	8e cf       	rjmp	.-228    	; 0x950 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	e4 e0       	ldi	r30, 0x04	; 4
     a38:	f1 e0       	ldi	r31, 0x01	; 1
     a3a:	ac e1       	ldi	r26, 0x1C	; 28
     a3c:	b1 e0       	ldi	r27, 0x01	; 1
     a3e:	01 90       	ld	r0, Z+
     a40:	0d 92       	st	X+, r0
     a42:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a44:	e1 f7       	brne	.-8      	; 0xa3e <USB_Host_ProcessNextHostState+0x16a>
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	ab d2       	rcall	.+1366   	; 0xfa2 <USB_Host_SendControlRequest>
     a4c:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a4e:	3d c0       	rjmp	.+122    	; 0xaca <USB_Host_ProcessNextHostState+0x1f6>
     a50:	88 85       	ldd	r24, Y+8	; 0x08
     a52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     a56:	a0 de       	rcall	.-704    	; 0x798 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a58:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_HostState>
     a5c:	88 ec       	ldi	r24, 0xC8	; 200
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <WaitMSRemaining.2935+0x1>
     a64:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <WaitMSRemaining.2935>
     a68:	88 e0       	ldi	r24, 0x08	; 8
     a6a:	24 c0       	rjmp	.+72     	; 0xab4 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a6c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	e1 2c       	mov	r14, r1
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	41 d0       	rcall	.+130    	; 0xb00 <Pipe_ConfigurePipe>
     a7e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a82:	87 ff       	sbrs	r24, 7
     a84:	d2 cf       	rjmp	.-92     	; 0xa2a <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	ec e0       	ldi	r30, 0x0C	; 12
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	ac e1       	ldi	r26, 0x1C	; 28
     a8e:	b1 e0       	ldi	r27, 0x01	; 1
     a90:	01 90       	ld	r0, Z+
     a92:	0d 92       	st	X+, r0
     a94:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a96:	e1 f7       	brne	.-8      	; 0xa90 <USB_Host_ProcessNextHostState+0x1bc>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	82 d2       	rcall	.+1284   	; 0xfa2 <USB_Host_SendControlRequest>
     a9e:	81 11       	cpse	r24, r1
     aa0:	14 c0       	rjmp	.+40     	; 0xaca <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     aa2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_HostState>
     aa6:	84 e6       	ldi	r24, 0x64	; 100
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <WaitMSRemaining.2935+0x1>
     aae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <WaitMSRemaining.2935>
     ab2:	89 e0       	ldi	r24, 0x09	; 9
     ab4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ab8:	17 c0       	rjmp	.+46     	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     ac6:	7b dc       	rcall	.-1802   	; 0x3be <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     ac8:	0f c0       	rjmp	.+30     	; 0xae8 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     ad0:	21 30       	cpi	r18, 0x01	; 1
     ad2:	51 f0       	breq	.+20     	; 0xae8 <USB_Host_ProcessNextHostState+0x214>
     ad4:	68 2f       	mov	r22, r24
     ad6:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ad8:	0a dd       	rcall	.-1516   	; 0x4ee <EVENT_USB_Host_DeviceEnumerationFailed>
     ada:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     ae4:	67 dc       	rcall	.-1842   	; 0x3b4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ae6:	94 d0       	rcall	.+296    	; 0xc10 <USB_ResetInterface>
     ae8:	28 96       	adiw	r28, 0x08	; 8
	}
}
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ef 90       	pop	r14
     afe:	08 95       	ret

00000b00 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b00:	ef 92       	push	r14
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b06:	2f 70       	andi	r18, 0x0F	; 15
     b08:	42 2b       	or	r20, r18
     b0a:	90 e4       	ldi	r25, 0x40	; 64
     b0c:	69 9f       	mul	r22, r25
     b0e:	b0 01       	movw	r22, r0
     b10:	11 24       	eor	r1, r1
     b12:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b14:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b16:	2e 2d       	mov	r18, r14
     b18:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b1a:	37 30       	cpi	r19, 0x07	; 7
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <Pipe_ConfigurePipe+0x20>
     b1e:	45 c0       	rjmp	.+138    	; 0xbaa <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b20:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     b24:	38 13       	cpse	r19, r24
     b26:	13 c0       	rjmp	.+38     	; 0xb4e <Pipe_ConfigurePipe+0x4e>
     b28:	48 e0       	ldi	r20, 0x08	; 8
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b2e:	40 17       	cp	r20, r16
     b30:	51 07       	cpc	r21, r17
     b32:	38 f0       	brcs	.+14     	; 0xb42 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b34:	92 95       	swap	r25
     b36:	90 7f       	andi	r25, 0xF0	; 240
     b38:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b3a:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b3c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	0e c0       	rjmp	.+28     	; 0xb5e <Pipe_ConfigurePipe+0x5e>
     b42:	95 30       	cpi	r25, 0x05	; 5
     b44:	b9 f3       	breq	.-18     	; 0xb34 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     b46:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	f0 cf       	rjmp	.-32     	; 0xb2e <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b4e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     b52:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     b56:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     b5a:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b5e:	91 fd       	sbrc	r25, 1
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b62:	3f 5f       	subi	r19, 0xFF	; 255
     b64:	da cf       	rjmp	.-76     	; 0xb1a <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b66:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b6a:	4e 7f       	andi	r20, 0xFE	; 254
     b6c:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b70:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     b74:	4d 7f       	andi	r20, 0xFD	; 253
     b76:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b7a:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b7e:	41 60       	ori	r20, 0x01	; 1
     b80:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b84:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     b88:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     b8c:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     b90:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b94:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b98:	90 62       	ori	r25, 0x20	; 32
     b9a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b9e:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     ba2:	97 fd       	sbrc	r25, 7
     ba4:	de cf       	rjmp	.-68     	; 0xb62 <Pipe_ConfigurePipe+0x62>
		  return false;		
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     baa:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     bae:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ef 90       	pop	r14
     bb6:	08 95       	ret

00000bb8 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     bb8:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     bc2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     bc6:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     bca:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bce:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     bd2:	9e 7f       	andi	r25, 0xFE	; 254
     bd4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	87 30       	cpi	r24, 0x07	; 7
     bdc:	81 f7       	brne	.-32     	; 0xbbe <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     bde:	08 95       	ret

00000be0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     be0:	70 d0       	rcall	.+224    	; 0xcc2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     be2:	77 d0       	rcall	.+238    	; 0xcd2 <USB_INT_ClearAllInterrupts>
     be4:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	81 60       	ori	r24, 0x01	; 1
     bec:	80 83       	st	Z, r24
     bee:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 77       	andi	r24, 0x7F	; 127
     bf6:	80 83       	st	Z, r24
     bf8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bfa:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	8c 91       	ld	r24, X
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	8c 93       	st	X, r24
     c04:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c06:	8f 7e       	andi	r24, 0xEF	; 239
     c08:	80 83       	st	Z, r24
     c0a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c0e:	08 95       	ret

00000c10 <USB_ResetInterface>:
     c10:	58 d0       	rcall	.+176    	; 0xcc2 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     c12:	5f d0       	rcall	.+190    	; 0xcd2 <USB_INT_ClearAllInterrupts>
     c14:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c18:	8f 77       	andi	r24, 0x7F	; 127
     c1a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c1e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     c22:	80 68       	ori	r24, 0x80	; 128
     c24:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c2c:	8f 7d       	andi	r24, 0xDF	; 223
     c2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c32:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c36:	8f 77       	andi	r24, 0x7F	; 127
     c38:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c3c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c3e:	89 bd       	out	0x29, r24	; 41
     c40:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c42:	89 bd       	out	0x29, r24	; 41
     c44:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c46:	00 fe       	sbrs	r0, 0
     c48:	fd cf       	rjmp	.-6      	; 0xc44 <USB_ResetInterface+0x34>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c4c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_HostState>
     c50:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     c54:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c5a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c5e:	80 64       	ori	r24, 0x40	; 64
     c60:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c64:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c68:	81 60       	ori	r24, 0x01	; 1
     c6a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c6e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c72:	84 60       	ori	r24, 0x04	; 4
     c74:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c78:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     c7c:	8f 7e       	andi	r24, 0xEF	; 239
     c7e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c82:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     c84:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c86:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c90:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c94:	84 60       	ori	r24, 0x04	; 4
     c96:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c9a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     ca4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ca8:	80 61       	ori	r24, 0x10	; 16
     caa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     cae:	08 95       	ret

00000cb0 <USB_Init>:
     cb0:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USB_IsInitialized>

	USB_ResetInterface();
     cc0:	a7 cf       	rjmp	.-178    	; 0xc10 <USB_ResetInterface>

00000cc2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cc2:	e8 ed       	ldi	r30, 0xD8	; 216
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	8c 7f       	andi	r24, 0xFC	; 252
     cca:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ccc:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cd0:	08 95       	ret

00000cd2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cd2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cd6:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cda:	08 95       	ret

00000cdc <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	0b b6       	in	r0, 0x3b	; 59
     ce8:	0f 92       	push	r0
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d02:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d06:	85 ff       	sbrs	r24, 5
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d0a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d0e:	85 ff       	sbrs	r24, 5
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d12:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d16:	8f 7d       	andi	r24, 0xDF	; 223
     d18:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d1c:	1b d1       	rcall	.+566    	; 0xf54 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d1e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d22:	81 ff       	sbrs	r24, 1
     d24:	15 c0       	rjmp	.+42     	; 0xd50 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d26:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d2a:	81 ff       	sbrs	r24, 1
     d2c:	11 c0       	rjmp	.+34     	; 0xd50 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d2e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d32:	8d 7f       	andi	r24, 0xFD	; 253
     d34:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d38:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
     d3e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d42:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d46:	8d 7f       	andi	r24, 0xFD	; 253
     d48:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     d4c:	33 db       	rcall	.-2458   	; 0x3b4 <EVENT_USB_Host_DeviceUnattached>
     d4e:	60 df       	rcall	.-320    	; 0xc10 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d50:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d54:	81 ff       	sbrs	r24, 1
     d56:	15 c0       	rjmp	.+42     	; 0xd82 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d58:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     d5c:	81 ff       	sbrs	r24, 1
     d5e:	11 c0       	rjmp	.+34     	; 0xd82 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d60:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d6a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d6c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	aa db       	rcall	.-2220   	; 0x4ce <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d7a:	1c db       	rcall	.-2504   	; 0x3b4 <EVENT_USB_Host_DeviceUnattached>
     d7c:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     d7e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_HostState>
     d82:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d86:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d88:	17 c0       	rjmp	.+46     	; 0xdb8 <__vector_10+0xdc>
     d8a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d8e:	80 ff       	sbrs	r24, 0
     d90:	13 c0       	rjmp	.+38     	; 0xdb8 <__vector_10+0xdc>
     d92:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d96:	8e 7f       	andi	r24, 0xFE	; 254
     d98:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d9c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     da6:	01 db       	rcall	.-2558   	; 0x3aa <EVENT_USB_Host_DeviceAttached>
     da8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     db2:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     db4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_HostState>
     db8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dbc:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <__vector_10+0x100>
     dc0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dc4:	82 ff       	sbrs	r24, 2
     dc6:	0a c0       	rjmp	.+20     	; 0xddc <__vector_10+0x100>
     dc8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	8b db       	rcall	.-2282   	; 0x4ee <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     dd8:	ed da       	rcall	.-2598   	; 0x3b4 <EVENT_USB_Host_DeviceUnattached>
     dda:	1a df       	rcall	.-460    	; 0xc10 <USB_ResetInterface>

		USB_ResetInterface();
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0b be       	out	0x3b, r0	; 59
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <USB_GetNextDescriptor>:
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     e06:	dc 01       	movw	r26, r24
     e08:	eb 01       	movw	r28, r22
     e0a:	e8 81       	ld	r30, Y
     e0c:	f9 81       	ldd	r31, Y+1	; 0x01
     e0e:	20 81       	ld	r18, Z
     e10:	8d 91       	ld	r24, X+
     e12:	9c 91       	ld	r25, X
     e14:	11 97       	sbiw	r26, 0x01	; 1
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	82 17       	cp	r24, r18
     e1a:	93 07       	cpc	r25, r19
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <USB_GetNextDescriptor+0x1e>
     e1e:	9c 01       	movw	r18, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	eb 01       	movw	r28, r22
     e26:	f9 83       	std	Y+1, r31	; 0x01
     e28:	e8 83       	st	Y, r30
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	11 97       	sbiw	r26, 0x01	; 1
     e30:	82 1b       	sub	r24, r18
     e32:	93 0b       	sbc	r25, r19
     e34:	8d 93       	st	X+, r24
     e36:	9c 93       	st	X, r25
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <USB_Host_GetDeviceConfigDescriptor>:
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	29 97       	sbiw	r28, 0x09	; 9
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	6b 01       	movw	r12, r22
     e60:	8a 01       	movw	r16, r20
     e62:	79 01       	movw	r14, r18
     e64:	90 e8       	ldi	r25, 0x80	; 128
     e66:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <USB_ControlRequest>
     e6a:	96 e0       	ldi	r25, 0x06	; 6
     e6c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <USB_ControlRequest+0x1>
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	92 60       	ori	r25, 0x02	; 2
     e76:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_ControlRequest+0x3>
     e7a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_ControlRequest+0x2>
     e7e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <USB_ControlRequest+0x5>
     e82:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_ControlRequest+0x4>
     e86:	89 e0       	ldi	r24, 0x09	; 9
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <USB_ControlRequest+0x7>
     e8e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <USB_ControlRequest+0x6>
     e92:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	83 d0       	rcall	.+262    	; 0xfa2 <USB_Host_SendControlRequest>
     e9c:	81 11       	cpse	r24, r1
     e9e:	19 c0       	rjmp	.+50     	; 0xed2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	f6 01       	movw	r30, r12
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
     eaa:	e8 16       	cp	r14, r24
     eac:	f9 06       	cpc	r15, r25
     eae:	70 f0       	brcs	.+28     	; 0xecc <USB_Host_GetDeviceConfigDescriptor+0x8e>
     eb0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <USB_ControlRequest+0x7>
     eb4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <USB_ControlRequest+0x6>
     eb8:	c8 01       	movw	r24, r16
     eba:	73 d0       	rcall	.+230    	; 0xfa2 <USB_Host_SendControlRequest>
     ebc:	81 11       	cpse	r24, r1
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ec0:	f8 01       	movw	r30, r16
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	21 f4       	brne	.+8      	; 0xed0 <USB_Host_GetDeviceConfigDescriptor+0x92>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ecc:	85 e0       	ldi	r24, 0x05	; 5
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ed0:	86 e0       	ldi	r24, 0x06	; 6
     ed2:	29 96       	adiw	r28, 0x09	; 9
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	08 95       	ret

00000ef0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	8c 01       	movw	r16, r24
     f06:	eb 01       	movw	r28, r22
     f08:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f0a:	f8 01       	movw	r30, r16
     f0c:	e0 80       	ld	r14, Z
     f0e:	f1 80       	ldd	r15, Z+1	; 0x01
     f10:	e1 14       	cp	r14, r1
     f12:	f1 04       	cpc	r15, r1
     f14:	99 f0       	breq	.+38     	; 0xf3c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f16:	a8 80       	ld	r10, Y
     f18:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     f1a:	be 01       	movw	r22, r28
     f1c:	c8 01       	movw	r24, r16
     f1e:	71 df       	rcall	.-286    	; 0xe02 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f20:	88 81       	ld	r24, Y
     f22:	99 81       	ldd	r25, Y+1	; 0x01
     f24:	f6 01       	movw	r30, r12
     f26:	09 95       	icall
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	79 f3       	breq	.-34     	; 0xf0a <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	39 f4       	brne	.+14     	; 0xf3e <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     f30:	b9 82       	std	Y+1, r11	; 0x01
     f32:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     f34:	f8 01       	movw	r30, r16
     f36:	f1 82       	std	Z+1, r15	; 0x01
     f38:	e0 82       	st	Z, r14
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	08 95       	ret

00000f54 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f54:	08 95       	ret

00000f56 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	18 2f       	mov	r17, r24
     f5e:	c9 ee       	ldi	r28, 0xE9	; 233
     f60:	d3 e0       	ldi	r29, 0x03	; 3
     f62:	11 11       	cpse	r17, r1
     f64:	0c c0       	rjmp	.+24     	; 0xf7e <USB_Host_WaitForIOS+0x28>
     f66:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f6a:	83 fd       	sbrc	r24, 3
     f6c:	15 c0       	rjmp	.+42     	; 0xf98 <USB_Host_WaitForIOS+0x42>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	64 dc       	rcall	.-1848   	; 0x83a <USB_Host_WaitMS>
     f72:	81 11       	cpse	r24, r1
     f74:	12 c0       	rjmp	.+36     	; 0xf9a <USB_Host_WaitForIOS+0x44>
     f76:	21 97       	sbiw	r28, 0x01	; 1
     f78:	a1 f7       	brne	.-24     	; 0xf62 <USB_Host_WaitForIOS+0xc>
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <USB_Host_WaitForIOS+0x44>
     f7e:	11 30       	cpi	r17, 0x01	; 1
     f80:	29 f4       	brne	.+10     	; 0xf8c <USB_Host_WaitForIOS+0x36>
     f82:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f86:	80 ff       	sbrs	r24, 0
     f88:	f2 cf       	rjmp	.-28     	; 0xf6e <USB_Host_WaitForIOS+0x18>
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <USB_Host_WaitForIOS+0x42>
     f8c:	12 30       	cpi	r17, 0x02	; 2
     f8e:	79 f7       	brne	.-34     	; 0xf6e <USB_Host_WaitForIOS+0x18>
     f90:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f94:	82 ff       	sbrs	r24, 2
     f96:	eb cf       	rjmp	.-42     	; 0xf6e <USB_Host_WaitForIOS+0x18>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	08 95       	ret

00000fa2 <USB_Host_SendControlRequest>:
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	8c 01       	movw	r16, r24
     fae:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	f8 2e       	mov	r15, r24
     fb6:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <USB_ControlRequest+0x6>
     fba:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <USB_ControlRequest+0x7>
     fbe:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	37 dc       	rcall	.-1938   	; 0x83a <USB_Host_WaitMS>
     fcc:	81 11       	cpse	r24, r1
     fce:	c8 c0       	rjmp	.+400    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
     fd0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fd4:	8f 7c       	andi	r24, 0xCF	; 207
     fd6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fda:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
     fde:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fe2:	8f 7e       	andi	r24, 0xEF	; 239
     fe4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fe8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fec:	8f 7b       	andi	r24, 0xBF	; 191
     fee:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ff2:	ec e1       	ldi	r30, 0x1C	; 28
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	84 e2       	ldi	r24, 0x24	; 36
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	21 91       	ld	r18, Z+
     ffc:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1000:	8e 17       	cp	r24, r30
    1002:	9f 07       	cpc	r25, r31
    1004:	d1 f7       	brne	.-12     	; 0xffa <USB_Host_SendControlRequest+0x58>
    1006:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    100a:	87 77       	andi	r24, 0x77	; 119
    100c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	a1 df       	rcall	.-190    	; 0xf56 <USB_Host_WaitForIOS>
    1014:	81 11       	cpse	r24, r1
    1016:	a4 c0       	rjmp	.+328    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    1018:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    101c:	80 64       	ori	r24, 0x40	; 64
    101e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0a dc       	rcall	.-2028   	; 0x83a <USB_Host_WaitMS>
    1026:	81 11       	cpse	r24, r1
    1028:	9b c0       	rjmp	.+310    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    102a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest>
    102e:	87 ff       	sbrs	r24, 7
    1030:	4e c0       	rjmp	.+156    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
    1032:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1036:	8f 7c       	andi	r24, 0xCF	; 207
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    103e:	01 15       	cp	r16, r1
    1040:	11 05       	cpc	r17, r1
    1042:	09 f0       	breq	.+2      	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    1044:	3a c0       	rjmp	.+116    	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
    1046:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    104a:	8f 7c       	andi	r24, 0xCF	; 207
    104c:	80 62       	ori	r24, 0x20	; 32
    104e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1052:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	7b df       	rcall	.-266    	; 0xf56 <USB_Host_WaitForIOS>
    1060:	81 11       	cpse	r24, r1
    1062:	7e c0       	rjmp	.+252    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    1064:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1068:	8b 77       	andi	r24, 0x7B	; 123
    106a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	72 df       	rcall	.-284    	; 0xf56 <USB_Host_WaitForIOS>
    1072:	76 c0       	rjmp	.+236    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    1074:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1078:	8f 7b       	andi	r24, 0xBF	; 191
    107a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	6a df       	rcall	.-300    	; 0xf56 <USB_Host_WaitForIOS>
    1082:	81 11       	cpse	r24, r1
    1084:	6d c0       	rjmp	.+218    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    1086:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    108a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    108e:	89 2b       	or	r24, r25
    1090:	11 f4       	brne	.+4      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1092:	c0 e0       	ldi	r28, 0x00	; 0
    1094:	d0 e0       	ldi	r29, 0x00	; 0
    1096:	f8 01       	movw	r30, r16
    1098:	8f 01       	movw	r16, r30
    109a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    109e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    10a2:	89 2b       	or	r24, r25
    10a4:	69 f4       	brne	.+26     	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    10a6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10b0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10b4:	8e 77       	andi	r24, 0x7E	; 126
    10b6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10ba:	20 97       	sbiw	r28, 0x00	; 0
    10bc:	d9 f6       	brne	.-74     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    10be:	c3 cf       	rjmp	.-122    	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    10c0:	20 97       	sbiw	r28, 0x00	; 0
    10c2:	89 f3       	breq	.-30     	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    10c4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    10c8:	81 93       	st	Z+, r24
    10ca:	21 97       	sbiw	r28, 0x01	; 1
    10cc:	e5 cf       	rjmp	.-54     	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    10ce:	01 15       	cp	r16, r1
    10d0:	11 05       	cpc	r17, r1
    10d2:	91 f1       	breq	.+100    	; 0x1138 <__EEPROM_REGION_LENGTH__+0x138>
    10d4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10d8:	8f 7c       	andi	r24, 0xCF	; 207
    10da:	80 62       	ori	r24, 0x20	; 32
    10dc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10e0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	20 97       	sbiw	r28, 0x00	; 0
    10ee:	e1 f0       	breq	.+56     	; 0x1128 <__EEPROM_REGION_LENGTH__+0x128>
    10f0:	32 df       	rcall	.-412    	; 0xf56 <USB_Host_WaitForIOS>
    10f2:	81 11       	cpse	r24, r1
    10f4:	35 c0       	rjmp	.+106    	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    10f6:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    10fa:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    10fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	48 f4       	brcc	.+18     	; 0x111c <__EEPROM_REGION_LENGTH__+0x11c>
    110a:	0f 5f       	subi	r16, 0xFF	; 255
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	f8 01       	movw	r30, r16
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	80 81       	ld	r24, Z
    1114:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1118:	21 97       	sbiw	r28, 0x01	; 1
    111a:	69 f7       	brne	.-38     	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    111c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1120:	8b 77       	andi	r24, 0x7B	; 123
    1122:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1126:	e1 cf       	rjmp	.-62     	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    1128:	16 df       	rcall	.-468    	; 0xf56 <USB_Host_WaitForIOS>
    112a:	81 11       	cpse	r24, r1
    112c:	19 c0       	rjmp	.+50     	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    112e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1138:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    113c:	8f 7c       	andi	r24, 0xCF	; 207
    113e:	80 61       	ori	r24, 0x10	; 16
    1140:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1144:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1148:	8f 7b       	andi	r24, 0xBF	; 191
    114a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	02 df       	rcall	.-508    	; 0xf56 <USB_Host_WaitForIOS>
    1152:	81 11       	cpse	r24, r1
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <__EEPROM_REGION_LENGTH__+0x160>
    1156:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    115a:	9e 77       	andi	r25, 0x7E	; 126
    115c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1160:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1164:	90 64       	ori	r25, 0x40	; 64
    1166:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    116a:	f1 10       	cpse	r15, r1
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <__EEPROM_REGION_LENGTH__+0x178>
    116e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1172:	9e 7f       	andi	r25, 0xFE	; 254
    1174:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    117e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	08 95       	ret

0000118e <USB_Host_SetDeviceConfiguration>:
    118e:	cf 93       	push	r28
    1190:	c8 2f       	mov	r28, r24
    1192:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_ControlRequest>
    1196:	89 e0       	ldi	r24, 0x09	; 9
    1198:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_ControlRequest+0x1>
    119c:	8c 2f       	mov	r24, r28
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_ControlRequest+0x3>
    11a4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_ControlRequest+0x2>
    11a8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <USB_ControlRequest+0x5>
    11ac:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_ControlRequest+0x4>
    11b0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <USB_ControlRequest+0x7>
    11b4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <USB_ControlRequest+0x6>
    11b8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	f0 de       	rcall	.-544    	; 0xfa2 <USB_Host_SendControlRequest>
    11c2:	81 11       	cpse	r24, r1
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <USB_Host_SetDeviceConfiguration+0x4a>
    11c6:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <USB_Host_ConfigurationNumber>
    11ca:	c1 11       	cpse	r28, r1
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <USB_Host_SetDeviceConfiguration+0x44>
    11ce:	9a e0       	ldi	r25, 0x0A	; 10
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <USB_Host_SetDeviceConfiguration+0x46>
    11d2:	9b e0       	ldi	r25, 0x0B	; 11
    11d4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <USB_HostState>
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11dc:	ec e1       	ldi	r30, 0x1C	; 28
    11de:	f1 e0       	ldi	r31, 0x01	; 1
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	90 83       	st	Z, r25
    11e4:	9b e0       	ldi	r25, 0x0B	; 11
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	73 83       	std	Z+3, r23	; 0x03
    11ec:	62 83       	std	Z+2, r22	; 0x02
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	95 83       	std	Z+5, r25	; 0x05
    11f2:	84 83       	std	Z+4, r24	; 0x04
    11f4:	17 82       	std	Z+7, r1	; 0x07
    11f6:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11f8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	d0 ce       	rjmp	.-608    	; 0xfa2 <USB_Host_SendControlRequest>

00001202 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1208:	c7 ea       	ldi	r28, 0xA7	; 167
    120a:	d0 e0       	ldi	r29, 0x00	; 0
    120c:	18 81       	ld	r17, Y
    120e:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1210:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1212:	60 db       	rcall	.-2368   	; 0x8d4 <USB_Host_ProcessNextHostState>
    1214:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	08 95       	ret

0000121e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    121e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1222:	95 ff       	sbrs	r25, 5
    1224:	fc cf       	rjmp	.-8      	; 0x121e <Serial_putchar>
				UDR1 = DataByte;
    1226:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	08 95       	ret

00001230 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1230:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1234:	87 ff       	sbrs	r24, 7
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <Serial_getchar+0x18>
    1238:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    123c:	87 ff       	sbrs	r24, 7
    123e:	07 c0       	rjmp	.+14     	; 0x124e <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1240:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	08 95       	ret
	  return _FDEV_EOF;
    1248:	8e ef       	ldi	r24, 0xFE	; 254
    124a:	9f ef       	ldi	r25, 0xFF	; 255
    124c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1252:	08 95       	ret

00001254 <__tablejump2__>:
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	00 24       	eor	r0, r0
    125a:	00 1c       	adc	r0, r0
    125c:	0b be       	out	0x3b, r0	; 59
    125e:	07 90       	elpm	r0, Z+
    1260:	f6 91       	elpm	r31, Z
    1262:	e0 2d       	mov	r30, r0
    1264:	09 94       	ijmp

00001266 <printf_P>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	ae 01       	movw	r20, r28
    1274:	49 5f       	subi	r20, 0xF9	; 249
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	da 01       	movw	r26, r20
    127a:	6d 91       	ld	r22, X+
    127c:	7d 91       	ld	r23, X+
    127e:	ad 01       	movw	r20, r26
    1280:	03 e3       	ldi	r16, 0x33	; 51
    1282:	11 e0       	ldi	r17, 0x01	; 1
    1284:	f8 01       	movw	r30, r16
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	dc 01       	movw	r26, r24
    128c:	13 96       	adiw	r26, 0x03	; 3
    128e:	2c 91       	ld	r18, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	28 60       	ori	r18, 0x08	; 8
    1294:	13 96       	adiw	r26, 0x03	; 3
    1296:	2c 93       	st	X, r18
    1298:	3e d0       	rcall	.+124    	; 0x1316 <vfprintf>
    129a:	d8 01       	movw	r26, r16
    129c:	12 96       	adiw	r26, 0x02	; 2
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	13 97       	sbiw	r26, 0x03	; 3
    12a4:	23 81       	ldd	r18, Z+3	; 0x03
    12a6:	27 7f       	andi	r18, 0xF7	; 247
    12a8:	23 83       	std	Z+3, r18	; 0x03
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <puts_P>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	8c 01       	movw	r16, r24
    12be:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <__iob+0x2>
    12c2:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <__iob+0x3>
    12c6:	83 81       	ldd	r24, Z+3	; 0x03
    12c8:	81 ff       	sbrs	r24, 1
    12ca:	1b c0       	rjmp	.+54     	; 0x1302 <puts_P+0x4e>
    12cc:	d0 e0       	ldi	r29, 0x00	; 0
    12ce:	c0 e0       	ldi	r28, 0x00	; 0
    12d0:	f8 01       	movw	r30, r16
    12d2:	84 91       	lpm	r24, Z
    12d4:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <__iob+0x2>
    12d8:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <__iob+0x3>
    12dc:	db 01       	movw	r26, r22
    12de:	18 96       	adiw	r26, 0x08	; 8
    12e0:	ed 91       	ld	r30, X+
    12e2:	fc 91       	ld	r31, X
    12e4:	19 97       	sbiw	r26, 0x09	; 9
    12e6:	88 23       	and	r24, r24
    12e8:	41 f0       	breq	.+16     	; 0x12fa <puts_P+0x46>
    12ea:	09 95       	icall
    12ec:	89 2b       	or	r24, r25
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <puts_P+0x40>
    12f0:	df ef       	ldi	r29, 0xFF	; 255
    12f2:	cf ef       	ldi	r28, 0xFF	; 255
    12f4:	0f 5f       	subi	r16, 0xFF	; 255
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	eb cf       	rjmp	.-42     	; 0x12d0 <puts_P+0x1c>
    12fa:	8a e0       	ldi	r24, 0x0A	; 10
    12fc:	09 95       	icall
    12fe:	89 2b       	or	r24, r25
    1300:	19 f0       	breq	.+6      	; 0x1308 <puts_P+0x54>
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	02 c0       	rjmp	.+4      	; 0x130c <puts_P+0x58>
    1308:	8d 2f       	mov	r24, r29
    130a:	9c 2f       	mov	r25, r28
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	08 95       	ret

00001316 <vfprintf>:
    1316:	2f 92       	push	r2
    1318:	3f 92       	push	r3
    131a:	4f 92       	push	r4
    131c:	5f 92       	push	r5
    131e:	6f 92       	push	r6
    1320:	7f 92       	push	r7
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	2b 97       	sbiw	r28, 0x0b	; 11
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	6c 01       	movw	r12, r24
    134c:	7b 01       	movw	r14, r22
    134e:	8a 01       	movw	r16, r20
    1350:	fc 01       	movw	r30, r24
    1352:	17 82       	std	Z+7, r1	; 0x07
    1354:	16 82       	std	Z+6, r1	; 0x06
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	81 ff       	sbrs	r24, 1
    135a:	bf c1       	rjmp	.+894    	; 0x16da <vfprintf+0x3c4>
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	3c 01       	movw	r6, r24
    1362:	f6 01       	movw	r30, r12
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	f7 01       	movw	r30, r14
    1368:	93 fd       	sbrc	r25, 3
    136a:	85 91       	lpm	r24, Z+
    136c:	93 ff       	sbrs	r25, 3
    136e:	81 91       	ld	r24, Z+
    1370:	7f 01       	movw	r14, r30
    1372:	88 23       	and	r24, r24
    1374:	09 f4       	brne	.+2      	; 0x1378 <vfprintf+0x62>
    1376:	ad c1       	rjmp	.+858    	; 0x16d2 <vfprintf+0x3bc>
    1378:	85 32       	cpi	r24, 0x25	; 37
    137a:	39 f4       	brne	.+14     	; 0x138a <vfprintf+0x74>
    137c:	93 fd       	sbrc	r25, 3
    137e:	85 91       	lpm	r24, Z+
    1380:	93 ff       	sbrs	r25, 3
    1382:	81 91       	ld	r24, Z+
    1384:	7f 01       	movw	r14, r30
    1386:	85 32       	cpi	r24, 0x25	; 37
    1388:	21 f4       	brne	.+8      	; 0x1392 <vfprintf+0x7c>
    138a:	b6 01       	movw	r22, r12
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	d6 d1       	rcall	.+940    	; 0x173c <fputc>
    1390:	e8 cf       	rjmp	.-48     	; 0x1362 <vfprintf+0x4c>
    1392:	91 2c       	mov	r9, r1
    1394:	21 2c       	mov	r2, r1
    1396:	31 2c       	mov	r3, r1
    1398:	ff e1       	ldi	r31, 0x1F	; 31
    139a:	f3 15       	cp	r31, r3
    139c:	d8 f0       	brcs	.+54     	; 0x13d4 <vfprintf+0xbe>
    139e:	8b 32       	cpi	r24, 0x2B	; 43
    13a0:	79 f0       	breq	.+30     	; 0x13c0 <vfprintf+0xaa>
    13a2:	38 f4       	brcc	.+14     	; 0x13b2 <vfprintf+0x9c>
    13a4:	80 32       	cpi	r24, 0x20	; 32
    13a6:	79 f0       	breq	.+30     	; 0x13c6 <vfprintf+0xb0>
    13a8:	83 32       	cpi	r24, 0x23	; 35
    13aa:	a1 f4       	brne	.+40     	; 0x13d4 <vfprintf+0xbe>
    13ac:	23 2d       	mov	r18, r3
    13ae:	20 61       	ori	r18, 0x10	; 16
    13b0:	1d c0       	rjmp	.+58     	; 0x13ec <vfprintf+0xd6>
    13b2:	8d 32       	cpi	r24, 0x2D	; 45
    13b4:	61 f0       	breq	.+24     	; 0x13ce <vfprintf+0xb8>
    13b6:	80 33       	cpi	r24, 0x30	; 48
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <vfprintf+0xbe>
    13ba:	23 2d       	mov	r18, r3
    13bc:	21 60       	ori	r18, 0x01	; 1
    13be:	16 c0       	rjmp	.+44     	; 0x13ec <vfprintf+0xd6>
    13c0:	83 2d       	mov	r24, r3
    13c2:	82 60       	ori	r24, 0x02	; 2
    13c4:	38 2e       	mov	r3, r24
    13c6:	e3 2d       	mov	r30, r3
    13c8:	e4 60       	ori	r30, 0x04	; 4
    13ca:	3e 2e       	mov	r3, r30
    13cc:	2a c0       	rjmp	.+84     	; 0x1422 <vfprintf+0x10c>
    13ce:	f3 2d       	mov	r31, r3
    13d0:	f8 60       	ori	r31, 0x08	; 8
    13d2:	1d c0       	rjmp	.+58     	; 0x140e <vfprintf+0xf8>
    13d4:	37 fc       	sbrc	r3, 7
    13d6:	2d c0       	rjmp	.+90     	; 0x1432 <vfprintf+0x11c>
    13d8:	20 ed       	ldi	r18, 0xD0	; 208
    13da:	28 0f       	add	r18, r24
    13dc:	2a 30       	cpi	r18, 0x0A	; 10
    13de:	40 f0       	brcs	.+16     	; 0x13f0 <vfprintf+0xda>
    13e0:	8e 32       	cpi	r24, 0x2E	; 46
    13e2:	b9 f4       	brne	.+46     	; 0x1412 <vfprintf+0xfc>
    13e4:	36 fc       	sbrc	r3, 6
    13e6:	75 c1       	rjmp	.+746    	; 0x16d2 <vfprintf+0x3bc>
    13e8:	23 2d       	mov	r18, r3
    13ea:	20 64       	ori	r18, 0x40	; 64
    13ec:	32 2e       	mov	r3, r18
    13ee:	19 c0       	rjmp	.+50     	; 0x1422 <vfprintf+0x10c>
    13f0:	36 fe       	sbrs	r3, 6
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0xea>
    13f4:	8a e0       	ldi	r24, 0x0A	; 10
    13f6:	98 9e       	mul	r9, r24
    13f8:	20 0d       	add	r18, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	92 2e       	mov	r9, r18
    13fe:	11 c0       	rjmp	.+34     	; 0x1422 <vfprintf+0x10c>
    1400:	ea e0       	ldi	r30, 0x0A	; 10
    1402:	2e 9e       	mul	r2, r30
    1404:	20 0d       	add	r18, r0
    1406:	11 24       	eor	r1, r1
    1408:	22 2e       	mov	r2, r18
    140a:	f3 2d       	mov	r31, r3
    140c:	f0 62       	ori	r31, 0x20	; 32
    140e:	3f 2e       	mov	r3, r31
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <vfprintf+0x10c>
    1412:	8c 36       	cpi	r24, 0x6C	; 108
    1414:	21 f4       	brne	.+8      	; 0x141e <vfprintf+0x108>
    1416:	83 2d       	mov	r24, r3
    1418:	80 68       	ori	r24, 0x80	; 128
    141a:	38 2e       	mov	r3, r24
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <vfprintf+0x10c>
    141e:	88 36       	cpi	r24, 0x68	; 104
    1420:	41 f4       	brne	.+16     	; 0x1432 <vfprintf+0x11c>
    1422:	f7 01       	movw	r30, r14
    1424:	93 fd       	sbrc	r25, 3
    1426:	85 91       	lpm	r24, Z+
    1428:	93 ff       	sbrs	r25, 3
    142a:	81 91       	ld	r24, Z+
    142c:	7f 01       	movw	r14, r30
    142e:	81 11       	cpse	r24, r1
    1430:	b3 cf       	rjmp	.-154    	; 0x1398 <vfprintf+0x82>
    1432:	98 2f       	mov	r25, r24
    1434:	9f 7d       	andi	r25, 0xDF	; 223
    1436:	95 54       	subi	r25, 0x45	; 69
    1438:	93 30       	cpi	r25, 0x03	; 3
    143a:	28 f4       	brcc	.+10     	; 0x1446 <vfprintf+0x130>
    143c:	0c 5f       	subi	r16, 0xFC	; 252
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	9f e3       	ldi	r25, 0x3F	; 63
    1442:	99 83       	std	Y+1, r25	; 0x01
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <vfprintf+0x14a>
    1446:	83 36       	cpi	r24, 0x63	; 99
    1448:	31 f0       	breq	.+12     	; 0x1456 <vfprintf+0x140>
    144a:	83 37       	cpi	r24, 0x73	; 115
    144c:	71 f0       	breq	.+28     	; 0x146a <vfprintf+0x154>
    144e:	83 35       	cpi	r24, 0x53	; 83
    1450:	09 f0       	breq	.+2      	; 0x1454 <vfprintf+0x13e>
    1452:	55 c0       	rjmp	.+170    	; 0x14fe <vfprintf+0x1e8>
    1454:	20 c0       	rjmp	.+64     	; 0x1496 <vfprintf+0x180>
    1456:	f8 01       	movw	r30, r16
    1458:	80 81       	ld	r24, Z
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	0e 5f       	subi	r16, 0xFE	; 254
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	88 24       	eor	r8, r8
    1462:	83 94       	inc	r8
    1464:	91 2c       	mov	r9, r1
    1466:	53 01       	movw	r10, r6
    1468:	12 c0       	rjmp	.+36     	; 0x148e <vfprintf+0x178>
    146a:	28 01       	movw	r4, r16
    146c:	f2 e0       	ldi	r31, 0x02	; 2
    146e:	4f 0e       	add	r4, r31
    1470:	51 1c       	adc	r5, r1
    1472:	f8 01       	movw	r30, r16
    1474:	a0 80       	ld	r10, Z
    1476:	b1 80       	ldd	r11, Z+1	; 0x01
    1478:	36 fe       	sbrs	r3, 6
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <vfprintf+0x16c>
    147c:	69 2d       	mov	r22, r9
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <vfprintf+0x170>
    1482:	6f ef       	ldi	r22, 0xFF	; 255
    1484:	7f ef       	ldi	r23, 0xFF	; 255
    1486:	c5 01       	movw	r24, r10
    1488:	4e d1       	rcall	.+668    	; 0x1726 <strnlen>
    148a:	4c 01       	movw	r8, r24
    148c:	82 01       	movw	r16, r4
    148e:	f3 2d       	mov	r31, r3
    1490:	ff 77       	andi	r31, 0x7F	; 127
    1492:	3f 2e       	mov	r3, r31
    1494:	15 c0       	rjmp	.+42     	; 0x14c0 <vfprintf+0x1aa>
    1496:	28 01       	movw	r4, r16
    1498:	22 e0       	ldi	r18, 0x02	; 2
    149a:	42 0e       	add	r4, r18
    149c:	51 1c       	adc	r5, r1
    149e:	f8 01       	movw	r30, r16
    14a0:	a0 80       	ld	r10, Z
    14a2:	b1 80       	ldd	r11, Z+1	; 0x01
    14a4:	36 fe       	sbrs	r3, 6
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <vfprintf+0x198>
    14a8:	69 2d       	mov	r22, r9
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x19c>
    14ae:	6f ef       	ldi	r22, 0xFF	; 255
    14b0:	7f ef       	ldi	r23, 0xFF	; 255
    14b2:	c5 01       	movw	r24, r10
    14b4:	2d d1       	rcall	.+602    	; 0x1710 <strnlen_P>
    14b6:	4c 01       	movw	r8, r24
    14b8:	f3 2d       	mov	r31, r3
    14ba:	f0 68       	ori	r31, 0x80	; 128
    14bc:	3f 2e       	mov	r3, r31
    14be:	82 01       	movw	r16, r4
    14c0:	33 fc       	sbrc	r3, 3
    14c2:	19 c0       	rjmp	.+50     	; 0x14f6 <vfprintf+0x1e0>
    14c4:	82 2d       	mov	r24, r2
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	88 16       	cp	r8, r24
    14ca:	99 06       	cpc	r9, r25
    14cc:	a0 f4       	brcc	.+40     	; 0x14f6 <vfprintf+0x1e0>
    14ce:	b6 01       	movw	r22, r12
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	33 d1       	rcall	.+614    	; 0x173c <fputc>
    14d6:	2a 94       	dec	r2
    14d8:	f5 cf       	rjmp	.-22     	; 0x14c4 <vfprintf+0x1ae>
    14da:	f5 01       	movw	r30, r10
    14dc:	37 fc       	sbrc	r3, 7
    14de:	85 91       	lpm	r24, Z+
    14e0:	37 fe       	sbrs	r3, 7
    14e2:	81 91       	ld	r24, Z+
    14e4:	5f 01       	movw	r10, r30
    14e6:	b6 01       	movw	r22, r12
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	28 d1       	rcall	.+592    	; 0x173c <fputc>
    14ec:	21 10       	cpse	r2, r1
    14ee:	2a 94       	dec	r2
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	82 1a       	sub	r8, r18
    14f4:	91 08       	sbc	r9, r1
    14f6:	81 14       	cp	r8, r1
    14f8:	91 04       	cpc	r9, r1
    14fa:	79 f7       	brne	.-34     	; 0x14da <vfprintf+0x1c4>
    14fc:	e1 c0       	rjmp	.+450    	; 0x16c0 <vfprintf+0x3aa>
    14fe:	84 36       	cpi	r24, 0x64	; 100
    1500:	11 f0       	breq	.+4      	; 0x1506 <vfprintf+0x1f0>
    1502:	89 36       	cpi	r24, 0x69	; 105
    1504:	39 f5       	brne	.+78     	; 0x1554 <vfprintf+0x23e>
    1506:	f8 01       	movw	r30, r16
    1508:	37 fe       	sbrs	r3, 7
    150a:	07 c0       	rjmp	.+14     	; 0x151a <vfprintf+0x204>
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	0c 5f       	subi	r16, 0xFC	; 252
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	08 c0       	rjmp	.+16     	; 0x152a <vfprintf+0x214>
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	07 2e       	mov	r0, r23
    1520:	00 0c       	add	r0, r0
    1522:	88 0b       	sbc	r24, r24
    1524:	99 0b       	sbc	r25, r25
    1526:	0e 5f       	subi	r16, 0xFE	; 254
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	f3 2d       	mov	r31, r3
    152c:	ff 76       	andi	r31, 0x6F	; 111
    152e:	3f 2e       	mov	r3, r31
    1530:	97 ff       	sbrs	r25, 7
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <vfprintf+0x230>
    1534:	90 95       	com	r25
    1536:	80 95       	com	r24
    1538:	70 95       	com	r23
    153a:	61 95       	neg	r22
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	f0 68       	ori	r31, 0x80	; 128
    1544:	3f 2e       	mov	r3, r31
    1546:	2a e0       	ldi	r18, 0x0A	; 10
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	a3 01       	movw	r20, r6
    154c:	33 d1       	rcall	.+614    	; 0x17b4 <__ultoa_invert>
    154e:	88 2e       	mov	r8, r24
    1550:	86 18       	sub	r8, r6
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <vfprintf+0x2c6>
    1554:	85 37       	cpi	r24, 0x75	; 117
    1556:	31 f4       	brne	.+12     	; 0x1564 <vfprintf+0x24e>
    1558:	23 2d       	mov	r18, r3
    155a:	2f 7e       	andi	r18, 0xEF	; 239
    155c:	b2 2e       	mov	r11, r18
    155e:	2a e0       	ldi	r18, 0x0A	; 10
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	25 c0       	rjmp	.+74     	; 0x15ae <vfprintf+0x298>
    1564:	93 2d       	mov	r25, r3
    1566:	99 7f       	andi	r25, 0xF9	; 249
    1568:	b9 2e       	mov	r11, r25
    156a:	8f 36       	cpi	r24, 0x6F	; 111
    156c:	c1 f0       	breq	.+48     	; 0x159e <vfprintf+0x288>
    156e:	18 f4       	brcc	.+6      	; 0x1576 <vfprintf+0x260>
    1570:	88 35       	cpi	r24, 0x58	; 88
    1572:	79 f0       	breq	.+30     	; 0x1592 <vfprintf+0x27c>
    1574:	ae c0       	rjmp	.+348    	; 0x16d2 <vfprintf+0x3bc>
    1576:	80 37       	cpi	r24, 0x70	; 112
    1578:	19 f0       	breq	.+6      	; 0x1580 <vfprintf+0x26a>
    157a:	88 37       	cpi	r24, 0x78	; 120
    157c:	21 f0       	breq	.+8      	; 0x1586 <vfprintf+0x270>
    157e:	a9 c0       	rjmp	.+338    	; 0x16d2 <vfprintf+0x3bc>
    1580:	e9 2f       	mov	r30, r25
    1582:	e0 61       	ori	r30, 0x10	; 16
    1584:	be 2e       	mov	r11, r30
    1586:	b4 fe       	sbrs	r11, 4
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <vfprintf+0x28e>
    158a:	fb 2d       	mov	r31, r11
    158c:	f4 60       	ori	r31, 0x04	; 4
    158e:	bf 2e       	mov	r11, r31
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <vfprintf+0x28e>
    1592:	34 fe       	sbrs	r3, 4
    1594:	0a c0       	rjmp	.+20     	; 0x15aa <vfprintf+0x294>
    1596:	29 2f       	mov	r18, r25
    1598:	26 60       	ori	r18, 0x06	; 6
    159a:	b2 2e       	mov	r11, r18
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <vfprintf+0x294>
    159e:	28 e0       	ldi	r18, 0x08	; 8
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <vfprintf+0x298>
    15a4:	20 e1       	ldi	r18, 0x10	; 16
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x298>
    15aa:	20 e1       	ldi	r18, 0x10	; 16
    15ac:	32 e0       	ldi	r19, 0x02	; 2
    15ae:	f8 01       	movw	r30, r16
    15b0:	b7 fe       	sbrs	r11, 7
    15b2:	07 c0       	rjmp	.+14     	; 0x15c2 <vfprintf+0x2ac>
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	0c 5f       	subi	r16, 0xFC	; 252
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x2b8>
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 5f       	subi	r16, 0xFE	; 254
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	a3 01       	movw	r20, r6
    15d0:	f1 d0       	rcall	.+482    	; 0x17b4 <__ultoa_invert>
    15d2:	88 2e       	mov	r8, r24
    15d4:	86 18       	sub	r8, r6
    15d6:	fb 2d       	mov	r31, r11
    15d8:	ff 77       	andi	r31, 0x7F	; 127
    15da:	3f 2e       	mov	r3, r31
    15dc:	36 fe       	sbrs	r3, 6
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <vfprintf+0x2e4>
    15e0:	23 2d       	mov	r18, r3
    15e2:	2e 7f       	andi	r18, 0xFE	; 254
    15e4:	a2 2e       	mov	r10, r18
    15e6:	89 14       	cp	r8, r9
    15e8:	58 f4       	brcc	.+22     	; 0x1600 <vfprintf+0x2ea>
    15ea:	34 fe       	sbrs	r3, 4
    15ec:	0b c0       	rjmp	.+22     	; 0x1604 <vfprintf+0x2ee>
    15ee:	32 fc       	sbrc	r3, 2
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <vfprintf+0x2ee>
    15f2:	83 2d       	mov	r24, r3
    15f4:	8e 7e       	andi	r24, 0xEE	; 238
    15f6:	a8 2e       	mov	r10, r24
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <vfprintf+0x2ee>
    15fa:	b8 2c       	mov	r11, r8
    15fc:	a3 2c       	mov	r10, r3
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <vfprintf+0x2f0>
    1600:	b8 2c       	mov	r11, r8
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <vfprintf+0x2f0>
    1604:	b9 2c       	mov	r11, r9
    1606:	a4 fe       	sbrs	r10, 4
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <vfprintf+0x312>
    160a:	fe 01       	movw	r30, r28
    160c:	e8 0d       	add	r30, r8
    160e:	f1 1d       	adc	r31, r1
    1610:	80 81       	ld	r24, Z
    1612:	80 33       	cpi	r24, 0x30	; 48
    1614:	21 f4       	brne	.+8      	; 0x161e <vfprintf+0x308>
    1616:	9a 2d       	mov	r25, r10
    1618:	99 7e       	andi	r25, 0xE9	; 233
    161a:	a9 2e       	mov	r10, r25
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <vfprintf+0x31a>
    161e:	a2 fe       	sbrs	r10, 2
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0x318>
    1622:	b3 94       	inc	r11
    1624:	b3 94       	inc	r11
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <vfprintf+0x31a>
    1628:	8a 2d       	mov	r24, r10
    162a:	86 78       	andi	r24, 0x86	; 134
    162c:	09 f0       	breq	.+2      	; 0x1630 <vfprintf+0x31a>
    162e:	b3 94       	inc	r11
    1630:	a3 fc       	sbrc	r10, 3
    1632:	10 c0       	rjmp	.+32     	; 0x1654 <vfprintf+0x33e>
    1634:	a0 fe       	sbrs	r10, 0
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <vfprintf+0x32e>
    1638:	b2 14       	cp	r11, r2
    163a:	80 f4       	brcc	.+32     	; 0x165c <vfprintf+0x346>
    163c:	28 0c       	add	r2, r8
    163e:	92 2c       	mov	r9, r2
    1640:	9b 18       	sub	r9, r11
    1642:	0d c0       	rjmp	.+26     	; 0x165e <vfprintf+0x348>
    1644:	b2 14       	cp	r11, r2
    1646:	58 f4       	brcc	.+22     	; 0x165e <vfprintf+0x348>
    1648:	b6 01       	movw	r22, r12
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	76 d0       	rcall	.+236    	; 0x173c <fputc>
    1650:	b3 94       	inc	r11
    1652:	f8 cf       	rjmp	.-16     	; 0x1644 <vfprintf+0x32e>
    1654:	b2 14       	cp	r11, r2
    1656:	18 f4       	brcc	.+6      	; 0x165e <vfprintf+0x348>
    1658:	2b 18       	sub	r2, r11
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0x34a>
    165c:	98 2c       	mov	r9, r8
    165e:	21 2c       	mov	r2, r1
    1660:	a4 fe       	sbrs	r10, 4
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <vfprintf+0x36c>
    1664:	b6 01       	movw	r22, r12
    1666:	80 e3       	ldi	r24, 0x30	; 48
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	68 d0       	rcall	.+208    	; 0x173c <fputc>
    166c:	a2 fe       	sbrs	r10, 2
    166e:	16 c0       	rjmp	.+44     	; 0x169c <vfprintf+0x386>
    1670:	a1 fc       	sbrc	r10, 1
    1672:	03 c0       	rjmp	.+6      	; 0x167a <vfprintf+0x364>
    1674:	88 e7       	ldi	r24, 0x78	; 120
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x368>
    167a:	88 e5       	ldi	r24, 0x58	; 88
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	b6 01       	movw	r22, r12
    1680:	0c c0       	rjmp	.+24     	; 0x169a <vfprintf+0x384>
    1682:	8a 2d       	mov	r24, r10
    1684:	86 78       	andi	r24, 0x86	; 134
    1686:	51 f0       	breq	.+20     	; 0x169c <vfprintf+0x386>
    1688:	a1 fe       	sbrs	r10, 1
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vfprintf+0x37a>
    168c:	8b e2       	ldi	r24, 0x2B	; 43
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <vfprintf+0x37c>
    1690:	80 e2       	ldi	r24, 0x20	; 32
    1692:	a7 fc       	sbrc	r10, 7
    1694:	8d e2       	ldi	r24, 0x2D	; 45
    1696:	b6 01       	movw	r22, r12
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	50 d0       	rcall	.+160    	; 0x173c <fputc>
    169c:	89 14       	cp	r8, r9
    169e:	30 f4       	brcc	.+12     	; 0x16ac <vfprintf+0x396>
    16a0:	b6 01       	movw	r22, r12
    16a2:	80 e3       	ldi	r24, 0x30	; 48
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	4a d0       	rcall	.+148    	; 0x173c <fputc>
    16a8:	9a 94       	dec	r9
    16aa:	f8 cf       	rjmp	.-16     	; 0x169c <vfprintf+0x386>
    16ac:	8a 94       	dec	r8
    16ae:	f3 01       	movw	r30, r6
    16b0:	e8 0d       	add	r30, r8
    16b2:	f1 1d       	adc	r31, r1
    16b4:	80 81       	ld	r24, Z
    16b6:	b6 01       	movw	r22, r12
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	40 d0       	rcall	.+128    	; 0x173c <fputc>
    16bc:	81 10       	cpse	r8, r1
    16be:	f6 cf       	rjmp	.-20     	; 0x16ac <vfprintf+0x396>
    16c0:	22 20       	and	r2, r2
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <vfprintf+0x3b0>
    16c4:	4e ce       	rjmp	.-868    	; 0x1362 <vfprintf+0x4c>
    16c6:	b6 01       	movw	r22, r12
    16c8:	80 e2       	ldi	r24, 0x20	; 32
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	37 d0       	rcall	.+110    	; 0x173c <fputc>
    16ce:	2a 94       	dec	r2
    16d0:	f7 cf       	rjmp	.-18     	; 0x16c0 <vfprintf+0x3aa>
    16d2:	f6 01       	movw	r30, r12
    16d4:	86 81       	ldd	r24, Z+6	; 0x06
    16d6:	97 81       	ldd	r25, Z+7	; 0x07
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x3c8>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	9f ef       	ldi	r25, 0xFF	; 255
    16de:	2b 96       	adiw	r28, 0x0b	; 11
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	7f 90       	pop	r7
    1704:	6f 90       	pop	r6
    1706:	5f 90       	pop	r5
    1708:	4f 90       	pop	r4
    170a:	3f 90       	pop	r3
    170c:	2f 90       	pop	r2
    170e:	08 95       	ret

00001710 <strnlen_P>:
    1710:	fc 01       	movw	r30, r24
    1712:	05 90       	lpm	r0, Z+
    1714:	61 50       	subi	r22, 0x01	; 1
    1716:	70 40       	sbci	r23, 0x00	; 0
    1718:	01 10       	cpse	r0, r1
    171a:	d8 f7       	brcc	.-10     	; 0x1712 <strnlen_P+0x2>
    171c:	80 95       	com	r24
    171e:	90 95       	com	r25
    1720:	8e 0f       	add	r24, r30
    1722:	9f 1f       	adc	r25, r31
    1724:	08 95       	ret

00001726 <strnlen>:
    1726:	fc 01       	movw	r30, r24
    1728:	61 50       	subi	r22, 0x01	; 1
    172a:	70 40       	sbci	r23, 0x00	; 0
    172c:	01 90       	ld	r0, Z+
    172e:	01 10       	cpse	r0, r1
    1730:	d8 f7       	brcc	.-10     	; 0x1728 <strnlen+0x2>
    1732:	80 95       	com	r24
    1734:	90 95       	com	r25
    1736:	8e 0f       	add	r24, r30
    1738:	9f 1f       	adc	r25, r31
    173a:	08 95       	ret

0000173c <fputc>:
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	fb 01       	movw	r30, r22
    1746:	23 81       	ldd	r18, Z+3	; 0x03
    1748:	21 fd       	sbrc	r18, 1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <fputc+0x16>
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	2c c0       	rjmp	.+88     	; 0x17aa <fputc+0x6e>
    1752:	22 ff       	sbrs	r18, 2
    1754:	16 c0       	rjmp	.+44     	; 0x1782 <fputc+0x46>
    1756:	46 81       	ldd	r20, Z+6	; 0x06
    1758:	57 81       	ldd	r21, Z+7	; 0x07
    175a:	24 81       	ldd	r18, Z+4	; 0x04
    175c:	35 81       	ldd	r19, Z+5	; 0x05
    175e:	42 17       	cp	r20, r18
    1760:	53 07       	cpc	r21, r19
    1762:	44 f4       	brge	.+16     	; 0x1774 <fputc+0x38>
    1764:	a0 81       	ld	r26, Z
    1766:	b1 81       	ldd	r27, Z+1	; 0x01
    1768:	9d 01       	movw	r18, r26
    176a:	2f 5f       	subi	r18, 0xFF	; 255
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	31 83       	std	Z+1, r19	; 0x01
    1770:	20 83       	st	Z, r18
    1772:	8c 93       	st	X, r24
    1774:	26 81       	ldd	r18, Z+6	; 0x06
    1776:	37 81       	ldd	r19, Z+7	; 0x07
    1778:	2f 5f       	subi	r18, 0xFF	; 255
    177a:	3f 4f       	sbci	r19, 0xFF	; 255
    177c:	37 83       	std	Z+7, r19	; 0x07
    177e:	26 83       	std	Z+6, r18	; 0x06
    1780:	14 c0       	rjmp	.+40     	; 0x17aa <fputc+0x6e>
    1782:	8b 01       	movw	r16, r22
    1784:	ec 01       	movw	r28, r24
    1786:	fb 01       	movw	r30, r22
    1788:	00 84       	ldd	r0, Z+8	; 0x08
    178a:	f1 85       	ldd	r31, Z+9	; 0x09
    178c:	e0 2d       	mov	r30, r0
    178e:	09 95       	icall
    1790:	89 2b       	or	r24, r25
    1792:	e1 f6       	brne	.-72     	; 0x174c <fputc+0x10>
    1794:	d8 01       	movw	r26, r16
    1796:	16 96       	adiw	r26, 0x06	; 6
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	17 97       	sbiw	r26, 0x07	; 7
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	17 96       	adiw	r26, 0x07	; 7
    17a2:	9c 93       	st	X, r25
    17a4:	8e 93       	st	-X, r24
    17a6:	16 97       	sbiw	r26, 0x06	; 6
    17a8:	ce 01       	movw	r24, r28
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <__ultoa_invert>:
    17b4:	fa 01       	movw	r30, r20
    17b6:	aa 27       	eor	r26, r26
    17b8:	28 30       	cpi	r18, 0x08	; 8
    17ba:	51 f1       	breq	.+84     	; 0x1810 <__ultoa_invert+0x5c>
    17bc:	20 31       	cpi	r18, 0x10	; 16
    17be:	81 f1       	breq	.+96     	; 0x1820 <__ultoa_invert+0x6c>
    17c0:	e8 94       	clt
    17c2:	6f 93       	push	r22
    17c4:	6e 7f       	andi	r22, 0xFE	; 254
    17c6:	6e 5f       	subi	r22, 0xFE	; 254
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	af 4f       	sbci	r26, 0xFF	; 255
    17d0:	b1 e0       	ldi	r27, 0x01	; 1
    17d2:	3e d0       	rcall	.+124    	; 0x1850 <__ultoa_invert+0x9c>
    17d4:	b4 e0       	ldi	r27, 0x04	; 4
    17d6:	3c d0       	rcall	.+120    	; 0x1850 <__ultoa_invert+0x9c>
    17d8:	67 0f       	add	r22, r23
    17da:	78 1f       	adc	r23, r24
    17dc:	89 1f       	adc	r24, r25
    17de:	9a 1f       	adc	r25, r26
    17e0:	a1 1d       	adc	r26, r1
    17e2:	68 0f       	add	r22, r24
    17e4:	79 1f       	adc	r23, r25
    17e6:	8a 1f       	adc	r24, r26
    17e8:	91 1d       	adc	r25, r1
    17ea:	a1 1d       	adc	r26, r1
    17ec:	6a 0f       	add	r22, r26
    17ee:	71 1d       	adc	r23, r1
    17f0:	81 1d       	adc	r24, r1
    17f2:	91 1d       	adc	r25, r1
    17f4:	a1 1d       	adc	r26, r1
    17f6:	20 d0       	rcall	.+64     	; 0x1838 <__ultoa_invert+0x84>
    17f8:	09 f4       	brne	.+2      	; 0x17fc <__ultoa_invert+0x48>
    17fa:	68 94       	set
    17fc:	3f 91       	pop	r19
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	26 9f       	mul	r18, r22
    1802:	11 24       	eor	r1, r1
    1804:	30 19       	sub	r19, r0
    1806:	30 5d       	subi	r19, 0xD0	; 208
    1808:	31 93       	st	Z+, r19
    180a:	de f6       	brtc	.-74     	; 0x17c2 <__ultoa_invert+0xe>
    180c:	cf 01       	movw	r24, r30
    180e:	08 95       	ret
    1810:	46 2f       	mov	r20, r22
    1812:	47 70       	andi	r20, 0x07	; 7
    1814:	40 5d       	subi	r20, 0xD0	; 208
    1816:	41 93       	st	Z+, r20
    1818:	b3 e0       	ldi	r27, 0x03	; 3
    181a:	0f d0       	rcall	.+30     	; 0x183a <__ultoa_invert+0x86>
    181c:	c9 f7       	brne	.-14     	; 0x1810 <__ultoa_invert+0x5c>
    181e:	f6 cf       	rjmp	.-20     	; 0x180c <__ultoa_invert+0x58>
    1820:	46 2f       	mov	r20, r22
    1822:	4f 70       	andi	r20, 0x0F	; 15
    1824:	40 5d       	subi	r20, 0xD0	; 208
    1826:	4a 33       	cpi	r20, 0x3A	; 58
    1828:	18 f0       	brcs	.+6      	; 0x1830 <__ultoa_invert+0x7c>
    182a:	49 5d       	subi	r20, 0xD9	; 217
    182c:	31 fd       	sbrc	r19, 1
    182e:	40 52       	subi	r20, 0x20	; 32
    1830:	41 93       	st	Z+, r20
    1832:	02 d0       	rcall	.+4      	; 0x1838 <__ultoa_invert+0x84>
    1834:	a9 f7       	brne	.-22     	; 0x1820 <__ultoa_invert+0x6c>
    1836:	ea cf       	rjmp	.-44     	; 0x180c <__ultoa_invert+0x58>
    1838:	b4 e0       	ldi	r27, 0x04	; 4
    183a:	a6 95       	lsr	r26
    183c:	97 95       	ror	r25
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__ultoa_invert+0x86>
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 05       	cpc	r22, r1
    184c:	71 05       	cpc	r23, r1
    184e:	08 95       	ret
    1850:	9b 01       	movw	r18, r22
    1852:	ac 01       	movw	r20, r24
    1854:	0a 2e       	mov	r0, r26
    1856:	06 94       	lsr	r0
    1858:	57 95       	ror	r21
    185a:	47 95       	ror	r20
    185c:	37 95       	ror	r19
    185e:	27 95       	ror	r18
    1860:	ba 95       	dec	r27
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__ultoa_invert+0xa2>
    1864:	62 0f       	add	r22, r18
    1866:	73 1f       	adc	r23, r19
    1868:	84 1f       	adc	r24, r20
    186a:	95 1f       	adc	r25, r21
    186c:	a0 1d       	adc	r26, r0
    186e:	08 95       	ret

00001870 <_exit>:
    1870:	f8 94       	cli

00001872 <__stop_program>:
    1872:	ff cf       	rjmp	.-2      	; 0x1872 <__stop_program>
