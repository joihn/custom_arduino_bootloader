
Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d26  00000dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  00000dbc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ff5  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001abe  00000000  00000000  00006055  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c6d  00000000  00000000  00007b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000a780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000213d  00000000  00000000  0000ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002be4  00000000  00000000  0000cfd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000fbb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
   2:	00 00       	nop
   4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
   6:	00 00       	nop
   8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
   a:	00 00       	nop
   c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
   e:	00 00       	nop
  10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
  12:	00 00       	nop
  14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
  16:	00 00       	nop
  18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
  22:	00 00       	nop
  24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
  26:	00 00       	nop
  28:	40 c3       	rjmp	.+1664   	; 0x6aa <__vector_10>
  2a:	00 00       	nop
  2c:	b1 c0       	rjmp	.+354    	; 0x190 <__bad_interrupt>
  2e:	00 00       	nop
  30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
  36:	00 00       	nop
  38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a7 c0       	rjmp	.+334    	; 0x190 <__bad_interrupt>
  42:	00 00       	nop
  44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
  46:	00 00       	nop
  48:	a3 c0       	rjmp	.+326    	; 0x190 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
  52:	00 00       	nop
  54:	9d c0       	rjmp	.+314    	; 0x190 <__bad_interrupt>
  56:	00 00       	nop
  58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
  5e:	00 00       	nop
  60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
  62:	00 00       	nop
  64:	95 c0       	rjmp	.+298    	; 0x190 <__bad_interrupt>
  66:	00 00       	nop
  68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
  72:	00 00       	nop
  74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
  76:	00 00       	nop
  78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
  7e:	00 00       	nop
  80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
  82:	00 00       	nop
  84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
  86:	00 00       	nop
  88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	81 c0       	rjmp	.+258    	; 0x190 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7f c0       	rjmp	.+254    	; 0x190 <__bad_interrupt>
  92:	00 00       	nop
  94:	7d c0       	rjmp	.+250    	; 0x190 <__bad_interrupt>
  96:	00 00       	nop
  98:	40 05       	cpc	r20, r0
  9a:	62 05       	cpc	r22, r2
  9c:	4f 06       	cpc	r4, r31
  9e:	62 05       	cpc	r22, r2
  a0:	4f 06       	cpc	r4, r31
  a2:	a7 05       	cpc	r26, r7
  a4:	ca 05       	cpc	r28, r10
  a6:	4f 06       	cpc	r4, r31
  a8:	1c 06       	cpc	r1, r28
  aa:	2e 06       	cpc	r2, r30

000000ac <ProductString>:
  ac:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
  bc:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
  cc:	00 00                                               ..

000000ce <ManufacturerString>:
  ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ConfigurationDescriptor>:
  ec:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  fc:	02 00 09 21 11 01 00 01 22 36 00 07 05 81 03 08     ...!...."6......
 10c:	00 01                                               ..

0000010e <DeviceDescriptor>:
 10e:	12 01 10 01 00 00 00 08 eb 03 41 20 01 00 01 02     ..........A ....
 11e:	00 01                                               ..

00000120 <MouseReport>:
 120:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 130:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 140:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
 150:	75 08 81 06 c0 c0                                   u.....

00000156 <__ctors_end>:
 156:	11 24       	eor	r1, r1
 158:	1f be       	out	0x3f, r1	; 63
 15a:	cf ef       	ldi	r28, 0xFF	; 255
 15c:	d0 e2       	ldi	r29, 0x20	; 32
 15e:	de bf       	out	0x3e, r29	; 62
 160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
 162:	11 e0       	ldi	r17, 0x01	; 1
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	e6 e2       	ldi	r30, 0x26	; 38
 16a:	fd e0       	ldi	r31, 0x0D	; 13
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	0b bf       	out	0x3b, r16	; 59
 170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x14>
 172:	07 90       	elpm	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	a2 30       	cpi	r26, 0x02	; 2
 178:	b1 07       	cpc	r27, r17
 17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0x10>

0000017c <__do_clear_bss>:
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	a2 e0       	ldi	r26, 0x02	; 2
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
 184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
 186:	a6 31       	cpi	r26, 0x16	; 22
 188:	b2 07       	cpc	r27, r18
 18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
 18c:	65 d1       	rcall	.+714    	; 0x458 <main>
 18e:	c9 c5       	rjmp	.+2962   	; 0xd22 <_exit>

00000190 <__bad_interrupt>:
 190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 192:	9b b1       	in	r25, 0x0b	; 11
 194:	9f 70       	andi	r25, 0x0F	; 15
 196:	89 2b       	or	r24, r25
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	08 95       	ret

0000019c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 19c:	84 b7       	in	r24, 0x34	; 52
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	a8 95       	wdr
 1a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ac:	88 61       	ori	r24, 0x18	; 24
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1b6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1c8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	8f 71       	andi	r24, 0x1F	; 31
 1ce:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1d0:	8d b1       	in	r24, 0x0d	; 13
 1d2:	8f 7c       	andi	r24, 0xCF	; 207
 1d4:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 6e       	ori	r24, 0xE0	; 224
 1da:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1dc:	8e b1       	in	r24, 0x0e	; 14
 1de:	80 63       	ori	r24, 0x30	; 48
 1e0:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1e2:	8a b1       	in	r24, 0x0a	; 10
 1e4:	80 6f       	ori	r24, 0xF0	; 240
 1e6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	8f 70       	andi	r24, 0x0F	; 15
 1ec:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1ee:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1f0:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1f2:	45 c2       	rjmp	.+1162   	; 0x67e <USB_Init>

000001f4 <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1f4:	80 ea       	ldi	r24, 0xA0	; 160
 1f6:	cd df       	rcall	.-102    	; 0x192 <LEDs_SetAllLEDs>

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	08 95       	ret

00000200 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the USB management and Mouse reporting tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 200:	80 e1       	ldi	r24, 0x10	; 16
 202:	c7 cf       	rjmp	.-114    	; 0x192 <LEDs_SetAllLEDs>

00000204 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 204:	42 e0       	ldi	r20, 0x02	; 2
 206:	61 ec       	ldi	r22, 0xC1	; 193
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	6e d1       	rcall	.+732    	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 20c:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 210:	94 60       	ori	r25, 0x04	; 4
 212:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 216:	81 11       	cpse	r24, r1
 218:	02 c0       	rjmp	.+4      	; 0x21e <EVENT_USB_Device_ConfigurationChanged+0x1a>
 21a:	80 e9       	ldi	r24, 0x90	; 144
 21c:	01 c0       	rjmp	.+2      	; 0x220 <EVENT_USB_Device_ConfigurationChanged+0x1c>
 21e:	80 e6       	ldi	r24, 0x60	; 96
 220:	b8 cf       	rjmp	.-144    	; 0x192 <LEDs_SetAllLEDs>

00000222 <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <IdleMSRemaining>
 226:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <IdleMSRemaining+0x1>
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	29 f0       	breq	.+10     	; 0x238 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <IdleMSRemaining+0x1>
 234:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <IdleMSRemaining>
 238:	08 95       	ret

0000023a <CreateMouseReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateMouseReport(USB_MouseReport_Data_t* const ReportData)
{
 23a:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 23c:	93 b1       	in	r25, 0x03	; 3
 23e:	8c b1       	in	r24, 0x0c	; 12
 240:	80 95       	com	r24
 242:	80 73       	andi	r24, 0x30	; 48
 244:	86 95       	lsr	r24
 246:	90 95       	com	r25
 248:	90 7e       	andi	r25, 0xE0	; 224
 24a:	98 2b       	or	r25, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 24c:	8c b1       	in	r24, 0x0c	; 12
 24e:	80 95       	com	r24
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_MouseReport_Data_t));
 250:	23 e0       	ldi	r18, 0x03	; 3
 252:	df 01       	movw	r26, r30
 254:	1d 92       	st	X+, r1
 256:	2a 95       	dec	r18
 258:	e9 f7       	brne	.-6      	; 0x254 <CreateMouseReport+0x1a>

	if (JoyStatus_LCL & JOY_UP)
 25a:	97 ff       	sbrs	r25, 7
 25c:	02 c0       	rjmp	.+4      	; 0x262 <CreateMouseReport+0x28>
	  ReportData->Y = -1;
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	03 c0       	rjmp	.+6      	; 0x268 <CreateMouseReport+0x2e>
	else if (JoyStatus_LCL & JOY_DOWN)
 262:	94 ff       	sbrs	r25, 4
 264:	02 c0       	rjmp	.+4      	; 0x26a <CreateMouseReport+0x30>
	  ReportData->Y =  1;
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
 26a:	96 ff       	sbrs	r25, 6
 26c:	02 c0       	rjmp	.+4      	; 0x272 <CreateMouseReport+0x38>
	  ReportData->X = -1;
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	03 c0       	rjmp	.+6      	; 0x278 <CreateMouseReport+0x3e>
	else if (JoyStatus_LCL & JOY_RIGHT)
 272:	93 ff       	sbrs	r25, 3
 274:	02 c0       	rjmp	.+4      	; 0x27a <CreateMouseReport+0x40>
	  ReportData->X =  1;
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	21 83       	std	Z+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
 27a:	95 ff       	sbrs	r25, 5
 27c:	03 c0       	rjmp	.+6      	; 0x284 <CreateMouseReport+0x4a>
	  ReportData->Button |= (1 << 0);
 27e:	90 81       	ld	r25, Z
 280:	91 60       	ori	r25, 0x01	; 1
 282:	90 83       	st	Z, r25

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 284:	82 ff       	sbrs	r24, 2
 286:	03 c0       	rjmp	.+6      	; 0x28e <CreateMouseReport+0x54>
	  ReportData->Button |= (1 << 1);
 288:	80 81       	ld	r24, Z
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <EVENT_USB_Device_ControlRequest+0x6>
 296:	1f 92       	push	r1
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 29c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x1>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	29 f1       	breq	.+74     	; 0x2ee <EVENT_USB_Device_ControlRequest+0x5e>
 2a4:	30 f4       	brcc	.+12     	; 0x2b2 <EVENT_USB_Device_ControlRequest+0x22>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	51 f0       	breq	.+20     	; 0x2be <EVENT_USB_Device_ControlRequest+0x2e>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x20>
 2ae:	5b c0       	rjmp	.+182    	; 0x366 <EVENT_USB_Device_ControlRequest+0xd6>
 2b0:	73 c0       	rjmp	.+230    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
 2b2:	8a 30       	cpi	r24, 0x0A	; 10
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x28>
 2b6:	3e c0       	rjmp	.+124    	; 0x334 <EVENT_USB_Device_ControlRequest+0xa4>
 2b8:	8b 30       	cpi	r24, 0x0B	; 11
 2ba:	31 f1       	breq	.+76     	; 0x308 <EVENT_USB_Device_ControlRequest+0x78>
 2bc:	6d c0       	rjmp	.+218    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
 2c2:	81 3a       	cpi	r24, 0xA1	; 161
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <EVENT_USB_Device_ControlRequest+0x38>
 2c6:	68 c0       	rjmp	.+208    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
			{
				USB_MouseReport_Data_t MouseReportData;

				/* Create the next mouse report for transmission to the host */
				CreateMouseReport(&MouseReportData);
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	b6 df       	rcall	.-148    	; 0x23a <CreateMouseReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2d2:	87 7f       	andi	r24, 0xF7	; 247
 2d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&MouseReportData, sizeof(MouseReportData));
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	f6 d2       	rcall	.+1516   	; 0x8ce <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2e6:	8b 77       	andi	r24, 0x7B	; 123
 2e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2ec:	55 c0       	rjmp	.+170    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
				memset(&MouseReportData, 0, sizeof(MouseReportData));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2ee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
 2f2:	81 3a       	cpi	r24, 0xA1	; 161
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <EVENT_USB_Device_ControlRequest+0x68>
 2f6:	50 c0       	rjmp	.+160    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2fc:	87 7f       	andi	r24, 0xF7	; 247
 2fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_8(UsingReportProtocol);
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 306:	40 c0       	rjmp	.+128    	; 0x388 <EVENT_USB_Device_ControlRequest+0xf8>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 308:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
 30c:	81 32       	cpi	r24, 0x21	; 33
 30e:	09 f0       	breq	.+2      	; 0x312 <EVENT_USB_Device_ControlRequest+0x82>
 310:	43 c0       	rjmp	.+134    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
 312:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 31c:	19 d1       	rcall	.+562    	; 0x550 <Endpoint_ClearStatusStage>

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 324:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
 328:	23 2b       	or	r18, r19
 32a:	09 f4       	brne	.+2      	; 0x32e <EVENT_USB_Device_ControlRequest+0x9e>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 332:	32 c0       	rjmp	.+100    	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 334:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
 338:	81 32       	cpi	r24, 0x21	; 33
 33a:	71 f5       	brne	.+92     	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
 33c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 346:	04 d1       	rcall	.+520    	; 0x550 <Endpoint_ClearStatusStage>

				/* Get idle period in MSB, must multiply by 4 to get the duration in milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 348:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 34c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
 350:	88 27       	eor	r24, r24
 352:	36 e0       	ldi	r19, 0x06	; 6
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	3a 95       	dec	r19
 35a:	e1 f7       	brne	.-8      	; 0x354 <EVENT_USB_Device_ControlRequest+0xc4>
 35c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <IdleCount+0x1>
 360:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <IdleCount>
 364:	19 c0       	rjmp	.+50     	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 366:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
 36a:	81 3a       	cpi	r24, 0xA1	; 161
 36c:	a9 f4       	brne	.+42     	; 0x398 <EVENT_USB_Device_ControlRequest+0x108>
 36e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 372:	87 7f       	andi	r24, 0xF7	; 247
 374:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_8(IdleCount >> 2);
 378:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <IdleCount>
 37c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <IdleCount+0x1>
 380:	96 95       	lsr	r25
 382:	87 95       	ror	r24
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 388:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 38c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 390:	8e 77       	andi	r24, 0x7E	; 126
 392:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 396:	dc d0       	rcall	.+440    	; 0x550 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <SendNextReport>:
	  ReportData->Button |= (1 << 1);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <SendNextReport+0x6>
 3aa:	1f 92       	push	r1
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	static USB_MouseReport_Data_t PrevMouseReportData;
	USB_MouseReport_Data_t        MouseReportData;
	bool                          SendReport;

	/* Create the next mouse report for transmission to the host */
	CreateMouseReport(&MouseReportData);
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	42 df       	rcall	.-380    	; 0x23a <CreateMouseReport>

	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevMouseReportData, &MouseReportData, sizeof(USB_MouseReport_Data_t)) != 0);
 3b6:	43 e0       	ldi	r20, 0x03	; 3
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	be 01       	movw	r22, r28
 3bc:	6f 5f       	subi	r22, 0xFF	; 255
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	a1 d4       	rcall	.+2370   	; 0xd08 <memcmp>
 3c6:	9c 01       	movw	r18, r24

	/* Override the check if the Y or X values are non-zero - we want continuous movement while the joystick
	 * is being held down (via continuous reports), otherwise the cursor will only move once per joystick toggle */
	if ((MouseReportData.Y != 0) || (MouseReportData.X != 0))
 3c8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ca:	81 11       	cpse	r24, r1
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <SendNextReport+0x3a>
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
	  SendReport = true;
 3d0:	91 e0       	ldi	r25, 0x01	; 1
	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevMouseReportData, &MouseReportData, sizeof(USB_MouseReport_Data_t)) != 0);

	/* Override the check if the Y or X values are non-zero - we want continuous movement while the joystick
	 * is being held down (via continuous reports), otherwise the cursor will only move once per joystick toggle */
	if ((MouseReportData.Y != 0) || (MouseReportData.X != 0))
 3d2:	81 11       	cpse	r24, r1
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <SendNextReport+0x3c>

	/* Create the next mouse report for transmission to the host */
	CreateMouseReport(&MouseReportData);

	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevMouseReportData, &MouseReportData, sizeof(USB_MouseReport_Data_t)) != 0);
 3d6:	23 2b       	or	r18, r19
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <SendNextReport+0x3c>
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <SendNextReport+0x3c>

	/* Override the check if the Y or X values are non-zero - we want continuous movement while the joystick
	 * is being held down (via continuous reports), otherwise the cursor will only move once per joystick toggle */
	if ((MouseReportData.Y != 0) || (MouseReportData.X != 0))
	  SendReport = true;
 3de:	91 e0       	ldi	r25, 0x01	; 1

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 3e0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <IdleCount>
 3e4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <IdleCount+0x1>
 3e8:	21 15       	cp	r18, r1
 3ea:	31 05       	cpc	r19, r1
 3ec:	59 f0       	breq	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ee:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <IdleMSRemaining>
 3f2:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <IdleMSRemaining+0x1>
 3f6:	45 2b       	or	r20, r21
 3f8:	29 f4       	brne	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 3fa:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <IdleMSRemaining+0x1>
 3fe:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <IdleMSRemaining>

		/* Idle period is set and has elapsed, must send a report to the host */
		SendReport = true;
 402:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 40a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_EPNUM);

	/* Check if Mouse Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 40e:	85 ff       	sbrs	r24, 5
 410:	17 c0       	rjmp	.+46     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 412:	99 23       	and	r25, r25
 414:	a9 f0       	breq	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		/* Save the current report data for later comparison to check for changes */
		PrevMouseReportData = MouseReportData;
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	ab 81       	ldd	r26, Y+3	; 0x03
 41c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 420:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 424:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>

		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	02 d2       	rcall	.+1028   	; 0x83a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 436:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 43a:	8e 77       	andi	r24, 0x7E	; 126
 43c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <Mouse_Task>:

/** Task to manage HID report generation and transmission to the host, when in report mode. */
void Mouse_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 44c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
 450:	84 30       	cpi	r24, 0x04	; 4
 452:	09 f4       	brne	.+2      	; 0x456 <Mouse_Task+0xa>
	  return;

	/* Send the next mouse report to the host */
	SendNextReport();
 454:	a7 cf       	rjmp	.-178    	; 0x3a4 <SendNextReport>
 456:	08 95       	ret

00000458 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 458:	a1 de       	rcall	.-702    	; 0x19c <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 45a:	80 e1       	ldi	r24, 0x10	; 16
 45c:	9a de       	rcall	.-716    	; 0x192 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		Mouse_Task();
 45e:	78 94       	sei
 460:	f5 df       	rcall	.-22     	; 0x44c <Mouse_Task>
		USB_USBTask();
 462:	37 d4       	rcall	.+2158   	; 0xcd2 <USB_USBTask>
 464:	fd cf       	rjmp	.-6      	; 0x460 <main+0x8>

00000466 <CALLBACK_USB_GetDescriptor>:
 466:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 468:	33 27       	eor	r19, r19
 46a:	23 30       	cpi	r18, 0x03	; 3
 46c:	31 05       	cpc	r19, r1
 46e:	e1 f0       	breq	.+56     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x42>
 470:	58 f4       	brcc	.+22     	; 0x488 <CALLBACK_USB_GetDescriptor+0x22>
 472:	21 30       	cpi	r18, 0x01	; 1
 474:	31 05       	cpc	r19, r1
 476:	99 f0       	breq	.+38     	; 0x49e <CALLBACK_USB_GetDescriptor+0x38>
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	69 f5       	brne	.+90     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 47e:	82 e2       	ldi	r24, 0x22	; 34
 480:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 482:	2c ee       	ldi	r18, 0xEC	; 236
 484:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 486:	2c c0       	rjmp	.+88     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 488:	21 32       	cpi	r18, 0x21	; 33
 48a:	31 05       	cpc	r19, r1
 48c:	01 f1       	breq	.+64     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x68>
 48e:	22 32       	cpi	r18, 0x22	; 34
 490:	31 05       	cpc	r19, r1
 492:	11 f5       	brne	.+68     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
 498:	20 e2       	ldi	r18, 0x20	; 32
 49a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
 49c:	21 c0       	rjmp	.+66     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 49e:	82 e1       	ldi	r24, 0x12	; 18
 4a0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 4a2:	2e e0       	ldi	r18, 0x0E	; 14
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	1c c0       	rjmp	.+56     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 4a8:	99 27       	eor	r25, r25
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	91 05       	cpc	r25, r1
 4ae:	49 f0       	breq	.+18     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x5c>
 4b0:	28 f0       	brcs	.+10     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x56>
 4b2:	02 97       	sbiw	r24, 0x02	; 2
 4b4:	89 f4       	brne	.+34     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4b6:	ec ea       	ldi	r30, 0xAC	; 172
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4bc:	e8 ee       	ldi	r30, 0xE8	; 232
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4c2:	ee ec       	ldi	r30, 0xCE	; 206
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4c6:	84 91       	lpm	r24, Z
 4c8:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 4ca:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 4ce:	89 e0       	ldi	r24, 0x09	; 9
 4d0:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
 4d2:	2e ef       	ldi	r18, 0xFE	; 254
 4d4:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
 4e0:	fa 01       	movw	r30, r20
 4e2:	31 83       	std	Z+1, r19	; 0x01
 4e4:	20 83       	st	Z, r18
	return Size;
}
 4e6:	08 95       	ret

000004e8 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 4e8:	98 2f       	mov	r25, r24
 4ea:	97 30       	cpi	r25, 0x07	; 7
 4ec:	68 f5       	brcc	.+90     	; 0x548 <Endpoint_ConfigureEndpoint_Prv+0x60>
 4ee:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 4f2:	98 17       	cp	r25, r24
 4f4:	39 f0       	breq	.+14     	; 0x504 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 4f6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 4fa:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4fe:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 502:	03 c0       	rjmp	.+6      	; 0x50a <Endpoint_ConfigureEndpoint_Prv+0x22>
 504:	24 2f       	mov	r18, r20
 506:	76 2f       	mov	r23, r22
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	21 fd       	sbrc	r18, 1
 50c:	02 c0       	rjmp	.+4      	; 0x512 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 50e:	9f 5f       	subi	r25, 0xFF	; 255
 510:	ec cf       	rjmp	.-40     	; 0x4ea <Endpoint_ConfigureEndpoint_Prv+0x2>
 512:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 516:	3e 7f       	andi	r19, 0xFE	; 254
 518:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 51c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 520:	3d 7f       	andi	r19, 0xFD	; 253
 522:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 526:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 52a:	31 60       	ori	r19, 0x01	; 1
 52c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 530:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 534:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 538:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 53c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 540:	27 fd       	sbrc	r18, 7
 542:	e5 cf       	rjmp	.-54     	; 0x50e <Endpoint_ConfigureEndpoint_Prv+0x26>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
 548:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	08 95       	ret

00000550 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 550:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
 554:	87 ff       	sbrs	r24, 7
 556:	11 c0       	rjmp	.+34     	; 0x57a <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 558:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 55c:	82 fd       	sbrc	r24, 2
 55e:	05 c0       	rjmp	.+10     	; 0x56a <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 560:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
 564:	81 11       	cpse	r24, r1
 566:	f8 cf       	rjmp	.-16     	; 0x558 <Endpoint_ClearStatusStage+0x8>
 568:	11 c0       	rjmp	.+34     	; 0x58c <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 56a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 56e:	8b 77       	andi	r24, 0x7B	; 123
 570:	0b c0       	rjmp	.+22     	; 0x588 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 572:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
 576:	88 23       	and	r24, r24
 578:	49 f0       	breq	.+18     	; 0x58c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 57a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 57e:	80 ff       	sbrs	r24, 0
 580:	f8 cf       	rjmp	.-16     	; 0x572 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 582:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 586:	8e 77       	andi	r24, 0x7E	; 126
 588:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 58c:	08 95       	ret

0000058e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 58e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 592:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 596:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 598:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 59c:	84 2f       	mov	r24, r20
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	40 ff       	sbrs	r20, 0
 5a2:	23 c0       	rjmp	.+70     	; 0x5ea <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 5a8:	80 fd       	sbrc	r24, 0
 5aa:	1d c0       	rjmp	.+58     	; 0x5e6 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5b0:	88 23       	and	r24, r24
 5b2:	99 f0       	breq	.+38     	; 0x5da <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5b4:	85 30       	cpi	r24, 0x05	; 5
 5b6:	99 f0       	breq	.+38     	; 0x5de <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5bc:	85 fd       	sbrc	r24, 5
 5be:	11 c0       	rjmp	.+34     	; 0x5e2 <Endpoint_WaitUntilReady+0x54>
 5c0:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5c4:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 5c8:	24 17       	cp	r18, r20
 5ca:	35 07       	cpc	r19, r21
 5cc:	29 f3       	breq	.-54     	; 0x598 <Endpoint_WaitUntilReady+0xa>
 5ce:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <Endpoint_WaitUntilReady+0x48>
 5d2:	9a 01       	movw	r18, r20
 5d4:	e1 cf       	rjmp	.-62     	; 0x598 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 5d6:	84 e0       	ldi	r24, 0x04	; 4
 5d8:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5ea:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5ee:	42 ff       	sbrs	r20, 2
 5f0:	dd cf       	rjmp	.-70     	; 0x5ac <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 5f2:	08 95       	ret

000005f4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5fc:	49 d0       	rcall	.+146    	; 0x690 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5fe:	50 d0       	rcall	.+160    	; 0x6a0 <USB_INT_ClearAllInterrupts>
 600:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 602:	d0 e0       	ldi	r29, 0x00	; 0
 604:	88 81       	ld	r24, Y
 606:	8f 77       	andi	r24, 0x7F	; 127
 608:	88 83       	st	Y, r24
 60a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 60c:	80 68       	ori	r24, 0x80	; 128
 60e:	88 83       	st	Y, r24
 610:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 612:	8f 7d       	andi	r24, 0xDF	; 223
 614:	88 83       	st	Y, r24
 616:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	80 68       	ori	r24, 0x80	; 128
 61e:	80 83       	st	Z, r24
 620:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 622:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 626:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 62a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 62e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 632:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 634:	10 e0       	ldi	r17, 0x00	; 0
 636:	f8 01       	movw	r30, r16
 638:	80 81       	ld	r24, Z
 63a:	8b 7f       	andi	r24, 0xFB	; 251
 63c:	80 83       	st	Z, r24
 63e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 640:	81 60       	ori	r24, 0x01	; 1
 642:	88 83       	st	Y, r24
 644:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	4e df       	rcall	.-356    	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv>
 64c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	8e 7f       	andi	r24, 0xFE	; 254
 654:	80 83       	st	Z, r24
 656:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	81 60       	ori	r24, 0x01	; 1
 65e:	80 83       	st	Z, r24
 660:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 662:	88 60       	ori	r24, 0x08	; 8
 664:	80 83       	st	Z, r24
 666:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 668:	80 81       	ld	r24, Z
 66a:	8e 7f       	andi	r24, 0xFE	; 254
 66c:	80 83       	st	Z, r24
 66e:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 670:	80 61       	ori	r24, 0x10	; 16
 672:	88 83       	st	Y, r24
 674:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	08 95       	ret

0000067e <USB_Init>:
 67e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	81 60       	ori	r24, 0x01	; 1
 686:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_IsInitialized>

	USB_ResetInterface();
 68e:	b2 cf       	rjmp	.-156    	; 0x5f4 <USB_ResetInterface>

00000690 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 690:	e8 ed       	ldi	r30, 0xD8	; 216
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	8c 7f       	andi	r24, 0xFC	; 252
 698:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 69a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 69e:	08 95       	ret

000006a0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 6a0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 6a4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6a8:	08 95       	ret

000006aa <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	0b b6       	in	r0, 0x3b	; 59
 6b6:	0f 92       	push	r0
 6b8:	2f 93       	push	r18
 6ba:	3f 93       	push	r19
 6bc:	4f 93       	push	r20
 6be:	5f 93       	push	r21
 6c0:	6f 93       	push	r22
 6c2:	7f 93       	push	r23
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	af 93       	push	r26
 6ca:	bf 93       	push	r27
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 6d0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6d4:	82 ff       	sbrs	r24, 2
 6d6:	0a c0       	rjmp	.+20     	; 0x6ec <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 6d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6dc:	82 ff       	sbrs	r24, 2
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6e0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6e4:	8b 7f       	andi	r24, 0xFB	; 251
 6e6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6ea:	9b dd       	rcall	.-1226   	; 0x222 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6ec:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6f0:	80 ff       	sbrs	r24, 0
 6f2:	1d c0       	rjmp	.+58     	; 0x72e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6f8:	80 ff       	sbrs	r24, 0
 6fa:	19 c0       	rjmp	.+50     	; 0x72e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6fc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 700:	8e 7f       	andi	r24, 0xFE	; 254
 702:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 706:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 70a:	80 ff       	sbrs	r24, 0
 70c:	0c c0       	rjmp	.+24     	; 0x726 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 70e:	8c e0       	ldi	r24, 0x0C	; 12
 710:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 712:	8e e0       	ldi	r24, 0x0E	; 14
 714:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 716:	09 b4       	in	r0, 0x29	; 41
 718:	00 fe       	sbrs	r0, 0
 71a:	fd cf       	rjmp	.-6      	; 0x716 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
			EVENT_USB_Device_Connect();
 722:	68 dd       	rcall	.-1328   	; 0x1f4 <EVENT_USB_Device_Connect>
 724:	04 c0       	rjmp	.+8      	; 0x72e <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 726:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 728:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 72c:	69 dd       	rcall	.-1326   	; 0x200 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 72e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 732:	80 ff       	sbrs	r24, 0
 734:	18 c0       	rjmp	.+48     	; 0x766 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 736:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 73a:	80 ff       	sbrs	r24, 0
 73c:	14 c0       	rjmp	.+40     	; 0x766 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 73e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 742:	8e 7f       	andi	r24, 0xFE	; 254
 744:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 748:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 74c:	80 61       	ori	r24, 0x10	; 16
 74e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 752:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 756:	80 62       	ori	r24, 0x20	; 32
 758:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 75c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 75e:	85 e0       	ldi	r24, 0x05	; 5
 760:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 764:	b5 d2       	rcall	.+1386   	; 0xcd0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 766:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 76a:	84 ff       	sbrs	r24, 4
 76c:	2d c0       	rjmp	.+90     	; 0x7c8 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 76e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 772:	84 ff       	sbrs	r24, 4
 774:	29 c0       	rjmp	.+82     	; 0x7c8 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 776:	8c e0       	ldi	r24, 0x0C	; 12
 778:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 77a:	8e e0       	ldi	r24, 0x0E	; 14
 77c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 77e:	09 b4       	in	r0, 0x29	; 41
 780:	00 fe       	sbrs	r0, 0
 782:	fd cf       	rjmp	.-6      	; 0x77e <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 784:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 788:	8f 7d       	andi	r24, 0xDF	; 223
 78a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 78e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 792:	8f 7e       	andi	r24, 0xEF	; 239
 794:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 798:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 79c:	8f 7e       	andi	r24, 0xEF	; 239
 79e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7a6:	81 60       	ori	r24, 0x01	; 1
 7a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7ac:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
 7b0:	81 11       	cpse	r24, r1
 7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7b4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 7b8:	87 fd       	sbrc	r24, 7
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <__vector_10+0x116>
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	01 c0       	rjmp	.+2      	; 0x7c2 <__vector_10+0x118>
 7c0:	84 e0       	ldi	r24, 0x04	; 4
 7c2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7c6:	84 d2       	rcall	.+1288   	; 0xcd0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7cc:	83 ff       	sbrs	r24, 3
 7ce:	22 c0       	rjmp	.+68     	; 0x814 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7d4:	83 ff       	sbrs	r24, 3
 7d6:	1e c0       	rjmp	.+60     	; 0x814 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 7dc:	87 7f       	andi	r24, 0xF7	; 247
 7de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 7e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 7f0:	8e 7f       	andi	r24, 0xFE	; 254
 7f2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7fa:	8e 7f       	andi	r24, 0xFE	; 254
 7fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 800:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 804:	80 61       	ori	r24, 0x10	; 16
 806:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 80a:	42 e0       	ldi	r20, 0x02	; 2
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	6b de       	rcall	.-810    	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 812:	5e d2       	rcall	.+1212   	; 0xcd0 <USB_Event_Stub>
 814:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 816:	ef 91       	pop	r30
 818:	bf 91       	pop	r27
 81a:	af 91       	pop	r26
 81c:	9f 91       	pop	r25
 81e:	8f 91       	pop	r24
 820:	7f 91       	pop	r23
 822:	6f 91       	pop	r22
 824:	5f 91       	pop	r21
 826:	4f 91       	pop	r20
 828:	3f 91       	pop	r19
 82a:	2f 91       	pop	r18
 82c:	0f 90       	pop	r0
 82e:	0b be       	out	0x3b, r0	; 59
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	0f 90       	pop	r0
 836:	1f 90       	pop	r1
 838:	18 95       	reti

0000083a <Endpoint_Write_Stream_LE>:
 83a:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 83c:	df 92       	push	r13
 83e:	ef 92       	push	r14
 840:	ff 92       	push	r15
 842:	0f 93       	push	r16
 844:	1f 93       	push	r17
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	ec 01       	movw	r28, r24
 84c:	8b 01       	movw	r16, r22
 84e:	7a 01       	movw	r14, r20
 850:	9e de       	rcall	.-708    	; 0x58e <Endpoint_WaitUntilReady>
 852:	81 11       	cpse	r24, r1
 854:	33 c0       	rjmp	.+102    	; 0x8bc <Endpoint_Write_Stream_LE+0x82>
 856:	e1 14       	cp	r14, r1
 858:	f1 04       	cpc	r15, r1
 85a:	39 f0       	breq	.+14     	; 0x86a <Endpoint_Write_Stream_LE+0x30>
 85c:	f7 01       	movw	r30, r14
 85e:	80 81       	ld	r24, Z
 860:	91 81       	ldd	r25, Z+1	; 0x01
 862:	08 1b       	sub	r16, r24
 864:	19 0b       	sbc	r17, r25
 866:	c8 0f       	add	r28, r24
 868:	d9 1f       	adc	r29, r25
 86a:	c1 2c       	mov	r12, r1
 86c:	d1 2c       	mov	r13, r1
 86e:	01 15       	cp	r16, r1
 870:	11 05       	cpc	r17, r1
 872:	19 f1       	breq	.+70     	; 0x8ba <Endpoint_Write_Stream_LE+0x80>
 874:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 878:	85 fd       	sbrc	r24, 5
 87a:	16 c0       	rjmp	.+44     	; 0x8a8 <Endpoint_Write_Stream_LE+0x6e>
 87c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 880:	8e 77       	andi	r24, 0x7E	; 126
 882:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 886:	25 d2       	rcall	.+1098   	; 0xcd2 <USB_USBTask>
 888:	e1 14       	cp	r14, r1
 88a:	f1 04       	cpc	r15, r1
 88c:	49 f0       	breq	.+18     	; 0x8a0 <Endpoint_Write_Stream_LE+0x66>
 88e:	f7 01       	movw	r30, r14
 890:	80 81       	ld	r24, Z
 892:	91 81       	ldd	r25, Z+1	; 0x01
 894:	c8 0e       	add	r12, r24
 896:	d9 1e       	adc	r13, r25
 898:	d1 82       	std	Z+1, r13	; 0x01
 89a:	c0 82       	st	Z, r12
 89c:	85 e0       	ldi	r24, 0x05	; 5
 89e:	0e c0       	rjmp	.+28     	; 0x8bc <Endpoint_Write_Stream_LE+0x82>
 8a0:	76 de       	rcall	.-788    	; 0x58e <Endpoint_WaitUntilReady>
 8a2:	88 23       	and	r24, r24
 8a4:	21 f3       	breq	.-56     	; 0x86e <Endpoint_Write_Stream_LE+0x34>
 8a6:	0a c0       	rjmp	.+20     	; 0x8bc <Endpoint_Write_Stream_LE+0x82>
 8a8:	89 91       	ld	r24, Y+
 8aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8ae:	01 50       	subi	r16, 0x01	; 1
 8b0:	11 09       	sbc	r17, r1
 8b2:	ff ef       	ldi	r31, 0xFF	; 255
 8b4:	cf 1a       	sub	r12, r31
 8b6:	df 0a       	sbc	r13, r31
 8b8:	da cf       	rjmp	.-76     	; 0x86e <Endpoint_Write_Stream_LE+0x34>
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	1f 91       	pop	r17
 8c2:	0f 91       	pop	r16
 8c4:	ff 90       	pop	r15
 8c6:	ef 90       	pop	r14
 8c8:	df 90       	pop	r13
 8ca:	cf 90       	pop	r12
 8cc:	08 95       	ret

000008ce <Endpoint_Write_Control_Stream_LE>:
 8ce:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_ControlRequest+0x6>
 8d2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <USB_ControlRequest+0x7>
 8d6:	26 17       	cp	r18, r22
 8d8:	37 07       	cpc	r19, r23
 8da:	48 f0       	brcs	.+18     	; 0x8ee <Endpoint_Write_Control_Stream_LE+0x20>
 8dc:	61 15       	cp	r22, r1
 8de:	71 05       	cpc	r23, r1
 8e0:	39 f4       	brne	.+14     	; 0x8f0 <Endpoint_Write_Control_Stream_LE+0x22>
 8e2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e6:	2e 77       	andi	r18, 0x7E	; 126
 8e8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <Endpoint_Write_Control_Stream_LE+0x22>
 8ee:	b9 01       	movw	r22, r18
 8f0:	fc 01       	movw	r30, r24
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	61 15       	cp	r22, r1
 8f6:	71 05       	cpc	r23, r1
 8f8:	69 f1       	breq	.+90     	; 0x954 <Endpoint_Write_Control_Stream_LE+0x86>
 8fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
 8fe:	88 23       	and	r24, r24
 900:	d1 f1       	breq	.+116    	; 0x976 <Endpoint_Write_Control_Stream_LE+0xa8>
 902:	85 30       	cpi	r24, 0x05	; 5
 904:	d1 f1       	breq	.+116    	; 0x97a <Endpoint_Write_Control_Stream_LE+0xac>
 906:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 90a:	83 fd       	sbrc	r24, 3
 90c:	32 c0       	rjmp	.+100    	; 0x972 <Endpoint_Write_Control_Stream_LE+0xa4>
 90e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 912:	82 fd       	sbrc	r24, 2
 914:	28 c0       	rjmp	.+80     	; 0x966 <Endpoint_Write_Control_Stream_LE+0x98>
 916:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 91a:	80 ff       	sbrs	r24, 0
 91c:	eb cf       	rjmp	.-42     	; 0x8f4 <Endpoint_Write_Control_Stream_LE+0x26>
 91e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 922:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 926:	61 15       	cp	r22, r1
 928:	71 05       	cpc	r23, r1
 92a:	51 f0       	breq	.+20     	; 0x940 <Endpoint_Write_Control_Stream_LE+0x72>
 92c:	88 30       	cpi	r24, 0x08	; 8
 92e:	91 05       	cpc	r25, r1
 930:	38 f4       	brcc	.+14     	; 0x940 <Endpoint_Write_Control_Stream_LE+0x72>
 932:	21 91       	ld	r18, Z+
 934:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 938:	61 50       	subi	r22, 0x01	; 1
 93a:	71 09       	sbc	r23, r1
 93c:	01 96       	adiw	r24, 0x01	; 1
 93e:	f3 cf       	rjmp	.-26     	; 0x926 <Endpoint_Write_Control_Stream_LE+0x58>
 940:	21 e0       	ldi	r18, 0x01	; 1
 942:	08 97       	sbiw	r24, 0x08	; 8
 944:	09 f0       	breq	.+2      	; 0x948 <Endpoint_Write_Control_Stream_LE+0x7a>
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 94c:	8e 77       	andi	r24, 0x7E	; 126
 94e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 952:	d0 cf       	rjmp	.-96     	; 0x8f4 <Endpoint_Write_Control_Stream_LE+0x26>
 954:	21 11       	cpse	r18, r1
 956:	d1 cf       	rjmp	.-94     	; 0x8fa <Endpoint_Write_Control_Stream_LE+0x2c>
 958:	06 c0       	rjmp	.+12     	; 0x966 <Endpoint_Write_Control_Stream_LE+0x98>
 95a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
 95e:	88 23       	and	r24, r24
 960:	51 f0       	breq	.+20     	; 0x976 <Endpoint_Write_Control_Stream_LE+0xa8>
 962:	85 30       	cpi	r24, 0x05	; 5
 964:	51 f0       	breq	.+20     	; 0x97a <Endpoint_Write_Control_Stream_LE+0xac>
 966:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 96a:	82 ff       	sbrs	r24, 2
 96c:	f6 cf       	rjmp	.-20     	; 0x95a <Endpoint_Write_Control_Stream_LE+0x8c>
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	08 95       	ret
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	08 95       	ret
 976:	82 e0       	ldi	r24, 0x02	; 2
 978:	08 95       	ret
 97a:	83 e0       	ldi	r24, 0x03	; 3
 97c:	08 95       	ret

0000097e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 97e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_ControlRequest+0x6>
 982:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <USB_ControlRequest+0x7>
 986:	26 17       	cp	r18, r22
 988:	37 07       	cpc	r19, r23
 98a:	48 f0       	brcs	.+18     	; 0x99e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 98c:	61 15       	cp	r22, r1
 98e:	71 05       	cpc	r23, r1
 990:	39 f4       	brne	.+14     	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 992:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 996:	2e 77       	andi	r18, 0x7E	; 126
 998:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x22>
 99e:	b9 01       	movw	r22, r18
 9a0:	fc 01       	movw	r30, r24
 9a2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9a4:	61 15       	cp	r22, r1
 9a6:	71 05       	cpc	r23, r1
 9a8:	71 f1       	breq	.+92     	; 0xa06 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9aa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9ae:	88 23       	and	r24, r24
 9b0:	d9 f1       	breq	.+118    	; 0xa28 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9b2:	85 30       	cpi	r24, 0x05	; 5
 9b4:	d9 f1       	breq	.+118    	; 0xa2c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9ba:	83 fd       	sbrc	r24, 3
 9bc:	33 c0       	rjmp	.+102    	; 0xa24 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9c2:	82 fd       	sbrc	r24, 2
 9c4:	29 c0       	rjmp	.+82     	; 0xa18 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 9ca:	80 ff       	sbrs	r24, 0
 9cc:	eb cf       	rjmp	.-42     	; 0x9a4 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9ce:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 9d2:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 9d6:	61 15       	cp	r22, r1
 9d8:	71 05       	cpc	r23, r1
 9da:	59 f0       	breq	.+22     	; 0x9f2 <Endpoint_Write_Control_PStream_LE+0x74>
 9dc:	88 30       	cpi	r24, 0x08	; 8
 9de:	91 05       	cpc	r25, r1
 9e0:	40 f4       	brcc	.+16     	; 0x9f2 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9e2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9e4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 9e8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 9ea:	61 50       	subi	r22, 0x01	; 1
 9ec:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 9ee:	01 96       	adiw	r24, 0x01	; 1
 9f0:	f2 cf       	rjmp	.-28     	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 9f2:	21 e0       	ldi	r18, 0x01	; 1
 9f4:	08 97       	sbiw	r24, 0x08	; 8
 9f6:	09 f0       	breq	.+2      	; 0x9fa <Endpoint_Write_Control_PStream_LE+0x7c>
 9f8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9fe:	8e 77       	andi	r24, 0x7E	; 126
 a00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a04:	cf cf       	rjmp	.-98     	; 0x9a4 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a06:	21 11       	cpse	r18, r1
 a08:	d0 cf       	rjmp	.-96     	; 0x9aa <Endpoint_Write_Control_PStream_LE+0x2c>
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a0c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a10:	88 23       	and	r24, r24
 a12:	51 f0       	breq	.+20     	; 0xa28 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a14:	85 30       	cpi	r24, 0x05	; 5
 a16:	51 f0       	breq	.+20     	; 0xa2c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a1c:	82 ff       	sbrs	r24, 2
 a1e:	f6 cf       	rjmp	.-20     	; 0xa0c <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 a28:	82 e0       	ldi	r24, 0x02	; 2
 a2a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 a2c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a2e:	08 95       	ret

00000a30 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a30:	0f 93       	push	r16
 a32:	1f 93       	push	r17
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	cd b7       	in	r28, 0x3d	; 61
 a3a:	de b7       	in	r29, 0x3e	; 62
 a3c:	aa 97       	sbiw	r28, 0x2a	; 42
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	f8 94       	cli
 a42:	de bf       	out	0x3e, r29	; 62
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	cd bf       	out	0x3d, r28	; 61
 a48:	ee e0       	ldi	r30, 0x0E	; 14
 a4a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a4c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a50:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	e6 31       	cpi	r30, 0x16	; 22
 a56:	f2 07       	cpc	r31, r18
 a58:	c9 f7       	brne	.-14     	; 0xa4c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a5a:	1a dc       	rcall	.-1996   	; 0x290 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 a60:	83 ff       	sbrs	r24, 3
 a62:	1d c1       	rjmp	.+570    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a64:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 a68:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <USB_ControlRequest+0x1>
 a6c:	49 2f       	mov	r20, r25
 a6e:	50 e0       	ldi	r21, 0x00	; 0
 a70:	4a 30       	cpi	r20, 0x0A	; 10
 a72:	51 05       	cpc	r21, r1
 a74:	08 f0       	brcs	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x48>
 a76:	13 c1       	rjmp	.+550    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
 a78:	fa 01       	movw	r30, r20
 a7a:	e4 5b       	subi	r30, 0xB4	; 180
 a7c:	ff 4f       	sbci	r31, 0xFF	; 255
 a7e:	3b c1       	rjmp	.+630    	; 0xcf6 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a80:	80 38       	cpi	r24, 0x80	; 128
 a82:	81 f0       	breq	.+32     	; 0xaa4 <USB_Device_ProcessControlRequest+0x74>
 a84:	82 38       	cpi	r24, 0x82	; 130
 a86:	09 f0       	breq	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0x5a>
 a88:	0a c1       	rjmp	.+532    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a8a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
 a8e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a90:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a94:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 a98:	85 fb       	bst	r24, 5
 a9a:	88 27       	eor	r24, r24
 a9c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a9e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 aa4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 aa8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <USB_Device_RemoteWakeupEnabled>
 aac:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 aae:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ab4:	97 7f       	andi	r25, 0xF7	; 247
 ab6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 aba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 abe:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 ac2:	c5 c0       	rjmp	.+394    	; 0xc4e <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ac4:	28 2f       	mov	r18, r24
 ac6:	2d 7f       	andi	r18, 0xFD	; 253
 ac8:	09 f0       	breq	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x9c>
 aca:	e9 c0       	rjmp	.+466    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 acc:	88 23       	and	r24, r24
 ace:	19 f0       	breq	.+6      	; 0xad6 <USB_Device_ProcessControlRequest+0xa6>
 ad0:	82 30       	cpi	r24, 0x02	; 2
 ad2:	61 f0       	breq	.+24     	; 0xaec <USB_Device_ProcessControlRequest+0xbc>
 ad4:	e4 c0       	rjmp	.+456    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ad6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 ada:	81 30       	cpi	r24, 0x01	; 1
 adc:	09 f0       	breq	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0xb0>
 ade:	df c0       	rjmp	.+446    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ae0:	93 30       	cpi	r25, 0x03	; 3
 ae2:	09 f0       	breq	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0xb6>
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Device_RemoteWakeupEnabled>
 aea:	2b c0       	rjmp	.+86     	; 0xb42 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 aec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 af0:	81 11       	cpse	r24, r1
 af2:	27 c0       	rjmp	.+78     	; 0xb42 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 af4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
 af8:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 afa:	09 f4       	brne	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0xce>
 afc:	d0 c0       	rjmp	.+416    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 afe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b02:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b06:	20 ff       	sbrs	r18, 0
 b08:	1c c0       	rjmp	.+56     	; 0xb42 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b0a:	93 30       	cpi	r25, 0x03	; 3
 b0c:	21 f4       	brne	.+8      	; 0xb16 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b0e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b12:	80 62       	ori	r24, 0x20	; 32
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b16:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b1a:	90 61       	ori	r25, 0x10	; 16
 b1c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 b20:	21 e0       	ldi	r18, 0x01	; 1
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	a9 01       	movw	r20, r18
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <USB_Device_ProcessControlRequest+0xfc>
 b28:	44 0f       	add	r20, r20
 b2a:	55 1f       	adc	r21, r21
 b2c:	8a 95       	dec	r24
 b2e:	e2 f7       	brpl	.-8      	; 0xb28 <USB_Device_ProcessControlRequest+0xf8>
 b30:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 b34:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b38:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b3c:	88 60       	ori	r24, 0x08	; 8
 b3e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b42:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b4a:	87 7f       	andi	r24, 0xF7	; 247
 b4c:	83 c0       	rjmp	.+262    	; 0xc54 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b4e:	81 11       	cpse	r24, r1
 b50:	a6 c0       	rjmp	.+332    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b52:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 b56:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b58:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b5a:	f8 94       	cli
 b5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b60:	87 7f       	andi	r24, 0xF7	; 247
 b62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b66:	f4 dc       	rcall	.-1560   	; 0x550 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 b6c:	80 ff       	sbrs	r24, 0
 b6e:	fc cf       	rjmp	.-8      	; 0xb68 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b70:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 b74:	80 78       	andi	r24, 0x80	; 128
 b76:	81 2b       	or	r24, r17

				UDADDR = Temp;
 b78:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 b7c:	80 68       	ori	r24, 0x80	; 128
 b7e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b82:	11 11       	cpse	r17, r1
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <USB_Device_ProcessControlRequest+0x15a>
 b86:	82 e0       	ldi	r24, 0x02	; 2
 b88:	01 c0       	rjmp	.+2      	; 0xb8c <USB_Device_ProcessControlRequest+0x15c>
 b8a:	83 e0       	ldi	r24, 0x03	; 3
 b8c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b90:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 b92:	85 c0       	rjmp	.+266    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b94:	80 58       	subi	r24, 0x80	; 128
 b96:	82 30       	cpi	r24, 0x02	; 2
 b98:	08 f0       	brcs	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x16c>
 b9a:	81 c0       	rjmp	.+258    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b9c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 ba0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
 ba4:	8c 3d       	cpi	r24, 0xDC	; 220
 ba6:	53 e0       	ldi	r21, 0x03	; 3
 ba8:	95 07       	cpc	r25, r21
 baa:	71 f5       	brne	.+92     	; 0xc08 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bac:	83 e0       	ldi	r24, 0x03	; 3
 bae:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bb0:	8a e2       	ldi	r24, 0x2A	; 42
 bb2:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bb4:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bb6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bb8:	de 01       	movw	r26, r28
 bba:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bbc:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bbe:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bc0:	51 e2       	ldi	r21, 0x21	; 33
 bc2:	e3 2f       	mov	r30, r19
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 bca:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 bcc:	20 ff       	sbrs	r18, 0
 bce:	03 c0       	rjmp	.+6      	; 0xbd6 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 bd0:	e2 95       	swap	r30
 bd2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bd4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 bd6:	ef 70       	andi	r30, 0x0F	; 15
 bd8:	8e 2f       	mov	r24, r30
 bda:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bdc:	ea 30       	cpi	r30, 0x0A	; 10
 bde:	10 f0       	brcs	.+4      	; 0xbe4 <USB_Device_ProcessControlRequest+0x1b4>
 be0:	c7 96       	adiw	r24, 0x37	; 55
 be2:	01 c0       	rjmp	.+2      	; 0xbe6 <USB_Device_ProcessControlRequest+0x1b6>
 be4:	c0 96       	adiw	r24, 0x30	; 48
 be6:	8d 93       	st	X+, r24
 be8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bea:	2f 5f       	subi	r18, 0xFF	; 255
 bec:	24 31       	cpi	r18, 0x14	; 20
 bee:	49 f7       	brne	.-46     	; 0xbc2 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bf0:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bf6:	87 7f       	andi	r24, 0xF7	; 247
 bf8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bfc:	6a e2       	ldi	r22, 0x2A	; 42
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	ce 01       	movw	r24, r28
 c02:	01 96       	adiw	r24, 0x01	; 1
 c04:	64 de       	rcall	.-824    	; 0x8ce <Endpoint_Write_Control_Stream_LE>
 c06:	12 c0       	rjmp	.+36     	; 0xc2c <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c08:	ae 01       	movw	r20, r28
 c0a:	4f 5f       	subi	r20, 0xFF	; 255
 c0c:	5f 4f       	sbci	r21, 0xFF	; 255
 c0e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
 c12:	29 dc       	rcall	.-1966   	; 0x466 <CALLBACK_USB_GetDescriptor>
 c14:	bc 01       	movw	r22, r24
 c16:	89 2b       	or	r24, r25
 c18:	09 f4       	brne	.+2      	; 0xc1c <USB_Device_ProcessControlRequest+0x1ec>
 c1a:	41 c0       	rjmp	.+130    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
 c1c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c20:	97 7f       	andi	r25, 0xF7	; 247
 c22:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c26:	89 81       	ldd	r24, Y+1	; 0x01
 c28:	9a 81       	ldd	r25, Y+2	; 0x02
 c2a:	a9 de       	rcall	.-686    	; 0x97e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c30:	8b 77       	andi	r24, 0x7B	; 123
 c32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c36:	33 c0       	rjmp	.+102    	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c38:	80 38       	cpi	r24, 0x80	; 128
 c3a:	89 f5       	brne	.+98     	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c40:	87 7f       	andi	r24, 0xF7	; 247
 c42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c46:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c4a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c52:	8e 77       	andi	r24, 0x7E	; 126
 c54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c58:	7b dc       	rcall	.-1802   	; 0x550 <Endpoint_ClearStatusStage>
 c5a:	21 c0       	rjmp	.+66     	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c5c:	81 11       	cpse	r24, r1
 c5e:	1f c0       	rjmp	.+62     	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c60:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 c64:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
 c68:	99 27       	eor	r25, r25
 c6a:	02 97       	sbiw	r24, 0x02	; 2
 c6c:	c4 f4       	brge	.+48     	; 0xc9e <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c72:	87 7f       	andi	r24, 0xF7	; 247
 c74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c78:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
 c7c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 c80:	67 dc       	rcall	.-1842   	; 0x550 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 c82:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
 c86:	81 11       	cpse	r24, r1
 c88:	06 c0       	rjmp	.+12     	; 0xc96 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c8a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c8e:	87 fd       	sbrc	r24, 7
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <USB_Device_ProcessControlRequest+0x266>
 c92:	81 e0       	ldi	r24, 0x01	; 1
 c94:	01 c0       	rjmp	.+2      	; 0xc98 <USB_Device_ProcessControlRequest+0x268>
 c96:	84 e0       	ldi	r24, 0x04	; 4
 c98:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 c9c:	b3 da       	rcall	.-2714   	; 0x204 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ca2:	83 ff       	sbrs	r24, 3
 ca4:	0a c0       	rjmp	.+20     	; 0xcba <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ca6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 caa:	80 62       	ori	r24, 0x20	; 32
 cac:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cb4:	87 7f       	andi	r24, 0xF7	; 247
 cb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 cba:	aa 96       	adiw	r28, 0x2a	; 42
 cbc:	0f b6       	in	r0, 0x3f	; 63
 cbe:	f8 94       	cli
 cc0:	de bf       	out	0x3e, r29	; 62
 cc2:	0f be       	out	0x3f, r0	; 63
 cc4:	cd bf       	out	0x3d, r28	; 61
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	1f 91       	pop	r17
 ccc:	0f 91       	pop	r16
 cce:	08 95       	ret

00000cd0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 cd0:	08 95       	ret

00000cd2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cd2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 cd4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
 cd8:	88 23       	and	r24, r24
 cda:	59 f0       	breq	.+22     	; 0xcf2 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cdc:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 ce0:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ce2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ce6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cea:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 cec:	a1 de       	rcall	.-702    	; 0xa30 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cee:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 cf2:	cf 91       	pop	r28
 cf4:	08 95       	ret

00000cf6 <__tablejump2__>:
 cf6:	ee 0f       	add	r30, r30
 cf8:	ff 1f       	adc	r31, r31
 cfa:	00 24       	eor	r0, r0
 cfc:	00 1c       	adc	r0, r0
 cfe:	0b be       	out	0x3b, r0	; 59
 d00:	07 90       	elpm	r0, Z+
 d02:	f6 91       	elpm	r31, Z
 d04:	e0 2d       	mov	r30, r0
 d06:	09 94       	ijmp

00000d08 <memcmp>:
 d08:	fb 01       	movw	r30, r22
 d0a:	dc 01       	movw	r26, r24
 d0c:	04 c0       	rjmp	.+8      	; 0xd16 <memcmp+0xe>
 d0e:	8d 91       	ld	r24, X+
 d10:	01 90       	ld	r0, Z+
 d12:	80 19       	sub	r24, r0
 d14:	21 f4       	brne	.+8      	; 0xd1e <memcmp+0x16>
 d16:	41 50       	subi	r20, 0x01	; 1
 d18:	50 40       	sbci	r21, 0x00	; 0
 d1a:	c8 f7       	brcc	.-14     	; 0xd0e <memcmp+0x6>
 d1c:	88 1b       	sub	r24, r24
 d1e:	99 0b       	sbc	r25, r25
 d20:	08 95       	ret

00000d22 <_exit>:
 d22:	f8 94       	cli

00000d24 <__stop_program>:
 d24:	ff cf       	rjmp	.-2      	; 0xd24 <__stop_program>
