
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001a82  00001b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001b3a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000070ab  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024c4  00000000  00000000  00008fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037c3  00000000  00000000  0000b46b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb4  00000000  00000000  0000ec30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ba3  00000000  00000000  0000f7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004adf  00000000  00000000  00012387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  00016e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	40 c1       	rjmp	.+640    	; 0x286 <__bad_interrupt>
       6:	00 00       	nop
       8:	3e c1       	rjmp	.+636    	; 0x286 <__bad_interrupt>
       a:	00 00       	nop
       c:	3c c1       	rjmp	.+632    	; 0x286 <__bad_interrupt>
       e:	00 00       	nop
      10:	3a c1       	rjmp	.+628    	; 0x286 <__bad_interrupt>
      12:	00 00       	nop
      14:	38 c1       	rjmp	.+624    	; 0x286 <__bad_interrupt>
      16:	00 00       	nop
      18:	36 c1       	rjmp	.+620    	; 0x286 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	34 c1       	rjmp	.+616    	; 0x286 <__bad_interrupt>
      1e:	00 00       	nop
      20:	32 c1       	rjmp	.+612    	; 0x286 <__bad_interrupt>
      22:	00 00       	nop
      24:	30 c1       	rjmp	.+608    	; 0x286 <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c5       	rjmp	.+2720   	; 0xaca <__vector_10>
      2a:	00 00       	nop
      2c:	2c c1       	rjmp	.+600    	; 0x286 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2a c1       	rjmp	.+596    	; 0x286 <__bad_interrupt>
      32:	00 00       	nop
      34:	28 c1       	rjmp	.+592    	; 0x286 <__bad_interrupt>
      36:	00 00       	nop
      38:	26 c1       	rjmp	.+588    	; 0x286 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	24 c1       	rjmp	.+584    	; 0x286 <__bad_interrupt>
      3e:	00 00       	nop
      40:	22 c1       	rjmp	.+580    	; 0x286 <__bad_interrupt>
      42:	00 00       	nop
      44:	20 c1       	rjmp	.+576    	; 0x286 <__bad_interrupt>
      46:	00 00       	nop
      48:	1e c1       	rjmp	.+572    	; 0x286 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1c c1       	rjmp	.+568    	; 0x286 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1a c1       	rjmp	.+564    	; 0x286 <__bad_interrupt>
      52:	00 00       	nop
      54:	18 c1       	rjmp	.+560    	; 0x286 <__bad_interrupt>
      56:	00 00       	nop
      58:	16 c1       	rjmp	.+556    	; 0x286 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	14 c1       	rjmp	.+552    	; 0x286 <__bad_interrupt>
      5e:	00 00       	nop
      60:	12 c1       	rjmp	.+548    	; 0x286 <__bad_interrupt>
      62:	00 00       	nop
      64:	10 c1       	rjmp	.+544    	; 0x286 <__bad_interrupt>
      66:	00 00       	nop
      68:	0e c1       	rjmp	.+540    	; 0x286 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c c1       	rjmp	.+536    	; 0x286 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0a c1       	rjmp	.+532    	; 0x286 <__bad_interrupt>
      72:	00 00       	nop
      74:	08 c1       	rjmp	.+528    	; 0x286 <__bad_interrupt>
      76:	00 00       	nop
      78:	06 c1       	rjmp	.+524    	; 0x286 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	04 c1       	rjmp	.+520    	; 0x286 <__bad_interrupt>
      7e:	00 00       	nop
      80:	02 c1       	rjmp	.+516    	; 0x286 <__bad_interrupt>
      82:	00 00       	nop
      84:	00 c1       	rjmp	.+512    	; 0x286 <__bad_interrupt>
      86:	00 00       	nop
      88:	fe c0       	rjmp	.+508    	; 0x286 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fc c0       	rjmp	.+504    	; 0x286 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fa c0       	rjmp	.+500    	; 0x286 <__bad_interrupt>
      92:	00 00       	nop
      94:	f8 c0       	rjmp	.+496    	; 0x286 <__bad_interrupt>
      96:	00 00       	nop
      98:	2a 03       	fmul	r18, r18
      9a:	1b 04       	cpc	r1, r11
      9c:	48 03       	fmul	r20, r16
      9e:	52 03       	mulsu	r21, r18
      a0:	7d 03       	fmul	r23, r21
      a2:	a5 03       	fmuls	r18, r21
      a4:	b0 03       	fmuls	r19, r16
      a6:	c1 03       	fmuls	r20, r17
      a8:	dd 03       	fmulsu	r21, r21
      aa:	04 04       	cpc	r0, r4

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4509>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4504>:
     131:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     141:	2e 0d 0a 00                                         ....

00000145 <__c.4502>:
     145:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     155:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     165:	2e 0d 0a 00                                         ....

00000169 <__c.4500>:
     169:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     179:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     189:	6f 6e 2e 0d 0a 00                                   on....

0000018f <__c.4498>:
     18f:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     19f:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     1af:	65 2e 0d 0a 00                                      e....

000001b4 <__c.4496>:
     1b4:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c4:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d4:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e1 <__c.4489>:
     1e1:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f1:	68 65 64 2e 0d 0a 00                                hed....

000001f8 <__c.4484>:
     1f8:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     208:	0d 0a 00                                            ...

0000020b <__c.4479>:
     20b:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     21b:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

00000225 <__c.4468>:
     225:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     235:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     245:	5b 33 37 6d 00                                      [37m.

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	d0 e2       	ldi	r29, 0x20	; 32
     252:	de bf       	out	0x3e, r29	; 62
     254:	cd bf       	out	0x3d, r28	; 61

00000256 <__do_copy_data>:
     256:	11 e0       	ldi	r17, 0x01	; 1
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	e2 e8       	ldi	r30, 0x82	; 130
     25e:	fa e1       	ldi	r31, 0x1A	; 26
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	0b bf       	out	0x3b, r16	; 59
     264:	02 c0       	rjmp	.+4      	; 0x26a <__do_copy_data+0x14>
     266:	07 90       	elpm	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	a4 32       	cpi	r26, 0x24	; 36
     26c:	b1 07       	cpc	r27, r17
     26e:	d9 f7       	brne	.-10     	; 0x266 <__do_copy_data+0x10>

00000270 <__do_clear_bss>:
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	a4 e2       	ldi	r26, 0x24	; 36
     274:	b1 e0       	ldi	r27, 0x01	; 1
     276:	01 c0       	rjmp	.+2      	; 0x27a <.do_clear_bss_start>

00000278 <.do_clear_bss_loop>:
     278:	1d 92       	st	X+, r1

0000027a <.do_clear_bss_start>:
     27a:	a6 34       	cpi	r26, 0x46	; 70
     27c:	b2 07       	cpc	r27, r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <.do_clear_bss_loop>
     280:	9f d0       	rcall	.+318    	; 0x3c0 <main>
     282:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <_exit>

00000286 <__bad_interrupt>:
     286:	bc ce       	rjmp	.-648    	; 0x0 <__vectors>

00000288 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     288:	9b b1       	in	r25, 0x0b	; 11
     28a:	9f 70       	andi	r25, 0x0F	; 15
     28c:	89 2b       	or	r24, r25
     28e:	8b b9       	out	0x0b, r24	; 11
     290:	08 95       	ret

00000292 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     292:	84 b7       	in	r24, 0x34	; 52
     294:	87 7f       	andi	r24, 0xF7	; 247
     296:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	a8 95       	wdr
     29e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2a2:	88 61       	ori	r24, 0x18	; 24
     2a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ac:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2be:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2c0:	83 e3       	ldi	r24, 0x33	; 51
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2c8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2cc:	86 e0       	ldi	r24, 0x06	; 6
     2ce:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2d2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2d6:	88 e1       	ldi	r24, 0x18	; 24
     2d8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2dc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2de:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2e0:	8a b1       	in	r24, 0x0a	; 10
     2e2:	80 6f       	ori	r24, 0xF0	; 240
     2e4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2e6:	8b b1       	in	r24, 0x0b	; 11
     2e8:	8f 70       	andi	r24, 0x0F	; 15
     2ea:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2ec:	d8 d3       	rcall	.+1968   	; 0xa9e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     2ee:	a0 e4       	ldi	r26, 0x40	; 64
     2f0:	b1 e0       	ldi	r27, 0x01	; 1
     2f2:	e2 e3       	ldi	r30, 0x32	; 50
     2f4:	f1 e0       	ldi	r31, 0x01	; 1
     2f6:	11 96       	adiw	r26, 0x01	; 1
     2f8:	fc 93       	st	X, r31
     2fa:	ee 93       	st	-X, r30
					stdout = Stream;
     2fc:	13 96       	adiw	r26, 0x03	; 3
     2fe:	fc 93       	st	X, r31
     300:	ee 93       	st	-X, r30
     302:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     304:	8e e0       	ldi	r24, 0x0E	; 14
     306:	df 01       	movw	r26, r30
     308:	1d 92       	st	X+, r1
     30a:	8a 95       	dec	r24
     30c:	e9 f7       	brne	.-6      	; 0x308 <SetupHardware+0x76>
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	83 83       	std	Z+3, r24	; 0x03
     312:	86 e1       	ldi	r24, 0x16	; 22
     314:	9a e0       	ldi	r25, 0x0A	; 10
     316:	91 87       	std	Z+9, r25	; 0x09
     318:	80 87       	std	Z+8, r24	; 0x08
     31a:	8f e1       	ldi	r24, 0x1F	; 31
     31c:	9a e0       	ldi	r25, 0x0A	; 10
     31e:	93 87       	std	Z+11, r25	; 0x0b
     320:	82 87       	std	Z+10, r24	; 0x0a
     322:	08 95       	ret

00000324 <MouseHost_Task>:

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <MouseHost_Task+0x6>
     32a:	1f 92       	push	r1
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     330:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
     334:	8b 30       	cpi	r24, 0x0B	; 11
     336:	09 f0       	breq	.+2      	; 0x33a <MouseHost_Task+0x16>
     338:	3d c0       	rjmp	.+122    	; 0x3b4 <MouseHost_Task+0x90>
	  return;
	  
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 cf 09 	call	0x139e	; 0x139e <HID_Host_IsReportReceived>
     342:	88 23       	and	r24, r24
     344:	b9 f1       	breq	.+110    	; 0x3b4 <MouseHost_Task+0x90>
	{
		uint8_t LEDMask = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     346:	be 01       	movw	r22, r28
     348:	6f 5f       	subi	r22, 0xFF	; 255
     34a:	7f 4f       	sbci	r23, 0xFF	; 255
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	e3 d7       	rcall	.+4038   	; 0x1318 <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	1f 92       	push	r1
     356:	8f 93       	push	r24
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	28 2f       	mov	r18, r24
     35c:	08 2e       	mov	r0, r24
     35e:	00 0c       	add	r0, r0
     360:	33 0b       	sbc	r19, r19
     362:	3f 93       	push	r19
     364:	8f 93       	push	r24
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	28 2f       	mov	r18, r24
     36a:	08 2e       	mov	r0, r24
     36c:	00 0c       	add	r0, r0
     36e:	33 0b       	sbc	r19, r19
     370:	3f 93       	push	r19
     372:	8f 93       	push	r24
     374:	8b e0       	ldi	r24, 0x0B	; 11
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	9f 93       	push	r25
     37a:	8f 93       	push	r24
     37c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	18 16       	cp	r1, r24
     38e:	24 f0       	brlt	.+8      	; 0x398 <MouseHost_Task+0x74>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     390:	88 23       	and	r24, r24
     392:	21 f0       	breq	.+8      	; 0x39c <MouseHost_Task+0x78>
		  LEDMask |= LEDS_LED2;
     394:	80 e2       	ldi	r24, 0x20	; 32
     396:	03 c0       	rjmp	.+6      	; 0x39e <MouseHost_Task+0x7a>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	01 c0       	rjmp	.+2      	; 0x39e <MouseHost_Task+0x7a>
	if (USB_HostState != HOST_STATE_Configured)
	  return;
	  
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
	{
		uint8_t LEDMask = LEDS_NO_LEDS;
     39c:	80 e0       	ldi	r24, 0x00	; 0
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;

		if (MouseReport.Y > 0)
     39e:	9b 81       	ldd	r25, Y+3	; 0x03
     3a0:	19 16       	cp	r1, r25
     3a2:	14 f4       	brge	.+4      	; 0x3a8 <MouseHost_Task+0x84>
		  LEDMask |= LEDS_LED3;
     3a4:	80 68       	ori	r24, 0x80	; 128
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <MouseHost_Task+0x88>
		else if (MouseReport.Y < 0)
     3a8:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     3aa:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     3ac:	99 81       	ldd	r25, Y+1	; 0x01
     3ae:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     3b0:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     3b2:	6a df       	rcall	.-300    	; 0x288 <LEDs_SetAllLEDs>
	}
}
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     3c0:	68 df       	rcall	.-304    	; 0x292 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     3c2:	85 e2       	ldi	r24, 0x25	; 37
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	5d df       	rcall	.-326    	; 0x288 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		MouseHost_Task();
     3ce:	78 94       	sei
     3d0:	a9 df       	rcall	.-174    	; 0x324 <MouseHost_Task>

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     3d2:	4a d6       	rcall	.+3220   	; 0x1068 <USB_USBTask>
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <main+0x10>

000003d6 <EVENT_USB_Host_DeviceAttached>:
     3d6:	88 ef       	ldi	r24, 0xF8	; 248
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3de:	80 ea       	ldi	r24, 0xA0	; 160
     3e0:	53 cf       	rjmp	.-346    	; 0x288 <LEDs_SetAllLEDs>

000003e2 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3e2:	81 ee       	ldi	r24, 0xE1	; 225
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3ea:	80 e1       	ldi	r24, 0x10	; 16
     3ec:	4d cf       	rjmp	.-358    	; 0x288 <LEDs_SetAllLEDs>

000003ee <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	c2 50       	subi	r28, 0x02	; 2
     3f8:	d2 40       	sbci	r29, 0x02	; 2
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     404:	80 ea       	ldi	r24, 0xA0	; 160
     406:	40 df       	rcall	.-384    	; 0x288 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	32 e0       	ldi	r19, 0x02	; 2
     40c:	ae 01       	movw	r20, r28
     40e:	4f 5f       	subi	r20, 0xFF	; 255
     410:	5f 4f       	sbci	r21, 0xFF	; 255
     412:	be 01       	movw	r22, r28
     414:	6f 5f       	subi	r22, 0xFF	; 255
     416:	7d 4f       	sbci	r23, 0xFD	; 253
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	57 d4       	rcall	.+2222   	; 0xcca <USB_Host_GetDeviceConfigDescriptor>
     41c:	88 23       	and	r24, r24
     41e:	19 f0       	breq	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     420:	84 eb       	ldi	r24, 0xB4	; 180
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	17 c0       	rjmp	.+46     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     426:	cf 5f       	subi	r28, 0xFF	; 255
     428:	dd 4f       	sbci	r29, 0xFD	; 253
     42a:	68 81       	ld	r22, Y
     42c:	79 81       	ldd	r23, Y+1	; 0x01
     42e:	c1 50       	subi	r28, 0x01	; 1
     430:	d2 40       	sbci	r29, 0x02	; 2
     432:	ae 01       	movw	r20, r28
     434:	4f 5f       	subi	r20, 0xFF	; 255
     436:	5f 4f       	sbci	r21, 0xFF	; 255
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	75 d6       	rcall	.+3306   	; 0x1128 <HID_Host_ConfigurePipes>
     43e:	88 23       	and	r24, r24
     440:	19 f0       	breq	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     442:	8f e8       	ldi	r24, 0x8F	; 143
     444:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     446:	06 c0       	rjmp	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	e7 d5       	rcall	.+3022   	; 0x101a <USB_Host_SetDeviceConfiguration>
     44c:	88 23       	and	r24, r24
     44e:	31 f0       	breq	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     450:	89 e6       	ldi	r24, 0x69	; 105
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     458:	80 e9       	ldi	r24, 0x90	; 144
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Interface) != 0)
     45a:	13 c0       	rjmp	.+38     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	b9 d7       	rcall	.+3954   	; 0x13d4 <HID_Host_SetBootProtocol>
     462:	88 23       	and	r24, r24
     464:	49 f0       	breq	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     466:	85 e4       	ldi	r24, 0x45	; 69
     468:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     46a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts_P>
     46e:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     470:	0b df       	rcall	.-490    	; 0x288 <LEDs_SetAllLEDs>
     472:	80 e0       	ldi	r24, 0x00	; 0
		return;
     474:	d2 d5       	rcall	.+2980   	; 0x101a <USB_Host_SetDeviceConfiguration>
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     476:	06 c0       	rjmp	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	81 e3       	ldi	r24, 0x31	; 49
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     480:	80 e6       	ldi	r24, 0x60	; 96
     482:	02 df       	rcall	.-508    	; 0x288 <LEDs_SetAllLEDs>
}
     484:	ce 5f       	subi	r28, 0xFE	; 254
     486:	dd 4f       	sbci	r29, 0xFD	; 253
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     498:	c8 2f       	mov	r28, r24
	USB_Disable();
     49a:	99 d2       	rcall	.+1330   	; 0x9ce <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     49c:	1f 92       	push	r1
     49e:	cf 93       	push	r28
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	e5 d7       	rcall	.+4042   	; 0x1474 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4aa:	80 e9       	ldi	r24, 0x90	; 144
     4ac:	ed de       	rcall	.-550    	; 0x288 <LEDs_SetAllLEDs>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <EVENT_USB_Host_HostError+0x1e>

000004b8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4b8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_HostState>
     4bc:	1f 92       	push	r1
     4be:	9f 93       	push	r25
     4c0:	1f 92       	push	r1
     4c2:	6f 93       	push	r22
     4c4:	1f 92       	push	r1
     4c6:	8f 93       	push	r24
     4c8:	8c ea       	ldi	r24, 0xAC	; 172
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	d1 d7       	rcall	.+4002   	; 0x1474 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4d2:	8d b7       	in	r24, 0x3d	; 61
     4d4:	9e b7       	in	r25, 0x3e	; 62
     4d6:	08 96       	adiw	r24, 0x08	; 8
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	9e bf       	out	0x3e, r25	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	8d bf       	out	0x3d, r24	; 61
     4e2:	80 e9       	ldi	r24, 0x90	; 144
     4e4:	d1 ce       	rjmp	.-606    	; 0x288 <LEDs_SetAllLEDs>

000004e6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4e6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4ea:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     4ec:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     4f0:	9d 7f       	andi	r25, 0xFD	; 253
     4f2:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     4f6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     4fa:	92 60       	ori	r25, 0x02	; 2
     4fc:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     500:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     504:	91 fd       	sbrc	r25, 1
     506:	fc cf       	rjmp	.-8      	; 0x500 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     508:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     50c:	91 60       	ori	r25, 0x01	; 1
     50e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     512:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     516:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     51a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     51c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     520:	2f 7d       	andi	r18, 0xDF	; 223
     522:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     526:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     52a:	2f 7d       	andi	r18, 0xDF	; 223
     52c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     530:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     532:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     536:	35 ff       	sbrs	r19, 5
     538:	0b c0       	rjmp	.+22     	; 0x550 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     53a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     53e:	2f 7d       	andi	r18, 0xDF	; 223
     540:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     544:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     548:	2d 7f       	andi	r18, 0xFD	; 253
     54a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     54e:	08 c0       	rjmp	.+16     	; 0x560 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     550:	ef ec       	ldi	r30, 0xCF	; 207
     552:	f7 e0       	ldi	r31, 0x07	; 7
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <USB_Host_ResetDevice+0x6e>
     558:	00 c0       	rjmp	.+0      	; 0x55a <USB_Host_ResetDevice+0x74>
     55a:	00 00       	nop
     55c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     55e:	49 f7       	brne	.-46     	; 0x532 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     560:	99 23       	and	r25, r25
     562:	29 f0       	breq	.+10     	; 0x56e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     564:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     568:	90 62       	ori	r25, 0x20	; 32
     56a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     56e:	81 11       	cpse	r24, r1
     570:	05 c0       	rjmp	.+10     	; 0x57c <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     572:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     576:	8e 7f       	andi	r24, 0xFE	; 254
     578:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     57c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     580:	82 60       	ori	r24, 0x02	; 2
     582:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     586:	08 95       	ret

00000588 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     588:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     58c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     58e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     592:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     594:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     598:	3f 7d       	andi	r19, 0xDF	; 223
     59a:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     59e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5a2:	3f 7d       	andi	r19, 0xDF	; 223
     5a4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5a8:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5ac:	31 60       	ori	r19, 0x01	; 1
     5ae:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5b2:	88 23       	and	r24, r24
     5b4:	39 f1       	breq	.+78     	; 0x604 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5b6:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5ba:	35 ff       	sbrs	r19, 5
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5be:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5c2:	3f 7d       	andi	r19, 0xDF	; 223
     5c4:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5c8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5ca:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <USB_HostState>
     5ce:	31 30       	cpi	r19, 0x01	; 1
     5d0:	c1 f0       	breq	.+48     	; 0x602 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5d2:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     5d6:	34 ff       	sbrs	r19, 4
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5da:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     5de:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     5e2:	8f 7e       	andi	r24, 0xEF	; 239
     5e4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     5e8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     5ec:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     5f0:	31 ff       	sbrs	r19, 1
     5f2:	df cf       	rjmp	.-66     	; 0x5b2 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5f4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     5f8:	8d 7f       	andi	r24, 0xFD	; 253
     5fa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     5fe:	83 e0       	ldi	r24, 0x03	; 3

			break;
     600:	01 c0       	rjmp	.+2      	; 0x604 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     602:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     604:	21 11       	cpse	r18, r1
     606:	05 c0       	rjmp	.+10     	; 0x612 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     608:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     60c:	2e 7f       	andi	r18, 0xFE	; 254
     60e:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     612:	99 23       	and	r25, r25
     614:	29 f0       	breq	.+10     	; 0x620 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     616:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     61a:	90 62       	ori	r25, 0x20	; 32
     61c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     620:	08 95       	ret

00000622 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     622:	ef 92       	push	r14
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	28 97       	sbiw	r28, 0x08	; 8
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     63c:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <USB_HostState>
     640:	8e 2f       	mov	r24, r30
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	8a 30       	cpi	r24, 0x0A	; 10
     646:	91 05       	cpc	r25, r1
     648:	08 f0       	brcs	.+2      	; 0x64c <USB_Host_ProcessNextHostState+0x2a>
     64a:	f5 c0       	rjmp	.+490    	; 0x836 <USB_Host_ProcessNextHostState+0x214>
     64c:	fc 01       	movw	r30, r24
     64e:	e4 5b       	subi	r30, 0xB4	; 180
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	07 c7       	rjmp	.+3598   	; 0x1462 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     654:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <WaitMSRemaining.2935>
     658:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <WaitMSRemaining.2935+0x1>
     65c:	01 15       	cp	r16, r1
     65e:	11 05       	cpc	r17, r1
     660:	09 f4       	brne	.+2      	; 0x664 <USB_Host_ProcessNextHostState+0x42>
     662:	e9 c0       	rjmp	.+466    	; 0x836 <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 df       	rcall	.-224    	; 0x588 <USB_Host_WaitMS>
     668:	88 23       	and	r24, r24
     66a:	31 f0       	breq	.+12     	; 0x678 <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     66c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
     670:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     674:	91 e0       	ldi	r25, 0x01	; 1
					break;
     676:	d1 c0       	rjmp	.+418    	; 0x81a <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     678:	01 50       	subi	r16, 0x01	; 1
     67a:	11 09       	sbc	r17, r1
     67c:	10 93 26 01 	sts	0x0126, r17	; 0x800126 <WaitMSRemaining.2935+0x1>
     680:	00 93 25 01 	sts	0x0125, r16	; 0x800125 <WaitMSRemaining.2935>
     684:	01 2b       	or	r16, r17
     686:	09 f0       	breq	.+2      	; 0x68a <USB_Host_ProcessNextHostState+0x68>
     688:	d6 c0       	rjmp	.+428    	; 0x836 <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     68a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     68e:	07 c0       	rjmp	.+14     	; 0x69e <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     690:	88 ee       	ldi	r24, 0xE8	; 232
     692:	93 e0       	ldi	r25, 0x03	; 3
     694:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     698:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
			break;
     6a2:	c9 c0       	rjmp	.+402    	; 0x836 <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     6a4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <WaitMSRemaining.2935>
     6a8:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <WaitMSRemaining.2935+0x1>
     6ac:	9c 01       	movw	r18, r24
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	31 09       	sbc	r19, r1
     6b2:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <WaitMSRemaining.2935+0x1>
     6b6:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <WaitMSRemaining.2935>
     6ba:	89 2b       	or	r24, r25
     6bc:	39 f0       	breq	.+14     	; 0x6cc <USB_Host_ProcessNextHostState+0xaa>
     6be:	8f ec       	ldi	r24, 0xCF	; 207
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <USB_Host_ProcessNextHostState+0xa0>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <USB_Host_ProcessNextHostState+0xa6>
     6c8:	00 00       	nop
     6ca:	b5 c0       	rjmp	.+362    	; 0x836 <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     6cc:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     6ce:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     6d2:	80 61       	ori	r24, 0x10	; 16
     6d4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     6d8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     6dc:	8b 7f       	andi	r24, 0xFB	; 251
     6de:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     6e2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     6e6:	80 61       	ori	r24, 0x10	; 16
     6e8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     6ec:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     6f0:	82 60       	ori	r24, 0x02	; 2
     6f2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	d2 cf       	rjmp	.-92     	; 0x69e <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6fa:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6fe:	80 ff       	sbrs	r24, 0
     700:	9a c0       	rjmp	.+308    	; 0x836 <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     702:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     706:	8e 7f       	andi	r24, 0xFE	; 254
     708:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     70c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     710:	8d 7f       	andi	r24, 0xFD	; 253
     712:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     716:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     71a:	8d 7f       	andi	r24, 0xFD	; 253
     71c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     720:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     724:	82 60       	ori	r24, 0x02	; 2
     726:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     72a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     72e:	81 60       	ori	r24, 0x01	; 1
     730:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     734:	e8 d0       	rcall	.+464    	; 0x906 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     736:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     73a:	84 e6       	ldi	r24, 0x64	; 100
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     742:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     746:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     748:	5c c0       	rjmp	.+184    	; 0x802 <USB_Host_ProcessNextHostState+0x1e0>
     74a:	cd de       	rcall	.-614    	; 0x4e6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     74c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     750:	88 ec       	ldi	r24, 0xC8	; 200
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     758:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	51 c0       	rjmp	.+162    	; 0x802 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     760:	e1 2c       	mov	r14, r1
     762:	00 e4       	ldi	r16, 0x40	; 64
     764:	10 e0       	ldi	r17, 0x00	; 0
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	6f d0       	rcall	.+222    	; 0x84e <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     770:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     774:	87 fd       	sbrc	r24, 7
     776:	03 c0       	rjmp	.+6      	; 0x77e <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     778:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     77a:	94 e0       	ldi	r25, 0x04	; 4
     77c:	4e c0       	rjmp	.+156    	; 0x81a <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     77e:	87 e0       	ldi	r24, 0x07	; 7
     780:	8e cf       	rjmp	.-228    	; 0x69e <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     782:	88 e0       	ldi	r24, 0x08	; 8
     784:	e4 e1       	ldi	r30, 0x14	; 20
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	a9 e2       	ldi	r26, 0x29	; 41
     78a:	b1 e0       	ldi	r27, 0x01	; 1
     78c:	01 90       	ld	r0, Z+
     78e:	0d 92       	st	X+, r0
     790:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     792:	e1 f7       	brne	.-8      	; 0x78c <USB_Host_ProcessNextHostState+0x16a>
     794:	ce 01       	movw	r24, r28
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	4a d3       	rcall	.+1684   	; 0xe2e <USB_Host_SendControlRequest>
     79a:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     79c:	3d c0       	rjmp	.+122    	; 0x818 <USB_Host_ProcessNextHostState+0x1f6>
     79e:	88 85       	ldd	r24, Y+8	; 0x08
     7a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     7a4:	a0 de       	rcall	.-704    	; 0x4e6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     7a6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     7aa:	88 ec       	ldi	r24, 0xC8	; 200
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     7b2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     7b6:	88 e0       	ldi	r24, 0x08	; 8
     7b8:	24 c0       	rjmp	.+72     	; 0x802 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7ba:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	e1 2c       	mov	r14, r1
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	41 d0       	rcall	.+130    	; 0x84e <Pipe_ConfigurePipe>
     7cc:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     7d0:	87 ff       	sbrs	r24, 7
     7d2:	d2 cf       	rjmp	.-92     	; 0x778 <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     7d4:	88 e0       	ldi	r24, 0x08	; 8
     7d6:	ec e1       	ldi	r30, 0x1C	; 28
     7d8:	f1 e0       	ldi	r31, 0x01	; 1
     7da:	a9 e2       	ldi	r26, 0x29	; 41
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     7e4:	e1 f7       	brne	.-8      	; 0x7de <USB_Host_ProcessNextHostState+0x1bc>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	21 d3       	rcall	.+1602   	; 0xe2e <USB_Host_SendControlRequest>
     7ec:	81 11       	cpse	r24, r1
     7ee:	14 c0       	rjmp	.+40     	; 0x818 <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     7f0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     7f4:	84 e6       	ldi	r24, 0x64	; 100
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     7fc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     800:	89 e0       	ldi	r24, 0x09	; 9
     802:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     806:	17 c0       	rjmp	.+46     	; 0x836 <USB_Host_ProcessNextHostState+0x214>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     80e:	8a e0       	ldi	r24, 0x0A	; 10
     810:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     814:	ec dd       	rcall	.-1064   	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     816:	0f c0       	rjmp	.+30     	; 0x836 <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     81e:	21 30       	cpi	r18, 0x01	; 1
     820:	51 f0       	breq	.+20     	; 0x836 <USB_Host_ProcessNextHostState+0x214>
     822:	68 2f       	mov	r22, r24
     824:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     826:	48 de       	rcall	.-880    	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationFailed>
     828:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     832:	d7 dd       	rcall	.-1106   	; 0x3e2 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     834:	e4 d0       	rcall	.+456    	; 0x9fe <USB_ResetInterface>
     836:	28 96       	adiw	r28, 0x08	; 8
	}
}
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ef 90       	pop	r14
     84c:	08 95       	ret

0000084e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     84e:	ef 92       	push	r14
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     854:	2f 70       	andi	r18, 0x0F	; 15
     856:	42 2b       	or	r20, r18
     858:	90 e4       	ldi	r25, 0x40	; 64
     85a:	69 9f       	mul	r22, r25
     85c:	b0 01       	movw	r22, r0
     85e:	11 24       	eor	r1, r1
     860:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     862:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     864:	2e 2d       	mov	r18, r14
     866:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     868:	37 30       	cpi	r19, 0x07	; 7
     86a:	08 f0       	brcs	.+2      	; 0x86e <Pipe_ConfigurePipe+0x20>
     86c:	45 c0       	rjmp	.+138    	; 0x8f8 <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     86e:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     872:	38 13       	cpse	r19, r24
     874:	13 c0       	rjmp	.+38     	; 0x89c <Pipe_ConfigurePipe+0x4e>
     876:	48 e0       	ldi	r20, 0x08	; 8
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     87c:	40 17       	cp	r20, r16
     87e:	51 07       	cpc	r21, r17
     880:	38 f0       	brcs	.+14     	; 0x890 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     882:	92 95       	swap	r25
     884:	90 7f       	andi	r25, 0xF0	; 240
     886:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     888:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     88a:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e c0       	rjmp	.+28     	; 0x8ac <Pipe_ConfigurePipe+0x5e>
     890:	95 30       	cpi	r25, 0x05	; 5
     892:	b9 f3       	breq	.-18     	; 0x882 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     894:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     896:	44 0f       	add	r20, r20
     898:	55 1f       	adc	r21, r21
     89a:	f0 cf       	rjmp	.-32     	; 0x87c <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     89c:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     8a0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     8a4:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     8a8:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     8ac:	91 fd       	sbrc	r25, 1
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8b0:	3f 5f       	subi	r19, 0xFF	; 255
     8b2:	da cf       	rjmp	.-76     	; 0x868 <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     8b4:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8b8:	4e 7f       	andi	r20, 0xFE	; 254
     8ba:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     8be:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     8c2:	4d 7f       	andi	r20, 0xFD	; 253
     8c4:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     8c8:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8cc:	41 60       	ori	r20, 0x01	; 1
     8ce:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     8d2:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     8d6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     8da:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     8de:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     8e2:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     8e6:	90 62       	ori	r25, 0x20	; 32
     8e8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8ec:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     8f0:	97 fd       	sbrc	r25, 7
     8f2:	de cf       	rjmp	.-68     	; 0x8b0 <Pipe_ConfigurePipe+0x62>
		  return false;		
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8f8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     906:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     910:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     914:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     918:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     91c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     920:	9e 7f       	andi	r25, 0xFE	; 254
     922:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	87 30       	cpi	r24, 0x07	; 7
     92a:	81 f7       	brne	.-32     	; 0x90c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     92c:	08 95       	ret

0000092e <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     92e:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     932:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     934:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     936:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     93a:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     93e:	27 ff       	sbrs	r18, 7
     940:	0f c0       	rjmp	.+30     	; 0x960 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     942:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     946:	42 2f       	mov	r20, r18
     948:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     94a:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     94e:	20 73       	andi	r18, 0x30	; 48
     950:	20 31       	cpi	r18, 0x10	; 16
     952:	11 f0       	breq	.+4      	; 0x958 <Pipe_IsEndpointBound+0x2a>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	01 c0       	rjmp	.+2      	; 0x95a <Pipe_IsEndpointBound+0x2c>
     958:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     95a:	24 2b       	or	r18, r20
     95c:	82 17       	cp	r24, r18
     95e:	39 f0       	breq	.+14     	; 0x96e <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     960:	9f 5f       	subi	r25, 0xFF	; 255
     962:	97 30       	cpi	r25, 0x07	; 7
     964:	41 f7       	brne	.-48     	; 0x936 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     966:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     96e:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     970:	08 95       	ret

00000972 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     972:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     976:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     97a:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     97c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     980:	90 73       	andi	r25, 0x30	; 48
     982:	90 31       	cpi	r25, 0x10	; 16
     984:	29 f4       	brne	.+10     	; 0x990 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     986:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     98a:	90 ff       	sbrs	r25, 0
     98c:	05 c0       	rjmp	.+10     	; 0x998 <Pipe_WaitUntilReady+0x26>
     98e:	19 c0       	rjmp	.+50     	; 0x9c2 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     990:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     994:	92 fd       	sbrc	r25, 2
     996:	15 c0       	rjmp	.+42     	; 0x9c2 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     998:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     99c:	91 fd       	sbrc	r25, 1
     99e:	13 c0       	rjmp	.+38     	; 0x9c6 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     9a0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_HostState>
     9a4:	91 30       	cpi	r25, 0x01	; 1
     9a6:	89 f0       	breq	.+34     	; 0x9ca <Pipe_WaitUntilReady+0x58>
     9a8:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     9ac:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9b0:	42 17       	cp	r20, r18
     9b2:	53 07       	cpc	r21, r19
     9b4:	19 f3       	breq	.-58     	; 0x97c <Pipe_WaitUntilReady+0xa>
     9b6:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9b8:	11 f0       	breq	.+4      	; 0x9be <Pipe_WaitUntilReady+0x4c>
     9ba:	a9 01       	movw	r20, r18
     9bc:	df cf       	rjmp	.-66     	; 0x97c <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     9ca:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     9cc:	08 95       	ret

000009ce <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     9ce:	70 d0       	rcall	.+224    	; 0xab0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9d0:	77 d0       	rcall	.+238    	; 0xac0 <USB_INT_ClearAllInterrupts>
     9d2:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	81 60       	ori	r24, 0x01	; 1
     9da:	80 83       	st	Z, r24
     9dc:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	8f 77       	andi	r24, 0x7F	; 127
     9e4:	80 83       	st	Z, r24
     9e6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9e8:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	8c 91       	ld	r24, X
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	8c 93       	st	X, r24
     9f2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     9f4:	8f 7e       	andi	r24, 0xEF	; 239
     9f6:	80 83       	st	Z, r24
     9f8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     9fc:	08 95       	ret

000009fe <USB_ResetInterface>:
     9fe:	58 d0       	rcall	.+176    	; 0xab0 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     a00:	5f d0       	rcall	.+190    	; 0xac0 <USB_INT_ClearAllInterrupts>
     a02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a06:	8f 77       	andi	r24, 0x7F	; 127
     a08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a16:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a1a:	8f 7d       	andi	r24, 0xDF	; 223
     a1c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a20:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     a2a:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a2c:	89 bd       	out	0x29, r24	; 41
     a2e:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a30:	89 bd       	out	0x29, r24	; 41
     a32:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     a34:	00 fe       	sbrs	r0, 0
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <USB_ResetInterface+0x34>
     a38:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a3a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     a3e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     a42:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a44:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     a48:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a4c:	80 64       	ori	r24, 0x40	; 64
     a4e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a52:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a5c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     a60:	84 60       	ori	r24, 0x04	; 4
     a62:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a66:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     a6a:	8f 7e       	andi	r24, 0xEF	; 239
     a6c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     a70:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     a72:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     a74:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a7e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     a82:	84 60       	ori	r24, 0x04	; 4
     a84:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a88:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a8c:	8e 7f       	andi	r24, 0xFE	; 254
     a8e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     a92:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a96:	80 61       	ori	r24, 0x10	; 16
     a98:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a9c:	08 95       	ret

00000a9e <USB_Init>:
     a9e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <USB_IsInitialized>

	USB_ResetInterface();
     aae:	a7 cf       	rjmp	.-178    	; 0x9fe <USB_ResetInterface>

00000ab0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ab0:	e8 ed       	ldi	r30, 0xD8	; 216
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	8c 7f       	andi	r24, 0xFC	; 252
     ab8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     aba:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     abe:	08 95       	ret

00000ac0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ac0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     ac4:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ac8:	08 95       	ret

00000aca <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     af0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     af4:	85 ff       	sbrs	r24, 5
     af6:	0a c0       	rjmp	.+20     	; 0xb0c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     af8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     afc:	85 ff       	sbrs	r24, 5
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b00:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b04:	8f 7d       	andi	r24, 0xDF	; 223
     b06:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b0a:	6a d1       	rcall	.+724    	; 0xde0 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b0c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b10:	81 ff       	sbrs	r24, 1
     b12:	15 c0       	rjmp	.+42     	; 0xb3e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b14:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b18:	81 ff       	sbrs	r24, 1
     b1a:	11 c0       	rjmp	.+34     	; 0xb3e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b1c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b20:	8d 7f       	andi	r24, 0xFD	; 253
     b22:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b26:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b2a:	8e 7f       	andi	r24, 0xFE	; 254
     b2c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b30:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b34:	8d 7f       	andi	r24, 0xFD	; 253
     b36:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     b3a:	53 dc       	rcall	.-1882   	; 0x3e2 <EVENT_USB_Host_DeviceUnattached>
     b3c:	60 df       	rcall	.-320    	; 0x9fe <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     b3e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     b42:	81 ff       	sbrs	r24, 1
     b44:	15 c0       	rjmp	.+42     	; 0xb70 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     b46:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b4a:	81 ff       	sbrs	r24, 1
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b4e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b52:	8d 7f       	andi	r24, 0xFD	; 253
     b54:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b58:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b5a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b5e:	81 60       	ori	r24, 0x01	; 1
     b60:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	98 dc       	rcall	.-1744   	; 0x498 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     b68:	3c dc       	rcall	.-1928   	; 0x3e2 <EVENT_USB_Host_DeviceUnattached>
     b6a:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     b6c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     b70:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     b74:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     b76:	17 c0       	rjmp	.+46     	; 0xba6 <__vector_10+0xdc>
     b78:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     b7c:	80 ff       	sbrs	r24, 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <__vector_10+0xdc>
     b80:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b8a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     b94:	20 dc       	rcall	.-1984   	; 0x3d6 <EVENT_USB_Host_DeviceAttached>
     b96:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ba0:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     ba2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     ba6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     baa:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     bac:	0e c0       	rjmp	.+28     	; 0xbca <__vector_10+0x100>
     bae:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     bb2:	82 ff       	sbrs	r24, 2
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <__vector_10+0x100>
     bb6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	79 dc       	rcall	.-1806   	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     bc6:	0d dc       	rcall	.-2022   	; 0x3e2 <EVENT_USB_Host_DeviceUnattached>
     bc8:	1a df       	rcall	.-460    	; 0x9fe <USB_ResetInterface>

		USB_ResetInterface();
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <Pipe_Read_Stream_LE>:
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	8b 01       	movw	r16, r22
     c04:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     c06:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     c0a:	8f 7c       	andi	r24, 0xCF	; 207
     c0c:	80 61       	ori	r24, 0x10	; 16
     c0e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c12:	af de       	rcall	.-674    	; 0x972 <Pipe_WaitUntilReady>
     c14:	81 11       	cpse	r24, r1
     c16:	32 c0       	rjmp	.+100    	; 0xc7c <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c18:	e1 14       	cp	r14, r1
     c1a:	f1 04       	cpc	r15, r1
     c1c:	39 f0       	breq	.+14     	; 0xc2c <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     c1e:	f7 01       	movw	r30, r14
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	08 1b       	sub	r16, r24
     c26:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c28:	c8 0f       	add	r28, r24
     c2a:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c2c:	c1 2c       	mov	r12, r1
     c2e:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     c30:	01 15       	cp	r16, r1
     c32:	11 05       	cpc	r17, r1
     c34:	11 f1       	breq	.+68     	; 0xc7a <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     c36:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     c3a:	85 fd       	sbrc	r24, 5
     c3c:	15 c0       	rjmp	.+42     	; 0xc68 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c3e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     c42:	8e 77       	andi	r24, 0x7E	; 126
     c44:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c48:	e1 14       	cp	r14, r1
     c4a:	f1 04       	cpc	r15, r1
     c4c:	49 f0       	breq	.+18     	; 0xc60 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     c4e:	f7 01       	movw	r30, r14
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	c8 0e       	add	r12, r24
     c56:	d9 1e       	adc	r13, r25
     c58:	d1 82       	std	Z+1, r13	; 0x01
     c5a:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     c5c:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c5e:	0e c0       	rjmp	.+28     	; 0xc7c <Pipe_Read_Stream_LE+0x8c>
     c60:	88 de       	rcall	.-752    	; 0x972 <Pipe_WaitUntilReady>
     c62:	88 23       	and	r24, r24
     c64:	29 f3       	breq	.-54     	; 0xc30 <Pipe_Read_Stream_LE+0x40>
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c68:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c6c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c6e:	01 50       	subi	r16, 0x01	; 1
     c70:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     c72:	ff ef       	ldi	r31, 0xFF	; 255
     c74:	cf 1a       	sub	r12, r31
     c76:	df 0a       	sbc	r13, r31
     c78:	db cf       	rjmp	.-74     	; 0xc30 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	08 95       	ret

00000c8e <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	dc 01       	movw	r26, r24
     c94:	eb 01       	movw	r28, r22
     c96:	e8 81       	ld	r30, Y
     c98:	f9 81       	ldd	r31, Y+1	; 0x01
     c9a:	20 81       	ld	r18, Z
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	11 97       	sbiw	r26, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	82 17       	cp	r24, r18
     ca6:	93 07       	cpc	r25, r19
     ca8:	08 f4       	brcc	.+2      	; 0xcac <USB_GetNextDescriptor+0x1e>
     caa:	9c 01       	movw	r18, r24
     cac:	e2 0f       	add	r30, r18
     cae:	f3 1f       	adc	r31, r19
     cb0:	eb 01       	movw	r28, r22
     cb2:	f9 83       	std	Y+1, r31	; 0x01
     cb4:	e8 83       	st	Y, r30
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	82 1b       	sub	r24, r18
     cbe:	93 0b       	sbc	r25, r19
     cc0:	8d 93       	st	X+, r24
     cc2:	9c 93       	st	X, r25
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <USB_Host_GetDeviceConfigDescriptor>:
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	29 97       	sbiw	r28, 0x09	; 9
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	6b 01       	movw	r12, r22
     cec:	8a 01       	movw	r16, r20
     cee:	79 01       	movw	r14, r18
     cf0:	90 e8       	ldi	r25, 0x80	; 128
     cf2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <USB_ControlRequest>
     cf6:	96 e0       	ldi	r25, 0x06	; 6
     cf8:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x1>
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	92 60       	ori	r25, 0x02	; 2
     d02:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x3>
     d06:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x2>
     d0a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x5>
     d0e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x4>
     d12:	89 e0       	ldi	r24, 0x09	; 9
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x7>
     d1a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x6>
     d1e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d22:	ce 01       	movw	r24, r28
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	83 d0       	rcall	.+262    	; 0xe2e <USB_Host_SendControlRequest>
     d28:	81 11       	cpse	r24, r1
     d2a:	19 c0       	rjmp	.+50     	; 0xd5e <USB_Host_GetDeviceConfigDescriptor+0x94>
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	f6 01       	movw	r30, r12
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
     d36:	e8 16       	cp	r14, r24
     d38:	f9 06       	cpc	r15, r25
     d3a:	70 f0       	brcs	.+28     	; 0xd58 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     d3c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x7>
     d40:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x6>
     d44:	c8 01       	movw	r24, r16
     d46:	73 d0       	rcall	.+230    	; 0xe2e <USB_Host_SendControlRequest>
     d48:	81 11       	cpse	r24, r1
     d4a:	09 c0       	rjmp	.+18     	; 0xd5e <USB_Host_GetDeviceConfigDescriptor+0x94>
     d4c:	f8 01       	movw	r30, r16
     d4e:	81 81       	ldd	r24, Z+1	; 0x01
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	21 f4       	brne	.+8      	; 0xd5c <USB_Host_GetDeviceConfigDescriptor+0x92>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <USB_Host_GetDeviceConfigDescriptor+0x94>
     d58:	85 e0       	ldi	r24, 0x05	; 5
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <USB_Host_GetDeviceConfigDescriptor+0x94>
     d5c:	86 e0       	ldi	r24, 0x06	; 6
     d5e:	29 96       	adiw	r28, 0x09	; 9
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	8c 01       	movw	r16, r24
     d92:	eb 01       	movw	r28, r22
     d94:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d96:	f8 01       	movw	r30, r16
     d98:	e0 80       	ld	r14, Z
     d9a:	f1 80       	ldd	r15, Z+1	; 0x01
     d9c:	e1 14       	cp	r14, r1
     d9e:	f1 04       	cpc	r15, r1
     da0:	99 f0       	breq	.+38     	; 0xdc8 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     da2:	a8 80       	ld	r10, Y
     da4:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     da6:	be 01       	movw	r22, r28
     da8:	c8 01       	movw	r24, r16
     daa:	71 df       	rcall	.-286    	; 0xc8e <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dac:	88 81       	ld	r24, Y
     dae:	99 81       	ldd	r25, Y+1	; 0x01
     db0:	f6 01       	movw	r30, r12
     db2:	09 95       	icall
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	79 f3       	breq	.-34     	; 0xd96 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	39 f4       	brne	.+14     	; 0xdca <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     dbc:	b9 82       	std	Y+1, r11	; 0x01
     dbe:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     dc0:	f8 01       	movw	r30, r16
     dc2:	f1 82       	std	Z+1, r15	; 0x01
     dc4:	e0 82       	st	Z, r14
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dc8:	82 e0       	ldi	r24, 0x02	; 2
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	08 95       	ret

00000de0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     de0:	08 95       	ret

00000de2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     dea:	c9 ee       	ldi	r28, 0xE9	; 233
     dec:	d3 e0       	ldi	r29, 0x03	; 3
     dee:	11 11       	cpse	r17, r1
     df0:	0c c0       	rjmp	.+24     	; 0xe0a <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     df2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     df6:	83 fd       	sbrc	r24, 3
     df8:	15 c0       	rjmp	.+42     	; 0xe24 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	c5 db       	rcall	.-2166   	; 0x588 <USB_Host_WaitMS>
     dfe:	81 11       	cpse	r24, r1
     e00:	12 c0       	rjmp	.+36     	; 0xe26 <USB_Host_WaitForIOS+0x44>
     e02:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e04:	a1 f7       	brne	.-24     	; 0xdee <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e0a:	11 30       	cpi	r17, 0x01	; 1
     e0c:	29 f4       	brne	.+10     	; 0xe18 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e0e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e12:	80 ff       	sbrs	r24, 0
     e14:	f2 cf       	rjmp	.-28     	; 0xdfa <USB_Host_WaitForIOS+0x18>
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e18:	12 30       	cpi	r17, 0x02	; 2
     e1a:	79 f7       	brne	.-34     	; 0xdfa <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e1c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e20:	82 ff       	sbrs	r24, 2
     e22:	eb cf       	rjmp	.-42     	; 0xdfa <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e24:	80 e0       	ldi	r24, 0x00	; 0
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e3a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e3e:	81 70       	andi	r24, 0x01	; 1
     e40:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e42:	c0 91 2f 01 	lds	r28, 0x012F	; 0x80012f <USB_ControlRequest+0x6>
     e46:	d0 91 30 01 	lds	r29, 0x0130	; 0x800130 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e4a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e4e:	81 60       	ori	r24, 0x01	; 1
     e50:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	98 db       	rcall	.-2256   	; 0x588 <USB_Host_WaitMS>
     e58:	81 11       	cpse	r24, r1
     e5a:	c8 c0       	rjmp	.+400    	; 0xfec <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e5c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e60:	8f 7c       	andi	r24, 0xCF	; 207
     e62:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e66:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     e6a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e6e:	8f 7e       	andi	r24, 0xEF	; 239
     e70:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e74:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e78:	8f 7b       	andi	r24, 0xBF	; 191
     e7a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e7e:	e9 e2       	ldi	r30, 0x29	; 41
     e80:	f1 e0       	ldi	r31, 0x01	; 1
     e82:	81 e3       	ldi	r24, 0x31	; 49
     e84:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     e86:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e88:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e8c:	8e 17       	cp	r24, r30
     e8e:	9f 07       	cpc	r25, r31
     e90:	d1 f7       	brne	.-12     	; 0xe86 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e92:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e96:	87 77       	andi	r24, 0x77	; 119
     e98:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	a1 df       	rcall	.-190    	; 0xde2 <USB_Host_WaitForIOS>
     ea0:	81 11       	cpse	r24, r1
     ea2:	a4 c0       	rjmp	.+328    	; 0xfec <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ea4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	6b db       	rcall	.-2346   	; 0x588 <USB_Host_WaitMS>
     eb2:	81 11       	cpse	r24, r1
     eb4:	9b c0       	rjmp	.+310    	; 0xfec <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eb6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_ControlRequest>
     eba:	87 ff       	sbrs	r24, 7
     ebc:	4e c0       	rjmp	.+156    	; 0xf5a <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ebe:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ec2:	8f 7c       	andi	r24, 0xCF	; 207
     ec4:	80 61       	ori	r24, 0x10	; 16
     ec6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     eca:	01 15       	cp	r16, r1
     ecc:	11 05       	cpc	r17, r1
     ece:	09 f0       	breq	.+2      	; 0xed2 <USB_Host_SendControlRequest+0xa4>
     ed0:	3a c0       	rjmp	.+116    	; 0xf46 <USB_Host_SendControlRequest+0x118>
     ed2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ed6:	8f 7c       	andi	r24, 0xCF	; 207
     ed8:	80 62       	ori	r24, 0x20	; 32
     eda:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ede:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ee2:	8f 7b       	andi	r24, 0xBF	; 191
     ee4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	7b df       	rcall	.-266    	; 0xde2 <USB_Host_WaitForIOS>
     eec:	81 11       	cpse	r24, r1
     eee:	7e c0       	rjmp	.+252    	; 0xfec <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ef0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ef4:	8b 77       	andi	r24, 0x7B	; 123
     ef6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	72 df       	rcall	.-284    	; 0xde2 <USB_Host_WaitForIOS>
     efe:	76 c0       	rjmp	.+236    	; 0xfec <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f00:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f04:	8f 7b       	andi	r24, 0xBF	; 191
     f06:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	6a df       	rcall	.-300    	; 0xde2 <USB_Host_WaitForIOS>
     f0e:	81 11       	cpse	r24, r1
     f10:	6d c0       	rjmp	.+218    	; 0xfec <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f12:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f16:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     f1a:	89 2b       	or	r24, r25
     f1c:	11 f4       	brne	.+4      	; 0xf22 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
     f1e:	c0 e0       	ldi	r28, 0x00	; 0
     f20:	d0 e0       	ldi	r29, 0x00	; 0
     f22:	f8 01       	movw	r30, r16
     f24:	8f 01       	movw	r16, r30
     f26:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f2a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
     f2e:	89 2b       	or	r24, r25
     f30:	69 f4       	brne	.+26     	; 0xf4c <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f32:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f36:	80 64       	ori	r24, 0x40	; 64
     f38:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f3c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f40:	8e 77       	andi	r24, 0x7E	; 126
     f42:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f46:	20 97       	sbiw	r28, 0x00	; 0
     f48:	d9 f6       	brne	.-74     	; 0xf00 <USB_Host_SendControlRequest+0xd2>
     f4a:	c3 cf       	rjmp	.-122    	; 0xed2 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f4c:	20 97       	sbiw	r28, 0x00	; 0
     f4e:	89 f3       	breq	.-30     	; 0xf32 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f50:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
     f54:	81 93       	st	Z+, r24
					DataLen--;
     f56:	21 97       	sbiw	r28, 0x01	; 1
     f58:	e5 cf       	rjmp	.-54     	; 0xf24 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f5a:	01 15       	cp	r16, r1
     f5c:	11 05       	cpc	r17, r1
     f5e:	91 f1       	breq	.+100    	; 0xfc4 <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f60:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f64:	8f 7c       	andi	r24, 0xCF	; 207
     f66:	80 62       	ori	r24, 0x20	; 32
     f68:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f6c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f70:	8f 7b       	andi	r24, 0xBF	; 191
     f72:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f7a:	e1 f0       	breq	.+56     	; 0xfb4 <USB_Host_SendControlRequest+0x186>
     f7c:	32 df       	rcall	.-412    	; 0xde2 <USB_Host_WaitForIOS>
     f7e:	81 11       	cpse	r24, r1
     f80:	35 c0       	rjmp	.+106    	; 0xfec <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f82:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     f86:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f8a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	48 f4       	brcc	.+18     	; 0xfa8 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
     f96:	0f 5f       	subi	r16, 0xFF	; 255
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	f8 01       	movw	r30, r16
     f9c:	31 97       	sbiw	r30, 0x01	; 1
     f9e:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fa0:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
     fa4:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fa6:	69 f7       	brne	.-38     	; 0xf82 <USB_Host_SendControlRequest+0x154>
     fa8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fac:	8b 77       	andi	r24, 0x7B	; 123
     fae:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb2:	e1 cf       	rjmp	.-62     	; 0xf76 <USB_Host_SendControlRequest+0x148>
     fb4:	16 df       	rcall	.-468    	; 0xde2 <USB_Host_WaitForIOS>
     fb6:	81 11       	cpse	r24, r1
     fb8:	19 c0       	rjmp	.+50     	; 0xfec <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fba:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fc4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fc8:	8f 7c       	andi	r24, 0xCF	; 207
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fd4:	8f 7b       	andi	r24, 0xBF	; 191
     fd6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	02 df       	rcall	.-508    	; 0xde2 <USB_Host_WaitForIOS>
     fde:	81 11       	cpse	r24, r1
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fe2:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fe6:	9e 77       	andi	r25, 0x7E	; 126
     fe8:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fec:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ff0:	90 64       	ori	r25, 0x40	; 64
     ff2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     ff6:	f1 10       	cpse	r15, r1
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ffa:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ffe:	9e 7f       	andi	r25, 0xFE	; 254
    1000:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    100a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	08 95       	ret

0000101a <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    101a:	cf 93       	push	r28
    101c:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    101e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_ControlRequest>
    1022:	89 e0       	ldi	r24, 0x09	; 9
    1024:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_ControlRequest+0x1>
    1028:	8c 2f       	mov	r24, r28
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x3>
    1030:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x2>
    1034:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x5>
    1038:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x4>
    103c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x7>
    1040:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1044:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	f0 de       	rcall	.-544    	; 0xe2e <USB_Host_SendControlRequest>
    104e:	81 11       	cpse	r24, r1
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1052:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1056:	c1 11       	cpse	r28, r1
    1058:	02 c0       	rjmp	.+4      	; 0x105e <USB_Host_SetDeviceConfiguration+0x44>
    105a:	9a e0       	ldi	r25, 0x0A	; 10
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <USB_Host_SetDeviceConfiguration+0x46>
    105e:	9b e0       	ldi	r25, 0x0B	; 11
    1060:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <USB_HostState>
	}

	return ErrorCode;
}
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    106e:	c7 ea       	ldi	r28, 0xA7	; 167
    1070:	d0 e0       	ldi	r29, 0x00	; 0
    1072:	18 81       	ld	r17, Y
    1074:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1076:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1078:	d4 da       	rcall	.-2648   	; 0x622 <USB_Host_ProcessNextHostState>
    107a:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	08 95       	ret

00001084 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1084:	fc 01       	movw	r30, r24
    1086:	ea 5b       	subi	r30, 0xBA	; 186
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	44 0f       	add	r20, r20
    108e:	55 1f       	adc	r21, r21
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1090:	4f 56       	subi	r20, 0x6F	; 111
    1092:	5c 4f       	sbci	r21, 0xFC	; 252
    1094:	dc 01       	movw	r26, r24
    1096:	a4 0f       	add	r26, r20
    1098:	b5 1f       	adc	r27, r21
    109a:	2d 91       	ld	r18, X+
    109c:	3c 91       	ld	r19, X

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    109e:	dc 01       	movw	r26, r24
    10a0:	a0 57       	subi	r26, 0x70	; 112
    10a2:	bc 4f       	sbci	r27, 0xFC	; 252
    10a4:	7c 91       	ld	r23, X
    10a6:	76 13       	cpse	r23, r22
    10a8:	11 c0       	rjmp	.+34     	; 0x10cc <USB_GetHIDReportSize+0x48>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	47 70       	andi	r20, 0x07	; 7
    10b2:	55 27       	eor	r21, r21
    10b4:	45 2b       	or	r20, r21
    10b6:	11 f4       	brne	.+4      	; 0x10bc <USB_GetHIDReportSize+0x38>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	43 e0       	ldi	r20, 0x03	; 3
    10be:	36 95       	lsr	r19
    10c0:	27 95       	ror	r18
    10c2:	4a 95       	dec	r20
    10c4:	e1 f7       	brne	.-8      	; 0x10be <USB_GetHIDReportSize+0x3a>
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	08 95       	ret
    10cc:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    10ce:	8e 17       	cp	r24, r30
    10d0:	9f 07       	cpc	r25, r31
    10d2:	01 f7       	brne	.-64     	; 0x1094 <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
}
    10d8:	08 95       	ret

000010da <DCOMP_HID_Host_NextHIDInterface>:

		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		return USB_Host_SendControlRequest(Buffer);
	}
}
    10da:	fc 01       	movw	r30, r24
    10dc:	21 81       	ldd	r18, Z+1	; 0x01
    10de:	24 30       	cpi	r18, 0x04	; 4
    10e0:	29 f4       	brne	.+10     	; 0x10ec <DCOMP_HID_Host_NextHIDInterface+0x12>
    10e2:	85 81       	ldd	r24, Z+5	; 0x05
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	11 f4       	brne	.+4      	; 0x10ec <DCOMP_HID_Host_NextHIDInterface+0x12>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	08 95       	ret
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	08 95       	ret

000010f0 <DCOMP_HID_Host_NextHIDDescriptor>:
    10f0:	fc 01       	movw	r30, r24
    10f2:	81 81       	ldd	r24, Z+1	; 0x01
    10f4:	81 32       	cpi	r24, 0x21	; 33
    10f6:	21 f0       	breq	.+8      	; 0x1100 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    10f8:	84 30       	cpi	r24, 0x04	; 4
    10fa:	21 f0       	breq	.+8      	; 0x1104 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	08 95       	ret
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	08 95       	ret
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	08 95       	ret

00001108 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    1108:	fc 01       	movw	r30, r24
    110a:	21 81       	ldd	r18, Z+1	; 0x01
    110c:	25 30       	cpi	r18, 0x05	; 5
    110e:	31 f4       	brne	.+12     	; 0x111c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	0d dc       	rcall	.-2022   	; 0x92e <Pipe_IsEndpointBound>
    1114:	88 23       	and	r24, r24
    1116:	31 f0       	breq	.+12     	; 0x1124 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	08 95       	ret
    111c:	24 30       	cpi	r18, 0x04	; 4
    111e:	e1 f7       	brne	.-8      	; 0x1118 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	08 95       	ret
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	08 95       	ret

00001128 <HID_Host_ConfigurePipes>:
    1128:	2f 92       	push	r2
    112a:	3f 92       	push	r3
    112c:	4f 92       	push	r4
    112e:	5f 92       	push	r5
    1130:	6f 92       	push	r6
    1132:	7f 92       	push	r7
    1134:	8f 92       	push	r8
    1136:	9f 92       	push	r9
    1138:	af 92       	push	r10
    113a:	bf 92       	push	r11
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	00 d0       	rcall	.+0      	; 0x114e <HID_Host_ConfigurePipes+0x26>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <HID_Host_ConfigurePipes+0x28>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	7a 83       	std	Y+2, r23	; 0x02
    1156:	69 83       	std	Y+1, r22	; 0x01
    1158:	5c 83       	std	Y+4, r21	; 0x04
    115a:	4b 83       	std	Y+3, r20	; 0x03
    115c:	fc 01       	movw	r30, r24
    115e:	37 96       	adiw	r30, 0x07	; 7
    1160:	2c e0       	ldi	r18, 0x0C	; 12
    1162:	df 01       	movw	r26, r30
    1164:	1d 92       	st	X+, r1
    1166:	2a 95       	dec	r18
    1168:	e9 f7       	brne	.-6      	; 0x1164 <HID_Host_ConfigurePipes+0x3c>
    116a:	eb 81       	ldd	r30, Y+3	; 0x03
    116c:	fc 81       	ldd	r31, Y+4	; 0x04
    116e:	11 81       	ldd	r17, Z+1	; 0x01
    1170:	12 30       	cpi	r17, 0x02	; 2
    1172:	09 f0       	breq	.+2      	; 0x1176 <HID_Host_ConfigurePipes+0x4e>
    1174:	7d c0       	rjmp	.+250    	; 0x1270 <HID_Host_ConfigurePipes+0x148>
    1176:	6c 01       	movw	r12, r24
    1178:	41 2c       	mov	r4, r1
    117a:	51 2c       	mov	r5, r1
    117c:	61 2c       	mov	r6, r1
    117e:	71 2c       	mov	r7, r1
    1180:	81 2c       	mov	r8, r1
    1182:	91 2c       	mov	r9, r1
    1184:	a1 2c       	mov	r10, r1
    1186:	b1 2c       	mov	r11, r1
    1188:	a1 14       	cp	r10, r1
    118a:	b1 04       	cpc	r11, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <HID_Host_ConfigurePipes+0x68>
    118e:	74 c0       	rjmp	.+232    	; 0x1278 <HID_Host_ConfigurePipes+0x150>
    1190:	81 14       	cp	r8, r1
    1192:	91 04       	cpc	r9, r1
    1194:	91 f4       	brne	.+36     	; 0x11ba <HID_Host_ConfigurePipes+0x92>
    1196:	61 14       	cp	r6, r1
    1198:	71 04       	cpc	r7, r1
    119a:	79 f0       	breq	.+30     	; 0x11ba <HID_Host_ConfigurePipes+0x92>
    119c:	44 e8       	ldi	r20, 0x84	; 132
    119e:	58 e0       	ldi	r21, 0x08	; 8
    11a0:	be 01       	movw	r22, r28
    11a2:	6d 5f       	subi	r22, 0xFD	; 253
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	e8 dd       	rcall	.-1072   	; 0xd7c <USB_GetNextDescriptorComp>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <HID_Host_ConfigurePipes+0x8a>
    11b0:	8f c0       	rjmp	.+286    	; 0x12d0 <HID_Host_ConfigurePipes+0x1a8>
    11b2:	a1 14       	cp	r10, r1
    11b4:	b1 04       	cpc	r11, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <HID_Host_ConfigurePipes+0x92>
    11b8:	63 c0       	rjmp	.+198    	; 0x1280 <HID_Host_ConfigurePipes+0x158>
    11ba:	ff 24       	eor	r15, r15
    11bc:	f3 94       	inc	r15
    11be:	22 24       	eor	r2, r2
    11c0:	23 94       	inc	r2
    11c2:	f6 01       	movw	r30, r12
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 11       	cpse	r24, r15
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <HID_Host_ConfigurePipes+0xc0>
    11ca:	d5 01       	movw	r26, r10
    11cc:	14 96       	adiw	r26, 0x04	; 4
    11ce:	0d 91       	ld	r16, X+
    11d0:	1c 91       	ld	r17, X
    11d2:	15 97       	sbiw	r26, 0x05	; 5
    11d4:	12 96       	adiw	r26, 0x02	; 2
    11d6:	2c 91       	ld	r18, X
    11d8:	12 97       	sbiw	r26, 0x02	; 2
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	16 96       	adiw	r26, 0x06	; 6
    11de:	3c 90       	ld	r3, X
    11e0:	12 87       	std	Z+10, r17	; 0x0a
    11e2:	01 87       	std	Z+9, r16	; 0x09
    11e4:	40 e1       	ldi	r20, 0x10	; 16
    11e6:	16 c0       	rjmp	.+44     	; 0x1214 <HID_Host_ConfigurePipes+0xec>
    11e8:	f6 01       	movw	r30, r12
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	8f 11       	cpse	r24, r15
    11ee:	20 c0       	rjmp	.+64     	; 0x1230 <HID_Host_ConfigurePipes+0x108>
    11f0:	81 14       	cp	r8, r1
    11f2:	91 04       	cpc	r9, r1
    11f4:	e9 f0       	breq	.+58     	; 0x1230 <HID_Host_ConfigurePipes+0x108>
    11f6:	d4 01       	movw	r26, r8
    11f8:	14 96       	adiw	r26, 0x04	; 4
    11fa:	0d 91       	ld	r16, X+
    11fc:	1c 91       	ld	r17, X
    11fe:	15 97       	sbiw	r26, 0x05	; 5
    1200:	12 96       	adiw	r26, 0x02	; 2
    1202:	2c 91       	ld	r18, X
    1204:	12 97       	sbiw	r26, 0x02	; 2
    1206:	83 81       	ldd	r24, Z+3	; 0x03
    1208:	16 96       	adiw	r26, 0x06	; 6
    120a:	3c 90       	ld	r3, X
    120c:	14 87       	std	Z+12, r17	; 0x0c
    120e:	03 87       	std	Z+11, r16	; 0x0b
    1210:	26 86       	std	Z+14, r2	; 0x0e
    1212:	40 e2       	ldi	r20, 0x20	; 32
    1214:	81 11       	cpse	r24, r1
    1216:	02 c0       	rjmp	.+4      	; 0x121c <HID_Host_ConfigurePipes+0xf4>
    1218:	e1 2c       	mov	r14, r1
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <HID_Host_ConfigurePipes+0xf8>
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	e8 2e       	mov	r14, r24
    1220:	63 e0       	ldi	r22, 0x03	; 3
    1222:	8f 2d       	mov	r24, r15
    1224:	14 db       	rcall	.-2520   	; 0x84e <Pipe_ConfigurePipe>
    1226:	88 23       	and	r24, r24
    1228:	29 f1       	breq	.+74     	; 0x1274 <HID_Host_ConfigurePipes+0x14c>
    122a:	31 10       	cpse	r3, r1
    122c:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1230:	f3 94       	inc	r15
    1232:	b7 e0       	ldi	r27, 0x07	; 7
    1234:	fb 12       	cpse	r15, r27
    1236:	c5 cf       	rjmp	.-118    	; 0x11c2 <HID_Host_ConfigurePipes+0x9a>
    1238:	f3 01       	movw	r30, r6
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	d6 01       	movw	r26, r12
    123e:	18 96       	adiw	r26, 0x08	; 8
    1240:	8c 93       	st	X, r24
    1242:	18 97       	sbiw	r26, 0x08	; 8
    1244:	f2 01       	movw	r30, r4
    1246:	87 81       	ldd	r24, Z+7	; 0x07
    1248:	90 85       	ldd	r25, Z+8	; 0x08
    124a:	51 96       	adiw	r26, 0x11	; 17
    124c:	9c 93       	st	X, r25
    124e:	8e 93       	st	-X, r24
    1250:	50 97       	sbiw	r26, 0x10	; 16
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	d3 01       	movw	r26, r6
    1256:	16 96       	adiw	r26, 0x06	; 6
    1258:	9c 91       	ld	r25, X
    125a:	91 11       	cpse	r25, r1
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <HID_Host_ConfigurePipes+0x138>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	f6 01       	movw	r30, r12
    1262:	85 87       	std	Z+13, r24	; 0x0d
    1264:	88 e0       	ldi	r24, 0x08	; 8
    1266:	82 8b       	std	Z+18, r24	; 0x12
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	87 83       	std	Z+7, r24	; 0x07
    126c:	10 e0       	ldi	r17, 0x00	; 0
    126e:	3c c0       	rjmp	.+120    	; 0x12e8 <HID_Host_ConfigurePipes+0x1c0>
    1270:	11 e0       	ldi	r17, 0x01	; 1
    1272:	3a c0       	rjmp	.+116    	; 0x12e8 <HID_Host_ConfigurePipes+0x1c0>
    1274:	13 e0       	ldi	r17, 0x03	; 3
    1276:	38 c0       	rjmp	.+112    	; 0x12e8 <HID_Host_ConfigurePipes+0x1c0>
    1278:	61 14       	cp	r6, r1
    127a:	71 04       	cpc	r7, r1
    127c:	09 f0       	breq	.+2      	; 0x1280 <HID_Host_ConfigurePipes+0x158>
    127e:	8e cf       	rjmp	.-228    	; 0x119c <HID_Host_ConfigurePipes+0x74>
    1280:	81 14       	cp	r8, r1
    1282:	91 04       	cpc	r9, r1
    1284:	71 f5       	brne	.+92     	; 0x12e2 <HID_Host_ConfigurePipes+0x1ba>
    1286:	4d e6       	ldi	r20, 0x6D	; 109
    1288:	58 e0       	ldi	r21, 0x08	; 8
    128a:	be 01       	movw	r22, r28
    128c:	6d 5f       	subi	r22, 0xFD	; 253
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	73 dd       	rcall	.-1306   	; 0xd7c <USB_GetNextDescriptorComp>
    1296:	81 11       	cpse	r24, r1
    1298:	27 c0       	rjmp	.+78     	; 0x12e8 <HID_Host_ConfigurePipes+0x1c0>
    129a:	6b 80       	ldd	r6, Y+3	; 0x03
    129c:	7c 80       	ldd	r7, Y+4	; 0x04
    129e:	f6 01       	movw	r30, r12
    12a0:	84 81       	ldd	r24, Z+4	; 0x04
    12a2:	81 11       	cpse	r24, r1
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <HID_Host_ConfigurePipes+0x19c>
    12a6:	48 e7       	ldi	r20, 0x78	; 120
    12a8:	58 e0       	ldi	r21, 0x08	; 8
    12aa:	be 01       	movw	r22, r28
    12ac:	6d 5f       	subi	r22, 0xFD	; 253
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	63 dd       	rcall	.-1338   	; 0xd7c <USB_GetNextDescriptorComp>
    12b6:	81 11       	cpse	r24, r1
    12b8:	17 c0       	rjmp	.+46     	; 0x12e8 <HID_Host_ConfigurePipes+0x1c0>
    12ba:	4b 80       	ldd	r4, Y+3	; 0x03
    12bc:	5c 80       	ldd	r5, Y+4	; 0x04
    12be:	e0 e0       	ldi	r30, 0x00	; 0
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	0d c0       	rjmp	.+26     	; 0x12de <HID_Host_ConfigurePipes+0x1b6>
    12c4:	d3 01       	movw	r26, r6
    12c6:	17 96       	adiw	r26, 0x07	; 7
    12c8:	9c 91       	ld	r25, X
    12ca:	89 13       	cpse	r24, r25
    12cc:	dc cf       	rjmp	.-72     	; 0x1286 <HID_Host_ConfigurePipes+0x15e>
    12ce:	eb cf       	rjmp	.-42     	; 0x12a6 <HID_Host_ConfigurePipes+0x17e>
    12d0:	eb 81       	ldd	r30, Y+3	; 0x03
    12d2:	fc 81       	ldd	r31, Y+4	; 0x04
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	87 fd       	sbrc	r24, 7
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <HID_Host_ConfigurePipes+0x1b6>
    12da:	4f 01       	movw	r8, r30
    12dc:	f5 01       	movw	r30, r10
    12de:	5f 01       	movw	r10, r30
    12e0:	53 cf       	rjmp	.-346    	; 0x1188 <HID_Host_ConfigurePipes+0x60>
    12e2:	a1 2c       	mov	r10, r1
    12e4:	b1 2c       	mov	r11, r1
    12e6:	69 cf       	rjmp	.-302    	; 0x11ba <HID_Host_ConfigurePipes+0x92>
    12e8:	81 2f       	mov	r24, r17
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
    130a:	7f 90       	pop	r7
    130c:	6f 90       	pop	r6
    130e:	5f 90       	pop	r5
    1310:	4f 90       	pop	r4
    1312:	3f 90       	pop	r3
    1314:	2f 90       	pop	r2
    1316:	08 95       	ret

00001318 <HID_Host_ReceiveReport>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	fc 01       	movw	r30, r24
    131e:	eb 01       	movw	r28, r22
    1320:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
    1324:	8b 30       	cpi	r24, 0x0B	; 11
    1326:	b9 f5       	brne	.+110    	; 0x1396 <HID_Host_ReceiveReport+0x7e>
    1328:	87 81       	ldd	r24, Z+7	; 0x07
    132a:	88 23       	and	r24, r24
    132c:	a1 f1       	breq	.+104    	; 0x1396 <HID_Host_ReceiveReport+0x7e>
    132e:	80 81       	ld	r24, Z
    1330:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1334:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1338:	8f 7b       	andi	r24, 0xBF	; 191
    133a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    133e:	87 85       	ldd	r24, Z+15	; 0x0f
    1340:	81 11       	cpse	r24, r1
    1342:	12 c0       	rjmp	.+36     	; 0x1368 <HID_Host_ReceiveReport+0x50>
    1344:	a5 81       	ldd	r26, Z+5	; 0x05
    1346:	b6 81       	ldd	r27, Z+6	; 0x06
    1348:	a8 52       	subi	r26, 0x28	; 40
    134a:	bc 4f       	sbci	r27, 0xFC	; 252
    134c:	8c 91       	ld	r24, X
    134e:	88 23       	and	r24, r24
    1350:	29 f0       	breq	.+10     	; 0x135c <HID_Host_ReceiveReport+0x44>
    1352:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1356:	68 83       	st	Y, r22
    1358:	21 96       	adiw	r28, 0x01	; 1
    135a:	01 c0       	rjmp	.+2      	; 0x135e <HID_Host_ReceiveReport+0x46>
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	85 81       	ldd	r24, Z+5	; 0x05
    1362:	96 81       	ldd	r25, Z+6	; 0x06
    1364:	8f de       	rcall	.-738    	; 0x1084 <USB_GetHIDReportSize>
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <HID_Host_ReceiveReport+0x58>
    1368:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    136c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	bc 01       	movw	r22, r24
    1376:	ce 01       	movw	r24, r28
    1378:	3b dc       	rcall	.-1930   	; 0xbf0 <Pipe_Read_Stream_LE>
    137a:	81 11       	cpse	r24, r1
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <HID_Host_ReceiveReport+0x80>
    137e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1382:	8e 77       	andi	r24, 0x7E	; 126
    1384:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1388:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    138c:	80 64       	ori	r24, 0x40	; 64
    138e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <HID_Host_ReceiveReport+0x80>
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <HID_Host_IsReportReceived>:

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    139e:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    13a0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
    13a4:	8b 30       	cpi	r24, 0x0B	; 11
    13a6:	a1 f4       	brne	.+40     	; 0x13d0 <HID_Host_IsReportReceived+0x32>
    13a8:	87 81       	ldd	r24, Z+7	; 0x07
    13aa:	88 23       	and	r24, r24
    13ac:	91 f0       	breq	.+36     	; 0x13d2 <HID_Host_IsReportReceived+0x34>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    13ae:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13b0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13b4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13b8:	8f 7b       	andi	r24, 0xBF	; 191
    13ba:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13be:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13c2:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13c4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13c8:	90 64       	ori	r25, 0x40	; 64
    13ca:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    13ce:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    13d2:	08 95       	ret

000013d4 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    13d8:	fc 01       	movw	r30, r24
    13da:	25 85       	ldd	r18, Z+13	; 0x0d
    13dc:	22 23       	and	r18, r18
    13de:	11 f1       	breq	.+68     	; 0x1424 <HID_Host_SetBootProtocol+0x50>
    13e0:	ec 01       	movw	r28, r24
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    13e2:	80 85       	ldd	r24, Z+8	; 0x08
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	21 e2       	ldi	r18, 0x21	; 33
    13e8:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <USB_ControlRequest>
    13ec:	2b e0       	ldi	r18, 0x0B	; 11
    13ee:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <USB_ControlRequest+0x1>
    13f2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x3>
    13f6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_ControlRequest+0x2>
    13fa:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <USB_ControlRequest+0x5>
    13fe:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_ControlRequest+0x4>
    1402:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x7>
    1406:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    140a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0d dd       	rcall	.-1510   	; 0xe2e <USB_Host_SendControlRequest>
    1414:	81 11       	cpse	r24, r1
    1416:	07 c0       	rjmp	.+14     	; 0x1426 <HID_Host_SetBootProtocol+0x52>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    1418:	88 e0       	ldi	r24, 0x08	; 8
    141a:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <HID_Host_SetBootProtocol+0x52>
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    1424:	80 e8       	ldi	r24, 0x80	; 128

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    142c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1430:	95 ff       	sbrs	r25, 5
    1432:	fc cf       	rjmp	.-8      	; 0x142c <Serial_putchar>
				UDR1 = DataByte;
    1434:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	08 95       	ret

0000143e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    143e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1442:	87 ff       	sbrs	r24, 7
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <Serial_getchar+0x18>
    1446:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    144a:	87 ff       	sbrs	r24, 7
    144c:	07 c0       	rjmp	.+14     	; 0x145c <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    144e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	08 95       	ret
	  return _FDEV_EOF;
    1456:	8e ef       	ldi	r24, 0xFE	; 254
    1458:	9f ef       	ldi	r25, 0xFF	; 255
    145a:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1460:	08 95       	ret

00001462 <__tablejump2__>:
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	00 24       	eor	r0, r0
    1468:	00 1c       	adc	r0, r0
    146a:	0b be       	out	0x3b, r0	; 59
    146c:	07 90       	elpm	r0, Z+
    146e:	f6 91       	elpm	r31, Z
    1470:	e0 2d       	mov	r30, r0
    1472:	09 94       	ijmp

00001474 <printf_P>:
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	ae 01       	movw	r20, r28
    1482:	49 5f       	subi	r20, 0xF9	; 249
    1484:	5f 4f       	sbci	r21, 0xFF	; 255
    1486:	da 01       	movw	r26, r20
    1488:	6d 91       	ld	r22, X+
    148a:	7d 91       	ld	r23, X+
    148c:	ad 01       	movw	r20, r26
    148e:	00 e4       	ldi	r16, 0x40	; 64
    1490:	11 e0       	ldi	r17, 0x01	; 1
    1492:	f8 01       	movw	r30, r16
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	dc 01       	movw	r26, r24
    149a:	13 96       	adiw	r26, 0x03	; 3
    149c:	2c 91       	ld	r18, X
    149e:	13 97       	sbiw	r26, 0x03	; 3
    14a0:	28 60       	ori	r18, 0x08	; 8
    14a2:	13 96       	adiw	r26, 0x03	; 3
    14a4:	2c 93       	st	X, r18
    14a6:	3e d0       	rcall	.+124    	; 0x1524 <vfprintf>
    14a8:	d8 01       	movw	r26, r16
    14aa:	12 96       	adiw	r26, 0x02	; 2
    14ac:	ed 91       	ld	r30, X+
    14ae:	fc 91       	ld	r31, X
    14b0:	13 97       	sbiw	r26, 0x03	; 3
    14b2:	23 81       	ldd	r18, Z+3	; 0x03
    14b4:	27 7f       	andi	r18, 0xF7	; 247
    14b6:	23 83       	std	Z+3, r18	; 0x03
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <puts_P>:
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	8c 01       	movw	r16, r24
    14cc:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__iob+0x2>
    14d0:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__iob+0x3>
    14d4:	83 81       	ldd	r24, Z+3	; 0x03
    14d6:	81 ff       	sbrs	r24, 1
    14d8:	1b c0       	rjmp	.+54     	; 0x1510 <puts_P+0x4e>
    14da:	d0 e0       	ldi	r29, 0x00	; 0
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	f8 01       	movw	r30, r16
    14e0:	84 91       	lpm	r24, Z
    14e2:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <__iob+0x2>
    14e6:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <__iob+0x3>
    14ea:	db 01       	movw	r26, r22
    14ec:	18 96       	adiw	r26, 0x08	; 8
    14ee:	ed 91       	ld	r30, X+
    14f0:	fc 91       	ld	r31, X
    14f2:	19 97       	sbiw	r26, 0x09	; 9
    14f4:	88 23       	and	r24, r24
    14f6:	41 f0       	breq	.+16     	; 0x1508 <puts_P+0x46>
    14f8:	09 95       	icall
    14fa:	89 2b       	or	r24, r25
    14fc:	11 f0       	breq	.+4      	; 0x1502 <puts_P+0x40>
    14fe:	df ef       	ldi	r29, 0xFF	; 255
    1500:	cf ef       	ldi	r28, 0xFF	; 255
    1502:	0f 5f       	subi	r16, 0xFF	; 255
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	eb cf       	rjmp	.-42     	; 0x14de <puts_P+0x1c>
    1508:	8a e0       	ldi	r24, 0x0A	; 10
    150a:	09 95       	icall
    150c:	89 2b       	or	r24, r25
    150e:	19 f0       	breq	.+6      	; 0x1516 <puts_P+0x54>
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	02 c0       	rjmp	.+4      	; 0x151a <puts_P+0x58>
    1516:	8d 2f       	mov	r24, r29
    1518:	9c 2f       	mov	r25, r28
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <vfprintf>:
    1524:	2f 92       	push	r2
    1526:	3f 92       	push	r3
    1528:	4f 92       	push	r4
    152a:	5f 92       	push	r5
    152c:	6f 92       	push	r6
    152e:	7f 92       	push	r7
    1530:	8f 92       	push	r8
    1532:	9f 92       	push	r9
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	2b 97       	sbiw	r28, 0x0b	; 11
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	6c 01       	movw	r12, r24
    155a:	7b 01       	movw	r14, r22
    155c:	8a 01       	movw	r16, r20
    155e:	fc 01       	movw	r30, r24
    1560:	17 82       	std	Z+7, r1	; 0x07
    1562:	16 82       	std	Z+6, r1	; 0x06
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	81 ff       	sbrs	r24, 1
    1568:	bf c1       	rjmp	.+894    	; 0x18e8 <vfprintf+0x3c4>
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	3c 01       	movw	r6, r24
    1570:	f6 01       	movw	r30, r12
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	f7 01       	movw	r30, r14
    1576:	93 fd       	sbrc	r25, 3
    1578:	85 91       	lpm	r24, Z+
    157a:	93 ff       	sbrs	r25, 3
    157c:	81 91       	ld	r24, Z+
    157e:	7f 01       	movw	r14, r30
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <vfprintf+0x62>
    1584:	ad c1       	rjmp	.+858    	; 0x18e0 <vfprintf+0x3bc>
    1586:	85 32       	cpi	r24, 0x25	; 37
    1588:	39 f4       	brne	.+14     	; 0x1598 <vfprintf+0x74>
    158a:	93 fd       	sbrc	r25, 3
    158c:	85 91       	lpm	r24, Z+
    158e:	93 ff       	sbrs	r25, 3
    1590:	81 91       	ld	r24, Z+
    1592:	7f 01       	movw	r14, r30
    1594:	85 32       	cpi	r24, 0x25	; 37
    1596:	21 f4       	brne	.+8      	; 0x15a0 <vfprintf+0x7c>
    1598:	b6 01       	movw	r22, r12
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	d6 d1       	rcall	.+940    	; 0x194a <fputc>
    159e:	e8 cf       	rjmp	.-48     	; 0x1570 <vfprintf+0x4c>
    15a0:	91 2c       	mov	r9, r1
    15a2:	21 2c       	mov	r2, r1
    15a4:	31 2c       	mov	r3, r1
    15a6:	ff e1       	ldi	r31, 0x1F	; 31
    15a8:	f3 15       	cp	r31, r3
    15aa:	d8 f0       	brcs	.+54     	; 0x15e2 <vfprintf+0xbe>
    15ac:	8b 32       	cpi	r24, 0x2B	; 43
    15ae:	79 f0       	breq	.+30     	; 0x15ce <vfprintf+0xaa>
    15b0:	38 f4       	brcc	.+14     	; 0x15c0 <vfprintf+0x9c>
    15b2:	80 32       	cpi	r24, 0x20	; 32
    15b4:	79 f0       	breq	.+30     	; 0x15d4 <vfprintf+0xb0>
    15b6:	83 32       	cpi	r24, 0x23	; 35
    15b8:	a1 f4       	brne	.+40     	; 0x15e2 <vfprintf+0xbe>
    15ba:	23 2d       	mov	r18, r3
    15bc:	20 61       	ori	r18, 0x10	; 16
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <vfprintf+0xd6>
    15c0:	8d 32       	cpi	r24, 0x2D	; 45
    15c2:	61 f0       	breq	.+24     	; 0x15dc <vfprintf+0xb8>
    15c4:	80 33       	cpi	r24, 0x30	; 48
    15c6:	69 f4       	brne	.+26     	; 0x15e2 <vfprintf+0xbe>
    15c8:	23 2d       	mov	r18, r3
    15ca:	21 60       	ori	r18, 0x01	; 1
    15cc:	16 c0       	rjmp	.+44     	; 0x15fa <vfprintf+0xd6>
    15ce:	83 2d       	mov	r24, r3
    15d0:	82 60       	ori	r24, 0x02	; 2
    15d2:	38 2e       	mov	r3, r24
    15d4:	e3 2d       	mov	r30, r3
    15d6:	e4 60       	ori	r30, 0x04	; 4
    15d8:	3e 2e       	mov	r3, r30
    15da:	2a c0       	rjmp	.+84     	; 0x1630 <vfprintf+0x10c>
    15dc:	f3 2d       	mov	r31, r3
    15de:	f8 60       	ori	r31, 0x08	; 8
    15e0:	1d c0       	rjmp	.+58     	; 0x161c <vfprintf+0xf8>
    15e2:	37 fc       	sbrc	r3, 7
    15e4:	2d c0       	rjmp	.+90     	; 0x1640 <vfprintf+0x11c>
    15e6:	20 ed       	ldi	r18, 0xD0	; 208
    15e8:	28 0f       	add	r18, r24
    15ea:	2a 30       	cpi	r18, 0x0A	; 10
    15ec:	40 f0       	brcs	.+16     	; 0x15fe <vfprintf+0xda>
    15ee:	8e 32       	cpi	r24, 0x2E	; 46
    15f0:	b9 f4       	brne	.+46     	; 0x1620 <vfprintf+0xfc>
    15f2:	36 fc       	sbrc	r3, 6
    15f4:	75 c1       	rjmp	.+746    	; 0x18e0 <vfprintf+0x3bc>
    15f6:	23 2d       	mov	r18, r3
    15f8:	20 64       	ori	r18, 0x40	; 64
    15fa:	32 2e       	mov	r3, r18
    15fc:	19 c0       	rjmp	.+50     	; 0x1630 <vfprintf+0x10c>
    15fe:	36 fe       	sbrs	r3, 6
    1600:	06 c0       	rjmp	.+12     	; 0x160e <vfprintf+0xea>
    1602:	8a e0       	ldi	r24, 0x0A	; 10
    1604:	98 9e       	mul	r9, r24
    1606:	20 0d       	add	r18, r0
    1608:	11 24       	eor	r1, r1
    160a:	92 2e       	mov	r9, r18
    160c:	11 c0       	rjmp	.+34     	; 0x1630 <vfprintf+0x10c>
    160e:	ea e0       	ldi	r30, 0x0A	; 10
    1610:	2e 9e       	mul	r2, r30
    1612:	20 0d       	add	r18, r0
    1614:	11 24       	eor	r1, r1
    1616:	22 2e       	mov	r2, r18
    1618:	f3 2d       	mov	r31, r3
    161a:	f0 62       	ori	r31, 0x20	; 32
    161c:	3f 2e       	mov	r3, r31
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x10c>
    1620:	8c 36       	cpi	r24, 0x6C	; 108
    1622:	21 f4       	brne	.+8      	; 0x162c <vfprintf+0x108>
    1624:	83 2d       	mov	r24, r3
    1626:	80 68       	ori	r24, 0x80	; 128
    1628:	38 2e       	mov	r3, r24
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x10c>
    162c:	88 36       	cpi	r24, 0x68	; 104
    162e:	41 f4       	brne	.+16     	; 0x1640 <vfprintf+0x11c>
    1630:	f7 01       	movw	r30, r14
    1632:	93 fd       	sbrc	r25, 3
    1634:	85 91       	lpm	r24, Z+
    1636:	93 ff       	sbrs	r25, 3
    1638:	81 91       	ld	r24, Z+
    163a:	7f 01       	movw	r14, r30
    163c:	81 11       	cpse	r24, r1
    163e:	b3 cf       	rjmp	.-154    	; 0x15a6 <vfprintf+0x82>
    1640:	98 2f       	mov	r25, r24
    1642:	9f 7d       	andi	r25, 0xDF	; 223
    1644:	95 54       	subi	r25, 0x45	; 69
    1646:	93 30       	cpi	r25, 0x03	; 3
    1648:	28 f4       	brcc	.+10     	; 0x1654 <vfprintf+0x130>
    164a:	0c 5f       	subi	r16, 0xFC	; 252
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	9f e3       	ldi	r25, 0x3F	; 63
    1650:	99 83       	std	Y+1, r25	; 0x01
    1652:	0d c0       	rjmp	.+26     	; 0x166e <vfprintf+0x14a>
    1654:	83 36       	cpi	r24, 0x63	; 99
    1656:	31 f0       	breq	.+12     	; 0x1664 <vfprintf+0x140>
    1658:	83 37       	cpi	r24, 0x73	; 115
    165a:	71 f0       	breq	.+28     	; 0x1678 <vfprintf+0x154>
    165c:	83 35       	cpi	r24, 0x53	; 83
    165e:	09 f0       	breq	.+2      	; 0x1662 <vfprintf+0x13e>
    1660:	55 c0       	rjmp	.+170    	; 0x170c <vfprintf+0x1e8>
    1662:	20 c0       	rjmp	.+64     	; 0x16a4 <vfprintf+0x180>
    1664:	f8 01       	movw	r30, r16
    1666:	80 81       	ld	r24, Z
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	0e 5f       	subi	r16, 0xFE	; 254
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	88 24       	eor	r8, r8
    1670:	83 94       	inc	r8
    1672:	91 2c       	mov	r9, r1
    1674:	53 01       	movw	r10, r6
    1676:	12 c0       	rjmp	.+36     	; 0x169c <vfprintf+0x178>
    1678:	28 01       	movw	r4, r16
    167a:	f2 e0       	ldi	r31, 0x02	; 2
    167c:	4f 0e       	add	r4, r31
    167e:	51 1c       	adc	r5, r1
    1680:	f8 01       	movw	r30, r16
    1682:	a0 80       	ld	r10, Z
    1684:	b1 80       	ldd	r11, Z+1	; 0x01
    1686:	36 fe       	sbrs	r3, 6
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <vfprintf+0x16c>
    168a:	69 2d       	mov	r22, r9
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x170>
    1690:	6f ef       	ldi	r22, 0xFF	; 255
    1692:	7f ef       	ldi	r23, 0xFF	; 255
    1694:	c5 01       	movw	r24, r10
    1696:	4e d1       	rcall	.+668    	; 0x1934 <strnlen>
    1698:	4c 01       	movw	r8, r24
    169a:	82 01       	movw	r16, r4
    169c:	f3 2d       	mov	r31, r3
    169e:	ff 77       	andi	r31, 0x7F	; 127
    16a0:	3f 2e       	mov	r3, r31
    16a2:	15 c0       	rjmp	.+42     	; 0x16ce <vfprintf+0x1aa>
    16a4:	28 01       	movw	r4, r16
    16a6:	22 e0       	ldi	r18, 0x02	; 2
    16a8:	42 0e       	add	r4, r18
    16aa:	51 1c       	adc	r5, r1
    16ac:	f8 01       	movw	r30, r16
    16ae:	a0 80       	ld	r10, Z
    16b0:	b1 80       	ldd	r11, Z+1	; 0x01
    16b2:	36 fe       	sbrs	r3, 6
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <vfprintf+0x198>
    16b6:	69 2d       	mov	r22, r9
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <vfprintf+0x19c>
    16bc:	6f ef       	ldi	r22, 0xFF	; 255
    16be:	7f ef       	ldi	r23, 0xFF	; 255
    16c0:	c5 01       	movw	r24, r10
    16c2:	2d d1       	rcall	.+602    	; 0x191e <strnlen_P>
    16c4:	4c 01       	movw	r8, r24
    16c6:	f3 2d       	mov	r31, r3
    16c8:	f0 68       	ori	r31, 0x80	; 128
    16ca:	3f 2e       	mov	r3, r31
    16cc:	82 01       	movw	r16, r4
    16ce:	33 fc       	sbrc	r3, 3
    16d0:	19 c0       	rjmp	.+50     	; 0x1704 <vfprintf+0x1e0>
    16d2:	82 2d       	mov	r24, r2
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	88 16       	cp	r8, r24
    16d8:	99 06       	cpc	r9, r25
    16da:	a0 f4       	brcc	.+40     	; 0x1704 <vfprintf+0x1e0>
    16dc:	b6 01       	movw	r22, r12
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	33 d1       	rcall	.+614    	; 0x194a <fputc>
    16e4:	2a 94       	dec	r2
    16e6:	f5 cf       	rjmp	.-22     	; 0x16d2 <vfprintf+0x1ae>
    16e8:	f5 01       	movw	r30, r10
    16ea:	37 fc       	sbrc	r3, 7
    16ec:	85 91       	lpm	r24, Z+
    16ee:	37 fe       	sbrs	r3, 7
    16f0:	81 91       	ld	r24, Z+
    16f2:	5f 01       	movw	r10, r30
    16f4:	b6 01       	movw	r22, r12
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	28 d1       	rcall	.+592    	; 0x194a <fputc>
    16fa:	21 10       	cpse	r2, r1
    16fc:	2a 94       	dec	r2
    16fe:	21 e0       	ldi	r18, 0x01	; 1
    1700:	82 1a       	sub	r8, r18
    1702:	91 08       	sbc	r9, r1
    1704:	81 14       	cp	r8, r1
    1706:	91 04       	cpc	r9, r1
    1708:	79 f7       	brne	.-34     	; 0x16e8 <vfprintf+0x1c4>
    170a:	e1 c0       	rjmp	.+450    	; 0x18ce <vfprintf+0x3aa>
    170c:	84 36       	cpi	r24, 0x64	; 100
    170e:	11 f0       	breq	.+4      	; 0x1714 <vfprintf+0x1f0>
    1710:	89 36       	cpi	r24, 0x69	; 105
    1712:	39 f5       	brne	.+78     	; 0x1762 <vfprintf+0x23e>
    1714:	f8 01       	movw	r30, r16
    1716:	37 fe       	sbrs	r3, 7
    1718:	07 c0       	rjmp	.+14     	; 0x1728 <vfprintf+0x204>
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	0c 5f       	subi	r16, 0xFC	; 252
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <vfprintf+0x214>
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	07 2e       	mov	r0, r23
    172e:	00 0c       	add	r0, r0
    1730:	88 0b       	sbc	r24, r24
    1732:	99 0b       	sbc	r25, r25
    1734:	0e 5f       	subi	r16, 0xFE	; 254
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	f3 2d       	mov	r31, r3
    173a:	ff 76       	andi	r31, 0x6F	; 111
    173c:	3f 2e       	mov	r3, r31
    173e:	97 ff       	sbrs	r25, 7
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <vfprintf+0x230>
    1742:	90 95       	com	r25
    1744:	80 95       	com	r24
    1746:	70 95       	com	r23
    1748:	61 95       	neg	r22
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	8f 4f       	sbci	r24, 0xFF	; 255
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	f0 68       	ori	r31, 0x80	; 128
    1752:	3f 2e       	mov	r3, r31
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	a3 01       	movw	r20, r6
    175a:	33 d1       	rcall	.+614    	; 0x19c2 <__ultoa_invert>
    175c:	88 2e       	mov	r8, r24
    175e:	86 18       	sub	r8, r6
    1760:	44 c0       	rjmp	.+136    	; 0x17ea <vfprintf+0x2c6>
    1762:	85 37       	cpi	r24, 0x75	; 117
    1764:	31 f4       	brne	.+12     	; 0x1772 <vfprintf+0x24e>
    1766:	23 2d       	mov	r18, r3
    1768:	2f 7e       	andi	r18, 0xEF	; 239
    176a:	b2 2e       	mov	r11, r18
    176c:	2a e0       	ldi	r18, 0x0A	; 10
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	25 c0       	rjmp	.+74     	; 0x17bc <vfprintf+0x298>
    1772:	93 2d       	mov	r25, r3
    1774:	99 7f       	andi	r25, 0xF9	; 249
    1776:	b9 2e       	mov	r11, r25
    1778:	8f 36       	cpi	r24, 0x6F	; 111
    177a:	c1 f0       	breq	.+48     	; 0x17ac <vfprintf+0x288>
    177c:	18 f4       	brcc	.+6      	; 0x1784 <vfprintf+0x260>
    177e:	88 35       	cpi	r24, 0x58	; 88
    1780:	79 f0       	breq	.+30     	; 0x17a0 <vfprintf+0x27c>
    1782:	ae c0       	rjmp	.+348    	; 0x18e0 <vfprintf+0x3bc>
    1784:	80 37       	cpi	r24, 0x70	; 112
    1786:	19 f0       	breq	.+6      	; 0x178e <vfprintf+0x26a>
    1788:	88 37       	cpi	r24, 0x78	; 120
    178a:	21 f0       	breq	.+8      	; 0x1794 <vfprintf+0x270>
    178c:	a9 c0       	rjmp	.+338    	; 0x18e0 <vfprintf+0x3bc>
    178e:	e9 2f       	mov	r30, r25
    1790:	e0 61       	ori	r30, 0x10	; 16
    1792:	be 2e       	mov	r11, r30
    1794:	b4 fe       	sbrs	r11, 4
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <vfprintf+0x28e>
    1798:	fb 2d       	mov	r31, r11
    179a:	f4 60       	ori	r31, 0x04	; 4
    179c:	bf 2e       	mov	r11, r31
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <vfprintf+0x28e>
    17a0:	34 fe       	sbrs	r3, 4
    17a2:	0a c0       	rjmp	.+20     	; 0x17b8 <vfprintf+0x294>
    17a4:	29 2f       	mov	r18, r25
    17a6:	26 60       	ori	r18, 0x06	; 6
    17a8:	b2 2e       	mov	r11, r18
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <vfprintf+0x294>
    17ac:	28 e0       	ldi	r18, 0x08	; 8
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	05 c0       	rjmp	.+10     	; 0x17bc <vfprintf+0x298>
    17b2:	20 e1       	ldi	r18, 0x10	; 16
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x298>
    17b8:	20 e1       	ldi	r18, 0x10	; 16
    17ba:	32 e0       	ldi	r19, 0x02	; 2
    17bc:	f8 01       	movw	r30, r16
    17be:	b7 fe       	sbrs	r11, 7
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <vfprintf+0x2ac>
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	0c 5f       	subi	r16, 0xFC	; 252
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <vfprintf+0x2b8>
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 5f       	subi	r16, 0xFE	; 254
    17da:	1f 4f       	sbci	r17, 0xFF	; 255
    17dc:	a3 01       	movw	r20, r6
    17de:	f1 d0       	rcall	.+482    	; 0x19c2 <__ultoa_invert>
    17e0:	88 2e       	mov	r8, r24
    17e2:	86 18       	sub	r8, r6
    17e4:	fb 2d       	mov	r31, r11
    17e6:	ff 77       	andi	r31, 0x7F	; 127
    17e8:	3f 2e       	mov	r3, r31
    17ea:	36 fe       	sbrs	r3, 6
    17ec:	0d c0       	rjmp	.+26     	; 0x1808 <vfprintf+0x2e4>
    17ee:	23 2d       	mov	r18, r3
    17f0:	2e 7f       	andi	r18, 0xFE	; 254
    17f2:	a2 2e       	mov	r10, r18
    17f4:	89 14       	cp	r8, r9
    17f6:	58 f4       	brcc	.+22     	; 0x180e <vfprintf+0x2ea>
    17f8:	34 fe       	sbrs	r3, 4
    17fa:	0b c0       	rjmp	.+22     	; 0x1812 <vfprintf+0x2ee>
    17fc:	32 fc       	sbrc	r3, 2
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <vfprintf+0x2ee>
    1800:	83 2d       	mov	r24, r3
    1802:	8e 7e       	andi	r24, 0xEE	; 238
    1804:	a8 2e       	mov	r10, r24
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <vfprintf+0x2ee>
    1808:	b8 2c       	mov	r11, r8
    180a:	a3 2c       	mov	r10, r3
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <vfprintf+0x2f0>
    180e:	b8 2c       	mov	r11, r8
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <vfprintf+0x2f0>
    1812:	b9 2c       	mov	r11, r9
    1814:	a4 fe       	sbrs	r10, 4
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <vfprintf+0x312>
    1818:	fe 01       	movw	r30, r28
    181a:	e8 0d       	add	r30, r8
    181c:	f1 1d       	adc	r31, r1
    181e:	80 81       	ld	r24, Z
    1820:	80 33       	cpi	r24, 0x30	; 48
    1822:	21 f4       	brne	.+8      	; 0x182c <vfprintf+0x308>
    1824:	9a 2d       	mov	r25, r10
    1826:	99 7e       	andi	r25, 0xE9	; 233
    1828:	a9 2e       	mov	r10, r25
    182a:	09 c0       	rjmp	.+18     	; 0x183e <vfprintf+0x31a>
    182c:	a2 fe       	sbrs	r10, 2
    182e:	06 c0       	rjmp	.+12     	; 0x183c <vfprintf+0x318>
    1830:	b3 94       	inc	r11
    1832:	b3 94       	inc	r11
    1834:	04 c0       	rjmp	.+8      	; 0x183e <vfprintf+0x31a>
    1836:	8a 2d       	mov	r24, r10
    1838:	86 78       	andi	r24, 0x86	; 134
    183a:	09 f0       	breq	.+2      	; 0x183e <vfprintf+0x31a>
    183c:	b3 94       	inc	r11
    183e:	a3 fc       	sbrc	r10, 3
    1840:	10 c0       	rjmp	.+32     	; 0x1862 <vfprintf+0x33e>
    1842:	a0 fe       	sbrs	r10, 0
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x32e>
    1846:	b2 14       	cp	r11, r2
    1848:	80 f4       	brcc	.+32     	; 0x186a <vfprintf+0x346>
    184a:	28 0c       	add	r2, r8
    184c:	92 2c       	mov	r9, r2
    184e:	9b 18       	sub	r9, r11
    1850:	0d c0       	rjmp	.+26     	; 0x186c <vfprintf+0x348>
    1852:	b2 14       	cp	r11, r2
    1854:	58 f4       	brcc	.+22     	; 0x186c <vfprintf+0x348>
    1856:	b6 01       	movw	r22, r12
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	76 d0       	rcall	.+236    	; 0x194a <fputc>
    185e:	b3 94       	inc	r11
    1860:	f8 cf       	rjmp	.-16     	; 0x1852 <vfprintf+0x32e>
    1862:	b2 14       	cp	r11, r2
    1864:	18 f4       	brcc	.+6      	; 0x186c <vfprintf+0x348>
    1866:	2b 18       	sub	r2, r11
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x34a>
    186a:	98 2c       	mov	r9, r8
    186c:	21 2c       	mov	r2, r1
    186e:	a4 fe       	sbrs	r10, 4
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <vfprintf+0x36c>
    1872:	b6 01       	movw	r22, r12
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	68 d0       	rcall	.+208    	; 0x194a <fputc>
    187a:	a2 fe       	sbrs	r10, 2
    187c:	16 c0       	rjmp	.+44     	; 0x18aa <vfprintf+0x386>
    187e:	a1 fc       	sbrc	r10, 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <vfprintf+0x364>
    1882:	88 e7       	ldi	r24, 0x78	; 120
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x368>
    1888:	88 e5       	ldi	r24, 0x58	; 88
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b6 01       	movw	r22, r12
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <vfprintf+0x384>
    1890:	8a 2d       	mov	r24, r10
    1892:	86 78       	andi	r24, 0x86	; 134
    1894:	51 f0       	breq	.+20     	; 0x18aa <vfprintf+0x386>
    1896:	a1 fe       	sbrs	r10, 1
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x37a>
    189a:	8b e2       	ldi	r24, 0x2B	; 43
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x37c>
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	a7 fc       	sbrc	r10, 7
    18a2:	8d e2       	ldi	r24, 0x2D	; 45
    18a4:	b6 01       	movw	r22, r12
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	50 d0       	rcall	.+160    	; 0x194a <fputc>
    18aa:	89 14       	cp	r8, r9
    18ac:	30 f4       	brcc	.+12     	; 0x18ba <vfprintf+0x396>
    18ae:	b6 01       	movw	r22, r12
    18b0:	80 e3       	ldi	r24, 0x30	; 48
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	4a d0       	rcall	.+148    	; 0x194a <fputc>
    18b6:	9a 94       	dec	r9
    18b8:	f8 cf       	rjmp	.-16     	; 0x18aa <vfprintf+0x386>
    18ba:	8a 94       	dec	r8
    18bc:	f3 01       	movw	r30, r6
    18be:	e8 0d       	add	r30, r8
    18c0:	f1 1d       	adc	r31, r1
    18c2:	80 81       	ld	r24, Z
    18c4:	b6 01       	movw	r22, r12
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	40 d0       	rcall	.+128    	; 0x194a <fputc>
    18ca:	81 10       	cpse	r8, r1
    18cc:	f6 cf       	rjmp	.-20     	; 0x18ba <vfprintf+0x396>
    18ce:	22 20       	and	r2, r2
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <vfprintf+0x3b0>
    18d2:	4e ce       	rjmp	.-868    	; 0x1570 <vfprintf+0x4c>
    18d4:	b6 01       	movw	r22, r12
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	37 d0       	rcall	.+110    	; 0x194a <fputc>
    18dc:	2a 94       	dec	r2
    18de:	f7 cf       	rjmp	.-18     	; 0x18ce <vfprintf+0x3aa>
    18e0:	f6 01       	movw	r30, r12
    18e2:	86 81       	ldd	r24, Z+6	; 0x06
    18e4:	97 81       	ldd	r25, Z+7	; 0x07
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x3c8>
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	9f ef       	ldi	r25, 0xFF	; 255
    18ec:	2b 96       	adiw	r28, 0x0b	; 11
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	7f 90       	pop	r7
    1912:	6f 90       	pop	r6
    1914:	5f 90       	pop	r5
    1916:	4f 90       	pop	r4
    1918:	3f 90       	pop	r3
    191a:	2f 90       	pop	r2
    191c:	08 95       	ret

0000191e <strnlen_P>:
    191e:	fc 01       	movw	r30, r24
    1920:	05 90       	lpm	r0, Z+
    1922:	61 50       	subi	r22, 0x01	; 1
    1924:	70 40       	sbci	r23, 0x00	; 0
    1926:	01 10       	cpse	r0, r1
    1928:	d8 f7       	brcc	.-10     	; 0x1920 <strnlen_P+0x2>
    192a:	80 95       	com	r24
    192c:	90 95       	com	r25
    192e:	8e 0f       	add	r24, r30
    1930:	9f 1f       	adc	r25, r31
    1932:	08 95       	ret

00001934 <strnlen>:
    1934:	fc 01       	movw	r30, r24
    1936:	61 50       	subi	r22, 0x01	; 1
    1938:	70 40       	sbci	r23, 0x00	; 0
    193a:	01 90       	ld	r0, Z+
    193c:	01 10       	cpse	r0, r1
    193e:	d8 f7       	brcc	.-10     	; 0x1936 <strnlen+0x2>
    1940:	80 95       	com	r24
    1942:	90 95       	com	r25
    1944:	8e 0f       	add	r24, r30
    1946:	9f 1f       	adc	r25, r31
    1948:	08 95       	ret

0000194a <fputc>:
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	fb 01       	movw	r30, r22
    1954:	23 81       	ldd	r18, Z+3	; 0x03
    1956:	21 fd       	sbrc	r18, 1
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <fputc+0x16>
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	2c c0       	rjmp	.+88     	; 0x19b8 <fputc+0x6e>
    1960:	22 ff       	sbrs	r18, 2
    1962:	16 c0       	rjmp	.+44     	; 0x1990 <fputc+0x46>
    1964:	46 81       	ldd	r20, Z+6	; 0x06
    1966:	57 81       	ldd	r21, Z+7	; 0x07
    1968:	24 81       	ldd	r18, Z+4	; 0x04
    196a:	35 81       	ldd	r19, Z+5	; 0x05
    196c:	42 17       	cp	r20, r18
    196e:	53 07       	cpc	r21, r19
    1970:	44 f4       	brge	.+16     	; 0x1982 <fputc+0x38>
    1972:	a0 81       	ld	r26, Z
    1974:	b1 81       	ldd	r27, Z+1	; 0x01
    1976:	9d 01       	movw	r18, r26
    1978:	2f 5f       	subi	r18, 0xFF	; 255
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	31 83       	std	Z+1, r19	; 0x01
    197e:	20 83       	st	Z, r18
    1980:	8c 93       	st	X, r24
    1982:	26 81       	ldd	r18, Z+6	; 0x06
    1984:	37 81       	ldd	r19, Z+7	; 0x07
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	37 83       	std	Z+7, r19	; 0x07
    198c:	26 83       	std	Z+6, r18	; 0x06
    198e:	14 c0       	rjmp	.+40     	; 0x19b8 <fputc+0x6e>
    1990:	8b 01       	movw	r16, r22
    1992:	ec 01       	movw	r28, r24
    1994:	fb 01       	movw	r30, r22
    1996:	00 84       	ldd	r0, Z+8	; 0x08
    1998:	f1 85       	ldd	r31, Z+9	; 0x09
    199a:	e0 2d       	mov	r30, r0
    199c:	09 95       	icall
    199e:	89 2b       	or	r24, r25
    19a0:	e1 f6       	brne	.-72     	; 0x195a <fputc+0x10>
    19a2:	d8 01       	movw	r26, r16
    19a4:	16 96       	adiw	r26, 0x06	; 6
    19a6:	8d 91       	ld	r24, X+
    19a8:	9c 91       	ld	r25, X
    19aa:	17 97       	sbiw	r26, 0x07	; 7
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	17 96       	adiw	r26, 0x07	; 7
    19b0:	9c 93       	st	X, r25
    19b2:	8e 93       	st	-X, r24
    19b4:	16 97       	sbiw	r26, 0x06	; 6
    19b6:	ce 01       	movw	r24, r28
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <__ultoa_invert>:
    19c2:	fa 01       	movw	r30, r20
    19c4:	aa 27       	eor	r26, r26
    19c6:	28 30       	cpi	r18, 0x08	; 8
    19c8:	51 f1       	breq	.+84     	; 0x1a1e <__ultoa_invert+0x5c>
    19ca:	20 31       	cpi	r18, 0x10	; 16
    19cc:	81 f1       	breq	.+96     	; 0x1a2e <__ultoa_invert+0x6c>
    19ce:	e8 94       	clt
    19d0:	6f 93       	push	r22
    19d2:	6e 7f       	andi	r22, 0xFE	; 254
    19d4:	6e 5f       	subi	r22, 0xFE	; 254
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	af 4f       	sbci	r26, 0xFF	; 255
    19de:	b1 e0       	ldi	r27, 0x01	; 1
    19e0:	3e d0       	rcall	.+124    	; 0x1a5e <__ultoa_invert+0x9c>
    19e2:	b4 e0       	ldi	r27, 0x04	; 4
    19e4:	3c d0       	rcall	.+120    	; 0x1a5e <__ultoa_invert+0x9c>
    19e6:	67 0f       	add	r22, r23
    19e8:	78 1f       	adc	r23, r24
    19ea:	89 1f       	adc	r24, r25
    19ec:	9a 1f       	adc	r25, r26
    19ee:	a1 1d       	adc	r26, r1
    19f0:	68 0f       	add	r22, r24
    19f2:	79 1f       	adc	r23, r25
    19f4:	8a 1f       	adc	r24, r26
    19f6:	91 1d       	adc	r25, r1
    19f8:	a1 1d       	adc	r26, r1
    19fa:	6a 0f       	add	r22, r26
    19fc:	71 1d       	adc	r23, r1
    19fe:	81 1d       	adc	r24, r1
    1a00:	91 1d       	adc	r25, r1
    1a02:	a1 1d       	adc	r26, r1
    1a04:	20 d0       	rcall	.+64     	; 0x1a46 <__ultoa_invert+0x84>
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <__ultoa_invert+0x48>
    1a08:	68 94       	set
    1a0a:	3f 91       	pop	r19
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	26 9f       	mul	r18, r22
    1a10:	11 24       	eor	r1, r1
    1a12:	30 19       	sub	r19, r0
    1a14:	30 5d       	subi	r19, 0xD0	; 208
    1a16:	31 93       	st	Z+, r19
    1a18:	de f6       	brtc	.-74     	; 0x19d0 <__ultoa_invert+0xe>
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	08 95       	ret
    1a1e:	46 2f       	mov	r20, r22
    1a20:	47 70       	andi	r20, 0x07	; 7
    1a22:	40 5d       	subi	r20, 0xD0	; 208
    1a24:	41 93       	st	Z+, r20
    1a26:	b3 e0       	ldi	r27, 0x03	; 3
    1a28:	0f d0       	rcall	.+30     	; 0x1a48 <__ultoa_invert+0x86>
    1a2a:	c9 f7       	brne	.-14     	; 0x1a1e <__ultoa_invert+0x5c>
    1a2c:	f6 cf       	rjmp	.-20     	; 0x1a1a <__ultoa_invert+0x58>
    1a2e:	46 2f       	mov	r20, r22
    1a30:	4f 70       	andi	r20, 0x0F	; 15
    1a32:	40 5d       	subi	r20, 0xD0	; 208
    1a34:	4a 33       	cpi	r20, 0x3A	; 58
    1a36:	18 f0       	brcs	.+6      	; 0x1a3e <__ultoa_invert+0x7c>
    1a38:	49 5d       	subi	r20, 0xD9	; 217
    1a3a:	31 fd       	sbrc	r19, 1
    1a3c:	40 52       	subi	r20, 0x20	; 32
    1a3e:	41 93       	st	Z+, r20
    1a40:	02 d0       	rcall	.+4      	; 0x1a46 <__ultoa_invert+0x84>
    1a42:	a9 f7       	brne	.-22     	; 0x1a2e <__ultoa_invert+0x6c>
    1a44:	ea cf       	rjmp	.-44     	; 0x1a1a <__ultoa_invert+0x58>
    1a46:	b4 e0       	ldi	r27, 0x04	; 4
    1a48:	a6 95       	lsr	r26
    1a4a:	97 95       	ror	r25
    1a4c:	87 95       	ror	r24
    1a4e:	77 95       	ror	r23
    1a50:	67 95       	ror	r22
    1a52:	ba 95       	dec	r27
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__ultoa_invert+0x86>
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 05       	cpc	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	08 95       	ret
    1a5e:	9b 01       	movw	r18, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	0a 2e       	mov	r0, r26
    1a64:	06 94       	lsr	r0
    1a66:	57 95       	ror	r21
    1a68:	47 95       	ror	r20
    1a6a:	37 95       	ror	r19
    1a6c:	27 95       	ror	r18
    1a6e:	ba 95       	dec	r27
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__ultoa_invert+0xa2>
    1a72:	62 0f       	add	r22, r18
    1a74:	73 1f       	adc	r23, r19
    1a76:	84 1f       	adc	r24, r20
    1a78:	95 1f       	adc	r25, r21
    1a7a:	a0 1d       	adc	r26, r0
    1a7c:	08 95       	ret

00001a7e <_exit>:
    1a7e:	f8 94       	cli

00001a80 <__stop_program>:
    1a80:	ff cf       	rjmp	.-2      	; 0x1a80 <__stop_program>
