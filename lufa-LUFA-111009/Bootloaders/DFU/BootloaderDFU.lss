
BootloaderDFU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0001fd56  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d56  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800162  00800162  00000e4c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004189  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000191a  00000000  00000000  000051f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002282  00000000  00000000  00006b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00008d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bbe  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000182e  00000000  00000000  0000ad96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	4b c0       	rjmp	.+150    	; 0x1f098 <__ctors_end>
   1f002:	00 00       	nop
   1f004:	66 c0       	rjmp	.+204    	; 0x1f0d2 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	64 c0       	rjmp	.+200    	; 0x1f0d2 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	62 c0       	rjmp	.+196    	; 0x1f0d2 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	60 c0       	rjmp	.+192    	; 0x1f0d2 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	5e c0       	rjmp	.+188    	; 0x1f0d2 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	5c c0       	rjmp	.+184    	; 0x1f0d2 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	5a c0       	rjmp	.+180    	; 0x1f0d2 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	58 c0       	rjmp	.+176    	; 0x1f0d2 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	56 c0       	rjmp	.+172    	; 0x1f0d2 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	bb c4       	rjmp	.+2422   	; 0x1f9a0 <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	52 c0       	rjmp	.+164    	; 0x1f0d2 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	50 c0       	rjmp	.+160    	; 0x1f0d2 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	4e c0       	rjmp	.+156    	; 0x1f0d2 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	4c c0       	rjmp	.+152    	; 0x1f0d2 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	4a c0       	rjmp	.+148    	; 0x1f0d2 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	48 c0       	rjmp	.+144    	; 0x1f0d2 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	46 c0       	rjmp	.+140    	; 0x1f0d2 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	44 c0       	rjmp	.+136    	; 0x1f0d2 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	42 c0       	rjmp	.+132    	; 0x1f0d2 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	ca c1       	rjmp	.+916    	; 0x1f3e6 <__vector_20>
   1f052:	00 00       	nop
   1f054:	3e c0       	rjmp	.+124    	; 0x1f0d2 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	3c c0       	rjmp	.+120    	; 0x1f0d2 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	3a c0       	rjmp	.+116    	; 0x1f0d2 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	38 c0       	rjmp	.+112    	; 0x1f0d2 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	36 c0       	rjmp	.+108    	; 0x1f0d2 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	34 c0       	rjmp	.+104    	; 0x1f0d2 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	32 c0       	rjmp	.+100    	; 0x1f0d2 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	30 c0       	rjmp	.+96     	; 0x1f0d2 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	2e c0       	rjmp	.+92     	; 0x1f0d2 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	2c c0       	rjmp	.+88     	; 0x1f0d2 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	2a c0       	rjmp	.+84     	; 0x1f0d2 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	28 c0       	rjmp	.+80     	; 0x1f0d2 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	26 c0       	rjmp	.+76     	; 0x1f0d2 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	24 c0       	rjmp	.+72     	; 0x1f0d2 <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	22 c0       	rjmp	.+68     	; 0x1f0d2 <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	20 c0       	rjmp	.+64     	; 0x1f0d2 <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	1e c0       	rjmp	.+60     	; 0x1f0d2 <__bad_interrupt>
   1f096:	00 00       	nop

0001f098 <__ctors_end>:
   1f098:	11 24       	eor	r1, r1
   1f09a:	1f be       	out	0x3f, r1	; 63
   1f09c:	cf ef       	ldi	r28, 0xFF	; 255
   1f09e:	d0 e2       	ldi	r29, 0x20	; 32
   1f0a0:	de bf       	out	0x3e, r29	; 62
   1f0a2:	cd bf       	out	0x3d, r28	; 61

0001f0a4 <__do_copy_data>:
   1f0a4:	11 e0       	ldi	r17, 0x01	; 1
   1f0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1f0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1f0aa:	e6 e5       	ldi	r30, 0x56	; 86
   1f0ac:	fd ef       	ldi	r31, 0xFD	; 253
   1f0ae:	01 e0       	ldi	r16, 0x01	; 1
   1f0b0:	0b bf       	out	0x3b, r16	; 59
   1f0b2:	02 c0       	rjmp	.+4      	; 0x1f0b8 <__do_copy_data+0x14>
   1f0b4:	07 90       	elpm	r0, Z+
   1f0b6:	0d 92       	st	X+, r0
   1f0b8:	a2 36       	cpi	r26, 0x62	; 98
   1f0ba:	b1 07       	cpc	r27, r17
   1f0bc:	d9 f7       	brne	.-10     	; 0x1f0b4 <__do_copy_data+0x10>

0001f0be <__do_clear_bss>:
   1f0be:	21 e0       	ldi	r18, 0x01	; 1
   1f0c0:	a2 e6       	ldi	r26, 0x62	; 98
   1f0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0c4:	01 c0       	rjmp	.+2      	; 0x1f0c8 <.do_clear_bss_start>

0001f0c6 <.do_clear_bss_loop>:
   1f0c6:	1d 92       	st	X+, r1

0001f0c8 <.do_clear_bss_start>:
   1f0c8:	af 37       	cpi	r26, 0x7F	; 127
   1f0ca:	b2 07       	cpc	r27, r18
   1f0cc:	e1 f7       	brne	.-8      	; 0x1f0c6 <.do_clear_bss_loop>
   1f0ce:	75 d1       	rcall	.+746    	; 0x1f3ba <main>
   1f0d0:	40 c6       	rjmp	.+3200   	; 0x1fd52 <_exit>

0001f0d2 <__bad_interrupt>:
   1f0d2:	96 cf       	rjmp	.-212    	; 0x1f000 <__vectors>

0001f0d4 <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1f0d4:	88 23       	and	r24, r24
   1f0d6:	b9 f0       	breq	.+46     	; 0x1f106 <DiscardFillerBytes+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f0d8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f0dc:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	{
		if (!(Endpoint_BytesInEndpoint()))
   1f0e0:	23 2b       	or	r18, r19
   1f0e2:	69 f4       	brne	.+26     	; 0x1f0fe <DiscardFillerBytes+0x2a>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f0e4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f0e8:	9b 7f       	andi	r25, 0xFB	; 251
   1f0ea:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f0ee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
   1f0f2:	92 fd       	sbrc	r25, 2
   1f0f4:	06 c0       	rjmp	.+12     	; 0x1f102 <DiscardFillerBytes+0x2e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f0f6:	9e b3       	in	r25, 0x1e	; 30
   1f0f8:	91 11       	cpse	r25, r1
   1f0fa:	f9 cf       	rjmp	.-14     	; 0x1f0ee <DiscardFillerBytes+0x1a>
   1f0fc:	04 c0       	rjmp	.+8      	; 0x1f106 <DiscardFillerBytes+0x32>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
   1f0fe:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1f102:	81 50       	subi	r24, 0x01	; 1
   1f104:	e7 cf       	rjmp	.-50     	; 0x1f0d4 <DiscardFillerBytes>
   1f106:	08 95       	ret

0001f108 <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
   1f108:	ea e6       	ldi	r30, 0x6A	; 106
   1f10a:	f1 e0       	ldi	r31, 0x01	; 1
   1f10c:	35 81       	ldd	r19, Z+5	; 0x05
   1f10e:	24 81       	ldd	r18, Z+4	; 0x04
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
   1f110:	93 81       	ldd	r25, Z+3	; 0x03
   1f112:	82 81       	ldd	r24, Z+2	; 0x02
   1f114:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <StartAddr>
   1f118:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <StartAddr+0x1>
	EndAddr   = Address[1].Word;
   1f11c:	c9 01       	movw	r24, r18
   1f11e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__data_end>
   1f122:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__data_end+0x1>
   1f126:	08 95       	ret

0001f128 <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
   1f128:	1f 93       	push	r17
   1f12a:	cf 93       	push	r28
   1f12c:	df 93       	push	r29
   1f12e:	00 d0       	rcall	.+0      	; 0x1f130 <ProcessBootloaderCommand+0x8>
   1f130:	00 d0       	rcall	.+0      	; 0x1f132 <ProcessBootloaderCommand+0xa>
   1f132:	00 d0       	rcall	.+0      	; 0x1f134 <ProcessBootloaderCommand+0xc>
   1f134:	cd b7       	in	r28, 0x3d	; 61
   1f136:	de b7       	in	r29, 0x3e	; 62
	/* Check if device is in secure mode */
	if (IsSecure)
   1f138:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <IsSecure>
   1f13c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <SentCommand>
   1f140:	99 23       	and	r25, r25
   1f142:	d1 f0       	breq	.+52     	; 0x1f178 <ProcessBootloaderCommand+0x50>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1f144:	84 30       	cpi	r24, 0x04	; 4
   1f146:	49 f4       	brne	.+18     	; 0x1f15a <ProcessBootloaderCommand+0x32>
   1f148:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f14c:	81 11       	cpse	r24, r1
   1f14e:	08 c0       	rjmp	.+16     	; 0x1f160 <ProcessBootloaderCommand+0x38>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
   1f150:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <SentCommand+0x2>
   1f154:	8f 3f       	cpi	r24, 0xFF	; 255
   1f156:	21 f4       	brne	.+8      	; 0x1f160 <ProcessBootloaderCommand+0x38>
   1f158:	68 c0       	rjmp	.+208    	; 0x1f22a <ProcessBootloaderCommand+0x102>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1f15a:	85 30       	cpi	r24, 0x05	; 5
   1f15c:	09 f4       	brne	.+2      	; 0x1f160 <ProcessBootloaderCommand+0x38>
   1f15e:	bf c0       	rjmp	.+382    	; 0x1f2de <ProcessBootloaderCommand+0x1b6>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
   1f160:	8a e0       	ldi	r24, 0x0A	; 10
   1f162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			DFU_Status = errWRITE;
   1f166:	83 e0       	ldi	r24, 0x03	; 3
   1f168:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <DFU_Status>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f16c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f170:	80 62       	ori	r24, 0x20	; 32
   1f172:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f176:	e8 c0       	rjmp	.+464    	; 0x1f348 <ProcessBootloaderCommand+0x220>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
   1f178:	84 30       	cpi	r24, 0x04	; 4
   1f17a:	09 f4       	brne	.+2      	; 0x1f17e <ProcessBootloaderCommand+0x56>
   1f17c:	56 c0       	rjmp	.+172    	; 0x1f22a <ProcessBootloaderCommand+0x102>
   1f17e:	28 f4       	brcc	.+10     	; 0x1f18a <ProcessBootloaderCommand+0x62>
   1f180:	81 30       	cpi	r24, 0x01	; 1
   1f182:	51 f0       	breq	.+20     	; 0x1f198 <ProcessBootloaderCommand+0x70>
   1f184:	83 30       	cpi	r24, 0x03	; 3
   1f186:	21 f1       	breq	.+72     	; 0x1f1d0 <ProcessBootloaderCommand+0xa8>
   1f188:	df c0       	rjmp	.+446    	; 0x1f348 <ProcessBootloaderCommand+0x220>
   1f18a:	85 30       	cpi	r24, 0x05	; 5
   1f18c:	09 f4       	brne	.+2      	; 0x1f190 <ProcessBootloaderCommand+0x68>
   1f18e:	a7 c0       	rjmp	.+334    	; 0x1f2de <ProcessBootloaderCommand+0x1b6>
   1f190:	86 30       	cpi	r24, 0x06	; 6
   1f192:	09 f4       	brne	.+2      	; 0x1f196 <ProcessBootloaderCommand+0x6e>
   1f194:	cd c0       	rjmp	.+410    	; 0x1f330 <ProcessBootloaderCommand+0x208>
   1f196:	d8 c0       	rjmp	.+432    	; 0x1f348 <ProcessBootloaderCommand+0x220>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
   1f198:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <SentCommand+0x1>
   1f19c:	12 30       	cpi	r17, 0x02	; 2
   1f19e:	08 f0       	brcs	.+2      	; 0x1f1a2 <ProcessBootloaderCommand+0x7a>
   1f1a0:	d3 c0       	rjmp	.+422    	; 0x1f348 <ProcessBootloaderCommand+0x220>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1f1a2:	b2 df       	rcall	.-156    	; 0x1f108 <LoadStartEndAddresses>

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
   1f1a4:	11 11       	cpse	r17, r1
   1f1a6:	12 c0       	rjmp	.+36     	; 0x1f1cc <ProcessBootloaderCommand+0xa4>
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1f1a8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <StartAddr>
   1f1ac:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <StartAddr+0x1>
   1f1b0:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <Flash64KBPage>
   1f1b4:	a2 2f       	mov	r26, r18
   1f1b6:	b0 e0       	ldi	r27, 0x00	; 0

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
   1f1b8:	23 e0       	ldi	r18, 0x03	; 3
   1f1ba:	fc 01       	movw	r30, r24
   1f1bc:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f1c0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f1c4:	e8 95       	spm
			boot_spm_busy_wait();
   1f1c6:	07 b6       	in	r0, 0x37	; 55
   1f1c8:	00 fc       	sbrc	r0, 0
   1f1ca:	fd cf       	rjmp	.-6      	; 0x1f1c6 <ProcessBootloaderCommand+0x9e>
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
   1f1cc:	85 e0       	ldi	r24, 0x05	; 5
   1f1ce:	07 c0       	rjmp	.+14     	; 0x1f1de <ProcessBootloaderCommand+0xb6>
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
   1f1d0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f1d4:	98 2f       	mov	r25, r24
   1f1d6:	9d 7f       	andi	r25, 0xFD	; 253
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1f1d8:	29 f4       	brne	.+10     	; 0x1f1e4 <ProcessBootloaderCommand+0xbc>
   1f1da:	96 df       	rcall	.-212    	; 0x1f108 <LoadStartEndAddresses>

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
   1f1dc:	89 e0       	ldi	r24, 0x09	; 9
   1f1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f1e2:	b2 c0       	rjmp	.+356    	; 0x1f348 <ProcessBootloaderCommand+0x220>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
   1f1e4:	81 30       	cpi	r24, 0x01	; 1
   1f1e6:	09 f0       	breq	.+2      	; 0x1f1ea <ProcessBootloaderCommand+0xc2>
   1f1e8:	af c0       	rjmp	.+350    	; 0x1f348 <ProcessBootloaderCommand+0x220>
   1f1ea:	80 e0       	ldi	r24, 0x00	; 0
   1f1ec:	90 e0       	ldi	r25, 0x00	; 0
   1f1ee:	dc 01       	movw	r26, r24

		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
   1f1f0:	ab bf       	out	0x3b, r26	; 59
   1f1f2:	fc 01       	movw	r30, r24
   1f1f4:	27 91       	elpm	r18, Z+
   1f1f6:	2f 3f       	cpi	r18, 0xFF	; 255
   1f1f8:	69 f0       	breq	.+26     	; 0x1f214 <ProcessBootloaderCommand+0xec>
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
   1f1fa:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <Flash64KBPage>
				StartAddr     = CurrFlashAddress;
   1f1fe:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <StartAddr+0x1>
   1f202:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <StartAddr>

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
   1f206:	8a e0       	ldi	r24, 0x0A	; 10
   1f208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				DFU_Status = errCHECK_ERASED;
   1f20c:	85 e0       	ldi	r24, 0x05	; 5
   1f20e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <DFU_Status>
   1f212:	9a c0       	rjmp	.+308    	; 0x1f348 <ProcessBootloaderCommand+0x220>

				break;
			}

			CurrFlashAddress++;
   1f214:	01 96       	adiw	r24, 0x01	; 1
   1f216:	a1 1d       	adc	r26, r1
   1f218:	b1 1d       	adc	r27, r1
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < BOOT_START_ADDR)
   1f21a:	81 15       	cp	r24, r1
   1f21c:	20 ef       	ldi	r18, 0xF0	; 240
   1f21e:	92 07       	cpc	r25, r18
   1f220:	21 e0       	ldi	r18, 0x01	; 1
   1f222:	a2 07       	cpc	r26, r18
   1f224:	b1 05       	cpc	r27, r1
   1f226:	21 f7       	brne	.-56     	; 0x1f1f0 <ProcessBootloaderCommand+0xc8>
   1f228:	8f c0       	rjmp	.+286    	; 0x1f348 <ProcessBootloaderCommand+0x220>
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
   1f22a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f22e:	83 30       	cpi	r24, 0x03	; 3
   1f230:	39 f5       	brne	.+78     	; 0x1f280 <ProcessBootloaderCommand+0x158>
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
   1f232:	81 e0       	ldi	r24, 0x01	; 1
   1f234:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <WaitForExit>

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
   1f238:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <SentCommand+0x6>
   1f23c:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <SentCommand+0x7>
   1f240:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <SentCommand+0x2>
   1f244:	23 2b       	or	r18, r19
   1f246:	61 f0       	breq	.+24     	; 0x1f260 <ProcessBootloaderCommand+0x138>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
   1f248:	81 30       	cpi	r24, 0x01	; 1
   1f24a:	09 f0       	breq	.+2      	; 0x1f24e <ProcessBootloaderCommand+0x126>
   1f24c:	7d c0       	rjmp	.+250    	; 0x1f348 <ProcessBootloaderCommand+0x220>
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
   1f24e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <SentCommand+0x5>
   1f252:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <SentCommand+0x4>

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
   1f256:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <AppStartPtr>
   1f25a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <AppStartPtr+0x1>
   1f25e:	74 c0       	rjmp	.+232    	; 0x1f348 <ProcessBootloaderCommand+0x220>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
   1f260:	81 11       	cpse	r24, r1
   1f262:	0b c0       	rjmp	.+22     	; 0x1f27a <ProcessBootloaderCommand+0x152>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1f264:	9c e0       	ldi	r25, 0x0C	; 12
   1f266:	88 e1       	ldi	r24, 0x18	; 24
   1f268:	0f b6       	in	r0, 0x3f	; 63
   1f26a:	f8 94       	cli
   1f26c:	a8 95       	wdr
   1f26e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f272:	0f be       	out	0x3f, r0	; 63
   1f274:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f278:	67 c0       	rjmp	.+206    	; 0x1f348 <ProcessBootloaderCommand+0x220>
				wdt_enable(WDTO_250MS);
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity */
				RunBootloader = false;
   1f27a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <RunBootloader>
   1f27e:	64 c0       	rjmp	.+200    	; 0x1f348 <ProcessBootloaderCommand+0x220>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
   1f280:	81 11       	cpse	r24, r1
   1f282:	62 c0       	rjmp	.+196    	; 0x1f348 <ProcessBootloaderCommand+0x220>
   1f284:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <SentCommand+0x2>
   1f288:	8f 3f       	cpi	r24, 0xFF	; 255
   1f28a:	09 f0       	breq	.+2      	; 0x1f28e <ProcessBootloaderCommand+0x166>
   1f28c:	5d c0       	rjmp	.+186    	; 0x1f348 <ProcessBootloaderCommand+0x220>
   1f28e:	80 e0       	ldi	r24, 0x00	; 0
   1f290:	90 e0       	ldi	r25, 0x00	; 0
   1f292:	dc 01       	movw	r26, r24
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1f294:	23 e0       	ldi	r18, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1f296:	35 e0       	ldi	r19, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1f298:	fc 01       	movw	r30, r24
   1f29a:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f29e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f2a2:	e8 95       	spm
			boot_spm_busy_wait();
   1f2a4:	07 b6       	in	r0, 0x37	; 55
   1f2a6:	00 fc       	sbrc	r0, 0
   1f2a8:	fd cf       	rjmp	.-6      	; 0x1f2a4 <ProcessBootloaderCommand+0x17c>
			boot_page_write(CurrFlashAddress);
   1f2aa:	fc 01       	movw	r30, r24
   1f2ac:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f2b0:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f2b4:	e8 95       	spm
			boot_spm_busy_wait();
   1f2b6:	07 b6       	in	r0, 0x37	; 55
   1f2b8:	00 fc       	sbrc	r0, 0
   1f2ba:	fd cf       	rjmp	.-6      	; 0x1f2b6 <ProcessBootloaderCommand+0x18e>

			CurrFlashAddress += SPM_PAGESIZE;
   1f2bc:	9f 5f       	subi	r25, 0xFF	; 255
   1f2be:	af 4f       	sbci	r26, 0xFF	; 255
   1f2c0:	bf 4f       	sbci	r27, 0xFF	; 255
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
   1f2c2:	81 15       	cp	r24, r1
   1f2c4:	40 ef       	ldi	r20, 0xF0	; 240
   1f2c6:	94 07       	cpc	r25, r20
   1f2c8:	41 e0       	ldi	r20, 0x01	; 1
   1f2ca:	a4 07       	cpc	r26, r20
   1f2cc:	b1 05       	cpc	r27, r1
   1f2ce:	21 f7       	brne	.-56     	; 0x1f298 <ProcessBootloaderCommand+0x170>

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
   1f2d0:	81 e1       	ldi	r24, 0x11	; 17
   1f2d2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f2d6:	e8 95       	spm

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
   1f2d8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <IsSecure>
   1f2dc:	35 c0       	rjmp	.+106    	; 0x1f348 <ProcessBootloaderCommand+0x220>
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
   1f2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RunBootloader+0x1>
   1f2e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <RunBootloader+0x2>
   1f2e6:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <RunBootloader+0x3>
   1f2ea:	8c 83       	std	Y+4, r24	; 0x04
   1f2ec:	9d 83       	std	Y+5, r25	; 0x05
   1f2ee:	ae 83       	std	Y+6, r26	; 0x06
	const uint8_t SignatureInfo[3]  = {AVR_SIGNATURE_1,    AVR_SIGNATURE_2,     AVR_SIGNATURE_3};
   1f2f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <RunBootloader+0x4>
   1f2f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <RunBootloader+0x5>
   1f2f8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <RunBootloader+0x6>
   1f2fc:	89 83       	std	Y+1, r24	; 0x01
   1f2fe:	9a 83       	std	Y+2, r25	; 0x02
   1f300:	ab 83       	std	Y+3, r26	; 0x03

	uint8_t DataIndexToRead = SentCommand.Data[1];
   1f302:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <SentCommand+0x2>

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                         // Read bootloader info
   1f306:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <SentCommand+0x1>
   1f30a:	91 11       	cpse	r25, r1
   1f30c:	05 c0       	rjmp	.+10     	; 0x1f318 <ProcessBootloaderCommand+0x1f0>
	  ResponseByte = BootloaderInfo[DataIndexToRead];
   1f30e:	fe 01       	movw	r30, r28
   1f310:	e8 0f       	add	r30, r24
   1f312:	f1 1d       	adc	r31, r1
   1f314:	84 81       	ldd	r24, Z+4	; 0x04
   1f316:	09 c0       	rjmp	.+18     	; 0x1f32a <ProcessBootloaderCommand+0x202>
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
   1f318:	91 30       	cpi	r25, 0x01	; 1
   1f31a:	b1 f4       	brne	.+44     	; 0x1f348 <ProcessBootloaderCommand+0x220>
	  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
   1f31c:	e1 ed       	ldi	r30, 0xD1	; 209
   1f31e:	ff ef       	ldi	r31, 0xFF	; 255
   1f320:	ec 0f       	add	r30, r28
   1f322:	fd 1f       	adc	r31, r29
   1f324:	e8 0f       	add	r30, r24
   1f326:	f1 1d       	adc	r31, r1
   1f328:	80 81       	ld	r24, Z
   1f32a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <ResponseByte>
   1f32e:	0c c0       	rjmp	.+24     	; 0x1f348 <ProcessBootloaderCommand+0x220>
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
   1f330:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f334:	83 30       	cpi	r24, 0x03	; 3
   1f336:	41 f4       	brne	.+16     	; 0x1f348 <ProcessBootloaderCommand+0x220>
   1f338:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <SentCommand+0x2>
   1f33c:	81 11       	cpse	r24, r1
   1f33e:	04 c0       	rjmp	.+8      	; 0x1f348 <ProcessBootloaderCommand+0x220>
			  Flash64KBPage = SentCommand.Data[2];
   1f340:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <SentCommand+0x3>
   1f344:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <Flash64KBPage>

			break;
	}
}
   1f348:	26 96       	adiw	r28, 0x06	; 6
   1f34a:	0f b6       	in	r0, 0x3f	; 63
   1f34c:	f8 94       	cli
   1f34e:	de bf       	out	0x3e, r29	; 62
   1f350:	0f be       	out	0x3f, r0	; 63
   1f352:	cd bf       	out	0x3d, r28	; 61
   1f354:	df 91       	pop	r29
   1f356:	cf 91       	pop	r28
   1f358:	1f 91       	pop	r17
   1f35a:	08 95       	ret

0001f35c <SetupHardware>:
	AppStartPtr();
}

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
   1f35c:	cf 93       	push	r28
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f35e:	84 b7       	in	r24, 0x34	; 52
   1f360:	87 7f       	andi	r24, 0xF7	; 247
   1f362:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1f364:	0f b6       	in	r0, 0x3f	; 63
   1f366:	f8 94       	cli
   1f368:	a8 95       	wdr
   1f36a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f36e:	88 61       	ori	r24, 0x18	; 24
   1f370:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f374:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f378:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1f37a:	90 e0       	ldi	r25, 0x00	; 0
   1f37c:	80 e8       	ldi	r24, 0x80	; 128
   1f37e:	0f b6       	in	r0, 0x3f	; 63
   1f380:	f8 94       	cli
   1f382:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1f386:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1f38a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1f38c:	c1 e0       	ldi	r28, 0x01	; 1
   1f38e:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1f390:	82 e0       	ldi	r24, 0x02	; 2
   1f392:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB subsystem */
	USB_Init();
   1f394:	ef d2       	rcall	.+1502   	; 0x1f974 <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1f396:	8a b1       	in	r24, 0x0a	; 10
   1f398:	80 6f       	ori	r24, 0xF0	; 240
   1f39a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   1f39c:	8b b1       	in	r24, 0x0b	; 11
   1f39e:	8f 70       	andi	r24, 0x0F	; 15
   1f3a0:	8b b9       	out	0x0b, r24	; 11
	LEDs_Init();
	
	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1f3a2:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1f3a6:	83 e0       	ldi	r24, 0x03	; 3
   1f3a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}
   1f3ac:	cf 91       	pop	r28
   1f3ae:	08 95       	ret

0001f3b0 <ResetHardware>:

/** Resets all configured hardware required for the bootloader back to their original states. */
void ResetHardware(void)
{
	/* Shut down the USB subsystem */
	USB_Disable();
   1f3b0:	89 d2       	rcall	.+1298   	; 0x1f8c4 <USB_Disable>

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
   1f3b2:	81 e0       	ldi	r24, 0x01	; 1
   1f3b4:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
   1f3b6:	15 be       	out	0x35, r1	; 53
   1f3b8:	08 95       	ret

0001f3ba <main>:
 *  the loaded application code.
 */
int main(void)
{
	/* Configure hardware required by the bootloader */
	SetupHardware();
   1f3ba:	d0 df       	rcall	.-96     	; 0x1f35c <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1f3bc:	8b b1       	in	r24, 0x0b	; 11
   1f3be:	8f 70       	andi	r24, 0x0F	; 15
   1f3c0:	80 61       	ori	r24, 0x10	; 16
   1f3c2:	8b b9       	out	0x0b, r24	; 11

	/* Turn on first LED on the board to indicate that the bootloader has started */
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1f3c4:	78 94       	sei

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1f3c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
   1f3ca:	88 23       	and	r24, r24
	  USB_USBTask();
   1f3cc:	11 f0       	breq	.+4      	; 0x1f3d2 <main+0x18>
   1f3ce:	a3 d4       	rcall	.+2374   	; 0x1fd16 <USB_USBTask>
   1f3d0:	fa cf       	rjmp	.-12     	; 0x1f3c6 <main+0xc>

	/* Enable global interrupts so that the USB stack can function */
	sei();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1f3d2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <WaitForExit>
   1f3d6:	81 11       	cpse	r24, r1
	  USB_USBTask();

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();
   1f3d8:	fa cf       	rjmp	.-12     	; 0x1f3ce <main+0x14>
   1f3da:	ea df       	rcall	.-44     	; 0x1f3b0 <ResetHardware>

	/* Start the user application */
	AppStartPtr();
   1f3dc:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <AppStartPtr>
   1f3e0:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <AppStartPtr+0x1>
   1f3e4:	09 95       	icall

0001f3e6 <__vector_20>:
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1f3e6:	1f 92       	push	r1
   1f3e8:	0f 92       	push	r0
   1f3ea:	0f b6       	in	r0, 0x3f	; 63
   1f3ec:	0f 92       	push	r0
   1f3ee:	11 24       	eor	r1, r1
   1f3f0:	8f 93       	push	r24
   1f3f2:	9f 93       	push	r25
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
   1f3f4:	9b b1       	in	r25, 0x0b	; 11
   1f3f6:	80 e3       	ldi	r24, 0x30	; 48
   1f3f8:	89 27       	eor	r24, r25
   1f3fa:	8b b9       	out	0x0b, r24	; 11
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1f3fc:	9f 91       	pop	r25
   1f3fe:	8f 91       	pop	r24
   1f400:	0f 90       	pop	r0
   1f402:	0f be       	out	0x3f, r0	; 63
   1f404:	0f 90       	pop	r0
   1f406:	1f 90       	pop	r1
   1f408:	18 95       	reti

0001f40a <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{	
   1f40a:	8f 92       	push	r8
   1f40c:	9f 92       	push	r9
   1f40e:	af 92       	push	r10
   1f410:	bf 92       	push	r11
   1f412:	cf 92       	push	r12
   1f414:	df 92       	push	r13
   1f416:	ef 92       	push	r14
   1f418:	ff 92       	push	r15
   1f41a:	0f 93       	push	r16
   1f41c:	1f 93       	push	r17
   1f41e:	cf 93       	push	r28
   1f420:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1f422:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest>
   1f426:	8f 77       	andi	r24, 0x7F	; 127
   1f428:	81 32       	cpi	r24, 0x21	; 33
   1f42a:	09 f0       	breq	.+2      	; 0x1f42e <EVENT_USB_Device_ControlRequest+0x24>
   1f42c:	e7 c1       	rjmp	.+974    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
   1f42e:	9b b1       	in	r25, 0x0b	; 11
   1f430:	80 e3       	ldi	r24, 0x30	; 48
   1f432:	89 27       	eor	r24, r25
   1f434:	8b b9       	out	0x0b, r24	; 11

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
   1f436:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest+0x6>
   1f43a:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <USB_ControlRequest+0x7>
   1f43e:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <SentCommand+0x7>
   1f442:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SentCommand+0x6>

	switch (USB_ControlRequest.bRequest)
   1f446:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <USB_ControlRequest+0x1>
   1f44a:	83 30       	cpi	r24, 0x03	; 3
   1f44c:	09 f4       	brne	.+2      	; 0x1f450 <EVENT_USB_Device_ControlRequest+0x46>
   1f44e:	a3 c1       	rjmp	.+838    	; 0x1f796 <EVENT_USB_Device_ControlRequest+0x38c>
   1f450:	58 f4       	brcc	.+22     	; 0x1f468 <EVENT_USB_Device_ControlRequest+0x5e>
   1f452:	81 30       	cpi	r24, 0x01	; 1
   1f454:	d1 f0       	breq	.+52     	; 0x1f48a <EVENT_USB_Device_ControlRequest+0x80>
   1f456:	82 30       	cpi	r24, 0x02	; 2
   1f458:	09 f0       	breq	.+2      	; 0x1f45c <EVENT_USB_Device_ControlRequest+0x52>
   1f45a:	d0 c1       	rjmp	.+928    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f45c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f460:	87 7f       	andi	r24, 0xF7	; 247
   1f462:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f466:	0a c1       	rjmp	.+532    	; 0x1f67c <EVENT_USB_Device_ControlRequest+0x272>
   1f468:	85 30       	cpi	r24, 0x05	; 5
   1f46a:	09 f4       	brne	.+2      	; 0x1f46e <EVENT_USB_Device_ControlRequest+0x64>
   1f46c:	b2 c1       	rjmp	.+868    	; 0x1f7d2 <EVENT_USB_Device_ControlRequest+0x3c8>
   1f46e:	08 f4       	brcc	.+2      	; 0x1f472 <EVENT_USB_Device_ControlRequest+0x68>
   1f470:	a8 c1       	rjmp	.+848    	; 0x1f7c2 <EVENT_USB_Device_ControlRequest+0x3b8>
   1f472:	86 30       	cpi	r24, 0x06	; 6
   1f474:	09 f0       	breq	.+2      	; 0x1f478 <EVENT_USB_Device_ControlRequest+0x6e>
   1f476:	c2 c1       	rjmp	.+900    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
   1f478:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f47c:	87 7f       	andi	r24, 0xF7	; 247
   1f47e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
   1f482:	82 e0       	ldi	r24, 0x02	; 2
   1f484:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f488:	ac c1       	rjmp	.+856    	; 0x1f7e2 <EVENT_USB_Device_ControlRequest+0x3d8>
   1f48a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f48e:	87 7f       	andi	r24, 0xF7	; 247
   1f490:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
   1f494:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <WaitForExit>
   1f498:	88 23       	and	r24, r24
   1f49a:	19 f0       	breq	.+6      	; 0x1f4a2 <EVENT_USB_Device_ControlRequest+0x98>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
   1f49c:	45 de       	rcall	.-886    	; 0x1f128 <ProcessBootloaderCommand>

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
   1f49e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <WaitForExit>
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
   1f4a2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x6>
   1f4a6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <SentCommand+0x7>
   1f4aa:	00 97       	sbiw	r24, 0x00	; 0
   1f4ac:	51 f1       	breq	.+84     	; 0x1f502 <EVENT_USB_Device_ControlRequest+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f4ae:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				while (!(Endpoint_IsOUTReceived()))
   1f4b2:	22 fd       	sbrc	r18, 2
   1f4b4:	04 c0       	rjmp	.+8      	; 0x1f4be <EVENT_USB_Device_ControlRequest+0xb4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f4b6:	2e b3       	in	r18, 0x1e	; 30
   1f4b8:	21 11       	cpse	r18, r1
   1f4ba:	f9 cf       	rjmp	.-14     	; 0x1f4ae <EVENT_USB_Device_ControlRequest+0xa4>
   1f4bc:	9f c1       	rjmp	.+830    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f4be:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
   1f4c2:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <SentCommand>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
   1f4c6:	01 97       	sbiw	r24, 0x01	; 1
   1f4c8:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <SentCommand+0x7>
   1f4cc:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SentCommand+0x6>
   1f4d0:	eb e6       	ldi	r30, 0x6B	; 107
   1f4d2:	f1 e0       	ldi	r31, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f4d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f4d8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1f4dc:	89 2b       	or	r24, r25
   1f4de:	81 f0       	breq	.+32     	; 0x1f500 <EVENT_USB_Device_ControlRequest+0xf6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f4e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
   1f4e4:	81 93       	st	Z+, r24
					SentCommand.DataSize--;
   1f4e6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x6>
   1f4ea:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <SentCommand+0x7>
   1f4ee:	01 97       	sbiw	r24, 0x01	; 1
   1f4f0:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <SentCommand+0x7>
   1f4f4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SentCommand+0x6>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1f4f8:	21 e0       	ldi	r18, 0x01	; 1
   1f4fa:	e0 37       	cpi	r30, 0x70	; 112
   1f4fc:	f2 07       	cpc	r31, r18
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
   1f4fe:	51 f7       	brne	.-44     	; 0x1f4d4 <EVENT_USB_Device_ControlRequest+0xca>
   1f500:	13 de       	rcall	.-986    	; 0x1f128 <ProcessBootloaderCommand>
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
   1f502:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f506:	85 30       	cpi	r24, 0x05	; 5
   1f508:	09 f0       	breq	.+2      	; 0x1f50c <EVENT_USB_Device_ControlRequest+0x102>
   1f50a:	b0 c0       	rjmp	.+352    	; 0x1f66c <EVENT_USB_Device_ControlRequest+0x262>
			{
				if (!(SentCommand.DataSize))
   1f50c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x6>
   1f510:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <SentCommand+0x7>
   1f514:	89 2b       	or	r24, r25
   1f516:	21 f4       	brne	.+8      	; 0x1f520 <EVENT_USB_Device_ControlRequest+0x116>
				{
					DFU_State = dfuIDLE;
   1f518:	82 e0       	ldi	r24, 0x02	; 2
   1f51a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
   1f51e:	a6 c0       	rjmp	.+332    	; 0x1f66c <EVENT_USB_Device_ControlRequest+0x262>
   1f520:	8a e1       	ldi	r24, 0x1A	; 26
   1f522:	d8 dd       	rcall	.-1104   	; 0x1f0d4 <DiscardFillerBytes>

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
   1f524:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <StartAddr>
   1f528:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <StartAddr+0x1>
   1f52c:	80 2f       	mov	r24, r16
   1f52e:	8f 71       	andi	r24, 0x1F	; 31
   1f530:	d1 dd       	rcall	.-1118   	; 0x1f0d4 <DiscardFillerBytes>

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1f532:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
   1f536:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
   1f53a:	01 96       	adiw	r24, 0x01	; 1
   1f53c:	ec 01       	movw	r28, r24
   1f53e:	c0 1b       	sub	r28, r16
   1f540:	d1 0b       	sbc	r29, r17

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
   1f542:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f546:	81 11       	cpse	r24, r1
   1f548:	7f c0       	rjmp	.+254    	; 0x1f648 <EVENT_USB_Device_ControlRequest+0x23e>
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
   1f54a:	ce 01       	movw	r24, r28
   1f54c:	96 95       	lsr	r25
   1f54e:	87 95       	ror	r24

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
   1f550:	a8 01       	movw	r20, r16
   1f552:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <Flash64KBPage>
   1f556:	62 2f       	mov	r22, r18
   1f558:	70 e0       	ldi	r23, 0x00	; 0

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1f55a:	4a 01       	movw	r8, r20
   1f55c:	5b 01       	movw	r10, r22
						uint8_t  WordsInFlashPage          = 0;
   1f55e:	20 e0       	ldi	r18, 0x00	; 0
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1f560:	c1 e0       	ldi	r28, 0x01	; 1

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1f562:	d5 e0       	ldi	r29, 0x05	; 5
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1f564:	13 e0       	ldi	r17, 0x03	; 3
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1f566:	00 97       	sbiw	r24, 0x00	; 0
   1f568:	09 f4       	brne	.+2      	; 0x1f56c <EVENT_USB_Device_ControlRequest+0x162>
   1f56a:	4a c0       	rjmp	.+148    	; 0x1f600 <EVENT_USB_Device_ControlRequest+0x1f6>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f56c:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f570:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1f574:	ef 2b       	or	r30, r31
   1f576:	e1 f0       	breq	.+56     	; 0x1f5b0 <EVENT_USB_Device_ControlRequest+0x1a6>
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1f578:	01 97       	sbiw	r24, 0x01	; 1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1f57a:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
   1f57e:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

				return Data.Value;
   1f582:	ae 2f       	mov	r26, r30
   1f584:	b3 2f       	mov	r27, r19
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1f586:	0d 01       	movw	r0, r26
   1f588:	fa 01       	movw	r30, r20
   1f58a:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f58e:	c0 93 57 00 	sts	0x0057, r28	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f592:	e8 95       	spm
   1f594:	11 24       	eor	r1, r1

							/* Adjust counters */
							WordsInFlashPage      += 1;
   1f596:	2f 5f       	subi	r18, 0xFF	; 255
							CurrFlashAddress.Long += 2;
   1f598:	6a 01       	movw	r12, r20
   1f59a:	7b 01       	movw	r14, r22
   1f59c:	32 e0       	ldi	r19, 0x02	; 2
   1f59e:	c3 0e       	add	r12, r19
   1f5a0:	d1 1c       	adc	r13, r1
   1f5a2:	e1 1c       	adc	r14, r1
   1f5a4:	f1 1c       	adc	r15, r1
   1f5a6:	b7 01       	movw	r22, r14
   1f5a8:	a6 01       	movw	r20, r12

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1f5aa:	20 38       	cpi	r18, 0x80	; 128
   1f5ac:	71 f4       	brne	.+28     	; 0x1f5ca <EVENT_USB_Device_ControlRequest+0x1c0>
   1f5ae:	0f c0       	rjmp	.+30     	; 0x1f5ce <EVENT_USB_Device_ControlRequest+0x1c4>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f5b0:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f5b4:	3b 7f       	andi	r19, 0xFB	; 251
   1f5b6:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f5ba:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1f5be:	32 fd       	sbrc	r19, 2
   1f5c0:	db cf       	rjmp	.-74     	; 0x1f578 <EVENT_USB_Device_ControlRequest+0x16e>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f5c2:	3e b3       	in	r19, 0x1e	; 30
   1f5c4:	31 11       	cpse	r19, r1
   1f5c6:	f9 cf       	rjmp	.-14     	; 0x1f5ba <EVENT_USB_Device_ControlRequest+0x1b0>
   1f5c8:	19 c1       	rjmp	.+562    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1f5ca:	00 97       	sbiw	r24, 0x00	; 0
   1f5cc:	61 f6       	brne	.-104    	; 0x1f566 <EVENT_USB_Device_ControlRequest+0x15c>
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1f5ce:	f4 01       	movw	r30, r8
   1f5d0:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f5d4:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f5d8:	e8 95       	spm
								boot_spm_busy_wait();
   1f5da:	07 b6       	in	r0, 0x37	; 55
   1f5dc:	00 fc       	sbrc	r0, 0
   1f5de:	fd cf       	rjmp	.-6      	; 0x1f5da <EVENT_USB_Device_ControlRequest+0x1d0>

								/* Check if programming incomplete */
								if (WordsRemaining)
   1f5e0:	00 97       	sbiw	r24, 0x00	; 0
   1f5e2:	09 f4       	brne	.+2      	; 0x1f5e6 <EVENT_USB_Device_ControlRequest+0x1dc>
   1f5e4:	c0 cf       	rjmp	.-128    	; 0x1f566 <EVENT_USB_Device_ControlRequest+0x15c>
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1f5e6:	f6 01       	movw	r30, r12
   1f5e8:	e0 92 5b 00 	sts	0x005B, r14	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f5ec:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f5f0:	e8 95       	spm
									boot_spm_busy_wait();
   1f5f2:	07 b6       	in	r0, 0x37	; 55
   1f5f4:	00 fc       	sbrc	r0, 0
   1f5f6:	fd cf       	rjmp	.-6      	; 0x1f5f2 <EVENT_USB_Device_ControlRequest+0x1e8>
								boot_spm_busy_wait();

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1f5f8:	46 01       	movw	r8, r12
   1f5fa:	57 01       	movw	r10, r14
									WordsInFlashPage          = 0;
   1f5fc:	20 e0       	ldi	r18, 0x00	; 0
   1f5fe:	b3 cf       	rjmp	.-154    	; 0x1f566 <EVENT_USB_Device_ControlRequest+0x15c>
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
   1f600:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
   1f604:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
   1f608:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <StartAddr+0x1>
   1f60c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <StartAddr>

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
   1f610:	81 e1       	ldi	r24, 0x11	; 17
   1f612:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f616:	e8 95       	spm
   1f618:	27 c0       	rjmp	.+78     	; 0x1f668 <EVENT_USB_Device_ControlRequest+0x25e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f61a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f61e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1f622:	89 2b       	or	r24, r25
   1f624:	a1 f0       	breq	.+40     	; 0x1f64e <EVENT_USB_Device_ControlRequest+0x244>
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1f626:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f628:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_8());
   1f62c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <StartAddr>
   1f630:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <StartAddr+0x1>
   1f634:	80 d3       	rcall	.+1792   	; 0x1fd36 <eeprom_write_byte>

							/* Adjust counters */
							StartAddr++;
   1f636:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <StartAddr>
   1f63a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <StartAddr+0x1>
   1f63e:	01 96       	adiw	r24, 0x01	; 1
   1f640:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <StartAddr+0x1>
   1f644:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <StartAddr>
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1f648:	20 97       	sbiw	r28, 0x00	; 0
   1f64a:	39 f7       	brne	.-50     	; 0x1f61a <EVENT_USB_Device_ControlRequest+0x210>
   1f64c:	0d c0       	rjmp	.+26     	; 0x1f668 <EVENT_USB_Device_ControlRequest+0x25e>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f64e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f652:	8b 7f       	andi	r24, 0xFB	; 251
   1f654:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f658:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1f65c:	82 fd       	sbrc	r24, 2
   1f65e:	e3 cf       	rjmp	.-58     	; 0x1f626 <EVENT_USB_Device_ControlRequest+0x21c>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f660:	8e b3       	in	r24, 0x1e	; 30
   1f662:	81 11       	cpse	r24, r1
   1f664:	f9 cf       	rjmp	.-14     	; 0x1f658 <EVENT_USB_Device_ControlRequest+0x24e>
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
   1f666:	ca c0       	rjmp	.+404    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
   1f668:	80 e1       	ldi	r24, 0x10	; 16
   1f66a:	34 dd       	rcall	.-1432   	; 0x1f0d4 <DiscardFillerBytes>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f66c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f670:	8b 7f       	andi	r24, 0xFB	; 251
   1f672:	8e c0       	rjmp	.+284    	; 0x1f790 <EVENT_USB_Device_ControlRequest+0x386>
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f674:	8e b3       	in	r24, 0x1e	; 30
   1f676:	88 23       	and	r24, r24
   1f678:	09 f4       	brne	.+2      	; 0x1f67c <EVENT_USB_Device_ControlRequest+0x272>
   1f67a:	c0 c0       	rjmp	.+384    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f67c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1f680:	80 ff       	sbrs	r24, 0
   1f682:	f8 cf       	rjmp	.-16     	; 0x1f674 <EVENT_USB_Device_ControlRequest+0x26a>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
   1f684:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f688:	89 30       	cpi	r24, 0x09	; 9
   1f68a:	91 f0       	breq	.+36     	; 0x1f6b0 <EVENT_USB_Device_ControlRequest+0x2a6>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
   1f68c:	8a 30       	cpi	r24, 0x0A	; 10
   1f68e:	59 f4       	brne	.+22     	; 0x1f6a6 <EVENT_USB_Device_ControlRequest+0x29c>
   1f690:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f694:	81 30       	cpi	r24, 0x01	; 1
   1f696:	39 f4       	brne	.+14     	; 0x1f6a6 <EVENT_USB_Device_ControlRequest+0x29c>
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
   1f698:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <StartAddr>
   1f69c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <StartAddr+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f6a0:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f6a4:	02 c0       	rjmp	.+4      	; 0x1f6aa <EVENT_USB_Device_ControlRequest+0x2a0>
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
   1f6a6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <ResponseByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f6aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f6ae:	6d c0       	rjmp	.+218    	; 0x1f78a <EVENT_USB_Device_ControlRequest+0x380>
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1f6b0:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <StartAddr>
   1f6b4:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <StartAddr+0x1>
   1f6b8:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <__data_end>
   1f6bc:	d0 91 63 01 	lds	r29, 0x0163	; 0x800163 <__data_end+0x1>
   1f6c0:	21 96       	adiw	r28, 0x01	; 1
   1f6c2:	c2 1b       	sub	r28, r18
   1f6c4:	d3 0b       	sbc	r29, r19

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
   1f6c6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SentCommand+0x1>
   1f6ca:	81 11       	cpse	r24, r1
   1f6cc:	32 c0       	rjmp	.+100    	; 0x1f732 <EVENT_USB_Device_ControlRequest+0x328>
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
   1f6ce:	d6 95       	lsr	r29
   1f6d0:	c7 95       	ror	r28

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1f6d2:	c9 01       	movw	r24, r18
   1f6d4:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <Flash64KBPage>
   1f6d8:	a2 2f       	mov	r26, r18
   1f6da:	b0 e0       	ldi	r27, 0x00	; 0

					while (WordsRemaining--)
   1f6dc:	21 97       	sbiw	r28, 0x01	; 1
   1f6de:	00 f1       	brcs	.+64     	; 0x1f720 <EVENT_USB_Device_ControlRequest+0x316>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f6e0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f6e4:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1f6e8:	20 32       	cpi	r18, 0x20	; 32
   1f6ea:	31 05       	cpc	r19, r1
   1f6ec:	61 f0       	breq	.+24     	; 0x1f706 <EVENT_USB_Device_ControlRequest+0x2fc>
							}
						}

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
   1f6ee:	ab bf       	out	0x3b, r26	; 59
   1f6f0:	fc 01       	movw	r30, r24
   1f6f2:	27 91       	elpm	r18, Z+
   1f6f4:	36 91       	elpm	r19, Z
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f6f6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1f6fa:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
						#else
							Endpoint_Write_16_LE(pgm_read_word(CurrFlashAddress.Long));
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
   1f6fe:	02 96       	adiw	r24, 0x02	; 2
   1f700:	a1 1d       	adc	r26, r1
   1f702:	b1 1d       	adc	r27, r1
   1f704:	eb cf       	rjmp	.-42     	; 0x1f6dc <EVENT_USB_Device_ControlRequest+0x2d2>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f706:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f70a:	2e 7f       	andi	r18, 0xFE	; 254
   1f70c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f710:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1f714:	20 fd       	sbrc	r18, 0
   1f716:	eb cf       	rjmp	.-42     	; 0x1f6ee <EVENT_USB_Device_ControlRequest+0x2e4>
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f718:	2e b3       	in	r18, 0x1e	; 30
   1f71a:	21 11       	cpse	r18, r1
   1f71c:	f9 cf       	rjmp	.-14     	; 0x1f710 <EVENT_USB_Device_ControlRequest+0x306>
   1f71e:	6e c0       	rjmp	.+220    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
   1f720:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
   1f724:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
   1f728:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <StartAddr+0x1>
   1f72c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <StartAddr>
   1f730:	29 c0       	rjmp	.+82     	; 0x1f784 <EVENT_USB_Device_ControlRequest+0x37a>
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
   1f732:	82 30       	cpi	r24, 0x02	; 2
   1f734:	39 f5       	brne	.+78     	; 0x1f784 <EVENT_USB_Device_ControlRequest+0x37a>
				{
					while (BytesRemaining--)
   1f736:	20 97       	sbiw	r28, 0x00	; 0
   1f738:	29 f1       	breq	.+74     	; 0x1f784 <EVENT_USB_Device_ControlRequest+0x37a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f73a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f73e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1f742:	80 97       	sbiw	r24, 0x20	; 32
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
   1f744:	91 f0       	breq	.+36     	; 0x1f76a <EVENT_USB_Device_ControlRequest+0x360>
   1f746:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <StartAddr>
   1f74a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <StartAddr+0x1>
   1f74e:	eb d2       	rcall	.+1494   	; 0x1fd26 <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f750:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

						/* Adjust counters */
						StartAddr++;
   1f754:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <StartAddr>
   1f758:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <StartAddr+0x1>
   1f75c:	01 96       	adiw	r24, 0x01	; 1
   1f75e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <StartAddr+0x1>
   1f762:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <StartAddr>
   1f766:	21 97       	sbiw	r28, 0x01	; 1
   1f768:	e6 cf       	rjmp	.-52     	; 0x1f736 <EVENT_USB_Device_ControlRequest+0x32c>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f76a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f76e:	8e 7f       	andi	r24, 0xFE	; 254
   1f770:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1f778:	80 fd       	sbrc	r24, 0
   1f77a:	e5 cf       	rjmp	.-54     	; 0x1f746 <EVENT_USB_Device_ControlRequest+0x33c>
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f77c:	8e b3       	in	r24, 0x1e	; 30
   1f77e:	81 11       	cpse	r24, r1
   1f780:	f9 cf       	rjmp	.-14     	; 0x1f774 <EVENT_USB_Device_ControlRequest+0x36a>
   1f782:	3c c0       	rjmp	.+120    	; 0x1f7fc <EVENT_USB_Device_ControlRequest+0x3f2>
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
   1f784:	82 e0       	ldi	r24, 0x02	; 2
   1f786:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f78a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f78e:	8e 7f       	andi	r24, 0xFE	; 254
   1f790:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f794:	26 c0       	rjmp	.+76     	; 0x1f7e2 <EVENT_USB_Device_ControlRequest+0x3d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f796:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f79a:	87 7f       	andi	r24, 0xF7	; 247
   1f79c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
   1f7a0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <DFU_Status>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f7a4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f7a8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f7ac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1f7b0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
   1f7b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f7b8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f7bc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f7c0:	e4 cf       	rjmp	.-56     	; 0x1f78a <EVENT_USB_Device_ControlRequest+0x380>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f7c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f7c6:	87 7f       	andi	r24, 0xF7	; 247
   1f7c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
   1f7cc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <DFU_Status>
   1f7d0:	08 c0       	rjmp	.+16     	; 0x1f7e2 <EVENT_USB_Device_ControlRequest+0x3d8>
   1f7d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f7d6:	87 7f       	andi	r24, 0xF7	; 247
   1f7d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
   1f7dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f7e0:	64 cf       	rjmp	.-312    	; 0x1f6aa <EVENT_USB_Device_ControlRequest+0x2a0>
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
			break;
	}
}
   1f7e2:	df 91       	pop	r29
   1f7e4:	cf 91       	pop	r28
   1f7e6:	1f 91       	pop	r17
   1f7e8:	0f 91       	pop	r16
   1f7ea:	ff 90       	pop	r15
   1f7ec:	ef 90       	pop	r14
   1f7ee:	df 90       	pop	r13
   1f7f0:	cf 90       	pop	r12
   1f7f2:	bf 90       	pop	r11
   1f7f4:	af 90       	pop	r10
   1f7f6:	9f 90       	pop	r9
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
   1f7f8:	8f 90       	pop	r8
   1f7fa:	47 c0       	rjmp	.+142    	; 0x1f88a <Endpoint_ClearStatusStage>
			break;
	}
}
   1f7fc:	df 91       	pop	r29
   1f7fe:	cf 91       	pop	r28
   1f800:	1f 91       	pop	r17
   1f802:	0f 91       	pop	r16
   1f804:	ff 90       	pop	r15
   1f806:	ef 90       	pop	r14
   1f808:	df 90       	pop	r13
   1f80a:	cf 90       	pop	r12
   1f80c:	bf 90       	pop	r11
   1f80e:	af 90       	pop	r10
   1f810:	9f 90       	pop	r9
   1f812:	8f 90       	pop	r8
   1f814:	08 95       	ret

0001f816 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1f816:	29 2f       	mov	r18, r25
   1f818:	30 e0       	ldi	r19, 0x00	; 0
   1f81a:	22 30       	cpi	r18, 0x02	; 2
   1f81c:	31 05       	cpc	r19, r1
   1f81e:	59 f0       	breq	.+22     	; 0x1f836 <CALLBACK_USB_GetDescriptor+0x20>
   1f820:	23 30       	cpi	r18, 0x03	; 3
   1f822:	31 05       	cpc	r19, r1
   1f824:	69 f0       	breq	.+26     	; 0x1f840 <CALLBACK_USB_GetDescriptor+0x2a>
   1f826:	21 30       	cpi	r18, 0x01	; 1
   1f828:	31 05       	cpc	r19, r1
   1f82a:	89 f4       	brne	.+34     	; 0x1f84e <CALLBACK_USB_GetDescriptor+0x38>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1f82c:	82 e1       	ldi	r24, 0x12	; 18
   1f82e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1f830:	2f e4       	ldi	r18, 0x4F	; 79
   1f832:	31 e0       	ldi	r19, 0x01	; 1
   1f834:	15 c0       	rjmp	.+42     	; 0x1f860 <CALLBACK_USB_GetDescriptor+0x4a>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1f836:	8b e1       	ldi	r24, 0x1B	; 27
   1f838:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = &ConfigurationDescriptor;
   1f83a:	24 e3       	ldi	r18, 0x34	; 52
   1f83c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1f83e:	10 c0       	rjmp	.+32     	; 0x1f860 <CALLBACK_USB_GetDescriptor+0x4a>
		case DTYPE_String: 
			if (!(DescriptorNumber))
   1f840:	88 23       	and	r24, r24
   1f842:	51 f0       	breq	.+20     	; 0x1f858 <CALLBACK_USB_GetDescriptor+0x42>
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1f844:	86 e2       	ldi	r24, 0x26	; 38
   1f846:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
   1f848:	28 e0       	ldi	r18, 0x08	; 8
   1f84a:	31 e0       	ldi	r19, 0x01	; 1
   1f84c:	09 c0       	rjmp	.+18     	; 0x1f860 <CALLBACK_USB_GetDescriptor+0x4a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1f84e:	80 e0       	ldi	r24, 0x00	; 0
   1f850:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1f852:	20 e0       	ldi	r18, 0x00	; 0
   1f854:	30 e0       	ldi	r19, 0x00	; 0
   1f856:	04 c0       	rjmp	.+8      	; 0x1f860 <CALLBACK_USB_GetDescriptor+0x4a>
			break;
		case DTYPE_String: 
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1f858:	84 e0       	ldi	r24, 0x04	; 4
   1f85a:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
   1f85c:	20 e3       	ldi	r18, 0x30	; 48
   1f85e:	31 e0       	ldi	r19, 0x01	; 1
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
   1f860:	fa 01       	movw	r30, r20
   1f862:	31 83       	std	Z+1, r19	; 0x01
   1f864:	20 83       	st	Z, r18
	return Size;
}
   1f866:	08 95       	ret

0001f868 <Endpoint_ConfigureEndpoint_Prv>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
   1f868:	eb ee       	ldi	r30, 0xEB	; 235
   1f86a:	f0 e0       	ldi	r31, 0x00	; 0
   1f86c:	80 81       	ld	r24, Z
   1f86e:	81 60       	ori	r24, 0x01	; 1
   1f870:	80 83       	st	Z, r24
   1f872:	ed ee       	ldi	r30, 0xED	; 237
   1f874:	f0 e0       	ldi	r31, 0x00	; 0
   1f876:	10 82       	st	Z, r1
   1f878:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1f87c:	40 83       	st	Z, r20
   1f87e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1f882:	88 1f       	adc	r24, r24
   1f884:	88 27       	eor	r24, r24
   1f886:	88 1f       	adc	r24, r24
   1f888:	08 95       	ret

0001f88a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f88a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest>
   1f88e:	87 ff       	sbrs	r24, 7
   1f890:	0f c0       	rjmp	.+30     	; 0x1f8b0 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1f896:	82 fd       	sbrc	r24, 2
   1f898:	04 c0       	rjmp	.+8      	; 0x1f8a2 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f89a:	8e b3       	in	r24, 0x1e	; 30
   1f89c:	81 11       	cpse	r24, r1
   1f89e:	f9 cf       	rjmp	.-14     	; 0x1f892 <Endpoint_ClearStatusStage+0x8>
   1f8a0:	10 c0       	rjmp	.+32     	; 0x1f8c2 <Endpoint_ClearStatusStage+0x38>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f8a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f8a6:	8b 7f       	andi	r24, 0xFB	; 251
   1f8a8:	0a c0       	rjmp	.+20     	; 0x1f8be <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f8aa:	8e b3       	in	r24, 0x1e	; 30
   1f8ac:	88 23       	and	r24, r24
   1f8ae:	49 f0       	breq	.+18     	; 0x1f8c2 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f8b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f8b4:	80 ff       	sbrs	r24, 0
   1f8b6:	f9 cf       	rjmp	.-14     	; 0x1f8aa <Endpoint_ClearStatusStage+0x20>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f8b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f8bc:	8e 7f       	andi	r24, 0xFE	; 254
   1f8be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f8c2:	08 95       	ret

0001f8c4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
   1f8c4:	60 d0       	rcall	.+192    	; 0x1f986 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f8c6:	67 d0       	rcall	.+206    	; 0x1f996 <USB_INT_ClearAllInterrupts>
   1f8c8:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f8ca:	f0 e0       	ldi	r31, 0x00	; 0
   1f8cc:	80 81       	ld	r24, Z
   1f8ce:	81 60       	ori	r24, 0x01	; 1
   1f8d0:	80 83       	st	Z, r24
   1f8d2:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
   1f8d4:	f0 e0       	ldi	r31, 0x00	; 0
   1f8d6:	80 81       	ld	r24, Z
   1f8d8:	8f 77       	andi	r24, 0x7F	; 127
   1f8da:	80 83       	st	Z, r24
   1f8dc:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f8de:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
   1f8e0:	b0 e0       	ldi	r27, 0x00	; 0
   1f8e2:	8c 91       	ld	r24, X
   1f8e4:	8e 7f       	andi	r24, 0xFE	; 254
   1f8e6:	8c 93       	st	X, r24
   1f8e8:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
   1f8ea:	8f 7e       	andi	r24, 0xEF	; 239
   1f8ec:	80 83       	st	Z, r24
   1f8ee:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
   1f8f2:	08 95       	ret

0001f8f4 <USB_ResetInterface>:
   1f8f4:	0f 93       	push	r16
}

void USB_ResetInterface(void)
{
   1f8f6:	1f 93       	push	r17
   1f8f8:	cf 93       	push	r28
   1f8fa:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f8fc:	44 d0       	rcall	.+136    	; 0x1f986 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f8fe:	4b d0       	rcall	.+150    	; 0x1f996 <USB_INT_ClearAllInterrupts>
   1f900:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f902:	d0 e0       	ldi	r29, 0x00	; 0
   1f904:	88 81       	ld	r24, Y
   1f906:	8f 77       	andi	r24, 0x7F	; 127
   1f908:	88 83       	st	Y, r24
   1f90a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1f90c:	80 68       	ori	r24, 0x80	; 128
   1f90e:	88 83       	st	Y, r24
   1f910:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f912:	8f 7d       	andi	r24, 0xDF	; 223
   1f914:	88 83       	st	Y, r24
   1f916:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f918:	f0 e0       	ldi	r31, 0x00	; 0
   1f91a:	80 81       	ld	r24, Z
   1f91c:	80 68       	ori	r24, 0x80	; 128
   1f91e:	80 83       	st	Z, r24
   1f920:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f922:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1f924:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   1f928:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f92a:	10 e0       	ldi	r17, 0x00	; 0
   1f92c:	f8 01       	movw	r30, r16
   1f92e:	80 81       	ld	r24, Z
   1f930:	8b 7f       	andi	r24, 0xFB	; 251
   1f932:	80 83       	st	Z, r24
   1f934:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f936:	81 60       	ori	r24, 0x01	; 1
   1f938:	88 83       	st	Y, r24
   1f93a:	42 e2       	ldi	r20, 0x22	; 34
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f93c:	60 e0       	ldi	r22, 0x00	; 0
   1f93e:	80 e0       	ldi	r24, 0x00	; 0
   1f940:	93 df       	rcall	.-218    	; 0x1f868 <Endpoint_ConfigureEndpoint_Prv>
   1f942:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f944:	f0 e0       	ldi	r31, 0x00	; 0
   1f946:	80 81       	ld	r24, Z
   1f948:	8e 7f       	andi	r24, 0xFE	; 254
   1f94a:	80 83       	st	Z, r24
   1f94c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f94e:	f0 e0       	ldi	r31, 0x00	; 0
   1f950:	80 81       	ld	r24, Z
   1f952:	81 60       	ori	r24, 0x01	; 1
   1f954:	80 83       	st	Z, r24
   1f956:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f958:	88 60       	ori	r24, 0x08	; 8
   1f95a:	80 83       	st	Z, r24
   1f95c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f95e:	80 81       	ld	r24, Z
   1f960:	8e 7f       	andi	r24, 0xFE	; 254
   1f962:	80 83       	st	Z, r24
   1f964:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1f966:	80 61       	ori	r24, 0x10	; 16
   1f968:	88 83       	st	Y, r24
   1f96a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f96c:	cf 91       	pop	r28
   1f96e:	1f 91       	pop	r17
   1f970:	0f 91       	pop	r16
   1f972:	08 95       	ret

0001f974 <USB_Init>:
   1f974:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1f976:	f0 e0       	ldi	r31, 0x00	; 0
   1f978:	80 81       	ld	r24, Z
   1f97a:	81 60       	ori	r24, 0x01	; 1
   1f97c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f97e:	81 e0       	ldi	r24, 0x01	; 1
   1f980:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <USB_IsInitialized>

	USB_ResetInterface();
   1f984:	b7 cf       	rjmp	.-146    	; 0x1f8f4 <USB_ResetInterface>

0001f986 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f986:	e8 ed       	ldi	r30, 0xD8	; 216
   1f988:	f0 e0       	ldi	r31, 0x00	; 0
   1f98a:	80 81       	ld	r24, Z
   1f98c:	8c 7f       	andi	r24, 0xFC	; 252
   1f98e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f990:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f994:	08 95       	ret

0001f996 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f996:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f99a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f99e:	08 95       	ret

0001f9a0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f9a0:	1f 92       	push	r1
   1f9a2:	0f 92       	push	r0
   1f9a4:	0f b6       	in	r0, 0x3f	; 63
   1f9a6:	0f 92       	push	r0
   1f9a8:	11 24       	eor	r1, r1
   1f9aa:	0b b6       	in	r0, 0x3b	; 59
   1f9ac:	0f 92       	push	r0
   1f9ae:	2f 93       	push	r18
   1f9b0:	3f 93       	push	r19
   1f9b2:	4f 93       	push	r20
   1f9b4:	5f 93       	push	r21
   1f9b6:	6f 93       	push	r22
   1f9b8:	7f 93       	push	r23
   1f9ba:	8f 93       	push	r24
   1f9bc:	9f 93       	push	r25
   1f9be:	af 93       	push	r26
   1f9c0:	bf 93       	push	r27
   1f9c2:	ef 93       	push	r30
   1f9c4:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f9c6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f9ca:	80 ff       	sbrs	r24, 0
   1f9cc:	1b c0       	rjmp	.+54     	; 0x1fa04 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f9ce:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f9d2:	80 ff       	sbrs	r24, 0
   1f9d4:	17 c0       	rjmp	.+46     	; 0x1fa04 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f9d6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1f9da:	8e 7f       	andi	r24, 0xFE	; 254
   1f9dc:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f9e0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f9e4:	80 ff       	sbrs	r24, 0
   1f9e6:	0b c0       	rjmp	.+22     	; 0x1f9fe <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f9e8:	8c e0       	ldi	r24, 0x0C	; 12
   1f9ea:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f9ec:	8e e0       	ldi	r24, 0x0E	; 14
   1f9ee:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f9f0:	09 b4       	in	r0, 0x29	; 41
   1f9f2:	00 fe       	sbrs	r0, 0
   1f9f4:	fd cf       	rjmp	.-6      	; 0x1f9f0 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f9f6:	81 e0       	ldi	r24, 0x01	; 1
   1f9f8:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f9fa:	8c d1       	rcall	.+792    	; 0x1fd14 <USB_Event_Stub>
   1f9fc:	03 c0       	rjmp	.+6      	; 0x1fa04 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f9fe:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1fa00:	1e ba       	out	0x1e, r1	; 30
   1fa02:	88 d1       	rcall	.+784    	; 0x1fd14 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1fa04:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1fa08:	80 ff       	sbrs	r24, 0
   1fa0a:	17 c0       	rjmp	.+46     	; 0x1fa3a <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1fa0c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fa10:	80 ff       	sbrs	r24, 0
   1fa12:	13 c0       	rjmp	.+38     	; 0x1fa3a <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1fa14:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fa18:	8e 7f       	andi	r24, 0xFE	; 254
   1fa1a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fa1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fa22:	80 61       	ori	r24, 0x10	; 16
   1fa24:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1fa28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1fa2c:	80 62       	ori	r24, 0x20	; 32
   1fa2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1fa32:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1fa34:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1fa36:	8e bb       	out	0x1e, r24	; 30
   1fa38:	6d d1       	rcall	.+730    	; 0x1fd14 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1fa3a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1fa3e:	84 ff       	sbrs	r24, 4
   1fa40:	2c c0       	rjmp	.+88     	; 0x1fa9a <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1fa42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fa46:	84 ff       	sbrs	r24, 4
   1fa48:	28 c0       	rjmp	.+80     	; 0x1fa9a <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1fa4a:	8c e0       	ldi	r24, 0x0C	; 12
   1fa4c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1fa4e:	8e e0       	ldi	r24, 0x0E	; 14
   1fa50:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1fa52:	09 b4       	in	r0, 0x29	; 41
   1fa54:	00 fe       	sbrs	r0, 0
   1fa56:	fd cf       	rjmp	.-6      	; 0x1fa52 <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1fa58:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1fa5c:	8f 7d       	andi	r24, 0xDF	; 223
   1fa5e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1fa62:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1fa66:	8f 7e       	andi	r24, 0xEF	; 239
   1fa68:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1fa6c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fa70:	8f 7e       	andi	r24, 0xEF	; 239
   1fa72:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1fa76:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fa7a:	81 60       	ori	r24, 0x01	; 1
   1fa7c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1fa80:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_Device_ConfigurationNumber>
   1fa84:	81 11       	cpse	r24, r1
   1fa86:	06 c0       	rjmp	.+12     	; 0x1fa94 <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fa88:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fa8c:	87 fd       	sbrc	r24, 7
   1fa8e:	02 c0       	rjmp	.+4      	; 0x1fa94 <__vector_10+0xf4>
   1fa90:	81 e0       	ldi	r24, 0x01	; 1
   1fa92:	01 c0       	rjmp	.+2      	; 0x1fa96 <__vector_10+0xf6>
   1fa94:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1fa96:	8e bb       	out	0x1e, r24	; 30
   1fa98:	3d d1       	rcall	.+634    	; 0x1fd14 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1fa9a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1fa9e:	83 ff       	sbrs	r24, 3
   1faa0:	21 c0       	rjmp	.+66     	; 0x1fae4 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1faa2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1faa6:	83 ff       	sbrs	r24, 3
   1faa8:	1d c0       	rjmp	.+58     	; 0x1fae4 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1faaa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1faae:	87 7f       	andi	r24, 0xF7	; 247
   1fab0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1fab4:	82 e0       	ldi	r24, 0x02	; 2
   1fab6:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1fab8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1fabc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1fac0:	8e 7f       	andi	r24, 0xFE	; 254
   1fac2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1fac6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1faca:	8e 7f       	andi	r24, 0xFE	; 254
   1facc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fad0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1fad4:	80 61       	ori	r24, 0x10	; 16
   1fad6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1fada:	42 e2       	ldi	r20, 0x22	; 34
   1fadc:	60 e0       	ldi	r22, 0x00	; 0
   1fade:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1fae0:	c3 de       	rcall	.-634    	; 0x1f868 <Endpoint_ConfigureEndpoint_Prv>
   1fae2:	18 d1       	rcall	.+560    	; 0x1fd14 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1fae4:	ff 91       	pop	r31
   1fae6:	ef 91       	pop	r30
   1fae8:	bf 91       	pop	r27
   1faea:	af 91       	pop	r26
   1faec:	9f 91       	pop	r25
   1faee:	8f 91       	pop	r24
   1faf0:	7f 91       	pop	r23
   1faf2:	6f 91       	pop	r22
   1faf4:	5f 91       	pop	r21
   1faf6:	4f 91       	pop	r20
   1faf8:	3f 91       	pop	r19
   1fafa:	2f 91       	pop	r18
   1fafc:	0f 90       	pop	r0
   1fafe:	0b be       	out	0x3b, r0	; 59
   1fb00:	0f 90       	pop	r0
   1fb02:	0f be       	out	0x3f, r0	; 63
   1fb04:	0f 90       	pop	r0
   1fb06:	1f 90       	pop	r1
   1fb08:	18 95       	reti

0001fb0a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1fb0a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <USB_ControlRequest+0x6>
   1fb0e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <USB_ControlRequest+0x7>
   1fb12:	26 17       	cp	r18, r22
   1fb14:	37 07       	cpc	r19, r23
   1fb16:	48 f0       	brcs	.+18     	; 0x1fb2a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1fb18:	61 15       	cp	r22, r1
   1fb1a:	71 05       	cpc	r23, r1
   1fb1c:	39 f4       	brne	.+14     	; 0x1fb2c <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1fb1e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb22:	2e 7f       	andi	r18, 0xFE	; 254
   1fb24:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb28:	01 c0       	rjmp	.+2      	; 0x1fb2c <Endpoint_Write_Control_Stream_LE+0x22>
   1fb2a:	b9 01       	movw	r22, r18
   1fb2c:	fc 01       	movw	r30, r24
   1fb2e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1fb30:	61 15       	cp	r22, r1
   1fb32:	71 05       	cpc	r23, r1
   1fb34:	61 f1       	breq	.+88     	; 0x1fb8e <Endpoint_Write_Control_Stream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb36:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb38:	88 23       	and	r24, r24
   1fb3a:	c9 f1       	breq	.+114    	; 0x1fbae <Endpoint_Write_Control_Stream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb3c:	85 30       	cpi	r24, 0x05	; 5
   1fb3e:	c9 f1       	breq	.+114    	; 0x1fbb2 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fb40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1fb44:	83 fd       	sbrc	r24, 3
   1fb46:	31 c0       	rjmp	.+98     	; 0x1fbaa <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1fb4c:	82 fd       	sbrc	r24, 2
   1fb4e:	27 c0       	rjmp	.+78     	; 0x1fb9e <Endpoint_Write_Control_Stream_LE+0x94>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fb50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
   1fb54:	80 ff       	sbrs	r24, 0
   1fb56:	ec cf       	rjmp	.-40     	; 0x1fb30 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1fb58:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1fb5c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1fb60:	61 15       	cp	r22, r1
   1fb62:	71 05       	cpc	r23, r1
   1fb64:	51 f0       	breq	.+20     	; 0x1fb7a <Endpoint_Write_Control_Stream_LE+0x70>
   1fb66:	80 32       	cpi	r24, 0x20	; 32
   1fb68:	91 05       	cpc	r25, r1
   1fb6a:	38 f4       	brcc	.+14     	; 0x1fb7a <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fb6c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fb6e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1fb72:	61 50       	subi	r22, 0x01	; 1
   1fb74:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1fb76:	01 96       	adiw	r24, 0x01	; 1
   1fb78:	f3 cf       	rjmp	.-26     	; 0x1fb60 <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1fb7a:	21 e0       	ldi	r18, 0x01	; 1
   1fb7c:	80 97       	sbiw	r24, 0x20	; 32
   1fb7e:	09 f0       	breq	.+2      	; 0x1fb82 <Endpoint_Write_Control_Stream_LE+0x78>
   1fb80:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1fb82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb86:	8e 7f       	andi	r24, 0xFE	; 254
   1fb88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fb8c:	d1 cf       	rjmp	.-94     	; 0x1fb30 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1fb8e:	21 11       	cpse	r18, r1
   1fb90:	d2 cf       	rjmp	.-92     	; 0x1fb36 <Endpoint_Write_Control_Stream_LE+0x2c>
   1fb92:	05 c0       	rjmp	.+10     	; 0x1fb9e <Endpoint_Write_Control_Stream_LE+0x94>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb94:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb96:	88 23       	and	r24, r24
   1fb98:	51 f0       	breq	.+20     	; 0x1fbae <Endpoint_Write_Control_Stream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb9a:	85 30       	cpi	r24, 0x05	; 5
   1fb9c:	51 f0       	breq	.+20     	; 0x1fbb2 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1fba2:	82 ff       	sbrs	r24, 2
   1fba4:	f7 cf       	rjmp	.-18     	; 0x1fb94 <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1fba6:	80 e0       	ldi	r24, 0x00	; 0
   1fba8:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1fbaa:	81 e0       	ldi	r24, 0x01	; 1
   1fbac:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1fbae:	82 e0       	ldi	r24, 0x02	; 2
   1fbb0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1fbb2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fbb4:	08 95       	ret

0001fbb6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1fbb6:	0f 93       	push	r16
   1fbb8:	1f 93       	push	r17
   1fbba:	cf 93       	push	r28
   1fbbc:	df 93       	push	r29
   1fbbe:	00 d0       	rcall	.+0      	; 0x1fbc0 <USB_Device_ProcessControlRequest+0xa>
   1fbc0:	cd b7       	in	r28, 0x3d	; 61
   1fbc2:	de b7       	in	r29, 0x3e	; 62
   1fbc4:	e7 e7       	ldi	r30, 0x77	; 119
   1fbc6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fbc8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1fbcc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1fbce:	81 e0       	ldi	r24, 0x01	; 1
   1fbd0:	ef 37       	cpi	r30, 0x7F	; 127
   1fbd2:	f8 07       	cpc	r31, r24
   1fbd4:	c9 f7       	brne	.-14     	; 0x1fbc8 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1fbd6:	19 dc       	rcall	.-1998   	; 0x1f40a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fbd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1fbdc:	83 ff       	sbrs	r24, 3
   1fbde:	85 c0       	rjmp	.+266    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1fbe0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1fbe4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <USB_ControlRequest+0x1>
   1fbe8:	96 30       	cpi	r25, 0x06	; 6
   1fbea:	69 f1       	breq	.+90     	; 0x1fc46 <USB_Device_ProcessControlRequest+0x90>
   1fbec:	18 f4       	brcc	.+6      	; 0x1fbf4 <USB_Device_ProcessControlRequest+0x3e>
   1fbee:	95 30       	cpi	r25, 0x05	; 5
   1fbf0:	41 f0       	breq	.+16     	; 0x1fc02 <USB_Device_ProcessControlRequest+0x4c>
   1fbf2:	7b c0       	rjmp	.+246    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
   1fbf4:	98 30       	cpi	r25, 0x08	; 8
   1fbf6:	09 f4       	brne	.+2      	; 0x1fbfa <USB_Device_ProcessControlRequest+0x44>
   1fbf8:	46 c0       	rjmp	.+140    	; 0x1fc86 <USB_Device_ProcessControlRequest+0xd0>
   1fbfa:	99 30       	cpi	r25, 0x09	; 9
   1fbfc:	09 f4       	brne	.+2      	; 0x1fc00 <USB_Device_ProcessControlRequest+0x4a>
   1fbfe:	55 c0       	rjmp	.+170    	; 0x1fcaa <USB_Device_ProcessControlRequest+0xf4>
   1fc00:	74 c0       	rjmp	.+232    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fc02:	81 11       	cpse	r24, r1
   1fc04:	72 c0       	rjmp	.+228    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1fc06:	10 91 79 01 	lds	r17, 0x0179	; 0x800179 <USB_ControlRequest+0x2>
   1fc0a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1fc0c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1fc0e:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc14:	87 7f       	andi	r24, 0xF7	; 247
   1fc16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1fc1a:	37 de       	rcall	.-914    	; 0x1f88a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fc1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1fc20:	80 ff       	sbrs	r24, 0
   1fc22:	fc cf       	rjmp	.-8      	; 0x1fc1c <USB_Device_ProcessControlRequest+0x66>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1fc24:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1fc28:	80 78       	andi	r24, 0x80	; 128
   1fc2a:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1fc2c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
   1fc30:	80 68       	ori	r24, 0x80	; 128
   1fc32:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1fc36:	11 11       	cpse	r17, r1
   1fc38:	02 c0       	rjmp	.+4      	; 0x1fc3e <USB_Device_ProcessControlRequest+0x88>
   1fc3a:	82 e0       	ldi	r24, 0x02	; 2
   1fc3c:	01 c0       	rjmp	.+2      	; 0x1fc40 <USB_Device_ProcessControlRequest+0x8a>
   1fc3e:	83 e0       	ldi	r24, 0x03	; 3
   1fc40:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1fc42:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
   1fc44:	52 c0       	rjmp	.+164    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fc46:	80 58       	subi	r24, 0x80	; 128
   1fc48:	82 30       	cpi	r24, 0x02	; 2
   1fc4a:	08 f0       	brcs	.+2      	; 0x1fc4e <USB_Device_ProcessControlRequest+0x98>
   1fc4c:	4e c0       	rjmp	.+156    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1fc4e:	ae 01       	movw	r20, r28
   1fc50:	4f 5f       	subi	r20, 0xFF	; 255
   1fc52:	5f 4f       	sbci	r21, 0xFF	; 255
   1fc54:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <USB_ControlRequest+0x4>
   1fc58:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_ControlRequest+0x2>
   1fc5c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <USB_ControlRequest+0x3>
   1fc60:	da dd       	rcall	.-1100   	; 0x1f816 <CALLBACK_USB_GetDescriptor>
   1fc62:	bc 01       	movw	r22, r24
   1fc64:	89 2b       	or	r24, r25
   1fc66:	09 f4       	brne	.+2      	; 0x1fc6a <USB_Device_ProcessControlRequest+0xb4>
   1fc68:	40 c0       	rjmp	.+128    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc6a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc6e:	97 7f       	andi	r25, 0xF7	; 247
   1fc70:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1fc74:	89 81       	ldd	r24, Y+1	; 0x01
   1fc76:	9a 81       	ldd	r25, Y+2	; 0x02
   1fc78:	48 df       	rcall	.-368    	; 0x1fb0a <Endpoint_Write_Control_Stream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1fc7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc7e:	8b 7f       	andi	r24, 0xFB	; 251
   1fc80:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc84:	32 c0       	rjmp	.+100    	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1fc86:	80 38       	cpi	r24, 0x80	; 128
   1fc88:	81 f5       	brne	.+96     	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fc8e:	87 7f       	andi	r24, 0xF7	; 247
   1fc90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1fc94:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fc98:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1fc9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fca0:	8e 7f       	andi	r24, 0xFE	; 254
   1fca2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1fca6:	f1 dd       	rcall	.-1054   	; 0x1f88a <Endpoint_ClearStatusStage>
   1fca8:	20 c0       	rjmp	.+64     	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fcaa:	81 11       	cpse	r24, r1
   1fcac:	1e c0       	rjmp	.+60     	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1fcae:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_ControlRequest+0x2>
   1fcb2:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <USB_ControlRequest+0x3>
   1fcb6:	99 27       	eor	r25, r25
   1fcb8:	02 97       	sbiw	r24, 0x02	; 2
   1fcba:	bc f4       	brge	.+46     	; 0x1fcea <USB_Device_ProcessControlRequest+0x134>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fcbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fcc0:	87 7f       	andi	r24, 0xF7	; 247
   1fcc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1fcc6:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_ControlRequest+0x2>
   1fcca:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   1fcce:	dd dd       	rcall	.-1094   	; 0x1f88a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1fcd0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_Device_ConfigurationNumber>
   1fcd4:	81 11       	cpse	r24, r1
   1fcd6:	06 c0       	rjmp	.+12     	; 0x1fce4 <USB_Device_ProcessControlRequest+0x12e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fcd8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fcdc:	87 fd       	sbrc	r24, 7
   1fcde:	02 c0       	rjmp	.+4      	; 0x1fce4 <USB_Device_ProcessControlRequest+0x12e>
   1fce0:	81 e0       	ldi	r24, 0x01	; 1
   1fce2:	01 c0       	rjmp	.+2      	; 0x1fce6 <USB_Device_ProcessControlRequest+0x130>
   1fce4:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1fce6:	8e bb       	out	0x1e, r24	; 30
   1fce8:	15 d0       	rcall	.+42     	; 0x1fd14 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fcea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1fcee:	83 ff       	sbrs	r24, 3
   1fcf0:	0a c0       	rjmp	.+20     	; 0x1fd06 <USB_Device_ProcessControlRequest+0x150>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fcf2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1fcf6:	80 62       	ori	r24, 0x20	; 32
   1fcf8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fcfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1fd00:	87 7f       	andi	r24, 0xF7	; 247
   1fd02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1fd06:	0f 90       	pop	r0
   1fd08:	0f 90       	pop	r0
   1fd0a:	df 91       	pop	r29
   1fd0c:	cf 91       	pop	r28
   1fd0e:	1f 91       	pop	r17
   1fd10:	0f 91       	pop	r16
   1fd12:	08 95       	ret

0001fd14 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1fd14:	08 95       	ret

0001fd16 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1fd16:	8e b3       	in	r24, 0x1e	; 30
   1fd18:	88 23       	and	r24, r24
   1fd1a:	21 f0       	breq	.+8      	; 0x1fd24 <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fd1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1fd20:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
   1fd22:	49 cf       	rjmp	.-366    	; 0x1fbb6 <USB_Device_ProcessControlRequest>
   1fd24:	08 95       	ret

0001fd26 <eeprom_read_byte>:
   1fd26:	f9 99       	sbic	0x1f, 1	; 31
   1fd28:	fe cf       	rjmp	.-4      	; 0x1fd26 <eeprom_read_byte>
   1fd2a:	92 bd       	out	0x22, r25	; 34
   1fd2c:	81 bd       	out	0x21, r24	; 33
   1fd2e:	f8 9a       	sbi	0x1f, 0	; 31
   1fd30:	99 27       	eor	r25, r25
   1fd32:	80 b5       	in	r24, 0x20	; 32
   1fd34:	08 95       	ret

0001fd36 <eeprom_write_byte>:
   1fd36:	26 2f       	mov	r18, r22

0001fd38 <eeprom_write_r18>:
   1fd38:	f9 99       	sbic	0x1f, 1	; 31
   1fd3a:	fe cf       	rjmp	.-4      	; 0x1fd38 <eeprom_write_r18>
   1fd3c:	1f ba       	out	0x1f, r1	; 31
   1fd3e:	92 bd       	out	0x22, r25	; 34
   1fd40:	81 bd       	out	0x21, r24	; 33
   1fd42:	20 bd       	out	0x20, r18	; 32
   1fd44:	0f b6       	in	r0, 0x3f	; 63
   1fd46:	f8 94       	cli
   1fd48:	fa 9a       	sbi	0x1f, 2	; 31
   1fd4a:	f9 9a       	sbi	0x1f, 1	; 31
   1fd4c:	0f be       	out	0x3f, r0	; 63
   1fd4e:	01 96       	adiw	r24, 0x01	; 1
   1fd50:	08 95       	ret

0001fd52 <_exit>:
   1fd52:	f8 94       	cli

0001fd54 <__stop_program>:
   1fd54:	ff cf       	rjmp	.-2      	; 0x1fd54 <__stop_program>
