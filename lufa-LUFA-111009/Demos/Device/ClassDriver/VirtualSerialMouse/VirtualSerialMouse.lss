
VirtualSerialMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000013ac  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800176  00800176  000014b6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b96  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002123  00000000  00000000  000083be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003848  00000000  00000000  0000a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ac  00000000  00000000  0000dd2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d77  00000000  00000000  0000e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b67  00000000  00000000  0001144f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00014fb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
       2:	00 00       	nop
       4:	ef c0       	rjmp	.+478    	; 0x1e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	ed c0       	rjmp	.+474    	; 0x1e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	eb c0       	rjmp	.+470    	; 0x1e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	e9 c0       	rjmp	.+466    	; 0x1e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	e7 c0       	rjmp	.+462    	; 0x1e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	e5 c0       	rjmp	.+458    	; 0x1e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e3 c0       	rjmp	.+454    	; 0x1e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e1 c0       	rjmp	.+450    	; 0x1e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	df c0       	rjmp	.+446    	; 0x1e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c9 c2       	rjmp	.+1426   	; 0x5bc <__vector_10>
      2a:	00 00       	nop
      2c:	db c0       	rjmp	.+438    	; 0x1e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d9 c0       	rjmp	.+434    	; 0x1e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	d7 c0       	rjmp	.+430    	; 0x1e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	d5 c0       	rjmp	.+426    	; 0x1e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d3 c0       	rjmp	.+422    	; 0x1e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d1 c0       	rjmp	.+418    	; 0x1e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	cf c0       	rjmp	.+414    	; 0x1e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	cd c0       	rjmp	.+410    	; 0x1e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cb c0       	rjmp	.+406    	; 0x1e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c9 c0       	rjmp	.+402    	; 0x1e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	c7 c0       	rjmp	.+398    	; 0x1e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	c5 c0       	rjmp	.+394    	; 0x1e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c3 c0       	rjmp	.+390    	; 0x1e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c1 c0       	rjmp	.+386    	; 0x1e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	bf c0       	rjmp	.+382    	; 0x1e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	bd c0       	rjmp	.+378    	; 0x1e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bb c0       	rjmp	.+374    	; 0x1e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b9 c0       	rjmp	.+370    	; 0x1e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	b7 c0       	rjmp	.+366    	; 0x1e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	b5 c0       	rjmp	.+362    	; 0x1e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b3 c0       	rjmp	.+358    	; 0x1e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b1 c0       	rjmp	.+354    	; 0x1e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	af c0       	rjmp	.+350    	; 0x1e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	ad c0       	rjmp	.+346    	; 0x1e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ab c0       	rjmp	.+342    	; 0x1e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a9 c0       	rjmp	.+338    	; 0x1e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	a7 c0       	rjmp	.+334    	; 0x1e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	07 05       	cpc	r16, r7
      9a:	29 05       	cpc	r18, r9
      9c:	16 06       	cpc	r1, r22
      9e:	29 05       	cpc	r18, r9
      a0:	16 06       	cpc	r1, r22
      a2:	6e 05       	cpc	r22, r14
      a4:	91 05       	cpc	r25, r1
      a6:	16 06       	cpc	r1, r22
      a8:	e3 05       	cpc	r30, r3
      aa:	f5 05       	cpc	r31, r5

000000ac <ProductString>:
      ac:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.
      bc:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.
      cc:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
      dc:	00 00                                               ..

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
     10c:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     11c:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     12c:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 01 07     ................
     13c:	05 83 02 10 00 01 09 04 02 00 01 03 01 02 00 09     ................
     14c:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 01        !....":........

0000015b <DeviceDescriptor>:
     15b:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
     16b:	dc 01                                               ..

0000016d <MouseReport>:
     16d:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     17d:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     18d:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     19d:	01 00 95 02 75 08 81 06 c0 c0 00                    ....u......

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d0 e2       	ldi	r29, 0x20	; 32
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	ec ea       	ldi	r30, 0xAC	; 172
     1bc:	f3 e1       	ldi	r31, 0x13	; 19
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0b bf       	out	0x3b, r16	; 59
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x14>
     1c4:	07 90       	elpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	a6 37       	cpi	r26, 0x76	; 118
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0x10>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	a6 e7       	ldi	r26, 0x76	; 118
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a7 38       	cpi	r26, 0x87	; 135
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	62 d0       	rcall	.+196    	; 0x2a4 <main>
     1e0:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0d cf       	rjmp	.-486    	; 0x0 <__vectors>

000001e6 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1e6:	9b b1       	in	r25, 0x0b	; 11
     1e8:	9f 70       	andi	r25, 0x0F	; 15
     1ea:	89 2b       	or	r24, r25
     1ec:	8b b9       	out	0x0b, r24	; 11
     1ee:	08 95       	ret

000001f0 <Joystick_GetStatus>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1f0:	83 b1       	in	r24, 0x03	; 3
     1f2:	9c b1       	in	r25, 0x0c	; 12
     1f4:	90 95       	com	r25
     1f6:	90 73       	andi	r25, 0x30	; 48
     1f8:	96 95       	lsr	r25
     1fa:	80 95       	com	r24
     1fc:	80 7e       	andi	r24, 0xE0	; 224
			}
     1fe:	89 2b       	or	r24, r25
     200:	08 95       	ret

00000202 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     202:	84 b7       	in	r24, 0x34	; 52
     204:	87 7f       	andi	r24, 0xF7	; 247
     206:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	a8 95       	wdr
     20e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     212:	88 61       	ori	r24, 0x18	; 24
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     218:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     22a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     22e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     230:	84 b1       	in	r24, 0x04	; 4
     232:	8f 71       	andi	r24, 0x1F	; 31
     234:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     236:	8d b1       	in	r24, 0x0d	; 13
     238:	8f 7c       	andi	r24, 0xCF	; 207
     23a:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     23c:	85 b1       	in	r24, 0x05	; 5
     23e:	80 6e       	ori	r24, 0xE0	; 224
     240:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     242:	8e b1       	in	r24, 0x0e	; 14
     244:	80 63       	ori	r24, 0x30	; 48
     246:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     248:	8a b1       	in	r24, 0x0a	; 10
     24a:	80 6f       	ori	r24, 0xF0	; 240
     24c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     24e:	8b b1       	in	r24, 0x0b	; 11
     250:	8f 70       	andi	r24, 0x0F	; 15
     252:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
     254:	9d c1       	rjmp	.+826    	; 0x590 <USB_Init>

00000256 <CheckJoystickMovement>:
}

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */
void CheckJoystickMovement(void)
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
     256:	cc df       	rcall	.-104    	; 0x1f0 <Joystick_GetStatus>
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     258:	87 fd       	sbrc	r24, 7
     25a:	0b c0       	rjmp	.+22     	; 0x272 <CheckJoystickMovement+0x1c>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     25c:	84 fd       	sbrc	r24, 4
     25e:	0c c0       	rjmp	.+24     	; 0x278 <CheckJoystickMovement+0x22>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     260:	86 fd       	sbrc	r24, 6
     262:	0d c0       	rjmp	.+26     	; 0x27e <CheckJoystickMovement+0x28>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     264:	83 fd       	sbrc	r24, 3
     266:	0e c0       	rjmp	.+28     	; 0x284 <CheckJoystickMovement+0x2e>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     268:	85 fd       	sbrc	r24, 5
     26a:	0f c0       	rjmp	.+30     	; 0x28a <CheckJoystickMovement+0x34>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     26c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
     270:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     272:	67 e6       	ldi	r22, 0x67	; 103
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	0b c0       	rjmp	.+22     	; 0x28e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     278:	67 e5       	ldi	r22, 0x57	; 87
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	08 c0       	rjmp	.+16     	; 0x28e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     27e:	67 e4       	ldi	r22, 0x47	; 71
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	05 c0       	rjmp	.+10     	; 0x28e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     284:	66 e3       	ldi	r22, 0x36	; 54
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	02 c0       	rjmp	.+4      	; 0x28e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     28a:	63 e2       	ldi	r22, 0x23	; 35
     28c:	71 e0       	ldi	r23, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     28e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     292:	81 11       	cpse	r24, r1
     294:	06 c0       	rjmp	.+12     	; 0x2a2 <CheckJoystickMovement+0x4c>
	{
		ActionSent = true;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>

		CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);
     29c:	8d e0       	ldi	r24, 0x0D	; 13
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	3c c5       	rjmp	.+2680   	; 0xd1a <CDC_Device_SendString>
     2a2:	08 95       	ret

000002a4 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2a4:	ae df       	rcall	.-164    	; 0x202 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2a6:	80 e1       	ldi	r24, 0x10	; 16
     2a8:	9e df       	rcall	.-196    	; 0x1e6 <LEDs_SetAllLEDs>
	sei();
     2aa:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
     2ac:	d4 df       	rcall	.-88     	; 0x256 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2ae:	8d e0       	ldi	r24, 0x0D	; 13
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	8c d5       	rcall	.+2840   	; 0xdcc <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2b4:	8d e0       	ldi	r24, 0x0D	; 13
     2b6:	91 e0       	ldi	r25, 0x01	; 1
		HID_Device_USBTask(&Mouse_HID_Interface);
     2b8:	7a d5       	rcall	.+2804   	; 0xdae <CDC_Device_USBTask>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	a8 d7       	rcall	.+3920   	; 0x1210 <HID_Device_USBTask>
		USB_USBTask();
     2c0:	cf d4       	rcall	.+2462   	; 0xc60 <USB_USBTask>
     2c2:	f4 cf       	rjmp	.-24     	; 0x2ac <main+0x8>

000002c4 <EVENT_USB_Device_Connect>:
     2c4:	80 ea       	ldi	r24, 0xA0	; 160
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2c6:	8f cf       	rjmp	.-226    	; 0x1e6 <LEDs_SetAllLEDs>

000002c8 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2c8:	80 e1       	ldi	r24, 0x10	; 16
     2ca:	8d cf       	rjmp	.-230    	; 0x1e6 <LEDs_SetAllLEDs>

000002cc <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2cc:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	73 d7       	rcall	.+3814   	; 0x11ba <HID_Device_ConfigureEndpoints>
     2d4:	c8 2f       	mov	r28, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2d6:	8d e0       	ldi	r24, 0x0D	; 13
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	d4 d4       	rcall	.+2472   	; 0xc84 <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2dc:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     2e0:	94 60       	ori	r25, 0x04	; 4
     2e2:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2e6:	cc 23       	and	r28, r28
     2e8:	11 f0       	breq	.+4      	; 0x2ee <EVENT_USB_Device_ConfigurationChanged+0x22>
     2ea:	81 11       	cpse	r24, r1
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <EVENT_USB_Device_ConfigurationChanged+0x26>
     2ee:	80 e9       	ldi	r24, 0x90	; 144
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <EVENT_USB_Device_ConfigurationChanged+0x28>
}
     2f2:	80 e6       	ldi	r24, 0x60	; 96
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2f4:	cf 91       	pop	r28
     2f6:	77 cf       	rjmp	.-274    	; 0x1e6 <LEDs_SetAllLEDs>

000002f8 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2f8:	8d e0       	ldi	r24, 0x0D	; 13
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	98 d5       	rcall	.+2864   	; 0xe2e <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	34 c6       	rjmp	.+3176   	; 0xf6c <HID_Device_ProcessControlRequest>

00000304 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     304:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     308:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     30c:	00 97       	sbiw	r24, 0x00	; 0
     30e:	29 f0       	breq	.+10     	; 0x31a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     316:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     31a:	08 95       	ret

0000031c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	e9 01       	movw	r28, r18
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
     326:	64 df       	rcall	.-312    	; 0x1f0 <Joystick_GetStatus>
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     328:	9c b1       	in	r25, 0x0c	; 12
     32a:	90 95       	com	r25
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     32c:	87 ff       	sbrs	r24, 7
     32e:	02 c0       	rjmp	.+4      	; 0x334 <CALLBACK_HID_Device_CreateHIDReport+0x18>
	  MouseReport->Y = -1;
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	03 c0       	rjmp	.+6      	; 0x33a <CALLBACK_HID_Device_CreateHIDReport+0x1e>
	else if (JoyStatus_LCL & JOY_DOWN)
     334:	84 ff       	sbrs	r24, 4
     336:	02 c0       	rjmp	.+4      	; 0x33c <CALLBACK_HID_Device_CreateHIDReport+0x20>
	  MouseReport->Y =  1;
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	2a 83       	std	Y+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     33c:	86 ff       	sbrs	r24, 6
     33e:	02 c0       	rjmp	.+4      	; 0x344 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	  MouseReport->X = -1;
     340:	2f ef       	ldi	r18, 0xFF	; 255
     342:	03 c0       	rjmp	.+6      	; 0x34a <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	else if (JoyStatus_LCL & JOY_RIGHT)
     344:	83 ff       	sbrs	r24, 3
     346:	02 c0       	rjmp	.+4      	; 0x34c <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  MouseReport->X =  1;
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	29 83       	std	Y+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     34c:	85 ff       	sbrs	r24, 5
     34e:	03 c0       	rjmp	.+6      	; 0x356 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->Button |= (1 << 0);
     350:	88 81       	ld	r24, Y
     352:	81 60       	ori	r24, 0x01	; 1
     354:	88 83       	st	Y, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     356:	92 ff       	sbrs	r25, 2
     358:	03 c0       	rjmp	.+6      	; 0x360 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  MouseReport->Button |= (1 << 1);
     35a:	88 81       	ld	r24, Y
     35c:	82 60       	ori	r24, 0x02	; 2
     35e:	88 83       	st	Y, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	f8 01       	movw	r30, r16
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	80 83       	st	Z, r24
	return true;
}
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	08 95       	ret

00000376 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     376:	08 95       	ret

00000378 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     378:	29 2f       	mov	r18, r25
     37a:	33 27       	eor	r19, r19
     37c:	23 30       	cpi	r18, 0x03	; 3
     37e:	31 05       	cpc	r19, r1
     380:	e1 f0       	breq	.+56     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x42>
     382:	58 f4       	brcc	.+22     	; 0x39a <CALLBACK_USB_GetDescriptor+0x22>
     384:	21 30       	cpi	r18, 0x01	; 1
     386:	31 05       	cpc	r19, r1
     388:	99 f0       	breq	.+38     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x38>
     38a:	22 30       	cpi	r18, 0x02	; 2
     38c:	31 05       	cpc	r19, r1
     38e:	69 f5       	brne	.+90     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     390:	8f e5       	ldi	r24, 0x5F	; 95
     392:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     394:	2c ef       	ldi	r18, 0xFC	; 252
     396:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     398:	2c c0       	rjmp	.+88     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     39a:	21 32       	cpi	r18, 0x21	; 33
     39c:	31 05       	cpc	r19, r1
     39e:	01 f1       	breq	.+64     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x68>
     3a0:	22 32       	cpi	r18, 0x22	; 34
     3a2:	31 05       	cpc	r19, r1
     3a4:	11 f5       	brne	.+68     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     3a6:	8a e3       	ldi	r24, 0x3A	; 58
     3a8:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     3aa:	2d e6       	ldi	r18, 0x6D	; 109
     3ac:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
     3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3b0:	82 e1       	ldi	r24, 0x12	; 18
     3b2:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3b4:	2b e5       	ldi	r18, 0x5B	; 91
     3b6:	31 e0       	ldi	r19, 0x01	; 1
     3b8:	1c c0       	rjmp	.+56     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3ba:	99 27       	eor	r25, r25
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	91 05       	cpc	r25, r1
     3c0:	49 f0       	breq	.+18     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x5c>
     3c2:	28 f0       	brcs	.+10     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x56>
     3c4:	02 97       	sbiw	r24, 0x02	; 2
     3c6:	89 f4       	brne	.+34     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3c8:	ec ea       	ldi	r30, 0xAC	; 172
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3ce:	e8 ef       	ldi	r30, 0xF8	; 248
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3d4:	ee ed       	ldi	r30, 0xDE	; 222
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3d8:	84 91       	lpm	r24, Z
     3da:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     3dc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3e0:	89 e0       	ldi	r24, 0x09	; 9
     3e2:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3e4:	2b e4       	ldi	r18, 0x4B	; 75
     3e6:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     3f2:	fa 01       	movw	r30, r20
     3f4:	31 83       	std	Z+1, r19	; 0x01
     3f6:	20 83       	st	Z, r18
	return Size;
}
     3f8:	08 95       	ret

000003fa <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     3fa:	98 2f       	mov	r25, r24
     3fc:	97 30       	cpi	r25, 0x07	; 7
     3fe:	68 f5       	brcc	.+90     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     400:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     404:	98 17       	cp	r25, r24
     406:	39 f0       	breq	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     408:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     40c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     410:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	24 2f       	mov	r18, r20
     418:	76 2f       	mov	r23, r22
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	21 fd       	sbrc	r18, 1
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	9f 5f       	subi	r25, 0xFF	; 255
     422:	ec cf       	rjmp	.-40     	; 0x3fc <Endpoint_ConfigureEndpoint_Prv+0x2>
     424:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     428:	3e 7f       	andi	r19, 0xFE	; 254
     42a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     42e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     432:	3d 7f       	andi	r19, 0xFD	; 253
     434:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     438:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     43c:	31 60       	ori	r19, 0x01	; 1
     43e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     442:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     446:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     44a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     44e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     452:	27 fd       	sbrc	r18, 7
     454:	e5 cf       	rjmp	.-54     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	08 95       	ret
     45a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	08 95       	ret

00000462 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     462:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
     466:	87 ff       	sbrs	r24, 7
     468:	11 c0       	rjmp	.+34     	; 0x48c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     46a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     46e:	82 fd       	sbrc	r24, 2
     470:	05 c0       	rjmp	.+10     	; 0x47c <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     472:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     476:	81 11       	cpse	r24, r1
     478:	f8 cf       	rjmp	.-16     	; 0x46a <Endpoint_ClearStatusStage+0x8>
     47a:	11 c0       	rjmp	.+34     	; 0x49e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     47c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     480:	8b 77       	andi	r24, 0x7B	; 123
     482:	0b c0       	rjmp	.+22     	; 0x49a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     484:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     488:	88 23       	and	r24, r24
     48a:	49 f0       	breq	.+18     	; 0x49e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     48c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     490:	80 ff       	sbrs	r24, 0
     492:	f8 cf       	rjmp	.-16     	; 0x484 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     494:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     498:	8e 77       	andi	r24, 0x7E	; 126
     49a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     49e:	08 95       	ret

000004a0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     4a0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     4a4:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     4a8:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     4aa:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     4ae:	84 2f       	mov	r24, r20
     4b0:	81 70       	andi	r24, 0x01	; 1
     4b2:	40 ff       	sbrs	r20, 0
     4b4:	23 c0       	rjmp	.+70     	; 0x4fc <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     4ba:	80 fd       	sbrc	r24, 0
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4be:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4c2:	88 23       	and	r24, r24
     4c4:	99 f0       	breq	.+38     	; 0x4ec <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4c6:	85 30       	cpi	r24, 0x05	; 5
     4c8:	99 f0       	breq	.+38     	; 0x4f0 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     4ca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     4ce:	85 fd       	sbrc	r24, 5
     4d0:	11 c0       	rjmp	.+34     	; 0x4f4 <Endpoint_WaitUntilReady+0x54>
     4d2:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     4d6:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     4da:	24 17       	cp	r18, r20
     4dc:	35 07       	cpc	r19, r21
     4de:	29 f3       	breq	.-54     	; 0x4aa <Endpoint_WaitUntilReady+0xa>
     4e0:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <Endpoint_WaitUntilReady+0x48>
     4e4:	9a 01       	movw	r18, r20
     4e6:	e1 cf       	rjmp	.-62     	; 0x4aa <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     4f0:	83 e0       	ldi	r24, 0x03	; 3
     4f2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4fc:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     500:	42 ff       	sbrs	r20, 2
     502:	dd cf       	rjmp	.-70     	; 0x4be <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     504:	08 95       	ret

00000506 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     50e:	49 d0       	rcall	.+146    	; 0x5a2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     510:	50 d0       	rcall	.+160    	; 0x5b2 <USB_INT_ClearAllInterrupts>
     512:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     514:	d0 e0       	ldi	r29, 0x00	; 0
     516:	88 81       	ld	r24, Y
     518:	8f 77       	andi	r24, 0x7F	; 127
     51a:	88 83       	st	Y, r24
     51c:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     51e:	80 68       	ori	r24, 0x80	; 128
     520:	88 83       	st	Y, r24
     522:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     524:	8f 7d       	andi	r24, 0xDF	; 223
     526:	88 83       	st	Y, r24
     528:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	80 68       	ori	r24, 0x80	; 128
     530:	80 83       	st	Z, r24
     532:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     534:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     538:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     53c:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     540:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     544:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	f8 01       	movw	r30, r16
     54a:	80 81       	ld	r24, Z
     54c:	8b 7f       	andi	r24, 0xFB	; 251
     54e:	80 83       	st	Z, r24
     550:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     552:	81 60       	ori	r24, 0x01	; 1
     554:	88 83       	st	Y, r24
     556:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	4e df       	rcall	.-356    	; 0x3fa <Endpoint_ConfigureEndpoint_Prv>
     55e:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	8e 7f       	andi	r24, 0xFE	; 254
     566:	80 83       	st	Z, r24
     568:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	80 83       	st	Z, r24
     572:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     574:	88 60       	ori	r24, 0x08	; 8
     576:	80 83       	st	Z, r24
     578:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     57a:	80 81       	ld	r24, Z
     57c:	8e 7f       	andi	r24, 0xFE	; 254
     57e:	80 83       	st	Z, r24
     580:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     582:	80 61       	ori	r24, 0x10	; 16
     584:	88 83       	st	Y, r24
     586:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <USB_Init>:
     590:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	81 60       	ori	r24, 0x01	; 1
     598:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <USB_IsInitialized>

	USB_ResetInterface();
     5a0:	b2 cf       	rjmp	.-156    	; 0x506 <USB_ResetInterface>

000005a2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     5a2:	e8 ed       	ldi	r30, 0xD8	; 216
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	8c 7f       	andi	r24, 0xFC	; 252
     5aa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     5ac:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     5b0:	08 95       	ret

000005b2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     5b2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     5b6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     5ba:	08 95       	ret

000005bc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	0b b6       	in	r0, 0x3b	; 59
     5c8:	0f 92       	push	r0
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     5e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     5e6:	82 ff       	sbrs	r24, 2
     5e8:	0a c0       	rjmp	.+20     	; 0x5fe <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     5ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     5ee:	82 ff       	sbrs	r24, 2
     5f0:	06 c0       	rjmp	.+12     	; 0x5fe <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     5f2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     5f6:	8b 7f       	andi	r24, 0xFB	; 251
     5f8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     5fc:	83 de       	rcall	.-762    	; 0x304 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     5fe:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     602:	80 ff       	sbrs	r24, 0
     604:	1d c0       	rjmp	.+58     	; 0x640 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     606:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     60a:	80 ff       	sbrs	r24, 0
     60c:	19 c0       	rjmp	.+50     	; 0x640 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     60e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     612:	8e 7f       	andi	r24, 0xFE	; 254
     614:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     618:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     61c:	80 ff       	sbrs	r24, 0
     61e:	0c c0       	rjmp	.+24     	; 0x638 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     620:	8c e0       	ldi	r24, 0x0C	; 12
     622:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     624:	8e e0       	ldi	r24, 0x0E	; 14
     626:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     628:	09 b4       	in	r0, 0x29	; 41
     62a:	00 fe       	sbrs	r0, 0
     62c:	fd cf       	rjmp	.-6      	; 0x628 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <USB_DeviceState>
			EVENT_USB_Device_Connect();
     634:	47 de       	rcall	.-882    	; 0x2c4 <EVENT_USB_Device_Connect>
     636:	04 c0       	rjmp	.+8      	; 0x640 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     638:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     63a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     63e:	44 de       	rcall	.-888    	; 0x2c8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     640:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     644:	80 ff       	sbrs	r24, 0
     646:	18 c0       	rjmp	.+48     	; 0x678 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     648:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     64c:	80 ff       	sbrs	r24, 0
     64e:	14 c0       	rjmp	.+40     	; 0x678 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     650:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     654:	8e 7f       	andi	r24, 0xFE	; 254
     656:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     65a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     65e:	80 61       	ori	r24, 0x10	; 16
     660:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     664:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     668:	80 62       	ori	r24, 0x20	; 32
     66a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     66e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     670:	85 e0       	ldi	r24, 0x05	; 5
     672:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     676:	f3 d2       	rcall	.+1510   	; 0xc5e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     678:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     67c:	84 ff       	sbrs	r24, 4
     67e:	2d c0       	rjmp	.+90     	; 0x6da <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     680:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     684:	84 ff       	sbrs	r24, 4
     686:	29 c0       	rjmp	.+82     	; 0x6da <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     688:	8c e0       	ldi	r24, 0x0C	; 12
     68a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     68c:	8e e0       	ldi	r24, 0x0E	; 14
     68e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     690:	09 b4       	in	r0, 0x29	; 41
     692:	00 fe       	sbrs	r0, 0
     694:	fd cf       	rjmp	.-6      	; 0x690 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     696:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     69a:	8f 7d       	andi	r24, 0xDF	; 223
     69c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     6a0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     6a4:	8f 7e       	andi	r24, 0xEF	; 239
     6a6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     6aa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6ae:	8f 7e       	andi	r24, 0xEF	; 239
     6b0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     6b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     6be:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <USB_Device_ConfigurationNumber>
     6c2:	81 11       	cpse	r24, r1
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     6c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     6ca:	87 fd       	sbrc	r24, 7
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__vector_10+0x116>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <__vector_10+0x118>
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     6d8:	c2 d2       	rcall	.+1412   	; 0xc5e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     6da:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     6de:	83 ff       	sbrs	r24, 3
     6e0:	22 c0       	rjmp	.+68     	; 0x726 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     6e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     6e6:	83 ff       	sbrs	r24, 3
     6e8:	1e c0       	rjmp	.+60     	; 0x726 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     6ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     6ee:	87 7f       	andi	r24, 0xF7	; 247
     6f0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     6fa:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     6fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     702:	8e 7f       	andi	r24, 0xFE	; 254
     704:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     708:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     70c:	8e 7f       	andi	r24, 0xFE	; 254
     70e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     712:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     716:	80 61       	ori	r24, 0x10	; 16
     718:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     71c:	42 e0       	ldi	r20, 0x02	; 2
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	6b de       	rcall	.-810    	; 0x3fa <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     724:	9c d2       	rcall	.+1336   	; 0xc5e <USB_Event_Stub>
     726:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     728:	ef 91       	pop	r30
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	7f 91       	pop	r23
     734:	6f 91       	pop	r22
     736:	5f 91       	pop	r21
     738:	4f 91       	pop	r20
     73a:	3f 91       	pop	r19
     73c:	2f 91       	pop	r18
     73e:	0f 90       	pop	r0
     740:	0b be       	out	0x3b, r0	; 59
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	18 95       	reti

0000074c <Endpoint_Write_Stream_LE>:
     74c:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	ec 01       	movw	r28, r24
     75e:	8b 01       	movw	r16, r22
     760:	7a 01       	movw	r14, r20
     762:	9e de       	rcall	.-708    	; 0x4a0 <Endpoint_WaitUntilReady>
     764:	81 11       	cpse	r24, r1
     766:	33 c0       	rjmp	.+102    	; 0x7ce <Endpoint_Write_Stream_LE+0x82>
     768:	e1 14       	cp	r14, r1
     76a:	f1 04       	cpc	r15, r1
     76c:	39 f0       	breq	.+14     	; 0x77c <Endpoint_Write_Stream_LE+0x30>
     76e:	f7 01       	movw	r30, r14
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	08 1b       	sub	r16, r24
     776:	19 0b       	sbc	r17, r25
     778:	c8 0f       	add	r28, r24
     77a:	d9 1f       	adc	r29, r25
     77c:	c1 2c       	mov	r12, r1
     77e:	d1 2c       	mov	r13, r1
     780:	01 15       	cp	r16, r1
     782:	11 05       	cpc	r17, r1
     784:	19 f1       	breq	.+70     	; 0x7cc <Endpoint_Write_Stream_LE+0x80>
     786:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     78a:	85 fd       	sbrc	r24, 5
     78c:	16 c0       	rjmp	.+44     	; 0x7ba <Endpoint_Write_Stream_LE+0x6e>
     78e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     792:	8e 77       	andi	r24, 0x7E	; 126
     794:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     798:	63 d2       	rcall	.+1222   	; 0xc60 <USB_USBTask>
     79a:	e1 14       	cp	r14, r1
     79c:	f1 04       	cpc	r15, r1
     79e:	49 f0       	breq	.+18     	; 0x7b2 <Endpoint_Write_Stream_LE+0x66>
     7a0:	f7 01       	movw	r30, r14
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	c8 0e       	add	r12, r24
     7a8:	d9 1e       	adc	r13, r25
     7aa:	d1 82       	std	Z+1, r13	; 0x01
     7ac:	c0 82       	st	Z, r12
     7ae:	85 e0       	ldi	r24, 0x05	; 5
     7b0:	0e c0       	rjmp	.+28     	; 0x7ce <Endpoint_Write_Stream_LE+0x82>
     7b2:	76 de       	rcall	.-788    	; 0x4a0 <Endpoint_WaitUntilReady>
     7b4:	88 23       	and	r24, r24
     7b6:	21 f3       	breq	.-56     	; 0x780 <Endpoint_Write_Stream_LE+0x34>
     7b8:	0a c0       	rjmp	.+20     	; 0x7ce <Endpoint_Write_Stream_LE+0x82>
     7ba:	89 91       	ld	r24, Y+
     7bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7c0:	01 50       	subi	r16, 0x01	; 1
     7c2:	11 09       	sbc	r17, r1
     7c4:	ff ef       	ldi	r31, 0xFF	; 255
     7c6:	cf 1a       	sub	r12, r31
     7c8:	df 0a       	sbc	r13, r31
     7ca:	da cf       	rjmp	.-76     	; 0x780 <Endpoint_Write_Stream_LE+0x34>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	08 95       	ret

000007e0 <Endpoint_Write_Control_Stream_LE>:
     7e0:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <USB_ControlRequest+0x6>
     7e4:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <USB_ControlRequest+0x7>
     7e8:	26 17       	cp	r18, r22
     7ea:	37 07       	cpc	r19, r23
     7ec:	48 f0       	brcs	.+18     	; 0x800 <Endpoint_Write_Control_Stream_LE+0x20>
     7ee:	61 15       	cp	r22, r1
     7f0:	71 05       	cpc	r23, r1
     7f2:	39 f4       	brne	.+14     	; 0x802 <Endpoint_Write_Control_Stream_LE+0x22>
     7f4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7f8:	2e 77       	andi	r18, 0x7E	; 126
     7fa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <Endpoint_Write_Control_Stream_LE+0x22>
     800:	b9 01       	movw	r22, r18
     802:	fc 01       	movw	r30, r24
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	61 15       	cp	r22, r1
     808:	71 05       	cpc	r23, r1
     80a:	69 f1       	breq	.+90     	; 0x866 <Endpoint_Write_Control_Stream_LE+0x86>
     80c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     810:	88 23       	and	r24, r24
     812:	d1 f1       	breq	.+116    	; 0x888 <Endpoint_Write_Control_Stream_LE+0xa8>
     814:	85 30       	cpi	r24, 0x05	; 5
     816:	d1 f1       	breq	.+116    	; 0x88c <Endpoint_Write_Control_Stream_LE+0xac>
     818:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     81c:	83 fd       	sbrc	r24, 3
     81e:	32 c0       	rjmp	.+100    	; 0x884 <Endpoint_Write_Control_Stream_LE+0xa4>
     820:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     824:	82 fd       	sbrc	r24, 2
     826:	28 c0       	rjmp	.+80     	; 0x878 <Endpoint_Write_Control_Stream_LE+0x98>
     828:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     82c:	80 ff       	sbrs	r24, 0
     82e:	eb cf       	rjmp	.-42     	; 0x806 <Endpoint_Write_Control_Stream_LE+0x26>
     830:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     834:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     838:	61 15       	cp	r22, r1
     83a:	71 05       	cpc	r23, r1
     83c:	51 f0       	breq	.+20     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x72>
     83e:	88 30       	cpi	r24, 0x08	; 8
     840:	91 05       	cpc	r25, r1
     842:	38 f4       	brcc	.+14     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x72>
     844:	21 91       	ld	r18, Z+
     846:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     84a:	61 50       	subi	r22, 0x01	; 1
     84c:	71 09       	sbc	r23, r1
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	f3 cf       	rjmp	.-26     	; 0x838 <Endpoint_Write_Control_Stream_LE+0x58>
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	08 97       	sbiw	r24, 0x08	; 8
     856:	09 f0       	breq	.+2      	; 0x85a <Endpoint_Write_Control_Stream_LE+0x7a>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     85e:	8e 77       	andi	r24, 0x7E	; 126
     860:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     864:	d0 cf       	rjmp	.-96     	; 0x806 <Endpoint_Write_Control_Stream_LE+0x26>
     866:	21 11       	cpse	r18, r1
     868:	d1 cf       	rjmp	.-94     	; 0x80c <Endpoint_Write_Control_Stream_LE+0x2c>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <Endpoint_Write_Control_Stream_LE+0x98>
     86c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     870:	88 23       	and	r24, r24
     872:	51 f0       	breq	.+20     	; 0x888 <Endpoint_Write_Control_Stream_LE+0xa8>
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	51 f0       	breq	.+20     	; 0x88c <Endpoint_Write_Control_Stream_LE+0xac>
     878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87c:	82 ff       	sbrs	r24, 2
     87e:	f6 cf       	rjmp	.-20     	; 0x86c <Endpoint_Write_Control_Stream_LE+0x8c>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	08 95       	ret
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	08 95       	ret
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	08 95       	ret

00000890 <Endpoint_Read_Control_Stream_LE>:
     890:	61 15       	cp	r22, r1
     892:	71 05       	cpc	r23, r1
     894:	29 f4       	brne	.+10     	; 0x8a0 <Endpoint_Read_Control_Stream_LE+0x10>
     896:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     89a:	2b 77       	andi	r18, 0x7B	; 123
     89c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8a0:	fc 01       	movw	r30, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	31 f1       	breq	.+76     	; 0x8f4 <Endpoint_Read_Control_Stream_LE+0x64>
     8a8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     8ac:	88 23       	and	r24, r24
     8ae:	51 f1       	breq	.+84     	; 0x904 <Endpoint_Read_Control_Stream_LE+0x74>
     8b0:	85 30       	cpi	r24, 0x05	; 5
     8b2:	51 f1       	breq	.+84     	; 0x908 <Endpoint_Read_Control_Stream_LE+0x78>
     8b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8b8:	83 fd       	sbrc	r24, 3
     8ba:	22 c0       	rjmp	.+68     	; 0x900 <Endpoint_Read_Control_Stream_LE+0x70>
     8bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8c0:	82 ff       	sbrs	r24, 2
     8c2:	ef cf       	rjmp	.-34     	; 0x8a2 <Endpoint_Read_Control_Stream_LE+0x12>
     8c4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     8c8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     8cc:	89 2b       	or	r24, r25
     8ce:	31 f0       	breq	.+12     	; 0x8dc <Endpoint_Read_Control_Stream_LE+0x4c>
     8d0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8d4:	81 93       	st	Z+, r24
     8d6:	61 50       	subi	r22, 0x01	; 1
     8d8:	71 09       	sbc	r23, r1
     8da:	a1 f7       	brne	.-24     	; 0x8c4 <Endpoint_Read_Control_Stream_LE+0x34>
     8dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e0:	8b 77       	andi	r24, 0x7B	; 123
     8e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e6:	dd cf       	rjmp	.-70     	; 0x8a2 <Endpoint_Read_Control_Stream_LE+0x12>
     8e8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     8ec:	88 23       	and	r24, r24
     8ee:	51 f0       	breq	.+20     	; 0x904 <Endpoint_Read_Control_Stream_LE+0x74>
     8f0:	85 30       	cpi	r24, 0x05	; 5
     8f2:	51 f0       	breq	.+20     	; 0x908 <Endpoint_Read_Control_Stream_LE+0x78>
     8f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8f8:	80 ff       	sbrs	r24, 0
     8fa:	f6 cf       	rjmp	.-20     	; 0x8e8 <Endpoint_Read_Control_Stream_LE+0x58>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 95       	ret
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	08 95       	ret
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	08 95       	ret

0000090c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     90c:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <USB_ControlRequest+0x6>
     910:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <USB_ControlRequest+0x7>
     914:	26 17       	cp	r18, r22
     916:	37 07       	cpc	r19, r23
     918:	48 f0       	brcs	.+18     	; 0x92c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     91a:	61 15       	cp	r22, r1
     91c:	71 05       	cpc	r23, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     920:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     924:	2e 77       	andi	r18, 0x7E	; 126
     926:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     92a:	01 c0       	rjmp	.+2      	; 0x92e <Endpoint_Write_Control_PStream_LE+0x22>
     92c:	b9 01       	movw	r22, r18
     92e:	fc 01       	movw	r30, r24
     930:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     932:	61 15       	cp	r22, r1
     934:	71 05       	cpc	r23, r1
     936:	71 f1       	breq	.+92     	; 0x994 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     938:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     93c:	88 23       	and	r24, r24
     93e:	d9 f1       	breq	.+118    	; 0x9b6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     940:	85 30       	cpi	r24, 0x05	; 5
     942:	d9 f1       	breq	.+118    	; 0x9ba <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     944:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     948:	83 fd       	sbrc	r24, 3
     94a:	33 c0       	rjmp	.+102    	; 0x9b2 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     94c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     950:	82 fd       	sbrc	r24, 2
     952:	29 c0       	rjmp	.+82     	; 0x9a6 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     958:	80 ff       	sbrs	r24, 0
     95a:	eb cf       	rjmp	.-42     	; 0x932 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     95c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     960:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     964:	61 15       	cp	r22, r1
     966:	71 05       	cpc	r23, r1
     968:	59 f0       	breq	.+22     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x74>
     96a:	88 30       	cpi	r24, 0x08	; 8
     96c:	91 05       	cpc	r25, r1
     96e:	40 f4       	brcc	.+16     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     970:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     972:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     976:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     978:	61 50       	subi	r22, 0x01	; 1
     97a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	f2 cf       	rjmp	.-28     	; 0x964 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	08 97       	sbiw	r24, 0x08	; 8
     984:	09 f0       	breq	.+2      	; 0x988 <Endpoint_Write_Control_PStream_LE+0x7c>
     986:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     988:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     98c:	8e 77       	andi	r24, 0x7E	; 126
     98e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     992:	cf cf       	rjmp	.-98     	; 0x932 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     994:	21 11       	cpse	r18, r1
     996:	d0 cf       	rjmp	.-96     	; 0x938 <Endpoint_Write_Control_PStream_LE+0x2c>
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     99a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     99e:	88 23       	and	r24, r24
     9a0:	51 f0       	breq	.+20     	; 0x9b6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9a2:	85 30       	cpi	r24, 0x05	; 5
     9a4:	51 f0       	breq	.+20     	; 0x9ba <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9aa:	82 ff       	sbrs	r24, 2
     9ac:	f6 cf       	rjmp	.-20     	; 0x99a <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9ba:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9bc:	08 95       	ret

000009be <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	aa 97       	sbiw	r28, 0x2a	; 42
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	ef e7       	ldi	r30, 0x7F	; 127
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9da:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9de:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	e7 38       	cpi	r30, 0x87	; 135
     9e4:	f2 07       	cpc	r31, r18
     9e6:	c9 f7       	brne	.-14     	; 0x9da <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9e8:	87 dc       	rcall	.-1778   	; 0x2f8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     9ee:	83 ff       	sbrs	r24, 3
     9f0:	1d c1       	rjmp	.+570    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9f2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     9f6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <USB_ControlRequest+0x1>
     9fa:	49 2f       	mov	r20, r25
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	4a 30       	cpi	r20, 0x0A	; 10
     a00:	51 05       	cpc	r21, r1
     a02:	08 f0       	brcs	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x48>
     a04:	13 c1       	rjmp	.+550    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
     a06:	fa 01       	movw	r30, r20
     a08:	e4 5b       	subi	r30, 0xB4	; 180
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	a7 c4       	rjmp	.+2382   	; 0x135c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a0e:	80 38       	cpi	r24, 0x80	; 128
     a10:	81 f0       	breq	.+32     	; 0xa32 <USB_Device_ProcessControlRequest+0x74>
     a12:	82 38       	cpi	r24, 0x82	; 130
     a14:	09 f0       	breq	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0x5a>
     a16:	0a c1       	rjmp	.+532    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a18:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_ControlRequest+0x4>
     a1c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a1e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a22:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
     a26:	85 fb       	bst	r24, 5
     a28:	88 27       	eor	r24, r24
     a2a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a2c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a30:	06 c0       	rjmp	.+12     	; 0xa3e <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a32:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a36:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <USB_Device_RemoteWakeupEnabled>
     a3a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a3c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a3e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a42:	97 7f       	andi	r25, 0xF7	; 247
     a44:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a48:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     a4c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a50:	c5 c0       	rjmp	.+394    	; 0xbdc <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a52:	28 2f       	mov	r18, r24
     a54:	2d 7f       	andi	r18, 0xFD	; 253
     a56:	09 f0       	breq	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0x9c>
     a58:	e9 c0       	rjmp	.+466    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a5a:	88 23       	and	r24, r24
     a5c:	19 f0       	breq	.+6      	; 0xa64 <USB_Device_ProcessControlRequest+0xa6>
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	61 f0       	breq	.+24     	; 0xa7a <USB_Device_ProcessControlRequest+0xbc>
     a62:	e4 c0       	rjmp	.+456    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a64:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <USB_Device_ProcessControlRequest+0xb0>
     a6c:	df c0       	rjmp	.+446    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a6e:	93 30       	cpi	r25, 0x03	; 3
     a70:	09 f0       	breq	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0xb6>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <USB_Device_RemoteWakeupEnabled>
     a78:	2b c0       	rjmp	.+86     	; 0xad0 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a7a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     a7e:	81 11       	cpse	r24, r1
     a80:	27 c0       	rjmp	.+78     	; 0xad0 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a82:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_ControlRequest+0x4>
     a86:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a88:	09 f4       	brne	.+2      	; 0xa8c <USB_Device_ProcessControlRequest+0xce>
     a8a:	d0 c0       	rjmp	.+416    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a8c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a90:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a94:	20 ff       	sbrs	r18, 0
     a96:	1c c0       	rjmp	.+56     	; 0xad0 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a98:	93 30       	cpi	r25, 0x03	; 3
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a9c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aa0:	80 62       	ori	r24, 0x20	; 32
     aa2:	14 c0       	rjmp	.+40     	; 0xacc <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     aa4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aa8:	90 61       	ori	r25, 0x10	; 16
     aaa:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     aae:	21 e0       	ldi	r18, 0x01	; 1
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	a9 01       	movw	r20, r18
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <USB_Device_ProcessControlRequest+0xfc>
     ab6:	44 0f       	add	r20, r20
     ab8:	55 1f       	adc	r21, r21
     aba:	8a 95       	dec	r24
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <USB_Device_ProcessControlRequest+0xf8>
     abe:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     ac2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ac6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aca:	88 60       	ori	r24, 0x08	; 8
     acc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ad0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ad4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ad8:	87 7f       	andi	r24, 0xF7	; 247
     ada:	83 c0       	rjmp	.+262    	; 0xbe2 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     adc:	81 11       	cpse	r24, r1
     ade:	a6 c0       	rjmp	.+332    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     ae0:	10 91 81 01 	lds	r17, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     ae4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ae6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ae8:	f8 94       	cli
     aea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aee:	87 7f       	andi	r24, 0xF7	; 247
     af0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     af4:	b6 dc       	rcall	.-1684   	; 0x462 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     af6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
     afa:	80 ff       	sbrs	r24, 0
     afc:	fc cf       	rjmp	.-8      	; 0xaf6 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     afe:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     b02:	80 78       	andi	r24, 0x80	; 128
     b04:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b06:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b10:	11 11       	cpse	r17, r1
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <USB_Device_ProcessControlRequest+0x15a>
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0x15c>
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b1e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     b20:	85 c0       	rjmp	.+266    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b22:	80 58       	subi	r24, 0x80	; 128
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	08 f0       	brcs	.+2      	; 0xb2a <USB_Device_ProcessControlRequest+0x16c>
     b28:	81 c0       	rjmp	.+258    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b2a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     b2e:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <USB_ControlRequest+0x3>
     b32:	8c 3d       	cpi	r24, 0xDC	; 220
     b34:	53 e0       	ldi	r21, 0x03	; 3
     b36:	95 07       	cpc	r25, r21
     b38:	71 f5       	brne	.+92     	; 0xb96 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b3e:	8a e2       	ldi	r24, 0x2A	; 42
     b40:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b42:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b44:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b46:	de 01       	movw	r26, r28
     b48:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b4a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b4c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b4e:	51 e2       	ldi	r21, 0x21	; 33
     b50:	e3 2f       	mov	r30, r19
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     b58:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     b5a:	20 ff       	sbrs	r18, 0
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
     b5e:	e2 95       	swap	r30
     b60:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b62:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b64:	ef 70       	andi	r30, 0x0F	; 15
     b66:	8e 2f       	mov	r24, r30
     b68:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b6a:	ea 30       	cpi	r30, 0x0A	; 10
     b6c:	10 f0       	brcs	.+4      	; 0xb72 <USB_Device_ProcessControlRequest+0x1b4>
     b6e:	c7 96       	adiw	r24, 0x37	; 55
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <USB_Device_ProcessControlRequest+0x1b6>
     b72:	c0 96       	adiw	r24, 0x30	; 48
     b74:	8d 93       	st	X+, r24
     b76:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	24 31       	cpi	r18, 0x14	; 20
     b7c:	49 f7       	brne	.-46     	; 0xb50 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b7e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b84:	87 7f       	andi	r24, 0xF7	; 247
     b86:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b8a:	6a e2       	ldi	r22, 0x2A	; 42
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	26 de       	rcall	.-948    	; 0x7e0 <Endpoint_Write_Control_Stream_LE>
     b94:	12 c0       	rjmp	.+36     	; 0xbba <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b96:	ae 01       	movw	r20, r28
     b98:	4f 5f       	subi	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <USB_ControlRequest+0x4>
     ba0:	eb db       	rcall	.-2090   	; 0x378 <CALLBACK_USB_GetDescriptor>
     ba2:	bc 01       	movw	r22, r24
     ba4:	89 2b       	or	r24, r25
     ba6:	09 f4       	brne	.+2      	; 0xbaa <USB_Device_ProcessControlRequest+0x1ec>
     ba8:	41 c0       	rjmp	.+130    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
     baa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bae:	97 7f       	andi	r25, 0xF7	; 247
     bb0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	a9 de       	rcall	.-686    	; 0x90c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bbe:	8b 77       	andi	r24, 0x7B	; 123
     bc0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bc4:	33 c0       	rjmp	.+102    	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bc6:	80 38       	cpi	r24, 0x80	; 128
     bc8:	89 f5       	brne	.+98     	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bce:	87 7f       	andi	r24, 0xF7	; 247
     bd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bd4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bd8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bdc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     be0:	8e 77       	andi	r24, 0x7E	; 126
     be2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     be6:	3d dc       	rcall	.-1926   	; 0x462 <Endpoint_ClearStatusStage>
     be8:	21 c0       	rjmp	.+66     	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bea:	81 11       	cpse	r24, r1
     bec:	1f c0       	rjmp	.+62     	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bee:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     bf2:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <USB_ControlRequest+0x3>
     bf6:	99 27       	eor	r25, r25
     bf8:	02 97       	sbiw	r24, 0x02	; 2
     bfa:	c4 f4       	brge	.+48     	; 0xc2c <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c00:	87 7f       	andi	r24, 0xF7	; 247
     c02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c06:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     c0a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     c0e:	29 dc       	rcall	.-1966   	; 0x462 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c10:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <USB_Device_ConfigurationNumber>
     c14:	81 11       	cpse	r24, r1
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c18:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c1c:	87 fd       	sbrc	r24, 7
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <USB_Device_ProcessControlRequest+0x266>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <USB_Device_ProcessControlRequest+0x268>
     c24:	84 e0       	ldi	r24, 0x04	; 4
     c26:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     c2a:	50 db       	rcall	.-2400   	; 0x2cc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c30:	83 ff       	sbrs	r24, 3
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c34:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     c38:	80 62       	ori	r24, 0x20	; 32
     c3a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c42:	87 7f       	andi	r24, 0xF7	; 247
     c44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c48:	aa 96       	adiw	r28, 0x2a	; 42
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     c5e:	08 95       	ret

00000c60 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c60:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     c62:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
     c66:	88 23       	and	r24, r24
     c68:	59 f0       	breq	.+22     	; 0xc80 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c6a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c6e:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c70:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     c78:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     c7a:	a1 de       	rcall	.-702    	; 0x9be <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c7c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	fc 01       	movw	r30, r24
     c8e:	3d 96       	adiw	r30, 0x0d	; 13
     c90:	89 e0       	ldi	r24, 0x09	; 9
     c92:	df 01       	movw	r26, r30
     c94:	1d 92       	st	X+, r1
     c96:	8a 95       	dec	r24
     c98:	e9 f7       	brne	.-6      	; 0xc94 <CDC_Device_ConfigureEndpoints+0x10>
     c9a:	11 e0       	ldi	r17, 0x01	; 1
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	81 13       	cpse	r24, r17
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <CDC_Device_ConfigureEndpoints+0x28>
     ca2:	ea 81       	ldd	r30, Y+2	; 0x02
     ca4:	fb 81       	ldd	r31, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	20 e8       	ldi	r18, 0x80	; 128
     caa:	07 c0       	rjmp	.+14     	; 0xcba <CDC_Device_ConfigureEndpoints+0x36>
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	81 13       	cpse	r24, r17
     cb0:	06 c0       	rjmp	.+12     	; 0xcbe <CDC_Device_ConfigureEndpoints+0x3a>
     cb2:	ee 81       	ldd	r30, Y+6	; 0x06
     cb4:	ff 81       	ldd	r31, Y+7	; 0x07
     cb6:	98 85       	ldd	r25, Y+8	; 0x08
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <CDC_Device_ConfigureEndpoints+0x54>
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	81 17       	cp	r24, r17
     cc2:	29 f0       	breq	.+10     	; 0xcce <CDC_Device_ConfigureEndpoints+0x4a>
     cc4:	1f 5f       	subi	r17, 0xFF	; 255
     cc6:	17 30       	cpi	r17, 0x07	; 7
     cc8:	49 f7       	brne	.-46     	; 0xc9c <CDC_Device_ConfigureEndpoints+0x18>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	22 c0       	rjmp	.+68     	; 0xd12 <CDC_Device_ConfigureEndpoints+0x8e>
     cce:	ea 85       	ldd	r30, Y+10	; 0x0a
     cd0:	fb 85       	ldd	r31, Y+11	; 0x0b
     cd2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cd4:	20 e8       	ldi	r18, 0x80	; 128
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	91 11       	cpse	r25, r1
     cda:	94 e0       	ldi	r25, 0x04	; 4
     cdc:	68 e0       	ldi	r22, 0x08	; 8
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	6e 17       	cp	r22, r30
     ce4:	7f 07       	cpc	r23, r31
     ce6:	20 f4       	brcc	.+8      	; 0xcf0 <CDC_Device_ConfigureEndpoints+0x6c>
     ce8:	4f 5f       	subi	r20, 0xFF	; 255
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	f9 cf       	rjmp	.-14     	; 0xce2 <CDC_Device_ConfigureEndpoints+0x5e>
     cf0:	42 95       	swap	r20
     cf2:	40 7f       	andi	r20, 0xF0	; 240
     cf4:	92 60       	ori	r25, 0x02	; 2
     cf6:	49 2b       	or	r20, r25
     cf8:	b0 e4       	ldi	r27, 0x40	; 64
     cfa:	8b 9f       	mul	r24, r27
     cfc:	c0 01       	movw	r24, r0
     cfe:	11 24       	eor	r1, r1
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	21 11       	cpse	r18, r1
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <CDC_Device_ConfigureEndpoints+0x84>
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	68 2b       	or	r22, r24
     d0a:	81 2f       	mov	r24, r17
     d0c:	76 db       	rcall	.-2324   	; 0x3fa <Endpoint_ConfigureEndpoint_Prv>
     d0e:	81 11       	cpse	r24, r1
     d10:	d9 cf       	rjmp	.-78     	; 0xcc4 <CDC_Device_ConfigureEndpoints+0x40>
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	08 95       	ret

00000d1a <CDC_Device_SendString>:
     d1a:	db 01       	movw	r26, r22
     d1c:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <USB_DeviceState>
     d20:	24 30       	cpi	r18, 0x04	; 4
     d22:	c1 f4       	brne	.+48     	; 0xd54 <CDC_Device_SendString+0x3a>
     d24:	fc 01       	movw	r30, r24
     d26:	47 85       	ldd	r20, Z+15	; 0x0f
     d28:	50 89       	ldd	r21, Z+16	; 0x10
     d2a:	61 89       	ldd	r22, Z+17	; 0x11
     d2c:	72 89       	ldd	r23, Z+18	; 0x12
     d2e:	45 2b       	or	r20, r21
     d30:	46 2b       	or	r20, r22
     d32:	47 2b       	or	r20, r23
     d34:	79 f0       	breq	.+30     	; 0xd54 <CDC_Device_SendString+0x3a>
     d36:	81 81       	ldd	r24, Z+1	; 0x01
     d38:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d3c:	fd 01       	movw	r30, r26
     d3e:	01 90       	ld	r0, Z+
     d40:	00 20       	and	r0, r0
     d42:	e9 f7       	brne	.-6      	; 0xd3e <CDC_Device_SendString+0x24>
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	bf 01       	movw	r22, r30
     d48:	6a 1b       	sub	r22, r26
     d4a:	7b 0b       	sbc	r23, r27
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	cd 01       	movw	r24, r26
     d52:	fc cc       	rjmp	.-1544   	; 0x74c <Endpoint_Write_Stream_LE>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	08 95       	ret

00000d58 <CDC_Device_Flush>:
     d58:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <USB_DeviceState>
     d5c:	24 30       	cpi	r18, 0x04	; 4
     d5e:	29 f5       	brne	.+74     	; 0xdaa <CDC_Device_Flush+0x52>
     d60:	fc 01       	movw	r30, r24
     d62:	47 85       	ldd	r20, Z+15	; 0x0f
     d64:	50 89       	ldd	r21, Z+16	; 0x10
     d66:	61 89       	ldd	r22, Z+17	; 0x11
     d68:	72 89       	ldd	r23, Z+18	; 0x12
     d6a:	45 2b       	or	r20, r21
     d6c:	46 2b       	or	r20, r22
     d6e:	47 2b       	or	r20, r23
     d70:	e1 f0       	breq	.+56     	; 0xdaa <CDC_Device_Flush+0x52>
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d78:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     d7c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     d80:	89 2b       	or	r24, r25
     d82:	89 f0       	breq	.+34     	; 0xda6 <CDC_Device_Flush+0x4e>
     d84:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d8c:	8e 77       	andi	r24, 0x7E	; 126
     d8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d92:	95 fd       	sbrc	r25, 5
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <CDC_Device_Flush+0x4e>
     d96:	84 db       	rcall	.-2296   	; 0x4a0 <Endpoint_WaitUntilReady>
     d98:	81 11       	cpse	r24, r1
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <CDC_Device_Flush+0x54>
     d9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     da0:	8e 77       	andi	r24, 0x7E	; 126
     da2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	08 95       	ret

00000dae <CDC_Device_USBTask>:
     dae:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <USB_DeviceState>
     db2:	24 30       	cpi	r18, 0x04	; 4
     db4:	51 f4       	brne	.+20     	; 0xdca <CDC_Device_USBTask+0x1c>
     db6:	fc 01       	movw	r30, r24
     db8:	47 85       	ldd	r20, Z+15	; 0x0f
     dba:	50 89       	ldd	r21, Z+16	; 0x10
     dbc:	61 89       	ldd	r22, Z+17	; 0x11
     dbe:	72 89       	ldd	r23, Z+18	; 0x12
     dc0:	45 2b       	or	r20, r21
     dc2:	46 2b       	or	r20, r22
     dc4:	47 2b       	or	r20, r23
     dc6:	09 f0       	breq	.+2      	; 0xdca <CDC_Device_USBTask+0x1c>
     dc8:	c7 cf       	rjmp	.-114    	; 0xd58 <CDC_Device_Flush>
     dca:	08 95       	ret

00000dcc <CDC_Device_ReceiveByte>:
     dcc:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <USB_DeviceState>
     dd0:	24 30       	cpi	r18, 0x04	; 4
     dd2:	19 f0       	breq	.+6      	; 0xdda <CDC_Device_ReceiveByte+0xe>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
     dd8:	08 95       	ret
     dda:	fc 01       	movw	r30, r24
     ddc:	47 85       	ldd	r20, Z+15	; 0x0f
     dde:	50 89       	ldd	r21, Z+16	; 0x10
     de0:	61 89       	ldd	r22, Z+17	; 0x11
     de2:	72 89       	ldd	r23, Z+18	; 0x12
     de4:	45 2b       	or	r20, r21
     de6:	46 2b       	or	r20, r22
     de8:	47 2b       	or	r20, r23
     dea:	a1 f3       	breq	.-24     	; 0xdd4 <CDC_Device_ReceiveByte+0x8>
     dec:	85 81       	ldd	r24, Z+5	; 0x05
     dee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     df2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     df6:	82 ff       	sbrs	r24, 2
     df8:	ed cf       	rjmp	.-38     	; 0xdd4 <CDC_Device_ReceiveByte+0x8>
     dfa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     dfe:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     e02:	89 2b       	or	r24, r25
     e04:	21 f0       	breq	.+8      	; 0xe0e <CDC_Device_ReceiveByte+0x42>
     e06:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <CDC_Device_ReceiveByte+0x46>
     e0e:	2f ef       	ldi	r18, 0xFF	; 255
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     e16:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     e1a:	89 2b       	or	r24, r25
     e1c:	29 f4       	brne	.+10     	; 0xe28 <CDC_Device_ReceiveByte+0x5c>
     e1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e22:	8b 77       	andi	r24, 0x7B	; 123
     e24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e28:	c9 01       	movw	r24, r18
     e2a:	08 95       	ret

00000e2c <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     e2c:	08 95       	ret

00000e2e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
     e38:	83 ff       	sbrs	r24, 3
     e3a:	95 c0       	rjmp	.+298    	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e3c:	88 81       	ld	r24, Y
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_ControlRequest+0x4>
     e44:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <USB_ControlRequest+0x5>
     e48:	28 17       	cp	r18, r24
     e4a:	39 07       	cpc	r19, r25
     e4c:	09 f0       	breq	.+2      	; 0xe50 <CDC_Device_ProcessControlRequest+0x22>
     e4e:	8b c0       	rjmp	.+278    	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
     e50:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_ControlRequest+0x1>
     e54:	81 32       	cpi	r24, 0x21	; 33
     e56:	59 f0       	breq	.+22     	; 0xe6e <CDC_Device_ProcessControlRequest+0x40>
     e58:	18 f4       	brcc	.+6      	; 0xe60 <CDC_Device_ProcessControlRequest+0x32>
     e5a:	80 32       	cpi	r24, 0x20	; 32
     e5c:	d1 f1       	breq	.+116    	; 0xed2 <CDC_Device_ProcessControlRequest+0xa4>
     e5e:	83 c0       	rjmp	.+262    	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
     e60:	82 32       	cpi	r24, 0x22	; 34
     e62:	09 f4       	brne	.+2      	; 0xe66 <CDC_Device_ProcessControlRequest+0x38>
     e64:	5f c0       	rjmp	.+190    	; 0xf24 <CDC_Device_ProcessControlRequest+0xf6>
     e66:	83 32       	cpi	r24, 0x23	; 35
     e68:	09 f4       	brne	.+2      	; 0xe6c <CDC_Device_ProcessControlRequest+0x3e>
     e6a:	6d c0       	rjmp	.+218    	; 0xf46 <CDC_Device_ProcessControlRequest+0x118>
     e6c:	7c c0       	rjmp	.+248    	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e6e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
     e72:	81 3a       	cpi	r24, 0xA1	; 161
     e74:	09 f0       	breq	.+2      	; 0xe78 <CDC_Device_ProcessControlRequest+0x4a>
     e76:	77 c0       	rjmp	.+238    	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e82:	8f 85       	ldd	r24, Y+15	; 0x0f
     e84:	98 89       	ldd	r25, Y+16	; 0x10
     e86:	a9 89       	ldd	r26, Y+17	; 0x11
     e88:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e8a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     e8e:	49 2f       	mov	r20, r25
     e90:	5a 2f       	mov	r21, r26
     e92:	6b 2f       	mov	r22, r27
     e94:	77 27       	eor	r23, r23
     e96:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     e9a:	ad 01       	movw	r20, r26
     e9c:	66 27       	eor	r22, r22
     e9e:	77 27       	eor	r23, r23
     ea0:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     ea4:	8b 2f       	mov	r24, r27
     ea6:	99 27       	eor	r25, r25
     ea8:	aa 27       	eor	r26, r26
     eaa:	bb 27       	eor	r27, r27
     eac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     eb0:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eb2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     eb6:	8c 89       	ldd	r24, Y+20	; 0x14
     eb8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     ebc:	8d 89       	ldd	r24, Y+21	; 0x15
     ebe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ec6:	8e 77       	andi	r24, 0x7E	; 126
     ec8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ed0:	c8 ca       	rjmp	.-2672   	; 0x462 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ed2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
     ed6:	81 32       	cpi	r24, 0x21	; 33
     ed8:	09 f0       	breq	.+2      	; 0xedc <CDC_Device_ProcessControlRequest+0xae>
     eda:	45 c0       	rjmp	.+138    	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     edc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ee6:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
     eea:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
     eee:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
     ef2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     ef6:	3f 87       	std	Y+15, r19	; 0x0f
     ef8:	28 8b       	std	Y+16, r18	; 0x10
     efa:	99 8b       	std	Y+17, r25	; 0x11
     efc:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     efe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f02:	8b 8b       	std	Y+19, r24	; 0x13
     f04:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f08:	8c 8b       	std	Y+20, r24	; 0x14
     f0a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f0e:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f14:	8b 77       	andi	r24, 0x7B	; 123
     f16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f1a:	a3 da       	rcall	.-2746   	; 0x462 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f1c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f1e:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f20:	cf 91       	pop	r28
     f22:	84 cf       	rjmp	.-248    	; 0xe2c <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f24:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
     f28:	81 32       	cpi	r24, 0x21	; 33
     f2a:	e9 f4       	brne	.+58     	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f36:	95 da       	rcall	.-2774   	; 0x462 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f38:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f3c:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f3e:	ce 01       	movw	r24, r28
     f40:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f42:	cf 91       	pop	r28
     f44:	73 cf       	rjmp	.-282    	; 0xe2c <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f46:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
     f4a:	81 32       	cpi	r24, 0x21	; 33
     f4c:	61 f4       	brne	.+24     	; 0xf66 <CDC_Device_ProcessControlRequest+0x138>
     f4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f58:	84 da       	rcall	.-2808   	; 0x462 <Endpoint_ClearStatusStage>
     f5a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
			}

			break;
	}
}
     f5e:	ce 01       	movw	r24, r28
     f60:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f62:	cf 91       	pop	r28
     f64:	63 cf       	rjmp	.-314    	; 0xe2c <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f6c:	6f 92       	push	r6
     f6e:	7f 92       	push	r7
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	00 d0       	rcall	.+0      	; 0xf8a <HID_Device_ProcessControlRequest+0x1e>
     f8a:	1f 92       	push	r1
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     f92:	ad b6       	in	r10, 0x3d	; 61
     f94:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     f9a:	83 ff       	sbrs	r24, 3
     f9c:	f7 c0       	rjmp	.+494    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     f9e:	f7 01       	movw	r30, r14
     fa0:	80 81       	ld	r24, Z
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_ControlRequest+0x4>
     fa8:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <USB_ControlRequest+0x5>
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <HID_Device_ProcessControlRequest+0x48>
     fb2:	ec c0       	rjmp	.+472    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
	  return;

	switch (USB_ControlRequest.bRequest)
     fb4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_ControlRequest+0x1>
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	09 f4       	brne	.+2      	; 0xfbe <HID_Device_ProcessControlRequest+0x52>
     fbc:	96 c0       	rjmp	.+300    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
     fbe:	30 f4       	brcc	.+12     	; 0xfcc <HID_Device_ProcessControlRequest+0x60>
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <HID_Device_ProcessControlRequest+0x74>
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	09 f4       	brne	.+2      	; 0xfca <HID_Device_ProcessControlRequest+0x5e>
     fc8:	c9 c0       	rjmp	.+402    	; 0x115c <__EEPROM_REGION_LENGTH__+0x15c>
     fca:	e0 c0       	rjmp	.+448    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
     fcc:	8a 30       	cpi	r24, 0x0A	; 10
     fce:	09 f4       	brne	.+2      	; 0xfd2 <HID_Device_ProcessControlRequest+0x66>
     fd0:	ad c0       	rjmp	.+346    	; 0x112c <__EEPROM_REGION_LENGTH__+0x12c>
     fd2:	8b 30       	cpi	r24, 0x0B	; 11
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <HID_Device_ProcessControlRequest+0x6c>
     fd6:	96 c0       	rjmp	.+300    	; 0x1104 <__EEPROM_REGION_LENGTH__+0x104>
     fd8:	89 30       	cpi	r24, 0x09	; 9
     fda:	09 f0       	breq	.+2      	; 0xfde <HID_Device_ProcessControlRequest+0x72>
     fdc:	d7 c0       	rjmp	.+430    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
     fde:	48 c0       	rjmp	.+144    	; 0x1070 <__EEPROM_REGION_LENGTH__+0x70>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fe0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
     fe4:	81 3a       	cpi	r24, 0xA1	; 161
     fe6:	09 f0       	breq	.+2      	; 0xfea <HID_Device_ProcessControlRequest+0x7e>
     fe8:	d1 c0       	rjmp	.+418    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
			{
     fea:	8d b6       	in	r8, 0x3d	; 61
     fec:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
     fee:	1a 82       	std	Y+2, r1	; 0x02
     ff0:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     ff2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
     ff6:	10 91 82 01 	lds	r17, 0x0182	; 0x800182 <USB_ControlRequest+0x3>
     ffa:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ffc:	f7 01       	movw	r30, r14
     ffe:	87 81       	ldd	r24, Z+7	; 0x07
    1000:	48 2f       	mov	r20, r24
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	8d b7       	in	r24, 0x3d	; 61
    1006:	9e b7       	in	r25, 0x3e	; 62
    1008:	84 1b       	sub	r24, r20
    100a:	95 0b       	sbc	r25, r21
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	9e bf       	out	0x3e, r25	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	8d bf       	out	0x3d, r24	; 61
    1016:	ed b7       	in	r30, 0x3d	; 61
    1018:	fe b7       	in	r31, 0x3e	; 62
    101a:	31 96       	adiw	r30, 0x01	; 1
    101c:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	cf 01       	movw	r24, r30
    1024:	ba d1       	rcall	.+884    	; 0x139a <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1026:	4f ef       	ldi	r20, 0xFF	; 255
    1028:	41 0f       	add	r20, r17
    102a:	8e 01       	movw	r16, r28
    102c:	0f 5f       	subi	r16, 0xFF	; 255
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	96 01       	movw	r18, r12
    1032:	be 01       	movw	r22, r28
    1034:	6d 5f       	subi	r22, 0xFD	; 253
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	c7 01       	movw	r24, r14
    103a:	70 d9       	rcall	.-3360   	; 0x31c <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    103c:	f7 01       	movw	r30, r14
    103e:	85 81       	ldd	r24, Z+5	; 0x05
    1040:	96 81       	ldd	r25, Z+6	; 0x06
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	21 f0       	breq	.+8      	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1046:	47 81       	ldd	r20, Z+7	; 0x07
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	b6 01       	movw	r22, r12
    104c:	9d d1       	rcall	.+826    	; 0x1388 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    104e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1052:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1056:	87 7f       	andi	r24, 0xF7	; 247
    1058:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    105c:	69 81       	ldd	r22, Y+1	; 0x01
    105e:	7a 81       	ldd	r23, Y+2	; 0x02
    1060:	c6 01       	movw	r24, r12
    1062:	be db       	rcall	.-2180   	; 0x7e0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1064:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1068:	8b 77       	andi	r24, 0x7B	; 123
    106a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106e:	37 c0       	rjmp	.+110    	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1070:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
    1074:	81 32       	cpi	r24, 0x21	; 33
    1076:	09 f0       	breq	.+2      	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1078:	89 c0       	rjmp	.+274    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
			{
    107a:	8d b6       	in	r8, 0x3d	; 61
    107c:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    107e:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <USB_ControlRequest+0x6>
    1082:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1086:	70 90 81 01 	lds	r7, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
    108a:	60 90 82 01 	lds	r6, 0x0182	; 0x800182 <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    108e:	8d b7       	in	r24, 0x3d	; 61
    1090:	9e b7       	in	r25, 0x3e	; 62
    1092:	80 1b       	sub	r24, r16
    1094:	91 0b       	sbc	r25, r17
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	9e bf       	out	0x3e, r25	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	8d bf       	out	0x3d, r24	; 61
    10a0:	ed b7       	in	r30, 0x3d	; 61
    10a2:	fe b7       	in	r31, 0x3e	; 62
    10a4:	31 96       	adiw	r30, 0x01	; 1
    10a6:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    10b2:	b8 01       	movw	r22, r16
    10b4:	cf 01       	movw	r24, r30
    10b6:	ec db       	rcall	.-2088   	; 0x890 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10bc:	8e 77       	andi	r24, 0x7E	; 126
    10be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	71 10       	cpse	r7, r1
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	02 1b       	sub	r16, r18
    10ce:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    10d0:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    10d2:	3d 1d       	adc	r19, r13
    10d4:	4f ef       	ldi	r20, 0xFF	; 255
    10d6:	46 0d       	add	r20, r6
    10d8:	67 2d       	mov	r22, r7
    10da:	c7 01       	movw	r24, r14
    10dc:	4c d9       	rcall	.-3432   	; 0x376 <CALLBACK_HID_Device_ProcessHIDReport>
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	9e be       	out	0x3e, r9	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	8d be       	out	0x3d, r8	; 61
    10e8:	51 c0       	rjmp	.+162    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10ea:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
    10ee:	81 3a       	cpi	r24, 0xA1	; 161
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <__EEPROM_REGION_LENGTH__+0xf4>
    10f2:	4c c0       	rjmp	.+152    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f8:	87 7f       	andi	r24, 0xF7	; 247
    10fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    10fe:	f7 01       	movw	r30, r14
    1100:	80 85       	ldd	r24, Z+8	; 0x08
    1102:	3c c0       	rjmp	.+120    	; 0x117c <__EEPROM_REGION_LENGTH__+0x17c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1104:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
    1108:	81 32       	cpi	r24, 0x21	; 33
    110a:	09 f0       	breq	.+2      	; 0x110e <__EEPROM_REGION_LENGTH__+0x10e>
    110c:	3f c0       	rjmp	.+126    	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
    110e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1112:	87 7f       	andi	r24, 0xF7	; 247
    1114:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1118:	a4 d9       	rcall	.-3256   	; 0x462 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    111a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	91 11       	cpse	r25, r1
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <__EEPROM_REGION_LENGTH__+0x126>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	f7 01       	movw	r30, r14
    1128:	80 87       	std	Z+8, r24	; 0x08
    112a:	30 c0       	rjmp	.+96     	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    112c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
    1130:	81 32       	cpi	r24, 0x21	; 33
    1132:	61 f5       	brne	.+88     	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
    1134:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1138:	87 7f       	andi	r24, 0xF7	; 247
    113a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    113e:	91 d9       	rcall	.-3294   	; 0x462 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1140:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x2>
    1144:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <USB_ControlRequest+0x3>
    1148:	88 27       	eor	r24, r24
    114a:	36 e0       	ldi	r19, 0x06	; 6
    114c:	96 95       	lsr	r25
    114e:	87 95       	ror	r24
    1150:	3a 95       	dec	r19
    1152:	e1 f7       	brne	.-8      	; 0x114c <__EEPROM_REGION_LENGTH__+0x14c>
    1154:	f7 01       	movw	r30, r14
    1156:	92 87       	std	Z+10, r25	; 0x0a
    1158:	81 87       	std	Z+9, r24	; 0x09
    115a:	18 c0       	rjmp	.+48     	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    115c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest>
    1160:	81 3a       	cpi	r24, 0xA1	; 161
    1162:	a1 f4       	brne	.+40     	; 0x118c <__EEPROM_REGION_LENGTH__+0x18c>
    1164:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1168:	87 7f       	andi	r24, 0xF7	; 247
    116a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    116e:	f7 01       	movw	r30, r14
    1170:	81 85       	ldd	r24, Z+9	; 0x09
    1172:	92 85       	ldd	r25, Z+10	; 0x0a
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    117a:	87 95       	ror	r24
    117c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1180:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1184:	8e 77       	andi	r24, 0x7E	; 126
    1186:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    118a:	6b d9       	rcall	.-3370   	; 0x462 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	be be       	out	0x3e, r11	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	ad be       	out	0x3d, r10	; 61
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	08 95       	ret

000011ba <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    11c0:	dc 01       	movw	r26, r24
    11c2:	18 96       	adiw	r26, 0x08	; 8
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	ed 01       	movw	r28, r26
    11c8:	19 92       	st	Y+, r1
    11ca:	8a 95       	dec	r24
    11cc:	e9 f7       	brne	.-6      	; 0x11c8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
    11d2:	84 ef       	ldi	r24, 0xF4	; 244
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	92 87       	std	Z+10, r25	; 0x0a
    11d8:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    11da:	84 81       	ldd	r24, Z+4	; 0x04
    11dc:	81 11       	cpse	r24, r1
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <HID_Device_ConfigureEndpoints+0x2a>
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <HID_Device_ConfigureEndpoints+0x2c>
    11e4:	44 e0       	ldi	r20, 0x04	; 4
    11e6:	62 81       	ldd	r22, Z+2	; 0x02
    11e8:	73 81       	ldd	r23, Z+3	; 0x03
    11ea:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    11ec:	28 e0       	ldi	r18, 0x08	; 8
    11ee:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    11f0:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    11f2:	26 17       	cp	r18, r22
    11f4:	37 07       	cpc	r19, r23
    11f6:	20 f4       	brcc	.+8      	; 0x1200 <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
    11f8:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	f9 cf       	rjmp	.-14     	; 0x11f2 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1200:	42 60       	ori	r20, 0x02	; 2
    1202:	92 95       	swap	r25
    1204:	90 7f       	andi	r25, 0xF0	; 240
    1206:	49 2b       	or	r20, r25
    1208:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	f5 c8       	rjmp	.-3606   	; 0x3fa <Endpoint_ConfigureEndpoint_Prv>

00001210 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1210:	5f 92       	push	r5
    1212:	6f 92       	push	r6
    1214:	7f 92       	push	r7
    1216:	8f 92       	push	r8
    1218:	9f 92       	push	r9
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	00 d0       	rcall	.+0      	; 0x1230 <HID_Device_USBTask+0x20>
    1230:	1f 92       	push	r1
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    1238:	ad b6       	in	r10, 0x3d	; 61
    123a:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    123c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_DeviceState>
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	09 f0       	breq	.+2      	; 0x1246 <HID_Device_USBTask+0x36>
    1244:	73 c0       	rjmp	.+230    	; 0x132c <HID_Device_USBTask+0x11c>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1246:	f7 01       	movw	r30, r14
    1248:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    124a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    124e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1252:	85 ff       	sbrs	r24, 5
    1254:	6b c0       	rjmp	.+214    	; 0x132c <HID_Device_USBTask+0x11c>
	{
    1256:	8d b6       	in	r8, 0x3d	; 61
    1258:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    125a:	47 81       	ldd	r20, Z+7	; 0x07
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	8d b7       	in	r24, 0x3d	; 61
    1260:	9e b7       	in	r25, 0x3e	; 62
    1262:	84 1b       	sub	r24, r20
    1264:	95 0b       	sbc	r25, r21
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	9e bf       	out	0x3e, r25	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	8d bf       	out	0x3d, r24	; 61
    1270:	ed b7       	in	r30, 0x3d	; 61
    1272:	fe b7       	in	r31, 0x3e	; 62
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1278:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    127a:	1a 82       	std	Y+2, r1	; 0x02
    127c:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	cf 01       	movw	r24, r30
    1284:	8a d0       	rcall	.+276    	; 0x139a <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1286:	8e 01       	movw	r16, r28
    1288:	0f 5f       	subi	r16, 0xFF	; 255
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	96 01       	movw	r18, r12
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	be 01       	movw	r22, r28
    1292:	6d 5f       	subi	r22, 0xFD	; 253
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	c7 01       	movw	r24, r14
    1298:	41 d8       	rcall	.-3966   	; 0x31c <CALLBACK_HID_Device_CreateHIDReport>
    129a:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    129c:	f7 01       	movw	r30, r14
    129e:	81 85       	ldd	r24, Z+9	; 0x09
    12a0:	92 85       	ldd	r25, Z+10	; 0x0a
    12a2:	89 2b       	or	r24, r25
    12a4:	29 f0       	breq	.+10     	; 0x12b0 <HID_Device_USBTask+0xa0>
    12a6:	11 e0       	ldi	r17, 0x01	; 1
    12a8:	83 85       	ldd	r24, Z+11	; 0x0b
    12aa:	94 85       	ldd	r25, Z+12	; 0x0c
    12ac:	89 2b       	or	r24, r25
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <HID_Device_USBTask+0xa2>
    12b0:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    12b2:	f7 01       	movw	r30, r14
    12b4:	65 80       	ldd	r6, Z+5	; 0x05
    12b6:	76 80       	ldd	r7, Z+6	; 0x06
    12b8:	61 14       	cp	r6, r1
    12ba:	71 04       	cpc	r7, r1
    12bc:	81 f0       	breq	.+32     	; 0x12de <HID_Device_USBTask+0xce>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    12be:	49 81       	ldd	r20, Y+1	; 0x01
    12c0:	5a 81       	ldd	r21, Y+2	; 0x02
    12c2:	b3 01       	movw	r22, r6
    12c4:	c6 01       	movw	r24, r12
    12c6:	53 d0       	rcall	.+166    	; 0x136e <memcmp>
    12c8:	01 e0       	ldi	r16, 0x01	; 1
    12ca:	89 2b       	or	r24, r25
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <HID_Device_USBTask+0xc0>
    12ce:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    12d0:	f7 01       	movw	r30, r14
    12d2:	47 81       	ldd	r20, Z+7	; 0x07
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	b6 01       	movw	r22, r12
    12d8:	c3 01       	movw	r24, r6
    12da:	56 d0       	rcall	.+172    	; 0x1388 <memcpy>
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <HID_Device_USBTask+0xd0>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    12de:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	89 2b       	or	r24, r25
    12e6:	e9 f0       	breq	.+58     	; 0x1322 <HID_Device_USBTask+0x112>
    12e8:	51 10       	cpse	r5, r1
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <HID_Device_USBTask+0xe4>
    12ec:	01 11       	cpse	r16, r1
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <HID_Device_USBTask+0xe4>
    12f0:	10 ff       	sbrs	r17, 0
    12f2:	17 c0       	rjmp	.+46     	; 0x1322 <HID_Device_USBTask+0x112>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    12f4:	f7 01       	movw	r30, r14
    12f6:	81 85       	ldd	r24, Z+9	; 0x09
    12f8:	92 85       	ldd	r25, Z+10	; 0x0a
    12fa:	94 87       	std	Z+12, r25	; 0x0c
    12fc:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    12fe:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1300:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1308:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    130c:	69 81       	ldd	r22, Y+1	; 0x01
    130e:	7a 81       	ldd	r23, Y+2	; 0x02
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	c6 01       	movw	r24, r12
    1316:	1a da       	rcall	.-3020   	; 0x74c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    131c:	8e 77       	andi	r24, 0x7E	; 126
    131e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	9e be       	out	0x3e, r9	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	be be       	out	0x3e, r11	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	ad be       	out	0x3d, r10	; 61
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	9f 90       	pop	r9
    1352:	8f 90       	pop	r8
    1354:	7f 90       	pop	r7
    1356:	6f 90       	pop	r6
    1358:	5f 90       	pop	r5
    135a:	08 95       	ret

0000135c <__tablejump2__>:
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	00 24       	eor	r0, r0
    1362:	00 1c       	adc	r0, r0
    1364:	0b be       	out	0x3b, r0	; 59
    1366:	07 90       	elpm	r0, Z+
    1368:	f6 91       	elpm	r31, Z
    136a:	e0 2d       	mov	r30, r0
    136c:	09 94       	ijmp

0000136e <memcmp>:
    136e:	fb 01       	movw	r30, r22
    1370:	dc 01       	movw	r26, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <memcmp+0xe>
    1374:	8d 91       	ld	r24, X+
    1376:	01 90       	ld	r0, Z+
    1378:	80 19       	sub	r24, r0
    137a:	21 f4       	brne	.+8      	; 0x1384 <memcmp+0x16>
    137c:	41 50       	subi	r20, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	c8 f7       	brcc	.-14     	; 0x1374 <memcmp+0x6>
    1382:	88 1b       	sub	r24, r24
    1384:	99 0b       	sbc	r25, r25
    1386:	08 95       	ret

00001388 <memcpy>:
    1388:	fb 01       	movw	r30, r22
    138a:	dc 01       	movw	r26, r24
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <memcpy+0xa>
    138e:	01 90       	ld	r0, Z+
    1390:	0d 92       	st	X+, r0
    1392:	41 50       	subi	r20, 0x01	; 1
    1394:	50 40       	sbci	r21, 0x00	; 0
    1396:	d8 f7       	brcc	.-10     	; 0x138e <memcpy+0x6>
    1398:	08 95       	ret

0000139a <memset>:
    139a:	dc 01       	movw	r26, r24
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <memset+0x6>
    139e:	6d 93       	st	X+, r22
    13a0:	41 50       	subi	r20, 0x01	; 1
    13a2:	50 40       	sbci	r21, 0x00	; 0
    13a4:	e0 f7       	brcc	.-8      	; 0x139e <memset+0x4>
    13a6:	08 95       	ret

000013a8 <_exit>:
    13a8:	f8 94       	cli

000013aa <__stop_program>:
    13aa:	ff cf       	rjmp	.-2      	; 0x13aa <__stop_program>
