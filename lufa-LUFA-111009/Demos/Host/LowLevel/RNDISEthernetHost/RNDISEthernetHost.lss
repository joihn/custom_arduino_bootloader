
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000210c  000021a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000210c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011e  0080011e  000021be  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006821  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002492  00000000  00000000  00008d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000332d  00000000  00000000  0000b213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  0000e540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002867  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003dcd  00000000  00000000  000118d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  000156a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e6 c1       	rjmp	.+972    	; 0x3ce <__ctors_end>
       2:	00 00       	nop
       4:	02 c2       	rjmp	.+1028   	; 0x40a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c2       	rjmp	.+1024   	; 0x40a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c1       	rjmp	.+1020   	; 0x40a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c1       	rjmp	.+1016   	; 0x40a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c1       	rjmp	.+1012   	; 0x40a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c1       	rjmp	.+1008   	; 0x40a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c1       	rjmp	.+1004   	; 0x40a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c1       	rjmp	.+1000   	; 0x40a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c1       	rjmp	.+996    	; 0x40a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_10>
      2c:	ee c1       	rjmp	.+988    	; 0x40a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c1       	rjmp	.+984    	; 0x40a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c1       	rjmp	.+980    	; 0x40a <__bad_interrupt>
      36:	00 00       	nop
      38:	e8 c1       	rjmp	.+976    	; 0x40a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e6 c1       	rjmp	.+972    	; 0x40a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c1       	rjmp	.+968    	; 0x40a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c1       	rjmp	.+964    	; 0x40a <__bad_interrupt>
      46:	00 00       	nop
      48:	e0 c1       	rjmp	.+960    	; 0x40a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	de c1       	rjmp	.+956    	; 0x40a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c1       	rjmp	.+952    	; 0x40a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c1       	rjmp	.+948    	; 0x40a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c1       	rjmp	.+944    	; 0x40a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c1       	rjmp	.+940    	; 0x40a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c1       	rjmp	.+936    	; 0x40a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c1       	rjmp	.+932    	; 0x40a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c1       	rjmp	.+928    	; 0x40a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c1       	rjmp	.+924    	; 0x40a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c1       	rjmp	.+920    	; 0x40a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c1       	rjmp	.+916    	; 0x40a <__bad_interrupt>
      76:	00 00       	nop
      78:	c8 c1       	rjmp	.+912    	; 0x40a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c6 c1       	rjmp	.+908    	; 0x40a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c1       	rjmp	.+904    	; 0x40a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c1       	rjmp	.+900    	; 0x40a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c1       	rjmp	.+896    	; 0x40a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	be c1       	rjmp	.+892    	; 0x40a <__bad_interrupt>
      8e:	00 00       	nop
      90:	bc c1       	rjmp	.+888    	; 0x40a <__bad_interrupt>
      92:	00 00       	nop
      94:	ba c1       	rjmp	.+884    	; 0x40a <__bad_interrupt>
      96:	00 00       	nop
      98:	d3 07       	cpc	r29, r19
      9a:	c4 08       	sbc	r12, r4
      9c:	f1 07       	cpc	r31, r17
      9e:	fb 07       	cpc	r31, r27
      a0:	26 08       	sbc	r2, r6
      a2:	4e 08       	sbc	r4, r14
      a4:	59 08       	sbc	r5, r9
      a6:	6a 08       	sbc	r6, r10
      a8:	86 08       	sbc	r8, r6
      aa:	ad 08       	sbc	r10, r13

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 50       	subi	r22, 0x0D	; 13
      b2:	61 63       	ori	r22, 0x31	; 49
      b4:	6b 65       	ori	r22, 0x5B	; 91
      b6:	74 20       	and	r7, r4
      b8:	74 6f       	ori	r23, 0xF4	; 244
      ba:	6f 20       	and	r6, r15
      bc:	6c 61       	ori	r22, 0x1C	; 28
      be:	72 67       	ori	r23, 0x72	; 114
      c0:	65 2e       	mov	r6, r21
      c2:	0d 0a       	sbc	r0, r29
      c4:	1b 5b       	subi	r17, 0xBB	; 187
      c6:	33 37       	cpi	r19, 0x73	; 115
      c8:	6d 00       	.word	0x006d	; ????

000000ca <__c.4566>:
      ca:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
      da:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000000e3 <__c.4564>:
      e3:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece
      f3:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
     103:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
     113:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

0000011b <__c.4557>:
     11b:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     12b:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     13b:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     14b:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     15b:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     16b:	1b 5b 33 37 6d 00                                   .[37m.

00000171 <__c.4550>:
     171:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     181:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     191:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001a0 <__c.4545>:
     1a0:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     1b0:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001bb <__c.4543>:
     1bb:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     1cb:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000001d7 <__c.4541>:
     1d7:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
     1e7:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
     1f7:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     207:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

00000210 <__c.4538>:
     210:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     220:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     230:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     240:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
     250:	33 37 6d 00                                         37m.

00000254 <__c.4535>:
     254:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     264:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     274:	74 65 73 2e 0d 0a 00                                tes....

0000027b <__c.4533>:
     27b:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi
     28b:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..
     29b:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     2ab:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000002b6 <__c.4530>:
     2b6:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2c6:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     2d6:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     2e6:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2f6:	37 6d 00                                            7m.

000002f9 <__c.4528>:
     2f9:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     309:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000313 <__c.4526>:
     313:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     323:	69 63 65 2e 0d 0a 00                                ice....

0000032a <__c.4524>:
     32a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     33a:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     34a:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000354 <__c.4521>:
     354:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     364:	61 74 61 2e 0d 0a 00                                ata....

0000036b <__c.4516>:
     36b:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     37b:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     38b:	00                                                  .

0000038c <__c.4511>:
     38c:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     39c:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000003a9 <__c.4502>:
     3a9:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     3b9:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     3c9:	5b 33 37 6d 00                                      [37m.

000003ce <__ctors_end>:
     3ce:	11 24       	eor	r1, r1
     3d0:	1f be       	out	0x3f, r1	; 63
     3d2:	cf ef       	ldi	r28, 0xFF	; 255
     3d4:	d0 e2       	ldi	r29, 0x20	; 32
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	cd bf       	out	0x3d, r28	; 61

000003da <__do_copy_data>:
     3da:	11 e0       	ldi	r17, 0x01	; 1
     3dc:	a0 e0       	ldi	r26, 0x00	; 0
     3de:	b1 e0       	ldi	r27, 0x01	; 1
     3e0:	ec e0       	ldi	r30, 0x0C	; 12
     3e2:	f1 e2       	ldi	r31, 0x21	; 33
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	0b bf       	out	0x3b, r16	; 59
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__do_copy_data+0x14>
     3ea:	07 90       	elpm	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	ae 31       	cpi	r26, 0x1E	; 30
     3f0:	b1 07       	cpc	r27, r17
     3f2:	d9 f7       	brne	.-10     	; 0x3ea <__do_copy_data+0x10>

000003f4 <__do_clear_bss>:
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	ae e1       	ldi	r26, 0x1E	; 30
     3f8:	b1 e0       	ldi	r27, 0x01	; 1
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <.do_clear_bss_start>

000003fc <.do_clear_bss_loop>:
     3fc:	1d 92       	st	X+, r1

000003fe <.do_clear_bss_start>:
     3fe:	a4 34       	cpi	r26, 0x44	; 68
     400:	b2 07       	cpc	r27, r18
     402:	e1 f7       	brne	.-8      	; 0x3fc <.do_clear_bss_loop>
     404:	d6 d1       	rcall	.+940    	; 0x7b2 <main>
     406:	0c 94 84 10 	jmp	0x2108	; 0x2108 <_exit>

0000040a <__bad_interrupt>:
     40a:	fa cd       	rjmp	.-1036   	; 0x0 <__vectors>

0000040c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     40c:	9b b1       	in	r25, 0x0b	; 11
     40e:	9f 70       	andi	r25, 0x0F	; 15
     410:	89 2b       	or	r24, r25
     412:	8b b9       	out	0x0b, r24	; 11
     414:	08 95       	ret

00000416 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     416:	84 b7       	in	r24, 0x34	; 52
     418:	87 7f       	andi	r24, 0xF7	; 247
     41a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	a8 95       	wdr
     422:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     426:	88 61       	ori	r24, 0x18	; 24
     428:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     42c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     430:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	80 e8       	ldi	r24, 0x80	; 128
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     43e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     442:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     444:	83 e3       	ldi	r24, 0x33	; 51
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     44c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     450:	86 e0       	ldi	r24, 0x06	; 6
     452:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     456:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     45a:	88 e1       	ldi	r24, 0x18	; 24
     45c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     460:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     462:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     464:	8a b1       	in	r24, 0x0a	; 10
     466:	80 6f       	ori	r24, 0xF0	; 240
     468:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     46a:	8b b1       	in	r24, 0x0b	; 11
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     470:	9d d7       	rcall	.+3898   	; 0x13ac <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     472:	ae e3       	ldi	r26, 0x3E	; 62
     474:	b1 e0       	ldi	r27, 0x01	; 1
     476:	e0 e3       	ldi	r30, 0x30	; 48
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	11 96       	adiw	r26, 0x01	; 1
     47c:	fc 93       	st	X, r31
     47e:	ee 93       	st	-X, r30
					stdout = Stream;
     480:	13 96       	adiw	r26, 0x03	; 3
     482:	fc 93       	st	X, r31
     484:	ee 93       	st	-X, r30
     486:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     488:	8e e0       	ldi	r24, 0x0E	; 14
     48a:	df 01       	movw	r26, r30
     48c:	1d 92       	st	X+, r1
     48e:	8a 95       	dec	r24
     490:	e9 f7       	brne	.-6      	; 0x48c <SetupHardware+0x76>
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	83 83       	std	Z+3, r24	; 0x03
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	9d e0       	ldi	r25, 0x0D	; 13
     49a:	91 87       	std	Z+9, r25	; 0x09
     49c:	80 87       	std	Z+8, r24	; 0x08
     49e:	88 e1       	ldi	r24, 0x18	; 24
     4a0:	9d e0       	ldi	r25, 0x0D	; 13
     4a2:	93 87       	std	Z+11, r25	; 0x0b
     4a4:	82 87       	std	Z+10, r24	; 0x0a
     4a6:	08 95       	ret

000004a8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     4a8:	8c e8       	ldi	r24, 0x8C	; 140
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b0:	80 ea       	ldi	r24, 0xA0	; 160
     4b2:	ac cf       	rjmp	.-168    	; 0x40c <LEDs_SetAllLEDs>

000004b4 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     4b4:	8b e6       	ldi	r24, 0x6B	; 107
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	a6 cf       	rjmp	.-180    	; 0x40c <LEDs_SetAllLEDs>

000004c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	2a 97       	sbiw	r28, 0x0a	; 10
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     4d6:	84 e5       	ldi	r24, 0x54	; 84
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     4de:	a8 d1       	rcall	.+848    	; 0x830 <ProcessConfigurationDescriptor>
     4e0:	18 2f       	mov	r17, r24
     4e2:	88 23       	and	r24, r24
     4e4:	a1 f0       	breq	.+40     	; 0x50e <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
	{
		if (ErrorCode == ControlError)
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     4ea:	8a e2       	ldi	r24, 0x2A	; 42
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4f0:	83 e1       	ldi	r24, 0x13	; 19
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4f8:	1f 92       	push	r1
     4fa:	1f 93       	push	r17
     4fc:	89 ef       	ldi	r24, 0xF9	; 249
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     508:	80 e9       	ldi	r24, 0x90	; 144
     50a:	80 df       	rcall	.-256    	; 0x40c <LEDs_SetAllLEDs>
     50c:	57 c0       	rjmp	.+174    	; 0x5bc <EVENT_USB_Host_DeviceEnumerationComplete+0xfc>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Host_SetDeviceConfiguration>
     514:	88 23       	and	r24, r24
     516:	29 f0       	breq	.+10     	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     518:	1f 92       	push	r1
     51a:	8f 93       	push	r24
     51c:	86 eb       	ldi	r24, 0xB6	; 182
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	ef cf       	rjmp	.-34     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint16_t DeviceMaxPacketSize;
	if ((ErrorCode = RNDIS_InitializeDevice(1024, &DeviceMaxPacketSize)) != HOST_SENDCONTROL_Successful)
     522:	be 01       	movw	r22, r28
     524:	67 5f       	subi	r22, 0xF7	; 247
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	94 e0       	ldi	r25, 0x04	; 4
     52c:	6a d2       	rcall	.+1236   	; 0xa02 <RNDIS_InitializeDevice>
     52e:	88 23       	and	r24, r24
     530:	29 f0       	breq	.+10     	; 0x53c <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
	{
		printf_P(PSTR(ESC_FG_RED "Error Initializing Device.\r\n"
     532:	1f 92       	push	r1
     534:	8f 93       	push	r24
     536:	8b e7       	ldi	r24, 0x7B	; 123
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	37 c0       	rjmp	.+110    	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), DeviceMaxPacketSize);
     53c:	8a 85       	ldd	r24, Y+10	; 0x0a
     53e:	8f 93       	push	r24
     540:	89 85       	ldd	r24, Y+9	; 0x09
     542:	8f 93       	push	r24
     544:	84 e5       	ldi	r24, 0x54	; 84
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>

	/* We set the default filter to only receive packets we would be interested in */
	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     550:	8d e0       	ldi	r24, 0x0D	; 13
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	8d 83       	std	Y+5, r24	; 0x05
     55a:	9e 83       	std	Y+6, r25	; 0x06
     55c:	af 83       	std	Y+7, r26	; 0x07
     55e:	b8 87       	std	Y+8, r27	; 0x08
	if ((ErrorCode = RNDIS_SetRNDISProperty(OID_GEN_CURRENT_PACKET_FILTER,
     560:	24 e0       	ldi	r18, 0x04	; 4
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	ae 01       	movw	r20, r28
     566:	4b 5f       	subi	r20, 0xFB	; 251
     568:	5f 4f       	sbci	r21, 0xFF	; 255
     56a:	6e e0       	ldi	r22, 0x0E	; 14
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	cc d2       	rcall	.+1432   	; 0xb0c <RNDIS_SetRNDISProperty>
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	88 23       	and	r24, r24
     57e:	29 f0       	breq	.+10     	; 0x58a <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
	                                        &PacketFilter, sizeof(PacketFilter))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Setting Device Packet Filter.\r\n"
     580:	1f 92       	push	r1
     582:	8f 93       	push	r24
     584:	80 e1       	ldi	r24, 0x10	; 16
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	10 c0       	rjmp	.+32     	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if ((ErrorCode = RNDIS_QueryRNDISProperty(OID_GEN_VENDOR_ID,
     58a:	24 e0       	ldi	r18, 0x04	; 4
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	6c e0       	ldi	r22, 0x0C	; 12
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	5b d3       	rcall	.+1718   	; 0xc54 <RNDIS_QueryRNDISProperty>
     59e:	88 23       	and	r24, r24
     5a0:	91 f0       	breq	.+36     	; 0x5c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
	                                          &VendorID, sizeof(VendorID))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Getting Vendor ID.\r\n"
     5a2:	1f 92       	push	r1
     5a4:	8f 93       	push	r24
     5a6:	87 ed       	ldi	r24, 0xD7	; 215
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5b2:	80 e9       	ldi	r24, 0x90	; 144
     5b4:	2b df       	rcall	.-426    	; 0x40c <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Host_SetDeviceConfiguration>
		return;
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	1a c0       	rjmp	.+52     	; 0x5fa <EVENT_USB_Host_DeviceEnumerationComplete+0x13a>
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	8f 93       	push	r24
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	8f 93       	push	r24
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	8f 93       	push	r24
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	8f 93       	push	r24
     5d6:	8b eb       	ldi	r24, 0xBB	; 187
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     5e2:	80 ea       	ldi	r24, 0xA0	; 160
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5ea:	80 e6       	ldi	r24, 0x60	; 96
     5ec:	0f df       	rcall	.-482    	; 0x40c <LEDs_SetAllLEDs>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
}
     5fa:	2a 96       	adiw	r28, 0x0a	; 10
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	08 95       	ret

0000060e <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     60e:	c8 2f       	mov	r28, r24
	USB_Disable();
     610:	65 d6       	rcall	.+3274   	; 0x12dc <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     612:	1f 92       	push	r1
     614:	cf 93       	push	r28
     616:	81 e7       	ldi	r24, 0x71	; 113
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     622:	80 e9       	ldi	r24, 0x90	; 144
     624:	f3 de       	rcall	.-538    	; 0x40c <LEDs_SetAllLEDs>
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	ff cf       	rjmp	.-2      	; 0x62e <EVENT_USB_Host_HostError+0x20>

00000630 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     630:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_HostState>
     634:	1f 92       	push	r1
     636:	9f 93       	push	r25
     638:	1f 92       	push	r1
     63a:	6f 93       	push	r22
     63c:	1f 92       	push	r1
     63e:	8f 93       	push	r24
     640:	8b e1       	ldi	r24, 0x1B	; 27
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     64c:	8d b7       	in	r24, 0x3d	; 61
     64e:	9e b7       	in	r25, 0x3e	; 62
     650:	08 96       	adiw	r24, 0x08	; 8
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	9e bf       	out	0x3e, r25	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	8d bf       	out	0x3d, r24	; 61
     65c:	80 e9       	ldi	r24, 0x90	; 144
     65e:	d6 ce       	rjmp	.-596    	; 0x40c <LEDs_SetAllLEDs>

00000660 <RNDISHost_Task>:
}

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
     660:	8f 92       	push	r8
     662:	9f 92       	push	r9
     664:	af 92       	push	r10
     666:	bf 92       	push	r11
     668:	cf 92       	push	r12
     66a:	df 92       	push	r13
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	00 d0       	rcall	.+0      	; 0x67a <RNDISHost_Task+0x1a>
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
	Pipe_Freeze();

	printf("\r\n\r\n");

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     67e:	ed b6       	in	r14, 0x3d	; 61
     680:	fe b6       	in	r15, 0x3e	; 62

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     682:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_HostState>
     686:	8b 30       	cpi	r24, 0x0B	; 11
     688:	09 f0       	breq	.+2      	; 0x68c <RNDISHost_Task+0x2c>
     68a:	7f c0       	rjmp	.+254    	; 0x78a <RNDISHost_Task+0x12a>
	  return;

	uint8_t ErrorCode;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	be de       	rcall	.-644    	; 0x40c <LEDs_SetAllLEDs>

	uint16_t PacketLength;
	if ((ErrorCode = RNDIS_GetPacketLength(&PacketLength)) != HOST_SENDCONTROL_Successful)
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	82 d3       	rcall	.+1796   	; 0xd9a <RNDIS_GetPacketLength>
     696:	88 23       	and	r24, r24
     698:	69 f0       	breq	.+26     	; 0x6b4 <RNDISHost_Task+0x54>
	{
		printf_P(PSTR(ESC_FG_RED "Packet Reception Error.\r\n"
     69a:	1f 92       	push	r1
     69c:	8f 93       	push	r24
     69e:	83 ee       	ldi	r24, 0xE3	; 227
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
		return;
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	6b c0       	rjmp	.+214    	; 0x78a <RNDISHost_Task+0x12a>
	}

	if (!(PacketLength))
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	89 2b       	or	r24, r25
     6ba:	09 f4       	brne	.+2      	; 0x6be <RNDISHost_Task+0x5e>
     6bc:	66 c0       	rjmp	.+204    	; 0x78a <RNDISHost_Task+0x12a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     6be:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     6c2:	8f 7b       	andi	r24, 0xBF	; 191
     6c4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  return;

	Pipe_Unfreeze();

	printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	8f 93       	push	r24
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	8f 93       	push	r24
     6d0:	8a ec       	ldi	r24, 0xCA	; 202
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <printf_P>

	if (PacketLength > 1024)
     6dc:	69 81       	ldd	r22, Y+1	; 0x01
     6de:	7a 81       	ldd	r23, Y+2	; 0x02
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	61 30       	cpi	r22, 0x01	; 1
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	78 07       	cpc	r23, r24
     6ee:	50 f0       	brcs	.+20     	; 0x704 <RNDISHost_Task+0xa4>
	{
		puts_P(PSTR(ESC_FG_RED "Packet too large.\r\n" ESC_FG_WHITE));
     6f0:	8c ea       	ldi	r24, 0xAC	; 172
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>
		Pipe_Discard_Stream(PacketLength, NULL);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	ff d6       	rcall	.+3582   	; 0x1500 <Pipe_Discard_Stream>
     702:	33 c0       	rjmp	.+102    	; 0x76a <RNDISHost_Task+0x10a>
	}
	else
	{
     704:	8d b6       	in	r8, 0x3d	; 61
     706:	9e b6       	in	r9, 0x3e	; 62
		uint8_t PacketBuffer[PacketLength];
     708:	ed b7       	in	r30, 0x3d	; 61
     70a:	fe b7       	in	r31, 0x3e	; 62
     70c:	e6 1b       	sub	r30, r22
     70e:	f7 0b       	sbc	r31, r23
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	fe bf       	out	0x3e, r31	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	ed bf       	out	0x3d, r30	; 61
     71a:	0d b7       	in	r16, 0x3d	; 61
     71c:	1e b7       	in	r17, 0x3e	; 62
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	c8 01       	movw	r24, r16
     728:	30 d7       	rcall	.+3680   	; 0x158a <Pipe_Read_Stream_LE>

		for (uint16_t i = 0; i < PacketLength; i++)
     72a:	68 01       	movw	r12, r16
		  printf("0x%02x ", PacketBuffer[i]);
     72c:	81 e1       	ldi	r24, 0x11	; 17
     72e:	a8 2e       	mov	r10, r24
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	b8 2e       	mov	r11, r24
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     734:	29 81       	ldd	r18, Y+1	; 0x01
     736:	3a 81       	ldd	r19, Y+2	; 0x02
     738:	c6 01       	movw	r24, r12
     73a:	80 1b       	sub	r24, r16
     73c:	91 0b       	sbc	r25, r17
     73e:	82 17       	cp	r24, r18
     740:	93 07       	cpc	r25, r19
     742:	70 f4       	brcc	.+28     	; 0x760 <RNDISHost_Task+0x100>
		  printf("0x%02x ", PacketBuffer[i]);
     744:	f6 01       	movw	r30, r12
     746:	81 91       	ld	r24, Z+
     748:	6f 01       	movw	r12, r30
     74a:	1f 92       	push	r1
     74c:	8f 93       	push	r24
     74e:	bf 92       	push	r11
     750:	af 92       	push	r10
     752:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <printf>
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	ea cf       	rjmp	.-44     	; 0x734 <RNDISHost_Task+0xd4>
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	9e be       	out	0x3e, r9	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	8d be       	out	0x3d, r8	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     76a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     76e:	8e 77       	andi	r24, 0x7E	; 126
     770:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     774:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     778:	80 64       	ori	r24, 0x40	; 64
     77a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     77e:	89 e1       	ldi	r24, 0x19	; 25
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 76 0d 	call	0x1aec	; 0x1aec <puts>

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     786:	80 e6       	ldi	r24, 0x60	; 96
     788:	41 de       	rcall	.-894    	; 0x40c <LEDs_SetAllLEDs>
}
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	fe be       	out	0x3e, r15	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	ed be       	out	0x3d, r14	; 61
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	08 95       	ret

000007b2 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     7b2:	31 de       	rcall	.-926    	; 0x416 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     7b4:	89 ea       	ldi	r24, 0xA9	; 169
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     7bc:	80 e1       	ldi	r24, 0x10	; 16
     7be:	26 de       	rcall	.-948    	; 0x40c <LEDs_SetAllLEDs>
	sei();
     7c0:	78 94       	sei

	for (;;)
	{
		RNDISHost_Task();
     7c2:	4e df       	rcall	.-356    	; 0x660 <RNDISHost_Task>
     7c4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <USB_USBTask>

		USB_USBTask();
     7c8:	fc cf       	rjmp	.-8      	; 0x7c2 <main+0x10>

000007ca <DComp_NextCDCControlInterface>:
     7ca:	fc 01       	movw	r30, r24
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     7cc:	81 81       	ldd	r24, Z+1	; 0x01
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	59 f4       	brne	.+22     	; 0x7e8 <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     7d2:	85 81       	ldd	r24, Z+5	; 0x05
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	41 f4       	brne	.+16     	; 0x7e8 <DComp_NextCDCControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     7d8:	86 81       	ldd	r24, Z+6	; 0x06
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <DComp_NextCDCControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     7de:	97 81       	ldd	r25, Z+7	; 0x07
     7e0:	9f 3f       	cpi	r25, 0xFF	; 255
     7e2:	19 f4       	brne	.+6      	; 0x7ea <DComp_NextCDCControlInterface+0x20>
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     7e8:	82 e0       	ldi	r24, 0x02	; 2
}
     7ea:	08 95       	ret

000007ec <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     7ec:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     7ee:	81 81       	ldd	r24, Z+1	; 0x01
     7f0:	84 30       	cpi	r24, 0x04	; 4
     7f2:	51 f4       	brne	.+20     	; 0x808 <DComp_NextCDCDataInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     7f4:	85 81       	ldd	r24, Z+5	; 0x05
     7f6:	8a 30       	cpi	r24, 0x0A	; 10
     7f8:	39 f4       	brne	.+14     	; 0x808 <DComp_NextCDCDataInterface+0x1c>
     7fa:	86 81       	ldd	r24, Z+6	; 0x06
     7fc:	81 11       	cpse	r24, r1
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <DComp_NextCDCDataInterface+0x1c>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
     800:	87 81       	ldd	r24, Z+7	; 0x07
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     802:	81 11       	cpse	r24, r1
     804:	01 c0       	rjmp	.+2      	; 0x808 <DComp_NextCDCDataInterface+0x1c>
     806:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     808:	82 e0       	ldi	r24, 0x02	; 2
}
     80a:	08 95       	ret

0000080c <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     80c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	95 30       	cpi	r25, 0x05	; 5
     812:	41 f4       	brne	.+16     	; 0x824 <DComp_NextCDCDataInterfaceEndpoint+0x18>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     814:	83 81       	ldd	r24, Z+3	; 0x03
     816:	83 70       	andi	r24, 0x03	; 3
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	02 97       	sbiw	r24, 0x02	; 2
     81c:	02 97       	sbiw	r24, 0x02	; 2
     81e:	30 f4       	brcc	.+12     	; 0x82c <DComp_NextCDCDataInterfaceEndpoint+0x20>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
     824:	94 30       	cpi	r25, 0x04	; 4
     826:	11 f4       	brne	.+4      	; 0x82c <DComp_NextCDCDataInterfaceEndpoint+0x20>
	{
		return DESCRIPTOR_SEARCH_Fail;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     82c:	82 e0       	ldi	r24, 0x02	; 2
}
     82e:	08 95       	ret

00000830 <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	c4 50       	subi	r28, 0x04	; 4
     84e:	d2 40       	sbci	r29, 0x02	; 2
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     85a:	ae 01       	movw	r20, r28
     85c:	4f 5f       	subi	r20, 0xFF	; 255
     85e:	5f 4f       	sbci	r21, 0xFF	; 255
     860:	cd 5f       	subi	r28, 0xFD	; 253
     862:	dd 4f       	sbci	r29, 0xFD	; 253
     864:	59 83       	std	Y+1, r21	; 0x01
     866:	48 83       	st	Y, r20
     868:	c3 50       	subi	r28, 0x03	; 3
     86a:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	32 e0       	ldi	r19, 0x02	; 2
     870:	be 01       	movw	r22, r28
     872:	6f 5f       	subi	r22, 0xFF	; 255
     874:	7d 4f       	sbci	r23, 0xFD	; 253
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	f5 d6       	rcall	.+3562   	; 0x1664 <USB_Host_GetDeviceConfigDescriptor>
     87a:	f8 2e       	mov	r15, r24
     87c:	85 e0       	ldi	r24, 0x05	; 5
     87e:	f8 16       	cp	r15, r24
     880:	79 f0       	breq	.+30     	; 0x8a0 <ProcessConfigurationDescriptor+0x70>
     882:	e6 e0       	ldi	r30, 0x06	; 6
     884:	fe 16       	cp	r15, r30
     886:	09 f4       	brne	.+2      	; 0x88a <ProcessConfigurationDescriptor+0x5a>
     888:	88 c0       	rjmp	.+272    	; 0x99a <ProcessConfigurationDescriptor+0x16a>
     88a:	f1 10       	cpse	r15, r1
     88c:	0c c0       	rjmp	.+24     	; 0x8a6 <ProcessConfigurationDescriptor+0x76>
     88e:	c1 2c       	mov	r12, r1
     890:	d1 2c       	mov	r13, r1
     892:	81 2c       	mov	r8, r1
     894:	91 2c       	mov	r9, r1
     896:	a1 2c       	mov	r10, r1
     898:	b1 2c       	mov	r11, r1
     89a:	00 e0       	ldi	r16, 0x00	; 0
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	23 c0       	rjmp	.+70     	; 0x8e6 <ProcessConfigurationDescriptor+0xb6>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     8a0:	22 e0       	ldi	r18, 0x02	; 2
     8a2:	f2 2e       	mov	r15, r18
     8a4:	7c c0       	rjmp	.+248    	; 0x99e <ProcessConfigurationDescriptor+0x16e>
		default:
			return ControlError;
     8a6:	ff 24       	eor	r15, r15
     8a8:	f3 94       	inc	r15
     8aa:	79 c0       	rjmp	.+242    	; 0x99e <ProcessConfigurationDescriptor+0x16e>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     8ac:	81 14       	cp	r8, r1
     8ae:	91 04       	cpc	r9, r1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <ProcessConfigurationDescriptor+0x84>
     8b2:	52 c0       	rjmp	.+164    	; 0x958 <ProcessConfigurationDescriptor+0x128>
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     8b4:	01 15       	cp	r16, r1
     8b6:	11 05       	cpc	r17, r1
     8b8:	e9 f4       	brne	.+58     	; 0x8f4 <ProcessConfigurationDescriptor+0xc4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     8ba:	c1 14       	cp	r12, r1
     8bc:	d1 04       	cpc	r13, r1
     8be:	31 f5       	brne	.+76     	; 0x90c <ProcessConfigurationDescriptor+0xdc>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     8c0:	45 ee       	ldi	r20, 0xE5	; 229
     8c2:	53 e0       	ldi	r21, 0x03	; 3
     8c4:	be 01       	movw	r22, r28
     8c6:	6d 5f       	subi	r22, 0xFD	; 253
     8c8:	7d 4f       	sbci	r23, 0xFD	; 253
     8ca:	ce 01       	movw	r24, r28
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	9d 4f       	sbci	r25, 0xFD	; 253
     8d0:	22 d7       	rcall	.+3652   	; 0x1716 <USB_GetNextDescriptorComp>
     8d2:	81 11       	cpse	r24, r1
     8d4:	26 c0       	rjmp	.+76     	; 0x922 <ProcessConfigurationDescriptor+0xf2>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     8d6:	cd 5f       	subi	r28, 0xFD	; 253
     8d8:	dd 4f       	sbci	r29, 0xFD	; 253
     8da:	08 81       	ld	r16, Y
     8dc:	19 81       	ldd	r17, Y+1	; 0x01
     8de:	c3 50       	subi	r28, 0x03	; 3
     8e0:	d2 40       	sbci	r29, 0x02	; 2

				/* Clear any found endpoints */
				NotificationEndpoint = NULL;
     8e2:	c1 2c       	mov	r12, r1
     8e4:	d1 2c       	mov	r13, r1
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     8e6:	a1 14       	cp	r10, r1
     8e8:	b1 04       	cpc	r11, r1
     8ea:	01 f7       	brne	.-64     	; 0x8ac <ProcessConfigurationDescriptor+0x7c>
     8ec:	e3 cf       	rjmp	.-58     	; 0x8b4 <ProcessConfigurationDescriptor+0x84>
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     8ee:	01 15       	cp	r16, r1
     8f0:	11 05       	cpc	r17, r1
     8f2:	31 f3       	breq	.-52     	; 0x8c0 <ProcessConfigurationDescriptor+0x90>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     8f4:	46 e0       	ldi	r20, 0x06	; 6
     8f6:	54 e0       	ldi	r21, 0x04	; 4
     8f8:	be 01       	movw	r22, r28
     8fa:	6d 5f       	subi	r22, 0xFD	; 253
     8fc:	7d 4f       	sbci	r23, 0xFD	; 253
     8fe:	ce 01       	movw	r24, r28
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	9d 4f       	sbci	r25, 0xFD	; 253
     904:	08 d7       	rcall	.+3600   	; 0x1716 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     906:	81 11       	cpse	r24, r1
     908:	d8 cf       	rjmp	.-80     	; 0x8ba <ProcessConfigurationDescriptor+0x8a>
     90a:	0e c0       	rjmp	.+28     	; 0x928 <ProcessConfigurationDescriptor+0xf8>
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     90c:	46 ef       	ldi	r20, 0xF6	; 246
     90e:	53 e0       	ldi	r21, 0x03	; 3
     910:	be 01       	movw	r22, r28
     912:	6d 5f       	subi	r22, 0xFD	; 253
     914:	7d 4f       	sbci	r23, 0xFD	; 253
     916:	ce 01       	movw	r24, r28
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	9d 4f       	sbci	r25, 0xFD	; 253
     91c:	fc d6       	rcall	.+3576   	; 0x1716 <USB_GetNextDescriptorComp>
     91e:	88 23       	and	r24, r24
     920:	91 f0       	breq	.+36     	; 0x946 <ProcessConfigurationDescriptor+0x116>
											  DComp_NextCDCDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	f9 2e       	mov	r15, r25
     926:	3b c0       	rjmp	.+118    	; 0x99e <ProcessConfigurationDescriptor+0x16e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     928:	cd 5f       	subi	r28, 0xFD	; 253
     92a:	dd 4f       	sbci	r29, 0xFD	; 253
     92c:	e8 81       	ld	r30, Y
     92e:	f9 81       	ldd	r31, Y+1	; 0x01
     930:	c3 50       	subi	r28, 0x03	; 3
     932:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     934:	82 81       	ldd	r24, Z+2	; 0x02
     936:	87 ff       	sbrs	r24, 7
     938:	0b c0       	rjmp	.+22     	; 0x950 <ProcessConfigurationDescriptor+0x120>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     93a:	83 81       	ldd	r24, Z+3	; 0x03
     93c:	83 70       	andi	r24, 0x03	; 3
     93e:	83 30       	cpi	r24, 0x03	; 3
     940:	49 f0       	breq	.+18     	; 0x954 <ProcessConfigurationDescriptor+0x124>
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     942:	5f 01       	movw	r10, r30
     944:	d0 cf       	rjmp	.-96     	; 0x8e6 <ProcessConfigurationDescriptor+0xb6>
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
				DataOUTEndpoint      = NULL;
     946:	81 2c       	mov	r8, r1
     948:	91 2c       	mov	r9, r1
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
     94a:	a1 2c       	mov	r10, r1
     94c:	b1 2c       	mov	r11, r1
     94e:	cb cf       	rjmp	.-106    	; 0x8e6 <ProcessConfigurationDescriptor+0xb6>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     950:	4f 01       	movw	r8, r30
     952:	c9 cf       	rjmp	.-110    	; 0x8e6 <ProcessConfigurationDescriptor+0xb6>
		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
     954:	6f 01       	movw	r12, r30
     956:	c7 cf       	rjmp	.-114    	; 0x8e6 <ProcessConfigurationDescriptor+0xb6>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     958:	c1 14       	cp	r12, r1
     95a:	d1 04       	cpc	r13, r1
     95c:	41 f2       	breq	.-112    	; 0x8ee <ProcessConfigurationDescriptor+0xbe>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     95e:	f5 01       	movw	r30, r10
     960:	04 81       	ldd	r16, Z+4	; 0x04
     962:	15 81       	ldd	r17, Z+5	; 0x05
     964:	e1 2c       	mov	r14, r1
     966:	22 81       	ldd	r18, Z+2	; 0x02
     968:	40 e1       	ldi	r20, 0x10	; 16
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	18 d4       	rcall	.+2096   	; 0x11a0 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     970:	f4 01       	movw	r30, r8
     972:	04 81       	ldd	r16, Z+4	; 0x04
     974:	15 81       	ldd	r17, Z+5	; 0x05
     976:	22 81       	ldd	r18, Z+2	; 0x02
     978:	40 e2       	ldi	r20, 0x20	; 32
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	10 d4       	rcall	.+2080   	; 0x11a0 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     980:	f6 01       	movw	r30, r12
     982:	04 81       	ldd	r16, Z+4	; 0x04
     984:	15 81       	ldd	r17, Z+5	; 0x05
     986:	22 81       	ldd	r18, Z+2	; 0x02
     988:	40 e1       	ldi	r20, 0x10	; 16
     98a:	63 e0       	ldi	r22, 0x03	; 3
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	08 d4       	rcall	.+2064   	; 0x11a0 <Pipe_ConfigurePipe>
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     990:	f6 01       	movw	r30, r12
     992:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     994:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     998:	02 c0       	rjmp	.+4      	; 0x99e <ProcessConfigurationDescriptor+0x16e>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	f8 2e       	mov	r15, r24
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     99e:	8f 2d       	mov	r24, r15
     9a0:	cc 5f       	subi	r28, 0xFC	; 252
     9a2:	dd 4f       	sbci	r29, 0xFD	; 253
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	08 95       	ret

000009c8 <RNDIS_SendEncapsulatedCommand>:
	{
		return ErrorCode;
	}

	return HOST_SENDCONTROL_Successful;
}
     9c8:	e7 e2       	ldi	r30, 0x27	; 39
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	21 e2       	ldi	r18, 0x21	; 33
     9ce:	20 83       	st	Z, r18
     9d0:	11 82       	std	Z+1, r1	; 0x01
     9d2:	13 82       	std	Z+3, r1	; 0x03
     9d4:	12 82       	std	Z+2, r1	; 0x02
     9d6:	15 82       	std	Z+5, r1	; 0x05
     9d8:	14 82       	std	Z+4, r1	; 0x04
     9da:	77 83       	std	Z+7, r23	; 0x07
     9dc:	66 83       	std	Z+6, r22	; 0x06
     9de:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     9e2:	f2 c6       	rjmp	.+3556   	; 0x17c8 <USB_Host_SendControlRequest>

000009e4 <RNDIS_GetEncapsulatedResponse>:
     9e4:	e7 e2       	ldi	r30, 0x27	; 39
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	21 ea       	ldi	r18, 0xA1	; 161
     9ea:	20 83       	st	Z, r18
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	21 83       	std	Z+1, r18	; 0x01
     9f0:	13 82       	std	Z+3, r1	; 0x03
     9f2:	12 82       	std	Z+2, r1	; 0x02
     9f4:	15 82       	std	Z+5, r1	; 0x05
     9f6:	14 82       	std	Z+4, r1	; 0x04
     9f8:	77 83       	std	Z+7, r23	; 0x07
     9fa:	66 83       	std	Z+6, r22	; 0x06
     9fc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     a00:	e3 c6       	rjmp	.+3526   	; 0x17c8 <USB_Host_SendControlRequest>

00000a02 <RNDIS_InitializeDevice>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	cc 54       	subi	r28, 0x4C	; 76
     a18:	d1 09       	sbc	r29, r1
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     a26:	42 e0       	ldi	r20, 0x02	; 2
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	4d ab       	std	Y+53, r20	; 0x35
     a30:	5e ab       	std	Y+54, r21	; 0x36
     a32:	6f ab       	std	Y+55, r22	; 0x37
     a34:	78 af       	std	Y+56, r23	; 0x38
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     a36:	48 e1       	ldi	r20, 0x18	; 24
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	49 af       	std	Y+57, r20	; 0x39
     a40:	5a af       	std	Y+58, r21	; 0x3a
     a42:	6b af       	std	Y+59, r22	; 0x3b
     a44:	7c af       	std	Y+60, r23	; 0x3c
	InitMessage.RequestId       = RequestID++;
     a46:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_end>
     a4a:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_end+0x1>
     a4e:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end+0x2>
     a52:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x3>
     a56:	6a 01       	movw	r12, r20
     a58:	7b 01       	movw	r14, r22
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	c2 1a       	sub	r12, r18
     a5e:	d2 0a       	sbc	r13, r18
     a60:	e2 0a       	sbc	r14, r18
     a62:	f2 0a       	sbc	r15, r18
     a64:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <__data_end>
     a68:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <__data_end+0x1>
     a6c:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <__data_end+0x2>
     a70:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <__data_end+0x3>
     a74:	21 96       	adiw	r28, 0x01	; 1
     a76:	4c af       	std	Y+60, r20	; 0x3c
     a78:	5d af       	std	Y+61, r21	; 0x3d
     a7a:	6e af       	std	Y+62, r22	; 0x3e
     a7c:	7f af       	std	Y+63, r23	; 0x3f
     a7e:	21 97       	sbiw	r28, 0x01	; 1

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	25 96       	adiw	r28, 0x05	; 5
     a8a:	4c af       	std	Y+60, r20	; 0x3c
     a8c:	5d af       	std	Y+61, r21	; 0x3d
     a8e:	6e af       	std	Y+62, r22	; 0x3e
     a90:	7f af       	std	Y+63, r23	; 0x3f
     a92:	25 97       	sbiw	r28, 0x05	; 5
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     a94:	29 96       	adiw	r28, 0x09	; 9
     a96:	1c ae       	std	Y+60, r1	; 0x3c
     a98:	1d ae       	std	Y+61, r1	; 0x3d
     a9a:	1e ae       	std	Y+62, r1	; 0x3e
     a9c:	1f ae       	std	Y+63, r1	; 0x3f
     a9e:	29 97       	sbiw	r28, 0x09	; 9
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	2d 96       	adiw	r28, 0x0d	; 13
     aa6:	8c af       	std	Y+60, r24	; 0x3c
     aa8:	9d af       	std	Y+61, r25	; 0x3d
     aaa:	ae af       	std	Y+62, r26	; 0x3e
     aac:	bf af       	std	Y+63, r27	; 0x3f
     aae:	2d 97       	sbiw	r28, 0x0d	; 13

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     ab0:	68 e1       	ldi	r22, 0x18	; 24
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	ce 01       	movw	r24, r28
     ab6:	c5 96       	adiw	r24, 0x35	; 53
     ab8:	87 df       	rcall	.-242    	; 0x9c8 <RNDIS_SendEncapsulatedCommand>
     aba:	81 11       	cpse	r24, r1
     abc:	17 c0       	rjmp	.+46     	; 0xaec <RNDIS_InitializeDevice+0xea>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     abe:	64 e3       	ldi	r22, 0x34	; 52
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	8e df       	rcall	.-228    	; 0x9e4 <RNDIS_GetEncapsulatedResponse>
     ac8:	81 11       	cpse	r24, r1
     aca:	10 c0       	rjmp	.+32     	; 0xaec <RNDIS_InitializeDevice+0xea>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     acc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ace:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad0:	af 85       	ldd	r26, Y+15	; 0x0f
     ad2:	b8 89       	ldd	r27, Y+16	; 0x10
     ad4:	89 2b       	or	r24, r25
     ad6:	8a 2b       	or	r24, r26
     ad8:	8b 2b       	or	r24, r27
     ada:	39 f4       	brne	.+14     	; 0xaea <RNDIS_InitializeDevice+0xe8>
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     adc:	8d a1       	ldd	r24, Y+37	; 0x25
     ade:	9e a1       	ldd	r25, Y+38	; 0x26
     ae0:	f8 01       	movw	r30, r16
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24

	return HOST_SENDCONTROL_Successful;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <RNDIS_InitializeDevice+0xea>
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     aea:	80 ec       	ldi	r24, 0xC0	; 192

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;

	return HOST_SENDCONTROL_Successful;
}
     aec:	c4 5b       	subi	r28, 0xB4	; 180
     aee:	df 4f       	sbci	r29, 0xFF	; 255
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	08 95       	ret

00000b0c <RNDIS_SetRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	60 97       	sbiw	r28, 0x10	; 16
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	4b 01       	movw	r8, r22
     b3a:	5c 01       	movw	r10, r24
     b3c:	3a 01       	movw	r6, r20

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     b3e:	cd b6       	in	r12, 0x3d	; 61
     b40:	de b6       	in	r13, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     b42:	79 01       	movw	r14, r18
     b44:	8c e1       	ldi	r24, 0x1C	; 28
     b46:	e8 0e       	add	r14, r24
     b48:	f1 1c       	adc	r15, r1
     b4a:	ed b7       	in	r30, 0x3d	; 61
     b4c:	fe b7       	in	r31, 0x3e	; 62
     b4e:	ee 19       	sub	r30, r14
     b50:	ff 09       	sbc	r31, r15
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	fe bf       	out	0x3e, r31	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	ed bf       	out	0x3d, r30	; 61
     b5c:	0d b7       	in	r16, 0x3d	; 61
     b5e:	1e b7       	in	r17, 0x3e	; 62
     b60:	0f 5f       	subi	r16, 0xFF	; 255
     b62:	1f 4f       	sbci	r17, 0xFF	; 255

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	81 83       	std	Z+1, r24	; 0x01
     b6e:	92 83       	std	Z+2, r25	; 0x02
     b70:	a3 83       	std	Z+3, r26	; 0x03
     b72:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     b74:	c7 01       	movw	r24, r14
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	f8 01       	movw	r30, r16
     b7c:	84 83       	std	Z+4, r24	; 0x04
     b7e:	95 83       	std	Z+5, r25	; 0x05
     b80:	a6 83       	std	Z+6, r26	; 0x06
     b82:	b7 83       	std	Z+7, r27	; 0x07
	SetMessageData.SetMessage.RequestId      = RequestID++;
     b84:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     b88:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     b8c:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <__data_end+0x2>
     b90:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <__data_end+0x3>
     b94:	ac 01       	movw	r20, r24
     b96:	bd 01       	movw	r22, r26
     b98:	4f 5f       	subi	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	6f 4f       	sbci	r22, 0xFF	; 255
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <__data_end>
     ba4:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <__data_end+0x1>
     ba8:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <__data_end+0x2>
     bac:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <__data_end+0x3>
     bb0:	80 87       	std	Z+8, r24	; 0x08
     bb2:	91 87       	std	Z+9, r25	; 0x09
     bb4:	a2 87       	std	Z+10, r26	; 0x0a
     bb6:	b3 87       	std	Z+11, r27	; 0x0b

	SetMessageData.SetMessage.Oid            = Oid;
     bb8:	84 86       	std	Z+12, r8	; 0x0c
     bba:	95 86       	std	Z+13, r9	; 0x0d
     bbc:	a6 86       	std	Z+14, r10	; 0x0e
     bbe:	b7 86       	std	Z+15, r11	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
     bc0:	c9 01       	movw	r24, r18
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	80 8b       	std	Z+16, r24	; 0x10
     bc8:	91 8b       	std	Z+17, r25	; 0x11
     bca:	a2 8b       	std	Z+18, r26	; 0x12
     bcc:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	84 8b       	std	Z+20, r24	; 0x14
     bd8:	95 8b       	std	Z+21, r25	; 0x15
     bda:	a6 8b       	std	Z+22, r26	; 0x16
     bdc:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     bde:	10 8e       	std	Z+24, r1	; 0x18
     be0:	11 8e       	std	Z+25, r1	; 0x19
     be2:	12 8e       	std	Z+26, r1	; 0x1a
     be4:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
     be6:	8d b7       	in	r24, 0x3d	; 61
     be8:	9e b7       	in	r25, 0x3e	; 62
     bea:	4d 96       	adiw	r24, 0x1d	; 29
     bec:	a9 01       	movw	r20, r18
     bee:	b3 01       	movw	r22, r6
     bf0:	3a d7       	rcall	.+3700   	; 0x1a66 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     bf2:	b7 01       	movw	r22, r14
     bf4:	c8 01       	movw	r24, r16
     bf6:	e8 de       	rcall	.-560    	; 0x9c8 <RNDIS_SendEncapsulatedCommand>
     bf8:	81 11       	cpse	r24, r1
     bfa:	12 c0       	rjmp	.+36     	; 0xc20 <RNDIS_SetRNDISProperty+0x114>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     bfc:	60 e1       	ldi	r22, 0x10	; 16
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	ef de       	rcall	.-546    	; 0x9e4 <RNDIS_GetEncapsulatedResponse>
     c06:	81 11       	cpse	r24, r1
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <RNDIS_SetRNDISProperty+0x114>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0e:	af 85       	ldd	r26, Y+15	; 0x0f
     c10:	b8 89       	ldd	r27, Y+16	; 0x10
     c12:	89 2b       	or	r24, r25
     c14:	8a 2b       	or	r24, r26
     c16:	8b 2b       	or	r24, r27
     c18:	11 f4       	brne	.+4      	; 0xc1e <RNDIS_SetRNDISProperty+0x112>
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <RNDIS_SetRNDISProperty+0x114>
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     c1e:	80 ec       	ldi	r24, 0xC0	; 192

	return HOST_SENDCONTROL_Successful;
}
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de be       	out	0x3e, r13	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd be       	out	0x3d, r12	; 61
     c2a:	60 96       	adiw	r28, 0x10	; 16
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	08 95       	ret

00000c54 <RNDIS_QueryRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     c54:	4f 92       	push	r4
     c56:	5f 92       	push	r5
     c58:	6f 92       	push	r6
     c5a:	7f 92       	push	r7
     c5c:	8f 92       	push	r8
     c5e:	9f 92       	push	r9
     c60:	af 92       	push	r10
     c62:	bf 92       	push	r11
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	6c 97       	sbiw	r28, 0x1c	; 28
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	2b 01       	movw	r4, r22
     c86:	3c 01       	movw	r6, r24
     c88:	4a 01       	movw	r8, r20
     c8a:	79 01       	movw	r14, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     c8c:	ad b6       	in	r10, 0x3d	; 61
     c8e:	be b6       	in	r11, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     c90:	69 01       	movw	r12, r18
     c92:	88 e1       	ldi	r24, 0x18	; 24
     c94:	c8 0e       	add	r12, r24
     c96:	d1 1c       	adc	r13, r1
     c98:	ed b7       	in	r30, 0x3d	; 61
     c9a:	fe b7       	in	r31, 0x3e	; 62
     c9c:	ec 19       	sub	r30, r12
     c9e:	fd 09       	sbc	r31, r13
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	fe bf       	out	0x3e, r31	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	ed bf       	out	0x3d, r30	; 61
     caa:	0d b7       	in	r16, 0x3d	; 61
     cac:	1e b7       	in	r17, 0x3e	; 62
     cae:	0f 5f       	subi	r16, 0xFF	; 255
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	ab 83       	std	Y+3, r26	; 0x03
     cc0:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     cc2:	8c e1       	ldi	r24, 0x1C	; 28
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a0 e0       	ldi	r26, 0x00	; 0
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	8d 83       	std	Y+5, r24	; 0x05
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	af 83       	std	Y+7, r26	; 0x07
     cd0:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = RequestID++;
     cd2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     cd6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     cda:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <__data_end+0x2>
     cde:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <__data_end+0x3>
     ce2:	ac 01       	movw	r20, r24
     ce4:	bd 01       	movw	r22, r26
     ce6:	4f 5f       	subi	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	6f 4f       	sbci	r22, 0xFF	; 255
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <__data_end>
     cf2:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <__data_end+0x1>
     cf6:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <__data_end+0x2>
     cfa:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <__data_end+0x3>
     cfe:	89 87       	std	Y+9, r24	; 0x09
     d00:	9a 87       	std	Y+10, r25	; 0x0a
     d02:	ab 87       	std	Y+11, r26	; 0x0b
     d04:	bc 87       	std	Y+12, r27	; 0x0c

	QueryMessage.Oid            = Oid;
     d06:	4d 86       	std	Y+13, r4	; 0x0d
     d08:	5e 86       	std	Y+14, r5	; 0x0e
     d0a:	6f 86       	std	Y+15, r6	; 0x0f
     d0c:	78 8a       	std	Y+16, r7	; 0x10
	QueryMessage.InformationBufferLength = 0;
     d0e:	19 8a       	std	Y+17, r1	; 0x11
     d10:	1a 8a       	std	Y+18, r1	; 0x12
     d12:	1b 8a       	std	Y+19, r1	; 0x13
     d14:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     d16:	1d 8a       	std	Y+21, r1	; 0x15
     d18:	1e 8a       	std	Y+22, r1	; 0x16
     d1a:	1f 8a       	std	Y+23, r1	; 0x17
     d1c:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     d1e:	19 8e       	std	Y+25, r1	; 0x19
     d20:	1a 8e       	std	Y+26, r1	; 0x1a
     d22:	1b 8e       	std	Y+27, r1	; 0x1b
     d24:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     d26:	6c e1       	ldi	r22, 0x1C	; 28
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	4c de       	rcall	.-872    	; 0x9c8 <RNDIS_SendEncapsulatedCommand>
     d30:	81 11       	cpse	r24, r1
     d32:	17 c0       	rjmp	.+46     	; 0xd62 <RNDIS_QueryRNDISProperty+0x10e>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     d34:	b6 01       	movw	r22, r12
     d36:	c8 01       	movw	r24, r16
     d38:	55 de       	rcall	.-854    	; 0x9e4 <RNDIS_GetEncapsulatedResponse>
     d3a:	81 11       	cpse	r24, r1
     d3c:	12 c0       	rjmp	.+36     	; 0xd62 <RNDIS_QueryRNDISProperty+0x10e>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     d3e:	f8 01       	movw	r30, r16
     d40:	84 85       	ldd	r24, Z+12	; 0x0c
     d42:	95 85       	ldd	r25, Z+13	; 0x0d
     d44:	a6 85       	ldd	r26, Z+14	; 0x0e
     d46:	b7 85       	ldd	r27, Z+15	; 0x0f
     d48:	89 2b       	or	r24, r25
     d4a:	8a 2b       	or	r24, r26
     d4c:	8b 2b       	or	r24, r27
     d4e:	41 f4       	brne	.+16     	; 0xd60 <RNDIS_QueryRNDISProperty+0x10c>
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     d50:	b8 01       	movw	r22, r16
     d52:	68 5e       	subi	r22, 0xE8	; 232
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	a7 01       	movw	r20, r14
     d58:	c4 01       	movw	r24, r8
     d5a:	85 d6       	rcall	.+3338   	; 0x1a66 <memcpy>

	return HOST_SENDCONTROL_Successful;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <RNDIS_QueryRNDISProperty+0x10e>
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     d60:	80 ec       	ldi	r24, 0xC0	; 192

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	be be       	out	0x3e, r11	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	ad be       	out	0x3d, r10	; 61
     d6c:	6c 96       	adiw	r28, 0x1c	; 28
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	7f 90       	pop	r7
     d92:	6f 90       	pop	r6
     d94:	5f 90       	pop	r5
     d96:	4f 90       	pop	r4
     d98:	08 95       	ret

00000d9a <RNDIS_GetPacketLength>:
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	ac 97       	sbiw	r28, 0x2c	; 44
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	fc 01       	movw	r30, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     dba:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     dbe:	9f 7c       	andi	r25, 0xCF	; 207
     dc0:	90 61       	ori	r25, 0x10	; 16
     dc2:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dc6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     dca:	8f 7b       	andi	r24, 0xBF	; 191
     dcc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     dd0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     dd4:	89 2f       	mov	r24, r25
     dd6:	80 72       	andi	r24, 0x20	; 32
     dd8:	95 fd       	sbrc	r25, 5
     dda:	08 c0       	rjmp	.+16     	; 0xdec <RNDIS_GetPacketLength+0x52>
	{
		*PacketLength = 0;
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     de0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     de4:	90 64       	ori	r25, 0x40	; 64
     de6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_Freeze();
		return PIPE_RWSTREAM_NoError;
     dea:	1b c0       	rjmp	.+54     	; 0xe22 <RNDIS_GetPacketLength+0x88>
     dec:	8f 01       	movw	r16, r30
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t), NULL)) != PIPE_RWSTREAM_NoError)
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	6c e2       	ldi	r22, 0x2C	; 44
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	c7 d3       	rcall	.+1934   	; 0x158a <Pipe_Read_Stream_LE>
     dfc:	81 11       	cpse	r24, r1
     dfe:	11 c0       	rjmp	.+34     	; 0xe22 <RNDIS_GetPacketLength+0x88>
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	f8 01       	movw	r30, r16
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	84 97       	sbiw	r24, 0x24	; 36
     e14:	75 d3       	rcall	.+1770   	; 0x1500 <Pipe_Discard_Stream>
     e16:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     e1a:	80 64       	ori	r24, 0x40	; 64
     e1c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	                    NULL);

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     e20:	80 e0       	ldi	r24, 0x00	; 0
}
     e22:	ac 96       	adiw	r28, 0x2c	; 44
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e38:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e3c:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e3e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     e42:	9d 7f       	andi	r25, 0xFD	; 253
     e44:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     e48:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e4c:	92 60       	ori	r25, 0x02	; 2
     e4e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     e52:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     e56:	91 fd       	sbrc	r25, 1
     e58:	fc cf       	rjmp	.-8      	; 0xe52 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e5a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e5e:	91 60       	ori	r25, 0x01	; 1
     e60:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     e64:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e68:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     e6c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e6e:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     e72:	2f 7d       	andi	r18, 0xDF	; 223
     e74:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e78:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e7c:	2f 7d       	andi	r18, 0xDF	; 223
     e7e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e82:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e84:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e88:	35 ff       	sbrs	r19, 5
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e8c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e90:	2f 7d       	andi	r18, 0xDF	; 223
     e92:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e96:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e9a:	2d 7f       	andi	r18, 0xFD	; 253
     e9c:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ea2:	ef ec       	ldi	r30, 0xCF	; 207
     ea4:	f7 e0       	ldi	r31, 0x07	; 7
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <USB_Host_ResetDevice+0x6e>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <USB_Host_ResetDevice+0x74>
     eac:	00 00       	nop
     eae:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     eb0:	49 f7       	brne	.-46     	; 0xe84 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     eb2:	99 23       	and	r25, r25
     eb4:	29 f0       	breq	.+10     	; 0xec0 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     eb6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     eba:	90 62       	ori	r25, 0x20	; 32
     ebc:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ec0:	81 11       	cpse	r24, r1
     ec2:	05 c0       	rjmp	.+10     	; 0xece <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ec4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ece:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ed8:	08 95       	ret

00000eda <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     eda:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ede:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ee0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ee4:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     ee6:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     eea:	3f 7d       	andi	r19, 0xDF	; 223
     eec:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ef0:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ef4:	3f 7d       	andi	r19, 0xDF	; 223
     ef6:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     efa:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     efe:	31 60       	ori	r19, 0x01	; 1
     f00:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     f04:	88 23       	and	r24, r24
     f06:	39 f1       	breq	.+78     	; 0xf56 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f08:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f0c:	35 ff       	sbrs	r19, 5
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f10:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     f14:	3f 7d       	andi	r19, 0xDF	; 223
     f16:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     f1a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f1c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <USB_HostState>
     f20:	31 30       	cpi	r19, 0x01	; 1
     f22:	c1 f0       	breq	.+48     	; 0xf54 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f24:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     f28:	34 ff       	sbrs	r19, 4
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f2c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     f30:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f34:	8f 7e       	andi	r24, 0xEF	; 239
     f36:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     f3a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f3e:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     f42:	31 ff       	sbrs	r19, 1
     f44:	df cf       	rjmp	.-66     	; 0xf04 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f46:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f4a:	8d 7f       	andi	r24, 0xFD	; 253
     f4c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     f50:	83 e0       	ldi	r24, 0x03	; 3

			break;
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     f54:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     f56:	21 11       	cpse	r18, r1
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f5a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f5e:	2e 7f       	andi	r18, 0xFE	; 254
     f60:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f64:	99 23       	and	r25, r25
     f66:	29 f0       	breq	.+10     	; 0xf72 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f68:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f6c:	90 62       	ori	r25, 0x20	; 32
     f6e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f72:	08 95       	ret

00000f74 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     f74:	ef 92       	push	r14
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	28 97       	sbiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     f8e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <USB_HostState>
     f92:	8e 2f       	mov	r24, r30
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	8a 30       	cpi	r24, 0x0A	; 10
     f98:	91 05       	cpc	r25, r1
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <USB_Host_ProcessNextHostState+0x2a>
     f9c:	f5 c0       	rjmp	.+490    	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
     f9e:	fc 01       	movw	r30, r24
     fa0:	e4 5b       	subi	r30, 0xB4	; 180
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	57 c5       	rjmp	.+2734   	; 0x1a54 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     fa6:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <WaitMSRemaining.2935>
     faa:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <WaitMSRemaining.2935+0x1>
     fae:	01 15       	cp	r16, r1
     fb0:	11 05       	cpc	r17, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <USB_Host_ProcessNextHostState+0x42>
     fb4:	e9 c0       	rjmp	.+466    	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 df       	rcall	.-224    	; 0xeda <USB_Host_WaitMS>
     fba:	88 23       	and	r24, r24
     fbc:	31 f0       	breq	.+12     	; 0xfca <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     fbe:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <PostWaitState.2936>
     fc2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     fc6:	91 e0       	ldi	r25, 0x01	; 1
					break;
     fc8:	d1 c0       	rjmp	.+418    	; 0x116c <__EEPROM_REGION_LENGTH__+0x16c>
				}

				if (!(--WaitMSRemaining))
     fca:	01 50       	subi	r16, 0x01	; 1
     fcc:	11 09       	sbc	r17, r1
     fce:	10 93 24 01 	sts	0x0124, r17	; 0x800124 <WaitMSRemaining.2935+0x1>
     fd2:	00 93 23 01 	sts	0x0123, r16	; 0x800123 <WaitMSRemaining.2935>
     fd6:	01 2b       	or	r16, r17
     fd8:	09 f0       	breq	.+2      	; 0xfdc <USB_Host_ProcessNextHostState+0x68>
     fda:	d6 c0       	rjmp	.+428    	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
				  USB_HostState = PostWaitState;
     fdc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PostWaitState.2936>
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     fe2:	88 ee       	ldi	r24, 0xE8	; 232
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <WaitMSRemaining.2935+0x1>
     fea:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_HostState>
			break;
     ff4:	c9 c0       	rjmp	.+402    	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     ff6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <WaitMSRemaining.2935>
     ffa:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <WaitMSRemaining.2935+0x1>
     ffe:	9c 01       	movw	r18, r24
    1000:	21 50       	subi	r18, 0x01	; 1
    1002:	31 09       	sbc	r19, r1
    1004:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <WaitMSRemaining.2935+0x1>
    1008:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <WaitMSRemaining.2935>
    100c:	89 2b       	or	r24, r25
    100e:	39 f0       	breq	.+14     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1010:	8f ec       	ldi	r24, 0xCF	; 207
    1012:	97 e0       	ldi	r25, 0x07	; 7
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    101a:	00 00       	nop
    101c:	b5 c0       	rjmp	.+362    	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    101e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1020:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1024:	80 61       	ori	r24, 0x10	; 16
    1026:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    102a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    102e:	8b 7f       	andi	r24, 0xFB	; 251
    1030:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
    1034:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    103e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	d2 cf       	rjmp	.-92     	; 0xff0 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    104c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1050:	80 ff       	sbrs	r24, 0
    1052:	9a c0       	rjmp	.+308    	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1054:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    105e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1062:	8d 7f       	andi	r24, 0xFD	; 253
    1064:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1068:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    106c:	8d 7f       	andi	r24, 0xFD	; 253
    106e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1072:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    107c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1086:	e8 d0       	rcall	.+464    	; 0x1258 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1088:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_HostState>
    108c:	84 e6       	ldi	r24, 0x64	; 100
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <WaitMSRemaining.2935+0x1>
    1094:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <WaitMSRemaining.2935>
    1098:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    109a:	5c c0       	rjmp	.+184    	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
    109c:	cd de       	rcall	.-614    	; 0xe38 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    109e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_HostState>
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <WaitMSRemaining.2935+0x1>
    10aa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <WaitMSRemaining.2935>
    10ae:	86 e0       	ldi	r24, 0x06	; 6
    10b0:	51 c0       	rjmp	.+162    	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    10b2:	e1 2c       	mov	r14, r1
    10b4:	00 e4       	ldi	r16, 0x40	; 64
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	6f d0       	rcall	.+222    	; 0x11a0 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    10c2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    10c6:	87 fd       	sbrc	r24, 7
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	4e c0       	rjmp	.+156    	; 0x116c <__EEPROM_REGION_LENGTH__+0x16c>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	8e cf       	rjmp	.-228    	; 0xff0 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	e1 e0       	ldi	r30, 0x01	; 1
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	a7 e2       	ldi	r26, 0x27	; 39
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	01 90       	ld	r0, Z+
    10e0:	0d 92       	st	X+, r0
    10e2:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    10e4:	e1 f7       	brne	.-8      	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	6e d3       	rcall	.+1756   	; 0x17c8 <USB_Host_SendControlRequest>
    10ec:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    10ee:	3d c0       	rjmp	.+122    	; 0x116a <__EEPROM_REGION_LENGTH__+0x16a>
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
    10f6:	a0 de       	rcall	.-704    	; 0xe38 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    10f8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_HostState>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <WaitMSRemaining.2935+0x1>
    1104:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <WaitMSRemaining.2935>
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	24 c0       	rjmp	.+72     	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    110c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	e1 2c       	mov	r14, r1
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	41 d0       	rcall	.+130    	; 0x11a0 <Pipe_ConfigurePipe>
    111e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    1122:	87 ff       	sbrs	r24, 7
    1124:	d2 cf       	rjmp	.-92     	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	e9 e0       	ldi	r30, 0x09	; 9
    112a:	f1 e0       	ldi	r31, 0x01	; 1
    112c:	a7 e2       	ldi	r26, 0x27	; 39
    112e:	b1 e0       	ldi	r27, 0x01	; 1
    1130:	01 90       	ld	r0, Z+
    1132:	0d 92       	st	X+, r0
    1134:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1136:	e1 f7       	brne	.-8      	; 0x1130 <__EEPROM_REGION_LENGTH__+0x130>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	45 d3       	rcall	.+1674   	; 0x17c8 <USB_Host_SendControlRequest>
    113e:	81 11       	cpse	r24, r1
    1140:	14 c0       	rjmp	.+40     	; 0x116a <__EEPROM_REGION_LENGTH__+0x16a>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1142:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_HostState>
    1146:	84 e6       	ldi	r24, 0x64	; 100
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <WaitMSRemaining.2935+0x1>
    114e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <WaitMSRemaining.2935>
    1152:	89 e0       	ldi	r24, 0x09	; 9
    1154:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1158:	17 c0       	rjmp	.+46     	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
    1166:	ac d9       	rcall	.-3240   	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1170:	21 30       	cpi	r18, 0x01	; 1
    1172:	51 f0       	breq	.+20     	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
    1174:	68 2f       	mov	r22, r24
    1176:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1178:	5b da       	rcall	.-2890   	; 0x630 <EVENT_USB_Host_DeviceEnumerationFailed>
    117a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    117e:	81 60       	ori	r24, 0x01	; 1
    1180:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1184:	97 d9       	rcall	.-3282   	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1186:	c2 d0       	rcall	.+388    	; 0x130c <USB_ResetInterface>
    1188:	28 96       	adiw	r28, 0x08	; 8
	}
}
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ef 90       	pop	r14
    119e:	08 95       	ret

000011a0 <Pipe_ConfigurePipe>:
    11a0:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	2f 70       	andi	r18, 0x0F	; 15
    11a8:	42 2b       	or	r20, r18
    11aa:	90 e4       	ldi	r25, 0x40	; 64
    11ac:	69 9f       	mul	r22, r25
    11ae:	b0 01       	movw	r22, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	64 2b       	or	r22, r20
    11b4:	38 2f       	mov	r19, r24
    11b6:	2e 2d       	mov	r18, r14
    11b8:	22 60       	ori	r18, 0x02	; 2
    11ba:	37 30       	cpi	r19, 0x07	; 7
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <Pipe_ConfigurePipe+0x20>
    11be:	45 c0       	rjmp	.+138    	; 0x124a <Pipe_ConfigurePipe+0xaa>
    11c0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    11c4:	38 13       	cpse	r19, r24
    11c6:	13 c0       	rjmp	.+38     	; 0x11ee <Pipe_ConfigurePipe+0x4e>
    11c8:	48 e0       	ldi	r20, 0x08	; 8
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	40 17       	cp	r20, r16
    11d0:	51 07       	cpc	r21, r17
    11d2:	38 f0       	brcs	.+14     	; 0x11e2 <Pipe_ConfigurePipe+0x42>
    11d4:	92 95       	swap	r25
    11d6:	90 7f       	andi	r25, 0xF0	; 240
    11d8:	92 2b       	or	r25, r18
    11da:	e6 2f       	mov	r30, r22
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <Pipe_ConfigurePipe+0x5e>
    11e2:	95 30       	cpi	r25, 0x05	; 5
    11e4:	b9 f3       	breq	.-18     	; 0x11d4 <Pipe_ConfigurePipe+0x34>
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	44 0f       	add	r20, r20
    11ea:	55 1f       	adc	r21, r21
    11ec:	f0 cf       	rjmp	.-32     	; 0x11ce <Pipe_ConfigurePipe+0x2e>
    11ee:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    11f2:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    11f6:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    11fa:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
    11fe:	91 fd       	sbrc	r25, 1
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <Pipe_ConfigurePipe+0x66>
    1202:	3f 5f       	subi	r19, 0xFF	; 255
    1204:	da cf       	rjmp	.-76     	; 0x11ba <Pipe_ConfigurePipe+0x1a>
    1206:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    120a:	4e 7f       	andi	r20, 0xFE	; 254
    120c:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1210:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1214:	4d 7f       	andi	r20, 0xFD	; 253
    1216:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    121a:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    121e:	41 60       	ori	r20, 0x01	; 1
    1220:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1224:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1228:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    122c:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1230:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
    1234:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1238:	90 62       	ori	r25, 0x20	; 32
    123a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    123e:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
    1242:	97 fd       	sbrc	r25, 7
    1244:	de cf       	rjmp	.-68     	; 0x1202 <Pipe_ConfigurePipe+0x62>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <Pipe_ConfigurePipe+0xb0>
    124a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ef 90       	pop	r14
    1256:	08 95       	ret

00001258 <Pipe_ClearPipes>:
    1258:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1262:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
    1266:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    126a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    126e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1272:	9e 7f       	andi	r25, 0xFE	; 254
    1274:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	87 30       	cpi	r24, 0x07	; 7
    127c:	81 f7       	brne	.-32     	; 0x125e <Pipe_ClearPipes+0x6>
    127e:	08 95       	ret

00001280 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1280:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1284:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    1288:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    128a:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    128e:	90 73       	andi	r25, 0x30	; 48
    1290:	90 31       	cpi	r25, 0x10	; 16
    1292:	29 f4       	brne	.+10     	; 0x129e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1294:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
    1298:	90 ff       	sbrs	r25, 0
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <Pipe_WaitUntilReady+0x26>
    129c:	19 c0       	rjmp	.+50     	; 0x12d0 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    129e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    12a2:	92 fd       	sbrc	r25, 2
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    12a6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    12aa:	91 fd       	sbrc	r25, 1
    12ac:	13 c0       	rjmp	.+38     	; 0x12d4 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    12ae:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_HostState>
    12b2:	91 30       	cpi	r25, 0x01	; 1
    12b4:	89 f0       	breq	.+34     	; 0x12d8 <Pipe_WaitUntilReady+0x58>
    12b6:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    12ba:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    12be:	42 17       	cp	r20, r18
    12c0:	53 07       	cpc	r21, r19
    12c2:	19 f3       	breq	.-58     	; 0x128a <Pipe_WaitUntilReady+0xa>
    12c4:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    12c6:	11 f0       	breq	.+4      	; 0x12cc <Pipe_WaitUntilReady+0x4c>
    12c8:	a9 01       	movw	r20, r18
    12ca:	df cf       	rjmp	.-66     	; 0x128a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    12d8:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    12da:	08 95       	ret

000012dc <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    12dc:	70 d0       	rcall	.+224    	; 0x13be <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    12de:	77 d0       	rcall	.+238    	; 0x13ce <USB_INT_ClearAllInterrupts>
    12e0:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	80 83       	st	Z, r24
    12ea:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 77       	andi	r24, 0x7F	; 127
    12f2:	80 83       	st	Z, r24
    12f4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12f6:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	8c 91       	ld	r24, X
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
    12fe:	8c 93       	st	X, r24
    1300:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1302:	8f 7e       	andi	r24, 0xEF	; 239
    1304:	80 83       	st	Z, r24
    1306:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    130a:	08 95       	ret

0000130c <USB_ResetInterface>:
    130c:	58 d0       	rcall	.+176    	; 0x13be <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    130e:	5f d0       	rcall	.+190    	; 0x13ce <USB_INT_ClearAllInterrupts>
    1310:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1314:	8f 77       	andi	r24, 0x7F	; 127
    1316:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    131a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
    131e:	80 68       	ori	r24, 0x80	; 128
    1320:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1324:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1328:	8f 7d       	andi	r24, 0xDF	; 223
    132a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    132e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1332:	8f 77       	andi	r24, 0x7F	; 127
    1334:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1338:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    133a:	89 bd       	out	0x29, r24	; 41
    133c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    133e:	89 bd       	out	0x29, r24	; 41
    1340:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    1342:	00 fe       	sbrs	r0, 0
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <USB_ResetInterface+0x34>
    1346:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1348:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_HostState>
    134c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
    1350:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1352:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1356:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    135a:	80 64       	ori	r24, 0x40	; 64
    135c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1360:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    136a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    136e:	84 60       	ori	r24, 0x04	; 4
    1370:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    1374:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
    1378:	8f 7e       	andi	r24, 0xEF	; 239
    137a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    137e:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
    1380:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1382:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    138c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1396:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    139a:	8e 7f       	andi	r24, 0xFE	; 254
    139c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    13a0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    13a4:	80 61       	ori	r24, 0x10	; 16
    13a6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    13aa:	08 95       	ret

000013ac <USB_Init>:
    13ac:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_IsInitialized>

	USB_ResetInterface();
    13bc:	a7 cf       	rjmp	.-178    	; 0x130c <USB_ResetInterface>

000013be <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    13be:	e8 ed       	ldi	r30, 0xD8	; 216
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8c 7f       	andi	r24, 0xFC	; 252
    13c6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    13c8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    13cc:	08 95       	ret

000013ce <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    13ce:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    13d2:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    13d6:	08 95       	ret

000013d8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	0b b6       	in	r0, 0x3b	; 59
    13e4:	0f 92       	push	r0
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    13fe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1402:	85 ff       	sbrs	r24, 5
    1404:	0a c0       	rjmp	.+20     	; 0x141a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1406:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    140a:	85 ff       	sbrs	r24, 5
    140c:	06 c0       	rjmp	.+12     	; 0x141a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    140e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1412:	8f 7d       	andi	r24, 0xDF	; 223
    1414:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1418:	b0 d1       	rcall	.+864    	; 0x177a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    141a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    141e:	81 ff       	sbrs	r24, 1
    1420:	15 c0       	rjmp	.+42     	; 0x144c <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1422:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1426:	81 ff       	sbrs	r24, 1
    1428:	11 c0       	rjmp	.+34     	; 0x144c <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    142a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1434:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1438:	8e 7f       	andi	r24, 0xFE	; 254
    143a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    143e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1442:	8d 7f       	andi	r24, 0xFD	; 253
    1444:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
    1448:	35 d8       	rcall	.-3990   	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>
    144a:	60 df       	rcall	.-320    	; 0x130c <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    144c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1450:	81 ff       	sbrs	r24, 1
    1452:	15 c0       	rjmp	.+42     	; 0x147e <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1454:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1458:	81 ff       	sbrs	r24, 1
    145a:	11 c0       	rjmp	.+34     	; 0x147e <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    145c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    1460:	8d 7f       	andi	r24, 0xFD	; 253
    1462:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    1466:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1468:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	cc d8       	rcall	.-3688   	; 0x60e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1476:	1e d8       	rcall	.-4036   	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>
    1478:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
    147a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_HostState>
    147e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1482:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1484:	17 c0       	rjmp	.+46     	; 0x14b4 <__vector_10+0xdc>
    1486:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    148a:	80 ff       	sbrs	r24, 0
    148c:	13 c0       	rjmp	.+38     	; 0x14b4 <__vector_10+0xdc>
    148e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1492:	8e 7f       	andi	r24, 0xFE	; 254
    1494:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    1498:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    14a2:	02 d8       	rcall	.-4092   	; 0x4a8 <EVENT_USB_Host_DeviceAttached>
    14a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    14a8:	82 60       	ori	r24, 0x02	; 2
    14aa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    14ae:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    14b0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_HostState>
    14b4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    14b8:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    14ba:	0f c0       	rjmp	.+30     	; 0x14da <__vector_10+0x102>
    14bc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    14c0:	82 ff       	sbrs	r24, 2
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <__vector_10+0x102>
    14c4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    14c8:	8b 7f       	andi	r24, 0xFB	; 251
    14ca:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	ae d8       	rcall	.-3748   	; 0x630 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    14d4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    14d8:	19 df       	rcall	.-462    	; 0x130c <USB_ResetInterface>
    14da:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0b be       	out	0x3b, r0	; 59
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <Pipe_Discard_Stream>:
    1500:	ef 92       	push	r14
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	8b 01       	movw	r16, r22
    1510:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1514:	8f 7c       	andi	r24, 0xCF	; 207
    1516:	80 61       	ori	r24, 0x10	; 16
    1518:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    151c:	b1 de       	rcall	.-670    	; 0x1280 <Pipe_WaitUntilReady>
    151e:	81 11       	cpse	r24, r1
    1520:	2d c0       	rjmp	.+90     	; 0x157c <Pipe_Discard_Stream+0x7c>
    1522:	01 15       	cp	r16, r1
    1524:	11 05       	cpc	r17, r1
    1526:	29 f0       	breq	.+10     	; 0x1532 <Pipe_Discard_Stream+0x32>
    1528:	f8 01       	movw	r30, r16
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	c8 1b       	sub	r28, r24
    1530:	d9 0b       	sbc	r29, r25
    1532:	e1 2c       	mov	r14, r1
    1534:	f1 2c       	mov	r15, r1
    1536:	20 97       	sbiw	r28, 0x00	; 0
    1538:	01 f1       	breq	.+64     	; 0x157a <Pipe_Discard_Stream+0x7a>
    153a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    153e:	85 fd       	sbrc	r24, 5
    1540:	15 c0       	rjmp	.+42     	; 0x156c <Pipe_Discard_Stream+0x6c>
    1542:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1546:	8e 77       	andi	r24, 0x7E	; 126
    1548:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    154c:	01 15       	cp	r16, r1
    154e:	11 05       	cpc	r17, r1
    1550:	49 f0       	breq	.+18     	; 0x1564 <Pipe_Discard_Stream+0x64>
    1552:	f8 01       	movw	r30, r16
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	e8 0e       	add	r14, r24
    155a:	f9 1e       	adc	r15, r25
    155c:	f1 82       	std	Z+1, r15	; 0x01
    155e:	e0 82       	st	Z, r14
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	0c c0       	rjmp	.+24     	; 0x157c <Pipe_Discard_Stream+0x7c>
    1564:	8d de       	rcall	.-742    	; 0x1280 <Pipe_WaitUntilReady>
    1566:	88 23       	and	r24, r24
    1568:	31 f3       	breq	.-52     	; 0x1536 <Pipe_Discard_Stream+0x36>
    156a:	08 c0       	rjmp	.+16     	; 0x157c <Pipe_Discard_Stream+0x7c>
    156c:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1570:	21 97       	sbiw	r28, 0x01	; 1
    1572:	ff ef       	ldi	r31, 0xFF	; 255
    1574:	ef 1a       	sub	r14, r31
    1576:	ff 0a       	sbc	r15, r31
    1578:	de cf       	rjmp	.-68     	; 0x1536 <Pipe_Discard_Stream+0x36>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	08 95       	ret

0000158a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	ec 01       	movw	r28, r24
    159c:	8b 01       	movw	r16, r22
    159e:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15a0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    15a4:	8f 7c       	andi	r24, 0xCF	; 207
    15a6:	80 61       	ori	r24, 0x10	; 16
    15a8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    15ac:	69 de       	rcall	.-814    	; 0x1280 <Pipe_WaitUntilReady>
    15ae:	81 11       	cpse	r24, r1
    15b0:	32 c0       	rjmp	.+100    	; 0x1616 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    15b2:	e1 14       	cp	r14, r1
    15b4:	f1 04       	cpc	r15, r1
    15b6:	39 f0       	breq	.+14     	; 0x15c6 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
    15b8:	f7 01       	movw	r30, r14
    15ba:	80 81       	ld	r24, Z
    15bc:	91 81       	ldd	r25, Z+1	; 0x01
    15be:	08 1b       	sub	r16, r24
    15c0:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    15c2:	c8 0f       	add	r28, r24
    15c4:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    15c6:	c1 2c       	mov	r12, r1
    15c8:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    15ca:	01 15       	cp	r16, r1
    15cc:	11 05       	cpc	r17, r1
    15ce:	11 f1       	breq	.+68     	; 0x1614 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    15d0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    15d4:	85 fd       	sbrc	r24, 5
    15d6:	15 c0       	rjmp	.+42     	; 0x1602 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15d8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    15dc:	8e 77       	andi	r24, 0x7E	; 126
    15de:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    15e2:	e1 14       	cp	r14, r1
    15e4:	f1 04       	cpc	r15, r1
    15e6:	49 f0       	breq	.+18     	; 0x15fa <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    15e8:	f7 01       	movw	r30, r14
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	c8 0e       	add	r12, r24
    15f0:	d9 1e       	adc	r13, r25
    15f2:	d1 82       	std	Z+1, r13	; 0x01
    15f4:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    15f6:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <Pipe_Read_Stream_LE+0x8c>
    15fa:	42 de       	rcall	.-892    	; 0x1280 <Pipe_WaitUntilReady>
    15fc:	88 23       	and	r24, r24
    15fe:	29 f3       	breq	.-54     	; 0x15ca <Pipe_Read_Stream_LE+0x40>
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1602:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1606:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1608:	01 50       	subi	r16, 0x01	; 1
    160a:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    160c:	ff ef       	ldi	r31, 0xFF	; 255
    160e:	cf 1a       	sub	r12, r31
    1610:	df 0a       	sbc	r13, r31
    1612:	db cf       	rjmp	.-74     	; 0x15ca <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    1614:	80 e0       	ldi	r24, 0x00	; 0
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	08 95       	ret

00001628 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	dc 01       	movw	r26, r24
    162e:	eb 01       	movw	r28, r22
    1630:	e8 81       	ld	r30, Y
    1632:	f9 81       	ldd	r31, Y+1	; 0x01
    1634:	20 81       	ld	r18, Z
    1636:	8d 91       	ld	r24, X+
    1638:	9c 91       	ld	r25, X
    163a:	11 97       	sbiw	r26, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	82 17       	cp	r24, r18
    1640:	93 07       	cpc	r25, r19
    1642:	08 f4       	brcc	.+2      	; 0x1646 <USB_GetNextDescriptor+0x1e>
    1644:	9c 01       	movw	r18, r24
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	eb 01       	movw	r28, r22
    164c:	f9 83       	std	Y+1, r31	; 0x01
    164e:	e8 83       	st	Y, r30
    1650:	8d 91       	ld	r24, X+
    1652:	9c 91       	ld	r25, X
    1654:	11 97       	sbiw	r26, 0x01	; 1
    1656:	82 1b       	sub	r24, r18
    1658:	93 0b       	sbc	r25, r19
    165a:	8d 93       	st	X+, r24
    165c:	9c 93       	st	X, r25
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <USB_Host_GetDeviceConfigDescriptor>:
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	29 97       	sbiw	r28, 0x09	; 9
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	6b 01       	movw	r12, r22
    1686:	8a 01       	movw	r16, r20
    1688:	79 01       	movw	r14, r18
    168a:	90 e8       	ldi	r25, 0x80	; 128
    168c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <USB_ControlRequest>
    1690:	96 e0       	ldi	r25, 0x06	; 6
    1692:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <USB_ControlRequest+0x1>
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	92 60       	ori	r25, 0x02	; 2
    169c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x3>
    16a0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x2>
    16a4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x5>
    16a8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_ControlRequest+0x4>
    16ac:	89 e0       	ldi	r24, 0x09	; 9
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <USB_ControlRequest+0x7>
    16b4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_ControlRequest+0x6>
    16b8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	83 d0       	rcall	.+262    	; 0x17c8 <USB_Host_SendControlRequest>
    16c2:	81 11       	cpse	r24, r1
    16c4:	19 c0       	rjmp	.+50     	; 0x16f8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	f6 01       	movw	r30, r12
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
    16d0:	e8 16       	cp	r14, r24
    16d2:	f9 06       	cpc	r15, r25
    16d4:	70 f0       	brcs	.+28     	; 0x16f2 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    16d6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <USB_ControlRequest+0x7>
    16da:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_ControlRequest+0x6>
    16de:	c8 01       	movw	r24, r16
    16e0:	73 d0       	rcall	.+230    	; 0x17c8 <USB_Host_SendControlRequest>
    16e2:	81 11       	cpse	r24, r1
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    16e6:	f8 01       	movw	r30, r16
    16e8:	81 81       	ldd	r24, Z+1	; 0x01
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <USB_Host_GetDeviceConfigDescriptor+0x92>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    16f2:	85 e0       	ldi	r24, 0x05	; 5
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    16f6:	86 e0       	ldi	r24, 0x06	; 6
    16f8:	29 96       	adiw	r28, 0x09	; 9
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	08 95       	ret

00001716 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	8c 01       	movw	r16, r24
    172c:	eb 01       	movw	r28, r22
    172e:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1730:	f8 01       	movw	r30, r16
    1732:	e0 80       	ld	r14, Z
    1734:	f1 80       	ldd	r15, Z+1	; 0x01
    1736:	e1 14       	cp	r14, r1
    1738:	f1 04       	cpc	r15, r1
    173a:	99 f0       	breq	.+38     	; 0x1762 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    173c:	a8 80       	ld	r10, Y
    173e:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1740:	be 01       	movw	r22, r28
    1742:	c8 01       	movw	r24, r16
    1744:	71 df       	rcall	.-286    	; 0x1628 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1746:	88 81       	ld	r24, Y
    1748:	99 81       	ldd	r25, Y+1	; 0x01
    174a:	f6 01       	movw	r30, r12
    174c:	09 95       	icall
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	79 f3       	breq	.-34     	; 0x1730 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	39 f4       	brne	.+14     	; 0x1764 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    1756:	b9 82       	std	Y+1, r11	; 0x01
    1758:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    175a:	f8 01       	movw	r30, r16
    175c:	f1 82       	std	Z+1, r15	; 0x01
    175e:	e0 82       	st	Z, r14
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1762:	82 e0       	ldi	r24, 0x02	; 2
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	08 95       	ret

0000177a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    177a:	08 95       	ret

0000177c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1784:	c9 ee       	ldi	r28, 0xE9	; 233
    1786:	d3 e0       	ldi	r29, 0x03	; 3
    1788:	11 11       	cpse	r17, r1
    178a:	0c c0       	rjmp	.+24     	; 0x17a4 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    178c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1790:	83 fd       	sbrc	r24, 3
    1792:	15 c0       	rjmp	.+42     	; 0x17be <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	a1 db       	rcall	.-2238   	; 0xeda <USB_Host_WaitMS>
    1798:	81 11       	cpse	r24, r1
    179a:	12 c0       	rjmp	.+36     	; 0x17c0 <USB_Host_WaitForIOS+0x44>
    179c:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    179e:	a1 f7       	brne	.-24     	; 0x1788 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17a4:	11 30       	cpi	r17, 0x01	; 1
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17a8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    17ac:	80 ff       	sbrs	r24, 0
    17ae:	f2 cf       	rjmp	.-28     	; 0x1794 <USB_Host_WaitForIOS+0x18>
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17b2:	12 30       	cpi	r17, 0x02	; 2
    17b4:	79 f7       	brne	.-34     	; 0x1794 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17b6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    17ba:	82 ff       	sbrs	r24, 2
    17bc:	eb cf       	rjmp	.-42     	; 0x1794 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    17be:	80 e0       	ldi	r24, 0x00	; 0
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	08 95       	ret

000017c8 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    17d4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    17dc:	c0 91 2d 01 	lds	r28, 0x012D	; 0x80012d <USB_ControlRequest+0x6>
    17e0:	d0 91 2e 01 	lds	r29, 0x012E	; 0x80012e <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    17e4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    17e8:	81 60       	ori	r24, 0x01	; 1
    17ea:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	74 db       	rcall	.-2328   	; 0xeda <USB_Host_WaitMS>
    17f2:	81 11       	cpse	r24, r1
    17f4:	c8 c0       	rjmp	.+400    	; 0x1986 <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17f6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    17fa:	8f 7c       	andi	r24, 0xCF	; 207
    17fc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1800:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    1804:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1808:	8f 7e       	andi	r24, 0xEF	; 239
    180a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    180e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1812:	8f 7b       	andi	r24, 0xBF	; 191
    1814:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1818:	e7 e2       	ldi	r30, 0x27	; 39
    181a:	f1 e0       	ldi	r31, 0x01	; 1
    181c:	8f e2       	ldi	r24, 0x2F	; 47
    181e:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1820:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1822:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1826:	8e 17       	cp	r24, r30
    1828:	9f 07       	cpc	r25, r31
    182a:	d1 f7       	brne	.-12     	; 0x1820 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    182c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1830:	87 77       	andi	r24, 0x77	; 119
    1832:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	a1 df       	rcall	.-190    	; 0x177c <USB_Host_WaitForIOS>
    183a:	81 11       	cpse	r24, r1
    183c:	a4 c0       	rjmp	.+328    	; 0x1986 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    183e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1842:	80 64       	ori	r24, 0x40	; 64
    1844:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	47 db       	rcall	.-2418   	; 0xeda <USB_Host_WaitMS>
    184c:	81 11       	cpse	r24, r1
    184e:	9b c0       	rjmp	.+310    	; 0x1986 <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1850:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest>
    1854:	87 ff       	sbrs	r24, 7
    1856:	4e c0       	rjmp	.+156    	; 0x18f4 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1858:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    185c:	8f 7c       	andi	r24, 0xCF	; 207
    185e:	80 61       	ori	r24, 0x10	; 16
    1860:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1864:	01 15       	cp	r16, r1
    1866:	11 05       	cpc	r17, r1
    1868:	09 f0       	breq	.+2      	; 0x186c <USB_Host_SendControlRequest+0xa4>
    186a:	3a c0       	rjmp	.+116    	; 0x18e0 <USB_Host_SendControlRequest+0x118>
    186c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1870:	8f 7c       	andi	r24, 0xCF	; 207
    1872:	80 62       	ori	r24, 0x20	; 32
    1874:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1878:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    187c:	8f 7b       	andi	r24, 0xBF	; 191
    187e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	7b df       	rcall	.-266    	; 0x177c <USB_Host_WaitForIOS>
    1886:	81 11       	cpse	r24, r1
    1888:	7e c0       	rjmp	.+252    	; 0x1986 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    188a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    188e:	8b 77       	andi	r24, 0x7B	; 123
    1890:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	72 df       	rcall	.-284    	; 0x177c <USB_Host_WaitForIOS>
    1898:	76 c0       	rjmp	.+236    	; 0x1986 <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    189a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    189e:	8f 7b       	andi	r24, 0xBF	; 191
    18a0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	6a df       	rcall	.-300    	; 0x177c <USB_Host_WaitForIOS>
    18a8:	81 11       	cpse	r24, r1
    18aa:	6d c0       	rjmp	.+218    	; 0x1986 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18ac:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    18b0:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    18b4:	89 2b       	or	r24, r25
    18b6:	11 f4       	brne	.+4      	; 0x18bc <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    18b8:	c0 e0       	ldi	r28, 0x00	; 0
    18ba:	d0 e0       	ldi	r29, 0x00	; 0
    18bc:	f8 01       	movw	r30, r16
    18be:	8f 01       	movw	r16, r30
    18c0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    18c4:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    18c8:	89 2b       	or	r24, r25
    18ca:	69 f4       	brne	.+26     	; 0x18e6 <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18cc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    18d0:	80 64       	ori	r24, 0x40	; 64
    18d2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18d6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    18da:	8e 77       	andi	r24, 0x7E	; 126
    18dc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    18e0:	20 97       	sbiw	r28, 0x00	; 0
    18e2:	d9 f6       	brne	.-74     	; 0x189a <USB_Host_SendControlRequest+0xd2>
    18e4:	c3 cf       	rjmp	.-122    	; 0x186c <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    18e6:	20 97       	sbiw	r28, 0x00	; 0
    18e8:	89 f3       	breq	.-30     	; 0x18cc <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    18ea:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    18ee:	81 93       	st	Z+, r24
					DataLen--;
    18f0:	21 97       	sbiw	r28, 0x01	; 1
    18f2:	e5 cf       	rjmp	.-54     	; 0x18be <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    18f4:	01 15       	cp	r16, r1
    18f6:	11 05       	cpc	r17, r1
    18f8:	91 f1       	breq	.+100    	; 0x195e <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18fa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    18fe:	8f 7c       	andi	r24, 0xCF	; 207
    1900:	80 62       	ori	r24, 0x20	; 32
    1902:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1906:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    190a:	8f 7b       	andi	r24, 0xBF	; 191
    190c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1914:	e1 f0       	breq	.+56     	; 0x194e <USB_Host_SendControlRequest+0x186>
    1916:	32 df       	rcall	.-412    	; 0x177c <USB_Host_WaitForIOS>
    1918:	81 11       	cpse	r24, r1
    191a:	35 c0       	rjmp	.+106    	; 0x1986 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    191c:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1920:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1924:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	28 17       	cp	r18, r24
    192c:	39 07       	cpc	r19, r25
    192e:	48 f4       	brcc	.+18     	; 0x1942 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    1930:	0f 5f       	subi	r16, 0xFF	; 255
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	f8 01       	movw	r30, r16
    1936:	31 97       	sbiw	r30, 0x01	; 1
    1938:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    193a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    193e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1940:	69 f7       	brne	.-38     	; 0x191c <USB_Host_SendControlRequest+0x154>
    1942:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1946:	8b 77       	andi	r24, 0x7B	; 123
    1948:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    194c:	e1 cf       	rjmp	.-62     	; 0x1910 <USB_Host_SendControlRequest+0x148>
    194e:	16 df       	rcall	.-468    	; 0x177c <USB_Host_WaitForIOS>
    1950:	81 11       	cpse	r24, r1
    1952:	19 c0       	rjmp	.+50     	; 0x1986 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1954:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1958:	80 64       	ori	r24, 0x40	; 64
    195a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    195e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1962:	8f 7c       	andi	r24, 0xCF	; 207
    1964:	80 61       	ori	r24, 0x10	; 16
    1966:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    196a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    196e:	8f 7b       	andi	r24, 0xBF	; 191
    1970:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	02 df       	rcall	.-508    	; 0x177c <USB_Host_WaitForIOS>
    1978:	81 11       	cpse	r24, r1
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    197c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1980:	9e 77       	andi	r25, 0x7E	; 126
    1982:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1986:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    198a:	90 64       	ori	r25, 0x40	; 64
    198c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1990:	f1 10       	cpse	r15, r1
    1992:	05 c0       	rjmp	.+10     	; 0x199e <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1994:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1998:	9e 7f       	andi	r25, 0xFE	; 254
    199a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    19a4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	08 95       	ret

000019b4 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    19b4:	cf 93       	push	r28
    19b6:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    19b8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_ControlRequest>
    19bc:	89 e0       	ldi	r24, 0x09	; 9
    19be:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <USB_ControlRequest+0x1>
    19c2:	8c 2f       	mov	r24, r28
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x3>
    19ca:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_ControlRequest+0x2>
    19ce:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_ControlRequest+0x5>
    19d2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_ControlRequest+0x4>
    19d6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x7>
    19da:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    19de:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	f0 de       	rcall	.-544    	; 0x17c8 <USB_Host_SendControlRequest>
    19e8:	81 11       	cpse	r24, r1
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    19ec:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    19f0:	c1 11       	cpse	r28, r1
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <USB_Host_SetDeviceConfiguration+0x44>
    19f4:	9a e0       	ldi	r25, 0x0A	; 10
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <USB_Host_SetDeviceConfiguration+0x46>
    19f8:	9b e0       	ldi	r25, 0x0B	; 11
    19fa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <USB_HostState>
	}

	return ErrorCode;
}
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1a02:	1f 93       	push	r17
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1a08:	c7 ea       	ldi	r28, 0xA7	; 167
    1a0a:	d0 e0       	ldi	r29, 0x00	; 0
    1a0c:	18 81       	ld	r17, Y
    1a0e:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1a10:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1a12:	b0 da       	rcall	.-2720   	; 0xf74 <USB_Host_ProcessNextHostState>
    1a14:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	08 95       	ret

00001a1e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1a1e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1a22:	95 ff       	sbrs	r25, 5
    1a24:	fc cf       	rjmp	.-8      	; 0x1a1e <Serial_putchar>
				UDR1 = DataByte;
    1a26:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	08 95       	ret

00001a30 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1a30:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a34:	87 ff       	sbrs	r24, 7
    1a36:	08 c0       	rjmp	.+16     	; 0x1a48 <Serial_getchar+0x18>
    1a38:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1a3c:	87 ff       	sbrs	r24, 7
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1a40:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	08 95       	ret
	  return _FDEV_EOF;
    1a48:	8e ef       	ldi	r24, 0xFE	; 254
    1a4a:	9f ef       	ldi	r25, 0xFF	; 255
    1a4c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1a52:	08 95       	ret

00001a54 <__tablejump2__>:
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	00 24       	eor	r0, r0
    1a5a:	00 1c       	adc	r0, r0
    1a5c:	0b be       	out	0x3b, r0	; 59
    1a5e:	07 90       	elpm	r0, Z+
    1a60:	f6 91       	elpm	r31, Z
    1a62:	e0 2d       	mov	r30, r0
    1a64:	09 94       	ijmp

00001a66 <memcpy>:
    1a66:	fb 01       	movw	r30, r22
    1a68:	dc 01       	movw	r26, r24
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <memcpy+0xa>
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	0d 92       	st	X+, r0
    1a70:	41 50       	subi	r20, 0x01	; 1
    1a72:	50 40       	sbci	r21, 0x00	; 0
    1a74:	d8 f7       	brcc	.-10     	; 0x1a6c <memcpy+0x6>
    1a76:	08 95       	ret

00001a78 <printf>:
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	ae 01       	movw	r20, r28
    1a82:	4b 5f       	subi	r20, 0xFB	; 251
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	fa 01       	movw	r30, r20
    1a88:	61 91       	ld	r22, Z+
    1a8a:	71 91       	ld	r23, Z+
    1a8c:	af 01       	movw	r20, r30
    1a8e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__iob+0x2>
    1a92:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__iob+0x3>
    1a96:	8b d0       	rcall	.+278    	; 0x1bae <vfprintf>
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <printf_P>:
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	ae 01       	movw	r20, r28
    1aac:	49 5f       	subi	r20, 0xF9	; 249
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	da 01       	movw	r26, r20
    1ab2:	6d 91       	ld	r22, X+
    1ab4:	7d 91       	ld	r23, X+
    1ab6:	ad 01       	movw	r20, r26
    1ab8:	0e e3       	ldi	r16, 0x3E	; 62
    1aba:	11 e0       	ldi	r17, 0x01	; 1
    1abc:	f8 01       	movw	r30, r16
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	13 96       	adiw	r26, 0x03	; 3
    1ac6:	2c 91       	ld	r18, X
    1ac8:	13 97       	sbiw	r26, 0x03	; 3
    1aca:	28 60       	ori	r18, 0x08	; 8
    1acc:	13 96       	adiw	r26, 0x03	; 3
    1ace:	2c 93       	st	X, r18
    1ad0:	6e d0       	rcall	.+220    	; 0x1bae <vfprintf>
    1ad2:	d8 01       	movw	r26, r16
    1ad4:	12 96       	adiw	r26, 0x02	; 2
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	13 97       	sbiw	r26, 0x03	; 3
    1adc:	23 81       	ldd	r18, Z+3	; 0x03
    1ade:	27 7f       	andi	r18, 0xF7	; 247
    1ae0:	23 83       	std	Z+3, r18	; 0x03
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <puts>:
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__iob+0x2>
    1af8:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__iob+0x3>
    1afc:	23 81       	ldd	r18, Z+3	; 0x03
    1afe:	21 ff       	sbrs	r18, 1
    1b00:	1b c0       	rjmp	.+54     	; 0x1b38 <puts+0x4c>
    1b02:	8c 01       	movw	r16, r24
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	c0 e0       	ldi	r28, 0x00	; 0
    1b08:	f8 01       	movw	r30, r16
    1b0a:	81 91       	ld	r24, Z+
    1b0c:	8f 01       	movw	r16, r30
    1b0e:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <__iob+0x2>
    1b12:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <__iob+0x3>
    1b16:	db 01       	movw	r26, r22
    1b18:	18 96       	adiw	r26, 0x08	; 8
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	19 97       	sbiw	r26, 0x09	; 9
    1b20:	88 23       	and	r24, r24
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <puts+0x44>
    1b24:	09 95       	icall
    1b26:	89 2b       	or	r24, r25
    1b28:	79 f3       	breq	.-34     	; 0x1b08 <puts+0x1c>
    1b2a:	df ef       	ldi	r29, 0xFF	; 255
    1b2c:	cf ef       	ldi	r28, 0xFF	; 255
    1b2e:	ec cf       	rjmp	.-40     	; 0x1b08 <puts+0x1c>
    1b30:	8a e0       	ldi	r24, 0x0A	; 10
    1b32:	09 95       	icall
    1b34:	89 2b       	or	r24, r25
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <puts+0x52>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <puts+0x56>
    1b3e:	8d 2f       	mov	r24, r29
    1b40:	9c 2f       	mov	r25, r28
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <puts_P>:
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	8c 01       	movw	r16, r24
    1b56:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__iob+0x2>
    1b5a:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__iob+0x3>
    1b5e:	83 81       	ldd	r24, Z+3	; 0x03
    1b60:	81 ff       	sbrs	r24, 1
    1b62:	1b c0       	rjmp	.+54     	; 0x1b9a <puts_P+0x4e>
    1b64:	d0 e0       	ldi	r29, 0x00	; 0
    1b66:	c0 e0       	ldi	r28, 0x00	; 0
    1b68:	f8 01       	movw	r30, r16
    1b6a:	84 91       	lpm	r24, Z
    1b6c:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <__iob+0x2>
    1b70:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <__iob+0x3>
    1b74:	db 01       	movw	r26, r22
    1b76:	18 96       	adiw	r26, 0x08	; 8
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	19 97       	sbiw	r26, 0x09	; 9
    1b7e:	88 23       	and	r24, r24
    1b80:	41 f0       	breq	.+16     	; 0x1b92 <puts_P+0x46>
    1b82:	09 95       	icall
    1b84:	89 2b       	or	r24, r25
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <puts_P+0x40>
    1b88:	df ef       	ldi	r29, 0xFF	; 255
    1b8a:	cf ef       	ldi	r28, 0xFF	; 255
    1b8c:	0f 5f       	subi	r16, 0xFF	; 255
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	eb cf       	rjmp	.-42     	; 0x1b68 <puts_P+0x1c>
    1b92:	8a e0       	ldi	r24, 0x0A	; 10
    1b94:	09 95       	icall
    1b96:	89 2b       	or	r24, r25
    1b98:	19 f0       	breq	.+6      	; 0x1ba0 <puts_P+0x54>
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	9f ef       	ldi	r25, 0xFF	; 255
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <puts_P+0x58>
    1ba0:	8d 2f       	mov	r24, r29
    1ba2:	9c 2f       	mov	r25, r28
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	08 95       	ret

00001bae <vfprintf>:
    1bae:	2f 92       	push	r2
    1bb0:	3f 92       	push	r3
    1bb2:	4f 92       	push	r4
    1bb4:	5f 92       	push	r5
    1bb6:	6f 92       	push	r6
    1bb8:	7f 92       	push	r7
    1bba:	8f 92       	push	r8
    1bbc:	9f 92       	push	r9
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	2b 97       	sbiw	r28, 0x0b	; 11
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	6c 01       	movw	r12, r24
    1be4:	7b 01       	movw	r14, r22
    1be6:	8a 01       	movw	r16, r20
    1be8:	fc 01       	movw	r30, r24
    1bea:	17 82       	std	Z+7, r1	; 0x07
    1bec:	16 82       	std	Z+6, r1	; 0x06
    1bee:	83 81       	ldd	r24, Z+3	; 0x03
    1bf0:	81 ff       	sbrs	r24, 1
    1bf2:	bf c1       	rjmp	.+894    	; 0x1f72 <vfprintf+0x3c4>
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	3c 01       	movw	r6, r24
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	f7 01       	movw	r30, r14
    1c00:	93 fd       	sbrc	r25, 3
    1c02:	85 91       	lpm	r24, Z+
    1c04:	93 ff       	sbrs	r25, 3
    1c06:	81 91       	ld	r24, Z+
    1c08:	7f 01       	movw	r14, r30
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <vfprintf+0x62>
    1c0e:	ad c1       	rjmp	.+858    	; 0x1f6a <vfprintf+0x3bc>
    1c10:	85 32       	cpi	r24, 0x25	; 37
    1c12:	39 f4       	brne	.+14     	; 0x1c22 <vfprintf+0x74>
    1c14:	93 fd       	sbrc	r25, 3
    1c16:	85 91       	lpm	r24, Z+
    1c18:	93 ff       	sbrs	r25, 3
    1c1a:	81 91       	ld	r24, Z+
    1c1c:	7f 01       	movw	r14, r30
    1c1e:	85 32       	cpi	r24, 0x25	; 37
    1c20:	21 f4       	brne	.+8      	; 0x1c2a <vfprintf+0x7c>
    1c22:	b6 01       	movw	r22, r12
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	d6 d1       	rcall	.+940    	; 0x1fd4 <fputc>
    1c28:	e8 cf       	rjmp	.-48     	; 0x1bfa <vfprintf+0x4c>
    1c2a:	91 2c       	mov	r9, r1
    1c2c:	21 2c       	mov	r2, r1
    1c2e:	31 2c       	mov	r3, r1
    1c30:	ff e1       	ldi	r31, 0x1F	; 31
    1c32:	f3 15       	cp	r31, r3
    1c34:	d8 f0       	brcs	.+54     	; 0x1c6c <vfprintf+0xbe>
    1c36:	8b 32       	cpi	r24, 0x2B	; 43
    1c38:	79 f0       	breq	.+30     	; 0x1c58 <vfprintf+0xaa>
    1c3a:	38 f4       	brcc	.+14     	; 0x1c4a <vfprintf+0x9c>
    1c3c:	80 32       	cpi	r24, 0x20	; 32
    1c3e:	79 f0       	breq	.+30     	; 0x1c5e <vfprintf+0xb0>
    1c40:	83 32       	cpi	r24, 0x23	; 35
    1c42:	a1 f4       	brne	.+40     	; 0x1c6c <vfprintf+0xbe>
    1c44:	23 2d       	mov	r18, r3
    1c46:	20 61       	ori	r18, 0x10	; 16
    1c48:	1d c0       	rjmp	.+58     	; 0x1c84 <vfprintf+0xd6>
    1c4a:	8d 32       	cpi	r24, 0x2D	; 45
    1c4c:	61 f0       	breq	.+24     	; 0x1c66 <vfprintf+0xb8>
    1c4e:	80 33       	cpi	r24, 0x30	; 48
    1c50:	69 f4       	brne	.+26     	; 0x1c6c <vfprintf+0xbe>
    1c52:	23 2d       	mov	r18, r3
    1c54:	21 60       	ori	r18, 0x01	; 1
    1c56:	16 c0       	rjmp	.+44     	; 0x1c84 <vfprintf+0xd6>
    1c58:	83 2d       	mov	r24, r3
    1c5a:	82 60       	ori	r24, 0x02	; 2
    1c5c:	38 2e       	mov	r3, r24
    1c5e:	e3 2d       	mov	r30, r3
    1c60:	e4 60       	ori	r30, 0x04	; 4
    1c62:	3e 2e       	mov	r3, r30
    1c64:	2a c0       	rjmp	.+84     	; 0x1cba <vfprintf+0x10c>
    1c66:	f3 2d       	mov	r31, r3
    1c68:	f8 60       	ori	r31, 0x08	; 8
    1c6a:	1d c0       	rjmp	.+58     	; 0x1ca6 <vfprintf+0xf8>
    1c6c:	37 fc       	sbrc	r3, 7
    1c6e:	2d c0       	rjmp	.+90     	; 0x1cca <vfprintf+0x11c>
    1c70:	20 ed       	ldi	r18, 0xD0	; 208
    1c72:	28 0f       	add	r18, r24
    1c74:	2a 30       	cpi	r18, 0x0A	; 10
    1c76:	40 f0       	brcs	.+16     	; 0x1c88 <vfprintf+0xda>
    1c78:	8e 32       	cpi	r24, 0x2E	; 46
    1c7a:	b9 f4       	brne	.+46     	; 0x1caa <vfprintf+0xfc>
    1c7c:	36 fc       	sbrc	r3, 6
    1c7e:	75 c1       	rjmp	.+746    	; 0x1f6a <vfprintf+0x3bc>
    1c80:	23 2d       	mov	r18, r3
    1c82:	20 64       	ori	r18, 0x40	; 64
    1c84:	32 2e       	mov	r3, r18
    1c86:	19 c0       	rjmp	.+50     	; 0x1cba <vfprintf+0x10c>
    1c88:	36 fe       	sbrs	r3, 6
    1c8a:	06 c0       	rjmp	.+12     	; 0x1c98 <vfprintf+0xea>
    1c8c:	8a e0       	ldi	r24, 0x0A	; 10
    1c8e:	98 9e       	mul	r9, r24
    1c90:	20 0d       	add	r18, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	92 2e       	mov	r9, r18
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <vfprintf+0x10c>
    1c98:	ea e0       	ldi	r30, 0x0A	; 10
    1c9a:	2e 9e       	mul	r2, r30
    1c9c:	20 0d       	add	r18, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	22 2e       	mov	r2, r18
    1ca2:	f3 2d       	mov	r31, r3
    1ca4:	f0 62       	ori	r31, 0x20	; 32
    1ca6:	3f 2e       	mov	r3, r31
    1ca8:	08 c0       	rjmp	.+16     	; 0x1cba <vfprintf+0x10c>
    1caa:	8c 36       	cpi	r24, 0x6C	; 108
    1cac:	21 f4       	brne	.+8      	; 0x1cb6 <vfprintf+0x108>
    1cae:	83 2d       	mov	r24, r3
    1cb0:	80 68       	ori	r24, 0x80	; 128
    1cb2:	38 2e       	mov	r3, r24
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <vfprintf+0x10c>
    1cb6:	88 36       	cpi	r24, 0x68	; 104
    1cb8:	41 f4       	brne	.+16     	; 0x1cca <vfprintf+0x11c>
    1cba:	f7 01       	movw	r30, r14
    1cbc:	93 fd       	sbrc	r25, 3
    1cbe:	85 91       	lpm	r24, Z+
    1cc0:	93 ff       	sbrs	r25, 3
    1cc2:	81 91       	ld	r24, Z+
    1cc4:	7f 01       	movw	r14, r30
    1cc6:	81 11       	cpse	r24, r1
    1cc8:	b3 cf       	rjmp	.-154    	; 0x1c30 <vfprintf+0x82>
    1cca:	98 2f       	mov	r25, r24
    1ccc:	9f 7d       	andi	r25, 0xDF	; 223
    1cce:	95 54       	subi	r25, 0x45	; 69
    1cd0:	93 30       	cpi	r25, 0x03	; 3
    1cd2:	28 f4       	brcc	.+10     	; 0x1cde <vfprintf+0x130>
    1cd4:	0c 5f       	subi	r16, 0xFC	; 252
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	9f e3       	ldi	r25, 0x3F	; 63
    1cda:	99 83       	std	Y+1, r25	; 0x01
    1cdc:	0d c0       	rjmp	.+26     	; 0x1cf8 <vfprintf+0x14a>
    1cde:	83 36       	cpi	r24, 0x63	; 99
    1ce0:	31 f0       	breq	.+12     	; 0x1cee <vfprintf+0x140>
    1ce2:	83 37       	cpi	r24, 0x73	; 115
    1ce4:	71 f0       	breq	.+28     	; 0x1d02 <vfprintf+0x154>
    1ce6:	83 35       	cpi	r24, 0x53	; 83
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <vfprintf+0x13e>
    1cea:	55 c0       	rjmp	.+170    	; 0x1d96 <vfprintf+0x1e8>
    1cec:	20 c0       	rjmp	.+64     	; 0x1d2e <vfprintf+0x180>
    1cee:	f8 01       	movw	r30, r16
    1cf0:	80 81       	ld	r24, Z
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	0e 5f       	subi	r16, 0xFE	; 254
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	88 24       	eor	r8, r8
    1cfa:	83 94       	inc	r8
    1cfc:	91 2c       	mov	r9, r1
    1cfe:	53 01       	movw	r10, r6
    1d00:	12 c0       	rjmp	.+36     	; 0x1d26 <vfprintf+0x178>
    1d02:	28 01       	movw	r4, r16
    1d04:	f2 e0       	ldi	r31, 0x02	; 2
    1d06:	4f 0e       	add	r4, r31
    1d08:	51 1c       	adc	r5, r1
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	a0 80       	ld	r10, Z
    1d0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1d10:	36 fe       	sbrs	r3, 6
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <vfprintf+0x16c>
    1d14:	69 2d       	mov	r22, r9
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfprintf+0x170>
    1d1a:	6f ef       	ldi	r22, 0xFF	; 255
    1d1c:	7f ef       	ldi	r23, 0xFF	; 255
    1d1e:	c5 01       	movw	r24, r10
    1d20:	4e d1       	rcall	.+668    	; 0x1fbe <strnlen>
    1d22:	4c 01       	movw	r8, r24
    1d24:	82 01       	movw	r16, r4
    1d26:	f3 2d       	mov	r31, r3
    1d28:	ff 77       	andi	r31, 0x7F	; 127
    1d2a:	3f 2e       	mov	r3, r31
    1d2c:	15 c0       	rjmp	.+42     	; 0x1d58 <vfprintf+0x1aa>
    1d2e:	28 01       	movw	r4, r16
    1d30:	22 e0       	ldi	r18, 0x02	; 2
    1d32:	42 0e       	add	r4, r18
    1d34:	51 1c       	adc	r5, r1
    1d36:	f8 01       	movw	r30, r16
    1d38:	a0 80       	ld	r10, Z
    1d3a:	b1 80       	ldd	r11, Z+1	; 0x01
    1d3c:	36 fe       	sbrs	r3, 6
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <vfprintf+0x198>
    1d40:	69 2d       	mov	r22, r9
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vfprintf+0x19c>
    1d46:	6f ef       	ldi	r22, 0xFF	; 255
    1d48:	7f ef       	ldi	r23, 0xFF	; 255
    1d4a:	c5 01       	movw	r24, r10
    1d4c:	2d d1       	rcall	.+602    	; 0x1fa8 <strnlen_P>
    1d4e:	4c 01       	movw	r8, r24
    1d50:	f3 2d       	mov	r31, r3
    1d52:	f0 68       	ori	r31, 0x80	; 128
    1d54:	3f 2e       	mov	r3, r31
    1d56:	82 01       	movw	r16, r4
    1d58:	33 fc       	sbrc	r3, 3
    1d5a:	19 c0       	rjmp	.+50     	; 0x1d8e <vfprintf+0x1e0>
    1d5c:	82 2d       	mov	r24, r2
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	88 16       	cp	r8, r24
    1d62:	99 06       	cpc	r9, r25
    1d64:	a0 f4       	brcc	.+40     	; 0x1d8e <vfprintf+0x1e0>
    1d66:	b6 01       	movw	r22, r12
    1d68:	80 e2       	ldi	r24, 0x20	; 32
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	33 d1       	rcall	.+614    	; 0x1fd4 <fputc>
    1d6e:	2a 94       	dec	r2
    1d70:	f5 cf       	rjmp	.-22     	; 0x1d5c <vfprintf+0x1ae>
    1d72:	f5 01       	movw	r30, r10
    1d74:	37 fc       	sbrc	r3, 7
    1d76:	85 91       	lpm	r24, Z+
    1d78:	37 fe       	sbrs	r3, 7
    1d7a:	81 91       	ld	r24, Z+
    1d7c:	5f 01       	movw	r10, r30
    1d7e:	b6 01       	movw	r22, r12
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	28 d1       	rcall	.+592    	; 0x1fd4 <fputc>
    1d84:	21 10       	cpse	r2, r1
    1d86:	2a 94       	dec	r2
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	82 1a       	sub	r8, r18
    1d8c:	91 08       	sbc	r9, r1
    1d8e:	81 14       	cp	r8, r1
    1d90:	91 04       	cpc	r9, r1
    1d92:	79 f7       	brne	.-34     	; 0x1d72 <vfprintf+0x1c4>
    1d94:	e1 c0       	rjmp	.+450    	; 0x1f58 <vfprintf+0x3aa>
    1d96:	84 36       	cpi	r24, 0x64	; 100
    1d98:	11 f0       	breq	.+4      	; 0x1d9e <vfprintf+0x1f0>
    1d9a:	89 36       	cpi	r24, 0x69	; 105
    1d9c:	39 f5       	brne	.+78     	; 0x1dec <vfprintf+0x23e>
    1d9e:	f8 01       	movw	r30, r16
    1da0:	37 fe       	sbrs	r3, 7
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <vfprintf+0x204>
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	0c 5f       	subi	r16, 0xFC	; 252
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	08 c0       	rjmp	.+16     	; 0x1dc2 <vfprintf+0x214>
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	07 2e       	mov	r0, r23
    1db8:	00 0c       	add	r0, r0
    1dba:	88 0b       	sbc	r24, r24
    1dbc:	99 0b       	sbc	r25, r25
    1dbe:	0e 5f       	subi	r16, 0xFE	; 254
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	f3 2d       	mov	r31, r3
    1dc4:	ff 76       	andi	r31, 0x6F	; 111
    1dc6:	3f 2e       	mov	r3, r31
    1dc8:	97 ff       	sbrs	r25, 7
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <vfprintf+0x230>
    1dcc:	90 95       	com	r25
    1dce:	80 95       	com	r24
    1dd0:	70 95       	com	r23
    1dd2:	61 95       	neg	r22
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	f0 68       	ori	r31, 0x80	; 128
    1ddc:	3f 2e       	mov	r3, r31
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	a3 01       	movw	r20, r6
    1de4:	33 d1       	rcall	.+614    	; 0x204c <__ultoa_invert>
    1de6:	88 2e       	mov	r8, r24
    1de8:	86 18       	sub	r8, r6
    1dea:	44 c0       	rjmp	.+136    	; 0x1e74 <vfprintf+0x2c6>
    1dec:	85 37       	cpi	r24, 0x75	; 117
    1dee:	31 f4       	brne	.+12     	; 0x1dfc <vfprintf+0x24e>
    1df0:	23 2d       	mov	r18, r3
    1df2:	2f 7e       	andi	r18, 0xEF	; 239
    1df4:	b2 2e       	mov	r11, r18
    1df6:	2a e0       	ldi	r18, 0x0A	; 10
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	25 c0       	rjmp	.+74     	; 0x1e46 <vfprintf+0x298>
    1dfc:	93 2d       	mov	r25, r3
    1dfe:	99 7f       	andi	r25, 0xF9	; 249
    1e00:	b9 2e       	mov	r11, r25
    1e02:	8f 36       	cpi	r24, 0x6F	; 111
    1e04:	c1 f0       	breq	.+48     	; 0x1e36 <vfprintf+0x288>
    1e06:	18 f4       	brcc	.+6      	; 0x1e0e <vfprintf+0x260>
    1e08:	88 35       	cpi	r24, 0x58	; 88
    1e0a:	79 f0       	breq	.+30     	; 0x1e2a <vfprintf+0x27c>
    1e0c:	ae c0       	rjmp	.+348    	; 0x1f6a <vfprintf+0x3bc>
    1e0e:	80 37       	cpi	r24, 0x70	; 112
    1e10:	19 f0       	breq	.+6      	; 0x1e18 <vfprintf+0x26a>
    1e12:	88 37       	cpi	r24, 0x78	; 120
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <vfprintf+0x270>
    1e16:	a9 c0       	rjmp	.+338    	; 0x1f6a <vfprintf+0x3bc>
    1e18:	e9 2f       	mov	r30, r25
    1e1a:	e0 61       	ori	r30, 0x10	; 16
    1e1c:	be 2e       	mov	r11, r30
    1e1e:	b4 fe       	sbrs	r11, 4
    1e20:	0d c0       	rjmp	.+26     	; 0x1e3c <vfprintf+0x28e>
    1e22:	fb 2d       	mov	r31, r11
    1e24:	f4 60       	ori	r31, 0x04	; 4
    1e26:	bf 2e       	mov	r11, r31
    1e28:	09 c0       	rjmp	.+18     	; 0x1e3c <vfprintf+0x28e>
    1e2a:	34 fe       	sbrs	r3, 4
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <vfprintf+0x294>
    1e2e:	29 2f       	mov	r18, r25
    1e30:	26 60       	ori	r18, 0x06	; 6
    1e32:	b2 2e       	mov	r11, r18
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <vfprintf+0x294>
    1e36:	28 e0       	ldi	r18, 0x08	; 8
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	05 c0       	rjmp	.+10     	; 0x1e46 <vfprintf+0x298>
    1e3c:	20 e1       	ldi	r18, 0x10	; 16
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <vfprintf+0x298>
    1e42:	20 e1       	ldi	r18, 0x10	; 16
    1e44:	32 e0       	ldi	r19, 0x02	; 2
    1e46:	f8 01       	movw	r30, r16
    1e48:	b7 fe       	sbrs	r11, 7
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <vfprintf+0x2ac>
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	0c 5f       	subi	r16, 0xFC	; 252
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	06 c0       	rjmp	.+12     	; 0x1e66 <vfprintf+0x2b8>
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 5f       	subi	r16, 0xFE	; 254
    1e64:	1f 4f       	sbci	r17, 0xFF	; 255
    1e66:	a3 01       	movw	r20, r6
    1e68:	f1 d0       	rcall	.+482    	; 0x204c <__ultoa_invert>
    1e6a:	88 2e       	mov	r8, r24
    1e6c:	86 18       	sub	r8, r6
    1e6e:	fb 2d       	mov	r31, r11
    1e70:	ff 77       	andi	r31, 0x7F	; 127
    1e72:	3f 2e       	mov	r3, r31
    1e74:	36 fe       	sbrs	r3, 6
    1e76:	0d c0       	rjmp	.+26     	; 0x1e92 <vfprintf+0x2e4>
    1e78:	23 2d       	mov	r18, r3
    1e7a:	2e 7f       	andi	r18, 0xFE	; 254
    1e7c:	a2 2e       	mov	r10, r18
    1e7e:	89 14       	cp	r8, r9
    1e80:	58 f4       	brcc	.+22     	; 0x1e98 <vfprintf+0x2ea>
    1e82:	34 fe       	sbrs	r3, 4
    1e84:	0b c0       	rjmp	.+22     	; 0x1e9c <vfprintf+0x2ee>
    1e86:	32 fc       	sbrc	r3, 2
    1e88:	09 c0       	rjmp	.+18     	; 0x1e9c <vfprintf+0x2ee>
    1e8a:	83 2d       	mov	r24, r3
    1e8c:	8e 7e       	andi	r24, 0xEE	; 238
    1e8e:	a8 2e       	mov	r10, r24
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x2ee>
    1e92:	b8 2c       	mov	r11, r8
    1e94:	a3 2c       	mov	r10, r3
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <vfprintf+0x2f0>
    1e98:	b8 2c       	mov	r11, r8
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <vfprintf+0x2f0>
    1e9c:	b9 2c       	mov	r11, r9
    1e9e:	a4 fe       	sbrs	r10, 4
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <vfprintf+0x312>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e8 0d       	add	r30, r8
    1ea6:	f1 1d       	adc	r31, r1
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 33       	cpi	r24, 0x30	; 48
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <vfprintf+0x308>
    1eae:	9a 2d       	mov	r25, r10
    1eb0:	99 7e       	andi	r25, 0xE9	; 233
    1eb2:	a9 2e       	mov	r10, r25
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <vfprintf+0x31a>
    1eb6:	a2 fe       	sbrs	r10, 2
    1eb8:	06 c0       	rjmp	.+12     	; 0x1ec6 <vfprintf+0x318>
    1eba:	b3 94       	inc	r11
    1ebc:	b3 94       	inc	r11
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <vfprintf+0x31a>
    1ec0:	8a 2d       	mov	r24, r10
    1ec2:	86 78       	andi	r24, 0x86	; 134
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <vfprintf+0x31a>
    1ec6:	b3 94       	inc	r11
    1ec8:	a3 fc       	sbrc	r10, 3
    1eca:	10 c0       	rjmp	.+32     	; 0x1eec <vfprintf+0x33e>
    1ecc:	a0 fe       	sbrs	r10, 0
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <vfprintf+0x32e>
    1ed0:	b2 14       	cp	r11, r2
    1ed2:	80 f4       	brcc	.+32     	; 0x1ef4 <vfprintf+0x346>
    1ed4:	28 0c       	add	r2, r8
    1ed6:	92 2c       	mov	r9, r2
    1ed8:	9b 18       	sub	r9, r11
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <vfprintf+0x348>
    1edc:	b2 14       	cp	r11, r2
    1ede:	58 f4       	brcc	.+22     	; 0x1ef6 <vfprintf+0x348>
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	80 e2       	ldi	r24, 0x20	; 32
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	76 d0       	rcall	.+236    	; 0x1fd4 <fputc>
    1ee8:	b3 94       	inc	r11
    1eea:	f8 cf       	rjmp	.-16     	; 0x1edc <vfprintf+0x32e>
    1eec:	b2 14       	cp	r11, r2
    1eee:	18 f4       	brcc	.+6      	; 0x1ef6 <vfprintf+0x348>
    1ef0:	2b 18       	sub	r2, r11
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <vfprintf+0x34a>
    1ef4:	98 2c       	mov	r9, r8
    1ef6:	21 2c       	mov	r2, r1
    1ef8:	a4 fe       	sbrs	r10, 4
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <vfprintf+0x36c>
    1efc:	b6 01       	movw	r22, r12
    1efe:	80 e3       	ldi	r24, 0x30	; 48
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	68 d0       	rcall	.+208    	; 0x1fd4 <fputc>
    1f04:	a2 fe       	sbrs	r10, 2
    1f06:	16 c0       	rjmp	.+44     	; 0x1f34 <vfprintf+0x386>
    1f08:	a1 fc       	sbrc	r10, 1
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <vfprintf+0x364>
    1f0c:	88 e7       	ldi	r24, 0x78	; 120
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <vfprintf+0x368>
    1f12:	88 e5       	ldi	r24, 0x58	; 88
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	b6 01       	movw	r22, r12
    1f18:	0c c0       	rjmp	.+24     	; 0x1f32 <vfprintf+0x384>
    1f1a:	8a 2d       	mov	r24, r10
    1f1c:	86 78       	andi	r24, 0x86	; 134
    1f1e:	51 f0       	breq	.+20     	; 0x1f34 <vfprintf+0x386>
    1f20:	a1 fe       	sbrs	r10, 1
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0x37a>
    1f24:	8b e2       	ldi	r24, 0x2B	; 43
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <vfprintf+0x37c>
    1f28:	80 e2       	ldi	r24, 0x20	; 32
    1f2a:	a7 fc       	sbrc	r10, 7
    1f2c:	8d e2       	ldi	r24, 0x2D	; 45
    1f2e:	b6 01       	movw	r22, r12
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	50 d0       	rcall	.+160    	; 0x1fd4 <fputc>
    1f34:	89 14       	cp	r8, r9
    1f36:	30 f4       	brcc	.+12     	; 0x1f44 <vfprintf+0x396>
    1f38:	b6 01       	movw	r22, r12
    1f3a:	80 e3       	ldi	r24, 0x30	; 48
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	4a d0       	rcall	.+148    	; 0x1fd4 <fputc>
    1f40:	9a 94       	dec	r9
    1f42:	f8 cf       	rjmp	.-16     	; 0x1f34 <vfprintf+0x386>
    1f44:	8a 94       	dec	r8
    1f46:	f3 01       	movw	r30, r6
    1f48:	e8 0d       	add	r30, r8
    1f4a:	f1 1d       	adc	r31, r1
    1f4c:	80 81       	ld	r24, Z
    1f4e:	b6 01       	movw	r22, r12
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	40 d0       	rcall	.+128    	; 0x1fd4 <fputc>
    1f54:	81 10       	cpse	r8, r1
    1f56:	f6 cf       	rjmp	.-20     	; 0x1f44 <vfprintf+0x396>
    1f58:	22 20       	and	r2, r2
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <vfprintf+0x3b0>
    1f5c:	4e ce       	rjmp	.-868    	; 0x1bfa <vfprintf+0x4c>
    1f5e:	b6 01       	movw	r22, r12
    1f60:	80 e2       	ldi	r24, 0x20	; 32
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	37 d0       	rcall	.+110    	; 0x1fd4 <fputc>
    1f66:	2a 94       	dec	r2
    1f68:	f7 cf       	rjmp	.-18     	; 0x1f58 <vfprintf+0x3aa>
    1f6a:	f6 01       	movw	r30, r12
    1f6c:	86 81       	ldd	r24, Z+6	; 0x06
    1f6e:	97 81       	ldd	r25, Z+7	; 0x07
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <vfprintf+0x3c8>
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	9f ef       	ldi	r25, 0xFF	; 255
    1f76:	2b 96       	adiw	r28, 0x0b	; 11
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	bf 90       	pop	r11
    1f94:	af 90       	pop	r10
    1f96:	9f 90       	pop	r9
    1f98:	8f 90       	pop	r8
    1f9a:	7f 90       	pop	r7
    1f9c:	6f 90       	pop	r6
    1f9e:	5f 90       	pop	r5
    1fa0:	4f 90       	pop	r4
    1fa2:	3f 90       	pop	r3
    1fa4:	2f 90       	pop	r2
    1fa6:	08 95       	ret

00001fa8 <strnlen_P>:
    1fa8:	fc 01       	movw	r30, r24
    1faa:	05 90       	lpm	r0, Z+
    1fac:	61 50       	subi	r22, 0x01	; 1
    1fae:	70 40       	sbci	r23, 0x00	; 0
    1fb0:	01 10       	cpse	r0, r1
    1fb2:	d8 f7       	brcc	.-10     	; 0x1faa <strnlen_P+0x2>
    1fb4:	80 95       	com	r24
    1fb6:	90 95       	com	r25
    1fb8:	8e 0f       	add	r24, r30
    1fba:	9f 1f       	adc	r25, r31
    1fbc:	08 95       	ret

00001fbe <strnlen>:
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	61 50       	subi	r22, 0x01	; 1
    1fc2:	70 40       	sbci	r23, 0x00	; 0
    1fc4:	01 90       	ld	r0, Z+
    1fc6:	01 10       	cpse	r0, r1
    1fc8:	d8 f7       	brcc	.-10     	; 0x1fc0 <strnlen+0x2>
    1fca:	80 95       	com	r24
    1fcc:	90 95       	com	r25
    1fce:	8e 0f       	add	r24, r30
    1fd0:	9f 1f       	adc	r25, r31
    1fd2:	08 95       	ret

00001fd4 <fputc>:
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	fb 01       	movw	r30, r22
    1fde:	23 81       	ldd	r18, Z+3	; 0x03
    1fe0:	21 fd       	sbrc	r18, 1
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <fputc+0x16>
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	9f ef       	ldi	r25, 0xFF	; 255
    1fe8:	2c c0       	rjmp	.+88     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    1fea:	22 ff       	sbrs	r18, 2
    1fec:	16 c0       	rjmp	.+44     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1fee:	46 81       	ldd	r20, Z+6	; 0x06
    1ff0:	57 81       	ldd	r21, Z+7	; 0x07
    1ff2:	24 81       	ldd	r18, Z+4	; 0x04
    1ff4:	35 81       	ldd	r19, Z+5	; 0x05
    1ff6:	42 17       	cp	r20, r18
    1ff8:	53 07       	cpc	r21, r19
    1ffa:	44 f4       	brge	.+16     	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    1ffc:	a0 81       	ld	r26, Z
    1ffe:	b1 81       	ldd	r27, Z+1	; 0x01
    2000:	9d 01       	movw	r18, r26
    2002:	2f 5f       	subi	r18, 0xFF	; 255
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	31 83       	std	Z+1, r19	; 0x01
    2008:	20 83       	st	Z, r18
    200a:	8c 93       	st	X, r24
    200c:	26 81       	ldd	r18, Z+6	; 0x06
    200e:	37 81       	ldd	r19, Z+7	; 0x07
    2010:	2f 5f       	subi	r18, 0xFF	; 255
    2012:	3f 4f       	sbci	r19, 0xFF	; 255
    2014:	37 83       	std	Z+7, r19	; 0x07
    2016:	26 83       	std	Z+6, r18	; 0x06
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    201a:	8b 01       	movw	r16, r22
    201c:	ec 01       	movw	r28, r24
    201e:	fb 01       	movw	r30, r22
    2020:	00 84       	ldd	r0, Z+8	; 0x08
    2022:	f1 85       	ldd	r31, Z+9	; 0x09
    2024:	e0 2d       	mov	r30, r0
    2026:	09 95       	icall
    2028:	89 2b       	or	r24, r25
    202a:	e1 f6       	brne	.-72     	; 0x1fe4 <fputc+0x10>
    202c:	d8 01       	movw	r26, r16
    202e:	16 96       	adiw	r26, 0x06	; 6
    2030:	8d 91       	ld	r24, X+
    2032:	9c 91       	ld	r25, X
    2034:	17 97       	sbiw	r26, 0x07	; 7
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	17 96       	adiw	r26, 0x07	; 7
    203a:	9c 93       	st	X, r25
    203c:	8e 93       	st	-X, r24
    203e:	16 97       	sbiw	r26, 0x06	; 6
    2040:	ce 01       	movw	r24, r28
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	08 95       	ret

0000204c <__ultoa_invert>:
    204c:	fa 01       	movw	r30, r20
    204e:	aa 27       	eor	r26, r26
    2050:	28 30       	cpi	r18, 0x08	; 8
    2052:	51 f1       	breq	.+84     	; 0x20a8 <__ultoa_invert+0x5c>
    2054:	20 31       	cpi	r18, 0x10	; 16
    2056:	81 f1       	breq	.+96     	; 0x20b8 <__ultoa_invert+0x6c>
    2058:	e8 94       	clt
    205a:	6f 93       	push	r22
    205c:	6e 7f       	andi	r22, 0xFE	; 254
    205e:	6e 5f       	subi	r22, 0xFE	; 254
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	8f 4f       	sbci	r24, 0xFF	; 255
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	af 4f       	sbci	r26, 0xFF	; 255
    2068:	b1 e0       	ldi	r27, 0x01	; 1
    206a:	3e d0       	rcall	.+124    	; 0x20e8 <__ultoa_invert+0x9c>
    206c:	b4 e0       	ldi	r27, 0x04	; 4
    206e:	3c d0       	rcall	.+120    	; 0x20e8 <__ultoa_invert+0x9c>
    2070:	67 0f       	add	r22, r23
    2072:	78 1f       	adc	r23, r24
    2074:	89 1f       	adc	r24, r25
    2076:	9a 1f       	adc	r25, r26
    2078:	a1 1d       	adc	r26, r1
    207a:	68 0f       	add	r22, r24
    207c:	79 1f       	adc	r23, r25
    207e:	8a 1f       	adc	r24, r26
    2080:	91 1d       	adc	r25, r1
    2082:	a1 1d       	adc	r26, r1
    2084:	6a 0f       	add	r22, r26
    2086:	71 1d       	adc	r23, r1
    2088:	81 1d       	adc	r24, r1
    208a:	91 1d       	adc	r25, r1
    208c:	a1 1d       	adc	r26, r1
    208e:	20 d0       	rcall	.+64     	; 0x20d0 <__ultoa_invert+0x84>
    2090:	09 f4       	brne	.+2      	; 0x2094 <__ultoa_invert+0x48>
    2092:	68 94       	set
    2094:	3f 91       	pop	r19
    2096:	2a e0       	ldi	r18, 0x0A	; 10
    2098:	26 9f       	mul	r18, r22
    209a:	11 24       	eor	r1, r1
    209c:	30 19       	sub	r19, r0
    209e:	30 5d       	subi	r19, 0xD0	; 208
    20a0:	31 93       	st	Z+, r19
    20a2:	de f6       	brtc	.-74     	; 0x205a <__ultoa_invert+0xe>
    20a4:	cf 01       	movw	r24, r30
    20a6:	08 95       	ret
    20a8:	46 2f       	mov	r20, r22
    20aa:	47 70       	andi	r20, 0x07	; 7
    20ac:	40 5d       	subi	r20, 0xD0	; 208
    20ae:	41 93       	st	Z+, r20
    20b0:	b3 e0       	ldi	r27, 0x03	; 3
    20b2:	0f d0       	rcall	.+30     	; 0x20d2 <__ultoa_invert+0x86>
    20b4:	c9 f7       	brne	.-14     	; 0x20a8 <__ultoa_invert+0x5c>
    20b6:	f6 cf       	rjmp	.-20     	; 0x20a4 <__ultoa_invert+0x58>
    20b8:	46 2f       	mov	r20, r22
    20ba:	4f 70       	andi	r20, 0x0F	; 15
    20bc:	40 5d       	subi	r20, 0xD0	; 208
    20be:	4a 33       	cpi	r20, 0x3A	; 58
    20c0:	18 f0       	brcs	.+6      	; 0x20c8 <__ultoa_invert+0x7c>
    20c2:	49 5d       	subi	r20, 0xD9	; 217
    20c4:	31 fd       	sbrc	r19, 1
    20c6:	40 52       	subi	r20, 0x20	; 32
    20c8:	41 93       	st	Z+, r20
    20ca:	02 d0       	rcall	.+4      	; 0x20d0 <__ultoa_invert+0x84>
    20cc:	a9 f7       	brne	.-22     	; 0x20b8 <__ultoa_invert+0x6c>
    20ce:	ea cf       	rjmp	.-44     	; 0x20a4 <__ultoa_invert+0x58>
    20d0:	b4 e0       	ldi	r27, 0x04	; 4
    20d2:	a6 95       	lsr	r26
    20d4:	97 95       	ror	r25
    20d6:	87 95       	ror	r24
    20d8:	77 95       	ror	r23
    20da:	67 95       	ror	r22
    20dc:	ba 95       	dec	r27
    20de:	c9 f7       	brne	.-14     	; 0x20d2 <__ultoa_invert+0x86>
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	61 05       	cpc	r22, r1
    20e4:	71 05       	cpc	r23, r1
    20e6:	08 95       	ret
    20e8:	9b 01       	movw	r18, r22
    20ea:	ac 01       	movw	r20, r24
    20ec:	0a 2e       	mov	r0, r26
    20ee:	06 94       	lsr	r0
    20f0:	57 95       	ror	r21
    20f2:	47 95       	ror	r20
    20f4:	37 95       	ror	r19
    20f6:	27 95       	ror	r18
    20f8:	ba 95       	dec	r27
    20fa:	c9 f7       	brne	.-14     	; 0x20ee <__ultoa_invert+0xa2>
    20fc:	62 0f       	add	r22, r18
    20fe:	73 1f       	adc	r23, r19
    2100:	84 1f       	adc	r24, r20
    2102:	95 1f       	adc	r25, r21
    2104:	a0 1d       	adc	r26, r0
    2106:	08 95       	ret

00002108 <_exit>:
    2108:	f8 94       	cli

0000210a <__stop_program>:
    210a:	ff cf       	rjmp	.-2      	; 0x210a <__stop_program>
