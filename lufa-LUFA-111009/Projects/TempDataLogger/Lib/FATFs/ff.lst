   1               		.file	"ff.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.mem_cpy,"ax",@progbits
  13               	mem_cpy:
  14               	.LFB139:
  15               		.file 1 "Lib/FATFs/ff.c"
   1:Lib/FATFs/ff.c **** /*----------------------------------------------------------------------------/
   2:Lib/FATFs/ff.c **** /  FatFs - FAT file system module  R0.08b                 (C)ChaN, 2011
   3:Lib/FATFs/ff.c **** /-----------------------------------------------------------------------------/
   4:Lib/FATFs/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:Lib/FATFs/ff.c **** / This is a free software that opened for education, research and commercial
   6:Lib/FATFs/ff.c **** / developments under license policy of following terms.
   7:Lib/FATFs/ff.c **** /
   8:Lib/FATFs/ff.c **** /  Copyright (C) 2011, ChaN, all right reserved.
   9:Lib/FATFs/ff.c **** /
  10:Lib/FATFs/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:Lib/FATFs/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:Lib/FATFs/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:Lib/FATFs/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:Lib/FATFs/ff.c **** /
  15:Lib/FATFs/ff.c **** /-----------------------------------------------------------------------------/
  16:Lib/FATFs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:Lib/FATFs/ff.c **** /
  18:Lib/FATFs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:Lib/FATFs/ff.c **** /
  20:Lib/FATFs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:Lib/FATFs/ff.c **** /                   Removed unbuffered mode.
  22:Lib/FATFs/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:Lib/FATFs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:Lib/FATFs/ff.c **** /
  25:Lib/FATFs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:Lib/FATFs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:Lib/FATFs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:Lib/FATFs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:Lib/FATFs/ff.c **** /
  30:Lib/FATFs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:Lib/FATFs/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:Lib/FATFs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:Lib/FATFs/ff.c **** /                   Added f_mkfs().
  34:Lib/FATFs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:Lib/FATFs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:Lib/FATFs/ff.c **** /                   Added minimization level 3.
  37:Lib/FATFs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:Lib/FATFs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:Lib/FATFs/ff.c **** /                   Added FSInfo support.
  40:Lib/FATFs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:Lib/FATFs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:Lib/FATFs/ff.c **** /
  43:Lib/FATFs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:Lib/FATFs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:Lib/FATFs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:Lib/FATFs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:Lib/FATFs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:Lib/FATFs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:Lib/FATFs/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:Lib/FATFs/ff.c **** /
  51:Lib/FATFs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:Lib/FATFs/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:Lib/FATFs/ff.c **** /
  54:Lib/FATFs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:Lib/FATFs/ff.c **** /                   Added long file name feature.
  56:Lib/FATFs/ff.c **** /                   Added multiple code page feature.
  57:Lib/FATFs/ff.c **** /                   Added re-entrancy for multitask operation.
  58:Lib/FATFs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:Lib/FATFs/ff.c **** /                   Added rewind option to f_readdir().
  60:Lib/FATFs/ff.c **** /                   Changed result code of critical errors.
  61:Lib/FATFs/ff.c **** /                   Renamed string functions to avoid name collision.
  62:Lib/FATFs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:Lib/FATFs/ff.c **** /                   Added multiple sector size feature.
  64:Lib/FATFs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:Lib/FATFs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:Lib/FATFs/ff.c **** /                   Added relative path feature.
  67:Lib/FATFs/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:Lib/FATFs/ff.c **** /                   Added proper case conversion to extended char.
  69:Lib/FATFs/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:Lib/FATFs/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:Lib/FATFs/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  72:Lib/FATFs/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:Lib/FATFs/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:Lib/FATFs/ff.c **** /
  75:Lib/FATFs/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:Lib/FATFs/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:Lib/FATFs/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:Lib/FATFs/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:Lib/FATFs/ff.c **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:Lib/FATFs/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:Lib/FATFs/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:Lib/FATFs/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:Lib/FATFs/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:Lib/FATFs/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:Lib/FATFs/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:Lib/FATFs/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:Lib/FATFs/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  88:Lib/FATFs/ff.c **** /                   Extended format syntax of f_printf function.
  89:Lib/FATFs/ff.c **** /                   Ignores duplicated directory separators in given path names.
  90:Lib/FATFs/ff.c **** /---------------------------------------------------------------------------*/
  91:Lib/FATFs/ff.c **** 
  92:Lib/FATFs/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  93:Lib/FATFs/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  94:Lib/FATFs/ff.c **** 
  95:Lib/FATFs/ff.c **** 
  96:Lib/FATFs/ff.c **** /*--------------------------------------------------------------------------
  97:Lib/FATFs/ff.c **** 
  98:Lib/FATFs/ff.c ****    Module Private Definitions
  99:Lib/FATFs/ff.c **** 
 100:Lib/FATFs/ff.c **** ---------------------------------------------------------------------------*/
 101:Lib/FATFs/ff.c **** 
 102:Lib/FATFs/ff.c **** #if _FATFS != 8237
 103:Lib/FATFs/ff.c **** #error Wrong include file (ff.h).
 104:Lib/FATFs/ff.c **** #endif
 105:Lib/FATFs/ff.c **** 
 106:Lib/FATFs/ff.c **** 
 107:Lib/FATFs/ff.c **** /* Definitions on sector size */
 108:Lib/FATFs/ff.c **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 109:Lib/FATFs/ff.c **** #error Wrong sector size.
 110:Lib/FATFs/ff.c **** #endif
 111:Lib/FATFs/ff.c **** #if _MAX_SS != 512
 112:Lib/FATFs/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Multiple sector size */
 113:Lib/FATFs/ff.c **** #else
 114:Lib/FATFs/ff.c **** #define	SS(fs)	512U			/* Fixed sector size */
 115:Lib/FATFs/ff.c **** #endif
 116:Lib/FATFs/ff.c **** 
 117:Lib/FATFs/ff.c **** 
 118:Lib/FATFs/ff.c **** /* Reentrancy related */
 119:Lib/FATFs/ff.c **** #if _FS_REENTRANT
 120:Lib/FATFs/ff.c **** #if _USE_LFN == 1
 121:Lib/FATFs/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
 122:Lib/FATFs/ff.c **** #endif
 123:Lib/FATFs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 124:Lib/FATFs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 125:Lib/FATFs/ff.c **** #else
 126:Lib/FATFs/ff.c **** #define	ENTER_FF(fs)
 127:Lib/FATFs/ff.c **** #define LEAVE_FF(fs, res)	return res
 128:Lib/FATFs/ff.c **** #endif
 129:Lib/FATFs/ff.c **** 
 130:Lib/FATFs/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 131:Lib/FATFs/ff.c **** 
 132:Lib/FATFs/ff.c **** 
 133:Lib/FATFs/ff.c **** /* File shareing feature */
 134:Lib/FATFs/ff.c **** #if _FS_SHARE
 135:Lib/FATFs/ff.c **** #if _FS_READONLY
 136:Lib/FATFs/ff.c **** #error _FS_SHARE must be 0 on read-only cfg.
 137:Lib/FATFs/ff.c **** #endif
 138:Lib/FATFs/ff.c **** typedef struct {
 139:Lib/FATFs/ff.c **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 140:Lib/FATFs/ff.c **** 	DWORD clu;				/* File ID 2, directory */
 141:Lib/FATFs/ff.c **** 	WORD idx;				/* File ID 3, directory index */
 142:Lib/FATFs/ff.c **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 143:Lib/FATFs/ff.c **** } FILESEM;
 144:Lib/FATFs/ff.c **** #endif
 145:Lib/FATFs/ff.c **** 
 146:Lib/FATFs/ff.c **** 
 147:Lib/FATFs/ff.c **** /* Misc definitions */
 148:Lib/FATFs/ff.c **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
 149:Lib/FATFs/ff.c **** #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16)
 150:Lib/FATFs/ff.c **** 
 151:Lib/FATFs/ff.c **** 
 152:Lib/FATFs/ff.c **** /* DBCS code ranges and SBCS extend char conversion table */
 153:Lib/FATFs/ff.c **** 
 154:Lib/FATFs/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 155:Lib/FATFs/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 156:Lib/FATFs/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 157:Lib/FATFs/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 158:Lib/FATFs/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 159:Lib/FATFs/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 160:Lib/FATFs/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 161:Lib/FATFs/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 162:Lib/FATFs/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 163:Lib/FATFs/ff.c **** 
 164:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 165:Lib/FATFs/ff.c **** #define _DF1S	0x81
 166:Lib/FATFs/ff.c **** #define _DF1E	0xFE
 167:Lib/FATFs/ff.c **** #define _DS1S	0x40
 168:Lib/FATFs/ff.c **** #define _DS1E	0x7E
 169:Lib/FATFs/ff.c **** #define _DS2S	0x80
 170:Lib/FATFs/ff.c **** #define _DS2E	0xFE
 171:Lib/FATFs/ff.c **** 
 172:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 173:Lib/FATFs/ff.c **** #define _DF1S	0x81
 174:Lib/FATFs/ff.c **** #define _DF1E	0xFE
 175:Lib/FATFs/ff.c **** #define _DS1S	0x41
 176:Lib/FATFs/ff.c **** #define _DS1E	0x5A
 177:Lib/FATFs/ff.c **** #define _DS2S	0x61
 178:Lib/FATFs/ff.c **** #define _DS2E	0x7A
 179:Lib/FATFs/ff.c **** #define _DS3S	0x81
 180:Lib/FATFs/ff.c **** #define _DS3E	0xFE
 181:Lib/FATFs/ff.c **** 
 182:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 183:Lib/FATFs/ff.c **** #define _DF1S	0x81
 184:Lib/FATFs/ff.c **** #define _DF1E	0xFE
 185:Lib/FATFs/ff.c **** #define _DS1S	0x40
 186:Lib/FATFs/ff.c **** #define _DS1E	0x7E
 187:Lib/FATFs/ff.c **** #define _DS2S	0xA1
 188:Lib/FATFs/ff.c **** #define _DS2E	0xFE
 189:Lib/FATFs/ff.c **** 
 190:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 191:Lib/FATFs/ff.c **** #define _DF1S	0
 192:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 193:Lib/FATFs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 194:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 195:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 196:Lib/FATFs/ff.c **** 
 197:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 198:Lib/FATFs/ff.c **** #define _DF1S	0
 199:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 200:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 201:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 202:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 203:Lib/FATFs/ff.c **** 
 204:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 205:Lib/FATFs/ff.c **** #define _DF1S	0
 206:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 207:Lib/FATFs/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 208:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 209:Lib/FATFs/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 210:Lib/FATFs/ff.c **** 
 211:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 212:Lib/FATFs/ff.c **** #define _DF1S	0
 213:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 214:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 215:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 216:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 217:Lib/FATFs/ff.c **** 
 218:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 219:Lib/FATFs/ff.c **** #define _DF1S	0
 220:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 221:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 222:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 223:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 224:Lib/FATFs/ff.c **** 
 225:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 226:Lib/FATFs/ff.c **** #define _DF1S	0
 227:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 228:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 229:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 230:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 231:Lib/FATFs/ff.c **** 
 232:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 233:Lib/FATFs/ff.c **** #define _DF1S	0
 234:Lib/FATFs/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 235:Lib/FATFs/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 236:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 237:Lib/FATFs/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 238:Lib/FATFs/ff.c **** 
 239:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 240:Lib/FATFs/ff.c **** #define _DF1S	0
 241:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 242:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 243:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 244:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 245:Lib/FATFs/ff.c **** 
 246:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 247:Lib/FATFs/ff.c **** #define _DF1S	0
 248:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 249:Lib/FATFs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 250:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 251:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 252:Lib/FATFs/ff.c **** 
 253:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 254:Lib/FATFs/ff.c **** #define _DF1S	0
 255:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 256:Lib/FATFs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 257:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 258:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 259:Lib/FATFs/ff.c **** 
 260:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 261:Lib/FATFs/ff.c **** #define _DF1S	0
 262:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 263:Lib/FATFs/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 264:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 265:Lib/FATFs/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 266:Lib/FATFs/ff.c **** 
 267:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 268:Lib/FATFs/ff.c **** #define _DF1S	0
 269:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 270:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 271:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 272:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 273:Lib/FATFs/ff.c **** 
 274:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 275:Lib/FATFs/ff.c **** #define _DF1S	0
 276:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 277:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 278:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 279:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 280:Lib/FATFs/ff.c **** 
 281:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 282:Lib/FATFs/ff.c **** #define _DF1S	0
 283:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 284:Lib/FATFs/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 285:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 286:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 287:Lib/FATFs/ff.c **** 
 288:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 289:Lib/FATFs/ff.c **** #define _DF1S	0
 290:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 291:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 292:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 293:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 294:Lib/FATFs/ff.c **** 
 295:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 296:Lib/FATFs/ff.c **** #define _DF1S	0
 297:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 298:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 299:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 300:Lib/FATFs/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 301:Lib/FATFs/ff.c **** 
 302:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 303:Lib/FATFs/ff.c **** #define _DF1S	0
 304:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 305:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 306:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 307:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 308:Lib/FATFs/ff.c **** 
 309:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 310:Lib/FATFs/ff.c **** #define _DF1S	0
 311:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 312:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 313:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 314:Lib/FATFs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 315:Lib/FATFs/ff.c **** 
 316:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 317:Lib/FATFs/ff.c **** #define _DF1S	0
 318:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 319:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 320:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 321:Lib/FATFs/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 322:Lib/FATFs/ff.c **** 
 323:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 324:Lib/FATFs/ff.c **** #define _DF1S	0
 325:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 326:Lib/FATFs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 327:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 328:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 329:Lib/FATFs/ff.c **** 
 330:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 331:Lib/FATFs/ff.c **** #define _DF1S	0
 332:Lib/FATFs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 333:Lib/FATFs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 334:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 335:Lib/FATFs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 336:Lib/FATFs/ff.c **** 
 337:Lib/FATFs/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 338:Lib/FATFs/ff.c **** #if _USE_LFN
 339:Lib/FATFs/ff.c **** #error Cannot use LFN feature without valid code page.
 340:Lib/FATFs/ff.c **** #endif
 341:Lib/FATFs/ff.c **** #define _DF1S	0
 342:Lib/FATFs/ff.c **** 
 343:Lib/FATFs/ff.c **** #else
 344:Lib/FATFs/ff.c **** #error Unknown code page
 345:Lib/FATFs/ff.c **** 
 346:Lib/FATFs/ff.c **** #endif
 347:Lib/FATFs/ff.c **** 
 348:Lib/FATFs/ff.c **** 
 349:Lib/FATFs/ff.c **** /* Character code support macros */
 350:Lib/FATFs/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 351:Lib/FATFs/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 352:Lib/FATFs/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 353:Lib/FATFs/ff.c **** 
 354:Lib/FATFs/ff.c **** #if _DF1S		/* Code page is DBCS */
 355:Lib/FATFs/ff.c **** 
 356:Lib/FATFs/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 357:Lib/FATFs/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 358:Lib/FATFs/ff.c **** #else			/* One 1st byte area */
 359:Lib/FATFs/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 360:Lib/FATFs/ff.c **** #endif
 361:Lib/FATFs/ff.c **** 
 362:Lib/FATFs/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 363:Lib/FATFs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 364:Lib/FATFs/ff.c **** #else			/* Two 2nd byte areas */
 365:Lib/FATFs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 366:Lib/FATFs/ff.c **** #endif
 367:Lib/FATFs/ff.c **** 
 368:Lib/FATFs/ff.c **** #else			/* Code page is SBCS */
 369:Lib/FATFs/ff.c **** 
 370:Lib/FATFs/ff.c **** #define IsDBCS1(c)	0
 371:Lib/FATFs/ff.c **** #define IsDBCS2(c)	0
 372:Lib/FATFs/ff.c **** 
 373:Lib/FATFs/ff.c **** #endif /* _DF1S */
 374:Lib/FATFs/ff.c **** 
 375:Lib/FATFs/ff.c **** 
 376:Lib/FATFs/ff.c **** /* Name status flags */
 377:Lib/FATFs/ff.c **** #define NS			11		/* Index of name status byte in fn[] */
 378:Lib/FATFs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 379:Lib/FATFs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 380:Lib/FATFs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 381:Lib/FATFs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 382:Lib/FATFs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 383:Lib/FATFs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 384:Lib/FATFs/ff.c **** 
 385:Lib/FATFs/ff.c **** 
 386:Lib/FATFs/ff.c **** /* FAT sub-type boundaries */
 387:Lib/FATFs/ff.c **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 388:Lib/FATFs/ff.c **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 389:Lib/FATFs/ff.c **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 390:Lib/FATFs/ff.c **** 
 391:Lib/FATFs/ff.c **** 
 392:Lib/FATFs/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 393:Lib/FATFs/ff.c **** / structure member because the structure is not binary compatible between
 394:Lib/FATFs/ff.c **** / different platforms */
 395:Lib/FATFs/ff.c **** 
 396:Lib/FATFs/ff.c **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 397:Lib/FATFs/ff.c **** #define BS_OEMName			3	/* OEM name (8) */
 398:Lib/FATFs/ff.c **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 399:Lib/FATFs/ff.c **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 400:Lib/FATFs/ff.c **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 401:Lib/FATFs/ff.c **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 402:Lib/FATFs/ff.c **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 403:Lib/FATFs/ff.c **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 404:Lib/FATFs/ff.c **** #define BPB_Media			21	/* Media descriptor (1) */
 405:Lib/FATFs/ff.c **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 406:Lib/FATFs/ff.c **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 407:Lib/FATFs/ff.c **** #define BPB_NumHeads		26	/* Number of heads (2) */
 408:Lib/FATFs/ff.c **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 409:Lib/FATFs/ff.c **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 410:Lib/FATFs/ff.c **** #define BS_DrvNum			36	/* Physical drive number (2) */
 411:Lib/FATFs/ff.c **** #define BS_BootSig			38	/* Extended boot signature (1) */
 412:Lib/FATFs/ff.c **** #define BS_VolID			39	/* Volume serial number (4) */
 413:Lib/FATFs/ff.c **** #define BS_VolLab			43	/* Volume label (8) */
 414:Lib/FATFs/ff.c **** #define BS_FilSysType		54	/* File system type (1) */
 415:Lib/FATFs/ff.c **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 416:Lib/FATFs/ff.c **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 417:Lib/FATFs/ff.c **** #define BPB_FSVer			42	/* File system version (2) */
 418:Lib/FATFs/ff.c **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 419:Lib/FATFs/ff.c **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 420:Lib/FATFs/ff.c **** #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
 421:Lib/FATFs/ff.c **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 422:Lib/FATFs/ff.c **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 423:Lib/FATFs/ff.c **** #define BS_VolID32			67	/* Volume serial number (4) */
 424:Lib/FATFs/ff.c **** #define BS_VolLab32			71	/* Volume label (8) */
 425:Lib/FATFs/ff.c **** #define BS_FilSysType32		82	/* File system type (1) */
 426:Lib/FATFs/ff.c **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 427:Lib/FATFs/ff.c **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 428:Lib/FATFs/ff.c **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 429:Lib/FATFs/ff.c **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
 430:Lib/FATFs/ff.c **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 431:Lib/FATFs/ff.c **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 432:Lib/FATFs/ff.c **** #define BS_55AA				510	/* Boot sector signature (2) */
 433:Lib/FATFs/ff.c **** 
 434:Lib/FATFs/ff.c **** #define	DIR_Name			0	/* Short file name (11) */
 435:Lib/FATFs/ff.c **** #define	DIR_Attr			11	/* Attribute (1) */
 436:Lib/FATFs/ff.c **** #define	DIR_NTres			12	/* NT flag (1) */
 437:Lib/FATFs/ff.c **** #define	DIR_CrtTime			14	/* Created time (2) */
 438:Lib/FATFs/ff.c **** #define	DIR_CrtDate			16	/* Created date (2) */
 439:Lib/FATFs/ff.c **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 440:Lib/FATFs/ff.c **** #define	DIR_WrtTime			22	/* Modified time (2) */
 441:Lib/FATFs/ff.c **** #define	DIR_WrtDate			24	/* Modified date (2) */
 442:Lib/FATFs/ff.c **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 443:Lib/FATFs/ff.c **** #define	DIR_FileSize		28	/* File size (4) */
 444:Lib/FATFs/ff.c **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 445:Lib/FATFs/ff.c **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 446:Lib/FATFs/ff.c **** #define	LDIR_Type			12	/* LFN type (1) */
 447:Lib/FATFs/ff.c **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 448:Lib/FATFs/ff.c **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 449:Lib/FATFs/ff.c **** #define	SZ_DIR				32		/* Size of a directory entry */
 450:Lib/FATFs/ff.c **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 451:Lib/FATFs/ff.c **** #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
 452:Lib/FATFs/ff.c **** #define	NDDE				0x05	/* Replacement of a character collides with DDE */
 453:Lib/FATFs/ff.c **** 
 454:Lib/FATFs/ff.c **** 
 455:Lib/FATFs/ff.c **** /*------------------------------------------------------------*/
 456:Lib/FATFs/ff.c **** /* Work area                                                  */
 457:Lib/FATFs/ff.c **** 
 458:Lib/FATFs/ff.c **** #if _VOLUMES
 459:Lib/FATFs/ff.c **** static
 460:Lib/FATFs/ff.c **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 461:Lib/FATFs/ff.c **** #else
 462:Lib/FATFs/ff.c **** #error Number of drives must not be 0.
 463:Lib/FATFs/ff.c **** #endif
 464:Lib/FATFs/ff.c **** 
 465:Lib/FATFs/ff.c **** static
 466:Lib/FATFs/ff.c **** WORD Fsid;				/* File system mount ID */
 467:Lib/FATFs/ff.c **** 
 468:Lib/FATFs/ff.c **** #if _FS_RPATH
 469:Lib/FATFs/ff.c **** static
 470:Lib/FATFs/ff.c **** BYTE CurrVol;			/* Current drive */
 471:Lib/FATFs/ff.c **** #endif
 472:Lib/FATFs/ff.c **** 
 473:Lib/FATFs/ff.c **** #if _FS_SHARE
 474:Lib/FATFs/ff.c **** static
 475:Lib/FATFs/ff.c **** FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
 476:Lib/FATFs/ff.c **** #endif
 477:Lib/FATFs/ff.c **** 
 478:Lib/FATFs/ff.c **** #if _USE_LFN == 0			/* No LFN */
 479:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 480:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 481:Lib/FATFs/ff.c **** #define	FREE_BUF()
 482:Lib/FATFs/ff.c **** 
 483:Lib/FATFs/ff.c **** #elif _USE_LFN == 1			/* LFN with static LFN working buffer */
 484:Lib/FATFs/ff.c **** static WCHAR LfnBuf[_MAX_LFN+1];
 485:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 486:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 487:Lib/FATFs/ff.c **** #define	FREE_BUF()
 488:Lib/FATFs/ff.c **** 
 489:Lib/FATFs/ff.c **** #elif _USE_LFN == 2 		/* LFN with dynamic LFN working buffer on the stack */
 490:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 491:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 492:Lib/FATFs/ff.c **** #define	FREE_BUF()
 493:Lib/FATFs/ff.c **** 
 494:Lib/FATFs/ff.c **** #elif _USE_LFN == 3 		/* LFN with dynamic LFN working buffer on the heap */
 495:Lib/FATFs/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 496:Lib/FATFs/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 497:Lib/FATFs/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 498:Lib/FATFs/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 499:Lib/FATFs/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 500:Lib/FATFs/ff.c **** 
 501:Lib/FATFs/ff.c **** #else
 502:Lib/FATFs/ff.c **** #error Wrong LFN configuration.
 503:Lib/FATFs/ff.c **** #endif
 504:Lib/FATFs/ff.c **** 
 505:Lib/FATFs/ff.c **** 
 506:Lib/FATFs/ff.c **** 
 507:Lib/FATFs/ff.c **** 
 508:Lib/FATFs/ff.c **** /*--------------------------------------------------------------------------
 509:Lib/FATFs/ff.c **** 
 510:Lib/FATFs/ff.c ****    Module Private Functions
 511:Lib/FATFs/ff.c **** 
 512:Lib/FATFs/ff.c **** ---------------------------------------------------------------------------*/
 513:Lib/FATFs/ff.c **** 
 514:Lib/FATFs/ff.c **** 
 515:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 516:Lib/FATFs/ff.c **** /* String functions                                                      */
 517:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 518:Lib/FATFs/ff.c **** 
 519:Lib/FATFs/ff.c **** /* Copy memory to memory */
 520:Lib/FATFs/ff.c **** static
 521:Lib/FATFs/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  16               		.loc 1 521 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31               	.LVL1:
  32 0004 DB01      		movw r26,r22
 522:Lib/FATFs/ff.c **** 	BYTE *d = (BYTE*)dst;
  33               		.loc 1 522 0
  34 0006 FC01      		movw r30,r24
 523:Lib/FATFs/ff.c **** 	const BYTE *s = (const BYTE*)src;
 524:Lib/FATFs/ff.c **** 
 525:Lib/FATFs/ff.c **** #if _WORD_ACCESS == 1
 526:Lib/FATFs/ff.c **** 	while (cnt >= sizeof(int)) {
  35               		.loc 1 526 0
  36 0008 9A01      		movw r18,r20
  37               	.LVL2:
  38               	.L2:
  39 000a 2230      		cpi r18,2
  40 000c 3105      		cpc r19,__zero_reg__
  41 000e 00F0      		brlo .L9
 527:Lib/FATFs/ff.c **** 		*(int*)d = *(int*)s;
  42               		.loc 1 527 0
  43 0010 CD91      		ld r28,X+
  44 0012 DD91      		ld r29,X+
  45               	.LVL3:
  46 0014 C193      		st Z+,r28
  47 0016 D193      		st Z+,r29
  48               	.LVL4:
 528:Lib/FATFs/ff.c **** 		d += sizeof(int); s += sizeof(int);
 529:Lib/FATFs/ff.c **** 		cnt -= sizeof(int);
  49               		.loc 1 529 0
  50 0018 2250      		subi r18,2
  51 001a 3109      		sbc r19,__zero_reg__
  52               	.LVL5:
  53 001c 00C0      		rjmp .L2
  54               	.L9:
  55 001e 9A01      		movw r18,r20
  56               	.LVL6:
  57 0020 2E7F      		andi r18,254
  58 0022 FC01      		movw r30,r24
  59               	.LVL7:
  60 0024 E20F      		add r30,r18
  61 0026 F31F      		adc r31,r19
  62 0028 DB01      		movw r26,r22
  63               	.LVL8:
  64 002a A20F      		add r26,r18
  65 002c B31F      		adc r27,r19
  66               	.LVL9:
 530:Lib/FATFs/ff.c **** 	}
 531:Lib/FATFs/ff.c **** #endif
 532:Lib/FATFs/ff.c **** 	while (cnt--)
  67               		.loc 1 532 0
  68 002e 4217      		cp r20,r18
  69 0030 5307      		cpc r21,r19
  70 0032 01F0      		breq .L1
  71               	.LVL10:
 533:Lib/FATFs/ff.c **** 		*d++ = *s++;
  72               		.loc 1 533 0
  73 0034 2C91      		ld r18,X
  74 0036 2083      		st Z,r18
  75               	.LVL11:
  76               	.L1:
  77               	/* epilogue start */
 534:Lib/FATFs/ff.c **** }
  78               		.loc 1 534 0
  79 0038 DF91      		pop r29
  80 003a CF91      		pop r28
  81 003c 0895      		ret
  82               		.cfi_endproc
  83               	.LFE139:
  85               		.section	.text.move_window,"ax",@progbits
  87               	move_window:
  88               	.LFB143:
 535:Lib/FATFs/ff.c **** 
 536:Lib/FATFs/ff.c **** /* Fill memory */
 537:Lib/FATFs/ff.c **** static
 538:Lib/FATFs/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 539:Lib/FATFs/ff.c **** 	BYTE *d = (BYTE*)dst;
 540:Lib/FATFs/ff.c **** 
 541:Lib/FATFs/ff.c **** 	while (cnt--)
 542:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 543:Lib/FATFs/ff.c **** }
 544:Lib/FATFs/ff.c **** 
 545:Lib/FATFs/ff.c **** /* Compare memory to memory */
 546:Lib/FATFs/ff.c **** static
 547:Lib/FATFs/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 548:Lib/FATFs/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 549:Lib/FATFs/ff.c **** 	int r = 0;
 550:Lib/FATFs/ff.c **** 
 551:Lib/FATFs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 552:Lib/FATFs/ff.c **** 	return r;
 553:Lib/FATFs/ff.c **** }
 554:Lib/FATFs/ff.c **** 
 555:Lib/FATFs/ff.c **** /* Check if chr is contained in the string */
 556:Lib/FATFs/ff.c **** static
 557:Lib/FATFs/ff.c **** int chk_chr (const char* str, int chr) {
 558:Lib/FATFs/ff.c **** 	while (*str && *str != chr) str++;
 559:Lib/FATFs/ff.c **** 	return *str;
 560:Lib/FATFs/ff.c **** }
 561:Lib/FATFs/ff.c **** 
 562:Lib/FATFs/ff.c **** 
 563:Lib/FATFs/ff.c **** 
 564:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 565:Lib/FATFs/ff.c **** /* Request/Release grant to access the volume                            */
 566:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 567:Lib/FATFs/ff.c **** #if _FS_REENTRANT
 568:Lib/FATFs/ff.c **** 
 569:Lib/FATFs/ff.c **** static
 570:Lib/FATFs/ff.c **** int lock_fs (
 571:Lib/FATFs/ff.c **** 	FATFS *fs		/* File system object */
 572:Lib/FATFs/ff.c **** )
 573:Lib/FATFs/ff.c **** {
 574:Lib/FATFs/ff.c **** 	return ff_req_grant(fs->sobj);
 575:Lib/FATFs/ff.c **** }
 576:Lib/FATFs/ff.c **** 
 577:Lib/FATFs/ff.c **** 
 578:Lib/FATFs/ff.c **** static
 579:Lib/FATFs/ff.c **** void unlock_fs (
 580:Lib/FATFs/ff.c **** 	FATFS *fs,		/* File system object */
 581:Lib/FATFs/ff.c **** 	FRESULT res		/* Result code to be returned */
 582:Lib/FATFs/ff.c **** )
 583:Lib/FATFs/ff.c **** {
 584:Lib/FATFs/ff.c **** 	if (res != FR_NOT_ENABLED &&
 585:Lib/FATFs/ff.c **** 		res != FR_INVALID_DRIVE &&
 586:Lib/FATFs/ff.c **** 		res != FR_INVALID_OBJECT &&
 587:Lib/FATFs/ff.c **** 		res != FR_TIMEOUT) {
 588:Lib/FATFs/ff.c **** 		ff_rel_grant(fs->sobj);
 589:Lib/FATFs/ff.c **** 	}
 590:Lib/FATFs/ff.c **** }
 591:Lib/FATFs/ff.c **** #endif
 592:Lib/FATFs/ff.c **** 
 593:Lib/FATFs/ff.c **** 
 594:Lib/FATFs/ff.c **** 
 595:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 596:Lib/FATFs/ff.c **** /* File shareing control functions                                       */
 597:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 598:Lib/FATFs/ff.c **** #if _FS_SHARE
 599:Lib/FATFs/ff.c **** 
 600:Lib/FATFs/ff.c **** static
 601:Lib/FATFs/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 602:Lib/FATFs/ff.c **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 603:Lib/FATFs/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 604:Lib/FATFs/ff.c **** )
 605:Lib/FATFs/ff.c **** {
 606:Lib/FATFs/ff.c **** 	UINT i, be;
 607:Lib/FATFs/ff.c **** 
 608:Lib/FATFs/ff.c **** 	/* Search file semaphore table */
 609:Lib/FATFs/ff.c **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 610:Lib/FATFs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 611:Lib/FATFs/ff.c **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 612:Lib/FATFs/ff.c **** 				Files[i].clu == dj->sclust &&
 613:Lib/FATFs/ff.c **** 				Files[i].idx == dj->index) break;
 614:Lib/FATFs/ff.c **** 		} else {			/* Blank entry */
 615:Lib/FATFs/ff.c **** 			be++;
 616:Lib/FATFs/ff.c **** 		}
 617:Lib/FATFs/ff.c **** 	}
 618:Lib/FATFs/ff.c **** 	if (i == _FS_SHARE)	/* The file is not opened */
 619:Lib/FATFs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 620:Lib/FATFs/ff.c **** 
 621:Lib/FATFs/ff.c **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 622:Lib/FATFs/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 623:Lib/FATFs/ff.c **** }
 624:Lib/FATFs/ff.c **** 
 625:Lib/FATFs/ff.c **** 
 626:Lib/FATFs/ff.c **** static
 627:Lib/FATFs/ff.c **** int enq_lock (	/* Check if an entry is available for a new file */
 628:Lib/FATFs/ff.c **** 	FATFS* fs	/* File system object */
 629:Lib/FATFs/ff.c **** )
 630:Lib/FATFs/ff.c **** {
 631:Lib/FATFs/ff.c **** 	UINT i;
 632:Lib/FATFs/ff.c **** 
 633:Lib/FATFs/ff.c **** 	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 634:Lib/FATFs/ff.c **** 	return (i == _FS_SHARE) ? 0 : 1;
 635:Lib/FATFs/ff.c **** }
 636:Lib/FATFs/ff.c **** 
 637:Lib/FATFs/ff.c **** 
 638:Lib/FATFs/ff.c **** static
 639:Lib/FATFs/ff.c **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 640:Lib/FATFs/ff.c **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 641:Lib/FATFs/ff.c **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 642:Lib/FATFs/ff.c **** )
 643:Lib/FATFs/ff.c **** {
 644:Lib/FATFs/ff.c **** 	UINT i;
 645:Lib/FATFs/ff.c **** 
 646:Lib/FATFs/ff.c **** 
 647:Lib/FATFs/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 648:Lib/FATFs/ff.c **** 		if (Files[i].fs == dj->fs &&
 649:Lib/FATFs/ff.c **** 			Files[i].clu == dj->sclust &&
 650:Lib/FATFs/ff.c **** 			Files[i].idx == dj->index) break;
 651:Lib/FATFs/ff.c **** 	}
 652:Lib/FATFs/ff.c **** 
 653:Lib/FATFs/ff.c **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 654:Lib/FATFs/ff.c **** 		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 655:Lib/FATFs/ff.c **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 656:Lib/FATFs/ff.c **** 		Files[i].fs = dj->fs;
 657:Lib/FATFs/ff.c **** 		Files[i].clu = dj->sclust;
 658:Lib/FATFs/ff.c **** 		Files[i].idx = dj->index;
 659:Lib/FATFs/ff.c **** 		Files[i].ctr = 0;
 660:Lib/FATFs/ff.c **** 	}
 661:Lib/FATFs/ff.c **** 
 662:Lib/FATFs/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 663:Lib/FATFs/ff.c **** 
 664:Lib/FATFs/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 665:Lib/FATFs/ff.c **** 
 666:Lib/FATFs/ff.c **** 	return i + 1;
 667:Lib/FATFs/ff.c **** }
 668:Lib/FATFs/ff.c **** 
 669:Lib/FATFs/ff.c **** 
 670:Lib/FATFs/ff.c **** static
 671:Lib/FATFs/ff.c **** FRESULT dec_lock (	/* Decrement file open counter */
 672:Lib/FATFs/ff.c **** 	UINT i			/* Semaphore index */
 673:Lib/FATFs/ff.c **** )
 674:Lib/FATFs/ff.c **** {
 675:Lib/FATFs/ff.c **** 	WORD n;
 676:Lib/FATFs/ff.c **** 	FRESULT res;
 677:Lib/FATFs/ff.c **** 
 678:Lib/FATFs/ff.c **** 
 679:Lib/FATFs/ff.c **** 	if (--i < _FS_SHARE) {
 680:Lib/FATFs/ff.c **** 		n = Files[i].ctr;
 681:Lib/FATFs/ff.c **** 		if (n == 0x100) n = 0;
 682:Lib/FATFs/ff.c **** 		if (n) n--;
 683:Lib/FATFs/ff.c **** 		Files[i].ctr = n;
 684:Lib/FATFs/ff.c **** 		if (!n) Files[i].fs = 0;
 685:Lib/FATFs/ff.c **** 		res = FR_OK;
 686:Lib/FATFs/ff.c **** 	} else {
 687:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 688:Lib/FATFs/ff.c **** 	}
 689:Lib/FATFs/ff.c **** 	return res;
 690:Lib/FATFs/ff.c **** }
 691:Lib/FATFs/ff.c **** 
 692:Lib/FATFs/ff.c **** 
 693:Lib/FATFs/ff.c **** static
 694:Lib/FATFs/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 695:Lib/FATFs/ff.c **** 	FATFS *fs
 696:Lib/FATFs/ff.c **** )
 697:Lib/FATFs/ff.c **** {
 698:Lib/FATFs/ff.c **** 	UINT i;
 699:Lib/FATFs/ff.c **** 
 700:Lib/FATFs/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {
 701:Lib/FATFs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 702:Lib/FATFs/ff.c **** 	}
 703:Lib/FATFs/ff.c **** }
 704:Lib/FATFs/ff.c **** #endif
 705:Lib/FATFs/ff.c **** 
 706:Lib/FATFs/ff.c **** 
 707:Lib/FATFs/ff.c **** 
 708:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 709:Lib/FATFs/ff.c **** /* Change window offset                                                  */
 710:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 711:Lib/FATFs/ff.c **** 
 712:Lib/FATFs/ff.c **** static
 713:Lib/FATFs/ff.c **** FRESULT move_window (
 714:Lib/FATFs/ff.c **** 	FATFS *fs,		/* File system object */
 715:Lib/FATFs/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 716:Lib/FATFs/ff.c **** )					/* Move to zero only writes back dirty window */
 717:Lib/FATFs/ff.c **** {
  89               		.loc 1 717 0
  90               		.cfi_startproc
  91               	.LVL12:
  92 0000 4F92      		push r4
  93               	.LCFI2:
  94               		.cfi_def_cfa_offset 3
  95               		.cfi_offset 4, -2
  96 0002 5F92      		push r5
  97               	.LCFI3:
  98               		.cfi_def_cfa_offset 4
  99               		.cfi_offset 5, -3
 100 0004 6F92      		push r6
 101               	.LCFI4:
 102               		.cfi_def_cfa_offset 5
 103               		.cfi_offset 6, -4
 104 0006 7F92      		push r7
 105               	.LCFI5:
 106               		.cfi_def_cfa_offset 6
 107               		.cfi_offset 7, -5
 108 0008 AF92      		push r10
 109               	.LCFI6:
 110               		.cfi_def_cfa_offset 7
 111               		.cfi_offset 10, -6
 112 000a BF92      		push r11
 113               	.LCFI7:
 114               		.cfi_def_cfa_offset 8
 115               		.cfi_offset 11, -7
 116 000c CF92      		push r12
 117               	.LCFI8:
 118               		.cfi_def_cfa_offset 9
 119               		.cfi_offset 12, -8
 120 000e DF92      		push r13
 121               	.LCFI9:
 122               		.cfi_def_cfa_offset 10
 123               		.cfi_offset 13, -9
 124 0010 EF92      		push r14
 125               	.LCFI10:
 126               		.cfi_def_cfa_offset 11
 127               		.cfi_offset 14, -10
 128 0012 FF92      		push r15
 129               	.LCFI11:
 130               		.cfi_def_cfa_offset 12
 131               		.cfi_offset 15, -11
 132 0014 0F93      		push r16
 133               	.LCFI12:
 134               		.cfi_def_cfa_offset 13
 135               		.cfi_offset 16, -12
 136 0016 1F93      		push r17
 137               	.LCFI13:
 138               		.cfi_def_cfa_offset 14
 139               		.cfi_offset 17, -13
 140 0018 CF93      		push r28
 141               	.LCFI14:
 142               		.cfi_def_cfa_offset 15
 143               		.cfi_offset 28, -14
 144 001a DF93      		push r29
 145               	.LCFI15:
 146               		.cfi_def_cfa_offset 16
 147               		.cfi_offset 29, -15
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 14 */
 151               	.L__stack_usage = 14
 718:Lib/FATFs/ff.c **** 	DWORD wsect;
 719:Lib/FATFs/ff.c **** 
 720:Lib/FATFs/ff.c **** 
 721:Lib/FATFs/ff.c **** 	wsect = fs->winsect;
 152               		.loc 1 721 0
 153 001c FC01      		movw r30,r24
 154 001e 42A4      		ldd r4,Z+42
 155 0020 53A4      		ldd r5,Z+43
 156 0022 64A4      		ldd r6,Z+44
 157 0024 75A4      		ldd r7,Z+45
 158               	.LVL13:
 722:Lib/FATFs/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 159               		.loc 1 722 0
 160 0026 4416      		cp r4,r20
 161 0028 5506      		cpc r5,r21
 162 002a 6606      		cpc r6,r22
 163 002c 7706      		cpc r7,r23
 164 002e 01F4      		brne .L11
 165               	.LVL14:
 166               	.L15:
 723:Lib/FATFs/ff.c **** #if !_FS_READONLY
 724:Lib/FATFs/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 725:Lib/FATFs/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 726:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
 727:Lib/FATFs/ff.c **** 			fs->wflag = 0;
 728:Lib/FATFs/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 729:Lib/FATFs/ff.c **** 				BYTE nf;
 730:Lib/FATFs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 731:Lib/FATFs/ff.c **** 					wsect += fs->fsize;
 732:Lib/FATFs/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 733:Lib/FATFs/ff.c **** 				}
 734:Lib/FATFs/ff.c **** 			}
 735:Lib/FATFs/ff.c **** 		}
 736:Lib/FATFs/ff.c **** #endif
 737:Lib/FATFs/ff.c **** 		if (sector) {
 738:Lib/FATFs/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 739:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
 740:Lib/FATFs/ff.c **** 			fs->winsect = sector;
 741:Lib/FATFs/ff.c **** 		}
 742:Lib/FATFs/ff.c **** 	}
 743:Lib/FATFs/ff.c **** 
 744:Lib/FATFs/ff.c **** 	return FR_OK;
 167               		.loc 1 744 0
 168 0030 80E0      		ldi r24,0
 169 0032 00C0      		rjmp .L12
 170               	.LVL15:
 171               	.L11:
 172 0034 6A01      		movw r12,r20
 173 0036 7B01      		movw r14,r22
 174 0038 EC01      		movw r28,r24
 724:Lib/FATFs/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 175               		.loc 1 724 0
 176 003a 8481      		ldd r24,Z+4
 177               	.LVL16:
 178 003c 8111      		cpse r24,__zero_reg__
 179 003e 00C0      		rjmp .L13
 180               	.LVL17:
 181               	.L17:
 737:Lib/FATFs/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 182               		.loc 1 737 0
 183 0040 C114      		cp r12,__zero_reg__
 184 0042 D104      		cpc r13,__zero_reg__
 185 0044 E104      		cpc r14,__zero_reg__
 186 0046 F104      		cpc r15,__zero_reg__
 187 0048 01F0      		breq .L15
 188 004a 00C0      		rjmp .L21
 189               	.L13:
 725:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
 190               		.loc 1 725 0
 191 004c 5F01      		movw r10,r30
 192 004e FEE2      		ldi r31,46
 193 0050 AF0E      		add r10,r31
 194 0052 B11C      		adc r11,__zero_reg__
 195 0054 01E0      		ldi r16,lo8(1)
 196 0056 A301      		movw r20,r6
 197 0058 9201      		movw r18,r4
 198 005a B501      		movw r22,r10
 199 005c 8981      		ldd r24,Y+1
 200 005e 0E94 0000 		call disk_write
 201               	.LVL18:
 202 0062 8823      		tst r24
 203 0064 01F0      		breq .L16
 204               	.L20:
 726:Lib/FATFs/ff.c **** 			fs->wflag = 0;
 205               		.loc 1 726 0
 206 0066 81E0      		ldi r24,lo8(1)
 207 0068 00C0      		rjmp .L12
 208               	.L16:
 727:Lib/FATFs/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 209               		.loc 1 727 0
 210 006a 1C82      		std Y+4,__zero_reg__
 728:Lib/FATFs/ff.c **** 				BYTE nf;
 211               		.loc 1 728 0
 212 006c 4E8D      		ldd r20,Y+30
 213 006e 5F8D      		ldd r21,Y+31
 214 0070 68A1      		ldd r22,Y+32
 215 0072 79A1      		ldd r23,Y+33
 216 0074 8A8D      		ldd r24,Y+26
 217 0076 9B8D      		ldd r25,Y+27
 218 0078 AC8D      		ldd r26,Y+28
 219 007a BD8D      		ldd r27,Y+29
 220 007c 840F      		add r24,r20
 221 007e 951F      		adc r25,r21
 222 0080 A61F      		adc r26,r22
 223 0082 B71F      		adc r27,r23
 224 0084 4816      		cp r4,r24
 225 0086 5906      		cpc r5,r25
 226 0088 6A06      		cpc r6,r26
 227 008a 7B06      		cpc r7,r27
 228 008c 00F4      		brsh .L17
 229               	.LBB2:
 730:Lib/FATFs/ff.c **** 					wsect += fs->fsize;
 230               		.loc 1 730 0
 231 008e 1B81      		ldd r17,Y+3
 232               	.LVL19:
 233               	.L18:
 730:Lib/FATFs/ff.c **** 					wsect += fs->fsize;
 234               		.loc 1 730 0 is_stmt 0 discriminator 1
 235 0090 1230      		cpi r17,lo8(2)
 236 0092 00F0      		brlo .L17
 731:Lib/FATFs/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 237               		.loc 1 731 0 is_stmt 1 discriminator 3
 238 0094 8A8D      		ldd r24,Y+26
 239 0096 9B8D      		ldd r25,Y+27
 240 0098 AC8D      		ldd r26,Y+28
 241 009a BD8D      		ldd r27,Y+29
 242 009c 480E      		add r4,r24
 243 009e 591E      		adc r5,r25
 244 00a0 6A1E      		adc r6,r26
 245 00a2 7B1E      		adc r7,r27
 246               	.LVL20:
 732:Lib/FATFs/ff.c **** 				}
 247               		.loc 1 732 0 discriminator 3
 248 00a4 01E0      		ldi r16,lo8(1)
 249 00a6 A301      		movw r20,r6
 250 00a8 9201      		movw r18,r4
 251 00aa B501      		movw r22,r10
 252 00ac 8981      		ldd r24,Y+1
 253 00ae 0E94 0000 		call disk_write
 254               	.LVL21:
 730:Lib/FATFs/ff.c **** 					wsect += fs->fsize;
 255               		.loc 1 730 0 discriminator 3
 256 00b2 1150      		subi r17,lo8(-(-1))
 257               	.LVL22:
 258 00b4 00C0      		rjmp .L18
 259               	.LVL23:
 260               	.L21:
 261               	.LBE2:
 738:Lib/FATFs/ff.c **** 				return FR_DISK_ERR;
 262               		.loc 1 738 0
 263 00b6 01E0      		ldi r16,lo8(1)
 264 00b8 A701      		movw r20,r14
 265 00ba 9601      		movw r18,r12
 266 00bc BE01      		movw r22,r28
 267 00be 625D      		subi r22,-46
 268 00c0 7F4F      		sbci r23,-1
 269 00c2 8981      		ldd r24,Y+1
 270 00c4 0E94 0000 		call disk_read
 271               	.LVL24:
 272 00c8 8111      		cpse r24,__zero_reg__
 273 00ca 00C0      		rjmp .L20
 740:Lib/FATFs/ff.c **** 		}
 274               		.loc 1 740 0
 275 00cc CAA6      		std Y+42,r12
 276 00ce DBA6      		std Y+43,r13
 277 00d0 ECA6      		std Y+44,r14
 278 00d2 FDA6      		std Y+45,r15
 279               	.LVL25:
 280               	.L12:
 281               	/* epilogue start */
 745:Lib/FATFs/ff.c **** }
 282               		.loc 1 745 0
 283 00d4 DF91      		pop r29
 284 00d6 CF91      		pop r28
 285 00d8 1F91      		pop r17
 286 00da 0F91      		pop r16
 287 00dc FF90      		pop r15
 288 00de EF90      		pop r14
 289 00e0 DF90      		pop r13
 290 00e2 CF90      		pop r12
 291 00e4 BF90      		pop r11
 292 00e6 AF90      		pop r10
 293 00e8 7F90      		pop r7
 294 00ea 6F90      		pop r6
 295 00ec 5F90      		pop r5
 296 00ee 4F90      		pop r4
 297               	.LVL26:
 298 00f0 0895      		ret
 299               		.cfi_endproc
 300               	.LFE143:
 302               		.section	.text.check_fs,"ax",@progbits
 304               	check_fs:
 305               	.LFB156:
 746:Lib/FATFs/ff.c **** 
 747:Lib/FATFs/ff.c **** 
 748:Lib/FATFs/ff.c **** 
 749:Lib/FATFs/ff.c **** 
 750:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 751:Lib/FATFs/ff.c **** /* Clean-up cached data                                                  */
 752:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 753:Lib/FATFs/ff.c **** #if !_FS_READONLY
 754:Lib/FATFs/ff.c **** static
 755:Lib/FATFs/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 756:Lib/FATFs/ff.c **** 	FATFS *fs	/* File system object */
 757:Lib/FATFs/ff.c **** )
 758:Lib/FATFs/ff.c **** {
 759:Lib/FATFs/ff.c **** 	FRESULT res;
 760:Lib/FATFs/ff.c **** 
 761:Lib/FATFs/ff.c **** 
 762:Lib/FATFs/ff.c **** 	res = move_window(fs, 0);
 763:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
 764:Lib/FATFs/ff.c **** 		/* Update FSInfo sector if needed */
 765:Lib/FATFs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 766:Lib/FATFs/ff.c **** 			fs->winsect = 0;
 767:Lib/FATFs/ff.c **** 			/* Create FSInfo structure */
 768:Lib/FATFs/ff.c **** 			mem_set(fs->win, 0, 512);
 769:Lib/FATFs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 770:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 771:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 772:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 773:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 774:Lib/FATFs/ff.c **** 			/* Write it into the FSInfo sector */
 775:Lib/FATFs/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 776:Lib/FATFs/ff.c **** 			fs->fsi_flag = 0;
 777:Lib/FATFs/ff.c **** 		}
 778:Lib/FATFs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 779:Lib/FATFs/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 780:Lib/FATFs/ff.c **** 			res = FR_DISK_ERR;
 781:Lib/FATFs/ff.c **** 	}
 782:Lib/FATFs/ff.c **** 
 783:Lib/FATFs/ff.c **** 	return res;
 784:Lib/FATFs/ff.c **** }
 785:Lib/FATFs/ff.c **** #endif
 786:Lib/FATFs/ff.c **** 
 787:Lib/FATFs/ff.c **** 
 788:Lib/FATFs/ff.c **** 
 789:Lib/FATFs/ff.c **** 
 790:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 791:Lib/FATFs/ff.c **** /* Get sector# from cluster#                                             */
 792:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 793:Lib/FATFs/ff.c **** 
 794:Lib/FATFs/ff.c **** 
 795:Lib/FATFs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 796:Lib/FATFs/ff.c **** 	FATFS *fs,		/* File system object */
 797:Lib/FATFs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 798:Lib/FATFs/ff.c **** )
 799:Lib/FATFs/ff.c **** {
 800:Lib/FATFs/ff.c **** 	clst -= 2;
 801:Lib/FATFs/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 802:Lib/FATFs/ff.c **** 	return clst * fs->csize + fs->database;
 803:Lib/FATFs/ff.c **** }
 804:Lib/FATFs/ff.c **** 
 805:Lib/FATFs/ff.c **** 
 806:Lib/FATFs/ff.c **** 
 807:Lib/FATFs/ff.c **** 
 808:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 809:Lib/FATFs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 810:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 811:Lib/FATFs/ff.c **** 
 812:Lib/FATFs/ff.c **** 
 813:Lib/FATFs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 814:Lib/FATFs/ff.c **** 	FATFS *fs,	/* File system object */
 815:Lib/FATFs/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 816:Lib/FATFs/ff.c **** )
 817:Lib/FATFs/ff.c **** {
 818:Lib/FATFs/ff.c **** 	UINT wc, bc;
 819:Lib/FATFs/ff.c **** 	BYTE *p;
 820:Lib/FATFs/ff.c **** 
 821:Lib/FATFs/ff.c **** 
 822:Lib/FATFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 823:Lib/FATFs/ff.c **** 		return 1;
 824:Lib/FATFs/ff.c **** 
 825:Lib/FATFs/ff.c **** 	switch (fs->fs_type) {
 826:Lib/FATFs/ff.c **** 	case FS_FAT12 :
 827:Lib/FATFs/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 828:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 829:Lib/FATFs/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 830:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 831:Lib/FATFs/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 832:Lib/FATFs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 833:Lib/FATFs/ff.c **** 
 834:Lib/FATFs/ff.c **** 	case FS_FAT16 :
 835:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 836:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 837:Lib/FATFs/ff.c **** 		return LD_WORD(p);
 838:Lib/FATFs/ff.c **** 
 839:Lib/FATFs/ff.c **** 	case FS_FAT32 :
 840:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 841:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 842:Lib/FATFs/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 843:Lib/FATFs/ff.c **** 	}
 844:Lib/FATFs/ff.c **** 
 845:Lib/FATFs/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 846:Lib/FATFs/ff.c **** }
 847:Lib/FATFs/ff.c **** 
 848:Lib/FATFs/ff.c **** 
 849:Lib/FATFs/ff.c **** 
 850:Lib/FATFs/ff.c **** 
 851:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 852:Lib/FATFs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 853:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 854:Lib/FATFs/ff.c **** #if !_FS_READONLY
 855:Lib/FATFs/ff.c **** 
 856:Lib/FATFs/ff.c **** FRESULT put_fat (
 857:Lib/FATFs/ff.c **** 	FATFS *fs,	/* File system object */
 858:Lib/FATFs/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 859:Lib/FATFs/ff.c **** 	DWORD val	/* New value to mark the cluster */
 860:Lib/FATFs/ff.c **** )
 861:Lib/FATFs/ff.c **** {
 862:Lib/FATFs/ff.c **** 	UINT bc;
 863:Lib/FATFs/ff.c **** 	BYTE *p;
 864:Lib/FATFs/ff.c **** 	FRESULT res;
 865:Lib/FATFs/ff.c **** 
 866:Lib/FATFs/ff.c **** 
 867:Lib/FATFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 868:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 869:Lib/FATFs/ff.c **** 
 870:Lib/FATFs/ff.c **** 	} else {
 871:Lib/FATFs/ff.c **** 		switch (fs->fs_type) {
 872:Lib/FATFs/ff.c **** 		case FS_FAT12 :
 873:Lib/FATFs/ff.c **** 			bc = clst; bc += bc / 2;
 874:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 875:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 876:Lib/FATFs/ff.c **** 			p = &fs->win[bc % SS(fs)];
 877:Lib/FATFs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 878:Lib/FATFs/ff.c **** 			bc++;
 879:Lib/FATFs/ff.c **** 			fs->wflag = 1;
 880:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 881:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 882:Lib/FATFs/ff.c **** 			p = &fs->win[bc % SS(fs)];
 883:Lib/FATFs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 884:Lib/FATFs/ff.c **** 			break;
 885:Lib/FATFs/ff.c **** 
 886:Lib/FATFs/ff.c **** 		case FS_FAT16 :
 887:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 888:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 889:Lib/FATFs/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 890:Lib/FATFs/ff.c **** 			ST_WORD(p, (WORD)val);
 891:Lib/FATFs/ff.c **** 			break;
 892:Lib/FATFs/ff.c **** 
 893:Lib/FATFs/ff.c **** 		case FS_FAT32 :
 894:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 895:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 896:Lib/FATFs/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 897:Lib/FATFs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 898:Lib/FATFs/ff.c **** 			ST_DWORD(p, val);
 899:Lib/FATFs/ff.c **** 			break;
 900:Lib/FATFs/ff.c **** 
 901:Lib/FATFs/ff.c **** 		default :
 902:Lib/FATFs/ff.c **** 			res = FR_INT_ERR;
 903:Lib/FATFs/ff.c **** 		}
 904:Lib/FATFs/ff.c **** 		fs->wflag = 1;
 905:Lib/FATFs/ff.c **** 	}
 906:Lib/FATFs/ff.c **** 
 907:Lib/FATFs/ff.c **** 	return res;
 908:Lib/FATFs/ff.c **** }
 909:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
 910:Lib/FATFs/ff.c **** 
 911:Lib/FATFs/ff.c **** 
 912:Lib/FATFs/ff.c **** 
 913:Lib/FATFs/ff.c **** 
 914:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 915:Lib/FATFs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 916:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 917:Lib/FATFs/ff.c **** #if !_FS_READONLY
 918:Lib/FATFs/ff.c **** static
 919:Lib/FATFs/ff.c **** FRESULT remove_chain (
 920:Lib/FATFs/ff.c **** 	FATFS *fs,			/* File system object */
 921:Lib/FATFs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 922:Lib/FATFs/ff.c **** )
 923:Lib/FATFs/ff.c **** {
 924:Lib/FATFs/ff.c **** 	FRESULT res;
 925:Lib/FATFs/ff.c **** 	DWORD nxt;
 926:Lib/FATFs/ff.c **** #if _USE_ERASE
 927:Lib/FATFs/ff.c **** 	DWORD scl = clst, ecl = clst, resion[2];
 928:Lib/FATFs/ff.c **** #endif
 929:Lib/FATFs/ff.c **** 
 930:Lib/FATFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 931:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 932:Lib/FATFs/ff.c **** 
 933:Lib/FATFs/ff.c **** 	} else {
 934:Lib/FATFs/ff.c **** 		res = FR_OK;
 935:Lib/FATFs/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 936:Lib/FATFs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 937:Lib/FATFs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 938:Lib/FATFs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 939:Lib/FATFs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 940:Lib/FATFs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 941:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 942:Lib/FATFs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 943:Lib/FATFs/ff.c **** 				fs->free_clust++;
 944:Lib/FATFs/ff.c **** 				fs->fsi_flag = 1;
 945:Lib/FATFs/ff.c **** 			}
 946:Lib/FATFs/ff.c **** #if _USE_ERASE
 947:Lib/FATFs/ff.c **** 			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
 948:Lib/FATFs/ff.c **** 				ecl = nxt;
 949:Lib/FATFs/ff.c **** 			} else {				/* End of contiguous clusters */ 
 950:Lib/FATFs/ff.c **** 				resion[0] = clust2sect(fs, scl);					/* Start sector */
 951:Lib/FATFs/ff.c **** 				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 952:Lib/FATFs/ff.c **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
 953:Lib/FATFs/ff.c **** 				scl = ecl = nxt;
 954:Lib/FATFs/ff.c **** 			}
 955:Lib/FATFs/ff.c **** #endif
 956:Lib/FATFs/ff.c **** 			clst = nxt;	/* Next cluster */
 957:Lib/FATFs/ff.c **** 		}
 958:Lib/FATFs/ff.c **** 	}
 959:Lib/FATFs/ff.c **** 
 960:Lib/FATFs/ff.c **** 	return res;
 961:Lib/FATFs/ff.c **** }
 962:Lib/FATFs/ff.c **** #endif
 963:Lib/FATFs/ff.c **** 
 964:Lib/FATFs/ff.c **** 
 965:Lib/FATFs/ff.c **** 
 966:Lib/FATFs/ff.c **** 
 967:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 968:Lib/FATFs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 969:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
 970:Lib/FATFs/ff.c **** #if !_FS_READONLY
 971:Lib/FATFs/ff.c **** static
 972:Lib/FATFs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 973:Lib/FATFs/ff.c **** 	FATFS *fs,			/* File system object */
 974:Lib/FATFs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 975:Lib/FATFs/ff.c **** )
 976:Lib/FATFs/ff.c **** {
 977:Lib/FATFs/ff.c **** 	DWORD cs, ncl, scl;
 978:Lib/FATFs/ff.c **** 	FRESULT res;
 979:Lib/FATFs/ff.c **** 
 980:Lib/FATFs/ff.c **** 
 981:Lib/FATFs/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 982:Lib/FATFs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 983:Lib/FATFs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 984:Lib/FATFs/ff.c **** 	}
 985:Lib/FATFs/ff.c **** 	else {					/* Stretch the current chain */
 986:Lib/FATFs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 987:Lib/FATFs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 988:Lib/FATFs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 989:Lib/FATFs/ff.c **** 		scl = clst;
 990:Lib/FATFs/ff.c **** 	}
 991:Lib/FATFs/ff.c **** 
 992:Lib/FATFs/ff.c **** 	ncl = scl;				/* Start cluster */
 993:Lib/FATFs/ff.c **** 	for (;;) {
 994:Lib/FATFs/ff.c **** 		ncl++;							/* Next cluster */
 995:Lib/FATFs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 996:Lib/FATFs/ff.c **** 			ncl = 2;
 997:Lib/FATFs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 998:Lib/FATFs/ff.c **** 		}
 999:Lib/FATFs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1000:Lib/FATFs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
1001:Lib/FATFs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1002:Lib/FATFs/ff.c **** 			return cs;
1003:Lib/FATFs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1004:Lib/FATFs/ff.c **** 	}
1005:Lib/FATFs/ff.c **** 
1006:Lib/FATFs/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1007:Lib/FATFs/ff.c **** 	if (res == FR_OK && clst != 0) {
1008:Lib/FATFs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1009:Lib/FATFs/ff.c **** 	}
1010:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1011:Lib/FATFs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
1012:Lib/FATFs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
1013:Lib/FATFs/ff.c **** 			fs->free_clust--;
1014:Lib/FATFs/ff.c **** 			fs->fsi_flag = 1;
1015:Lib/FATFs/ff.c **** 		}
1016:Lib/FATFs/ff.c **** 	} else {
1017:Lib/FATFs/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1018:Lib/FATFs/ff.c **** 	}
1019:Lib/FATFs/ff.c **** 
1020:Lib/FATFs/ff.c **** 	return ncl;		/* Return new cluster number or error code */
1021:Lib/FATFs/ff.c **** }
1022:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
1023:Lib/FATFs/ff.c **** 
1024:Lib/FATFs/ff.c **** 
1025:Lib/FATFs/ff.c **** 
1026:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1027:Lib/FATFs/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1028:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1029:Lib/FATFs/ff.c **** 
1030:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
1031:Lib/FATFs/ff.c **** static
1032:Lib/FATFs/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1033:Lib/FATFs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1034:Lib/FATFs/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1035:Lib/FATFs/ff.c **** )
1036:Lib/FATFs/ff.c **** {
1037:Lib/FATFs/ff.c **** 	DWORD cl, ncl, *tbl;
1038:Lib/FATFs/ff.c **** 
1039:Lib/FATFs/ff.c **** 
1040:Lib/FATFs/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1041:Lib/FATFs/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1042:Lib/FATFs/ff.c **** 	for (;;) {
1043:Lib/FATFs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1044:Lib/FATFs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
1045:Lib/FATFs/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1046:Lib/FATFs/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1047:Lib/FATFs/ff.c **** 	}
1048:Lib/FATFs/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1049:Lib/FATFs/ff.c **** }
1050:Lib/FATFs/ff.c **** #endif	/* _USE_FASTSEEK */
1051:Lib/FATFs/ff.c **** 
1052:Lib/FATFs/ff.c **** 
1053:Lib/FATFs/ff.c **** 
1054:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1055:Lib/FATFs/ff.c **** /* Directory handling - Set directory index                              */
1056:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1057:Lib/FATFs/ff.c **** 
1058:Lib/FATFs/ff.c **** static
1059:Lib/FATFs/ff.c **** FRESULT dir_sdi (
1060:Lib/FATFs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1061:Lib/FATFs/ff.c **** 	WORD idx		/* Directory index number */
1062:Lib/FATFs/ff.c **** )
1063:Lib/FATFs/ff.c **** {
1064:Lib/FATFs/ff.c **** 	DWORD clst;
1065:Lib/FATFs/ff.c **** 	WORD ic;
1066:Lib/FATFs/ff.c **** 
1067:Lib/FATFs/ff.c **** 
1068:Lib/FATFs/ff.c **** 	dj->index = idx;
1069:Lib/FATFs/ff.c **** 	clst = dj->sclust;
1070:Lib/FATFs/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
1071:Lib/FATFs/ff.c **** 		return FR_INT_ERR;
1072:Lib/FATFs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1073:Lib/FATFs/ff.c **** 		clst = dj->fs->dirbase;
1074:Lib/FATFs/ff.c **** 
1075:Lib/FATFs/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
1076:Lib/FATFs/ff.c **** 		dj->clust = clst;
1077:Lib/FATFs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
1078:Lib/FATFs/ff.c **** 			return FR_INT_ERR;
1079:Lib/FATFs/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1080:Lib/FATFs/ff.c **** 	}
1081:Lib/FATFs/ff.c **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1082:Lib/FATFs/ff.c **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
1083:Lib/FATFs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
1084:Lib/FATFs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
1085:Lib/FATFs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1086:Lib/FATFs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
1087:Lib/FATFs/ff.c **** 				return FR_INT_ERR;
1088:Lib/FATFs/ff.c **** 			idx -= ic;
1089:Lib/FATFs/ff.c **** 		}
1090:Lib/FATFs/ff.c **** 		dj->clust = clst;
1091:Lib/FATFs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1092:Lib/FATFs/ff.c **** 	}
1093:Lib/FATFs/ff.c **** 
1094:Lib/FATFs/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
1095:Lib/FATFs/ff.c **** 
1096:Lib/FATFs/ff.c **** 	return FR_OK;	/* Seek succeeded */
1097:Lib/FATFs/ff.c **** }
1098:Lib/FATFs/ff.c **** 
1099:Lib/FATFs/ff.c **** 
1100:Lib/FATFs/ff.c **** 
1101:Lib/FATFs/ff.c **** 
1102:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1103:Lib/FATFs/ff.c **** /* Directory handling - Move directory index next                        */
1104:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1105:Lib/FATFs/ff.c **** 
1106:Lib/FATFs/ff.c **** static
1107:Lib/FATFs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
1108:Lib/FATFs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1109:Lib/FATFs/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1110:Lib/FATFs/ff.c **** )
1111:Lib/FATFs/ff.c **** {
1112:Lib/FATFs/ff.c **** 	DWORD clst;
1113:Lib/FATFs/ff.c **** 	WORD i;
1114:Lib/FATFs/ff.c **** 
1115:Lib/FATFs/ff.c **** 
1116:Lib/FATFs/ff.c **** 	i = dj->index + 1;
1117:Lib/FATFs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
1118:Lib/FATFs/ff.c **** 		return FR_NO_FILE;
1119:Lib/FATFs/ff.c **** 
1120:Lib/FATFs/ff.c **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
1121:Lib/FATFs/ff.c **** 		dj->sect++;					/* Next sector */
1122:Lib/FATFs/ff.c **** 
1123:Lib/FATFs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
1124:Lib/FATFs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
1125:Lib/FATFs/ff.c **** 				return FR_NO_FILE;
1126:Lib/FATFs/ff.c **** 		}
1127:Lib/FATFs/ff.c **** 		else {					/* Dynamic table */
1128:Lib/FATFs/ff.c **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
1129:Lib/FATFs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
1130:Lib/FATFs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
1131:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1132:Lib/FATFs/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
1133:Lib/FATFs/ff.c **** #if !_FS_READONLY
1134:Lib/FATFs/ff.c **** 					BYTE c;
1135:Lib/FATFs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
1136:Lib/FATFs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
1137:Lib/FATFs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1138:Lib/FATFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
1139:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1140:Lib/FATFs/ff.c **** 					/* Clean-up stretched table */
1141:Lib/FATFs/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
1142:Lib/FATFs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
1143:Lib/FATFs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
1144:Lib/FATFs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
1145:Lib/FATFs/ff.c **** 						dj->fs->wflag = 1;
1146:Lib/FATFs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
1147:Lib/FATFs/ff.c **** 						dj->fs->winsect++;
1148:Lib/FATFs/ff.c **** 					}
1149:Lib/FATFs/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
1150:Lib/FATFs/ff.c **** #else
1151:Lib/FATFs/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
1152:Lib/FATFs/ff.c **** #endif
1153:Lib/FATFs/ff.c **** 				}
1154:Lib/FATFs/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
1155:Lib/FATFs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
1156:Lib/FATFs/ff.c **** 			}
1157:Lib/FATFs/ff.c **** 		}
1158:Lib/FATFs/ff.c **** 	}
1159:Lib/FATFs/ff.c **** 
1160:Lib/FATFs/ff.c **** 	dj->index = i;
1161:Lib/FATFs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
1162:Lib/FATFs/ff.c **** 
1163:Lib/FATFs/ff.c **** 	return FR_OK;
1164:Lib/FATFs/ff.c **** }
1165:Lib/FATFs/ff.c **** 
1166:Lib/FATFs/ff.c **** 
1167:Lib/FATFs/ff.c **** 
1168:Lib/FATFs/ff.c **** 
1169:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1170:Lib/FATFs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1171:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1172:Lib/FATFs/ff.c **** #if _USE_LFN
1173:Lib/FATFs/ff.c **** static
1174:Lib/FATFs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1175:Lib/FATFs/ff.c **** 
1176:Lib/FATFs/ff.c **** 
1177:Lib/FATFs/ff.c **** static
1178:Lib/FATFs/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1179:Lib/FATFs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1180:Lib/FATFs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1181:Lib/FATFs/ff.c **** )
1182:Lib/FATFs/ff.c **** {
1183:Lib/FATFs/ff.c **** 	UINT i, s;
1184:Lib/FATFs/ff.c **** 	WCHAR wc, uc;
1185:Lib/FATFs/ff.c **** 
1186:Lib/FATFs/ff.c **** 
1187:Lib/FATFs/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1188:Lib/FATFs/ff.c **** 	s = 0; wc = 1;
1189:Lib/FATFs/ff.c **** 	do {
1190:Lib/FATFs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1191:Lib/FATFs/ff.c **** 		if (wc) {	/* Last char has not been processed */
1192:Lib/FATFs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1193:Lib/FATFs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1194:Lib/FATFs/ff.c **** 				return 0;				/* Not matched */
1195:Lib/FATFs/ff.c **** 		} else {
1196:Lib/FATFs/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1197:Lib/FATFs/ff.c **** 		}
1198:Lib/FATFs/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
1199:Lib/FATFs/ff.c **** 
1200:Lib/FATFs/ff.c **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1201:Lib/FATFs/ff.c **** 		return 0;
1202:Lib/FATFs/ff.c **** 
1203:Lib/FATFs/ff.c **** 	return 1;						/* The part of LFN matched */
1204:Lib/FATFs/ff.c **** }
1205:Lib/FATFs/ff.c **** 
1206:Lib/FATFs/ff.c **** 
1207:Lib/FATFs/ff.c **** 
1208:Lib/FATFs/ff.c **** static
1209:Lib/FATFs/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1210:Lib/FATFs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1211:Lib/FATFs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
1212:Lib/FATFs/ff.c **** )
1213:Lib/FATFs/ff.c **** {
1214:Lib/FATFs/ff.c **** 	UINT i, s;
1215:Lib/FATFs/ff.c **** 	WCHAR wc, uc;
1216:Lib/FATFs/ff.c **** 
1217:Lib/FATFs/ff.c **** 
1218:Lib/FATFs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1219:Lib/FATFs/ff.c **** 
1220:Lib/FATFs/ff.c **** 	s = 0; wc = 1;
1221:Lib/FATFs/ff.c **** 	do {
1222:Lib/FATFs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1223:Lib/FATFs/ff.c **** 		if (wc) {	/* Last char has not been processed */
1224:Lib/FATFs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1225:Lib/FATFs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1226:Lib/FATFs/ff.c **** 		} else {
1227:Lib/FATFs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1228:Lib/FATFs/ff.c **** 		}
1229:Lib/FATFs/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1230:Lib/FATFs/ff.c **** 
1231:Lib/FATFs/ff.c **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1232:Lib/FATFs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1233:Lib/FATFs/ff.c **** 		lfnbuf[i] = 0;
1234:Lib/FATFs/ff.c **** 	}
1235:Lib/FATFs/ff.c **** 
1236:Lib/FATFs/ff.c **** 	return 1;
1237:Lib/FATFs/ff.c **** }
1238:Lib/FATFs/ff.c **** 
1239:Lib/FATFs/ff.c **** 
1240:Lib/FATFs/ff.c **** #if !_FS_READONLY
1241:Lib/FATFs/ff.c **** static
1242:Lib/FATFs/ff.c **** void fit_lfn (
1243:Lib/FATFs/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1244:Lib/FATFs/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
1245:Lib/FATFs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1246:Lib/FATFs/ff.c **** 	BYTE sum				/* SFN sum */
1247:Lib/FATFs/ff.c **** )
1248:Lib/FATFs/ff.c **** {
1249:Lib/FATFs/ff.c **** 	UINT i, s;
1250:Lib/FATFs/ff.c **** 	WCHAR wc;
1251:Lib/FATFs/ff.c **** 
1252:Lib/FATFs/ff.c **** 
1253:Lib/FATFs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1254:Lib/FATFs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1255:Lib/FATFs/ff.c **** 	dir[LDIR_Type] = 0;
1256:Lib/FATFs/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1257:Lib/FATFs/ff.c **** 
1258:Lib/FATFs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1259:Lib/FATFs/ff.c **** 	s = wc = 0;
1260:Lib/FATFs/ff.c **** 	do {
1261:Lib/FATFs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1262:Lib/FATFs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1263:Lib/FATFs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1264:Lib/FATFs/ff.c **** 	} while (++s < 13);
1265:Lib/FATFs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1266:Lib/FATFs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1267:Lib/FATFs/ff.c **** }
1268:Lib/FATFs/ff.c **** 
1269:Lib/FATFs/ff.c **** #endif
1270:Lib/FATFs/ff.c **** #endif
1271:Lib/FATFs/ff.c **** 
1272:Lib/FATFs/ff.c **** 
1273:Lib/FATFs/ff.c **** 
1274:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1275:Lib/FATFs/ff.c **** /* Create numbered name                                                  */
1276:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1277:Lib/FATFs/ff.c **** #if _USE_LFN
1278:Lib/FATFs/ff.c **** void gen_numname (
1279:Lib/FATFs/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
1280:Lib/FATFs/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1281:Lib/FATFs/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
1282:Lib/FATFs/ff.c **** 	WORD seq			/* Sequence number */
1283:Lib/FATFs/ff.c **** )
1284:Lib/FATFs/ff.c **** {
1285:Lib/FATFs/ff.c **** 	BYTE ns[8], c;
1286:Lib/FATFs/ff.c **** 	UINT i, j;
1287:Lib/FATFs/ff.c **** 
1288:Lib/FATFs/ff.c **** 
1289:Lib/FATFs/ff.c **** 	mem_cpy(dst, src, 11);
1290:Lib/FATFs/ff.c **** 
1291:Lib/FATFs/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1292:Lib/FATFs/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1293:Lib/FATFs/ff.c **** 	}
1294:Lib/FATFs/ff.c **** 
1295:Lib/FATFs/ff.c **** 	/* itoa (hexdecimal) */
1296:Lib/FATFs/ff.c **** 	i = 7;
1297:Lib/FATFs/ff.c **** 	do {
1298:Lib/FATFs/ff.c **** 		c = (seq % 16) + '0';
1299:Lib/FATFs/ff.c **** 		if (c > '9') c += 7;
1300:Lib/FATFs/ff.c **** 		ns[i--] = c;
1301:Lib/FATFs/ff.c **** 		seq /= 16;
1302:Lib/FATFs/ff.c **** 	} while (seq);
1303:Lib/FATFs/ff.c **** 	ns[i] = '~';
1304:Lib/FATFs/ff.c **** 
1305:Lib/FATFs/ff.c **** 	/* Append the number */
1306:Lib/FATFs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1307:Lib/FATFs/ff.c **** 		if (IsDBCS1(dst[j])) {
1308:Lib/FATFs/ff.c **** 			if (j == i - 1) break;
1309:Lib/FATFs/ff.c **** 			j++;
1310:Lib/FATFs/ff.c **** 		}
1311:Lib/FATFs/ff.c **** 	}
1312:Lib/FATFs/ff.c **** 	do {
1313:Lib/FATFs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1314:Lib/FATFs/ff.c **** 	} while (j < 8);
1315:Lib/FATFs/ff.c **** }
1316:Lib/FATFs/ff.c **** #endif
1317:Lib/FATFs/ff.c **** 
1318:Lib/FATFs/ff.c **** 
1319:Lib/FATFs/ff.c **** 
1320:Lib/FATFs/ff.c **** 
1321:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1322:Lib/FATFs/ff.c **** /* Calculate sum of an SFN                                               */
1323:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1324:Lib/FATFs/ff.c **** #if _USE_LFN
1325:Lib/FATFs/ff.c **** static
1326:Lib/FATFs/ff.c **** BYTE sum_sfn (
1327:Lib/FATFs/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
1328:Lib/FATFs/ff.c **** )
1329:Lib/FATFs/ff.c **** {
1330:Lib/FATFs/ff.c **** 	BYTE sum = 0;
1331:Lib/FATFs/ff.c **** 	UINT n = 11;
1332:Lib/FATFs/ff.c **** 
1333:Lib/FATFs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1334:Lib/FATFs/ff.c **** 	return sum;
1335:Lib/FATFs/ff.c **** }
1336:Lib/FATFs/ff.c **** #endif
1337:Lib/FATFs/ff.c **** 
1338:Lib/FATFs/ff.c **** 
1339:Lib/FATFs/ff.c **** 
1340:Lib/FATFs/ff.c **** 
1341:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1342:Lib/FATFs/ff.c **** /* Directory handling - Find an object in the directory                  */
1343:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1344:Lib/FATFs/ff.c **** 
1345:Lib/FATFs/ff.c **** static
1346:Lib/FATFs/ff.c **** FRESULT dir_find (
1347:Lib/FATFs/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1348:Lib/FATFs/ff.c **** )
1349:Lib/FATFs/ff.c **** {
1350:Lib/FATFs/ff.c **** 	FRESULT res;
1351:Lib/FATFs/ff.c **** 	BYTE c, *dir;
1352:Lib/FATFs/ff.c **** #if _USE_LFN
1353:Lib/FATFs/ff.c **** 	BYTE a, ord, sum;
1354:Lib/FATFs/ff.c **** #endif
1355:Lib/FATFs/ff.c **** 
1356:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1357:Lib/FATFs/ff.c **** 	if (res != FR_OK) return res;
1358:Lib/FATFs/ff.c **** 
1359:Lib/FATFs/ff.c **** #if _USE_LFN
1360:Lib/FATFs/ff.c **** 	ord = sum = 0xFF;
1361:Lib/FATFs/ff.c **** #endif
1362:Lib/FATFs/ff.c **** 	do {
1363:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1364:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1365:Lib/FATFs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1366:Lib/FATFs/ff.c **** 		c = dir[DIR_Name];
1367:Lib/FATFs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1368:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1369:Lib/FATFs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1370:Lib/FATFs/ff.c **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1371:Lib/FATFs/ff.c **** 			ord = 0xFF;
1372:Lib/FATFs/ff.c **** 		} else {
1373:Lib/FATFs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1374:Lib/FATFs/ff.c **** 				if (dj->lfn) {
1375:Lib/FATFs/ff.c **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1376:Lib/FATFs/ff.c **** 						sum = dir[LDIR_Chksum];
1377:Lib/FATFs/ff.c **** 						c &= ~LLE; ord = c;	/* LFN start order */
1378:Lib/FATFs/ff.c **** 						dj->lfn_idx = dj->index;
1379:Lib/FATFs/ff.c **** 					}
1380:Lib/FATFs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1381:Lib/FATFs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1382:Lib/FATFs/ff.c **** 				}
1383:Lib/FATFs/ff.c **** 			} else {					/* An SFN entry is found */
1384:Lib/FATFs/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1385:Lib/FATFs/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1386:Lib/FATFs/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1387:Lib/FATFs/ff.c **** 			}
1388:Lib/FATFs/ff.c **** 		}
1389:Lib/FATFs/ff.c **** #else		/* Non LFN configuration */
1390:Lib/FATFs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1391:Lib/FATFs/ff.c **** 			break;
1392:Lib/FATFs/ff.c **** #endif
1393:Lib/FATFs/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
1394:Lib/FATFs/ff.c **** 	} while (res == FR_OK);
1395:Lib/FATFs/ff.c **** 
1396:Lib/FATFs/ff.c **** 	return res;
1397:Lib/FATFs/ff.c **** }
1398:Lib/FATFs/ff.c **** 
1399:Lib/FATFs/ff.c **** 
1400:Lib/FATFs/ff.c **** 
1401:Lib/FATFs/ff.c **** 
1402:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1403:Lib/FATFs/ff.c **** /* Read an object from the directory                                     */
1404:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1405:Lib/FATFs/ff.c **** #if _FS_MINIMIZE <= 1
1406:Lib/FATFs/ff.c **** static
1407:Lib/FATFs/ff.c **** FRESULT dir_read (
1408:Lib/FATFs/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1409:Lib/FATFs/ff.c **** )
1410:Lib/FATFs/ff.c **** {
1411:Lib/FATFs/ff.c **** 	FRESULT res;
1412:Lib/FATFs/ff.c **** 	BYTE c, *dir;
1413:Lib/FATFs/ff.c **** #if _USE_LFN
1414:Lib/FATFs/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1415:Lib/FATFs/ff.c **** #endif
1416:Lib/FATFs/ff.c **** 
1417:Lib/FATFs/ff.c **** 	res = FR_NO_FILE;
1418:Lib/FATFs/ff.c **** 	while (dj->sect) {
1419:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1420:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1421:Lib/FATFs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1422:Lib/FATFs/ff.c **** 		c = dir[DIR_Name];
1423:Lib/FATFs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1424:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1425:Lib/FATFs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1426:Lib/FATFs/ff.c **** 		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without 
1427:Lib/FATFs/ff.c **** 			ord = 0xFF;
1428:Lib/FATFs/ff.c **** 		} else {
1429:Lib/FATFs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1430:Lib/FATFs/ff.c **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1431:Lib/FATFs/ff.c **** 					sum = dir[LDIR_Chksum];
1432:Lib/FATFs/ff.c **** 					c &= ~LLE; ord = c;
1433:Lib/FATFs/ff.c **** 					dj->lfn_idx = dj->index;
1434:Lib/FATFs/ff.c **** 				}
1435:Lib/FATFs/ff.c **** 				/* Check LFN validity and capture it */
1436:Lib/FATFs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1437:Lib/FATFs/ff.c **** 			} else {					/* An SFN entry is found */
1438:Lib/FATFs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1439:Lib/FATFs/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1440:Lib/FATFs/ff.c **** 				break;
1441:Lib/FATFs/ff.c **** 			}
1442:Lib/FATFs/ff.c **** 		}
1443:Lib/FATFs/ff.c **** #else		/* Non LFN configuration */
1444:Lib/FATFs/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1445:Lib/FATFs/ff.c **** 			break;
1446:Lib/FATFs/ff.c **** #endif
1447:Lib/FATFs/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
1448:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1449:Lib/FATFs/ff.c **** 	}
1450:Lib/FATFs/ff.c **** 
1451:Lib/FATFs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
1452:Lib/FATFs/ff.c **** 
1453:Lib/FATFs/ff.c **** 	return res;
1454:Lib/FATFs/ff.c **** }
1455:Lib/FATFs/ff.c **** #endif
1456:Lib/FATFs/ff.c **** 
1457:Lib/FATFs/ff.c **** 
1458:Lib/FATFs/ff.c **** 
1459:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1460:Lib/FATFs/ff.c **** /* Register an object to the directory                                   */
1461:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1462:Lib/FATFs/ff.c **** #if !_FS_READONLY
1463:Lib/FATFs/ff.c **** static
1464:Lib/FATFs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1465:Lib/FATFs/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
1466:Lib/FATFs/ff.c **** )
1467:Lib/FATFs/ff.c **** {
1468:Lib/FATFs/ff.c **** 	FRESULT res;
1469:Lib/FATFs/ff.c **** 	BYTE c, *dir;
1470:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1471:Lib/FATFs/ff.c **** 	WORD n, ne, is;
1472:Lib/FATFs/ff.c **** 	BYTE sn[12], *fn, sum;
1473:Lib/FATFs/ff.c **** 	WCHAR *lfn;
1474:Lib/FATFs/ff.c **** 
1475:Lib/FATFs/ff.c **** 
1476:Lib/FATFs/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
1477:Lib/FATFs/ff.c **** 	mem_cpy(sn, fn, 12);
1478:Lib/FATFs/ff.c **** 
1479:Lib/FATFs/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1480:Lib/FATFs/ff.c **** 		return FR_INVALID_NAME;
1481:Lib/FATFs/ff.c **** 
1482:Lib/FATFs/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1483:Lib/FATFs/ff.c **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1484:Lib/FATFs/ff.c **** 		for (n = 1; n < 100; n++) {
1485:Lib/FATFs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1486:Lib/FATFs/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1487:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1488:Lib/FATFs/ff.c **** 		}
1489:Lib/FATFs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1490:Lib/FATFs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1491:Lib/FATFs/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1492:Lib/FATFs/ff.c **** 	}
1493:Lib/FATFs/ff.c **** 
1494:Lib/FATFs/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1495:Lib/FATFs/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
1496:Lib/FATFs/ff.c **** 		ne = (ne + 25) / 13;
1497:Lib/FATFs/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
1498:Lib/FATFs/ff.c **** 		ne = 1;
1499:Lib/FATFs/ff.c **** 	}
1500:Lib/FATFs/ff.c **** 
1501:Lib/FATFs/ff.c **** 	/* Reserve contiguous entries */
1502:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, 0);
1503:Lib/FATFs/ff.c **** 	if (res != FR_OK) return res;
1504:Lib/FATFs/ff.c **** 	n = is = 0;
1505:Lib/FATFs/ff.c **** 	do {
1506:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1507:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
1508:Lib/FATFs/ff.c **** 		c = *dj->dir;				/* Check the entry status */
1509:Lib/FATFs/ff.c **** 		if (c == DDE || c == 0) {	/* Is it a blank entry? */
1510:Lib/FATFs/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1511:Lib/FATFs/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1512:Lib/FATFs/ff.c **** 		} else {
1513:Lib/FATFs/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
1514:Lib/FATFs/ff.c **** 		}
1515:Lib/FATFs/ff.c **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1516:Lib/FATFs/ff.c **** 	} while (res == FR_OK);
1517:Lib/FATFs/ff.c **** 
1518:Lib/FATFs/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1519:Lib/FATFs/ff.c **** 		res = dir_sdi(dj, is);
1520:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
1521:Lib/FATFs/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1522:Lib/FATFs/ff.c **** 			ne--;
1523:Lib/FATFs/ff.c **** 			do {					/* Store LFN entries in bottom first */
1524:Lib/FATFs/ff.c **** 				res = move_window(dj->fs, dj->sect);
1525:Lib/FATFs/ff.c **** 				if (res != FR_OK) break;
1526:Lib/FATFs/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1527:Lib/FATFs/ff.c **** 				dj->fs->wflag = 1;
1528:Lib/FATFs/ff.c **** 				res = dir_next(dj, 0);	/* Next entry */
1529:Lib/FATFs/ff.c **** 			} while (res == FR_OK && --ne);
1530:Lib/FATFs/ff.c **** 		}
1531:Lib/FATFs/ff.c **** 	}
1532:Lib/FATFs/ff.c **** 
1533:Lib/FATFs/ff.c **** #else	/* Non LFN configuration */
1534:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, 0);
1535:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1536:Lib/FATFs/ff.c **** 		do {	/* Find a blank entry for the SFN */
1537:Lib/FATFs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1538:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1539:Lib/FATFs/ff.c **** 			c = *dj->dir;
1540:Lib/FATFs/ff.c **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
1541:Lib/FATFs/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1542:Lib/FATFs/ff.c **** 		} while (res == FR_OK);
1543:Lib/FATFs/ff.c **** 	}
1544:Lib/FATFs/ff.c **** #endif
1545:Lib/FATFs/ff.c **** 
1546:Lib/FATFs/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1547:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1548:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
1549:Lib/FATFs/ff.c **** 			dir = dj->dir;
1550:Lib/FATFs/ff.c **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
1551:Lib/FATFs/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1552:Lib/FATFs/ff.c **** #if _USE_LFN
1553:Lib/FATFs/ff.c **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1554:Lib/FATFs/ff.c **** #endif
1555:Lib/FATFs/ff.c **** 			dj->fs->wflag = 1;
1556:Lib/FATFs/ff.c **** 		}
1557:Lib/FATFs/ff.c **** 	}
1558:Lib/FATFs/ff.c **** 
1559:Lib/FATFs/ff.c **** 	return res;
1560:Lib/FATFs/ff.c **** }
1561:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
1562:Lib/FATFs/ff.c **** 
1563:Lib/FATFs/ff.c **** 
1564:Lib/FATFs/ff.c **** 
1565:Lib/FATFs/ff.c **** 
1566:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1567:Lib/FATFs/ff.c **** /* Remove an object from the directory                                   */
1568:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1569:Lib/FATFs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1570:Lib/FATFs/ff.c **** static
1571:Lib/FATFs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1572:Lib/FATFs/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1573:Lib/FATFs/ff.c **** )
1574:Lib/FATFs/ff.c **** {
1575:Lib/FATFs/ff.c **** 	FRESULT res;
1576:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1577:Lib/FATFs/ff.c **** 	WORD i;
1578:Lib/FATFs/ff.c **** 
1579:Lib/FATFs/ff.c **** 	i = dj->index;	/* SFN index */
1580:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1581:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1582:Lib/FATFs/ff.c **** 		do {
1583:Lib/FATFs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1584:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1585:Lib/FATFs/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1586:Lib/FATFs/ff.c **** 			dj->fs->wflag = 1;
1587:Lib/FATFs/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1588:Lib/FATFs/ff.c **** 			res = dir_next(dj, 0);		/* Next entry */
1589:Lib/FATFs/ff.c **** 		} while (res == FR_OK);
1590:Lib/FATFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1591:Lib/FATFs/ff.c **** 	}
1592:Lib/FATFs/ff.c **** 
1593:Lib/FATFs/ff.c **** #else			/* Non LFN configuration */
1594:Lib/FATFs/ff.c **** 	res = dir_sdi(dj, dj->index);
1595:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
1596:Lib/FATFs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1597:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
1598:Lib/FATFs/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1599:Lib/FATFs/ff.c **** 			dj->fs->wflag = 1;
1600:Lib/FATFs/ff.c **** 		}
1601:Lib/FATFs/ff.c **** 	}
1602:Lib/FATFs/ff.c **** #endif
1603:Lib/FATFs/ff.c **** 
1604:Lib/FATFs/ff.c **** 	return res;
1605:Lib/FATFs/ff.c **** }
1606:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
1607:Lib/FATFs/ff.c **** 
1608:Lib/FATFs/ff.c **** 
1609:Lib/FATFs/ff.c **** 
1610:Lib/FATFs/ff.c **** 
1611:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1612:Lib/FATFs/ff.c **** /* Pick a segment and create the object name in directory form           */
1613:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1614:Lib/FATFs/ff.c **** 
1615:Lib/FATFs/ff.c **** static
1616:Lib/FATFs/ff.c **** FRESULT create_name (
1617:Lib/FATFs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1618:Lib/FATFs/ff.c **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1619:Lib/FATFs/ff.c **** )
1620:Lib/FATFs/ff.c **** {
1621:Lib/FATFs/ff.c **** #ifdef _EXCVT
1622:Lib/FATFs/ff.c **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1623:Lib/FATFs/ff.c **** #endif
1624:Lib/FATFs/ff.c **** 
1625:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
1626:Lib/FATFs/ff.c **** 	BYTE b, cf;
1627:Lib/FATFs/ff.c **** 	WCHAR w, *lfn;
1628:Lib/FATFs/ff.c **** 	UINT i, ni, si, di;
1629:Lib/FATFs/ff.c **** 	const TCHAR *p;
1630:Lib/FATFs/ff.c **** 
1631:Lib/FATFs/ff.c **** 	/* Create LFN in Unicode */
1632:Lib/FATFs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1633:Lib/FATFs/ff.c **** 	lfn = dj->lfn;
1634:Lib/FATFs/ff.c **** 	si = di = 0;
1635:Lib/FATFs/ff.c **** 	for (;;) {
1636:Lib/FATFs/ff.c **** 		w = p[si++];					/* Get a character */
1637:Lib/FATFs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1638:Lib/FATFs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1639:Lib/FATFs/ff.c **** 			return FR_INVALID_NAME;
1640:Lib/FATFs/ff.c **** #if !_LFN_UNICODE
1641:Lib/FATFs/ff.c **** 		w &= 0xFF;
1642:Lib/FATFs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1643:Lib/FATFs/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1644:Lib/FATFs/ff.c **** 			if (!IsDBCS2(b))
1645:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1646:Lib/FATFs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1647:Lib/FATFs/ff.c **** 		}
1648:Lib/FATFs/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1649:Lib/FATFs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1650:Lib/FATFs/ff.c **** #endif
1651:Lib/FATFs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1652:Lib/FATFs/ff.c **** 			return FR_INVALID_NAME;
1653:Lib/FATFs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1654:Lib/FATFs/ff.c **** 	}
1655:Lib/FATFs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1656:Lib/FATFs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1657:Lib/FATFs/ff.c **** #if _FS_RPATH
1658:Lib/FATFs/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1659:Lib/FATFs/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1660:Lib/FATFs/ff.c **** 		lfn[di] = 0;
1661:Lib/FATFs/ff.c **** 		for (i = 0; i < 11; i++)
1662:Lib/FATFs/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1663:Lib/FATFs/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1664:Lib/FATFs/ff.c **** 		return FR_OK;
1665:Lib/FATFs/ff.c **** 	}
1666:Lib/FATFs/ff.c **** #endif
1667:Lib/FATFs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1668:Lib/FATFs/ff.c **** 		w = lfn[di-1];
1669:Lib/FATFs/ff.c **** 		if (w != ' ' && w != '.') break;
1670:Lib/FATFs/ff.c **** 		di--;
1671:Lib/FATFs/ff.c **** 	}
1672:Lib/FATFs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1673:Lib/FATFs/ff.c **** 
1674:Lib/FATFs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1675:Lib/FATFs/ff.c **** 
1676:Lib/FATFs/ff.c **** 	/* Create SFN in directory form */
1677:Lib/FATFs/ff.c **** 	mem_set(dj->fn, ' ', 11);
1678:Lib/FATFs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1679:Lib/FATFs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1680:Lib/FATFs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1681:Lib/FATFs/ff.c **** 
1682:Lib/FATFs/ff.c **** 	b = i = 0; ni = 8;
1683:Lib/FATFs/ff.c **** 	for (;;) {
1684:Lib/FATFs/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1685:Lib/FATFs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1686:Lib/FATFs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1687:Lib/FATFs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1688:Lib/FATFs/ff.c **** 		}
1689:Lib/FATFs/ff.c **** 
1690:Lib/FATFs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1691:Lib/FATFs/ff.c **** 			if (ni == 11) {				/* Long extension */
1692:Lib/FATFs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1693:Lib/FATFs/ff.c **** 			}
1694:Lib/FATFs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1695:Lib/FATFs/ff.c **** 			if (si > di) break;			/* No extension */
1696:Lib/FATFs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1697:Lib/FATFs/ff.c **** 			b <<= 2; continue;
1698:Lib/FATFs/ff.c **** 		}
1699:Lib/FATFs/ff.c **** 
1700:Lib/FATFs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
1701:Lib/FATFs/ff.c **** #ifdef _EXCVT
1702:Lib/FATFs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1703:Lib/FATFs/ff.c **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1704:Lib/FATFs/ff.c **** #else
1705:Lib/FATFs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1706:Lib/FATFs/ff.c **** #endif
1707:Lib/FATFs/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1708:Lib/FATFs/ff.c **** 		}
1709:Lib/FATFs/ff.c **** 
1710:Lib/FATFs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1711:Lib/FATFs/ff.c **** 			if (i >= ni - 1) {
1712:Lib/FATFs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1713:Lib/FATFs/ff.c **** 			}
1714:Lib/FATFs/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1715:Lib/FATFs/ff.c **** 		} else {						/* Single byte char */
1716:Lib/FATFs/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1717:Lib/FATFs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1718:Lib/FATFs/ff.c **** 			} else {
1719:Lib/FATFs/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1720:Lib/FATFs/ff.c **** 					b |= 2;
1721:Lib/FATFs/ff.c **** 				} else {
1722:Lib/FATFs/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1723:Lib/FATFs/ff.c **** 						b |= 1; w -= 0x20;
1724:Lib/FATFs/ff.c **** 					}
1725:Lib/FATFs/ff.c **** 				}
1726:Lib/FATFs/ff.c **** 			}
1727:Lib/FATFs/ff.c **** 		}
1728:Lib/FATFs/ff.c **** 		dj->fn[i++] = (BYTE)w;
1729:Lib/FATFs/ff.c **** 	}
1730:Lib/FATFs/ff.c **** 
1731:Lib/FATFs/ff.c **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
1732:Lib/FATFs/ff.c **** 
1733:Lib/FATFs/ff.c **** 	if (ni == 8) b <<= 2;
1734:Lib/FATFs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1735:Lib/FATFs/ff.c **** 		cf |= NS_LFN;
1736:Lib/FATFs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1737:Lib/FATFs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1738:Lib/FATFs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1739:Lib/FATFs/ff.c **** 	}
1740:Lib/FATFs/ff.c **** 
1741:Lib/FATFs/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
1742:Lib/FATFs/ff.c **** 
1743:Lib/FATFs/ff.c **** 	return FR_OK;
1744:Lib/FATFs/ff.c **** 
1745:Lib/FATFs/ff.c **** 
1746:Lib/FATFs/ff.c **** #else	/* Non-LFN configuration */
1747:Lib/FATFs/ff.c **** 	BYTE b, c, d, *sfn;
1748:Lib/FATFs/ff.c **** 	UINT ni, si, i;
1749:Lib/FATFs/ff.c **** 	const char *p;
1750:Lib/FATFs/ff.c **** 
1751:Lib/FATFs/ff.c **** 	/* Create file name in directory form */
1752:Lib/FATFs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1753:Lib/FATFs/ff.c **** 	sfn = dj->fn;
1754:Lib/FATFs/ff.c **** 	mem_set(sfn, ' ', 11);
1755:Lib/FATFs/ff.c **** 	si = i = b = 0; ni = 8;
1756:Lib/FATFs/ff.c **** #if _FS_RPATH
1757:Lib/FATFs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1758:Lib/FATFs/ff.c **** 		for (;;) {
1759:Lib/FATFs/ff.c **** 			c = (BYTE)p[si++];
1760:Lib/FATFs/ff.c **** 			if (c != '.' || si >= 3) break;
1761:Lib/FATFs/ff.c **** 			sfn[i++] = c;
1762:Lib/FATFs/ff.c **** 		}
1763:Lib/FATFs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1764:Lib/FATFs/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1765:Lib/FATFs/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1766:Lib/FATFs/ff.c **** 		return FR_OK;
1767:Lib/FATFs/ff.c **** 	}
1768:Lib/FATFs/ff.c **** #endif
1769:Lib/FATFs/ff.c **** 	for (;;) {
1770:Lib/FATFs/ff.c **** 		c = (BYTE)p[si++];
1771:Lib/FATFs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1772:Lib/FATFs/ff.c **** 		if (c == '.' || i >= ni) {
1773:Lib/FATFs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1774:Lib/FATFs/ff.c **** 			i = 8; ni = 11;
1775:Lib/FATFs/ff.c **** 			b <<= 2; continue;
1776:Lib/FATFs/ff.c **** 		}
1777:Lib/FATFs/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
1778:Lib/FATFs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
1779:Lib/FATFs/ff.c **** #ifdef _EXCVT
1780:Lib/FATFs/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
1781:Lib/FATFs/ff.c **** #else
1782:Lib/FATFs/ff.c **** #if !_DF1S	/* ASCII only cfg */
1783:Lib/FATFs/ff.c **** 			return FR_INVALID_NAME;
1784:Lib/FATFs/ff.c **** #endif
1785:Lib/FATFs/ff.c **** #endif
1786:Lib/FATFs/ff.c **** 		}
1787:Lib/FATFs/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1788:Lib/FATFs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1789:Lib/FATFs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1790:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
1791:Lib/FATFs/ff.c **** 			sfn[i++] = c;
1792:Lib/FATFs/ff.c **** 			sfn[i++] = d;
1793:Lib/FATFs/ff.c **** 		} else {						/* Single byte code */
1794:Lib/FATFs/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1795:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
1796:Lib/FATFs/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1797:Lib/FATFs/ff.c **** 				b |= 2;
1798:Lib/FATFs/ff.c **** 			} else {
1799:Lib/FATFs/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1800:Lib/FATFs/ff.c **** 					b |= 1; c -= 0x20;
1801:Lib/FATFs/ff.c **** 				}
1802:Lib/FATFs/ff.c **** 			}
1803:Lib/FATFs/ff.c **** 			sfn[i++] = c;
1804:Lib/FATFs/ff.c **** 		}
1805:Lib/FATFs/ff.c **** 	}
1806:Lib/FATFs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1807:Lib/FATFs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1808:Lib/FATFs/ff.c **** 
1809:Lib/FATFs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1810:Lib/FATFs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
1811:Lib/FATFs/ff.c **** 
1812:Lib/FATFs/ff.c **** 	if (ni == 8) b <<= 2;
1813:Lib/FATFs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1814:Lib/FATFs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1815:Lib/FATFs/ff.c **** 
1816:Lib/FATFs/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1817:Lib/FATFs/ff.c **** 
1818:Lib/FATFs/ff.c **** 	return FR_OK;
1819:Lib/FATFs/ff.c **** #endif
1820:Lib/FATFs/ff.c **** }
1821:Lib/FATFs/ff.c **** 
1822:Lib/FATFs/ff.c **** 
1823:Lib/FATFs/ff.c **** 
1824:Lib/FATFs/ff.c **** 
1825:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1826:Lib/FATFs/ff.c **** /* Get file information from directory entry                             */
1827:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1828:Lib/FATFs/ff.c **** #if _FS_MINIMIZE <= 1
1829:Lib/FATFs/ff.c **** static
1830:Lib/FATFs/ff.c **** void get_fileinfo (		/* No return code */
1831:Lib/FATFs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1832:Lib/FATFs/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1833:Lib/FATFs/ff.c **** )
1834:Lib/FATFs/ff.c **** {
1835:Lib/FATFs/ff.c **** 	UINT i;
1836:Lib/FATFs/ff.c **** 	BYTE nt, *dir;
1837:Lib/FATFs/ff.c **** 	TCHAR *p, c;
1838:Lib/FATFs/ff.c **** 
1839:Lib/FATFs/ff.c **** 
1840:Lib/FATFs/ff.c **** 	p = fno->fname;
1841:Lib/FATFs/ff.c **** 	if (dj->sect) {
1842:Lib/FATFs/ff.c **** 		dir = dj->dir;
1843:Lib/FATFs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1844:Lib/FATFs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
1845:Lib/FATFs/ff.c **** 			c = dir[i];
1846:Lib/FATFs/ff.c **** 			if (c == ' ') break;
1847:Lib/FATFs/ff.c **** 			if (c == NDDE) c = (TCHAR)DDE;
1848:Lib/FATFs/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1849:Lib/FATFs/ff.c **** #if _LFN_UNICODE
1850:Lib/FATFs/ff.c **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1851:Lib/FATFs/ff.c **** 				c = (c << 8) | dir[++i];
1852:Lib/FATFs/ff.c **** 			c = ff_convert(c, 1);
1853:Lib/FATFs/ff.c **** 			if (!c) c = '?';
1854:Lib/FATFs/ff.c **** #endif
1855:Lib/FATFs/ff.c **** 			*p++ = c;
1856:Lib/FATFs/ff.c **** 		}
1857:Lib/FATFs/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
1858:Lib/FATFs/ff.c **** 			*p++ = '.';
1859:Lib/FATFs/ff.c **** 			for (i = 8; i < 11; i++) {
1860:Lib/FATFs/ff.c **** 				c = dir[i];
1861:Lib/FATFs/ff.c **** 				if (c == ' ') break;
1862:Lib/FATFs/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1863:Lib/FATFs/ff.c **** #if _LFN_UNICODE
1864:Lib/FATFs/ff.c **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1865:Lib/FATFs/ff.c **** 					c = (c << 8) | dir[++i];
1866:Lib/FATFs/ff.c **** 				c = ff_convert(c, 1);
1867:Lib/FATFs/ff.c **** 				if (!c) c = '?';
1868:Lib/FATFs/ff.c **** #endif
1869:Lib/FATFs/ff.c **** 				*p++ = c;
1870:Lib/FATFs/ff.c **** 			}
1871:Lib/FATFs/ff.c **** 		}
1872:Lib/FATFs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1873:Lib/FATFs/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
1874:Lib/FATFs/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
1875:Lib/FATFs/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
1876:Lib/FATFs/ff.c **** 	}
1877:Lib/FATFs/ff.c **** 	*p = 0;		/* Terminate SFN str by a \0 */
1878:Lib/FATFs/ff.c **** 
1879:Lib/FATFs/ff.c **** #if _USE_LFN
1880:Lib/FATFs/ff.c **** 	if (fno->lfname && fno->lfsize) {
1881:Lib/FATFs/ff.c **** 		TCHAR *tp = fno->lfname;
1882:Lib/FATFs/ff.c **** 		WCHAR w, *lfn;
1883:Lib/FATFs/ff.c **** 
1884:Lib/FATFs/ff.c **** 		i = 0;
1885:Lib/FATFs/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1886:Lib/FATFs/ff.c **** 			lfn = dj->lfn;
1887:Lib/FATFs/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1888:Lib/FATFs/ff.c **** #if !_LFN_UNICODE
1889:Lib/FATFs/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1890:Lib/FATFs/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1891:Lib/FATFs/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1892:Lib/FATFs/ff.c **** 					tp[i++] = (TCHAR)(w >> 8);
1893:Lib/FATFs/ff.c **** #endif
1894:Lib/FATFs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1895:Lib/FATFs/ff.c **** 				tp[i++] = (TCHAR)w;
1896:Lib/FATFs/ff.c **** 			}
1897:Lib/FATFs/ff.c **** 		}
1898:Lib/FATFs/ff.c **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1899:Lib/FATFs/ff.c **** 	}
1900:Lib/FATFs/ff.c **** #endif
1901:Lib/FATFs/ff.c **** }
1902:Lib/FATFs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1903:Lib/FATFs/ff.c **** 
1904:Lib/FATFs/ff.c **** 
1905:Lib/FATFs/ff.c **** 
1906:Lib/FATFs/ff.c **** 
1907:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1908:Lib/FATFs/ff.c **** /* Follow a file path                                                    */
1909:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1910:Lib/FATFs/ff.c **** 
1911:Lib/FATFs/ff.c **** static
1912:Lib/FATFs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1913:Lib/FATFs/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1914:Lib/FATFs/ff.c **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1915:Lib/FATFs/ff.c **** )
1916:Lib/FATFs/ff.c **** {
1917:Lib/FATFs/ff.c **** 	FRESULT res;
1918:Lib/FATFs/ff.c **** 	BYTE *dir, ns;
1919:Lib/FATFs/ff.c **** 
1920:Lib/FATFs/ff.c **** 
1921:Lib/FATFs/ff.c **** #if _FS_RPATH
1922:Lib/FATFs/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1923:Lib/FATFs/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1924:Lib/FATFs/ff.c **** 	} else {							/* No heading separator */
1925:Lib/FATFs/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1926:Lib/FATFs/ff.c **** 	}
1927:Lib/FATFs/ff.c **** #else
1928:Lib/FATFs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1929:Lib/FATFs/ff.c **** 		path++;
1930:Lib/FATFs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1931:Lib/FATFs/ff.c **** #endif
1932:Lib/FATFs/ff.c **** 
1933:Lib/FATFs/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1934:Lib/FATFs/ff.c **** 		res = dir_sdi(dj, 0);
1935:Lib/FATFs/ff.c **** 		dj->dir = 0;
1936:Lib/FATFs/ff.c **** 
1937:Lib/FATFs/ff.c **** 	} else {							/* Follow path */
1938:Lib/FATFs/ff.c **** 		for (;;) {
1939:Lib/FATFs/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1940:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
1941:Lib/FATFs/ff.c **** 			res = dir_find(dj);				/* Find it */
1942:Lib/FATFs/ff.c **** 			ns = *(dj->fn+NS);
1943:Lib/FATFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
1944:Lib/FATFs/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1945:Lib/FATFs/ff.c **** 				/* Object not found */
1946:Lib/FATFs/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1947:Lib/FATFs/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1948:Lib/FATFs/ff.c **** 					res = FR_OK;
1949:Lib/FATFs/ff.c **** 					if (!(ns & NS_LAST)) continue;
1950:Lib/FATFs/ff.c **** 				} else {							/* Could not find the object */
1951:Lib/FATFs/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1952:Lib/FATFs/ff.c **** 				}
1953:Lib/FATFs/ff.c **** 				break;
1954:Lib/FATFs/ff.c **** 			}
1955:Lib/FATFs/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1956:Lib/FATFs/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1957:Lib/FATFs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1958:Lib/FATFs/ff.c **** 				res = FR_NO_PATH; break;
1959:Lib/FATFs/ff.c **** 			}
1960:Lib/FATFs/ff.c **** 			dj->sclust = LD_CLUST(dir);
1961:Lib/FATFs/ff.c **** 		}
1962:Lib/FATFs/ff.c **** 	}
1963:Lib/FATFs/ff.c **** 
1964:Lib/FATFs/ff.c **** 	return res;
1965:Lib/FATFs/ff.c **** }
1966:Lib/FATFs/ff.c **** 
1967:Lib/FATFs/ff.c **** 
1968:Lib/FATFs/ff.c **** 
1969:Lib/FATFs/ff.c **** 
1970:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1971:Lib/FATFs/ff.c **** /* Load boot record and check if it is an FAT boot record                */
1972:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1973:Lib/FATFs/ff.c **** 
1974:Lib/FATFs/ff.c **** static
1975:Lib/FATFs/ff.c **** BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
1976:Lib/FATFs/ff.c **** 	FATFS *fs,	/* File system object */
1977:Lib/FATFs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1978:Lib/FATFs/ff.c **** )
1979:Lib/FATFs/ff.c **** {
 306               		.loc 1 1979 0
 307               		.cfi_startproc
 308               	.LVL27:
 309 0000 0F93      		push r16
 310               	.LCFI16:
 311               		.cfi_def_cfa_offset 3
 312               		.cfi_offset 16, -2
 313 0002 CF93      		push r28
 314               	.LCFI17:
 315               		.cfi_def_cfa_offset 4
 316               		.cfi_offset 28, -3
 317 0004 DF93      		push r29
 318               	.LCFI18:
 319               		.cfi_def_cfa_offset 5
 320               		.cfi_offset 29, -4
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 3 */
 324               	.L__stack_usage = 3
 325 0006 EC01      		movw r28,r24
 326 0008 9A01      		movw r18,r20
 327 000a AB01      		movw r20,r22
1980:Lib/FATFs/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 328               		.loc 1 1980 0
 329 000c BC01      		movw r22,r24
 330 000e 625D      		subi r22,-46
 331 0010 7F4F      		sbci r23,-1
 332 0012 01E0      		ldi r16,lo8(1)
 333 0014 8981      		ldd r24,Y+1
 334               	.LVL28:
 335 0016 0E94 0000 		call disk_read
 336               	.LVL29:
 337 001a 8111      		cpse r24,__zero_reg__
 338 001c 00C0      		rjmp .L25
1981:Lib/FATFs/ff.c **** 		return 3;
1982:Lib/FATFs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 339               		.loc 1 1982 0
 340 001e FE01      		movw r30,r28
 341 0020 E45D      		subi r30,-44
 342 0022 FD4F      		sbci r31,-3
 343 0024 8081      		ld r24,Z
 344 0026 9181      		ldd r25,Z+1
 345 0028 8535      		cpi r24,85
 346 002a 9A4A      		sbci r25,-86
 347 002c 01F4      		brne .L26
1983:Lib/FATFs/ff.c **** 		return 2;
1984:Lib/FATFs/ff.c **** 
1985:Lib/FATFs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 348               		.loc 1 1985 0
 349 002e E85C      		subi r30,-56
 350 0030 F140      		sbci r31,1
 351 0032 8081      		ld r24,Z
 352 0034 9181      		ldd r25,Z+1
 353 0036 A281      		ldd r26,Z+2
 354 0038 B381      		ldd r27,Z+3
 355 003a BB27      		clr r27
 356 003c 8634      		cpi r24,70
 357 003e 9144      		sbci r25,65
 358 0040 A445      		sbci r26,84
 359 0042 B105      		cpc r27,__zero_reg__
 360 0044 01F0      		breq .L27
1986:Lib/FATFs/ff.c **** 		return 0;
1987:Lib/FATFs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 361               		.loc 1 1987 0
 362 0046 C058      		subi r28,-128
 363 0048 DF4F      		sbci r29,-1
 364               	.LVL30:
1981:Lib/FATFs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 365               		.loc 1 1981 0
 366 004a 4881      		ld r20,Y
 367 004c 5981      		ldd r21,Y+1
 368 004e 6A81      		ldd r22,Y+2
 369 0050 7B81      		ldd r23,Y+3
 370 0052 7727      		clr r23
 371 0054 81E0      		ldi r24,lo8(1)
 372 0056 4634      		cpi r20,70
 373 0058 5144      		sbci r21,65
 374 005a 6445      		sbci r22,84
 375 005c 7105      		cpc r23,__zero_reg__
 376 005e 01F4      		brne .L23
 377 0060 00C0      		rjmp .L27
 378               	.LVL31:
 379               	.L25:
 380 0062 83E0      		ldi r24,lo8(3)
 381 0064 00C0      		rjmp .L23
 382               	.L26:
1983:Lib/FATFs/ff.c **** 		return 2;
 383               		.loc 1 1983 0
 384 0066 82E0      		ldi r24,lo8(2)
 385 0068 00C0      		rjmp .L23
 386               	.LVL32:
 387               	.L27:
1986:Lib/FATFs/ff.c **** 		return 0;
 388               		.loc 1 1986 0
 389 006a 80E0      		ldi r24,0
 390               	.LVL33:
 391               	.L23:
 392               	/* epilogue start */
1988:Lib/FATFs/ff.c **** 		return 0;
1989:Lib/FATFs/ff.c **** 
1990:Lib/FATFs/ff.c **** 	return 1;
1991:Lib/FATFs/ff.c **** }
 393               		.loc 1 1991 0
 394 006c DF91      		pop r29
 395 006e CF91      		pop r28
 396 0070 0F91      		pop r16
 397 0072 0895      		ret
 398               		.cfi_endproc
 399               	.LFE156:
 401               		.section	.text.validate,"ax",@progbits
 403               	validate:
 404               	.LFB158:
1992:Lib/FATFs/ff.c **** 
1993:Lib/FATFs/ff.c **** 
1994:Lib/FATFs/ff.c **** 
1995:Lib/FATFs/ff.c **** 
1996:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1997:Lib/FATFs/ff.c **** /* Check if the file system object is valid or not                       */
1998:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
1999:Lib/FATFs/ff.c **** 
2000:Lib/FATFs/ff.c **** static
2001:Lib/FATFs/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2002:Lib/FATFs/ff.c **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2003:Lib/FATFs/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2004:Lib/FATFs/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
2005:Lib/FATFs/ff.c **** )
2006:Lib/FATFs/ff.c **** {
2007:Lib/FATFs/ff.c **** 	BYTE fmt, b, *tbl;
2008:Lib/FATFs/ff.c **** 	UINT vol;
2009:Lib/FATFs/ff.c **** 	DSTATUS stat;
2010:Lib/FATFs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2011:Lib/FATFs/ff.c **** 	WORD nrsv;
2012:Lib/FATFs/ff.c **** 	const TCHAR *p = *path;
2013:Lib/FATFs/ff.c **** 	FATFS *fs;
2014:Lib/FATFs/ff.c **** 
2015:Lib/FATFs/ff.c **** 	/* Get logical drive number from the path name */
2016:Lib/FATFs/ff.c **** 	vol = p[0] - '0';					/* Is there a drive number? */
2017:Lib/FATFs/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
2018:Lib/FATFs/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
2019:Lib/FATFs/ff.c **** 	} else {							/* No drive number is given */
2020:Lib/FATFs/ff.c **** #if _FS_RPATH
2021:Lib/FATFs/ff.c **** 		vol = CurrVol;					/* Use current drive */
2022:Lib/FATFs/ff.c **** #else
2023:Lib/FATFs/ff.c **** 		vol = 0;						/* Use drive 0 */
2024:Lib/FATFs/ff.c **** #endif
2025:Lib/FATFs/ff.c **** 	}
2026:Lib/FATFs/ff.c **** 
2027:Lib/FATFs/ff.c **** 	/* Check if the logical drive is valid or not */
2028:Lib/FATFs/ff.c **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
2029:Lib/FATFs/ff.c **** 		return FR_INVALID_DRIVE;
2030:Lib/FATFs/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
2031:Lib/FATFs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2032:Lib/FATFs/ff.c **** 
2033:Lib/FATFs/ff.c **** 	ENTER_FF(fs);						/* Lock file system */
2034:Lib/FATFs/ff.c **** 
2035:Lib/FATFs/ff.c **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
2036:Lib/FATFs/ff.c **** 		stat = disk_status(fs->drv);
2037:Lib/FATFs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
2038:Lib/FATFs/ff.c **** #if !_FS_READONLY
2039:Lib/FATFs/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
2040:Lib/FATFs/ff.c **** 				return FR_WRITE_PROTECTED;
2041:Lib/FATFs/ff.c **** #endif
2042:Lib/FATFs/ff.c **** 			return FR_OK;				/* The file system object is valid */
2043:Lib/FATFs/ff.c **** 		}
2044:Lib/FATFs/ff.c **** 	}
2045:Lib/FATFs/ff.c **** 
2046:Lib/FATFs/ff.c **** 	/* The logical drive must be mounted. */
2047:Lib/FATFs/ff.c **** 	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */
2048:Lib/FATFs/ff.c **** 
2049:Lib/FATFs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
2050:Lib/FATFs/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
2051:Lib/FATFs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
2052:Lib/FATFs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2053:Lib/FATFs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
2054:Lib/FATFs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2055:Lib/FATFs/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2056:Lib/FATFs/ff.c **** 		return FR_DISK_ERR;
2057:Lib/FATFs/ff.c **** #endif
2058:Lib/FATFs/ff.c **** #if !_FS_READONLY
2059:Lib/FATFs/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2060:Lib/FATFs/ff.c **** 		return FR_WRITE_PROTECTED;
2061:Lib/FATFs/ff.c **** #endif
2062:Lib/FATFs/ff.c **** 	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
2063:Lib/FATFs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
2064:Lib/FATFs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
2065:Lib/FATFs/ff.c **** 		/* Check the partition listed in top of the partition table */
2066:Lib/FATFs/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
2067:Lib/FATFs/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
2068:Lib/FATFs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
2069:Lib/FATFs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
2070:Lib/FATFs/ff.c **** 		}
2071:Lib/FATFs/ff.c **** 	}
2072:Lib/FATFs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
2073:Lib/FATFs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
2074:Lib/FATFs/ff.c **** 
2075:Lib/FATFs/ff.c **** 	/* Following code initializes the file system object */
2076:Lib/FATFs/ff.c **** 
2077:Lib/FATFs/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
2078:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
2079:Lib/FATFs/ff.c **** 
2080:Lib/FATFs/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
2081:Lib/FATFs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
2082:Lib/FATFs/ff.c **** 	fs->fsize = fasize;
2083:Lib/FATFs/ff.c **** 
2084:Lib/FATFs/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
2085:Lib/FATFs/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
2086:Lib/FATFs/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
2087:Lib/FATFs/ff.c **** 
2088:Lib/FATFs/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
2089:Lib/FATFs/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2090:Lib/FATFs/ff.c **** 
2091:Lib/FATFs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
2092:Lib/FATFs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
2093:Lib/FATFs/ff.c **** 
2094:Lib/FATFs/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
2095:Lib/FATFs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
2096:Lib/FATFs/ff.c **** 
2097:Lib/FATFs/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
2098:Lib/FATFs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
2099:Lib/FATFs/ff.c **** 
2100:Lib/FATFs/ff.c **** 	/* Determine the FAT sub type */
2101:Lib/FATFs/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
2102:Lib/FATFs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2103:Lib/FATFs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2104:Lib/FATFs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2105:Lib/FATFs/ff.c **** 	fmt = FS_FAT12;
2106:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2107:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2108:Lib/FATFs/ff.c **** 
2109:Lib/FATFs/ff.c **** 	/* Boundaries and Limits */
2110:Lib/FATFs/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2111:Lib/FATFs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
2112:Lib/FATFs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2113:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
2114:Lib/FATFs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2115:Lib/FATFs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
2116:Lib/FATFs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
2117:Lib/FATFs/ff.c **** 	} else {
2118:Lib/FATFs/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2119:Lib/FATFs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2120:Lib/FATFs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2121:Lib/FATFs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2122:Lib/FATFs/ff.c **** 	}
2123:Lib/FATFs/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
2124:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
2125:Lib/FATFs/ff.c **** 
2126:Lib/FATFs/ff.c **** #if !_FS_READONLY
2127:Lib/FATFs/ff.c **** 	/* Initialize cluster allocation information */
2128:Lib/FATFs/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
2129:Lib/FATFs/ff.c **** 	fs->last_clust = 0;
2130:Lib/FATFs/ff.c **** 
2131:Lib/FATFs/ff.c **** 	/* Get fsinfo if available */
2132:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
2133:Lib/FATFs/ff.c **** 	 	fs->fsi_flag = 0;
2134:Lib/FATFs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
2135:Lib/FATFs/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
2136:Lib/FATFs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
2137:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
2138:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
2139:Lib/FATFs/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
2140:Lib/FATFs/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
2141:Lib/FATFs/ff.c **** 		}
2142:Lib/FATFs/ff.c **** 	}
2143:Lib/FATFs/ff.c **** #endif
2144:Lib/FATFs/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
2145:Lib/FATFs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
2146:Lib/FATFs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
2147:Lib/FATFs/ff.c **** 	fs->wflag = 0;
2148:Lib/FATFs/ff.c **** #if _FS_RPATH
2149:Lib/FATFs/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
2150:Lib/FATFs/ff.c **** #endif
2151:Lib/FATFs/ff.c **** #if _FS_SHARE				/* Clear file lock semaphores */
2152:Lib/FATFs/ff.c **** 	clear_lock(fs);
2153:Lib/FATFs/ff.c **** #endif
2154:Lib/FATFs/ff.c **** 
2155:Lib/FATFs/ff.c **** 	return FR_OK;
2156:Lib/FATFs/ff.c **** }
2157:Lib/FATFs/ff.c **** 
2158:Lib/FATFs/ff.c **** 
2159:Lib/FATFs/ff.c **** 
2160:Lib/FATFs/ff.c **** 
2161:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2162:Lib/FATFs/ff.c **** /* Check if the file/dir object is valid or not                          */
2163:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2164:Lib/FATFs/ff.c **** 
2165:Lib/FATFs/ff.c **** static
2166:Lib/FATFs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2167:Lib/FATFs/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
2168:Lib/FATFs/ff.c **** 	WORD id			/* Member id of the target object to be checked */
2169:Lib/FATFs/ff.c **** )
2170:Lib/FATFs/ff.c **** {
 405               		.loc 1 2170 0
 406               		.cfi_startproc
 407               	.LVL34:
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
2171:Lib/FATFs/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
 412               		.loc 1 2171 0
 413 0000 0097      		sbiw r24,0
 414 0002 01F0      		breq .L32
 415               		.loc 1 2171 0 is_stmt 0 discriminator 1
 416 0004 FC01      		movw r30,r24
 417 0006 2081      		ld r18,Z
 418 0008 2223      		tst r18
 419 000a 01F0      		breq .L32
 420               		.loc 1 2171 0 discriminator 2
 421 000c 2681      		ldd r18,Z+6
 422 000e 3781      		ldd r19,Z+7
 423 0010 2617      		cp r18,r22
 424 0012 3707      		cpc r19,r23
 425 0014 01F4      		brne .L32
2172:Lib/FATFs/ff.c **** 		return FR_INVALID_OBJECT;
2173:Lib/FATFs/ff.c **** 
2174:Lib/FATFs/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
2175:Lib/FATFs/ff.c **** 
2176:Lib/FATFs/ff.c **** 	if (disk_status(fs->drv) & STA_NOINIT)
 426               		.loc 1 2176 0 is_stmt 1
 427 0016 8181      		ldd r24,Z+1
 428               	.LVL35:
 429 0018 0E94 0000 		call disk_status
 430               	.LVL36:
 431 001c 80FD      		sbrc r24,0
 432 001e 00C0      		rjmp .L33
2177:Lib/FATFs/ff.c **** 		return FR_NOT_READY;
2178:Lib/FATFs/ff.c **** 
2179:Lib/FATFs/ff.c **** 	return FR_OK;
 433               		.loc 1 2179 0
 434 0020 80E0      		ldi r24,0
 435 0022 0895      		ret
 436               	.LVL37:
 437               	.L32:
2172:Lib/FATFs/ff.c **** 		return FR_INVALID_OBJECT;
 438               		.loc 1 2172 0
 439 0024 89E0      		ldi r24,lo8(9)
 440               	.LVL38:
 441 0026 0895      		ret
 442               	.LVL39:
 443               	.L33:
2177:Lib/FATFs/ff.c **** 		return FR_NOT_READY;
 444               		.loc 1 2177 0
 445 0028 83E0      		ldi r24,lo8(3)
2180:Lib/FATFs/ff.c **** }
 446               		.loc 1 2180 0
 447 002a 0895      		ret
 448               		.cfi_endproc
 449               	.LFE158:
 451               		.section	.text.clust2sect,"ax",@progbits
 452               	.global	clust2sect
 454               	clust2sect:
 455               	.LFB145:
 799:Lib/FATFs/ff.c **** 	clst -= 2;
 456               		.loc 1 799 0
 457               		.cfi_startproc
 458               	.LVL40:
 459 0000 0F93      		push r16
 460               	.LCFI19:
 461               		.cfi_def_cfa_offset 3
 462               		.cfi_offset 16, -2
 463 0002 1F93      		push r17
 464               	.LCFI20:
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 17, -3
 467               	/* prologue: function */
 468               	/* frame size = 0 */
 469               	/* stack size = 2 */
 470               	.L__stack_usage = 2
 471 0004 FC01      		movw r30,r24
 800:Lib/FATFs/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 472               		.loc 1 800 0
 473 0006 9A01      		movw r18,r20
 474 0008 AB01      		movw r20,r22
 475 000a 2250      		subi r18,2
 476 000c 3109      		sbc r19,__zero_reg__
 477 000e 4109      		sbc r20,__zero_reg__
 478 0010 5109      		sbc r21,__zero_reg__
 479               	.LVL41:
 801:Lib/FATFs/ff.c **** 	return clst * fs->csize + fs->database;
 480               		.loc 1 801 0
 481 0012 8689      		ldd r24,Z+22
 482 0014 9789      		ldd r25,Z+23
 483 0016 A08D      		ldd r26,Z+24
 484 0018 B18D      		ldd r27,Z+25
 485               	.LVL42:
 486 001a 0297      		sbiw r24,2
 487 001c A109      		sbc r26,__zero_reg__
 488 001e B109      		sbc r27,__zero_reg__
 489 0020 2817      		cp r18,r24
 490 0022 3907      		cpc r19,r25
 491 0024 4A07      		cpc r20,r26
 492 0026 5B07      		cpc r21,r27
 493 0028 00F4      		brsh .L36
 802:Lib/FATFs/ff.c **** }
 494               		.loc 1 802 0
 495 002a A281      		ldd r26,Z+2
 496 002c B0E0      		ldi r27,0
 497 002e 0E94 0000 		call __muluhisi3
 498 0032 06A1      		ldd r16,Z+38
 499 0034 17A1      		ldd r17,Z+39
 500 0036 20A5      		ldd r18,Z+40
 501 0038 31A5      		ldd r19,Z+41
 502 003a 600F      		add r22,r16
 503 003c 711F      		adc r23,r17
 504 003e 821F      		adc r24,r18
 505 0040 931F      		adc r25,r19
 506 0042 00C0      		rjmp .L35
 507               	.L36:
 801:Lib/FATFs/ff.c **** 	return clst * fs->csize + fs->database;
 508               		.loc 1 801 0
 509 0044 60E0      		ldi r22,0
 510 0046 70E0      		ldi r23,0
 511 0048 CB01      		movw r24,r22
 512               	.L35:
 513               	/* epilogue start */
 803:Lib/FATFs/ff.c **** 
 514               		.loc 1 803 0
 515 004a 1F91      		pop r17
 516 004c 0F91      		pop r16
 517 004e 0895      		ret
 518               		.cfi_endproc
 519               	.LFE145:
 521               		.section	.text.get_fat,"ax",@progbits
 522               	.global	get_fat
 524               	get_fat:
 525               	.LFB146:
 817:Lib/FATFs/ff.c **** 	UINT wc, bc;
 526               		.loc 1 817 0
 527               		.cfi_startproc
 528               	.LVL43:
 529 0000 AF92      		push r10
 530               	.LCFI21:
 531               		.cfi_def_cfa_offset 3
 532               		.cfi_offset 10, -2
 533 0002 BF92      		push r11
 534               	.LCFI22:
 535               		.cfi_def_cfa_offset 4
 536               		.cfi_offset 11, -3
 537 0004 CF92      		push r12
 538               	.LCFI23:
 539               		.cfi_def_cfa_offset 5
 540               		.cfi_offset 12, -4
 541 0006 DF92      		push r13
 542               	.LCFI24:
 543               		.cfi_def_cfa_offset 6
 544               		.cfi_offset 13, -5
 545 0008 EF92      		push r14
 546               	.LCFI25:
 547               		.cfi_def_cfa_offset 7
 548               		.cfi_offset 14, -6
 549 000a FF92      		push r15
 550               	.LCFI26:
 551               		.cfi_def_cfa_offset 8
 552               		.cfi_offset 15, -7
 553 000c 0F93      		push r16
 554               	.LCFI27:
 555               		.cfi_def_cfa_offset 9
 556               		.cfi_offset 16, -8
 557 000e 1F93      		push r17
 558               	.LCFI28:
 559               		.cfi_def_cfa_offset 10
 560               		.cfi_offset 17, -9
 561 0010 CF93      		push r28
 562               	.LCFI29:
 563               		.cfi_def_cfa_offset 11
 564               		.cfi_offset 28, -10
 565 0012 DF93      		push r29
 566               	.LCFI30:
 567               		.cfi_def_cfa_offset 12
 568               		.cfi_offset 29, -11
 569               	/* prologue: function */
 570               	/* frame size = 0 */
 571               	/* stack size = 10 */
 572               	.L__stack_usage = 10
 822:Lib/FATFs/ff.c **** 		return 1;
 573               		.loc 1 822 0
 574 0014 4230      		cpi r20,2
 575 0016 5105      		cpc r21,__zero_reg__
 576 0018 6105      		cpc r22,__zero_reg__
 577 001a 7105      		cpc r23,__zero_reg__
 578 001c 00F4      		brsh .+2
 579 001e 00C0      		rjmp .L46
 822:Lib/FATFs/ff.c **** 		return 1;
 580               		.loc 1 822 0 is_stmt 0 discriminator 1
 581 0020 FC01      		movw r30,r24
 582 0022 0689      		ldd r16,Z+22
 583 0024 1789      		ldd r17,Z+23
 584 0026 208D      		ldd r18,Z+24
 585 0028 318D      		ldd r19,Z+25
 586 002a 4017      		cp r20,r16
 587 002c 5107      		cpc r21,r17
 588 002e 6207      		cpc r22,r18
 589 0030 7307      		cpc r23,r19
 590 0032 00F0      		brlo .+2
 591 0034 00C0      		rjmp .L46
 592 0036 6A01      		movw r12,r20
 593 0038 7B01      		movw r14,r22
 594 003a EC01      		movw r28,r24
 825:Lib/FATFs/ff.c **** 	case FS_FAT12 :
 595               		.loc 1 825 0 is_stmt 1
 596 003c 8081      		ld r24,Z
 597               	.LVL44:
 598 003e 8230      		cpi r24,lo8(2)
 599 0040 01F4      		brne .+2
 600 0042 00C0      		rjmp .L39
 601 0044 8330      		cpi r24,lo8(3)
 602 0046 01F4      		brne .+2
 603 0048 00C0      		rjmp .L40
 604 004a 8130      		cpi r24,lo8(1)
 605 004c 01F0      		breq .+2
 606 004e 00C0      		rjmp .L48
 607               	.LVL45:
 827:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 608               		.loc 1 827 0
 609 0050 5A01      		movw r10,r20
 610 0052 B694      		lsr r11
 611 0054 A794      		ror r10
 612 0056 AC0C      		add r10,r12
 613 0058 BD1C      		adc r11,r13
 614               	.LVL46:
 828:Lib/FATFs/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 615               		.loc 1 828 0
 616 005a C501      		movw r24,r10
 617 005c 892F      		mov r24,r25
 618 005e 9927      		clr r25
 619 0060 8695      		lsr r24
 620 0062 4E8D      		ldd r20,Y+30
 621 0064 5F8D      		ldd r21,Y+31
 622 0066 68A1      		ldd r22,Y+32
 623 0068 79A1      		ldd r23,Y+33
 624               	.LVL47:
 625 006a 480F      		add r20,r24
 626 006c 591F      		adc r21,r25
 627 006e 611D      		adc r22,__zero_reg__
 628 0070 711D      		adc r23,__zero_reg__
 629 0072 CE01      		movw r24,r28
 630 0074 0E94 0000 		call move_window
 631               	.LVL48:
 632 0078 8111      		cpse r24,__zero_reg__
 633 007a 00C0      		rjmp .L48
 829:Lib/FATFs/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 634               		.loc 1 829 0
 635 007c F501      		movw r30,r10
 636 007e F170      		andi r31,1
 637 0080 EC0F      		add r30,r28
 638 0082 FD1F      		adc r31,r29
 639 0084 16A5      		ldd r17,Z+46
 640               	.LVL49:
 641 0086 FFEF      		ldi r31,-1
 642 0088 AF1A      		sub r10,r31
 643 008a BF0A      		sbc r11,r31
 644               	.LVL50:
 830:Lib/FATFs/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 645               		.loc 1 830 0
 646 008c C501      		movw r24,r10
 647 008e 892F      		mov r24,r25
 648 0090 9927      		clr r25
 649 0092 8695      		lsr r24
 650 0094 4E8D      		ldd r20,Y+30
 651 0096 5F8D      		ldd r21,Y+31
 652 0098 68A1      		ldd r22,Y+32
 653 009a 79A1      		ldd r23,Y+33
 654 009c 480F      		add r20,r24
 655 009e 591F      		adc r21,r25
 656 00a0 611D      		adc r22,__zero_reg__
 657 00a2 711D      		adc r23,__zero_reg__
 658 00a4 CE01      		movw r24,r28
 659 00a6 0E94 0000 		call move_window
 660               	.LVL51:
 661 00aa 8111      		cpse r24,__zero_reg__
 662 00ac 00C0      		rjmp .L48
 831:Lib/FATFs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 663               		.loc 1 831 0
 664 00ae C501      		movw r24,r10
 665 00b0 9170      		andi r25,1
 666 00b2 FE01      		movw r30,r28
 667 00b4 E80F      		add r30,r24
 668 00b6 F91F      		adc r31,r25
 669 00b8 86A5      		ldd r24,Z+46
 670 00ba 612F      		mov r22,r17
 671 00bc 70E0      		ldi r23,0
 672 00be 782B      		or r23,r24
 673               	.LVL52:
 832:Lib/FATFs/ff.c **** 
 674               		.loc 1 832 0
 675 00c0 C0FE      		sbrs r12,0
 676 00c2 00C0      		rjmp .L44
 832:Lib/FATFs/ff.c **** 
 677               		.loc 1 832 0 is_stmt 0 discriminator 1
 678 00c4 54E0      		ldi r21,4
 679               		1:
 680 00c6 7695      		lsr r23
 681 00c8 6795      		ror r22
 682 00ca 5A95      		dec r21
 683 00cc 01F4      		brne 1b
 684               	.LVL53:
 685 00ce 00C0      		rjmp .L49
 686               	.LVL54:
 687               	.L44:
 832:Lib/FATFs/ff.c **** 
 688               		.loc 1 832 0 discriminator 2
 689 00d0 7F70      		andi r23,15
 690               	.LVL55:
 691               	.L49:
 692 00d2 80E0      		ldi r24,0
 693 00d4 90E0      		ldi r25,0
 694 00d6 00C0      		rjmp .L38
 695               	.LVL56:
 696               	.L39:
 835:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 697               		.loc 1 835 0 is_stmt 1
 698 00d8 7727      		clr r23
 699 00da 6F2D      		mov r22,r15
 700 00dc 5E2D      		mov r21,r14
 701 00de 4D2D      		mov r20,r13
 702 00e0 868D      		ldd r24,Z+30
 703 00e2 978D      		ldd r25,Z+31
 704 00e4 A0A1      		ldd r26,Z+32
 705 00e6 B1A1      		ldd r27,Z+33
 706 00e8 480F      		add r20,r24
 707 00ea 591F      		adc r21,r25
 708 00ec 6A1F      		adc r22,r26
 709 00ee 7B1F      		adc r23,r27
 710 00f0 CF01      		movw r24,r30
 711 00f2 0E94 0000 		call move_window
 712               	.LVL57:
 713 00f6 8111      		cpse r24,__zero_reg__
 714 00f8 00C0      		rjmp .L48
 715               	.LVL58:
 836:Lib/FATFs/ff.c **** 		return LD_WORD(p);
 716               		.loc 1 836 0
 717 00fa CC0C      		lsl r12
 718 00fc DD1C      		rol r13
 719 00fe EE1C      		rol r14
 720 0100 FF1C      		rol r15
 721               	.LVL59:
 722 0102 E894      		clt
 723 0104 C0F8      		bld r12,0
 724 0106 81E0      		ldi r24,1
 725 0108 D822      		and r13,r24
 726 010a EE24      		clr r14
 727 010c FF24      		clr r15
 728               	.LVL60:
 837:Lib/FATFs/ff.c **** 
 729               		.loc 1 837 0
 730 010e FE01      		movw r30,r28
 731 0110 EC0D      		add r30,r12
 732 0112 FD1D      		adc r31,r13
 733 0114 66A5      		ldd r22,Z+46
 734 0116 77A5      		ldd r23,Z+47
 735 0118 00C0      		rjmp .L49
 736               	.LVL61:
 737               	.L40:
 840:Lib/FATFs/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 738               		.loc 1 840 0
 739 011a 868D      		ldd r24,Z+30
 740 011c 978D      		ldd r25,Z+31
 741 011e A0A1      		ldd r26,Z+32
 742 0120 B1A1      		ldd r27,Z+33
 743 0122 27E0      		ldi r18,7
 744               		1:
 745 0124 7695      		lsr r23
 746 0126 6795      		ror r22
 747 0128 5795      		ror r21
 748 012a 4795      		ror r20
 749 012c 2A95      		dec r18
 750 012e 01F4      		brne 1b
 751 0130 480F      		add r20,r24
 752 0132 591F      		adc r21,r25
 753 0134 6A1F      		adc r22,r26
 754 0136 7B1F      		adc r23,r27
 755 0138 CF01      		movw r24,r30
 756 013a 0E94 0000 		call move_window
 757               	.LVL62:
 758 013e 8111      		cpse r24,__zero_reg__
 759 0140 00C0      		rjmp .L48
 760               	.LVL63:
 841:Lib/FATFs/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 761               		.loc 1 841 0
 762 0142 82E0      		ldi r24,2
 763               		1:
 764 0144 CC0C      		lsl r12
 765 0146 DD1C      		rol r13
 766 0148 EE1C      		rol r14
 767 014a FF1C      		rol r15
 768 014c 8A95      		dec r24
 769 014e 01F4      		brne 1b
 770               	.LVL64:
 771 0150 ECEF      		ldi r30,252
 772 0152 CE22      		and r12,r30
 773 0154 E1E0      		ldi r30,1
 774 0156 DE22      		and r13,r30
 775 0158 EE24      		clr r14
 776 015a FF24      		clr r15
 777               	.LVL65:
 842:Lib/FATFs/ff.c **** 	}
 778               		.loc 1 842 0
 779 015c FE01      		movw r30,r28
 780 015e EC0D      		add r30,r12
 781 0160 FD1D      		adc r31,r13
 782 0162 86A5      		ldd r24,Z+46
 783 0164 97A5      		ldd r25,Z+47
 784 0166 A0A9      		ldd r26,Z+48
 785 0168 B1A9      		ldd r27,Z+49
 786 016a BC01      		movw r22,r24
 787 016c CD01      		movw r24,r26
 788 016e 9F70      		andi r25,15
 789 0170 00C0      		rjmp .L38
 790               	.LVL66:
 791               	.L46:
 823:Lib/FATFs/ff.c **** 
 792               		.loc 1 823 0
 793 0172 61E0      		ldi r22,lo8(1)
 794 0174 70E0      		ldi r23,0
 795 0176 80E0      		ldi r24,0
 796 0178 90E0      		ldi r25,0
 797 017a 00C0      		rjmp .L38
 798               	.LVL67:
 799               	.L48:
 845:Lib/FATFs/ff.c **** }
 800               		.loc 1 845 0
 801 017c 6FEF      		ldi r22,lo8(-1)
 802 017e 7FEF      		ldi r23,lo8(-1)
 803 0180 CB01      		movw r24,r22
 804               	.LVL68:
 805               	.L38:
 806               	/* epilogue start */
 846:Lib/FATFs/ff.c **** 
 807               		.loc 1 846 0
 808 0182 DF91      		pop r29
 809 0184 CF91      		pop r28
 810 0186 1F91      		pop r17
 811 0188 0F91      		pop r16
 812 018a FF90      		pop r15
 813 018c EF90      		pop r14
 814 018e DF90      		pop r13
 815 0190 CF90      		pop r12
 816 0192 BF90      		pop r11
 817 0194 AF90      		pop r10
 818 0196 0895      		ret
 819               		.cfi_endproc
 820               	.LFE146:
 822               		.section	.text.dir_sdi.constprop.1,"ax",@progbits
 824               	dir_sdi.constprop.1:
 825               	.LFB169:
1059:Lib/FATFs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 826               		.loc 1 1059 0
 827               		.cfi_startproc
 828               	.LVL69:
 829 0000 0F93      		push r16
 830               	.LCFI31:
 831               		.cfi_def_cfa_offset 3
 832               		.cfi_offset 16, -2
 833 0002 1F93      		push r17
 834               	.LCFI32:
 835               		.cfi_def_cfa_offset 4
 836               		.cfi_offset 17, -3
 837 0004 CF93      		push r28
 838               	.LCFI33:
 839               		.cfi_def_cfa_offset 5
 840               		.cfi_offset 28, -4
 841 0006 DF93      		push r29
 842               	.LCFI34:
 843               		.cfi_def_cfa_offset 6
 844               		.cfi_offset 29, -5
 845               	/* prologue: function */
 846               	/* frame size = 0 */
 847               	/* stack size = 4 */
 848               	.L__stack_usage = 4
 849 0008 EC01      		movw r28,r24
 850               	.LVL70:
1068:Lib/FATFs/ff.c **** 	clst = dj->sclust;
 851               		.loc 1 1068 0
 852 000a 1D82      		std Y+5,__zero_reg__
 853 000c 1C82      		std Y+4,__zero_reg__
1069:Lib/FATFs/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 854               		.loc 1 1069 0
 855 000e 4E81      		ldd r20,Y+6
 856 0010 5F81      		ldd r21,Y+7
 857 0012 6885      		ldd r22,Y+8
 858 0014 7985      		ldd r23,Y+9
 859               	.LVL71:
1070:Lib/FATFs/ff.c **** 		return FR_INT_ERR;
 860               		.loc 1 1070 0
 861 0016 4130      		cpi r20,1
 862 0018 5105      		cpc r21,__zero_reg__
 863 001a 6105      		cpc r22,__zero_reg__
 864 001c 7105      		cpc r23,__zero_reg__
 865 001e 01F4      		brne .L51
 866               	.LVL72:
 867               	.L53:
1071:Lib/FATFs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 868               		.loc 1 1071 0
 869 0020 82E0      		ldi r24,lo8(2)
 870 0022 00C0      		rjmp .L52
 871               	.LVL73:
 872               	.L51:
1070:Lib/FATFs/ff.c **** 		return FR_INT_ERR;
 873               		.loc 1 1070 0
 874 0024 0881      		ld r16,Y
 875 0026 1981      		ldd r17,Y+1
 876 0028 F801      		movw r30,r16
 877 002a 8689      		ldd r24,Z+22
 878 002c 9789      		ldd r25,Z+23
 879 002e A08D      		ldd r26,Z+24
 880 0030 B18D      		ldd r27,Z+25
 881               	.LVL74:
 882 0032 4817      		cp r20,r24
 883 0034 5907      		cpc r21,r25
 884 0036 6A07      		cpc r22,r26
 885 0038 7B07      		cpc r23,r27
 886 003a 00F4      		brsh .L53
1072:Lib/FATFs/ff.c **** 		clst = dj->fs->dirbase;
 887               		.loc 1 1072 0
 888 003c 4115      		cp r20,__zero_reg__
 889 003e 5105      		cpc r21,__zero_reg__
 890 0040 6105      		cpc r22,__zero_reg__
 891 0042 7105      		cpc r23,__zero_reg__
 892 0044 01F4      		brne .L54
 893 0046 8081      		ld r24,Z
 894 0048 8330      		cpi r24,lo8(3)
 895 004a 01F4      		brne .L55
1073:Lib/FATFs/ff.c **** 
 896               		.loc 1 1073 0
 897 004c 42A1      		ldd r20,Z+34
 898 004e 53A1      		ldd r21,Z+35
 899 0050 64A1      		ldd r22,Z+36
 900 0052 75A1      		ldd r23,Z+37
 901               	.LVL75:
1075:Lib/FATFs/ff.c **** 		dj->clust = clst;
 902               		.loc 1 1075 0
 903 0054 4115      		cp r20,__zero_reg__
 904 0056 5105      		cpc r21,__zero_reg__
 905 0058 6105      		cpc r22,__zero_reg__
 906 005a 7105      		cpc r23,__zero_reg__
 907 005c 01F4      		brne .L54
 908               	.L55:
 909               	.LVL76:
1076:Lib/FATFs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 910               		.loc 1 1076 0
 911 005e 1A86      		std Y+10,__zero_reg__
 912 0060 1B86      		std Y+11,__zero_reg__
 913 0062 1C86      		std Y+12,__zero_reg__
 914 0064 1D86      		std Y+13,__zero_reg__
1077:Lib/FATFs/ff.c **** 			return FR_INT_ERR;
 915               		.loc 1 1077 0
 916 0066 F801      		movw r30,r16
 917 0068 8085      		ldd r24,Z+8
 918 006a 9185      		ldd r25,Z+9
 919 006c 892B      		or r24,r25
 920 006e 01F0      		breq .L53
1079:Lib/FATFs/ff.c **** 	}
 921               		.loc 1 1079 0
 922 0070 82A1      		ldd r24,Z+34
 923 0072 93A1      		ldd r25,Z+35
 924 0074 A4A1      		ldd r26,Z+36
 925 0076 B5A1      		ldd r27,Z+37
 926 0078 8E87      		std Y+14,r24
 927 007a 9F87      		std Y+15,r25
 928 007c A88B      		std Y+16,r26
 929 007e B98B      		std Y+17,r27
 930 0080 00C0      		rjmp .L56
 931               	.LVL77:
 932               	.L54:
1082:Lib/FATFs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 933               		.loc 1 1082 0
 934 0082 F801      		movw r30,r16
 935 0084 8281      		ldd r24,Z+2
 936               	.LVL78:
1083:Lib/FATFs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 937               		.loc 1 1083 0
 938 0086 8111      		cpse r24,__zero_reg__
 939 0088 00C0      		rjmp .L57
 940               	.LVL79:
 941               	.L58:
1084:Lib/FATFs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 942               		.loc 1 1084 0
 943 008a 8881      		ld r24,Y
 944 008c 9981      		ldd r25,Y+1
 945 008e 0E94 0000 		call get_fat
 946               	.LVL80:
 947 0092 AB01      		movw r20,r22
 948 0094 BC01      		movw r22,r24
 949               	.LVL81:
1085:Lib/FATFs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 950               		.loc 1 1085 0
 951 0096 4F3F      		cpi r20,-1
 952 0098 FFEF      		ldi r31,-1
 953 009a 5F07      		cpc r21,r31
 954 009c 6F07      		cpc r22,r31
 955 009e 7F07      		cpc r23,r31
 956 00a0 01F0      		breq .L59
1086:Lib/FATFs/ff.c **** 				return FR_INT_ERR;
 957               		.loc 1 1086 0
 958 00a2 4230      		cpi r20,2
 959 00a4 5105      		cpc r21,__zero_reg__
 960 00a6 6105      		cpc r22,__zero_reg__
 961 00a8 7105      		cpc r23,__zero_reg__
 962 00aa 00F4      		brsh .+2
 963 00ac 00C0      		rjmp .L53
 964 00ae E881      		ld r30,Y
 965 00b0 F981      		ldd r31,Y+1
 966 00b2 8689      		ldd r24,Z+22
 967 00b4 9789      		ldd r25,Z+23
 968 00b6 A08D      		ldd r26,Z+24
 969 00b8 B18D      		ldd r27,Z+25
 970 00ba 4817      		cp r20,r24
 971 00bc 5907      		cpc r21,r25
 972 00be 6A07      		cpc r22,r26
 973 00c0 7B07      		cpc r23,r27
 974 00c2 00F0      		brlo .L58
 975 00c4 00C0      		rjmp .L53
 976               	.LVL82:
 977               	.L57:
1090:Lib/FATFs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 978               		.loc 1 1090 0
 979 00c6 4A87      		std Y+10,r20
 980 00c8 5B87      		std Y+11,r21
 981 00ca 6C87      		std Y+12,r22
 982 00cc 7D87      		std Y+13,r23
1091:Lib/FATFs/ff.c **** 	}
 983               		.loc 1 1091 0
 984 00ce C801      		movw r24,r16
 985               	.LVL83:
 986 00d0 0E94 0000 		call clust2sect
 987               	.LVL84:
 988 00d4 6E87      		std Y+14,r22
 989 00d6 7F87      		std Y+15,r23
 990 00d8 888B      		std Y+16,r24
 991 00da 998B      		std Y+17,r25
 992               	.L56:
1094:Lib/FATFs/ff.c **** 
 993               		.loc 1 1094 0
 994 00dc C801      		movw r24,r16
 995 00de 8E96      		adiw r24,46
 996 00e0 9B8B      		std Y+19,r25
 997 00e2 8A8B      		std Y+18,r24
1096:Lib/FATFs/ff.c **** }
 998               		.loc 1 1096 0
 999 00e4 80E0      		ldi r24,0
 1000 00e6 00C0      		rjmp .L52
 1001               	.LVL85:
 1002               	.L59:
1085:Lib/FATFs/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1003               		.loc 1 1085 0
 1004 00e8 81E0      		ldi r24,lo8(1)
 1005               	.LVL86:
 1006               	.L52:
 1007               	/* epilogue start */
1097:Lib/FATFs/ff.c **** 
 1008               		.loc 1 1097 0
 1009 00ea DF91      		pop r29
 1010 00ec CF91      		pop r28
 1011               	.LVL87:
 1012 00ee 1F91      		pop r17
 1013 00f0 0F91      		pop r16
 1014 00f2 0895      		ret
 1015               		.cfi_endproc
 1016               	.LFE169:
 1018               		.section	.text.put_fat,"ax",@progbits
 1019               	.global	put_fat
 1021               	put_fat:
 1022               	.LFB147:
 861:Lib/FATFs/ff.c **** 	UINT bc;
 1023               		.loc 1 861 0
 1024               		.cfi_startproc
 1025               	.LVL88:
 1026 0000 4F92      		push r4
 1027               	.LCFI35:
 1028               		.cfi_def_cfa_offset 3
 1029               		.cfi_offset 4, -2
 1030 0002 5F92      		push r5
 1031               	.LCFI36:
 1032               		.cfi_def_cfa_offset 4
 1033               		.cfi_offset 5, -3
 1034 0004 6F92      		push r6
 1035               	.LCFI37:
 1036               		.cfi_def_cfa_offset 5
 1037               		.cfi_offset 6, -4
 1038 0006 7F92      		push r7
 1039               	.LCFI38:
 1040               		.cfi_def_cfa_offset 6
 1041               		.cfi_offset 7, -5
 1042 0008 AF92      		push r10
 1043               	.LCFI39:
 1044               		.cfi_def_cfa_offset 7
 1045               		.cfi_offset 10, -6
 1046 000a BF92      		push r11
 1047               	.LCFI40:
 1048               		.cfi_def_cfa_offset 8
 1049               		.cfi_offset 11, -7
 1050 000c CF92      		push r12
 1051               	.LCFI41:
 1052               		.cfi_def_cfa_offset 9
 1053               		.cfi_offset 12, -8
 1054 000e DF92      		push r13
 1055               	.LCFI42:
 1056               		.cfi_def_cfa_offset 10
 1057               		.cfi_offset 13, -9
 1058 0010 EF92      		push r14
 1059               	.LCFI43:
 1060               		.cfi_def_cfa_offset 11
 1061               		.cfi_offset 14, -10
 1062 0012 FF92      		push r15
 1063               	.LCFI44:
 1064               		.cfi_def_cfa_offset 12
 1065               		.cfi_offset 15, -11
 1066 0014 0F93      		push r16
 1067               	.LCFI45:
 1068               		.cfi_def_cfa_offset 13
 1069               		.cfi_offset 16, -12
 1070 0016 1F93      		push r17
 1071               	.LCFI46:
 1072               		.cfi_def_cfa_offset 14
 1073               		.cfi_offset 17, -13
 1074 0018 CF93      		push r28
 1075               	.LCFI47:
 1076               		.cfi_def_cfa_offset 15
 1077               		.cfi_offset 28, -14
 1078 001a DF93      		push r29
 1079               	.LCFI48:
 1080               		.cfi_def_cfa_offset 16
 1081               		.cfi_offset 29, -15
 1082 001c 00D0      		rcall .
 1083 001e 00D0      		rcall .
 1084 0020 00D0      		rcall .
 1085               	.LCFI49:
 1086               		.cfi_def_cfa_offset 22
 1087 0022 CDB7      		in r28,__SP_L__
 1088 0024 DEB7      		in r29,__SP_H__
 1089               	.LCFI50:
 1090               		.cfi_def_cfa_register 28
 1091               	/* prologue: function */
 1092               	/* frame size = 6 */
 1093               	/* stack size = 20 */
 1094               	.L__stack_usage = 20
 867:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 1095               		.loc 1 867 0
 1096 0026 4230      		cpi r20,2
 1097 0028 5105      		cpc r21,__zero_reg__
 1098 002a 6105      		cpc r22,__zero_reg__
 1099 002c 7105      		cpc r23,__zero_reg__
 1100 002e 00F4      		brsh .+2
 1101 0030 00C0      		rjmp .L74
 867:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 1102               		.loc 1 867 0 is_stmt 0 discriminator 1
 1103 0032 DC01      		movw r26,r24
 1104 0034 5696      		adiw r26,22
 1105 0036 CD90      		ld r12,X+
 1106 0038 DD90      		ld r13,X+
 1107 003a ED90      		ld r14,X+
 1108 003c FC90      		ld r15,X
 1109 003e 5997      		sbiw r26,22+3
 1110 0040 4C15      		cp r20,r12
 1111 0042 5D05      		cpc r21,r13
 1112 0044 6E05      		cpc r22,r14
 1113 0046 7F05      		cpc r23,r15
 1114 0048 00F0      		brlo .+2
 1115 004a 00C0      		rjmp .L74
 1116 004c 2801      		movw r4,r16
 1117 004e 3901      		movw r6,r18
 1118 0050 6A01      		movw r12,r20
 1119 0052 7B01      		movw r14,r22
 1120 0054 9E83      		std Y+6,r25
 1121 0056 8D83      		std Y+5,r24
 871:Lib/FATFs/ff.c **** 		case FS_FAT12 :
 1122               		.loc 1 871 0 is_stmt 1
 1123 0058 FC01      		movw r30,r24
 1124 005a 8081      		ld r24,Z
 1125               	.LVL89:
 1126 005c 8230      		cpi r24,lo8(2)
 1127 005e 01F4      		brne .+2
 1128 0060 00C0      		rjmp .L66
 1129 0062 8330      		cpi r24,lo8(3)
 1130 0064 01F4      		brne .+2
 1131 0066 00C0      		rjmp .L67
 1132 0068 8130      		cpi r24,lo8(1)
 1133 006a 01F0      		breq .+2
 1134 006c 00C0      		rjmp .L76
 1135               	.LVL90:
 873:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1136               		.loc 1 873 0
 1137 006e 5A01      		movw r10,r20
 1138 0070 B694      		lsr r11
 1139 0072 A794      		ror r10
 1140 0074 AC0C      		add r10,r12
 1141 0076 BD1C      		adc r11,r13
 1142               	.LVL91:
 874:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 1143               		.loc 1 874 0
 1144 0078 C501      		movw r24,r10
 1145 007a 892F      		mov r24,r25
 1146 007c 9927      		clr r25
 1147 007e 8695      		lsr r24
 1148               	.LVL92:
 1149 0080 468D      		ldd r20,Z+30
 1150 0082 578D      		ldd r21,Z+31
 1151 0084 60A1      		ldd r22,Z+32
 1152 0086 71A1      		ldd r23,Z+33
 1153               	.LVL93:
 1154 0088 480F      		add r20,r24
 1155 008a 591F      		adc r21,r25
 1156 008c 611D      		adc r22,__zero_reg__
 1157 008e 711D      		adc r23,__zero_reg__
 1158 0090 CF01      		movw r24,r30
 1159 0092 0E94 0000 		call move_window
 1160               	.LVL94:
 875:Lib/FATFs/ff.c **** 			p = &fs->win[bc % SS(fs)];
 1161               		.loc 1 875 0
 1162 0096 8111      		cpse r24,__zero_reg__
 1163 0098 00C0      		rjmp .L65
 876:Lib/FATFs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1164               		.loc 1 876 0
 1165 009a F501      		movw r30,r10
 1166 009c F170      		andi r31,1
 1167               	.LVL95:
 1168 009e 2D81      		ldd r18,Y+5
 1169 00a0 3E81      		ldd r19,Y+6
 1170 00a2 E20F      		add r30,r18
 1171 00a4 F31F      		adc r31,r19
 1172               	.LVL96:
 877:Lib/FATFs/ff.c **** 			bc++;
 1173               		.loc 1 877 0
 1174 00a6 D701      		movw r26,r14
 1175 00a8 C601      		movw r24,r12
 1176               	.LVL97:
 1177 00aa 8170      		andi r24,1
 1178 00ac 9927      		clr r25
 1179 00ae AA27      		clr r26
 1180 00b0 BB27      		clr r27
 1181 00b2 8983      		std Y+1,r24
 1182 00b4 9A83      		std Y+2,r25
 1183 00b6 AB83      		std Y+3,r26
 1184 00b8 BC83      		std Y+4,r27
 1185 00ba C0FE      		sbrs r12,0
 1186 00bc 00C0      		rjmp .L69
 877:Lib/FATFs/ff.c **** 			bc++;
 1187               		.loc 1 877 0 is_stmt 0 discriminator 1
 1188 00be 86A5      		ldd r24,Z+46
 1189 00c0 282F      		mov r18,r24
 1190 00c2 2F70      		andi r18,lo8(15)
 1191 00c4 A0E1      		ldi r26,lo8(16)
 1192 00c6 4A9E      		mul r4,r26
 1193 00c8 C001      		movw r24,r0
 1194 00ca 1124      		clr __zero_reg__
 1195 00cc 822B      		or r24,r18
 1196 00ce 00C0      		rjmp .L70
 1197               	.LVL98:
 1198               	.L69:
 877:Lib/FATFs/ff.c **** 			bc++;
 1199               		.loc 1 877 0 discriminator 2
 1200 00d0 842D      		mov r24,r4
 1201               	.LVL99:
 1202               	.L70:
 877:Lib/FATFs/ff.c **** 			bc++;
 1203               		.loc 1 877 0 discriminator 4
 1204 00d2 86A7      		std Z+46,r24
 878:Lib/FATFs/ff.c **** 			fs->wflag = 1;
 1205               		.loc 1 878 0 is_stmt 1 discriminator 4
 1206 00d4 BFEF      		ldi r27,-1
 1207 00d6 AB1A      		sub r10,r27
 1208 00d8 BB0A      		sbc r11,r27
 1209               	.LVL100:
 879:Lib/FATFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1210               		.loc 1 879 0 discriminator 4
 1211 00da 81E0      		ldi r24,lo8(1)
 1212 00dc ED81      		ldd r30,Y+5
 1213 00de FE81      		ldd r31,Y+6
 1214 00e0 8483      		std Z+4,r24
 880:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 1215               		.loc 1 880 0 discriminator 4
 1216 00e2 C501      		movw r24,r10
 1217 00e4 892F      		mov r24,r25
 1218 00e6 9927      		clr r25
 1219 00e8 8695      		lsr r24
 1220 00ea 468D      		ldd r20,Z+30
 1221 00ec 578D      		ldd r21,Z+31
 1222 00ee 60A1      		ldd r22,Z+32
 1223 00f0 71A1      		ldd r23,Z+33
 1224 00f2 480F      		add r20,r24
 1225 00f4 591F      		adc r21,r25
 1226 00f6 611D      		adc r22,__zero_reg__
 1227 00f8 711D      		adc r23,__zero_reg__
 1228 00fa CF01      		movw r24,r30
 1229 00fc 0E94 0000 		call move_window
 1230               	.LVL101:
 881:Lib/FATFs/ff.c **** 			p = &fs->win[bc % SS(fs)];
 1231               		.loc 1 881 0 discriminator 4
 1232 0100 8111      		cpse r24,__zero_reg__
 1233 0102 00C0      		rjmp .L65
 882:Lib/FATFs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1234               		.loc 1 882 0
 1235 0104 F1E0      		ldi r31,1
 1236 0106 BF22      		and r11,r31
 1237               	.LVL102:
 1238 0108 ED81      		ldd r30,Y+5
 1239 010a FE81      		ldd r31,Y+6
 1240 010c EA0D      		add r30,r10
 1241 010e FB1D      		adc r31,r11
 883:Lib/FATFs/ff.c **** 			break;
 1242               		.loc 1 883 0
 1243 0110 2981      		ldd r18,Y+1
 1244 0112 3A81      		ldd r19,Y+2
 1245 0114 4B81      		ldd r20,Y+3
 1246 0116 5C81      		ldd r21,Y+4
 1247 0118 232B      		or r18,r19
 1248 011a 242B      		or r18,r20
 1249 011c 252B      		or r18,r21
 1250 011e 01F0      		breq .L71
 883:Lib/FATFs/ff.c **** 			break;
 1251               		.loc 1 883 0 is_stmt 0 discriminator 1
 1252 0120 54E0      		ldi r21,4
 1253               		1:
 1254 0122 7694      		lsr r7
 1255 0124 6794      		ror r6
 1256 0126 5794      		ror r5
 1257 0128 4794      		ror r4
 1258 012a 5A95      		dec r21
 1259 012c 01F4      		brne 1b
 1260 012e 00C0      		rjmp .L72
 1261               	.LVL103:
 1262               	.L71:
 883:Lib/FATFs/ff.c **** 			break;
 1263               		.loc 1 883 0 discriminator 2
 1264 0130 06A5      		ldd r16,Z+46
 1265 0132 007F      		andi r16,lo8(-16)
 1266 0134 952D      		mov r25,r5
 1267 0136 9F70      		andi r25,lo8(15)
 1268 0138 402E      		mov r4,r16
 1269               	.LVL104:
 1270 013a 492A      		or r4,r25
 1271               	.LVL105:
 1272               	.L72:
 883:Lib/FATFs/ff.c **** 			break;
 1273               		.loc 1 883 0 discriminator 4
 1274 013c 46A6      		std Z+46,r4
 884:Lib/FATFs/ff.c **** 
 1275               		.loc 1 884 0 is_stmt 1 discriminator 4
 1276 013e 00C0      		rjmp .L65
 1277               	.LVL106:
 1278               	.L66:
 887:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 1279               		.loc 1 887 0
 1280 0140 7727      		clr r23
 1281 0142 6F2D      		mov r22,r15
 1282 0144 5E2D      		mov r21,r14
 1283 0146 4D2D      		mov r20,r13
 1284 0148 ED81      		ldd r30,Y+5
 1285 014a FE81      		ldd r31,Y+6
 1286 014c 868D      		ldd r24,Z+30
 1287 014e 978D      		ldd r25,Z+31
 1288 0150 A0A1      		ldd r26,Z+32
 1289 0152 B1A1      		ldd r27,Z+33
 1290 0154 480F      		add r20,r24
 1291 0156 591F      		adc r21,r25
 1292 0158 6A1F      		adc r22,r26
 1293 015a 7B1F      		adc r23,r27
 1294 015c CF01      		movw r24,r30
 1295 015e 0E94 0000 		call move_window
 1296               	.LVL107:
 888:Lib/FATFs/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 1297               		.loc 1 888 0
 1298 0162 8111      		cpse r24,__zero_reg__
 1299 0164 00C0      		rjmp .L65
 1300               	.LVL108:
 889:Lib/FATFs/ff.c **** 			ST_WORD(p, (WORD)val);
 1301               		.loc 1 889 0
 1302 0166 CC0C      		lsl r12
 1303 0168 DD1C      		rol r13
 1304 016a EE1C      		rol r14
 1305 016c FF1C      		rol r15
 1306               	.LVL109:
 1307 016e E894      		clt
 1308 0170 C0F8      		bld r12,0
 1309 0172 F1E0      		ldi r31,1
 1310 0174 DF22      		and r13,r31
 1311 0176 EE24      		clr r14
 1312 0178 FF24      		clr r15
 1313               	.LVL110:
 1314 017a 2EE2      		ldi r18,46
 1315 017c C20E      		add r12,r18
 1316 017e D11C      		adc r13,__zero_reg__
 890:Lib/FATFs/ff.c **** 			break;
 1317               		.loc 1 890 0
 1318 0180 ED81      		ldd r30,Y+5
 1319 0182 FE81      		ldd r31,Y+6
 1320 0184 EC0D      		add r30,r12
 1321 0186 FD1D      		adc r31,r13
 1322 0188 5182      		std Z+1,r5
 1323 018a 4082      		st Z,r4
 891:Lib/FATFs/ff.c **** 
 1324               		.loc 1 891 0
 1325 018c 00C0      		rjmp .L65
 1326               	.LVL111:
 1327               	.L67:
 894:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 1328               		.loc 1 894 0
 1329 018e ED81      		ldd r30,Y+5
 1330 0190 FE81      		ldd r31,Y+6
 1331 0192 868D      		ldd r24,Z+30
 1332 0194 978D      		ldd r25,Z+31
 1333 0196 A0A1      		ldd r26,Z+32
 1334 0198 B1A1      		ldd r27,Z+33
 1335 019a 27E0      		ldi r18,7
 1336               		1:
 1337 019c 7695      		lsr r23
 1338 019e 6795      		ror r22
 1339 01a0 5795      		ror r21
 1340 01a2 4795      		ror r20
 1341 01a4 2A95      		dec r18
 1342 01a6 01F4      		brne 1b
 1343 01a8 480F      		add r20,r24
 1344 01aa 591F      		adc r21,r25
 1345 01ac 6A1F      		adc r22,r26
 1346 01ae 7B1F      		adc r23,r27
 1347 01b0 CF01      		movw r24,r30
 1348 01b2 0E94 0000 		call move_window
 1349               	.LVL112:
 895:Lib/FATFs/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 1350               		.loc 1 895 0
 1351 01b6 8111      		cpse r24,__zero_reg__
 1352 01b8 00C0      		rjmp .L65
 896:Lib/FATFs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 1353               		.loc 1 896 0
 1354 01ba 92E0      		ldi r25,2
 1355               		1:
 1356 01bc CC0C      		lsl r12
 1357 01be DD1C      		rol r13
 1358 01c0 EE1C      		rol r14
 1359 01c2 FF1C      		rol r15
 1360 01c4 9A95      		dec r25
 1361 01c6 01F4      		brne 1b
 1362               	.LVL113:
 1363 01c8 FCEF      		ldi r31,252
 1364 01ca CF22      		and r12,r31
 1365 01cc F1E0      		ldi r31,1
 1366 01ce DF22      		and r13,r31
 1367 01d0 EE24      		clr r14
 1368 01d2 FF24      		clr r15
 1369 01d4 2EE2      		ldi r18,46
 1370 01d6 C20E      		add r12,r18
 1371 01d8 D11C      		adc r13,__zero_reg__
 1372 01da ED81      		ldd r30,Y+5
 1373 01dc FE81      		ldd r31,Y+6
 1374 01de EC0D      		add r30,r12
 1375 01e0 FD1D      		adc r31,r13
 1376               	.LVL114:
 898:Lib/FATFs/ff.c **** 			break;
 1377               		.loc 1 898 0
 1378 01e2 0081      		ld r16,Z
 1379 01e4 1181      		ldd r17,Z+1
 1380 01e6 2281      		ldd r18,Z+2
 1381 01e8 3381      		ldd r19,Z+3
 1382 01ea 0027      		clr r16
 1383 01ec 1127      		clr r17
 1384 01ee 2227      		clr r18
 1385 01f0 307F      		andi r19,240
 1386 01f2 402A      		or r4,r16
 1387 01f4 512A      		or r5,r17
 1388 01f6 622A      		or r6,r18
 1389 01f8 732A      		or r7,r19
 1390               	.LVL115:
 1391 01fa 4082      		st Z,r4
 1392 01fc 5182      		std Z+1,r5
 1393 01fe 6282      		std Z+2,r6
 1394 0200 7382      		std Z+3,r7
 899:Lib/FATFs/ff.c **** 
 1395               		.loc 1 899 0
 1396 0202 00C0      		rjmp .L65
 1397               	.LVL116:
 1398               	.L76:
 902:Lib/FATFs/ff.c **** 		}
 1399               		.loc 1 902 0
 1400 0204 82E0      		ldi r24,lo8(2)
 1401               	.LVL117:
 1402               	.L65:
 904:Lib/FATFs/ff.c **** 	}
 1403               		.loc 1 904 0
 1404 0206 91E0      		ldi r25,lo8(1)
 1405 0208 AD81      		ldd r26,Y+5
 1406 020a BE81      		ldd r27,Y+6
 1407 020c 1496      		adiw r26,4
 1408 020e 9C93      		st X,r25
 1409 0210 00C0      		rjmp .L64
 1410               	.LVL118:
 1411               	.L74:
 868:Lib/FATFs/ff.c **** 
 1412               		.loc 1 868 0
 1413 0212 82E0      		ldi r24,lo8(2)
 1414               	.LVL119:
 1415               	.L64:
 1416               	/* epilogue start */
 908:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
 1417               		.loc 1 908 0
 1418 0214 2696      		adiw r28,6
 1419 0216 0FB6      		in __tmp_reg__,__SREG__
 1420 0218 F894      		cli
 1421 021a DEBF      		out __SP_H__,r29
 1422 021c 0FBE      		out __SREG__,__tmp_reg__
 1423 021e CDBF      		out __SP_L__,r28
 1424 0220 DF91      		pop r29
 1425 0222 CF91      		pop r28
 1426 0224 1F91      		pop r17
 1427 0226 0F91      		pop r16
 1428 0228 FF90      		pop r15
 1429 022a EF90      		pop r14
 1430 022c DF90      		pop r13
 1431 022e CF90      		pop r12
 1432 0230 BF90      		pop r11
 1433 0232 AF90      		pop r10
 1434 0234 7F90      		pop r7
 1435 0236 6F90      		pop r6
 1436 0238 5F90      		pop r5
 1437 023a 4F90      		pop r4
 1438 023c 0895      		ret
 1439               		.cfi_endproc
 1440               	.LFE147:
 1442               		.section	.text.create_chain,"ax",@progbits
 1444               	create_chain:
 1445               	.LFB149:
 976:Lib/FATFs/ff.c **** 	DWORD cs, ncl, scl;
 1446               		.loc 1 976 0
 1447               		.cfi_startproc
 1448               	.LVL120:
 1449 0000 4F92      		push r4
 1450               	.LCFI51:
 1451               		.cfi_def_cfa_offset 3
 1452               		.cfi_offset 4, -2
 1453 0002 5F92      		push r5
 1454               	.LCFI52:
 1455               		.cfi_def_cfa_offset 4
 1456               		.cfi_offset 5, -3
 1457 0004 6F92      		push r6
 1458               	.LCFI53:
 1459               		.cfi_def_cfa_offset 5
 1460               		.cfi_offset 6, -4
 1461 0006 7F92      		push r7
 1462               	.LCFI54:
 1463               		.cfi_def_cfa_offset 6
 1464               		.cfi_offset 7, -5
 1465 0008 8F92      		push r8
 1466               	.LCFI55:
 1467               		.cfi_def_cfa_offset 7
 1468               		.cfi_offset 8, -6
 1469 000a 9F92      		push r9
 1470               	.LCFI56:
 1471               		.cfi_def_cfa_offset 8
 1472               		.cfi_offset 9, -7
 1473 000c AF92      		push r10
 1474               	.LCFI57:
 1475               		.cfi_def_cfa_offset 9
 1476               		.cfi_offset 10, -8
 1477 000e BF92      		push r11
 1478               	.LCFI58:
 1479               		.cfi_def_cfa_offset 10
 1480               		.cfi_offset 11, -9
 1481 0010 CF92      		push r12
 1482               	.LCFI59:
 1483               		.cfi_def_cfa_offset 11
 1484               		.cfi_offset 12, -10
 1485 0012 DF92      		push r13
 1486               	.LCFI60:
 1487               		.cfi_def_cfa_offset 12
 1488               		.cfi_offset 13, -11
 1489 0014 EF92      		push r14
 1490               	.LCFI61:
 1491               		.cfi_def_cfa_offset 13
 1492               		.cfi_offset 14, -12
 1493 0016 FF92      		push r15
 1494               	.LCFI62:
 1495               		.cfi_def_cfa_offset 14
 1496               		.cfi_offset 15, -13
 1497 0018 0F93      		push r16
 1498               	.LCFI63:
 1499               		.cfi_def_cfa_offset 15
 1500               		.cfi_offset 16, -14
 1501 001a 1F93      		push r17
 1502               	.LCFI64:
 1503               		.cfi_def_cfa_offset 16
 1504               		.cfi_offset 17, -15
 1505 001c CF93      		push r28
 1506               	.LCFI65:
 1507               		.cfi_def_cfa_offset 17
 1508               		.cfi_offset 28, -16
 1509 001e DF93      		push r29
 1510               	.LCFI66:
 1511               		.cfi_def_cfa_offset 18
 1512               		.cfi_offset 29, -17
 1513               	/* prologue: function */
 1514               	/* frame size = 0 */
 1515               	/* stack size = 16 */
 1516               	.L__stack_usage = 16
 1517 0020 EC01      		movw r28,r24
 1518 0022 2A01      		movw r4,r20
 1519 0024 3B01      		movw r6,r22
 981:Lib/FATFs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 1520               		.loc 1 981 0
 1521 0026 4115      		cp r20,__zero_reg__
 1522 0028 5105      		cpc r21,__zero_reg__
 1523 002a 6105      		cpc r22,__zero_reg__
 1524 002c 7105      		cpc r23,__zero_reg__
 1525 002e 01F4      		brne .L78
 982:Lib/FATFs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1526               		.loc 1 982 0
 1527 0030 8A84      		ldd r8,Y+10
 1528 0032 9B84      		ldd r9,Y+11
 1529 0034 AC84      		ldd r10,Y+12
 1530 0036 BD84      		ldd r11,Y+13
 1531               	.LVL121:
 983:Lib/FATFs/ff.c **** 	}
 1532               		.loc 1 983 0
 1533 0038 8114      		cp r8,__zero_reg__
 1534 003a 9104      		cpc r9,__zero_reg__
 1535 003c A104      		cpc r10,__zero_reg__
 1536 003e B104      		cpc r11,__zero_reg__
 1537 0040 01F0      		breq .L92
 983:Lib/FATFs/ff.c **** 	}
 1538               		.loc 1 983 0 is_stmt 0 discriminator 2
 1539 0042 8E89      		ldd r24,Y+22
 1540 0044 9F89      		ldd r25,Y+23
 1541 0046 A88D      		ldd r26,Y+24
 1542 0048 B98D      		ldd r27,Y+25
 1543               	.LVL122:
 1544 004a 8816      		cp r8,r24
 1545 004c 9906      		cpc r9,r25
 1546 004e AA06      		cpc r10,r26
 1547 0050 BB06      		cpc r11,r27
 1548 0052 00F0      		brlo .L79
 1549 0054 00C0      		rjmp .L92
 1550               	.LVL123:
 1551               	.L78:
 986:Lib/FATFs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1552               		.loc 1 986 0 is_stmt 1
 1553 0056 0E94 0000 		call get_fat
 1554               	.LVL124:
 1555 005a 6B01      		movw r12,r22
 1556 005c 7C01      		movw r14,r24
 1557               	.LVL125:
 987:Lib/FATFs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1558               		.loc 1 987 0
 1559 005e 6230      		cpi r22,2
 1560 0060 7105      		cpc r23,__zero_reg__
 1561 0062 8105      		cpc r24,__zero_reg__
 1562 0064 9105      		cpc r25,__zero_reg__
 1563 0066 00F4      		brsh .+2
 1564 0068 00C0      		rjmp .L80
 988:Lib/FATFs/ff.c **** 		scl = clst;
 1565               		.loc 1 988 0
 1566 006a 8E89      		ldd r24,Y+22
 1567 006c 9F89      		ldd r25,Y+23
 1568 006e A88D      		ldd r26,Y+24
 1569 0070 B98D      		ldd r27,Y+25
 1570 0072 C816      		cp r12,r24
 1571 0074 D906      		cpc r13,r25
 1572 0076 EA06      		cpc r14,r26
 1573 0078 FB06      		cpc r15,r27
 1574 007a 00F4      		brsh .+2
 1575 007c 00C0      		rjmp .L93
 1576 007e 5301      		movw r10,r6
 1577 0080 4201      		movw r8,r4
 1578 0082 00C0      		rjmp .L79
 1579               	.LVL126:
 1580               	.L92:
 983:Lib/FATFs/ff.c **** 	}
 1581               		.loc 1 983 0
 1582 0084 812C      		mov r8,__zero_reg__
 1583 0086 912C      		mov r9,__zero_reg__
 1584 0088 5401      		movw r10,r8
 1585 008a 8394      		inc r8
 1586               	.LVL127:
 1587               	.L79:
 1588 008c 7501      		movw r14,r10
 1589 008e 6401      		movw r12,r8
 1590               	.LVL128:
 1591               	.L86:
 994:Lib/FATFs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 1592               		.loc 1 994 0
 1593 0090 8FEF      		ldi r24,-1
 1594 0092 C81A      		sub r12,r24
 1595 0094 D80A      		sbc r13,r24
 1596 0096 E80A      		sbc r14,r24
 1597 0098 F80A      		sbc r15,r24
 1598               	.LVL129:
 995:Lib/FATFs/ff.c **** 			ncl = 2;
 1599               		.loc 1 995 0
 1600 009a 8E89      		ldd r24,Y+22
 1601 009c 9F89      		ldd r25,Y+23
 1602 009e A88D      		ldd r26,Y+24
 1603 00a0 B98D      		ldd r27,Y+25
 1604 00a2 C816      		cp r12,r24
 1605 00a4 D906      		cpc r13,r25
 1606 00a6 EA06      		cpc r14,r26
 1607 00a8 FB06      		cpc r15,r27
 1608 00aa 00F0      		brlo .L82
 1609               	.LVL130:
 997:Lib/FATFs/ff.c **** 		}
 1610               		.loc 1 997 0
 1611 00ac 22E0      		ldi r18,2
 1612 00ae 8216      		cp r8,r18
 1613 00b0 9104      		cpc r9,__zero_reg__
 1614 00b2 A104      		cpc r10,__zero_reg__
 1615 00b4 B104      		cpc r11,__zero_reg__
 1616 00b6 00F4      		brsh .L94
 1617               	.LVL131:
 1618               	.L85:
 1619 00b8 60E0      		ldi r22,0
 1620 00ba 00C0      		rjmp .L104
 1621               	.LVL132:
 1622               	.L94:
 996:Lib/FATFs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 1623               		.loc 1 996 0
 1624 00bc 82E0      		ldi r24,lo8(2)
 1625 00be C82E      		mov r12,r24
 1626 00c0 D12C      		mov r13,__zero_reg__
 1627 00c2 E12C      		mov r14,__zero_reg__
 1628 00c4 F12C      		mov r15,__zero_reg__
 1629               	.LVL133:
 1630               	.L82:
 999:Lib/FATFs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 1631               		.loc 1 999 0
 1632 00c6 B701      		movw r22,r14
 1633 00c8 A601      		movw r20,r12
 1634 00ca CE01      		movw r24,r28
 1635 00cc 0E94 0000 		call get_fat
 1636               	.LVL134:
1000:Lib/FATFs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1637               		.loc 1 1000 0
 1638 00d0 6115      		cp r22,__zero_reg__
 1639 00d2 7105      		cpc r23,__zero_reg__
 1640 00d4 8105      		cpc r24,__zero_reg__
 1641 00d6 9105      		cpc r25,__zero_reg__
 1642 00d8 01F0      		breq .L83
1001:Lib/FATFs/ff.c **** 			return cs;
 1643               		.loc 1 1001 0
 1644 00da 6F3F      		cpi r22,-1
 1645 00dc 2FEF      		ldi r18,-1
 1646 00de 7207      		cpc r23,r18
 1647 00e0 8207      		cpc r24,r18
 1648 00e2 9207      		cpc r25,r18
 1649 00e4 01F4      		brne .L84
 1650               	.LVL135:
 1651               	.L91:
 996:Lib/FATFs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 1652               		.loc 1 996 0
 1653 00e6 6FEF      		ldi r22,lo8(-1)
 1654 00e8 7FEF      		ldi r23,lo8(-1)
 1655 00ea 8FEF      		ldi r24,lo8(-1)
 1656 00ec 9FEF      		ldi r25,lo8(-1)
 1657 00ee 00C0      		rjmp .L81
 1658               	.LVL136:
 1659               	.L84:
1001:Lib/FATFs/ff.c **** 			return cs;
 1660               		.loc 1 1001 0 discriminator 1
 1661 00f0 6130      		cpi r22,1
 1662 00f2 7105      		cpc r23,__zero_reg__
 1663 00f4 8105      		cpc r24,__zero_reg__
 1664 00f6 9105      		cpc r25,__zero_reg__
 1665 00f8 01F0      		breq .L80
1003:Lib/FATFs/ff.c **** 	}
 1666               		.loc 1 1003 0
 1667 00fa C814      		cp r12,r8
 1668 00fc D904      		cpc r13,r9
 1669 00fe EA04      		cpc r14,r10
 1670 0100 FB04      		cpc r15,r11
 1671 0102 01F4      		brne .L86
 1672 0104 00C0      		rjmp .L85
 1673               	.L83:
1006:Lib/FATFs/ff.c **** 	if (res == FR_OK && clst != 0) {
 1674               		.loc 1 1006 0
 1675 0106 0FEF      		ldi r16,lo8(-1)
 1676 0108 1FEF      		ldi r17,lo8(-1)
 1677 010a 2FEF      		ldi r18,lo8(-1)
 1678 010c 3FE0      		ldi r19,lo8(15)
 1679 010e B701      		movw r22,r14
 1680 0110 A601      		movw r20,r12
 1681 0112 CE01      		movw r24,r28
 1682 0114 0E94 0000 		call put_fat
 1683               	.LVL137:
1007:Lib/FATFs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1684               		.loc 1 1007 0
 1685 0118 8111      		cpse r24,__zero_reg__
 1686 011a 00C0      		rjmp .L87
1007:Lib/FATFs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1687               		.loc 1 1007 0 is_stmt 0 discriminator 1
 1688 011c 4114      		cp r4,__zero_reg__
 1689 011e 5104      		cpc r5,__zero_reg__
 1690 0120 6104      		cpc r6,__zero_reg__
 1691 0122 7104      		cpc r7,__zero_reg__
 1692 0124 01F4      		brne .L88
 1693               	.L90:
 1694               	.LVL138:
1011:Lib/FATFs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 1695               		.loc 1 1011 0 is_stmt 1
 1696 0126 CA86      		std Y+10,r12
 1697 0128 DB86      		std Y+11,r13
 1698 012a EC86      		std Y+12,r14
 1699 012c FD86      		std Y+13,r15
1012:Lib/FATFs/ff.c **** 			fs->free_clust--;
 1700               		.loc 1 1012 0
 1701 012e 8E85      		ldd r24,Y+14
 1702 0130 9F85      		ldd r25,Y+15
 1703 0132 A889      		ldd r26,Y+16
 1704 0134 B989      		ldd r27,Y+17
 1705 0136 8F3F      		cpi r24,-1
 1706 0138 2FEF      		ldi r18,-1
 1707 013a 9207      		cpc r25,r18
 1708 013c A207      		cpc r26,r18
 1709 013e B207      		cpc r27,r18
 1710 0140 01F0      		breq .L93
1013:Lib/FATFs/ff.c **** 			fs->fsi_flag = 1;
 1711               		.loc 1 1013 0
 1712 0142 0197      		sbiw r24,1
 1713 0144 A109      		sbc r26,__zero_reg__
 1714 0146 B109      		sbc r27,__zero_reg__
 1715 0148 8E87      		std Y+14,r24
 1716 014a 9F87      		std Y+15,r25
 1717 014c A88B      		std Y+16,r26
 1718 014e B98B      		std Y+17,r27
1014:Lib/FATFs/ff.c **** 		}
 1719               		.loc 1 1014 0
 1720 0150 81E0      		ldi r24,lo8(1)
 1721 0152 8D83      		std Y+5,r24
 1722 0154 00C0      		rjmp .L93
 1723               	.LVL139:
 1724               	.L88:
1008:Lib/FATFs/ff.c **** 	}
 1725               		.loc 1 1008 0
 1726 0156 9701      		movw r18,r14
 1727 0158 8601      		movw r16,r12
 1728 015a B301      		movw r22,r6
 1729 015c A201      		movw r20,r4
 1730 015e CE01      		movw r24,r28
 1731               	.LVL140:
 1732 0160 0E94 0000 		call put_fat
 1733               	.LVL141:
1010:Lib/FATFs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 1734               		.loc 1 1010 0
 1735 0164 8823      		tst r24
 1736 0166 01F0      		breq .L90
 1737               	.L87:
1017:Lib/FATFs/ff.c **** 	}
 1738               		.loc 1 1017 0
 1739 0168 8130      		cpi r24,lo8(1)
 1740 016a 01F4      		brne .+2
 1741 016c 00C0      		rjmp .L91
 1742               	.LVL142:
 1743               	.L80:
1017:Lib/FATFs/ff.c **** 	}
 1744               		.loc 1 1017 0 is_stmt 0 discriminator 2
 1745 016e 61E0      		ldi r22,lo8(1)
 1746               	.L104:
 1747 0170 70E0      		ldi r23,0
 1748 0172 80E0      		ldi r24,0
 1749 0174 90E0      		ldi r25,0
 1750 0176 00C0      		rjmp .L81
 1751               	.L93:
 1752 0178 B601      		movw r22,r12
 1753 017a C701      		movw r24,r14
 1754               	.L81:
 1755               	/* epilogue start */
1021:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
 1756               		.loc 1 1021 0 is_stmt 1
 1757 017c DF91      		pop r29
 1758 017e CF91      		pop r28
 1759               	.LVL143:
 1760 0180 1F91      		pop r17
 1761 0182 0F91      		pop r16
 1762 0184 FF90      		pop r15
 1763 0186 EF90      		pop r14
 1764 0188 DF90      		pop r13
 1765 018a CF90      		pop r12
 1766 018c BF90      		pop r11
 1767 018e AF90      		pop r10
 1768 0190 9F90      		pop r9
 1769 0192 8F90      		pop r8
 1770 0194 7F90      		pop r7
 1771 0196 6F90      		pop r6
 1772 0198 5F90      		pop r5
 1773 019a 4F90      		pop r4
 1774               	.LVL144:
 1775 019c 0895      		ret
 1776               		.cfi_endproc
 1777               	.LFE149:
 1779               		.section	.text.dir_next,"ax",@progbits
 1781               	dir_next:
 1782               	.LFB151:
1111:Lib/FATFs/ff.c **** 	DWORD clst;
 1783               		.loc 1 1111 0
 1784               		.cfi_startproc
 1785               	.LVL145:
 1786 0000 8F92      		push r8
 1787               	.LCFI67:
 1788               		.cfi_def_cfa_offset 3
 1789               		.cfi_offset 8, -2
 1790 0002 9F92      		push r9
 1791               	.LCFI68:
 1792               		.cfi_def_cfa_offset 4
 1793               		.cfi_offset 9, -3
 1794 0004 AF92      		push r10
 1795               	.LCFI69:
 1796               		.cfi_def_cfa_offset 5
 1797               		.cfi_offset 10, -4
 1798 0006 BF92      		push r11
 1799               	.LCFI70:
 1800               		.cfi_def_cfa_offset 6
 1801               		.cfi_offset 11, -5
 1802 0008 CF92      		push r12
 1803               	.LCFI71:
 1804               		.cfi_def_cfa_offset 7
 1805               		.cfi_offset 12, -6
 1806 000a DF92      		push r13
 1807               	.LCFI72:
 1808               		.cfi_def_cfa_offset 8
 1809               		.cfi_offset 13, -7
 1810 000c EF92      		push r14
 1811               	.LCFI73:
 1812               		.cfi_def_cfa_offset 9
 1813               		.cfi_offset 14, -8
 1814 000e FF92      		push r15
 1815               	.LCFI74:
 1816               		.cfi_def_cfa_offset 10
 1817               		.cfi_offset 15, -9
 1818 0010 0F93      		push r16
 1819               	.LCFI75:
 1820               		.cfi_def_cfa_offset 11
 1821               		.cfi_offset 16, -10
 1822 0012 1F93      		push r17
 1823               	.LCFI76:
 1824               		.cfi_def_cfa_offset 12
 1825               		.cfi_offset 17, -11
 1826 0014 CF93      		push r28
 1827               	.LCFI77:
 1828               		.cfi_def_cfa_offset 13
 1829               		.cfi_offset 28, -12
 1830 0016 DF93      		push r29
 1831               	.LCFI78:
 1832               		.cfi_def_cfa_offset 14
 1833               		.cfi_offset 29, -13
 1834               	/* prologue: function */
 1835               	/* frame size = 0 */
 1836               	/* stack size = 12 */
 1837               	.L__stack_usage = 12
 1838 0018 EC01      		movw r28,r24
 1839 001a 6B01      		movw r12,r22
1116:Lib/FATFs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1840               		.loc 1 1116 0
 1841 001c 0C81      		ldd r16,Y+4
 1842 001e 1D81      		ldd r17,Y+5
 1843 0020 0F5F      		subi r16,-1
 1844 0022 1F4F      		sbci r17,-1
 1845               	.LVL146:
1117:Lib/FATFs/ff.c **** 		return FR_NO_FILE;
 1846               		.loc 1 1117 0
 1847 0024 01F4      		brne .L106
 1848               	.LVL147:
 1849               	.L108:
1118:Lib/FATFs/ff.c **** 
 1850               		.loc 1 1118 0
 1851 0026 84E0      		ldi r24,lo8(4)
 1852 0028 00C0      		rjmp .L107
 1853               	.LVL148:
 1854               	.L106:
1117:Lib/FATFs/ff.c **** 		return FR_NO_FILE;
 1855               		.loc 1 1117 0 discriminator 1
 1856 002a 4E85      		ldd r20,Y+14
 1857 002c 5F85      		ldd r21,Y+15
 1858 002e 6889      		ldd r22,Y+16
 1859 0030 7989      		ldd r23,Y+17
 1860 0032 4115      		cp r20,__zero_reg__
 1861 0034 5105      		cpc r21,__zero_reg__
 1862 0036 6105      		cpc r22,__zero_reg__
 1863 0038 7105      		cpc r23,__zero_reg__
 1864 003a 01F0      		breq .L108
1120:Lib/FATFs/ff.c **** 		dj->sect++;					/* Next sector */
 1865               		.loc 1 1120 0
 1866 003c 7801      		movw r14,r16
 1867 003e 8FE0      		ldi r24,15
 1868 0040 E822      		and r14,r24
 1869 0042 FF24      		clr r15
 1870               	.LVL149:
 1871 0044 E114      		cp r14,__zero_reg__
 1872 0046 F104      		cpc r15,__zero_reg__
 1873 0048 01F0      		breq .+2
 1874 004a 00C0      		rjmp .L110
1121:Lib/FATFs/ff.c **** 
 1875               		.loc 1 1121 0
 1876 004c 4F5F      		subi r20,-1
 1877 004e 5F4F      		sbci r21,-1
 1878 0050 6F4F      		sbci r22,-1
 1879 0052 7F4F      		sbci r23,-1
 1880 0054 4E87      		std Y+14,r20
 1881 0056 5F87      		std Y+15,r21
 1882 0058 688B      		std Y+16,r22
 1883 005a 798B      		std Y+17,r23
1123:Lib/FATFs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1884               		.loc 1 1123 0
 1885 005c 4A85      		ldd r20,Y+10
 1886 005e 5B85      		ldd r21,Y+11
 1887 0060 6C85      		ldd r22,Y+12
 1888 0062 7D85      		ldd r23,Y+13
 1889 0064 8881      		ld r24,Y
 1890 0066 9981      		ldd r25,Y+1
1124:Lib/FATFs/ff.c **** 				return FR_NO_FILE;
 1891               		.loc 1 1124 0
 1892 0068 FC01      		movw r30,r24
1123:Lib/FATFs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1893               		.loc 1 1123 0
 1894 006a 4115      		cp r20,__zero_reg__
 1895 006c 5105      		cpc r21,__zero_reg__
 1896 006e 6105      		cpc r22,__zero_reg__
 1897 0070 7105      		cpc r23,__zero_reg__
 1898 0072 01F4      		brne .L111
1124:Lib/FATFs/ff.c **** 				return FR_NO_FILE;
 1899               		.loc 1 1124 0
 1900 0074 8085      		ldd r24,Z+8
 1901 0076 9185      		ldd r25,Z+9
 1902 0078 0817      		cp r16,r24
 1903 007a 1907      		cpc r17,r25
 1904 007c 00F4      		brsh .L108
 1905 007e 00C0      		rjmp .L110
 1906               	.L111:
1128:Lib/FATFs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 1907               		.loc 1 1128 0
 1908 0080 2281      		ldd r18,Z+2
 1909 0082 30E0      		ldi r19,0
 1910 0084 2150      		subi r18,1
 1911 0086 3109      		sbc r19,__zero_reg__
 1912 0088 F801      		movw r30,r16
 1913 008a A4E0      		ldi r26,4
 1914               		1:
 1915 008c F695      		lsr r31
 1916 008e E795      		ror r30
 1917 0090 AA95      		dec r26
 1918 0092 01F4      		brne 1b
 1919 0094 2E23      		and r18,r30
 1920 0096 3F23      		and r19,r31
 1921 0098 232B      		or r18,r19
 1922 009a 01F0      		breq .+2
 1923 009c 00C0      		rjmp .L110
1129:Lib/FATFs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 1924               		.loc 1 1129 0
 1925 009e 0E94 0000 		call get_fat
 1926               	.LVL150:
 1927 00a2 4B01      		movw r8,r22
 1928 00a4 5C01      		movw r10,r24
 1929               	.LVL151:
1130:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1930               		.loc 1 1130 0
 1931 00a6 6230      		cpi r22,2
 1932 00a8 7105      		cpc r23,__zero_reg__
 1933 00aa 8105      		cpc r24,__zero_reg__
 1934 00ac 9105      		cpc r25,__zero_reg__
 1935 00ae 00F4      		brsh .L113
 1936               	.L116:
 1937 00b0 82E0      		ldi r24,lo8(2)
 1938 00b2 00C0      		rjmp .L107
 1939               	.L113:
1131:Lib/FATFs/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 1940               		.loc 1 1131 0
 1941 00b4 8FEF      		ldi r24,-1
 1942 00b6 8816      		cp r8,r24
 1943 00b8 9806      		cpc r9,r24
 1944 00ba A806      		cpc r10,r24
 1945 00bc B806      		cpc r11,r24
 1946 00be 01F4      		brne .L114
 1947               	.LVL152:
 1948               	.L117:
 1949 00c0 81E0      		ldi r24,lo8(1)
 1950 00c2 00C0      		rjmp .L107
 1951               	.LVL153:
 1952               	.L114:
1132:Lib/FATFs/ff.c **** #if !_FS_READONLY
 1953               		.loc 1 1132 0
 1954 00c4 8881      		ld r24,Y
 1955 00c6 9981      		ldd r25,Y+1
 1956 00c8 FC01      		movw r30,r24
 1957 00ca 4689      		ldd r20,Z+22
 1958 00cc 5789      		ldd r21,Z+23
 1959 00ce 608D      		ldd r22,Z+24
 1960 00d0 718D      		ldd r23,Z+25
 1961 00d2 8416      		cp r8,r20
 1962 00d4 9506      		cpc r9,r21
 1963 00d6 A606      		cpc r10,r22
 1964 00d8 B706      		cpc r11,r23
 1965 00da 00F4      		brsh .+2
 1966 00dc 00C0      		rjmp .L115
 1967               	.LBB6:
1135:Lib/FATFs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 1968               		.loc 1 1135 0
 1969 00de CD28      		or r12,r13
 1970 00e0 01F4      		brne .+2
 1971 00e2 00C0      		rjmp .L108
1136:Lib/FATFs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 1972               		.loc 1 1136 0
 1973 00e4 4A85      		ldd r20,Y+10
 1974 00e6 5B85      		ldd r21,Y+11
 1975 00e8 6C85      		ldd r22,Y+12
 1976 00ea 7D85      		ldd r23,Y+13
 1977 00ec 0E94 0000 		call create_chain
 1978               	.LVL154:
 1979 00f0 4B01      		movw r8,r22
 1980 00f2 5C01      		movw r10,r24
 1981               	.LVL155:
1137:Lib/FATFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 1982               		.loc 1 1137 0
 1983 00f4 6115      		cp r22,__zero_reg__
 1984 00f6 7105      		cpc r23,__zero_reg__
 1985 00f8 8105      		cpc r24,__zero_reg__
 1986 00fa 9105      		cpc r25,__zero_reg__
 1987 00fc 01F4      		brne .+2
 1988 00fe 00C0      		rjmp .L122
1138:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1989               		.loc 1 1138 0
 1990 0100 6130      		cpi r22,1
 1991 0102 7105      		cpc r23,__zero_reg__
 1992 0104 8105      		cpc r24,__zero_reg__
 1993 0106 9105      		cpc r25,__zero_reg__
 1994 0108 01F0      		breq .L116
1139:Lib/FATFs/ff.c **** 					/* Clean-up stretched table */
 1995               		.loc 1 1139 0
 1996 010a 8FEF      		ldi r24,-1
 1997 010c 8816      		cp r8,r24
 1998 010e 9806      		cpc r9,r24
 1999 0110 A806      		cpc r10,r24
 2000 0112 B806      		cpc r11,r24
 2001 0114 01F0      		breq .L117
1141:Lib/FATFs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 2002               		.loc 1 1141 0
 2003 0116 40E0      		ldi r20,0
 2004 0118 50E0      		ldi r21,0
 2005 011a BA01      		movw r22,r20
 2006 011c 8881      		ld r24,Y
 2007 011e 9981      		ldd r25,Y+1
 2008 0120 0E94 0000 		call move_window
 2009               	.LVL156:
 2010 0124 8111      		cpse r24,__zero_reg__
 2011 0126 00C0      		rjmp .L117
1142:Lib/FATFs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 2012               		.loc 1 1142 0
 2013 0128 8881      		ld r24,Y
 2014 012a 9981      		ldd r25,Y+1
 2015               	.LVL157:
 2016 012c FC01      		movw r30,r24
 2017 012e BE96      		adiw r30,46
 2018               	.LVL158:
 2019 0130 825D      		subi r24,-46
 2020 0132 9D4F      		sbci r25,-3
 2021               	.LVL159:
 2022               	.L118:
 2023               	.LBB7:
 2024               	.LBB8:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 2025               		.loc 1 541 0
 2026 0134 8E17      		cp r24,r30
 2027 0136 9F07      		cpc r25,r31
 2028 0138 01F0      		breq .L135
 2029               	.LVL160:
 542:Lib/FATFs/ff.c **** }
 2030               		.loc 1 542 0
 2031 013a 1192      		st Z+,__zero_reg__
 2032               	.LVL161:
 2033 013c 00C0      		rjmp .L118
 2034               	.LVL162:
 2035               	.L135:
 2036               	.LBE8:
 2037               	.LBE7:
1143:Lib/FATFs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2038               		.loc 1 1143 0
 2039 013e C880      		ld r12,Y
 2040 0140 D980      		ldd r13,Y+1
 2041               	.LVL163:
 2042 0142 B501      		movw r22,r10
 2043 0144 A401      		movw r20,r8
 2044 0146 C601      		movw r24,r12
 2045 0148 0E94 0000 		call clust2sect
 2046               	.LVL164:
 2047 014c F601      		movw r30,r12
 2048 014e 62A7      		std Z+42,r22
 2049 0150 73A7      		std Z+43,r23
 2050 0152 84A7      		std Z+44,r24
 2051 0154 95A7      		std Z+45,r25
 2052               	.LVL165:
1144:Lib/FATFs/ff.c **** 						dj->fs->wflag = 1;
 2053               		.loc 1 1144 0
 2054 0156 D12C      		mov r13,__zero_reg__
1145:Lib/FATFs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 2055               		.loc 1 1145 0
 2056 0158 CC24      		clr r12
 2057 015a C394      		inc r12
 2058               	.LVL166:
 2059               	.L120:
1144:Lib/FATFs/ff.c **** 						dj->fs->wflag = 1;
 2060               		.loc 1 1144 0 discriminator 1
 2061 015c E881      		ld r30,Y
 2062 015e F981      		ldd r31,Y+1
 2063 0160 8281      		ldd r24,Z+2
 2064 0162 D816      		cp r13,r24
 2065 0164 00F4      		brsh .L136
1145:Lib/FATFs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 2066               		.loc 1 1145 0
 2067 0166 C482      		std Z+4,r12
1146:Lib/FATFs/ff.c **** 						dj->fs->winsect++;
 2068               		.loc 1 1146 0
 2069 0168 40E0      		ldi r20,0
 2070 016a 50E0      		ldi r21,0
 2071 016c BA01      		movw r22,r20
 2072 016e 8881      		ld r24,Y
 2073 0170 9981      		ldd r25,Y+1
 2074 0172 0E94 0000 		call move_window
 2075               	.LVL167:
 2076 0176 8111      		cpse r24,__zero_reg__
 2077 0178 00C0      		rjmp .L117
1147:Lib/FATFs/ff.c **** 					}
 2078               		.loc 1 1147 0 discriminator 2
 2079 017a E881      		ld r30,Y
 2080 017c F981      		ldd r31,Y+1
 2081 017e 82A5      		ldd r24,Z+42
 2082 0180 93A5      		ldd r25,Z+43
 2083 0182 A4A5      		ldd r26,Z+44
 2084 0184 B5A5      		ldd r27,Z+45
 2085 0186 0196      		adiw r24,1
 2086 0188 A11D      		adc r26,__zero_reg__
 2087 018a B11D      		adc r27,__zero_reg__
 2088 018c 82A7      		std Z+42,r24
 2089 018e 93A7      		std Z+43,r25
 2090 0190 A4A7      		std Z+44,r26
 2091 0192 B5A7      		std Z+45,r27
1144:Lib/FATFs/ff.c **** 						dj->fs->wflag = 1;
 2092               		.loc 1 1144 0 discriminator 2
 2093 0194 D394      		inc r13
 2094               	.LVL168:
 2095 0196 00C0      		rjmp .L120
 2096               	.L136:
1149:Lib/FATFs/ff.c **** #else
 2097               		.loc 1 1149 0
 2098 0198 82A5      		ldd r24,Z+42
 2099 019a 93A5      		ldd r25,Z+43
 2100 019c A4A5      		ldd r26,Z+44
 2101 019e B5A5      		ldd r27,Z+45
 2102 01a0 8D19      		sub r24,r13
 2103 01a2 9109      		sbc r25,__zero_reg__
 2104 01a4 A109      		sbc r26,__zero_reg__
 2105 01a6 B109      		sbc r27,__zero_reg__
 2106 01a8 82A7      		std Z+42,r24
 2107 01aa 93A7      		std Z+43,r25
 2108 01ac A4A7      		std Z+44,r26
 2109 01ae B5A7      		std Z+45,r27
 2110               	.LVL169:
 2111               	.L115:
 2112               	.LBE6:
1154:Lib/FATFs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 2113               		.loc 1 1154 0
 2114 01b0 8A86      		std Y+10,r8
 2115 01b2 9B86      		std Y+11,r9
 2116 01b4 AC86      		std Y+12,r10
 2117 01b6 BD86      		std Y+13,r11
1155:Lib/FATFs/ff.c **** 			}
 2118               		.loc 1 1155 0
 2119 01b8 B501      		movw r22,r10
 2120 01ba A401      		movw r20,r8
 2121 01bc 8881      		ld r24,Y
 2122 01be 9981      		ldd r25,Y+1
 2123 01c0 0E94 0000 		call clust2sect
 2124               	.LVL170:
 2125 01c4 6E87      		std Y+14,r22
 2126 01c6 7F87      		std Y+15,r23
 2127 01c8 888B      		std Y+16,r24
 2128 01ca 998B      		std Y+17,r25
 2129               	.LVL171:
 2130               	.L110:
1160:Lib/FATFs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 2131               		.loc 1 1160 0
 2132 01cc 1D83      		std Y+5,r17
 2133 01ce 0C83      		std Y+4,r16
1161:Lib/FATFs/ff.c **** 
 2134               		.loc 1 1161 0
 2135 01d0 8881      		ld r24,Y
 2136 01d2 9981      		ldd r25,Y+1
 2137 01d4 8E96      		adiw r24,46
 2138 01d6 25E0      		ldi r18,5
 2139               		1:
 2140 01d8 EE0C      		lsl r14
 2141 01da FF1C      		rol r15
 2142 01dc 2A95      		dec r18
 2143 01de 01F4      		brne 1b
 2144 01e0 E80E      		add r14,r24
 2145 01e2 F91E      		adc r15,r25
 2146 01e4 FB8A      		std Y+19,r15
 2147 01e6 EA8A      		std Y+18,r14
1163:Lib/FATFs/ff.c **** }
 2148               		.loc 1 1163 0
 2149 01e8 80E0      		ldi r24,0
 2150 01ea 00C0      		rjmp .L107
 2151               	.LVL172:
 2152               	.L122:
 2153               	.LBB9:
1137:Lib/FATFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 2154               		.loc 1 1137 0
 2155 01ec 87E0      		ldi r24,lo8(7)
 2156               	.LVL173:
 2157               	.L107:
 2158               	/* epilogue start */
 2159               	.LBE9:
1164:Lib/FATFs/ff.c **** 
 2160               		.loc 1 1164 0
 2161 01ee DF91      		pop r29
 2162 01f0 CF91      		pop r28
 2163               	.LVL174:
 2164 01f2 1F91      		pop r17
 2165 01f4 0F91      		pop r16
 2166               	.LVL175:
 2167 01f6 FF90      		pop r15
 2168 01f8 EF90      		pop r14
 2169 01fa DF90      		pop r13
 2170 01fc CF90      		pop r12
 2171 01fe BF90      		pop r11
 2172 0200 AF90      		pop r10
 2173 0202 9F90      		pop r9
 2174 0204 8F90      		pop r8
 2175 0206 0895      		ret
 2176               		.cfi_endproc
 2177               	.LFE151:
 2179               		.section	.text.f_mount,"ax",@progbits
 2180               	.global	f_mount
 2182               	f_mount:
 2183               	.LFB159:
2181:Lib/FATFs/ff.c **** 
2182:Lib/FATFs/ff.c **** 
2183:Lib/FATFs/ff.c **** 
2184:Lib/FATFs/ff.c **** 
2185:Lib/FATFs/ff.c **** /*--------------------------------------------------------------------------
2186:Lib/FATFs/ff.c **** 
2187:Lib/FATFs/ff.c ****    Public Functions
2188:Lib/FATFs/ff.c **** 
2189:Lib/FATFs/ff.c **** --------------------------------------------------------------------------*/
2190:Lib/FATFs/ff.c **** 
2191:Lib/FATFs/ff.c **** 
2192:Lib/FATFs/ff.c **** 
2193:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2194:Lib/FATFs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2195:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2196:Lib/FATFs/ff.c **** 
2197:Lib/FATFs/ff.c **** FRESULT f_mount (
2198:Lib/FATFs/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2199:Lib/FATFs/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2200:Lib/FATFs/ff.c **** )
2201:Lib/FATFs/ff.c **** {
 2184               		.loc 1 2201 0
 2185               		.cfi_startproc
 2186               	.LVL176:
 2187               	/* prologue: function */
 2188               	/* frame size = 0 */
 2189               	/* stack size = 0 */
 2190               	.L__stack_usage = 0
2202:Lib/FATFs/ff.c **** 	FATFS *rfs;
2203:Lib/FATFs/ff.c **** 
2204:Lib/FATFs/ff.c **** 
2205:Lib/FATFs/ff.c **** 	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 2191               		.loc 1 2205 0
 2192 0000 8111      		cpse r24,__zero_reg__
 2193 0002 00C0      		rjmp .L141
2206:Lib/FATFs/ff.c **** 		return FR_INVALID_DRIVE;
2207:Lib/FATFs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 2194               		.loc 1 2207 0
 2195 0004 E091 0000 		lds r30,FatFs
 2196 0008 F091 0000 		lds r31,FatFs+1
 2197               	.LVL177:
2208:Lib/FATFs/ff.c **** 
2209:Lib/FATFs/ff.c **** 	if (rfs) {
 2198               		.loc 1 2209 0
 2199 000c 3097      		sbiw r30,0
 2200 000e 01F0      		breq .L139
2210:Lib/FATFs/ff.c **** #if _FS_SHARE
2211:Lib/FATFs/ff.c **** 		clear_lock(rfs);
2212:Lib/FATFs/ff.c **** #endif
2213:Lib/FATFs/ff.c **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
2214:Lib/FATFs/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2215:Lib/FATFs/ff.c **** #endif
2216:Lib/FATFs/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
 2201               		.loc 1 2216 0
 2202 0010 1082      		st Z,__zero_reg__
 2203               	.L139:
2217:Lib/FATFs/ff.c **** 	}
2218:Lib/FATFs/ff.c **** 
2219:Lib/FATFs/ff.c **** 	if (fs) {
 2204               		.loc 1 2219 0
 2205 0012 6115      		cp r22,__zero_reg__
 2206 0014 7105      		cpc r23,__zero_reg__
 2207 0016 01F0      		breq .L140
2220:Lib/FATFs/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
 2208               		.loc 1 2220 0
 2209 0018 FB01      		movw r30,r22
 2210               	.LVL178:
 2211 001a 1082      		st Z,__zero_reg__
 2212               	.L140:
2221:Lib/FATFs/ff.c **** #if _FS_REENTRANT					/* Create sync object for the new volume */
2222:Lib/FATFs/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2223:Lib/FATFs/ff.c **** #endif
2224:Lib/FATFs/ff.c **** 	}
2225:Lib/FATFs/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
 2213               		.loc 1 2225 0
 2214 001c 7093 0000 		sts FatFs+1,r23
 2215 0020 6093 0000 		sts FatFs,r22
 2216               	.LVL179:
2226:Lib/FATFs/ff.c **** 
2227:Lib/FATFs/ff.c **** 	return FR_OK;
 2217               		.loc 1 2227 0
 2218 0024 80E0      		ldi r24,0
 2219               	.LVL180:
 2220 0026 0895      		ret
 2221               	.LVL181:
 2222               	.L141:
2206:Lib/FATFs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 2223               		.loc 1 2206 0
 2224 0028 8BE0      		ldi r24,lo8(11)
 2225               	.LVL182:
2228:Lib/FATFs/ff.c **** }
 2226               		.loc 1 2228 0
 2227 002a 0895      		ret
 2228               		.cfi_endproc
 2229               	.LFE159:
 2231               		.section	.rodata.str1.1,"aMS",@progbits,1
 2232               	.LC0:
 2233 0000 222A 2B2C 		.string	"\"*+,:;<=>?[]|\177"
 2233      3A3B 3C3D 
 2233      3E3F 5B5D 
 2233      7C7F 00
 2234               		.section	.text.f_open,"ax",@progbits
 2235               	.global	f_open
 2237               	f_open:
 2238               	.LFB160:
2229:Lib/FATFs/ff.c **** 
2230:Lib/FATFs/ff.c **** 
2231:Lib/FATFs/ff.c **** 
2232:Lib/FATFs/ff.c **** 
2233:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2234:Lib/FATFs/ff.c **** /* Open or Create a File                                                 */
2235:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2236:Lib/FATFs/ff.c **** 
2237:Lib/FATFs/ff.c **** FRESULT f_open (
2238:Lib/FATFs/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
2239:Lib/FATFs/ff.c **** 	const TCHAR *path,	/* Pointer to the file name */
2240:Lib/FATFs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2241:Lib/FATFs/ff.c **** )
2242:Lib/FATFs/ff.c **** {
 2239               		.loc 1 2242 0
 2240               		.cfi_startproc
 2241               	.LVL183:
 2242 0000 2F92      		push r2
 2243               	.LCFI79:
 2244               		.cfi_def_cfa_offset 3
 2245               		.cfi_offset 2, -2
 2246 0002 3F92      		push r3
 2247               	.LCFI80:
 2248               		.cfi_def_cfa_offset 4
 2249               		.cfi_offset 3, -3
 2250 0004 4F92      		push r4
 2251               	.LCFI81:
 2252               		.cfi_def_cfa_offset 5
 2253               		.cfi_offset 4, -4
 2254 0006 5F92      		push r5
 2255               	.LCFI82:
 2256               		.cfi_def_cfa_offset 6
 2257               		.cfi_offset 5, -5
 2258 0008 6F92      		push r6
 2259               	.LCFI83:
 2260               		.cfi_def_cfa_offset 7
 2261               		.cfi_offset 6, -6
 2262 000a 7F92      		push r7
 2263               	.LCFI84:
 2264               		.cfi_def_cfa_offset 8
 2265               		.cfi_offset 7, -7
 2266 000c 8F92      		push r8
 2267               	.LCFI85:
 2268               		.cfi_def_cfa_offset 9
 2269               		.cfi_offset 8, -8
 2270 000e 9F92      		push r9
 2271               	.LCFI86:
 2272               		.cfi_def_cfa_offset 10
 2273               		.cfi_offset 9, -9
 2274 0010 AF92      		push r10
 2275               	.LCFI87:
 2276               		.cfi_def_cfa_offset 11
 2277               		.cfi_offset 10, -10
 2278 0012 BF92      		push r11
 2279               	.LCFI88:
 2280               		.cfi_def_cfa_offset 12
 2281               		.cfi_offset 11, -11
 2282 0014 CF92      		push r12
 2283               	.LCFI89:
 2284               		.cfi_def_cfa_offset 13
 2285               		.cfi_offset 12, -12
 2286 0016 DF92      		push r13
 2287               	.LCFI90:
 2288               		.cfi_def_cfa_offset 14
 2289               		.cfi_offset 13, -13
 2290 0018 EF92      		push r14
 2291               	.LCFI91:
 2292               		.cfi_def_cfa_offset 15
 2293               		.cfi_offset 14, -14
 2294 001a FF92      		push r15
 2295               	.LCFI92:
 2296               		.cfi_def_cfa_offset 16
 2297               		.cfi_offset 15, -15
 2298 001c 0F93      		push r16
 2299               	.LCFI93:
 2300               		.cfi_def_cfa_offset 17
 2301               		.cfi_offset 16, -16
 2302 001e 1F93      		push r17
 2303               	.LCFI94:
 2304               		.cfi_def_cfa_offset 18
 2305               		.cfi_offset 17, -17
 2306 0020 CF93      		push r28
 2307               	.LCFI95:
 2308               		.cfi_def_cfa_offset 19
 2309               		.cfi_offset 28, -18
 2310 0022 DF93      		push r29
 2311               	.LCFI96:
 2312               		.cfi_def_cfa_offset 20
 2313               		.cfi_offset 29, -19
 2314 0024 CDB7      		in r28,__SP_L__
 2315 0026 DEB7      		in r29,__SP_H__
 2316               	.LCFI97:
 2317               		.cfi_def_cfa_register 28
 2318 0028 EA97      		sbiw r28,58
 2319               	.LCFI98:
 2320               		.cfi_def_cfa_offset 78
 2321 002a 0FB6      		in __tmp_reg__,__SREG__
 2322 002c F894      		cli
 2323 002e DEBF      		out __SP_H__,r29
 2324 0030 0FBE      		out __SREG__,__tmp_reg__
 2325 0032 CDBF      		out __SP_L__,r28
 2326               	/* prologue: function */
 2327               	/* frame size = 58 */
 2328               	/* stack size = 76 */
 2329               	.L__stack_usage = 76
 2330 0034 98A7      		std Y+40,r25
 2331 0036 8FA3      		std Y+39,r24
 2332 0038 6B01      		movw r12,r22
 2333 003a 4EA7      		std Y+46,r20
2243:Lib/FATFs/ff.c **** 	FRESULT res;
2244:Lib/FATFs/ff.c **** 	DIR dj;
2245:Lib/FATFs/ff.c **** 	BYTE *dir;
2246:Lib/FATFs/ff.c **** 	DEF_NAMEBUF;
2247:Lib/FATFs/ff.c **** 
2248:Lib/FATFs/ff.c **** 
2249:Lib/FATFs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 2334               		.loc 1 2249 0
 2335 003c DC01      		movw r26,r24
 2336 003e 1D92      		st X+,__zero_reg__
 2337 0040 1C92      		st X,__zero_reg__
2250:Lib/FATFs/ff.c **** 
2251:Lib/FATFs/ff.c **** #if !_FS_READONLY
2252:Lib/FATFs/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 2338               		.loc 1 2252 0
 2339 0042 4F71      		andi r20,lo8(31)
 2340               	.LVL184:
 2341 0044 49A7      		std Y+41,r20
 2342               	.LVL185:
 2343               	.LBB31:
 2344               	.LBB32:
2016:Lib/FATFs/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 2345               		.loc 1 2016 0
 2346 0046 FB01      		movw r30,r22
 2347 0048 8081      		ld r24,Z
 2348               	.LVL186:
 2349 004a 90E0      		ldi r25,0
 2350 004c C097      		sbiw r24,48
 2351               	.LVL187:
2017:Lib/FATFs/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
 2352               		.loc 1 2017 0
 2353 004e 8A30      		cpi r24,10
 2354 0050 9105      		cpc r25,__zero_reg__
 2355 0052 00F4      		brsh .L149
 2356 0054 2181      		ldd r18,Z+1
 2357 0056 2A33      		cpi r18,lo8(58)
 2358 0058 01F4      		brne .L149
2018:Lib/FATFs/ff.c **** 	} else {							/* No drive number is given */
 2359               		.loc 1 2018 0
 2360 005a F2E0      		ldi r31,2
 2361 005c CF0E      		add r12,r31
 2362 005e D11C      		adc r13,__zero_reg__
 2363               	.LVL188:
2028:Lib/FATFs/ff.c **** 		return FR_INVALID_DRIVE;
 2364               		.loc 1 2028 0
 2365 0060 892B      		or r24,r25
 2366 0062 01F0      		breq .+2
 2367 0064 00C0      		rjmp .L220
 2368               	.L149:
 2369               	.LVL189:
2030:Lib/FATFs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 2370               		.loc 1 2030 0
 2371 0066 E090 0000 		lds r14,FatFs
 2372 006a F090 0000 		lds r15,FatFs+1
 2373               	.LVL190:
 2374 006e FA82      		std Y+2,r15
 2375 0070 E982      		std Y+1,r14
2031:Lib/FATFs/ff.c **** 
 2376               		.loc 1 2031 0
 2377 0072 E114      		cp r14,__zero_reg__
 2378 0074 F104      		cpc r15,__zero_reg__
 2379 0076 01F4      		brne .+2
 2380 0078 00C0      		rjmp .L221
 2381               	.LBE32:
 2382               	.LBE31:
2253:Lib/FATFs/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 2383               		.loc 1 2253 0
 2384 007a 1EA5      		ldd r17,Y+46
 2385 007c 1E71      		andi r17,lo8(30)
 2386               	.LBB35:
 2387               	.LBB33:
2035:Lib/FATFs/ff.c **** 		stat = disk_status(fs->drv);
 2388               		.loc 1 2035 0
 2389 007e D701      		movw r26,r14
 2390               	.LVL191:
 2391 0080 8C91      		ld r24,X
 2392 0082 8823      		tst r24
 2393 0084 01F0      		breq .L151
2036:Lib/FATFs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 2394               		.loc 1 2036 0
 2395 0086 1196      		adiw r26,1
 2396 0088 8C91      		ld r24,X
 2397 008a 0E94 0000 		call disk_status
 2398               	.LVL192:
2037:Lib/FATFs/ff.c **** #if !_FS_READONLY
 2399               		.loc 1 2037 0
 2400 008e 80FD      		sbrc r24,0
 2401 0090 00C0      		rjmp .L151
2039:Lib/FATFs/ff.c **** 				return FR_WRITE_PROTECTED;
 2402               		.loc 1 2039 0
 2403 0092 1123      		tst r17
 2404 0094 01F4      		brne .+2
 2405 0096 00C0      		rjmp .L223
 2406 0098 82FD      		sbrc r24,2
 2407 009a 00C0      		rjmp .L225
 2408 009c 00C0      		rjmp .L223
 2409               	.LVL193:
 2410               	.L151:
2049:Lib/FATFs/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 2411               		.loc 1 2049 0
 2412 009e F701      		movw r30,r14
 2413 00a0 1082      		st Z,__zero_reg__
2050:Lib/FATFs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 2414               		.loc 1 2050 0
 2415 00a2 1182      		std Z+1,__zero_reg__
2051:Lib/FATFs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 2416               		.loc 1 2051 0
 2417 00a4 80E0      		ldi r24,0
 2418 00a6 0E94 0000 		call disk_initialize
 2419               	.LVL194:
2052:Lib/FATFs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 2420               		.loc 1 2052 0
 2421 00aa 80FD      		sbrc r24,0
 2422 00ac 00C0      		rjmp .L224
2059:Lib/FATFs/ff.c **** 		return FR_WRITE_PROTECTED;
 2423               		.loc 1 2059 0
 2424 00ae 1123      		tst r17
 2425 00b0 01F0      		breq .L152
 2426 00b2 82FD      		sbrc r24,2
 2427 00b4 00C0      		rjmp .L225
 2428               	.L152:
 2429               	.LVL195:
2063:Lib/FATFs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 2430               		.loc 1 2063 0
 2431 00b6 40E0      		ldi r20,0
 2432 00b8 50E0      		ldi r21,0
 2433 00ba BA01      		movw r22,r20
 2434 00bc C701      		movw r24,r14
 2435               	.LVL196:
 2436 00be 0E94 0000 		call check_fs
 2437               	.LVL197:
2064:Lib/FATFs/ff.c **** 		/* Check the partition listed in top of the partition table */
 2438               		.loc 1 2064 0
 2439 00c2 8130      		cpi r24,lo8(1)
 2440 00c4 01F4      		brne .L226
 2441               	.LVL198:
2067:Lib/FATFs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 2442               		.loc 1 2067 0
 2443 00c6 F701      		movw r30,r14
 2444 00c8 E051      		subi r30,16
 2445 00ca FE4F      		sbci r31,-2
 2446 00cc 8081      		ld r24,Z
 2447               	.LVL199:
 2448 00ce 8823      		tst r24
 2449 00d0 01F4      		brne .+2
 2450 00d2 00C0      		rjmp .L255
2068:Lib/FATFs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
 2451               		.loc 1 2068 0
 2452 00d4 3496      		adiw r30,4
 2453 00d6 4080      		ld r4,Z
 2454 00d8 5180      		ldd r5,Z+1
 2455 00da 6280      		ldd r6,Z+2
 2456 00dc 7380      		ldd r7,Z+3
 2457 00de 4AA6      		std Y+42,r4
 2458 00e0 5BA6      		std Y+43,r5
 2459 00e2 6CA6      		std Y+44,r6
 2460 00e4 7DA6      		std Y+45,r7
 2461               	.LVL200:
2069:Lib/FATFs/ff.c **** 		}
 2462               		.loc 1 2069 0
 2463 00e6 B301      		movw r22,r6
 2464 00e8 A201      		movw r20,r4
 2465 00ea C701      		movw r24,r14
 2466 00ec 0E94 0000 		call check_fs
 2467               	.LVL201:
 2468 00f0 00C0      		rjmp .L153
 2469               	.LVL202:
 2470               	.L226:
2063:Lib/FATFs/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 2471               		.loc 1 2063 0
 2472 00f2 1AA6      		std Y+42,__zero_reg__
 2473 00f4 1BA6      		std Y+43,__zero_reg__
 2474 00f6 1CA6      		std Y+44,__zero_reg__
 2475 00f8 1DA6      		std Y+45,__zero_reg__
 2476               	.LVL203:
 2477               	.L153:
2072:Lib/FATFs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 2478               		.loc 1 2072 0
 2479 00fa 8330      		cpi r24,lo8(3)
 2480 00fc 01F4      		brne .+2
 2481 00fe 00C0      		rjmp .L228
2073:Lib/FATFs/ff.c **** 
 2482               		.loc 1 2073 0
 2483 0100 8111      		cpse r24,__zero_reg__
 2484 0102 00C0      		rjmp .L255
2077:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
 2485               		.loc 1 2077 0
 2486 0104 D701      		movw r26,r14
 2487 0106 D996      		adiw r26,57
 2488 0108 8D91      		ld r24,X+
 2489 010a 9C91      		ld r25,X
 2490 010c DA97      		sbiw r26,57+1
 2491               	.LVL204:
 2492 010e 8115      		cp r24,__zero_reg__
 2493 0110 9240      		sbci r25,2
 2494 0112 01F0      		breq .+2
 2495 0114 00C0      		rjmp .L255
2080:Lib/FATFs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 2496               		.loc 1 2080 0
 2497 0116 F701      		movw r30,r14
 2498 0118 EC5B      		subi r30,-68
 2499 011a FF4F      		sbci r31,-1
 2500 011c 4080      		ld r4,Z
 2501 011e 5180      		ldd r5,Z+1
 2502 0120 3201      		movw r6,r4
 2503 0122 812C      		mov r8,__zero_reg__
 2504 0124 912C      		mov r9,__zero_reg__
 2505 0126 6FAA      		std Y+55,r6
 2506 0128 78AE      		std Y+56,r7
 2507 012a 89AE      		std Y+57,r8
 2508 012c 9AAE      		std Y+58,r9
 2509               	.LVL205:
2081:Lib/FATFs/ff.c **** 	fs->fsize = fasize;
 2510               		.loc 1 2081 0
 2511 012e 6728      		or r6,r7
 2512 0130 6828      		or r6,r8
 2513 0132 6928      		or r6,r9
 2514 0134 01F4      		brne .L154
 2515 0136 3E96      		adiw r30,14
 2516 0138 8080      		ld r8,Z
 2517 013a 9180      		ldd r9,Z+1
 2518 013c A280      		ldd r10,Z+2
 2519 013e B380      		ldd r11,Z+3
 2520 0140 8FAA      		std Y+55,r8
 2521 0142 98AE      		std Y+56,r9
 2522 0144 A9AE      		std Y+57,r10
 2523 0146 BAAE      		std Y+58,r11
 2524               	.LVL206:
 2525               	.L154:
2082:Lib/FATFs/ff.c **** 
 2526               		.loc 1 2082 0
 2527 0148 4FA8      		ldd r4,Y+55
 2528 014a 58AC      		ldd r5,Y+56
 2529 014c 69AC      		ldd r6,Y+57
 2530 014e 7AAC      		ldd r7,Y+58
 2531 0150 D701      		movw r26,r14
 2532 0152 5A96      		adiw r26,26
 2533 0154 4D92      		st X+,r4
 2534 0156 5D92      		st X+,r5
 2535 0158 6D92      		st X+,r6
 2536 015a 7C92      		st X,r7
 2537 015c 5D97      		sbiw r26,26+3
2084:Lib/FATFs/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 2538               		.loc 1 2084 0
 2539 015e DE96      		adiw r26,62
 2540 0160 AC91      		ld r26,X
 2541               	.LVL207:
 2542 0162 F701      		movw r30,r14
 2543 0164 A383      		std Z+3,r26
2085:Lib/FATFs/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
 2544               		.loc 1 2085 0
 2545 0166 8FEF      		ldi r24,lo8(-1)
 2546 0168 8A0F      		add r24,r26
 2547 016a 8230      		cpi r24,lo8(2)
 2548 016c 00F0      		brlo .+2
 2549 016e 00C0      		rjmp .L255
2086:Lib/FATFs/ff.c **** 
 2550               		.loc 1 2086 0
 2551 0170 B0E0      		ldi r27,0
 2552 0172 A301      		movw r20,r6
 2553 0174 9201      		movw r18,r4
 2554 0176 0E94 0000 		call __muluhisi3
 2555 017a 6FA7      		std Y+47,r22
 2556 017c 78AB      		std Y+48,r23
 2557 017e 89AB      		std Y+49,r24
 2558 0180 9AAB      		std Y+50,r25
 2559               	.LVL208:
2088:Lib/FATFs/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 2560               		.loc 1 2088 0
 2561 0182 23AD      		ldd r18,Z+59
 2562               	.LVL209:
 2563 0184 2283      		std Z+2,r18
2089:Lib/FATFs/ff.c **** 
 2564               		.loc 1 2089 0
 2565 0186 2223      		tst r18
 2566 0188 01F4      		brne .+2
 2567 018a 00C0      		rjmp .L255
 2568 018c 822F      		mov r24,r18
 2569 018e 90E0      		ldi r25,0
 2570 0190 AC01      		movw r20,r24
 2571 0192 4150      		subi r20,1
 2572 0194 5109      		sbc r21,__zero_reg__
 2573 0196 8423      		and r24,r20
 2574 0198 9523      		and r25,r21
 2575 019a 892B      		or r24,r25
 2576 019c 01F0      		breq .+2
 2577 019e 00C0      		rjmp .L255
2091:Lib/FATFs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 2578               		.loc 1 2091 0
 2579 01a0 FF96      		adiw r30,63
 2580 01a2 2080      		ld r2,Z
 2581 01a4 3180      		ldd r3,Z+1
 2582 01a6 D701      		movw r26,r14
 2583 01a8 1996      		adiw r26,8+1
 2584 01aa 3C92      		st X,r3
 2585 01ac 2E92      		st -X,r2
 2586 01ae 1897      		sbiw r26,8
2092:Lib/FATFs/ff.c **** 
 2587               		.loc 1 2092 0
 2588 01b0 C101      		movw r24,r2
 2589 01b2 8F70      		andi r24,15
 2590 01b4 9927      		clr r25
 2591 01b6 892B      		or r24,r25
 2592 01b8 01F0      		breq .+2
 2593 01ba 00C0      		rjmp .L255
2094:Lib/FATFs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 2594               		.loc 1 2094 0
 2595 01bc 3296      		adiw r30,2
 2596 01be 6081      		ld r22,Z
 2597 01c0 7181      		ldd r23,Z+1
 2598               	.LVL210:
 2599 01c2 CB01      		movw r24,r22
 2600 01c4 A0E0      		ldi r26,0
 2601 01c6 B0E0      		ldi r27,0
 2602               	.LVL211:
2095:Lib/FATFs/ff.c **** 
 2603               		.loc 1 2095 0
 2604 01c8 0097      		sbiw r24,0
 2605 01ca A105      		cpc r26,__zero_reg__
 2606 01cc B105      		cpc r27,__zero_reg__
 2607 01ce 01F4      		brne .L155
 2608 01d0 3D96      		adiw r30,13
 2609 01d2 8081      		ld r24,Z
 2610 01d4 9181      		ldd r25,Z+1
 2611 01d6 A281      		ldd r26,Z+2
 2612 01d8 B381      		ldd r27,Z+3
 2613               	.LVL212:
 2614               	.L155:
2097:Lib/FATFs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 2615               		.loc 1 2097 0
 2616 01da F701      		movw r30,r14
 2617 01dc 44AD      		ldd r20,Z+60
 2618 01de 55AD      		ldd r21,Z+61
 2619               	.LVL213:
2098:Lib/FATFs/ff.c **** 
 2620               		.loc 1 2098 0
 2621 01e0 4115      		cp r20,__zero_reg__
 2622 01e2 5105      		cpc r21,__zero_reg__
 2623 01e4 01F4      		brne .+2
 2624 01e6 00C0      		rjmp .L255
2101:Lib/FATFs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 2625               		.loc 1 2101 0
 2626 01e8 2A01      		movw r4,r20
 2627 01ea 612C      		mov r6,__zero_reg__
 2628 01ec 712C      		mov r7,__zero_reg__
 2629 01ee 4BAA      		std Y+51,r4
 2630 01f0 5CAA      		std Y+52,r5
 2631 01f2 6DAA      		std Y+53,r6
 2632 01f4 7EAA      		std Y+54,r7
 2633 01f6 A101      		movw r20,r2
 2634               	.LVL214:
 2635 01f8 64E0      		ldi r22,4
 2636               		1:
 2637 01fa 5695      		lsr r21
 2638 01fc 4795      		ror r20
 2639 01fe 6A95      		dec r22
 2640 0200 01F4      		brne 1b
 2641 0202 5301      		movw r10,r6
 2642 0204 4201      		movw r8,r4
 2643 0206 840E      		add r8,r20
 2644 0208 951E      		adc r9,r21
 2645 020a A11C      		adc r10,__zero_reg__
 2646 020c B11C      		adc r11,__zero_reg__
 2647 020e 4FA4      		ldd r4,Y+47
 2648 0210 58A8      		ldd r5,Y+48
 2649 0212 69A8      		ldd r6,Y+49
 2650 0214 7AA8      		ldd r7,Y+50
 2651               	.LVL215:
 2652 0216 480C      		add r4,r8
 2653 0218 591C      		adc r5,r9
 2654 021a 6A1C      		adc r6,r10
 2655 021c 7B1C      		adc r7,r11
 2656 021e 4BA2      		std Y+35,r4
 2657 0220 5CA2      		std Y+36,r5
 2658 0222 6DA2      		std Y+37,r6
 2659 0224 7EA2      		std Y+38,r7
 2660               	.LVL216:
2102:Lib/FATFs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 2661               		.loc 1 2102 0
 2662 0226 8415      		cp r24,r4
 2663 0228 9505      		cpc r25,r5
 2664 022a A605      		cpc r26,r6
 2665 022c B705      		cpc r27,r7
 2666 022e 00F4      		brsh .+2
 2667 0230 00C0      		rjmp .L255
2103:Lib/FATFs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 2668               		.loc 1 2103 0
 2669 0232 BC01      		movw r22,r24
 2670 0234 CD01      		movw r24,r26
 2671 0236 6419      		sub r22,r4
 2672 0238 7509      		sbc r23,r5
 2673 023a 8609      		sbc r24,r6
 2674 023c 9709      		sbc r25,r7
 2675 023e 30E0      		ldi r19,0
 2676 0240 40E0      		ldi r20,0
 2677 0242 50E0      		ldi r21,0
 2678 0244 0E94 0000 		call __udivmodsi4
 2679               	.LVL217:
2104:Lib/FATFs/ff.c **** 	fmt = FS_FAT12;
 2680               		.loc 1 2104 0
 2681 0248 2115      		cp r18,__zero_reg__
 2682 024a 3105      		cpc r19,__zero_reg__
 2683 024c 4105      		cpc r20,__zero_reg__
 2684 024e 5105      		cpc r21,__zero_reg__
 2685 0250 01F4      		brne .+2
 2686 0252 00C0      		rjmp .L255
 2687               	.LVL218:
 2688 0254 4901      		movw r8,r18
 2689 0256 5A01      		movw r10,r20
 2690 0258 62E0      		ldi r22,2
 2691 025a 860E      		add r8,r22
 2692 025c 911C      		adc r9,__zero_reg__
 2693 025e A11C      		adc r10,__zero_reg__
 2694 0260 B11C      		adc r11,__zero_reg__
 2695 0262 8AA5      		ldd r24,Y+42
 2696 0264 9BA5      		ldd r25,Y+43
 2697 0266 ACA5      		ldd r26,Y+44
 2698 0268 BDA5      		ldd r27,Y+45
 2699               	.LVL219:
 2700 026a 480E      		add r4,r24
 2701 026c 591E      		adc r5,r25
 2702 026e 6A1E      		adc r6,r26
 2703 0270 7B1E      		adc r7,r27
 2704               	.LVL220:
 2705 0272 4BA2      		std Y+35,r4
 2706 0274 5CA2      		std Y+36,r5
 2707 0276 6DA2      		std Y+37,r6
 2708 0278 7EA2      		std Y+38,r7
 2709               	.LVL221:
 2710 027a 8BA9      		ldd r24,Y+51
 2711 027c 9CA9      		ldd r25,Y+52
 2712 027e ADA9      		ldd r26,Y+53
 2713 0280 BEA9      		ldd r27,Y+54
 2714 0282 4AA4      		ldd r4,Y+42
 2715 0284 5BA4      		ldd r5,Y+43
 2716 0286 6CA4      		ldd r6,Y+44
 2717 0288 7DA4      		ldd r7,Y+45
 2718 028a 840D      		add r24,r4
 2719 028c 951D      		adc r25,r5
 2720 028e A61D      		adc r26,r6
 2721 0290 B71D      		adc r27,r7
2106:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 2722               		.loc 1 2106 0
 2723 0292 263F      		cpi r18,-10
 2724 0294 6FE0      		ldi r22,15
 2725 0296 3607      		cpc r19,r22
 2726 0298 4105      		cpc r20,__zero_reg__
 2727 029a 5105      		cpc r21,__zero_reg__
 2728 029c 00F0      		brlo .L238
 2729               	.LVL222:
2107:Lib/FATFs/ff.c **** 
 2730               		.loc 1 2107 0
 2731 029e 263F      		cpi r18,-10
 2732 02a0 3F4F      		sbci r19,-1
 2733 02a2 4105      		cpc r20,__zero_reg__
 2734 02a4 5105      		cpc r21,__zero_reg__
 2735 02a6 00F4      		brsh .+2
 2736 02a8 00C0      		rjmp .L239
 2737               	.LVL223:
2110:Lib/FATFs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 2738               		.loc 1 2110 0
 2739 02aa F701      		movw r30,r14
 2740 02ac 868A      		std Z+22,r8
 2741 02ae 978A      		std Z+23,r9
 2742 02b0 A08E      		std Z+24,r10
 2743 02b2 B18E      		std Z+25,r11
2111:Lib/FATFs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 2744               		.loc 1 2111 0
 2745 02b4 4BA0      		ldd r4,Y+35
 2746 02b6 5CA0      		ldd r5,Y+36
 2747 02b8 6DA0      		ldd r6,Y+37
 2748 02ba 7EA0      		ldd r7,Y+38
 2749 02bc 46A2      		std Z+38,r4
 2750 02be 57A2      		std Z+39,r5
 2751 02c0 60A6      		std Z+40,r6
 2752 02c2 71A6      		std Z+41,r7
2112:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
 2753               		.loc 1 2112 0
 2754 02c4 868F      		std Z+30,r24
 2755 02c6 978F      		std Z+31,r25
 2756 02c8 A0A3      		std Z+32,r26
 2757 02ca B1A3      		std Z+33,r27
2114:Lib/FATFs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 2758               		.loc 1 2114 0
 2759 02cc 2328      		or r2,r3
 2760 02ce 01F0      		breq .+2
 2761 02d0 00C0      		rjmp .L255
2115:Lib/FATFs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 2762               		.loc 1 2115 0
 2763 02d2 E65A      		subi r30,-90
 2764 02d4 FF4F      		sbci r31,-1
 2765 02d6 8081      		ld r24,Z
 2766 02d8 9181      		ldd r25,Z+1
 2767 02da A281      		ldd r26,Z+2
 2768 02dc B381      		ldd r27,Z+3
 2769 02de F701      		movw r30,r14
 2770 02e0 82A3      		std Z+34,r24
 2771 02e2 93A3      		std Z+35,r25
 2772 02e4 A4A3      		std Z+36,r26
 2773 02e6 B5A3      		std Z+37,r27
2116:Lib/FATFs/ff.c **** 	} else {
 2774               		.loc 1 2116 0
 2775 02e8 42E0      		ldi r20,2
 2776               		1:
 2777 02ea 880C      		lsl r8
 2778 02ec 991C      		rol r9
 2779 02ee AA1C      		rol r10
 2780 02f0 BB1C      		rol r11
 2781 02f2 4A95      		dec r20
 2782 02f4 01F4      		brne 1b
 2783               	.LVL224:
2107:Lib/FATFs/ff.c **** 
 2784               		.loc 1 2107 0
 2785 02f6 13E0      		ldi r17,lo8(3)
 2786 02f8 00C0      		rjmp .L157
 2787               	.LVL225:
 2788               	.L238:
2105:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 2789               		.loc 1 2105 0
 2790 02fa 11E0      		ldi r17,lo8(1)
 2791               	.LVL226:
 2792               	.L156:
2110:Lib/FATFs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 2793               		.loc 1 2110 0
 2794 02fc F701      		movw r30,r14
 2795 02fe 868A      		std Z+22,r8
 2796 0300 978A      		std Z+23,r9
 2797 0302 A08E      		std Z+24,r10
 2798 0304 B18E      		std Z+25,r11
2111:Lib/FATFs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 2799               		.loc 1 2111 0
 2800 0306 4BA0      		ldd r4,Y+35
 2801 0308 5CA0      		ldd r5,Y+36
 2802 030a 6DA0      		ldd r6,Y+37
 2803 030c 7EA0      		ldd r7,Y+38
 2804 030e 46A2      		std Z+38,r4
 2805 0310 57A2      		std Z+39,r5
 2806 0312 60A6      		std Z+40,r6
 2807 0314 71A6      		std Z+41,r7
2112:Lib/FATFs/ff.c **** 	if (fmt == FS_FAT32) {
 2808               		.loc 1 2112 0
 2809 0316 868F      		std Z+30,r24
 2810 0318 978F      		std Z+31,r25
 2811 031a A0A3      		std Z+32,r26
 2812 031c B1A3      		std Z+33,r27
2118:Lib/FATFs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 2813               		.loc 1 2118 0
 2814 031e 2328      		or r2,r3
 2815 0320 01F4      		brne .+2
 2816 0322 00C0      		rjmp .L255
2119:Lib/FATFs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 2817               		.loc 1 2119 0
 2818 0324 4FA4      		ldd r4,Y+47
 2819 0326 58A8      		ldd r5,Y+48
 2820 0328 69A8      		ldd r6,Y+49
 2821 032a 7AA8      		ldd r7,Y+50
 2822 032c 840D      		add r24,r4
 2823 032e 951D      		adc r25,r5
 2824 0330 A61D      		adc r26,r6
 2825 0332 B71D      		adc r27,r7
 2826 0334 F701      		movw r30,r14
 2827 0336 82A3      		std Z+34,r24
 2828 0338 93A3      		std Z+35,r25
 2829 033a A4A3      		std Z+36,r26
 2830 033c B5A3      		std Z+37,r27
2121:Lib/FATFs/ff.c **** 	}
 2831               		.loc 1 2121 0
 2832 033e 1230      		cpi r17,lo8(2)
 2833 0340 01F0      		breq .+2
 2834 0342 00C0      		rjmp .L158
 2835 0344 880C      		lsl r8
 2836 0346 991C      		rol r9
 2837 0348 AA1C      		rol r10
 2838 034a BB1C      		rol r11
 2839               	.LVL227:
 2840               	.L157:
2123:Lib/FATFs/ff.c **** 		return FR_NO_FILESYSTEM;
 2841               		.loc 1 2123 0
 2842 034c 2FEF      		ldi r18,-1
 2843 034e 820E      		add r8,r18
 2844 0350 21E0      		ldi r18,1
 2845 0352 921E      		adc r9,r18
 2846 0354 A11C      		adc r10,__zero_reg__
 2847 0356 B11C      		adc r11,__zero_reg__
 2848               	.LVL228:
 2849 0358 09E0      		ldi r16,9
 2850               		1:
 2851 035a B694      		lsr r11
 2852 035c A794      		ror r10
 2853 035e 9794      		ror r9
 2854 0360 8794      		ror r8
 2855 0362 0A95      		dec r16
 2856 0364 01F4      		brne 1b
 2857               	.LVL229:
 2858 0366 4FA8      		ldd r4,Y+55
 2859 0368 58AC      		ldd r5,Y+56
 2860 036a 69AC      		ldd r6,Y+57
 2861 036c 7AAC      		ldd r7,Y+58
 2862 036e 4814      		cp r4,r8
 2863 0370 5904      		cpc r5,r9
 2864 0372 6A04      		cpc r6,r10
 2865 0374 7B04      		cpc r7,r11
 2866 0376 00F4      		brsh .+2
 2867 0378 00C0      		rjmp .L255
2128:Lib/FATFs/ff.c **** 	fs->last_clust = 0;
 2868               		.loc 1 2128 0
 2869 037a 8FEF      		ldi r24,lo8(-1)
 2870 037c 9FEF      		ldi r25,lo8(-1)
 2871 037e DC01      		movw r26,r24
 2872 0380 F701      		movw r30,r14
 2873 0382 8687      		std Z+14,r24
 2874 0384 9787      		std Z+15,r25
 2875 0386 A08B      		std Z+16,r26
 2876 0388 B18B      		std Z+17,r27
2129:Lib/FATFs/ff.c **** 
 2877               		.loc 1 2129 0
 2878 038a 1286      		std Z+10,__zero_reg__
 2879 038c 1386      		std Z+11,__zero_reg__
 2880 038e 1486      		std Z+12,__zero_reg__
 2881 0390 1586      		std Z+13,__zero_reg__
2132:Lib/FATFs/ff.c **** 	 	fs->fsi_flag = 0;
 2882               		.loc 1 2132 0
 2883 0392 1330      		cpi r17,lo8(3)
 2884 0394 01F0      		breq .+2
 2885 0396 00C0      		rjmp .L160
2133:Lib/FATFs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 2886               		.loc 1 2133 0
 2887 0398 1582      		std Z+5,__zero_reg__
2134:Lib/FATFs/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 2888               		.loc 1 2134 0
 2889 039a E25A      		subi r30,-94
 2890 039c FF4F      		sbci r31,-1
 2891 039e 8081      		ld r24,Z
 2892 03a0 9181      		ldd r25,Z+1
 2893 03a2 2AA5      		ldd r18,Y+42
 2894 03a4 3BA5      		ldd r19,Y+43
 2895 03a6 4CA5      		ldd r20,Y+44
 2896 03a8 5DA5      		ldd r21,Y+45
 2897 03aa 280F      		add r18,r24
 2898 03ac 391F      		adc r19,r25
 2899 03ae 411D      		adc r20,__zero_reg__
 2900 03b0 511D      		adc r21,__zero_reg__
 2901 03b2 F701      		movw r30,r14
 2902 03b4 228B      		std Z+18,r18
 2903 03b6 338B      		std Z+19,r19
 2904 03b8 448B      		std Z+20,r20
 2905 03ba 558B      		std Z+21,r21
2135:Lib/FATFs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 2906               		.loc 1 2135 0
 2907 03bc 01E0      		ldi r16,lo8(1)
 2908 03be B701      		movw r22,r14
 2909 03c0 625D      		subi r22,-46
 2910 03c2 7F4F      		sbci r23,-1
 2911 03c4 8181      		ldd r24,Z+1
 2912 03c6 0E94 0000 		call disk_read
 2913               	.LVL230:
 2914 03ca 8111      		cpse r24,__zero_reg__
 2915 03cc 00C0      		rjmp .L160
2136:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 2916               		.loc 1 2136 0
 2917 03ce F701      		movw r30,r14
 2918 03d0 E45D      		subi r30,-44
 2919 03d2 FD4F      		sbci r31,-3
2135:Lib/FATFs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 2920               		.loc 1 2135 0
 2921 03d4 8081      		ld r24,Z
 2922 03d6 9181      		ldd r25,Z+1
 2923 03d8 8535      		cpi r24,85
 2924 03da 9A4A      		sbci r25,-86
 2925 03dc 01F4      		brne .L160
2136:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 2926               		.loc 1 2136 0
 2927 03de F701      		movw r30,r14
 2928 03e0 86A5      		ldd r24,Z+46
 2929 03e2 97A5      		ldd r25,Z+47
 2930 03e4 A0A9      		ldd r26,Z+48
 2931 03e6 B1A9      		ldd r27,Z+49
 2932 03e8 8235      		cpi r24,82
 2933 03ea 9245      		sbci r25,82
 2934 03ec A146      		sbci r26,97
 2935 03ee B144      		sbci r27,65
 2936 03f0 01F4      		brne .L160
2138:Lib/FATFs/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 2937               		.loc 1 2138 0
 2938 03f2 F701      		movw r30,r14
 2939 03f4 EE5E      		subi r30,-18
 2940 03f6 FD4F      		sbci r31,-3
2137:Lib/FATFs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 2941               		.loc 1 2137 0
 2942 03f8 8081      		ld r24,Z
 2943 03fa 9181      		ldd r25,Z+1
 2944 03fc A281      		ldd r26,Z+2
 2945 03fe B381      		ldd r27,Z+3
 2946 0400 8237      		cpi r24,114
 2947 0402 9247      		sbci r25,114
 2948 0404 A144      		sbci r26,65
 2949 0406 B146      		sbci r27,97
 2950 0408 01F4      		brne .L160
2139:Lib/FATFs/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 2951               		.loc 1 2139 0
 2952 040a 3896      		adiw r30,8
 2953 040c 8081      		ld r24,Z
 2954 040e 9181      		ldd r25,Z+1
 2955 0410 A281      		ldd r26,Z+2
 2956 0412 B381      		ldd r27,Z+3
 2957 0414 F701      		movw r30,r14
 2958 0416 8287      		std Z+10,r24
 2959 0418 9387      		std Z+11,r25
 2960 041a A487      		std Z+12,r26
 2961 041c B587      		std Z+13,r27
2140:Lib/FATFs/ff.c **** 		}
 2962               		.loc 1 2140 0
 2963 041e EA5E      		subi r30,-22
 2964 0420 FD4F      		sbci r31,-3
 2965 0422 8081      		ld r24,Z
 2966 0424 9181      		ldd r25,Z+1
 2967 0426 A281      		ldd r26,Z+2
 2968 0428 B381      		ldd r27,Z+3
 2969 042a F701      		movw r30,r14
 2970 042c 8687      		std Z+14,r24
 2971 042e 9787      		std Z+15,r25
 2972 0430 A08B      		std Z+16,r26
 2973 0432 B18B      		std Z+17,r27
 2974               	.L160:
2144:Lib/FATFs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2975               		.loc 1 2144 0
 2976 0434 D701      		movw r26,r14
 2977 0436 1C93      		st X,r17
2145:Lib/FATFs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 2978               		.loc 1 2145 0
 2979 0438 8091 0000 		lds r24,Fsid
 2980 043c 9091 0000 		lds r25,Fsid+1
 2981 0440 0196      		adiw r24,1
 2982 0442 9093 0000 		sts Fsid+1,r25
 2983 0446 8093 0000 		sts Fsid,r24
 2984 044a 1796      		adiw r26,6+1
 2985 044c 9C93      		st X,r25
 2986 044e 8E93      		st -X,r24
 2987 0450 1697      		sbiw r26,6
2146:Lib/FATFs/ff.c **** 	fs->wflag = 0;
 2988               		.loc 1 2146 0
 2989 0452 F701      		movw r30,r14
 2990 0454 12A6      		std Z+42,__zero_reg__
 2991 0456 13A6      		std Z+43,__zero_reg__
 2992 0458 14A6      		std Z+44,__zero_reg__
 2993 045a 15A6      		std Z+45,__zero_reg__
2147:Lib/FATFs/ff.c **** #if _FS_RPATH
 2994               		.loc 1 2147 0
 2995 045c 1482      		std Z+4,__zero_reg__
 2996 045e 00C0      		rjmp .L223
 2997               	.LVL231:
 2998               	.L220:
2029:Lib/FATFs/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 2999               		.loc 1 2029 0
 3000 0460 1BE0      		ldi r17,lo8(11)
 3001 0462 00C0      		rjmp .L150
 3002               	.LVL232:
 3003               	.L221:
2031:Lib/FATFs/ff.c **** 
 3004               		.loc 1 2031 0
 3005 0464 1CE0      		ldi r17,lo8(12)
 3006 0466 00C0      		rjmp .L150
 3007               	.LVL233:
 3008               	.L223:
2042:Lib/FATFs/ff.c **** 		}
 3009               		.loc 1 2042 0
 3010 0468 10E0      		ldi r17,0
 3011 046a 00C0      		rjmp .L150
 3012               	.LVL234:
 3013               	.L224:
2053:Lib/FATFs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
 3014               		.loc 1 2053 0
 3015 046c 13E0      		ldi r17,lo8(3)
 3016 046e 00C0      		rjmp .L150
 3017               	.L225:
2060:Lib/FATFs/ff.c **** #endif
 3018               		.loc 1 2060 0
 3019 0470 1AE0      		ldi r17,lo8(10)
 3020 0472 00C0      		rjmp .L150
 3021               	.LVL235:
 3022               	.L228:
2072:Lib/FATFs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 3023               		.loc 1 2072 0
 3024 0474 11E0      		ldi r17,lo8(1)
 3025 0476 00C0      		rjmp .L150
 3026               	.LVL236:
 3027               	.L255:
2118:Lib/FATFs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 3028               		.loc 1 2118 0
 3029 0478 1DE0      		ldi r17,lo8(13)
 3030               	.LVL237:
 3031               	.L150:
 3032               	.LBE33:
 3033               	.LBE35:
2254:Lib/FATFs/ff.c **** #else
2255:Lib/FATFs/ff.c **** 	mode &= FA_READ;
2256:Lib/FATFs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2257:Lib/FATFs/ff.c **** #endif
2258:Lib/FATFs/ff.c **** 	INIT_BUF(dj);
 3034               		.loc 1 2258 0
 3035 047a CE01      		movw r24,r28
 3036 047c 4796      		adiw r24,23
 3037 047e 9E8B      		std Y+22,r25
 3038 0480 8D8B      		std Y+21,r24
2259:Lib/FATFs/ff.c **** 	if (res == FR_OK)
 3039               		.loc 1 2259 0
 3040 0482 1111      		cpse r17,__zero_reg__
 3041 0484 00C0      		rjmp .L162
 3042               	.LVL238:
 3043               	.LBB36:
 3044               	.LBB37:
1928:Lib/FATFs/ff.c **** 		path++;
 3045               		.loc 1 1928 0
 3046 0486 D601      		movw r26,r12
 3047 0488 8C91      		ld r24,X
 3048 048a 8F32      		cpi r24,lo8(47)
 3049 048c 01F0      		breq .L163
 3050 048e 8C35      		cpi r24,lo8(92)
 3051 0490 01F4      		brne .L164
 3052               	.L163:
1929:Lib/FATFs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
 3053               		.loc 1 1929 0
 3054 0492 BFEF      		ldi r27,-1
 3055 0494 CB1A      		sub r12,r27
 3056 0496 DB0A      		sbc r13,r27
 3057               	.LVL239:
 3058               	.L164:
1930:Lib/FATFs/ff.c **** #endif
 3059               		.loc 1 1930 0
 3060 0498 1F82      		std Y+7,__zero_reg__
 3061 049a 1886      		std Y+8,__zero_reg__
 3062 049c 1986      		std Y+9,__zero_reg__
 3063 049e 1A86      		std Y+10,__zero_reg__
1933:Lib/FATFs/ff.c **** 		res = dir_sdi(dj, 0);
 3064               		.loc 1 1933 0
 3065 04a0 F601      		movw r30,r12
 3066 04a2 8081      		ld r24,Z
 3067 04a4 8032      		cpi r24,lo8(32)
 3068 04a6 00F0      		brlo .L165
 3069               	.LBB38:
 3070               	.LBB39:
 3071               	.LBB40:
 3072               	.LBB41:
 542:Lib/FATFs/ff.c **** }
 3073               		.loc 1 542 0
 3074 04a8 B0E2      		ldi r27,lo8(32)
 3075 04aa EB2E      		mov r14,r27
 3076               	.LBE41:
 3077               	.LBE40:
1810:Lib/FATFs/ff.c **** 
 3078               		.loc 1 1810 0
 3079 04ac 15E0      		ldi r17,lo8(5)
 3080 04ae F12E      		mov r15,r17
 3081 04b0 00C0      		rjmp .L166
 3082               	.L165:
 3083               	.LBE39:
 3084               	.LBE38:
1934:Lib/FATFs/ff.c **** 		dj->dir = 0;
 3085               		.loc 1 1934 0
 3086 04b2 CE01      		movw r24,r28
 3087 04b4 0196      		adiw r24,1
 3088 04b6 0E94 0000 		call dir_sdi.constprop.1
 3089               	.LVL240:
 3090 04ba 182F      		mov r17,r24
 3091               	.LVL241:
1935:Lib/FATFs/ff.c **** 
 3092               		.loc 1 1935 0
 3093 04bc 1C8A      		std Y+20,__zero_reg__
 3094 04be 1B8A      		std Y+19,__zero_reg__
 3095 04c0 00C0      		rjmp .L162
 3096               	.LVL242:
 3097               	.L327:
 3098               	.LBB52:
 3099               	.LBB48:
 3100               	.LBB44:
 3101               	.LBB42:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 3102               		.loc 1 541 0
 3103 04c2 80E0      		ldi r24,0
 3104 04c4 90E0      		ldi r25,0
 3105               	.LVL243:
 3106 04c6 60E0      		ldi r22,0
 3107 04c8 70E0      		ldi r23,0
 3108 04ca 48E0      		ldi r20,lo8(8)
 3109 04cc 50E0      		ldi r21,0
 3110 04ce 00E0      		ldi r16,0
 3111               	.LVL244:
 3112               	.L171:
 3113               	.LBE42:
 3114               	.LBE44:
1770:Lib/FATFs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 3115               		.loc 1 1770 0
 3116 04d0 9B01      		movw r18,r22
 3117 04d2 2F5F      		subi r18,-1
 3118 04d4 3F4F      		sbci r19,-1
 3119               	.LVL245:
 3120 04d6 6401      		movw r12,r8
 3121 04d8 C60E      		add r12,r22
 3122 04da D71E      		adc r13,r23
 3123 04dc D601      		movw r26,r12
 3124 04de 1C91      		ld r17,X
 3125               	.LVL246:
1771:Lib/FATFs/ff.c **** 		if (c == '.' || i >= ni) {
 3126               		.loc 1 1771 0
 3127 04e0 1132      		cpi r17,lo8(33)
 3128 04e2 00F0      		brlo .+2
 3129 04e4 00C0      		rjmp .L324
 3130               	.L172:
1806:Lib/FATFs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3131               		.loc 1 1806 0
 3132 04e6 6401      		movw r12,r8
 3133 04e8 C20E      		add r12,r18
 3134 04ea D31E      		adc r13,r19
 3135               	.LVL247:
1807:Lib/FATFs/ff.c **** 
 3136               		.loc 1 1807 0
 3137 04ec 1132      		cpi r17,lo8(33)
 3138 04ee 00F4      		brsh .+2
 3139 04f0 00C0      		rjmp .L246
 3140 04f2 20E0      		ldi r18,0
 3141               	.LVL248:
 3142               	.L183:
1809:Lib/FATFs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 3143               		.loc 1 1809 0
 3144 04f4 892B      		or r24,r25
 3145 04f6 01F4      		brne .+2
 3146 04f8 00C0      		rjmp .L247
1810:Lib/FATFs/ff.c **** 
 3147               		.loc 1 1810 0
 3148 04fa 8081      		ld r24,Z
 3149               	.LVL249:
 3150 04fc 853E      		cpi r24,lo8(-27)
 3151 04fe 01F4      		brne .L184
 3152 0500 F082      		st Z,r15
 3153               	.L184:
1812:Lib/FATFs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 3154               		.loc 1 1812 0
 3155 0502 4830      		cpi r20,8
 3156 0504 5105      		cpc r21,__zero_reg__
 3157 0506 01F4      		brne .L185
 3158 0508 000F      		lsl r16
 3159 050a 000F      		lsl r16
 3160               	.LVL250:
 3161               	.L185:
1813:Lib/FATFs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 3162               		.loc 1 1813 0
 3163 050c 802F      		mov r24,r16
 3164 050e 8370      		andi r24,lo8(3)
 3165 0510 8130      		cpi r24,lo8(1)
 3166 0512 01F4      		brne .L186
 3167 0514 2061      		ori r18,lo8(16)
 3168               	.LVL251:
 3169               	.L186:
1814:Lib/FATFs/ff.c **** 
 3170               		.loc 1 1814 0
 3171 0516 802F      		mov r24,r16
 3172 0518 8C70      		andi r24,lo8(12)
 3173 051a 8430      		cpi r24,lo8(4)
 3174 051c 01F4      		brne .L187
 3175 051e 2860      		ori r18,lo8(8)
 3176               	.LVL252:
 3177               	.L187:
1816:Lib/FATFs/ff.c **** 
 3178               		.loc 1 1816 0
 3179 0520 2387      		std Z+11,r18
 3180               	.LVL253:
 3181               	.LBE48:
 3182               	.LBE52:
 3183               	.LBB53:
 3184               	.LBB54:
1356:Lib/FATFs/ff.c **** 	if (res != FR_OK) return res;
 3185               		.loc 1 1356 0
 3186 0522 CE01      		movw r24,r28
 3187 0524 0196      		adiw r24,1
 3188 0526 0E94 0000 		call dir_sdi.constprop.1
 3189               	.LVL254:
 3190               	.L322:
 3191 052a 182F      		mov r17,r24
 3192               	.LVL255:
1357:Lib/FATFs/ff.c **** 
 3193               		.loc 1 1357 0
 3194 052c 8823      		tst r24
 3195 052e 01F4      		brne .+2
 3196 0530 00C0      		rjmp .L325
 3197               	.LVL256:
 3198               	.L188:
 3199               	.LBE54:
 3200               	.LBE53:
1942:Lib/FATFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3201               		.loc 1 1942 0
 3202 0532 ED89      		ldd r30,Y+21
 3203 0534 FE89      		ldd r31,Y+22
 3204 0536 8385      		ldd r24,Z+11
 3205               	.LVL257:
1943:Lib/FATFs/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 3206               		.loc 1 1943 0
 3207 0538 1111      		cpse r17,__zero_reg__
 3208 053a 00C0      		rjmp .L326
1955:Lib/FATFs/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 3209               		.loc 1 1955 0
 3210 053c 82FD      		sbrc r24,2
 3211 053e 00C0      		rjmp .L162
1956:Lib/FATFs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 3212               		.loc 1 1956 0
 3213 0540 EB89      		ldd r30,Y+19
 3214 0542 FC89      		ldd r31,Y+20
 3215               	.LVL258:
1957:Lib/FATFs/ff.c **** 				res = FR_NO_PATH; break;
 3216               		.loc 1 1957 0
 3217 0544 8385      		ldd r24,Z+11
 3218               	.LVL259:
 3219 0546 84FF      		sbrs r24,4
 3220 0548 00C0      		rjmp .L249
1960:Lib/FATFs/ff.c **** 		}
 3221               		.loc 1 1960 0
 3222 054a 8489      		ldd r24,Z+20
 3223 054c 9589      		ldd r25,Z+21
 3224 054e A0E0      		ldi r26,0
 3225 0550 B0E0      		ldi r27,0
 3226 0552 DC01      		movw r26,r24
 3227 0554 9927      		clr r25
 3228 0556 8827      		clr r24
 3229 0558 428D      		ldd r20,Z+26
 3230 055a 538D      		ldd r21,Z+27
 3231 055c 60E0      		ldi r22,0
 3232 055e 70E0      		ldi r23,0
 3233 0560 842B      		or r24,r20
 3234 0562 952B      		or r25,r21
 3235 0564 A62B      		or r26,r22
 3236 0566 B72B      		or r27,r23
 3237 0568 8F83      		std Y+7,r24
 3238 056a 9887      		std Y+8,r25
 3239 056c A987      		std Y+9,r26
 3240 056e BA87      		std Y+10,r27
 3241               	.LVL260:
 3242               	.L166:
 3243 0570 9601      		movw r18,r12
 3244               	.LVL261:
 3245               	.L167:
 3246 0572 4901      		movw r8,r18
 3247               	.LVL262:
 3248               	.LBB58:
 3249               	.LBB49:
1752:Lib/FATFs/ff.c **** 	sfn = dj->fn;
 3250               		.loc 1 1752 0
 3251 0574 D901      		movw r26,r18
 3252 0576 8C91      		ld r24,X
 3253 0578 2F5F      		subi r18,-1
 3254 057a 3F4F      		sbci r19,-1
 3255 057c 8F32      		cpi r24,lo8(47)
 3256 057e 01F0      		breq .L167
 3257 0580 8C35      		cpi r24,lo8(92)
 3258 0582 01F0      		breq .L167
1753:Lib/FATFs/ff.c **** 	mem_set(sfn, ' ', 11);
 3259               		.loc 1 1753 0
 3260 0584 ED89      		ldd r30,Y+21
 3261 0586 FE89      		ldd r31,Y+22
 3262               	.LVL263:
 3263 0588 CF01      		movw r24,r30
 3264 058a 9F01      		movw r18,r30
 3265 058c 255F      		subi r18,-11
 3266 058e 3F4F      		sbci r19,-1
 3267               	.LVL264:
 3268               	.L169:
 3269               	.LBB45:
 3270               	.LBB43:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 3271               		.loc 1 541 0
 3272 0590 8217      		cp r24,r18
 3273 0592 9307      		cpc r25,r19
 3274 0594 01F4      		brne .+2
 3275 0596 00C0      		rjmp .L327
 3276               	.LVL265:
 542:Lib/FATFs/ff.c **** }
 3277               		.loc 1 542 0
 3278 0598 DC01      		movw r26,r24
 3279 059a ED92      		st X+,r14
 3280               	.LVL266:
 3281 059c CD01      		movw r24,r26
 3282               	.LVL267:
 3283 059e 00C0      		rjmp .L169
 3284               	.LVL268:
 3285               	.L324:
 3286               	.LBE43:
 3287               	.LBE45:
1771:Lib/FATFs/ff.c **** 		if (c == '.' || i >= ni) {
 3288               		.loc 1 1771 0
 3289 05a0 1F32      		cpi r17,lo8(47)
 3290 05a2 01F4      		brne .+2
 3291 05a4 00C0      		rjmp .L172
 3292 05a6 1C35      		cpi r17,lo8(92)
 3293 05a8 01F4      		brne .+2
 3294 05aa 00C0      		rjmp .L172
1772:Lib/FATFs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 3295               		.loc 1 1772 0
 3296 05ac 1E32      		cpi r17,lo8(46)
 3297 05ae 01F0      		breq .L173
 3298 05b0 8417      		cp r24,r20
 3299 05b2 9507      		cpc r25,r21
 3300 05b4 00F0      		brlo .L174
 3301               	.L173:
1773:Lib/FATFs/ff.c **** 			i = 8; ni = 11;
 3302               		.loc 1 1773 0
 3303 05b6 4830      		cpi r20,8
 3304 05b8 5105      		cpc r21,__zero_reg__
 3305 05ba 01F0      		breq .+2
 3306 05bc 00C0      		rjmp .L247
 3307 05be 1E32      		cpi r17,lo8(46)
 3308 05c0 01F0      		breq .+2
 3309 05c2 00C0      		rjmp .L247
 3310               	.LVL269:
1775:Lib/FATFs/ff.c **** 		}
 3311               		.loc 1 1775 0
 3312 05c4 000F      		lsl r16
 3313 05c6 000F      		lsl r16
 3314               	.LVL270:
1774:Lib/FATFs/ff.c **** 			b <<= 2; continue;
 3315               		.loc 1 1774 0
 3316 05c8 88E0      		ldi r24,lo8(8)
 3317 05ca 90E0      		ldi r25,0
 3318 05cc 4BE0      		ldi r20,lo8(11)
 3319 05ce 50E0      		ldi r21,0
 3320               	.LVL271:
 3321               	.L175:
 3322 05d0 B901      		movw r22,r18
 3323 05d2 00C0      		rjmp .L171
 3324               	.LVL272:
 3325               	.L174:
1777:Lib/FATFs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
 3326               		.loc 1 1777 0
 3327 05d4 17FD      		sbrc r17,7
1778:Lib/FATFs/ff.c **** #ifdef _EXCVT
 3328               		.loc 1 1778 0
 3329 05d6 0360      		ori r16,lo8(3)
 3330               	.LVL273:
 3331               	.L176:
1787:Lib/FATFs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 3332               		.loc 1 1787 0
 3333 05d8 AFE7      		ldi r26,lo8(127)
 3334 05da DA2E      		mov r13,r26
 3335 05dc D10E      		add r13,r17
 3336 05de BEE1      		ldi r27,lo8(30)
 3337 05e0 BD15      		cp r27,r13
 3338 05e2 00F4      		brsh .L177
 3339 05e4 A0E2      		ldi r26,lo8(32)
 3340 05e6 DA2E      		mov r13,r26
 3341 05e8 D10E      		add r13,r17
 3342 05ea BCE1      		ldi r27,lo8(28)
 3343 05ec 4B2E      		mov r4,r27
 3344 05ee 4D14      		cp r4,r13
 3345 05f0 00F0      		brlo .L178
 3346               	.L177:
1788:Lib/FATFs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 3347               		.loc 1 1788 0
 3348 05f2 6E5F      		subi r22,-2
 3349 05f4 7F4F      		sbci r23,-1
 3350               	.LVL274:
 3351 05f6 280D      		add r18,r8
 3352 05f8 391D      		adc r19,r9
 3353 05fa D901      		movw r26,r18
 3354 05fc DC90      		ld r13,X
 3355               	.LVL275:
1789:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
 3356               		.loc 1 1789 0
 3357 05fe 20EC      		ldi r18,lo8(-64)
 3358 0600 2D0D      		add r18,r13
 3359 0602 2F33      		cpi r18,lo8(63)
 3360 0604 00F0      		brlo .L179
 3361 0606 20E8      		ldi r18,lo8(-128)
 3362 0608 2D0D      		add r18,r13
 3363 060a 2D37      		cpi r18,lo8(125)
 3364 060c 00F0      		brlo .+2
 3365 060e 00C0      		rjmp .L247
 3366               	.L179:
 3367 0610 9A01      		movw r18,r20
 3368 0612 2150      		subi r18,1
 3369 0614 3109      		sbc r19,__zero_reg__
 3370 0616 8217      		cp r24,r18
 3371 0618 9307      		cpc r25,r19
 3372 061a 00F0      		brlo .+2
 3373 061c 00C0      		rjmp .L247
 3374               	.LVL276:
1791:Lib/FATFs/ff.c **** 			sfn[i++] = d;
 3375               		.loc 1 1791 0
 3376 061e 9F01      		movw r18,r30
 3377 0620 280F      		add r18,r24
 3378 0622 391F      		adc r19,r25
 3379 0624 D901      		movw r26,r18
 3380 0626 1C93      		st X,r17
 3381               	.LVL277:
1792:Lib/FATFs/ff.c **** 		} else {						/* Single byte code */
 3382               		.loc 1 1792 0
 3383 0628 9C01      		movw r18,r24
 3384 062a 2F5F      		subi r18,-1
 3385 062c 3F4F      		sbci r19,-1
 3386 062e 2E0F      		add r18,r30
 3387 0630 3F1F      		adc r19,r31
 3388 0632 0296      		adiw r24,2
 3389               	.LVL278:
 3390 0634 D901      		movw r26,r18
 3391 0636 DC92      		st X,r13
1788:Lib/FATFs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 3392               		.loc 1 1788 0
 3393 0638 9B01      		movw r18,r22
 3394 063a 00C0      		rjmp .L175
 3395               	.LVL279:
 3396               	.L178:
1794:Lib/FATFs/ff.c **** 				return FR_INVALID_NAME;
 3397               		.loc 1 1794 0
 3398 063c A12E      		mov r10,r17
 3399 063e B12C      		mov r11,__zero_reg__
 3400               	.LVL280:
 3401 0640 60E0      		ldi r22,lo8(.LC0)
 3402 0642 C62E      		mov r12,r22
 3403 0644 60E0      		ldi r22,hi8(.LC0)
 3404 0646 D62E      		mov r13,r22
 3405               	.LVL281:
 3406               	.L181:
 3407               	.LBB46:
 3408               	.LBB47:
 558:Lib/FATFs/ff.c **** 	return *str;
 3409               		.loc 1 558 0
 3410 0648 D601      		movw r26,r12
 3411 064a 6D91      		ld r22,X+
 3412 064c 6D01      		movw r12,r26
 3413               	.LVL282:
 3414 064e 6623      		tst r22
 3415 0650 01F4      		brne .+2
 3416 0652 00C0      		rjmp .L180
 3417 0654 70E0      		ldi r23,0
 3418 0656 A616      		cp r10,r22
 3419 0658 B706      		cpc r11,r23
 3420 065a 01F4      		brne .L181
 3421 065c 00C0      		rjmp .L247
 3422               	.LVL283:
 3423               	.L246:
 3424               	.LBE47:
 3425               	.LBE46:
1807:Lib/FATFs/ff.c **** 
 3426               		.loc 1 1807 0
 3427 065e 24E0      		ldi r18,lo8(4)
 3428               	.LVL284:
 3429 0660 00C0      		rjmp .L183
 3430               	.LVL285:
 3431               	.L325:
 3432               	.LBE49:
 3433               	.LBE58:
 3434               	.LBB59:
 3435               	.LBB57:
1363:Lib/FATFs/ff.c **** 		if (res != FR_OK) break;
 3436               		.loc 1 1363 0
 3437 0662 4F85      		ldd r20,Y+15
 3438 0664 5889      		ldd r21,Y+16
 3439 0666 6989      		ldd r22,Y+17
 3440 0668 7A89      		ldd r23,Y+18
 3441 066a 8981      		ldd r24,Y+1
 3442 066c 9A81      		ldd r25,Y+2
 3443 066e 0E94 0000 		call move_window
 3444               	.LVL286:
 3445 0672 182F      		mov r17,r24
 3446               	.LVL287:
1364:Lib/FATFs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3447               		.loc 1 1364 0
 3448 0674 8111      		cpse r24,__zero_reg__
 3449 0676 00C0      		rjmp .L188
1365:Lib/FATFs/ff.c **** 		c = dir[DIR_Name];
 3450               		.loc 1 1365 0
 3451 0678 EB89      		ldd r30,Y+19
 3452 067a FC89      		ldd r31,Y+20
 3453               	.LVL288:
1367:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3454               		.loc 1 1367 0
 3455 067c 8081      		ld r24,Z
 3456 067e 8823      		tst r24
 3457 0680 01F0      		breq .L248
1390:Lib/FATFs/ff.c **** 			break;
 3458               		.loc 1 1390 0
 3459 0682 8385      		ldd r24,Z+11
 3460 0684 83FD      		sbrc r24,3
 3461 0686 00C0      		rjmp .L189
 3462               	.LVL289:
 3463 0688 AD89      		ldd r26,Y+21
 3464 068a BE89      		ldd r27,Y+22
 3465 068c 9F01      		movw r18,r30
 3466 068e 255F      		subi r18,-11
 3467 0690 3F4F      		sbci r19,-1
 3468               	.LVL290:
 3469               	.L190:
 3470               	.LBB55:
 3471               	.LBB56:
 551:Lib/FATFs/ff.c **** 	return r;
 3472               		.loc 1 551 0
 3473 0692 2E17      		cp r18,r30
 3474 0694 3F07      		cpc r19,r31
 3475 0696 01F4      		brne .+2
 3476 0698 00C0      		rjmp .L188
 3477               	.LVL291:
 3478 069a 9191      		ld r25,Z+
 3479               	.LVL292:
 3480 069c 8D91      		ld r24,X+
 3481               	.LVL293:
 3482 069e 9817      		cp r25,r24
 3483 06a0 01F0      		breq .L190
 3484               	.LVL294:
 3485               	.L189:
 3486               	.LBE56:
 3487               	.LBE55:
1393:Lib/FATFs/ff.c **** 	} while (res == FR_OK);
 3488               		.loc 1 1393 0
 3489 06a2 60E0      		ldi r22,0
 3490 06a4 70E0      		ldi r23,0
 3491 06a6 CE01      		movw r24,r28
 3492 06a8 0196      		adiw r24,1
 3493 06aa 0E94 0000 		call dir_next
 3494               	.LVL295:
 3495 06ae 00C0      		rjmp .L322
 3496               	.LVL296:
 3497               	.L248:
1367:Lib/FATFs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3498               		.loc 1 1367 0
 3499 06b0 14E0      		ldi r17,lo8(4)
 3500               	.LVL297:
 3501 06b2 00C0      		rjmp .L188
 3502               	.LVL298:
 3503               	.L326:
 3504               	.LBE57:
 3505               	.LBE59:
1944:Lib/FATFs/ff.c **** 				/* Object not found */
 3506               		.loc 1 1944 0
 3507 06b4 1430      		cpi r17,lo8(4)
 3508 06b6 01F4      		brne .L162
1951:Lib/FATFs/ff.c **** 				}
 3509               		.loc 1 1951 0
 3510 06b8 82FF      		sbrs r24,2
 3511 06ba 00C0      		rjmp .L249
 3512 06bc 00C0      		rjmp .L162
 3513               	.LVL299:
 3514               	.L247:
 3515               	.LBB60:
 3516               	.LBB50:
1809:Lib/FATFs/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 3517               		.loc 1 1809 0
 3518 06be 16E0      		ldi r17,lo8(6)
 3519 06c0 00C0      		rjmp .L162
 3520               	.LVL300:
 3521               	.L249:
 3522               	.LBE50:
 3523               	.LBE60:
1958:Lib/FATFs/ff.c **** 			}
 3524               		.loc 1 1958 0
 3525 06c2 15E0      		ldi r17,lo8(5)
 3526               	.LVL301:
 3527               	.L162:
 3528               	.LBE37:
 3529               	.LBE36:
2260:Lib/FATFs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2261:Lib/FATFs/ff.c **** 	dir = dj.dir;
 3530               		.loc 1 2261 0
 3531 06c4 2B88      		ldd r2,Y+19
 3532 06c6 3C88      		ldd r3,Y+20
 3533               	.LVL302:
2262:Lib/FATFs/ff.c **** 
2263:Lib/FATFs/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2264:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
 3534               		.loc 1 2264 0
 3535 06c8 1111      		cpse r17,__zero_reg__
 3536 06ca 00C0      		rjmp .L193
 3537               	.LVL303:
2265:Lib/FATFs/ff.c **** 		if (!dir)	/* Current dir itself */
 3538               		.loc 1 2265 0
 3539 06cc 2114      		cp r2,__zero_reg__
 3540 06ce 3104      		cpc r3,__zero_reg__
 3541 06d0 01F4      		brne .L193
2266:Lib/FATFs/ff.c **** 			res = FR_INVALID_NAME;
 3542               		.loc 1 2266 0
 3543 06d2 16E0      		ldi r17,lo8(6)
 3544               	.LVL304:
 3545               	.L193:
2267:Lib/FATFs/ff.c **** #if _FS_SHARE
2268:Lib/FATFs/ff.c **** 		else
2269:Lib/FATFs/ff.c **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2270:Lib/FATFs/ff.c **** #endif
2271:Lib/FATFs/ff.c **** 	}
2272:Lib/FATFs/ff.c **** 	/* Create or Open a file */
2273:Lib/FATFs/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 3546               		.loc 1 2273 0
 3547 06d4 8EA5      		ldd r24,Y+46
 3548 06d6 8C71      		andi r24,lo8(28)
 3549 06d8 01F4      		brne .+2
 3550 06da 00C0      		rjmp .L194
 3551               	.LBB63:
2274:Lib/FATFs/ff.c **** 		DWORD dw, cl;
2275:Lib/FATFs/ff.c **** 
2276:Lib/FATFs/ff.c **** 		if (res != FR_OK) {					/* No file, create new */
 3552               		.loc 1 2276 0
 3553 06dc 1123      		tst r17
 3554 06de 01F0      		breq .L195
2277:Lib/FATFs/ff.c **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 3555               		.loc 1 2277 0
 3556 06e0 1430      		cpi r17,lo8(4)
 3557 06e2 01F4      		brne .L196
 3558               	.LVL305:
 3559               	.LBB64:
 3560               	.LBB65:
1534:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
 3561               		.loc 1 1534 0
 3562 06e4 CE01      		movw r24,r28
 3563 06e6 0196      		adiw r24,1
 3564 06e8 0E94 0000 		call dir_sdi.constprop.1
 3565               	.LVL306:
 3566               	.L323:
 3567 06ec 182F      		mov r17,r24
 3568               	.LVL307:
1535:Lib/FATFs/ff.c **** 		do {	/* Find a blank entry for the SFN */
 3569               		.loc 1 1535 0
 3570 06ee 8111      		cpse r24,__zero_reg__
 3571 06f0 00C0      		rjmp .L277
1537:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 3572               		.loc 1 1537 0
 3573 06f2 4F85      		ldd r20,Y+15
 3574 06f4 5889      		ldd r21,Y+16
 3575 06f6 6989      		ldd r22,Y+17
 3576 06f8 7A89      		ldd r23,Y+18
 3577 06fa 8981      		ldd r24,Y+1
 3578 06fc 9A81      		ldd r25,Y+2
 3579 06fe 0E94 0000 		call move_window
 3580               	.LVL308:
 3581 0702 182F      		mov r17,r24
 3582               	.LVL309:
1538:Lib/FATFs/ff.c **** 			c = *dj->dir;
 3583               		.loc 1 1538 0
 3584 0704 8111      		cpse r24,__zero_reg__
 3585 0706 00C0      		rjmp .L277
1539:Lib/FATFs/ff.c **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 3586               		.loc 1 1539 0
 3587 0708 EB89      		ldd r30,Y+19
 3588 070a FC89      		ldd r31,Y+20
 3589 070c 8081      		ld r24,Z
 3590               	.LVL310:
1540:Lib/FATFs/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 3591               		.loc 1 1540 0
 3592 070e 853E      		cpi r24,lo8(-27)
 3593 0710 01F4      		brne .+2
 3594 0712 00C0      		rjmp .L198
 3595 0714 8823      		tst r24
 3596 0716 01F4      		brne .+2
 3597 0718 00C0      		rjmp .L198
1541:Lib/FATFs/ff.c **** 		} while (res == FR_OK);
 3598               		.loc 1 1541 0
 3599 071a 61E0      		ldi r22,lo8(1)
 3600 071c 70E0      		ldi r23,0
 3601 071e CE01      		movw r24,r28
 3602               	.LVL311:
 3603 0720 0196      		adiw r24,1
 3604 0722 0E94 0000 		call dir_next
 3605               	.LVL312:
 3606 0726 00C0      		rjmp .L323
 3607               	.LVL313:
 3608               	.L329:
1551:Lib/FATFs/ff.c **** #if _USE_LFN
 3609               		.loc 1 1551 0
 3610 0728 6D89      		ldd r22,Y+21
 3611 072a 7E89      		ldd r23,Y+22
 3612 072c 4BE0      		ldi r20,lo8(11)
 3613 072e 50E0      		ldi r21,0
 3614 0730 0E94 0000 		call mem_cpy
 3615               	.LVL314:
1555:Lib/FATFs/ff.c **** 		}
 3616               		.loc 1 1555 0
 3617 0734 E981      		ldd r30,Y+1
 3618 0736 FA81      		ldd r31,Y+2
 3619 0738 81E0      		ldi r24,lo8(1)
 3620 073a 8483      		std Z+4,r24
 3621               	.LVL315:
 3622               	.L196:
 3623               	.LBE65:
 3624               	.LBE64:
2278:Lib/FATFs/ff.c **** #if _FS_SHARE
2279:Lib/FATFs/ff.c **** 				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2280:Lib/FATFs/ff.c **** #else
2281:Lib/FATFs/ff.c **** 				res = dir_register(&dj);
2282:Lib/FATFs/ff.c **** #endif
2283:Lib/FATFs/ff.c **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
 3625               		.loc 1 2283 0
 3626 073c B9A5      		ldd r27,Y+41
 3627 073e B860      		ori r27,lo8(8)
 3628               	.LVL316:
 3629 0740 B9A7      		std Y+41,r27
 3630               	.LVL317:
2284:Lib/FATFs/ff.c **** 			dir = dj.dir;					/* New entry */
2285:Lib/FATFs/ff.c **** 		}
2286:Lib/FATFs/ff.c **** 		else {								/* Any object is already existing */
2287:Lib/FATFs/ff.c **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2288:Lib/FATFs/ff.c **** 				res = FR_DENIED;
2289:Lib/FATFs/ff.c **** 			} else {
2290:Lib/FATFs/ff.c **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2291:Lib/FATFs/ff.c **** 					res = FR_EXIST;
2292:Lib/FATFs/ff.c **** 			}
2293:Lib/FATFs/ff.c **** 		}
2294:Lib/FATFs/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 3631               		.loc 1 2294 0
 3632 0742 1111      		cpse r17,__zero_reg__
 3633 0744 00C0      		rjmp .L277
 3634               	.LVL318:
2284:Lib/FATFs/ff.c **** 			dir = dj.dir;					/* New entry */
 3635               		.loc 1 2284 0
 3636 0746 2B88      		ldd r2,Y+19
 3637 0748 3C88      		ldd r3,Y+20
 3638 074a 00C0      		rjmp .L203
 3639               	.LVL319:
 3640               	.L195:
2287:Lib/FATFs/ff.c **** 				res = FR_DENIED;
 3641               		.loc 1 2287 0
 3642 074c F101      		movw r30,r2
 3643 074e 8385      		ldd r24,Z+11
 3644 0750 8171      		andi r24,lo8(17)
 3645 0752 01F0      		breq .+2
 3646 0754 00C0      		rjmp .L254
2290:Lib/FATFs/ff.c **** 					res = FR_EXIST;
 3647               		.loc 1 2290 0
 3648 0756 4EA4      		ldd r4,Y+46
 3649 0758 42FC      		sbrc r4,2
 3650 075a 00C0      		rjmp .L251
 3651               	.LVL320:
 3652               	.L203:
 3653               		.loc 1 2294 0 discriminator 1
 3654 075c 59A4      		ldd r5,Y+41
 3655 075e 53FE      		sbrs r5,3
 3656 0760 00C0      		rjmp .L205
2295:Lib/FATFs/ff.c **** 			dw = get_fattime();					/* Created time */
 3657               		.loc 1 2295 0
 3658 0762 0E94 0000 		call get_fattime
 3659               	.LVL321:
2296:Lib/FATFs/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 3660               		.loc 1 2296 0
 3661 0766 D101      		movw r26,r2
 3662 0768 1E96      		adiw r26,14
 3663 076a 6D93      		st X+,r22
 3664 076c 7D93      		st X+,r23
 3665 076e 8D93      		st X+,r24
 3666 0770 9C93      		st X,r25
 3667 0772 5197      		sbiw r26,14+3
2297:Lib/FATFs/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 3668               		.loc 1 2297 0
 3669 0774 1B96      		adiw r26,11
 3670 0776 1C92      		st X,__zero_reg__
2298:Lib/FATFs/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 3671               		.loc 1 2298 0
 3672 0778 F101      		movw r30,r2
 3673 077a 148E      		std Z+28,__zero_reg__
 3674 077c 158E      		std Z+29,__zero_reg__
 3675 077e 168E      		std Z+30,__zero_reg__
 3676 0780 178E      		std Z+31,__zero_reg__
2299:Lib/FATFs/ff.c **** 			cl = LD_CLUST(dir);					/* Get start cluster */
 3677               		.loc 1 2299 0
 3678 0782 8489      		ldd r24,Z+20
 3679 0784 9589      		ldd r25,Z+21
 3680 0786 A0E0      		ldi r26,0
 3681 0788 B0E0      		ldi r27,0
 3682 078a DC01      		movw r26,r24
 3683 078c 9927      		clr r25
 3684 078e 8827      		clr r24
 3685 0790 428D      		ldd r20,Z+26
 3686 0792 538D      		ldd r21,Z+27
 3687 0794 60E0      		ldi r22,0
 3688 0796 70E0      		ldi r23,0
 3689               	.LVL322:
 3690 0798 2C01      		movw r4,r24
 3691 079a 3D01      		movw r6,r26
 3692 079c 442A      		or r4,r20
 3693 079e 552A      		or r5,r21
 3694 07a0 662A      		or r6,r22
 3695 07a2 772A      		or r7,r23
 3696               	.LVL323:
2300:Lib/FATFs/ff.c **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
 3697               		.loc 1 2300 0
 3698 07a4 138E      		std Z+27,__zero_reg__
 3699 07a6 128E      		std Z+26,__zero_reg__
 3700 07a8 158A      		std Z+21,__zero_reg__
 3701 07aa 148A      		std Z+20,__zero_reg__
2301:Lib/FATFs/ff.c **** 			dj.fs->wflag = 1;
 3702               		.loc 1 2301 0
 3703 07ac 8980      		ldd r8,Y+1
 3704 07ae 9A80      		ldd r9,Y+2
 3705 07b0 9CA2      		std Y+36,r9
 3706 07b2 8BA2      		std Y+35,r8
 3707 07b4 81E0      		ldi r24,lo8(1)
 3708 07b6 D401      		movw r26,r8
 3709 07b8 1496      		adiw r26,4
 3710 07ba 8C93      		st X,r24
 3711               	.LVL324:
2302:Lib/FATFs/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
 3712               		.loc 1 2302 0
 3713 07bc 4114      		cp r4,__zero_reg__
 3714 07be 5104      		cpc r5,__zero_reg__
 3715 07c0 6104      		cpc r6,__zero_reg__
 3716 07c2 7104      		cpc r7,__zero_reg__
 3717 07c4 01F4      		brne .+2
 3718 07c6 00C0      		rjmp .L206
 3719               	.LVL325:
 3720               	.LBB69:
 3721               	.LBB70:
 930:Lib/FATFs/ff.c **** 		res = FR_INT_ERR;
 3722               		.loc 1 930 0
 3723 07c8 B1E0      		ldi r27,1
 3724 07ca 4B16      		cp r4,r27
 3725 07cc 5104      		cpc r5,__zero_reg__
 3726 07ce 6104      		cpc r6,__zero_reg__
 3727 07d0 7104      		cpc r7,__zero_reg__
 3728 07d2 01F4      		brne .+2
 3729 07d4 00C0      		rjmp .L207
 3730 07d6 F401      		movw r30,r8
 3731 07d8 8689      		ldd r24,Z+22
 3732 07da 9789      		ldd r25,Z+23
 3733 07dc A08D      		ldd r26,Z+24
 3734 07de B18D      		ldd r27,Z+25
 3735 07e0 4816      		cp r4,r24
 3736 07e2 5906      		cpc r5,r25
 3737 07e4 6A06      		cpc r6,r26
 3738 07e6 7B06      		cpc r7,r27
 3739 07e8 00F0      		brlo .+2
 3740 07ea 00C0      		rjmp .L207
 3741               	.LBE70:
 3742               	.LBE69:
2303:Lib/FATFs/ff.c **** 				dw = dj.fs->winsect;
 3743               		.loc 1 2303 0
 3744 07ec 82A4      		ldd r8,Z+42
 3745 07ee 93A4      		ldd r9,Z+43
 3746 07f0 A4A4      		ldd r10,Z+44
 3747 07f2 B5A4      		ldd r11,Z+45
 3748               	.LVL326:
 3749 07f4 8AA6      		std Y+42,r8
 3750 07f6 9BA6      		std Y+43,r9
 3751 07f8 ACA6      		std Y+44,r10
 3752 07fa BDA6      		std Y+45,r11
 3753 07fc 7301      		movw r14,r6
 3754 07fe 6201      		movw r12,r4
 3755               	.LVL327:
 3756               	.L208:
 3757               	.LBB73:
 3758               	.LBB71:
 935:Lib/FATFs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 3759               		.loc 1 935 0
 3760 0800 EBA1      		ldd r30,Y+35
 3761 0802 FCA1      		ldd r31,Y+36
 3762 0804 8689      		ldd r24,Z+22
 3763 0806 9789      		ldd r25,Z+23
 3764 0808 A08D      		ldd r26,Z+24
 3765 080a B18D      		ldd r27,Z+25
 3766 080c C816      		cp r12,r24
 3767 080e D906      		cpc r13,r25
 3768 0810 EA06      		cpc r14,r26
 3769 0812 FB06      		cpc r15,r27
 3770 0814 00F0      		brlo .+2
 3771 0816 00C0      		rjmp .L209
 936:Lib/FATFs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 3772               		.loc 1 936 0
 3773 0818 B701      		movw r22,r14
 3774 081a A601      		movw r20,r12
 3775 081c 8BA1      		ldd r24,Y+35
 3776 081e 9CA1      		ldd r25,Y+36
 3777 0820 0E94 0000 		call get_fat
 3778               	.LVL328:
 3779 0824 4B01      		movw r8,r22
 3780 0826 5C01      		movw r10,r24
 3781               	.LVL329:
 937:Lib/FATFs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 3782               		.loc 1 937 0
 3783 0828 6115      		cp r22,__zero_reg__
 3784 082a 7105      		cpc r23,__zero_reg__
 3785 082c 8105      		cpc r24,__zero_reg__
 3786 082e 9105      		cpc r25,__zero_reg__
 3787 0830 01F4      		brne .+2
 3788 0832 00C0      		rjmp .L209
 938:Lib/FATFs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 3789               		.loc 1 938 0
 3790 0834 6130      		cpi r22,1
 3791 0836 7105      		cpc r23,__zero_reg__
 3792 0838 8105      		cpc r24,__zero_reg__
 3793 083a 9105      		cpc r25,__zero_reg__
 3794 083c 01F4      		brne .+2
 3795 083e 00C0      		rjmp .L207
 939:Lib/FATFs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 3796               		.loc 1 939 0
 3797 0840 6F3F      		cpi r22,-1
 3798 0842 7F4F      		sbci r23,-1
 3799 0844 8F4F      		sbci r24,-1
 3800 0846 9F4F      		sbci r25,-1
 3801 0848 01F4      		brne .+2
 3802 084a 00C0      		rjmp .L252
 940:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
 3803               		.loc 1 940 0
 3804 084c 00E0      		ldi r16,0
 3805 084e 10E0      		ldi r17,0
 3806 0850 9801      		movw r18,r16
 3807 0852 B701      		movw r22,r14
 3808 0854 A601      		movw r20,r12
 3809 0856 8BA1      		ldd r24,Y+35
 3810 0858 9CA1      		ldd r25,Y+36
 3811 085a 0E94 0000 		call put_fat
 3812               	.LVL330:
 3813 085e 182F      		mov r17,r24
 3814               	.LVL331:
 941:Lib/FATFs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 3815               		.loc 1 941 0
 3816 0860 8111      		cpse r24,__zero_reg__
 3817 0862 00C0      		rjmp .L277
 942:Lib/FATFs/ff.c **** 				fs->free_clust++;
 3818               		.loc 1 942 0
 3819 0864 EBA1      		ldd r30,Y+35
 3820 0866 FCA1      		ldd r31,Y+36
 3821 0868 8685      		ldd r24,Z+14
 3822 086a 9785      		ldd r25,Z+15
 3823 086c A089      		ldd r26,Z+16
 3824 086e B189      		ldd r27,Z+17
 3825 0870 8F3F      		cpi r24,-1
 3826 0872 FFEF      		ldi r31,-1
 3827 0874 9F07      		cpc r25,r31
 3828 0876 AF07      		cpc r26,r31
 3829 0878 BF07      		cpc r27,r31
 3830 087a 01F0      		breq .L211
 943:Lib/FATFs/ff.c **** 				fs->fsi_flag = 1;
 3831               		.loc 1 943 0
 3832 087c 0196      		adiw r24,1
 3833 087e A11D      		adc r26,__zero_reg__
 3834 0880 B11D      		adc r27,__zero_reg__
 3835 0882 EBA1      		ldd r30,Y+35
 3836 0884 FCA1      		ldd r31,Y+36
 3837 0886 8687      		std Z+14,r24
 3838 0888 9787      		std Z+15,r25
 3839 088a A08B      		std Z+16,r26
 3840 088c B18B      		std Z+17,r27
 944:Lib/FATFs/ff.c **** 			}
 3841               		.loc 1 944 0
 3842 088e 21E0      		ldi r18,lo8(1)
 3843 0890 2583      		std Z+5,r18
 3844               	.L211:
 3845               	.LBE71:
 3846               	.LBE73:
 3847               		.loc 1 2303 0
 3848 0892 7501      		movw r14,r10
 3849 0894 6401      		movw r12,r8
 3850               	.LVL332:
 3851 0896 00C0      		rjmp .L208
 3852               	.LVL333:
 3853               	.L194:
 3854               	.LBE63:
2304:Lib/FATFs/ff.c **** 				res = remove_chain(dj.fs, cl);
2305:Lib/FATFs/ff.c **** 				if (res == FR_OK) {
2306:Lib/FATFs/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
2307:Lib/FATFs/ff.c **** 					res = move_window(dj.fs, dw);
2308:Lib/FATFs/ff.c **** 				}
2309:Lib/FATFs/ff.c **** 			}
2310:Lib/FATFs/ff.c **** 		}
2311:Lib/FATFs/ff.c **** 	}
2312:Lib/FATFs/ff.c **** 	else {	/* Open an existing file */
2313:Lib/FATFs/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
 3855               		.loc 1 2313 0
 3856 0898 1111      		cpse r17,__zero_reg__
 3857 089a 00C0      		rjmp .L277
2314:Lib/FATFs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 3858               		.loc 1 2314 0
 3859 089c D101      		movw r26,r2
 3860 089e 1B96      		adiw r26,11
 3861 08a0 8C91      		ld r24,X
 3862 08a2 84FD      		sbrc r24,4
 3863 08a4 00C0      		rjmp .L253
2315:Lib/FATFs/ff.c **** 				res = FR_NO_FILE;
2316:Lib/FATFs/ff.c **** 			} else {
2317:Lib/FATFs/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 3864               		.loc 1 2317 0
 3865 08a6 4EA4      		ldd r4,Y+46
 3866 08a8 41FE      		sbrs r4,1
 3867 08aa 00C0      		rjmp .L213
 3868               		.loc 1 2317 0 is_stmt 0 discriminator 1
 3869 08ac 80FD      		sbrc r24,0
 3870 08ae 00C0      		rjmp .L254
 3871               	.L213:
 3872               	.LVL334:
2318:Lib/FATFs/ff.c **** 					res = FR_DENIED;
2319:Lib/FATFs/ff.c **** 			}
2320:Lib/FATFs/ff.c **** 		}
2321:Lib/FATFs/ff.c **** 	}
2322:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2323:Lib/FATFs/ff.c **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 3873               		.loc 1 2323 0 is_stmt 1
 3874 08b0 59A4      		ldd r5,Y+41
 3875 08b2 53FE      		sbrs r5,3
 3876 08b4 00C0      		rjmp .L205
 3877               	.LVL335:
 3878               	.L206:
2324:Lib/FATFs/ff.c **** 			mode |= FA__WRITTEN;
 3879               		.loc 1 2324 0
 3880 08b6 29A5      		ldd r18,Y+41
 3881 08b8 2062      		ori r18,lo8(32)
 3882               	.LVL336:
 3883 08ba 29A7      		std Y+41,r18
 3884               	.LVL337:
 3885               	.L205:
2325:Lib/FATFs/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 3886               		.loc 1 2325 0
 3887 08bc E981      		ldd r30,Y+1
 3888 08be FA81      		ldd r31,Y+2
 3889 08c0 42A5      		ldd r20,Z+42
 3890 08c2 53A5      		ldd r21,Z+43
 3891 08c4 64A5      		ldd r22,Z+44
 3892 08c6 75A5      		ldd r23,Z+45
 3893 08c8 AFA1      		ldd r26,Y+39
 3894 08ca B8A5      		ldd r27,Y+40
 3895 08cc 5A96      		adiw r26,26
 3896 08ce 4D93      		st X+,r20
 3897 08d0 5D93      		st X+,r21
 3898 08d2 6D93      		st X+,r22
 3899 08d4 7C93      		st X,r23
 3900 08d6 5D97      		sbiw r26,26+3
2326:Lib/FATFs/ff.c **** 		fp->dir_ptr = dir;
 3901               		.loc 1 2326 0
 3902 08d8 5F96      		adiw r26,30+1
 3903 08da 3C92      		st X,r3
 3904 08dc 2E92      		st -X,r2
 3905 08de 5E97      		sbiw r26,30
2327:Lib/FATFs/ff.c **** #if _FS_SHARE
2328:Lib/FATFs/ff.c **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2329:Lib/FATFs/ff.c **** 		if (!fp->lockid) res = FR_INT_ERR;
2330:Lib/FATFs/ff.c **** #endif
2331:Lib/FATFs/ff.c **** 	}
2332:Lib/FATFs/ff.c **** 
2333:Lib/FATFs/ff.c **** #else				/* R/O configuration */
2334:Lib/FATFs/ff.c **** 	if (res == FR_OK) {					/* Follow succeeded */
2335:Lib/FATFs/ff.c **** 		if (!dir) {						/* Current dir itself */
2336:Lib/FATFs/ff.c **** 			res = FR_INVALID_NAME;
2337:Lib/FATFs/ff.c **** 		} else {
2338:Lib/FATFs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2339:Lib/FATFs/ff.c **** 				res = FR_NO_FILE;
2340:Lib/FATFs/ff.c **** 		}
2341:Lib/FATFs/ff.c **** 	}
2342:Lib/FATFs/ff.c **** #endif
2343:Lib/FATFs/ff.c **** 	FREE_BUF();
2344:Lib/FATFs/ff.c **** 
2345:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2346:Lib/FATFs/ff.c **** 		fp->flag = mode;					/* File access mode */
 3906               		.loc 1 2346 0
 3907 08e0 49A4      		ldd r4,Y+41
 3908 08e2 1496      		adiw r26,4
 3909 08e4 4C92      		st X,r4
2347:Lib/FATFs/ff.c **** 		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 3910               		.loc 1 2347 0
 3911 08e6 D101      		movw r26,r2
 3912 08e8 5496      		adiw r26,20
 3913 08ea 8D91      		ld r24,X+
 3914 08ec 9C91      		ld r25,X
 3915 08ee 5597      		sbiw r26,20+1
 3916 08f0 A0E0      		ldi r26,0
 3917 08f2 B0E0      		ldi r27,0
 3918 08f4 9C01      		movw r18,r24
 3919 08f6 1127      		clr r17
 3920 08f8 0027      		clr r16
 3921 08fa D101      		movw r26,r2
 3922 08fc 5A96      		adiw r26,26
 3923 08fe 4D91      		ld r20,X+
 3924 0900 5C91      		ld r21,X
 3925 0902 5B97      		sbiw r26,26+1
 3926 0904 60E0      		ldi r22,0
 3927 0906 70E0      		ldi r23,0
 3928 0908 402B      		or r20,r16
 3929 090a 512B      		or r21,r17
 3930 090c 622B      		or r22,r18
 3931 090e 732B      		or r23,r19
 3932 0910 AFA1      		ldd r26,Y+39
 3933 0912 B8A5      		ldd r27,Y+40
 3934 0914 1E96      		adiw r26,14
 3935 0916 4D93      		st X+,r20
 3936 0918 5D93      		st X+,r21
 3937 091a 6D93      		st X+,r22
 3938 091c 7C93      		st X,r23
 3939 091e 5197      		sbiw r26,14+3
2348:Lib/FATFs/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3940               		.loc 1 2348 0
 3941 0920 D101      		movw r26,r2
 3942 0922 5C96      		adiw r26,28
 3943 0924 4D91      		ld r20,X+
 3944 0926 5D91      		ld r21,X+
 3945 0928 6D91      		ld r22,X+
 3946 092a 7C91      		ld r23,X
 3947 092c 5F97      		sbiw r26,28+3
 3948 092e AFA1      		ldd r26,Y+39
 3949 0930 B8A5      		ldd r27,Y+40
 3950 0932 1A96      		adiw r26,10
 3951 0934 4D93      		st X+,r20
 3952 0936 5D93      		st X+,r21
 3953 0938 6D93      		st X+,r22
 3954 093a 7C93      		st X,r23
 3955 093c 1D97      		sbiw r26,10+3
2349:Lib/FATFs/ff.c **** 		fp->fptr = 0;						/* File pointer */
 3956               		.loc 1 2349 0
 3957 093e 1696      		adiw r26,6
 3958 0940 1D92      		st X+,__zero_reg__
 3959 0942 1D92      		st X+,__zero_reg__
 3960 0944 1D92      		st X+,__zero_reg__
 3961 0946 1C92      		st X,__zero_reg__
 3962 0948 1997      		sbiw r26,6+3
2350:Lib/FATFs/ff.c **** 		fp->dsect = 0;
 3963               		.loc 1 2350 0
 3964 094a 5696      		adiw r26,22
 3965 094c 1D92      		st X+,__zero_reg__
 3966 094e 1D92      		st X+,__zero_reg__
 3967 0950 1D92      		st X+,__zero_reg__
 3968 0952 1C92      		st X,__zero_reg__
 3969 0954 5997      		sbiw r26,22+3
2351:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2352:Lib/FATFs/ff.c **** 		fp->cltbl = 0;						/* Normal seek mode */
2353:Lib/FATFs/ff.c **** #endif
2354:Lib/FATFs/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 3970               		.loc 1 2354 0
 3971 0956 1196      		adiw r26,1
 3972 0958 FC93      		st X,r31
 3973 095a EE93      		st -X,r30
 3974 095c 8681      		ldd r24,Z+6
 3975 095e 9781      		ldd r25,Z+7
 3976 0960 1396      		adiw r26,2+1
 3977 0962 9C93      		st X,r25
 3978 0964 8E93      		st -X,r24
 3979 0966 1297      		sbiw r26,2
 3980 0968 10E0      		ldi r17,0
 3981 096a 00C0      		rjmp .L277
 3982               	.LVL338:
 3983               	.L180:
 3984               	.LBB76:
 3985               	.LBB62:
 3986               	.LBB61:
 3987               	.LBB51:
1796:Lib/FATFs/ff.c **** 				b |= 2;
 3988               		.loc 1 1796 0
 3989 096c 6FEB      		ldi r22,lo8(-65)
 3990 096e 610F      		add r22,r17
 3991 0970 6A31      		cpi r22,lo8(26)
 3992 0972 00F4      		brsh .L328
1797:Lib/FATFs/ff.c **** 			} else {
 3993               		.loc 1 1797 0
 3994 0974 0260      		ori r16,lo8(2)
 3995               	.LVL339:
 3996 0976 00C0      		rjmp .L182
 3997               	.L328:
1799:Lib/FATFs/ff.c **** 					b |= 1; c -= 0x20;
 3998               		.loc 1 1799 0
 3999 0978 6FE9      		ldi r22,lo8(-97)
 4000 097a 610F      		add r22,r17
 4001 097c 6A31      		cpi r22,lo8(26)
 4002 097e 00F4      		brsh .L182
1800:Lib/FATFs/ff.c **** 				}
 4003               		.loc 1 1800 0
 4004 0980 0160      		ori r16,lo8(1)
 4005               	.LVL340:
 4006 0982 1052      		subi r17,lo8(-(-32))
 4007               	.LVL341:
 4008               	.L182:
1803:Lib/FATFs/ff.c **** 		}
 4009               		.loc 1 1803 0
 4010 0984 BF01      		movw r22,r30
 4011 0986 680F      		add r22,r24
 4012 0988 791F      		adc r23,r25
 4013 098a DB01      		movw r26,r22
 4014 098c 1C93      		st X,r17
 4015 098e 0196      		adiw r24,1
 4016               	.LVL342:
 4017 0990 00C0      		rjmp .L175
 4018               	.LVL343:
 4019               	.L198:
 4020               	.LBE51:
 4021               	.LBE61:
 4022               	.LBE62:
 4023               	.LBE76:
 4024               	.LBB77:
 4025               	.LBB74:
 4026               	.LBB68:
1547:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
 4027               		.loc 1 1547 0
 4028 0992 4F85      		ldd r20,Y+15
 4029 0994 5889      		ldd r21,Y+16
 4030 0996 6989      		ldd r22,Y+17
 4031 0998 7A89      		ldd r23,Y+18
 4032 099a 8981      		ldd r24,Y+1
 4033 099c 9A81      		ldd r25,Y+2
 4034               	.LVL344:
 4035 099e 0E94 0000 		call move_window
 4036               	.LVL345:
 4037 09a2 182F      		mov r17,r24
 4038               	.LVL346:
1548:Lib/FATFs/ff.c **** 			dir = dj->dir;
 4039               		.loc 1 1548 0
 4040 09a4 8111      		cpse r24,__zero_reg__
 4041 09a6 00C0      		rjmp .L196
1549:Lib/FATFs/ff.c **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
 4042               		.loc 1 1549 0
 4043 09a8 8B89      		ldd r24,Y+19
 4044 09aa 9C89      		ldd r25,Y+20
 4045               	.LVL347:
 4046 09ac FC01      		movw r30,r24
 4047 09ae 9C01      		movw r18,r24
 4048 09b0 205E      		subi r18,-32
 4049 09b2 3F4F      		sbci r19,-1
 4050               	.LVL348:
 4051               	.L200:
 4052               	.LBB66:
 4053               	.LBB67:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 4054               		.loc 1 541 0
 4055 09b4 2E17      		cp r18,r30
 4056 09b6 3F07      		cpc r19,r31
 4057 09b8 01F4      		brne .+2
 4058 09ba 00C0      		rjmp .L329
 4059               	.LVL349:
 542:Lib/FATFs/ff.c **** }
 4060               		.loc 1 542 0
 4061 09bc 1192      		st Z+,__zero_reg__
 4062               	.LVL350:
 4063 09be 00C0      		rjmp .L200
 4064               	.LVL351:
 4065               	.L251:
 4066               	.LBE67:
 4067               	.LBE66:
 4068               	.LBE68:
 4069               	.LBE74:
2291:Lib/FATFs/ff.c **** 			}
 4070               		.loc 1 2291 0
 4071 09c0 18E0      		ldi r17,lo8(8)
 4072               	.LVL352:
 4073 09c2 00C0      		rjmp .L277
 4074               	.LVL353:
 4075               	.L209:
2306:Lib/FATFs/ff.c **** 					res = move_window(dj.fs, dw);
 4076               		.loc 1 2306 0
 4077 09c4 8981      		ldd r24,Y+1
 4078 09c6 9A81      		ldd r25,Y+2
 4079 09c8 B301      		movw r22,r6
 4080 09ca A201      		movw r20,r4
 4081 09cc 4150      		subi r20,1
 4082 09ce 5109      		sbc r21,__zero_reg__
 4083 09d0 6109      		sbc r22,__zero_reg__
 4084 09d2 7109      		sbc r23,__zero_reg__
 4085 09d4 FC01      		movw r30,r24
 4086 09d6 4287      		std Z+10,r20
 4087 09d8 5387      		std Z+11,r21
 4088 09da 6487      		std Z+12,r22
 4089 09dc 7587      		std Z+13,r23
2307:Lib/FATFs/ff.c **** 				}
 4090               		.loc 1 2307 0
 4091 09de 4AA5      		ldd r20,Y+42
 4092 09e0 5BA5      		ldd r21,Y+43
 4093 09e2 6CA5      		ldd r22,Y+44
 4094 09e4 7DA5      		ldd r23,Y+45
 4095 09e6 0E94 0000 		call move_window
 4096               	.LVL354:
 4097 09ea 182F      		mov r17,r24
 4098               	.LVL355:
 4099               	.LBE77:
2322:Lib/FATFs/ff.c **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 4100               		.loc 1 2322 0
 4101 09ec 8823      		tst r24
 4102 09ee 01F4      		brne .+2
 4103 09f0 00C0      		rjmp .L213
 4104 09f2 00C0      		rjmp .L277
 4105               	.LVL356:
 4106               	.L207:
 4107               	.LBB78:
 4108               	.LBB75:
 4109               	.LBB72:
 931:Lib/FATFs/ff.c **** 
 4110               		.loc 1 931 0
 4111 09f4 12E0      		ldi r17,lo8(2)
 4112 09f6 00C0      		rjmp .L277
 4113               	.LVL357:
 4114               	.L252:
 939:Lib/FATFs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 4115               		.loc 1 939 0
 4116 09f8 11E0      		ldi r17,lo8(1)
 4117               	.LVL358:
 4118 09fa 00C0      		rjmp .L277
 4119               	.LVL359:
 4120               	.L253:
 4121               	.LBE72:
 4122               	.LBE75:
 4123               	.LBE78:
2315:Lib/FATFs/ff.c **** 			} else {
 4124               		.loc 1 2315 0
 4125 09fc 14E0      		ldi r17,lo8(4)
 4126               	.LVL360:
 4127 09fe 00C0      		rjmp .L277
 4128               	.LVL361:
 4129               	.L254:
2318:Lib/FATFs/ff.c **** 			}
 4130               		.loc 1 2318 0
 4131 0a00 17E0      		ldi r17,lo8(7)
 4132               	.LVL362:
2355:Lib/FATFs/ff.c **** 	}
2356:Lib/FATFs/ff.c **** 
2357:Lib/FATFs/ff.c **** 	LEAVE_FF(dj.fs, res);
 4133               		.loc 1 2357 0
 4134 0a02 00C0      		rjmp .L277
 4135               	.LVL363:
 4136               	.L239:
 4137               	.LBB79:
 4138               	.LBB34:
2106:Lib/FATFs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 4139               		.loc 1 2106 0
 4140 0a04 12E0      		ldi r17,lo8(2)
 4141 0a06 00C0      		rjmp .L156
 4142               	.LVL364:
 4143               	.L158:
2121:Lib/FATFs/ff.c **** 	}
 4144               		.loc 1 2121 0
 4145 0a08 A3E0      		ldi r26,lo8(3)
 4146 0a0a B0E0      		ldi r27,0
 4147 0a0c A501      		movw r20,r10
 4148 0a0e 9401      		movw r18,r8
 4149               	.LVL365:
 4150 0a10 0E94 0000 		call __muluhisi3
 4151 0a14 DC01      		movw r26,r24
 4152 0a16 CB01      		movw r24,r22
 4153 0a18 B695      		lsr r27
 4154 0a1a A795      		ror r26
 4155 0a1c 9795      		ror r25
 4156 0a1e 8795      		ror r24
 4157 0a20 F1E0      		ldi r31,1
 4158 0a22 8F22      		and r8,r31
 4159 0a24 9924      		clr r9
 4160 0a26 AA24      		clr r10
 4161 0a28 BB24      		clr r11
 4162               	.LVL366:
 4163 0a2a 880E      		add r8,r24
 4164 0a2c 991E      		adc r9,r25
 4165 0a2e AA1E      		adc r10,r26
 4166 0a30 BB1E      		adc r11,r27
 4167 0a32 11E0      		ldi r17,lo8(1)
 4168               	.LVL367:
 4169 0a34 00C0      		rjmp .L157
 4170               	.LVL368:
 4171               	.L277:
 4172               	.LBE34:
 4173               	.LBE79:
2358:Lib/FATFs/ff.c **** }
 4174               		.loc 1 2358 0
 4175 0a36 812F      		mov r24,r17
 4176               	/* epilogue start */
 4177 0a38 EA96      		adiw r28,58
 4178 0a3a 0FB6      		in __tmp_reg__,__SREG__
 4179 0a3c F894      		cli
 4180 0a3e DEBF      		out __SP_H__,r29
 4181 0a40 0FBE      		out __SREG__,__tmp_reg__
 4182 0a42 CDBF      		out __SP_L__,r28
 4183 0a44 DF91      		pop r29
 4184 0a46 CF91      		pop r28
 4185 0a48 1F91      		pop r17
 4186 0a4a 0F91      		pop r16
 4187 0a4c FF90      		pop r15
 4188 0a4e EF90      		pop r14
 4189 0a50 DF90      		pop r13
 4190 0a52 CF90      		pop r12
 4191 0a54 BF90      		pop r11
 4192 0a56 AF90      		pop r10
 4193 0a58 9F90      		pop r9
 4194 0a5a 8F90      		pop r8
 4195 0a5c 7F90      		pop r7
 4196 0a5e 6F90      		pop r6
 4197 0a60 5F90      		pop r5
 4198 0a62 4F90      		pop r4
 4199 0a64 3F90      		pop r3
 4200 0a66 2F90      		pop r2
 4201 0a68 0895      		ret
 4202               		.cfi_endproc
 4203               	.LFE160:
 4205               		.section	.text.f_read,"ax",@progbits
 4206               	.global	f_read
 4208               	f_read:
 4209               	.LFB161:
2359:Lib/FATFs/ff.c **** 
2360:Lib/FATFs/ff.c **** 
2361:Lib/FATFs/ff.c **** 
2362:Lib/FATFs/ff.c **** 
2363:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2364:Lib/FATFs/ff.c **** /* Read File                                                             */
2365:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2366:Lib/FATFs/ff.c **** 
2367:Lib/FATFs/ff.c **** FRESULT f_read (
2368:Lib/FATFs/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
2369:Lib/FATFs/ff.c **** 	void *buff,		/* Pointer to data buffer */
2370:Lib/FATFs/ff.c **** 	UINT btr,		/* Number of bytes to read */
2371:Lib/FATFs/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
2372:Lib/FATFs/ff.c **** )
2373:Lib/FATFs/ff.c **** {
 4210               		.loc 1 2373 0
 4211               		.cfi_startproc
 4212               	.LVL369:
 4213 0000 2F92      		push r2
 4214               	.LCFI99:
 4215               		.cfi_def_cfa_offset 3
 4216               		.cfi_offset 2, -2
 4217 0002 3F92      		push r3
 4218               	.LCFI100:
 4219               		.cfi_def_cfa_offset 4
 4220               		.cfi_offset 3, -3
 4221 0004 4F92      		push r4
 4222               	.LCFI101:
 4223               		.cfi_def_cfa_offset 5
 4224               		.cfi_offset 4, -4
 4225 0006 5F92      		push r5
 4226               	.LCFI102:
 4227               		.cfi_def_cfa_offset 6
 4228               		.cfi_offset 5, -5
 4229 0008 6F92      		push r6
 4230               	.LCFI103:
 4231               		.cfi_def_cfa_offset 7
 4232               		.cfi_offset 6, -6
 4233 000a 7F92      		push r7
 4234               	.LCFI104:
 4235               		.cfi_def_cfa_offset 8
 4236               		.cfi_offset 7, -7
 4237 000c 8F92      		push r8
 4238               	.LCFI105:
 4239               		.cfi_def_cfa_offset 9
 4240               		.cfi_offset 8, -8
 4241 000e 9F92      		push r9
 4242               	.LCFI106:
 4243               		.cfi_def_cfa_offset 10
 4244               		.cfi_offset 9, -9
 4245 0010 AF92      		push r10
 4246               	.LCFI107:
 4247               		.cfi_def_cfa_offset 11
 4248               		.cfi_offset 10, -10
 4249 0012 BF92      		push r11
 4250               	.LCFI108:
 4251               		.cfi_def_cfa_offset 12
 4252               		.cfi_offset 11, -11
 4253 0014 CF92      		push r12
 4254               	.LCFI109:
 4255               		.cfi_def_cfa_offset 13
 4256               		.cfi_offset 12, -12
 4257 0016 DF92      		push r13
 4258               	.LCFI110:
 4259               		.cfi_def_cfa_offset 14
 4260               		.cfi_offset 13, -13
 4261 0018 EF92      		push r14
 4262               	.LCFI111:
 4263               		.cfi_def_cfa_offset 15
 4264               		.cfi_offset 14, -14
 4265 001a FF92      		push r15
 4266               	.LCFI112:
 4267               		.cfi_def_cfa_offset 16
 4268               		.cfi_offset 15, -15
 4269 001c 0F93      		push r16
 4270               	.LCFI113:
 4271               		.cfi_def_cfa_offset 17
 4272               		.cfi_offset 16, -16
 4273 001e 1F93      		push r17
 4274               	.LCFI114:
 4275               		.cfi_def_cfa_offset 18
 4276               		.cfi_offset 17, -17
 4277 0020 CF93      		push r28
 4278               	.LCFI115:
 4279               		.cfi_def_cfa_offset 19
 4280               		.cfi_offset 28, -18
 4281 0022 DF93      		push r29
 4282               	.LCFI116:
 4283               		.cfi_def_cfa_offset 20
 4284               		.cfi_offset 29, -19
 4285               	/* prologue: function */
 4286               	/* frame size = 0 */
 4287               	/* stack size = 18 */
 4288               	.L__stack_usage = 18
 4289 0024 EC01      		movw r28,r24
 4290 0026 5B01      		movw r10,r22
 4291 0028 6A01      		movw r12,r20
 4292 002a 1901      		movw r2,r18
 4293               	.LVL370:
2374:Lib/FATFs/ff.c **** 	FRESULT res;
2375:Lib/FATFs/ff.c **** 	DWORD clst, sect, remain;
2376:Lib/FATFs/ff.c **** 	UINT rcnt, cc;
2377:Lib/FATFs/ff.c **** 	BYTE csect, *rbuff = buff;
2378:Lib/FATFs/ff.c **** 
2379:Lib/FATFs/ff.c **** 
2380:Lib/FATFs/ff.c **** 	*br = 0;	/* Initialize byte counter */
 4294               		.loc 1 2380 0
 4295 002c F901      		movw r30,r18
 4296 002e 1182      		std Z+1,__zero_reg__
 4297 0030 1082      		st Z,__zero_reg__
2381:Lib/FATFs/ff.c **** 
2382:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);				/* Check validity */
 4298               		.loc 1 2382 0
 4299 0032 6A81      		ldd r22,Y+2
 4300 0034 7B81      		ldd r23,Y+3
 4301               	.LVL371:
 4302 0036 8881      		ld r24,Y
 4303 0038 9981      		ldd r25,Y+1
 4304               	.LVL372:
 4305 003a 0E94 0000 		call validate
 4306               	.LVL373:
2383:Lib/FATFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4307               		.loc 1 2383 0
 4308 003e 8111      		cpse r24,__zero_reg__
 4309 0040 00C0      		rjmp .L331
2384:Lib/FATFs/ff.c **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 4310               		.loc 1 2384 0
 4311 0042 8C81      		ldd r24,Y+4
 4312               	.LVL374:
 4313 0044 87FD      		sbrc r24,7
 4314 0046 00C0      		rjmp .L350
2385:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2386:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 4315               		.loc 1 2386 0
 4316 0048 80FF      		sbrs r24,0
 4317 004a 00C0      		rjmp .L351
2387:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2388:Lib/FATFs/ff.c **** 	remain = fp->fsize - fp->fptr;
 4318               		.loc 1 2388 0
 4319 004c 8A85      		ldd r24,Y+10
 4320 004e 9B85      		ldd r25,Y+11
 4321 0050 AC85      		ldd r26,Y+12
 4322 0052 BD85      		ldd r27,Y+13
 4323 0054 4E81      		ldd r20,Y+6
 4324 0056 5F81      		ldd r21,Y+7
 4325 0058 6885      		ldd r22,Y+8
 4326 005a 7985      		ldd r23,Y+9
 4327 005c 841B      		sub r24,r20
 4328 005e 950B      		sbc r25,r21
 4329 0060 A60B      		sbc r26,r22
 4330 0062 B70B      		sbc r27,r23
 4331               	.LVL375:
2389:Lib/FATFs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 4332               		.loc 1 2389 0
 4333 0064 A601      		movw r20,r12
 4334 0066 60E0      		ldi r22,0
 4335 0068 70E0      		ldi r23,0
 4336 006a 8417      		cp r24,r20
 4337 006c 9507      		cpc r25,r21
 4338 006e A607      		cpc r26,r22
 4339 0070 B707      		cpc r27,r23
 4340 0072 00F0      		brlo .+2
 4341 0074 00C0      		rjmp .L333
 4342               		.loc 1 2389 0 is_stmt 0 discriminator 1
 4343 0076 6C01      		movw r12,r24
 4344               	.LVL376:
 4345 0078 00C0      		rjmp .L333
 4346               	.LVL377:
 4347               	.L348:
2390:Lib/FATFs/ff.c **** 
2391:Lib/FATFs/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
2392:Lib/FATFs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2393:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 4348               		.loc 1 2393 0 is_stmt 1
 4349 007a 4E81      		ldd r20,Y+6
 4350 007c 5F81      		ldd r21,Y+7
 4351 007e 6885      		ldd r22,Y+8
 4352 0080 7985      		ldd r23,Y+9
 4353 0082 DB01      		movw r26,r22
 4354 0084 CA01      		movw r24,r20
 4355 0086 9170      		andi r25,1
 4356 0088 AA27      		clr r26
 4357 008a BB27      		clr r27
 4358 008c 892B      		or r24,r25
 4359 008e 8A2B      		or r24,r26
 4360 0090 8B2B      		or r24,r27
 4361 0092 01F0      		breq .+2
 4362 0094 00C0      		rjmp .L334
2394:Lib/FATFs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 4363               		.loc 1 2394 0
 4364 0096 8881      		ld r24,Y
 4365 0098 9981      		ldd r25,Y+1
 4366 009a FC01      		movw r30,r24
 4367 009c 2281      		ldd r18,Z+2
 4368 009e 2150      		subi r18,lo8(-(-1))
 4369 00a0 2A01      		movw r4,r20
 4370 00a2 3B01      		movw r6,r22
 4371 00a4 E9E0      		ldi r30,9
 4372               		1:
 4373 00a6 7694      		lsr r7
 4374 00a8 6794      		ror r6
 4375 00aa 5794      		ror r5
 4376 00ac 4794      		ror r4
 4377 00ae EA95      		dec r30
 4378 00b0 01F4      		brne 1b
 4379 00b2 122F      		mov r17,r18
 4380 00b4 1421      		and r17,r4
 4381               	.LVL378:
2395:Lib/FATFs/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 4382               		.loc 1 2395 0
 4383 00b6 01F4      		brne .+2
 4384 00b8 00C0      		rjmp .L357
 4385               	.L335:
2396:Lib/FATFs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
2397:Lib/FATFs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
2398:Lib/FATFs/ff.c **** 				} else {						/* Middle or end of the file */
2399:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2400:Lib/FATFs/ff.c **** 					if (fp->cltbl)
2401:Lib/FATFs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2402:Lib/FATFs/ff.c **** 					else
2403:Lib/FATFs/ff.c **** #endif
2404:Lib/FATFs/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
2405:Lib/FATFs/ff.c **** 				}
2406:Lib/FATFs/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
2407:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2408:Lib/FATFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
2409:Lib/FATFs/ff.c **** 			}
2410:Lib/FATFs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 4386               		.loc 1 2410 0
 4387 00ba 8880      		ld r8,Y
 4388 00bc 9980      		ldd r9,Y+1
 4389 00be 4A89      		ldd r20,Y+18
 4390 00c0 5B89      		ldd r21,Y+19
 4391 00c2 6C89      		ldd r22,Y+20
 4392 00c4 7D89      		ldd r23,Y+21
 4393 00c6 C401      		movw r24,r8
 4394 00c8 0E94 0000 		call clust2sect
 4395               	.LVL379:
2411:Lib/FATFs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4396               		.loc 1 2411 0
 4397 00cc 6115      		cp r22,__zero_reg__
 4398 00ce 7105      		cpc r23,__zero_reg__
 4399 00d0 8105      		cpc r24,__zero_reg__
 4400 00d2 9105      		cpc r25,__zero_reg__
 4401 00d4 01F4      		brne .+2
 4402 00d6 00C0      		rjmp .L355
2412:Lib/FATFs/ff.c **** 			sect += csect;
 4403               		.loc 1 2412 0
 4404 00d8 2B01      		movw r4,r22
 4405 00da 3C01      		movw r6,r24
 4406 00dc 410E      		add r4,r17
 4407 00de 511C      		adc r5,__zero_reg__
 4408 00e0 611C      		adc r6,__zero_reg__
 4409 00e2 711C      		adc r7,__zero_reg__
 4410               	.LVL380:
2413:Lib/FATFs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 4411               		.loc 1 2413 0
 4412 00e4 7601      		movw r14,r12
 4413 00e6 EF2C      		mov r14,r15
 4414 00e8 FF24      		clr r15
 4415 00ea E694      		lsr r14
 4416               	.LVL381:
2414:Lib/FATFs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 4417               		.loc 1 2414 0
 4418 00ec E114      		cp r14,__zero_reg__
 4419 00ee F104      		cpc r15,__zero_reg__
 4420 00f0 01F4      		brne .+2
 4421 00f2 00C0      		rjmp .L341
2415:Lib/FATFs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 4422               		.loc 1 2415 0
 4423 00f4 F401      		movw r30,r8
 4424 00f6 8281      		ldd r24,Z+2
 4425 00f8 212F      		mov r18,r17
 4426 00fa 30E0      		ldi r19,0
 4427 00fc A901      		movw r20,r18
 4428 00fe 4E0D      		add r20,r14
 4429 0100 5F1D      		adc r21,r15
 4430 0102 90E0      		ldi r25,0
 4431 0104 8417      		cp r24,r20
 4432 0106 9507      		cpc r25,r21
 4433 0108 00F4      		brsh .L342
2416:Lib/FATFs/ff.c **** 					cc = fp->fs->csize - csect;
 4434               		.loc 1 2416 0
 4435 010a 7C01      		movw r14,r24
 4436               	.LVL382:
 4437 010c E21A      		sub r14,r18
 4438 010e F30A      		sbc r15,r19
 4439               	.LVL383:
 4440               	.L342:
2417:Lib/FATFs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 4441               		.loc 1 2417 0
 4442 0110 0E2D      		mov r16,r14
 4443 0112 A301      		movw r20,r6
 4444 0114 9201      		movw r18,r4
 4445 0116 B501      		movw r22,r10
 4446 0118 F401      		movw r30,r8
 4447 011a 8181      		ldd r24,Z+1
 4448 011c 0E94 0000 		call disk_read
 4449               	.LVL384:
 4450 0120 8111      		cpse r24,__zero_reg__
 4451 0122 00C0      		rjmp .L356
2418:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2419:Lib/FATFs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2420:Lib/FATFs/ff.c **** #if _FS_TINY
2421:Lib/FATFs/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 4452               		.loc 1 2421 0
 4453 0124 E881      		ld r30,Y
 4454 0126 F981      		ldd r31,Y+1
 4455 0128 8481      		ldd r24,Z+4
 4456 012a 8111      		cpse r24,__zero_reg__
 4457 012c 00C0      		rjmp .L358
 4458               	.L344:
2422:Lib/FATFs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2423:Lib/FATFs/ff.c **** #else
2424:Lib/FATFs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2425:Lib/FATFs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2426:Lib/FATFs/ff.c **** #endif
2427:Lib/FATFs/ff.c **** #endif
2428:Lib/FATFs/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 4459               		.loc 1 2428 0
 4460 012e FE2C      		mov r15,r14
 4461 0130 EE24      		clr r14
 4462 0132 FF0C      		lsl r15
 4463               	.LVL385:
 4464               	.L345:
2392:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 4465               		.loc 1 2392 0
 4466 0134 AE0C      		add r10,r14
 4467 0136 BF1C      		adc r11,r15
 4468               	.LVL386:
 4469 0138 8E81      		ldd r24,Y+6
 4470 013a 9F81      		ldd r25,Y+7
 4471 013c A885      		ldd r26,Y+8
 4472 013e B985      		ldd r27,Y+9
 4473 0140 8E0D      		add r24,r14
 4474 0142 9F1D      		adc r25,r15
 4475 0144 A11D      		adc r26,__zero_reg__
 4476 0146 B11D      		adc r27,__zero_reg__
 4477 0148 8E83      		std Y+6,r24
 4478 014a 9F83      		std Y+7,r25
 4479 014c A887      		std Y+8,r26
 4480 014e B987      		std Y+9,r27
 4481 0150 F101      		movw r30,r2
 4482 0152 8081      		ld r24,Z
 4483 0154 9181      		ldd r25,Z+1
 4484 0156 8E0D      		add r24,r14
 4485 0158 9F1D      		adc r25,r15
 4486 015a 9183      		std Z+1,r25
 4487 015c 8083      		st Z,r24
 4488 015e CE18      		sub r12,r14
 4489 0160 DF08      		sbc r13,r15
 4490               	.LVL387:
 4491               	.L333:
2391:Lib/FATFs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4492               		.loc 1 2391 0
 4493 0162 C114      		cp r12,__zero_reg__
 4494 0164 D104      		cpc r13,__zero_reg__
 4495 0166 01F0      		breq .+2
 4496 0168 00C0      		rjmp .L348
 4497 016a 00C0      		rjmp .L359
 4498               	.LVL388:
 4499               	.L357:
2396:Lib/FATFs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 4500               		.loc 1 2396 0
 4501 016c 452B      		or r20,r21
 4502 016e 462B      		or r20,r22
 4503 0170 472B      		or r20,r23
 4504 0172 01F4      		brne .L336
2397:Lib/FATFs/ff.c **** 				} else {						/* Middle or end of the file */
 4505               		.loc 1 2397 0
 4506 0174 6E85      		ldd r22,Y+14
 4507 0176 7F85      		ldd r23,Y+15
 4508 0178 8889      		ldd r24,Y+16
 4509 017a 9989      		ldd r25,Y+17
 4510               	.LVL389:
 4511 017c 00C0      		rjmp .L337
 4512               	.LVL390:
 4513               	.L336:
2404:Lib/FATFs/ff.c **** 				}
 4514               		.loc 1 2404 0
 4515 017e 4A89      		ldd r20,Y+18
 4516 0180 5B89      		ldd r21,Y+19
 4517 0182 6C89      		ldd r22,Y+20
 4518 0184 7D89      		ldd r23,Y+21
 4519 0186 0E94 0000 		call get_fat
 4520               	.LVL391:
 4521               	.L337:
2406:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4522               		.loc 1 2406 0
 4523 018a 6230      		cpi r22,2
 4524 018c 7105      		cpc r23,__zero_reg__
 4525 018e 8105      		cpc r24,__zero_reg__
 4526 0190 9105      		cpc r25,__zero_reg__
 4527 0192 00F0      		brlo .L355
2407:Lib/FATFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 4528               		.loc 1 2407 0
 4529 0194 6F3F      		cpi r22,-1
 4530 0196 FFEF      		ldi r31,-1
 4531 0198 7F07      		cpc r23,r31
 4532 019a 8F07      		cpc r24,r31
 4533 019c 9F07      		cpc r25,r31
 4534 019e 01F4      		brne .+2
 4535 01a0 00C0      		rjmp .L356
2408:Lib/FATFs/ff.c **** 			}
 4536               		.loc 1 2408 0
 4537 01a2 6A8B      		std Y+18,r22
 4538 01a4 7B8B      		std Y+19,r23
 4539 01a6 8C8B      		std Y+20,r24
 4540 01a8 9D8B      		std Y+21,r25
 4541 01aa 00C0      		rjmp .L335
 4542               	.LVL392:
 4543               	.L355:
2411:Lib/FATFs/ff.c **** 			sect += csect;
 4544               		.loc 1 2411 0 discriminator 1
 4545 01ac 8C81      		ldd r24,Y+4
 4546 01ae 8068      		ori r24,lo8(-128)
 4547 01b0 8C83      		std Y+4,r24
 4548 01b2 00C0      		rjmp .L350
 4549               	.LVL393:
 4550               	.L358:
2421:Lib/FATFs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
 4551               		.loc 1 2421 0 discriminator 1
 4552 01b4 82A5      		ldd r24,Z+42
 4553 01b6 93A5      		ldd r25,Z+43
 4554 01b8 A4A5      		ldd r26,Z+44
 4555 01ba B5A5      		ldd r27,Z+45
 4556 01bc 8419      		sub r24,r4
 4557 01be 9509      		sbc r25,r5
 4558 01c0 A609      		sbc r26,r6
 4559 01c2 B709      		sbc r27,r7
 4560 01c4 A701      		movw r20,r14
 4561 01c6 60E0      		ldi r22,0
 4562 01c8 70E0      		ldi r23,0
 4563 01ca 8417      		cp r24,r20
 4564 01cc 9507      		cpc r25,r21
 4565 01ce A607      		cpc r26,r22
 4566 01d0 B707      		cpc r27,r23
 4567 01d2 00F0      		brlo .+2
 4568 01d4 00C0      		rjmp .L344
2422:Lib/FATFs/ff.c **** #else
 4569               		.loc 1 2422 0
 4570 01d6 BF01      		movw r22,r30
 4571 01d8 625D      		subi r22,-46
 4572 01da 7F4F      		sbci r23,-1
 4573 01dc 982F      		mov r25,r24
 4574 01de 8827      		clr r24
 4575 01e0 990F      		lsl r25
 4576 01e2 40E0      		ldi r20,0
 4577 01e4 52E0      		ldi r21,lo8(2)
 4578 01e6 8A0D      		add r24,r10
 4579 01e8 9B1D      		adc r25,r11
 4580 01ea 0E94 0000 		call mem_cpy
 4581               	.LVL394:
 4582 01ee 00C0      		rjmp .L344
 4583               	.L341:
2429:Lib/FATFs/ff.c **** 				continue;
2430:Lib/FATFs/ff.c **** 			}
2431:Lib/FATFs/ff.c **** #if !_FS_TINY
2432:Lib/FATFs/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
2433:Lib/FATFs/ff.c **** #if !_FS_READONLY
2434:Lib/FATFs/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2435:Lib/FATFs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2436:Lib/FATFs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2437:Lib/FATFs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2438:Lib/FATFs/ff.c **** 				}
2439:Lib/FATFs/ff.c **** #endif
2440:Lib/FATFs/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
2441:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2442:Lib/FATFs/ff.c **** 			}
2443:Lib/FATFs/ff.c **** #endif
2444:Lib/FATFs/ff.c **** 			fp->dsect = sect;
 4584               		.loc 1 2444 0
 4585 01f0 4E8A      		std Y+22,r4
 4586 01f2 5F8A      		std Y+23,r5
 4587 01f4 688E      		std Y+24,r6
 4588 01f6 798E      		std Y+25,r7
 4589               	.LVL395:
 4590               	.L334:
2445:Lib/FATFs/ff.c **** 		}
2446:Lib/FATFs/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 4591               		.loc 1 2446 0
 4592 01f8 8E81      		ldd r24,Y+6
 4593 01fa 9F81      		ldd r25,Y+7
 4594 01fc 9170      		andi r25,1
 4595 01fe 20E0      		ldi r18,0
 4596 0200 32E0      		ldi r19,lo8(2)
 4597 0202 281B      		sub r18,r24
 4598 0204 390B      		sbc r19,r25
 4599               	.LVL396:
 4600 0206 7601      		movw r14,r12
 4601 0208 2C15      		cp r18,r12
 4602 020a 3D05      		cpc r19,r13
 4603 020c 00F4      		brsh .L346
 4604 020e 7901      		movw r14,r18
 4605               	.L346:
 4606               	.LVL397:
2447:Lib/FATFs/ff.c **** 		if (rcnt > btr) rcnt = btr;
2448:Lib/FATFs/ff.c **** #if _FS_TINY
2449:Lib/FATFs/ff.c **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
 4607               		.loc 1 2449 0
 4608 0210 4E89      		ldd r20,Y+22
 4609 0212 5F89      		ldd r21,Y+23
 4610 0214 688D      		ldd r22,Y+24
 4611 0216 798D      		ldd r23,Y+25
 4612 0218 8881      		ld r24,Y
 4613 021a 9981      		ldd r25,Y+1
 4614 021c 0E94 0000 		call move_window
 4615               	.LVL398:
 4616 0220 8823      		tst r24
 4617 0222 01F0      		breq .L347
 4618               	.LVL399:
 4619               	.L356:
2450:Lib/FATFs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
 4620               		.loc 1 2450 0
 4621 0224 8C81      		ldd r24,Y+4
 4622 0226 8068      		ori r24,lo8(-128)
 4623 0228 8C83      		std Y+4,r24
 4624 022a 81E0      		ldi r24,lo8(1)
 4625 022c 00C0      		rjmp .L331
 4626               	.LVL400:
 4627               	.L347:
2451:Lib/FATFs/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 4628               		.loc 1 2451 0
 4629 022e 8E81      		ldd r24,Y+6
 4630 0230 9F81      		ldd r25,Y+7
 4631 0232 A885      		ldd r26,Y+8
 4632 0234 B985      		ldd r27,Y+9
 4633 0236 9170      		andi r25,1
 4634 0238 AA27      		clr r26
 4635 023a BB27      		clr r27
 4636 023c 8E96      		adiw r24,46
 4637 023e 6881      		ld r22,Y
 4638 0240 7981      		ldd r23,Y+1
 4639 0242 680F      		add r22,r24
 4640 0244 791F      		adc r23,r25
 4641 0246 A701      		movw r20,r14
 4642 0248 C501      		movw r24,r10
 4643 024a 0E94 0000 		call mem_cpy
 4644               	.LVL401:
 4645 024e 00C0      		rjmp .L345
 4646               	.LVL402:
 4647               	.L359:
2452:Lib/FATFs/ff.c **** #else
2453:Lib/FATFs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2454:Lib/FATFs/ff.c **** #endif
2455:Lib/FATFs/ff.c **** 	}
2456:Lib/FATFs/ff.c **** 
2457:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 4648               		.loc 1 2457 0
 4649 0250 80E0      		ldi r24,0
 4650 0252 00C0      		rjmp .L331
 4651               	.L350:
2385:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 4652               		.loc 1 2385 0
 4653 0254 82E0      		ldi r24,lo8(2)
 4654 0256 00C0      		rjmp .L331
 4655               	.LVL403:
 4656               	.L351:
2387:Lib/FATFs/ff.c **** 	remain = fp->fsize - fp->fptr;
 4657               		.loc 1 2387 0
 4658 0258 87E0      		ldi r24,lo8(7)
 4659               	.LVL404:
 4660               	.L331:
 4661               	/* epilogue start */
2458:Lib/FATFs/ff.c **** }
 4662               		.loc 1 2458 0
 4663 025a DF91      		pop r29
 4664 025c CF91      		pop r28
 4665               	.LVL405:
 4666 025e 1F91      		pop r17
 4667 0260 0F91      		pop r16
 4668 0262 FF90      		pop r15
 4669 0264 EF90      		pop r14
 4670 0266 DF90      		pop r13
 4671 0268 CF90      		pop r12
 4672               	.LVL406:
 4673 026a BF90      		pop r11
 4674 026c AF90      		pop r10
 4675               	.LVL407:
 4676 026e 9F90      		pop r9
 4677 0270 8F90      		pop r8
 4678 0272 7F90      		pop r7
 4679 0274 6F90      		pop r6
 4680 0276 5F90      		pop r5
 4681 0278 4F90      		pop r4
 4682 027a 3F90      		pop r3
 4683 027c 2F90      		pop r2
 4684               	.LVL408:
 4685 027e 0895      		ret
 4686               		.cfi_endproc
 4687               	.LFE161:
 4689               		.section	.text.f_write,"ax",@progbits
 4690               	.global	f_write
 4692               	f_write:
 4693               	.LFB162:
2459:Lib/FATFs/ff.c **** 
2460:Lib/FATFs/ff.c **** 
2461:Lib/FATFs/ff.c **** 
2462:Lib/FATFs/ff.c **** 
2463:Lib/FATFs/ff.c **** #if !_FS_READONLY
2464:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2465:Lib/FATFs/ff.c **** /* Write File                                                            */
2466:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2467:Lib/FATFs/ff.c **** 
2468:Lib/FATFs/ff.c **** FRESULT f_write (
2469:Lib/FATFs/ff.c **** 	FIL *fp,			/* Pointer to the file object */
2470:Lib/FATFs/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2471:Lib/FATFs/ff.c **** 	UINT btw,			/* Number of bytes to write */
2472:Lib/FATFs/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
2473:Lib/FATFs/ff.c **** )
2474:Lib/FATFs/ff.c **** {
 4694               		.loc 1 2474 0
 4695               		.cfi_startproc
 4696               	.LVL409:
 4697 0000 2F92      		push r2
 4698               	.LCFI117:
 4699               		.cfi_def_cfa_offset 3
 4700               		.cfi_offset 2, -2
 4701 0002 3F92      		push r3
 4702               	.LCFI118:
 4703               		.cfi_def_cfa_offset 4
 4704               		.cfi_offset 3, -3
 4705 0004 4F92      		push r4
 4706               	.LCFI119:
 4707               		.cfi_def_cfa_offset 5
 4708               		.cfi_offset 4, -4
 4709 0006 5F92      		push r5
 4710               	.LCFI120:
 4711               		.cfi_def_cfa_offset 6
 4712               		.cfi_offset 5, -5
 4713 0008 6F92      		push r6
 4714               	.LCFI121:
 4715               		.cfi_def_cfa_offset 7
 4716               		.cfi_offset 6, -6
 4717 000a 7F92      		push r7
 4718               	.LCFI122:
 4719               		.cfi_def_cfa_offset 8
 4720               		.cfi_offset 7, -7
 4721 000c 8F92      		push r8
 4722               	.LCFI123:
 4723               		.cfi_def_cfa_offset 9
 4724               		.cfi_offset 8, -8
 4725 000e 9F92      		push r9
 4726               	.LCFI124:
 4727               		.cfi_def_cfa_offset 10
 4728               		.cfi_offset 9, -9
 4729 0010 AF92      		push r10
 4730               	.LCFI125:
 4731               		.cfi_def_cfa_offset 11
 4732               		.cfi_offset 10, -10
 4733 0012 BF92      		push r11
 4734               	.LCFI126:
 4735               		.cfi_def_cfa_offset 12
 4736               		.cfi_offset 11, -11
 4737 0014 CF92      		push r12
 4738               	.LCFI127:
 4739               		.cfi_def_cfa_offset 13
 4740               		.cfi_offset 12, -12
 4741 0016 DF92      		push r13
 4742               	.LCFI128:
 4743               		.cfi_def_cfa_offset 14
 4744               		.cfi_offset 13, -13
 4745 0018 EF92      		push r14
 4746               	.LCFI129:
 4747               		.cfi_def_cfa_offset 15
 4748               		.cfi_offset 14, -14
 4749 001a FF92      		push r15
 4750               	.LCFI130:
 4751               		.cfi_def_cfa_offset 16
 4752               		.cfi_offset 15, -15
 4753 001c 0F93      		push r16
 4754               	.LCFI131:
 4755               		.cfi_def_cfa_offset 17
 4756               		.cfi_offset 16, -16
 4757 001e 1F93      		push r17
 4758               	.LCFI132:
 4759               		.cfi_def_cfa_offset 18
 4760               		.cfi_offset 17, -17
 4761 0020 CF93      		push r28
 4762               	.LCFI133:
 4763               		.cfi_def_cfa_offset 19
 4764               		.cfi_offset 28, -18
 4765 0022 DF93      		push r29
 4766               	.LCFI134:
 4767               		.cfi_def_cfa_offset 20
 4768               		.cfi_offset 29, -19
 4769               	/* prologue: function */
 4770               	/* frame size = 0 */
 4771               	/* stack size = 18 */
 4772               	.L__stack_usage = 18
 4773 0024 EC01      		movw r28,r24
 4774 0026 5B01      		movw r10,r22
 4775 0028 6A01      		movw r12,r20
 4776 002a 1901      		movw r2,r18
 4777               	.LVL410:
2475:Lib/FATFs/ff.c **** 	FRESULT res;
2476:Lib/FATFs/ff.c **** 	DWORD clst, sect;
2477:Lib/FATFs/ff.c **** 	UINT wcnt, cc;
2478:Lib/FATFs/ff.c **** 	const BYTE *wbuff = buff;
2479:Lib/FATFs/ff.c **** 	BYTE csect;
2480:Lib/FATFs/ff.c **** 
2481:Lib/FATFs/ff.c **** 
2482:Lib/FATFs/ff.c **** 	*bw = 0;	/* Initialize byte counter */
 4778               		.loc 1 2482 0
 4779 002c F901      		movw r30,r18
 4780 002e 1182      		std Z+1,__zero_reg__
 4781 0030 1082      		st Z,__zero_reg__
2483:Lib/FATFs/ff.c **** 
2484:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);			/* Check validity */
 4782               		.loc 1 2484 0
 4783 0032 6A81      		ldd r22,Y+2
 4784 0034 7B81      		ldd r23,Y+3
 4785               	.LVL411:
 4786 0036 8881      		ld r24,Y
 4787 0038 9981      		ldd r25,Y+1
 4788               	.LVL412:
 4789 003a 0E94 0000 		call validate
 4790               	.LVL413:
2485:Lib/FATFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4791               		.loc 1 2485 0
 4792 003e 8111      		cpse r24,__zero_reg__
 4793 0040 00C0      		rjmp .L361
2486:Lib/FATFs/ff.c **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
 4794               		.loc 1 2486 0
 4795 0042 8C81      		ldd r24,Y+4
 4796               	.LVL414:
 4797 0044 87FD      		sbrc r24,7
 4798 0046 00C0      		rjmp .L386
2487:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2488:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 4799               		.loc 1 2488 0
 4800 0048 81FF      		sbrs r24,1
 4801 004a 00C0      		rjmp .L387
2489:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2490:Lib/FATFs/ff.c **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 4802               		.loc 1 2490 0
 4803 004c 8A85      		ldd r24,Y+10
 4804 004e 9B85      		ldd r25,Y+11
 4805 0050 AC85      		ldd r26,Y+12
 4806 0052 BD85      		ldd r27,Y+13
 4807 0054 AC01      		movw r20,r24
 4808 0056 BD01      		movw r22,r26
 4809 0058 4C0D      		add r20,r12
 4810 005a 5D1D      		adc r21,r13
 4811 005c 611D      		adc r22,__zero_reg__
 4812 005e 711D      		adc r23,__zero_reg__
 4813 0060 4817      		cp r20,r24
 4814 0062 5907      		cpc r21,r25
 4815 0064 6A07      		cpc r22,r26
 4816 0066 7B07      		cpc r23,r27
 4817 0068 00F0      		brlo .+2
 4818 006a 00C0      		rjmp .L363
 4819               	.LVL415:
 4820               	.L362:
2491:Lib/FATFs/ff.c **** 
2492:Lib/FATFs/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
2493:Lib/FATFs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2494:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
2495:Lib/FATFs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2496:Lib/FATFs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
2497:Lib/FATFs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
2498:Lib/FATFs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
2499:Lib/FATFs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
2500:Lib/FATFs/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2501:Lib/FATFs/ff.c **** 				} else {					/* Middle or end of the file */
2502:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2503:Lib/FATFs/ff.c **** 					if (fp->cltbl)
2504:Lib/FATFs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2505:Lib/FATFs/ff.c **** 					else
2506:Lib/FATFs/ff.c **** #endif
2507:Lib/FATFs/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2508:Lib/FATFs/ff.c **** 				}
2509:Lib/FATFs/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2510:Lib/FATFs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2511:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2512:Lib/FATFs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
2513:Lib/FATFs/ff.c **** 			}
2514:Lib/FATFs/ff.c **** #if _FS_TINY
2515:Lib/FATFs/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
2516:Lib/FATFs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2517:Lib/FATFs/ff.c **** #else
2518:Lib/FATFs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2519:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2520:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2521:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2522:Lib/FATFs/ff.c **** 			}
2523:Lib/FATFs/ff.c **** #endif
2524:Lib/FATFs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2525:Lib/FATFs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2526:Lib/FATFs/ff.c **** 			sect += csect;
2527:Lib/FATFs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2528:Lib/FATFs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
2529:Lib/FATFs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2530:Lib/FATFs/ff.c **** 					cc = fp->fs->csize - csect;
2531:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
2532:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2533:Lib/FATFs/ff.c **** #if _FS_TINY
2534:Lib/FATFs/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2535:Lib/FATFs/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2536:Lib/FATFs/ff.c **** 					fp->fs->wflag = 0;
2537:Lib/FATFs/ff.c **** 				}
2538:Lib/FATFs/ff.c **** #else
2539:Lib/FATFs/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
2540:Lib/FATFs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2541:Lib/FATFs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2542:Lib/FATFs/ff.c **** 				}
2543:Lib/FATFs/ff.c **** #endif
2544:Lib/FATFs/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
2545:Lib/FATFs/ff.c **** 				continue;
2546:Lib/FATFs/ff.c **** 			}
2547:Lib/FATFs/ff.c **** #if _FS_TINY
2548:Lib/FATFs/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2549:Lib/FATFs/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2550:Lib/FATFs/ff.c **** 				fp->fs->winsect = sect;
2551:Lib/FATFs/ff.c **** 			}
2552:Lib/FATFs/ff.c **** #else
2553:Lib/FATFs/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2554:Lib/FATFs/ff.c **** 				if (fp->fptr < fp->fsize &&
2555:Lib/FATFs/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2556:Lib/FATFs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2557:Lib/FATFs/ff.c **** 			}
2558:Lib/FATFs/ff.c **** #endif
2559:Lib/FATFs/ff.c **** 			fp->dsect = sect;
2560:Lib/FATFs/ff.c **** 		}
2561:Lib/FATFs/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2562:Lib/FATFs/ff.c **** 		if (wcnt > btw) wcnt = btw;
2563:Lib/FATFs/ff.c **** #if _FS_TINY
2564:Lib/FATFs/ff.c **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2565:Lib/FATFs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2566:Lib/FATFs/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2567:Lib/FATFs/ff.c **** 		fp->fs->wflag = 1;
2568:Lib/FATFs/ff.c **** #else
2569:Lib/FATFs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2570:Lib/FATFs/ff.c **** 		fp->flag |= FA__DIRTY;
2571:Lib/FATFs/ff.c **** #endif
2572:Lib/FATFs/ff.c **** 	}
2573:Lib/FATFs/ff.c **** 
2574:Lib/FATFs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 4821               		.loc 1 2574 0
 4822 006c 8E81      		ldd r24,Y+6
 4823 006e 9F81      		ldd r25,Y+7
 4824 0070 A885      		ldd r26,Y+8
 4825 0072 B985      		ldd r27,Y+9
 4826 0074 4A85      		ldd r20,Y+10
 4827 0076 5B85      		ldd r21,Y+11
 4828 0078 6C85      		ldd r22,Y+12
 4829 007a 7D85      		ldd r23,Y+13
 4830 007c 4817      		cp r20,r24
 4831 007e 5907      		cpc r21,r25
 4832 0080 6A07      		cpc r22,r26
 4833 0082 7B07      		cpc r23,r27
 4834 0084 00F0      		brlo .+2
 4835 0086 00C0      		rjmp .L365
 4836               		.loc 1 2574 0 is_stmt 0 discriminator 1
 4837 0088 8A87      		std Y+10,r24
 4838 008a 9B87      		std Y+11,r25
 4839 008c AC87      		std Y+12,r26
 4840 008e BD87      		std Y+13,r27
 4841 0090 00C0      		rjmp .L365
 4842               	.L384:
2494:Lib/FATFs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 4843               		.loc 1 2494 0 is_stmt 1
 4844 0092 4E81      		ldd r20,Y+6
 4845 0094 5F81      		ldd r21,Y+7
 4846 0096 6885      		ldd r22,Y+8
 4847 0098 7985      		ldd r23,Y+9
 4848 009a DB01      		movw r26,r22
 4849 009c CA01      		movw r24,r20
 4850 009e 9170      		andi r25,1
 4851 00a0 AA27      		clr r26
 4852 00a2 BB27      		clr r27
 4853 00a4 892B      		or r24,r25
 4854 00a6 8A2B      		or r24,r26
 4855 00a8 8B2B      		or r24,r27
 4856 00aa 01F0      		breq .+2
 4857 00ac 00C0      		rjmp .L366
2495:Lib/FATFs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 4858               		.loc 1 2495 0
 4859 00ae E881      		ld r30,Y
 4860 00b0 F981      		ldd r31,Y+1
 4861 00b2 2281      		ldd r18,Z+2
 4862 00b4 2150      		subi r18,lo8(-(-1))
 4863 00b6 2A01      		movw r4,r20
 4864 00b8 3B01      		movw r6,r22
 4865 00ba A9E0      		ldi r26,9
 4866               		1:
 4867 00bc 7694      		lsr r7
 4868 00be 6794      		ror r6
 4869 00c0 5794      		ror r5
 4870 00c2 4794      		ror r4
 4871 00c4 AA95      		dec r26
 4872 00c6 01F4      		brne 1b
 4873 00c8 122F      		mov r17,r18
 4874 00ca 1421      		and r17,r4
 4875               	.LVL416:
2496:Lib/FATFs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 4876               		.loc 1 2496 0
 4877 00cc 01F4      		brne .+2
 4878 00ce 00C0      		rjmp .L396
 4879               	.L367:
2515:Lib/FATFs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 4880               		.loc 1 2515 0
 4881 00d0 8881      		ld r24,Y
 4882 00d2 9981      		ldd r25,Y+1
 4883 00d4 FC01      		movw r30,r24
 4884 00d6 42A4      		ldd r4,Z+42
 4885 00d8 53A4      		ldd r5,Z+43
 4886 00da 64A4      		ldd r6,Z+44
 4887 00dc 75A4      		ldd r7,Z+45
 4888 00de 4E89      		ldd r20,Y+22
 4889 00e0 5F89      		ldd r21,Y+23
 4890 00e2 688D      		ldd r22,Y+24
 4891 00e4 798D      		ldd r23,Y+25
 4892 00e6 4416      		cp r4,r20
 4893 00e8 5506      		cpc r5,r21
 4894 00ea 6606      		cpc r6,r22
 4895 00ec 7706      		cpc r7,r23
 4896 00ee 01F4      		brne .+2
 4897 00f0 00C0      		rjmp .L397
 4898               	.L373:
2524:Lib/FATFs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4899               		.loc 1 2524 0
 4900 00f2 8880      		ld r8,Y
 4901 00f4 9980      		ldd r9,Y+1
 4902 00f6 4A89      		ldd r20,Y+18
 4903 00f8 5B89      		ldd r21,Y+19
 4904 00fa 6C89      		ldd r22,Y+20
 4905 00fc 7D89      		ldd r23,Y+21
 4906 00fe C401      		movw r24,r8
 4907 0100 0E94 0000 		call clust2sect
 4908               	.LVL417:
2525:Lib/FATFs/ff.c **** 			sect += csect;
 4909               		.loc 1 2525 0
 4910 0104 6115      		cp r22,__zero_reg__
 4911 0106 7105      		cpc r23,__zero_reg__
 4912 0108 8105      		cpc r24,__zero_reg__
 4913 010a 9105      		cpc r25,__zero_reg__
 4914 010c 01F4      		brne .+2
 4915 010e 00C0      		rjmp .L394
2526:Lib/FATFs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 4916               		.loc 1 2526 0
 4917 0110 2B01      		movw r4,r22
 4918 0112 3C01      		movw r6,r24
 4919 0114 410E      		add r4,r17
 4920 0116 511C      		adc r5,__zero_reg__
 4921 0118 611C      		adc r6,__zero_reg__
 4922 011a 711C      		adc r7,__zero_reg__
 4923               	.LVL418:
2527:Lib/FATFs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 4924               		.loc 1 2527 0
 4925 011c 7601      		movw r14,r12
 4926 011e EF2C      		mov r14,r15
 4927 0120 FF24      		clr r15
 4928 0122 E694      		lsr r14
 4929               	.LVL419:
2528:Lib/FATFs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 4930               		.loc 1 2528 0
 4931 0124 E114      		cp r14,__zero_reg__
 4932 0126 F104      		cpc r15,__zero_reg__
 4933 0128 01F4      		brne .+2
 4934 012a 00C0      		rjmp .L375
2529:Lib/FATFs/ff.c **** 					cc = fp->fs->csize - csect;
 4935               		.loc 1 2529 0
 4936 012c F401      		movw r30,r8
 4937 012e 8281      		ldd r24,Z+2
 4938 0130 212F      		mov r18,r17
 4939 0132 30E0      		ldi r19,0
 4940 0134 A901      		movw r20,r18
 4941 0136 4E0D      		add r20,r14
 4942 0138 5F1D      		adc r21,r15
 4943 013a 90E0      		ldi r25,0
 4944 013c 8417      		cp r24,r20
 4945 013e 9507      		cpc r25,r21
 4946 0140 00F4      		brsh .L376
2530:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 4947               		.loc 1 2530 0
 4948 0142 7C01      		movw r14,r24
 4949               	.LVL420:
 4950 0144 E21A      		sub r14,r18
 4951 0146 F30A      		sbc r15,r19
 4952               	.LVL421:
 4953               	.L376:
2531:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 4954               		.loc 1 2531 0
 4955 0148 0E2D      		mov r16,r14
 4956 014a A301      		movw r20,r6
 4957 014c 9201      		movw r18,r4
 4958 014e B501      		movw r22,r10
 4959 0150 F401      		movw r30,r8
 4960 0152 8181      		ldd r24,Z+1
 4961 0154 0E94 0000 		call disk_write
 4962               	.LVL422:
 4963 0158 8111      		cpse r24,__zero_reg__
 4964 015a 00C0      		rjmp .L395
2534:Lib/FATFs/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 4965               		.loc 1 2534 0
 4966 015c 8881      		ld r24,Y
 4967 015e 9981      		ldd r25,Y+1
 4968 0160 FC01      		movw r30,r24
 4969 0162 42A5      		ldd r20,Z+42
 4970 0164 53A5      		ldd r21,Z+43
 4971 0166 64A5      		ldd r22,Z+44
 4972 0168 75A5      		ldd r23,Z+45
 4973 016a 4419      		sub r20,r4
 4974 016c 5509      		sbc r21,r5
 4975 016e 6609      		sbc r22,r6
 4976 0170 7709      		sbc r23,r7
 4977 0172 2701      		movw r4,r14
 4978               	.LVL423:
 4979 0174 612C      		mov r6,__zero_reg__
 4980 0176 712C      		mov r7,__zero_reg__
 4981 0178 4415      		cp r20,r4
 4982 017a 5505      		cpc r21,r5
 4983 017c 6605      		cpc r22,r6
 4984 017e 7705      		cpc r23,r7
 4985 0180 00F4      		brsh .L378
2535:Lib/FATFs/ff.c **** 					fp->fs->wflag = 0;
 4986               		.loc 1 2535 0
 4987 0182 542F      		mov r21,r20
 4988 0184 4427      		clr r20
 4989 0186 550F      		lsl r21
 4990 0188 B501      		movw r22,r10
 4991 018a 640F      		add r22,r20
 4992 018c 751F      		adc r23,r21
 4993 018e 40E0      		ldi r20,0
 4994 0190 52E0      		ldi r21,lo8(2)
 4995 0192 8E96      		adiw r24,46
 4996 0194 0E94 0000 		call mem_cpy
 4997               	.LVL424:
2536:Lib/FATFs/ff.c **** 				}
 4998               		.loc 1 2536 0
 4999 0198 E881      		ld r30,Y
 5000 019a F981      		ldd r31,Y+1
 5001 019c 1482      		std Z+4,__zero_reg__
 5002               	.L378:
2544:Lib/FATFs/ff.c **** 				continue;
 5003               		.loc 1 2544 0
 5004 019e FE2C      		mov r15,r14
 5005 01a0 EE24      		clr r14
 5006 01a2 FF0C      		lsl r15
 5007               	.LVL425:
 5008               	.L379:
2493:Lib/FATFs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 5009               		.loc 1 2493 0
 5010 01a4 AE0C      		add r10,r14
 5011 01a6 BF1C      		adc r11,r15
 5012               	.LVL426:
 5013 01a8 8E81      		ldd r24,Y+6
 5014 01aa 9F81      		ldd r25,Y+7
 5015 01ac A885      		ldd r26,Y+8
 5016 01ae B985      		ldd r27,Y+9
 5017 01b0 8E0D      		add r24,r14
 5018 01b2 9F1D      		adc r25,r15
 5019 01b4 A11D      		adc r26,__zero_reg__
 5020 01b6 B11D      		adc r27,__zero_reg__
 5021 01b8 8E83      		std Y+6,r24
 5022 01ba 9F83      		std Y+7,r25
 5023 01bc A887      		std Y+8,r26
 5024 01be B987      		std Y+9,r27
 5025 01c0 F101      		movw r30,r2
 5026 01c2 8081      		ld r24,Z
 5027 01c4 9181      		ldd r25,Z+1
 5028 01c6 8E0D      		add r24,r14
 5029 01c8 9F1D      		adc r25,r15
 5030 01ca 9183      		std Z+1,r25
 5031 01cc 8083      		st Z,r24
 5032 01ce CE18      		sub r12,r14
 5033 01d0 DF08      		sbc r13,r15
 5034               	.LVL427:
 5035               	.L363:
2492:Lib/FATFs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 5036               		.loc 1 2492 0
 5037 01d2 C114      		cp r12,__zero_reg__
 5038 01d4 D104      		cpc r13,__zero_reg__
 5039 01d6 01F0      		breq .+2
 5040 01d8 00C0      		rjmp .L384
 5041 01da 00C0      		rjmp .L362
 5042               	.LVL428:
 5043               	.L396:
2497:Lib/FATFs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 5044               		.loc 1 2497 0
 5045 01dc 452B      		or r20,r21
 5046 01de 462B      		or r20,r22
 5047 01e0 472B      		or r20,r23
 5048 01e2 01F4      		brne .L368
2498:Lib/FATFs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 5049               		.loc 1 2498 0
 5050 01e4 6E85      		ldd r22,Y+14
 5051 01e6 7F85      		ldd r23,Y+15
 5052 01e8 8889      		ldd r24,Y+16
 5053 01ea 9989      		ldd r25,Y+17
 5054               	.LVL429:
2499:Lib/FATFs/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 5055               		.loc 1 2499 0
 5056 01ec 6115      		cp r22,__zero_reg__
 5057 01ee 7105      		cpc r23,__zero_reg__
 5058 01f0 8105      		cpc r24,__zero_reg__
 5059 01f2 9105      		cpc r25,__zero_reg__
 5060 01f4 01F4      		brne .L369
2500:Lib/FATFs/ff.c **** 				} else {					/* Middle or end of the file */
 5061               		.loc 1 2500 0
 5062 01f6 40E0      		ldi r20,0
 5063 01f8 50E0      		ldi r21,0
 5064 01fa BA01      		movw r22,r20
 5065 01fc CF01      		movw r24,r30
 5066 01fe 0E94 0000 		call create_chain
 5067               	.LVL430:
 5068 0202 6E87      		std Y+14,r22
 5069 0204 7F87      		std Y+15,r23
 5070 0206 888B      		std Y+16,r24
 5071 0208 998B      		std Y+17,r25
 5072 020a 00C0      		rjmp .L370
 5073               	.LVL431:
 5074               	.L368:
2507:Lib/FATFs/ff.c **** 				}
 5075               		.loc 1 2507 0
 5076 020c 4A89      		ldd r20,Y+18
 5077 020e 5B89      		ldd r21,Y+19
 5078 0210 6C89      		ldd r22,Y+20
 5079 0212 7D89      		ldd r23,Y+21
 5080 0214 CF01      		movw r24,r30
 5081 0216 0E94 0000 		call create_chain
 5082               	.LVL432:
 5083               	.L370:
2509:Lib/FATFs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5084               		.loc 1 2509 0
 5085 021a 6115      		cp r22,__zero_reg__
 5086 021c 7105      		cpc r23,__zero_reg__
 5087 021e 8105      		cpc r24,__zero_reg__
 5088 0220 9105      		cpc r25,__zero_reg__
 5089 0222 01F4      		brne .+2
 5090 0224 00C0      		rjmp .L362
 5091               	.L369:
2510:Lib/FATFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5092               		.loc 1 2510 0
 5093 0226 6130      		cpi r22,1
 5094 0228 7105      		cpc r23,__zero_reg__
 5095 022a 8105      		cpc r24,__zero_reg__
 5096 022c 9105      		cpc r25,__zero_reg__
 5097 022e 01F0      		breq .L394
2511:Lib/FATFs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 5098               		.loc 1 2511 0
 5099 0230 6F3F      		cpi r22,-1
 5100 0232 FFEF      		ldi r31,-1
 5101 0234 7F07      		cpc r23,r31
 5102 0236 8F07      		cpc r24,r31
 5103 0238 9F07      		cpc r25,r31
 5104 023a 01F4      		brne .+2
 5105 023c 00C0      		rjmp .L395
2512:Lib/FATFs/ff.c **** 			}
 5106               		.loc 1 2512 0
 5107 023e 6A8B      		std Y+18,r22
 5108 0240 7B8B      		std Y+19,r23
 5109 0242 8C8B      		std Y+20,r24
 5110 0244 9D8B      		std Y+21,r25
 5111 0246 00C0      		rjmp .L367
 5112               	.LVL433:
 5113               	.L397:
2515:Lib/FATFs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 5114               		.loc 1 2515 0 discriminator 1
 5115 0248 40E0      		ldi r20,0
 5116 024a 50E0      		ldi r21,0
 5117 024c BA01      		movw r22,r20
 5118 024e 0E94 0000 		call move_window
 5119               	.LVL434:
 5120 0252 8823      		tst r24
 5121 0254 01F4      		brne .+2
 5122 0256 00C0      		rjmp .L373
 5123 0258 00C0      		rjmp .L395
 5124               	.L394:
2525:Lib/FATFs/ff.c **** 			sect += csect;
 5125               		.loc 1 2525 0 discriminator 1
 5126 025a 8C81      		ldd r24,Y+4
 5127 025c 8068      		ori r24,lo8(-128)
 5128 025e 8C83      		std Y+4,r24
 5129 0260 00C0      		rjmp .L386
 5130               	.LVL435:
 5131               	.L375:
2548:Lib/FATFs/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
 5132               		.loc 1 2548 0
 5133 0262 4E81      		ldd r20,Y+6
 5134 0264 5F81      		ldd r21,Y+7
 5135 0266 6885      		ldd r22,Y+8
 5136 0268 7985      		ldd r23,Y+9
 5137 026a 8A85      		ldd r24,Y+10
 5138 026c 9B85      		ldd r25,Y+11
 5139 026e AC85      		ldd r26,Y+12
 5140 0270 BD85      		ldd r27,Y+13
 5141 0272 4817      		cp r20,r24
 5142 0274 5907      		cpc r21,r25
 5143 0276 6A07      		cpc r22,r26
 5144 0278 7B07      		cpc r23,r27
 5145 027a 00F0      		brlo .L380
2549:Lib/FATFs/ff.c **** 				fp->fs->winsect = sect;
 5146               		.loc 1 2549 0
 5147 027c 40E0      		ldi r20,0
 5148 027e 50E0      		ldi r21,0
 5149 0280 BA01      		movw r22,r20
 5150 0282 C401      		movw r24,r8
 5151 0284 0E94 0000 		call move_window
 5152               	.LVL436:
 5153 0288 8111      		cpse r24,__zero_reg__
 5154 028a 00C0      		rjmp .L395
2550:Lib/FATFs/ff.c **** 			}
 5155               		.loc 1 2550 0
 5156 028c E881      		ld r30,Y
 5157 028e F981      		ldd r31,Y+1
 5158 0290 42A6      		std Z+42,r4
 5159 0292 53A6      		std Z+43,r5
 5160 0294 64A6      		std Z+44,r6
 5161 0296 75A6      		std Z+45,r7
 5162               	.L380:
2559:Lib/FATFs/ff.c **** 		}
 5163               		.loc 1 2559 0
 5164 0298 4E8A      		std Y+22,r4
 5165 029a 5F8A      		std Y+23,r5
 5166 029c 688E      		std Y+24,r6
 5167 029e 798E      		std Y+25,r7
 5168               	.LVL437:
 5169               	.L366:
2561:Lib/FATFs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 5170               		.loc 1 2561 0
 5171 02a0 8E81      		ldd r24,Y+6
 5172 02a2 9F81      		ldd r25,Y+7
 5173 02a4 9170      		andi r25,1
 5174 02a6 20E0      		ldi r18,0
 5175 02a8 32E0      		ldi r19,lo8(2)
 5176 02aa 281B      		sub r18,r24
 5177 02ac 390B      		sbc r19,r25
 5178               	.LVL438:
 5179 02ae 7601      		movw r14,r12
 5180 02b0 2C15      		cp r18,r12
 5181 02b2 3D05      		cpc r19,r13
 5182 02b4 00F4      		brsh .L382
 5183 02b6 7901      		movw r14,r18
 5184               	.L382:
 5185               	.LVL439:
2564:Lib/FATFs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
 5186               		.loc 1 2564 0
 5187 02b8 4E89      		ldd r20,Y+22
 5188 02ba 5F89      		ldd r21,Y+23
 5189 02bc 688D      		ldd r22,Y+24
 5190 02be 798D      		ldd r23,Y+25
 5191 02c0 8881      		ld r24,Y
 5192 02c2 9981      		ldd r25,Y+1
 5193 02c4 0E94 0000 		call move_window
 5194               	.LVL440:
 5195 02c8 8823      		tst r24
 5196 02ca 01F0      		breq .L383
 5197               	.LVL441:
 5198               	.L395:
2565:Lib/FATFs/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 5199               		.loc 1 2565 0
 5200 02cc 8C81      		ldd r24,Y+4
 5201 02ce 8068      		ori r24,lo8(-128)
 5202 02d0 8C83      		std Y+4,r24
 5203 02d2 81E0      		ldi r24,lo8(1)
 5204 02d4 00C0      		rjmp .L361
 5205               	.LVL442:
 5206               	.L383:
2566:Lib/FATFs/ff.c **** 		fp->fs->wflag = 1;
 5207               		.loc 1 2566 0
 5208 02d6 8E81      		ldd r24,Y+6
 5209 02d8 9F81      		ldd r25,Y+7
 5210 02da A885      		ldd r26,Y+8
 5211 02dc B985      		ldd r27,Y+9
 5212 02de 9170      		andi r25,1
 5213 02e0 AA27      		clr r26
 5214 02e2 BB27      		clr r27
 5215 02e4 8E96      		adiw r24,46
 5216 02e6 2881      		ld r18,Y
 5217 02e8 3981      		ldd r19,Y+1
 5218 02ea A701      		movw r20,r14
 5219 02ec B501      		movw r22,r10
 5220 02ee 820F      		add r24,r18
 5221 02f0 931F      		adc r25,r19
 5222 02f2 0E94 0000 		call mem_cpy
 5223               	.LVL443:
2567:Lib/FATFs/ff.c **** #else
 5224               		.loc 1 2567 0
 5225 02f6 E881      		ld r30,Y
 5226 02f8 F981      		ldd r31,Y+1
 5227 02fa 31E0      		ldi r19,lo8(1)
 5228 02fc 3483      		std Z+4,r19
 5229 02fe 00C0      		rjmp .L379
 5230               	.LVL444:
 5231               	.L365:
2575:Lib/FATFs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 5232               		.loc 1 2575 0
 5233 0300 8C81      		ldd r24,Y+4
 5234 0302 8062      		ori r24,lo8(32)
 5235 0304 8C83      		std Y+4,r24
2576:Lib/FATFs/ff.c **** 
2577:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 5236               		.loc 1 2577 0
 5237 0306 80E0      		ldi r24,0
 5238 0308 00C0      		rjmp .L361
 5239               	.L386:
2487:Lib/FATFs/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 5240               		.loc 1 2487 0
 5241 030a 82E0      		ldi r24,lo8(2)
 5242 030c 00C0      		rjmp .L361
 5243               	.LVL445:
 5244               	.L387:
2489:Lib/FATFs/ff.c **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 5245               		.loc 1 2489 0
 5246 030e 87E0      		ldi r24,lo8(7)
 5247               	.LVL446:
 5248               	.L361:
 5249               	/* epilogue start */
2578:Lib/FATFs/ff.c **** }
 5250               		.loc 1 2578 0
 5251 0310 DF91      		pop r29
 5252 0312 CF91      		pop r28
 5253               	.LVL447:
 5254 0314 1F91      		pop r17
 5255 0316 0F91      		pop r16
 5256 0318 FF90      		pop r15
 5257 031a EF90      		pop r14
 5258 031c DF90      		pop r13
 5259 031e CF90      		pop r12
 5260               	.LVL448:
 5261 0320 BF90      		pop r11
 5262 0322 AF90      		pop r10
 5263               	.LVL449:
 5264 0324 9F90      		pop r9
 5265 0326 8F90      		pop r8
 5266 0328 7F90      		pop r7
 5267 032a 6F90      		pop r6
 5268 032c 5F90      		pop r5
 5269 032e 4F90      		pop r4
 5270 0330 3F90      		pop r3
 5271 0332 2F90      		pop r2
 5272               	.LVL450:
 5273 0334 0895      		ret
 5274               		.cfi_endproc
 5275               	.LFE162:
 5277               		.section	.text.f_sync,"ax",@progbits
 5278               	.global	f_sync
 5280               	f_sync:
 5281               	.LFB163:
2579:Lib/FATFs/ff.c **** 
2580:Lib/FATFs/ff.c **** 
2581:Lib/FATFs/ff.c **** 
2582:Lib/FATFs/ff.c **** 
2583:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2584:Lib/FATFs/ff.c **** /* Synchronize the File Object                                           */
2585:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2586:Lib/FATFs/ff.c **** 
2587:Lib/FATFs/ff.c **** FRESULT f_sync (
2588:Lib/FATFs/ff.c **** 	FIL *fp		/* Pointer to the file object */
2589:Lib/FATFs/ff.c **** )
2590:Lib/FATFs/ff.c **** {
 5282               		.loc 1 2590 0
 5283               		.cfi_startproc
 5284               	.LVL451:
 5285 0000 0F93      		push r16
 5286               	.LCFI135:
 5287               		.cfi_def_cfa_offset 3
 5288               		.cfi_offset 16, -2
 5289 0002 1F93      		push r17
 5290               	.LCFI136:
 5291               		.cfi_def_cfa_offset 4
 5292               		.cfi_offset 17, -3
 5293 0004 CF93      		push r28
 5294               	.LCFI137:
 5295               		.cfi_def_cfa_offset 5
 5296               		.cfi_offset 28, -4
 5297 0006 DF93      		push r29
 5298               	.LCFI138:
 5299               		.cfi_def_cfa_offset 6
 5300               		.cfi_offset 29, -5
 5301               	/* prologue: function */
 5302               	/* frame size = 0 */
 5303               	/* stack size = 4 */
 5304               	.L__stack_usage = 4
 5305 0008 EC01      		movw r28,r24
2591:Lib/FATFs/ff.c **** 	FRESULT res;
2592:Lib/FATFs/ff.c **** 	DWORD tim;
2593:Lib/FATFs/ff.c **** 	BYTE *dir;
2594:Lib/FATFs/ff.c **** 
2595:Lib/FATFs/ff.c **** 
2596:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5306               		.loc 1 2596 0
 5307 000a 6A81      		ldd r22,Y+2
 5308 000c 7B81      		ldd r23,Y+3
 5309 000e 8881      		ld r24,Y
 5310 0010 9981      		ldd r25,Y+1
 5311               	.LVL452:
 5312 0012 0E94 0000 		call validate
 5313               	.LVL453:
 5314 0016 982F      		mov r25,r24
 5315               	.LVL454:
2597:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
 5316               		.loc 1 2597 0
 5317 0018 8111      		cpse r24,__zero_reg__
 5318 001a 00C0      		rjmp .L399
2598:Lib/FATFs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 5319               		.loc 1 2598 0
 5320 001c 8C81      		ldd r24,Y+4
 5321               	.LVL455:
 5322 001e 85FF      		sbrs r24,5
 5323 0020 00C0      		rjmp .L399
2599:Lib/FATFs/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
2600:Lib/FATFs/ff.c **** 			if (fp->flag & FA__DIRTY) {
2601:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2602:Lib/FATFs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2603:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2604:Lib/FATFs/ff.c **** 			}
2605:Lib/FATFs/ff.c **** #endif
2606:Lib/FATFs/ff.c **** 			/* Update the directory entry */
2607:Lib/FATFs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 5324               		.loc 1 2607 0
 5325 0022 4A8D      		ldd r20,Y+26
 5326 0024 5B8D      		ldd r21,Y+27
 5327 0026 6C8D      		ldd r22,Y+28
 5328 0028 7D8D      		ldd r23,Y+29
 5329 002a 8881      		ld r24,Y
 5330 002c 9981      		ldd r25,Y+1
 5331 002e 0E94 0000 		call move_window
 5332               	.LVL456:
 5333 0032 982F      		mov r25,r24
 5334               	.LVL457:
2608:Lib/FATFs/ff.c **** 			if (res == FR_OK) {
 5335               		.loc 1 2608 0
 5336 0034 8111      		cpse r24,__zero_reg__
 5337 0036 00C0      		rjmp .L399
2609:Lib/FATFs/ff.c **** 				dir = fp->dir_ptr;
 5338               		.loc 1 2609 0
 5339 0038 0E8D      		ldd r16,Y+30
 5340 003a 1F8D      		ldd r17,Y+31
 5341               	.LVL458:
2610:Lib/FATFs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 5342               		.loc 1 2610 0
 5343 003c F801      		movw r30,r16
 5344 003e 8385      		ldd r24,Z+11
 5345               	.LVL459:
 5346 0040 8062      		ori r24,lo8(32)
 5347 0042 8387      		std Z+11,r24
2611:Lib/FATFs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 5348               		.loc 1 2611 0
 5349 0044 8A85      		ldd r24,Y+10
 5350 0046 9B85      		ldd r25,Y+11
 5351 0048 AC85      		ldd r26,Y+12
 5352 004a BD85      		ldd r27,Y+13
 5353 004c 848F      		std Z+28,r24
 5354 004e 958F      		std Z+29,r25
 5355 0050 A68F      		std Z+30,r26
 5356 0052 B78F      		std Z+31,r27
2612:Lib/FATFs/ff.c **** 				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
 5357               		.loc 1 2612 0
 5358 0054 8E85      		ldd r24,Y+14
 5359 0056 9F85      		ldd r25,Y+15
 5360 0058 938F      		std Z+27,r25
 5361 005a 828F      		std Z+26,r24
 5362 005c 8E85      		ldd r24,Y+14
 5363 005e 9F85      		ldd r25,Y+15
 5364 0060 A889      		ldd r26,Y+16
 5365 0062 B989      		ldd r27,Y+17
 5366 0064 B58B      		std Z+21,r27
 5367 0066 A48B      		std Z+20,r26
2613:Lib/FATFs/ff.c **** 				tim = get_fattime();						/* Update updated time */
 5368               		.loc 1 2613 0
 5369 0068 0E94 0000 		call get_fattime
 5370               	.LVL460:
2614:Lib/FATFs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5371               		.loc 1 2614 0
 5372 006c F801      		movw r30,r16
 5373 006e 668B      		std Z+22,r22
 5374 0070 778B      		std Z+23,r23
 5375 0072 808F      		std Z+24,r24
 5376 0074 918F      		std Z+25,r25
2615:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 5377               		.loc 1 2615 0
 5378 0076 8C81      		ldd r24,Y+4
 5379 0078 8F7D      		andi r24,lo8(-33)
 5380 007a 8C83      		std Y+4,r24
2616:Lib/FATFs/ff.c **** 				fp->fs->wflag = 1;
 5381               		.loc 1 2616 0
 5382 007c E881      		ld r30,Y
 5383 007e F981      		ldd r31,Y+1
 5384 0080 81E0      		ldi r24,lo8(1)
 5385 0082 8483      		std Z+4,r24
2617:Lib/FATFs/ff.c **** 				res = sync(fp->fs);
 5386               		.loc 1 2617 0
 5387 0084 0990      		ld __tmp_reg__,Y+
 5388 0086 D881      		ld r29,Y
 5389 0088 C02D      		mov r28,__tmp_reg__
 5390               	.LVL461:
 5391               	.LBB84:
 5392               	.LBB85:
 762:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
 5393               		.loc 1 762 0
 5394 008a 40E0      		ldi r20,0
 5395 008c 50E0      		ldi r21,0
 5396 008e BA01      		movw r22,r20
 5397 0090 CE01      		movw r24,r28
 5398 0092 0E94 0000 		call move_window
 5399               	.LVL462:
 5400 0096 982F      		mov r25,r24
 5401               	.LVL463:
 763:Lib/FATFs/ff.c **** 		/* Update FSInfo sector if needed */
 5402               		.loc 1 763 0
 5403 0098 8111      		cpse r24,__zero_reg__
 5404 009a 00C0      		rjmp .L399
 765:Lib/FATFs/ff.c **** 			fs->winsect = 0;
 5405               		.loc 1 765 0
 5406 009c 8881      		ld r24,Y
 5407               	.LVL464:
 5408 009e 8330      		cpi r24,lo8(3)
 5409 00a0 01F0      		breq .+2
 5410 00a2 00C0      		rjmp .L400
 5411 00a4 8D81      		ldd r24,Y+5
 5412 00a6 8823      		tst r24
 5413 00a8 01F4      		brne .+2
 5414 00aa 00C0      		rjmp .L400
 766:Lib/FATFs/ff.c **** 			/* Create FSInfo structure */
 5415               		.loc 1 766 0
 5416 00ac 1AA6      		std Y+42,__zero_reg__
 5417 00ae 1BA6      		std Y+43,__zero_reg__
 5418 00b0 1CA6      		std Y+44,__zero_reg__
 5419 00b2 1DA6      		std Y+45,__zero_reg__
 768:Lib/FATFs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 5420               		.loc 1 768 0
 5421 00b4 BE01      		movw r22,r28
 5422 00b6 625D      		subi r22,-46
 5423 00b8 7F4F      		sbci r23,-1
 5424               	.LVL465:
 5425 00ba FB01      		movw r30,r22
 5426 00bc CE01      		movw r24,r28
 5427 00be 825D      		subi r24,-46
 5428 00c0 9D4F      		sbci r25,-3
 5429               	.LVL466:
 5430               	.L401:
 5431               	.LBB86:
 5432               	.LBB87:
 541:Lib/FATFs/ff.c **** 		*d++ = (BYTE)val;
 5433               		.loc 1 541 0
 5434 00c2 E817      		cp r30,r24
 5435 00c4 F907      		cpc r31,r25
 5436 00c6 01F0      		breq .L410
 5437               	.LVL467:
 542:Lib/FATFs/ff.c **** }
 5438               		.loc 1 542 0
 5439 00c8 1192      		st Z+,__zero_reg__
 5440               	.LVL468:
 5441 00ca 00C0      		rjmp .L401
 5442               	.LVL469:
 5443               	.L410:
 5444               	.LBE87:
 5445               	.LBE86:
 769:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 5446               		.loc 1 769 0
 5447 00cc 85E5      		ldi r24,lo8(85)
 5448 00ce 9AEA      		ldi r25,lo8(-86)
 5449 00d0 FE01      		movw r30,r28
 5450               	.LVL470:
 5451 00d2 E45D      		subi r30,-44
 5452 00d4 FD4F      		sbci r31,-3
 5453 00d6 9183      		std Z+1,r25
 5454 00d8 8083      		st Z,r24
 770:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 5455               		.loc 1 770 0
 5456 00da 82E5      		ldi r24,lo8(82)
 5457 00dc 92E5      		ldi r25,lo8(82)
 5458 00de A1E6      		ldi r26,lo8(97)
 5459 00e0 B1E4      		ldi r27,lo8(65)
 5460 00e2 8EA7      		std Y+46,r24
 5461 00e4 9FA7      		std Y+47,r25
 5462 00e6 A8AB      		std Y+48,r26
 5463 00e8 B9AB      		std Y+49,r27
 771:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 5464               		.loc 1 771 0
 5465 00ea 82E7      		ldi r24,lo8(114)
 5466 00ec 92E7      		ldi r25,lo8(114)
 5467 00ee A1E4      		ldi r26,lo8(65)
 5468 00f0 B1E6      		ldi r27,lo8(97)
 5469 00f2 7A97      		sbiw r30,26
 5470 00f4 8083      		st Z,r24
 5471 00f6 9183      		std Z+1,r25
 5472 00f8 A283      		std Z+2,r26
 5473 00fa B383      		std Z+3,r27
 772:Lib/FATFs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 5474               		.loc 1 772 0
 5475 00fc 8E85      		ldd r24,Y+14
 5476 00fe 9F85      		ldd r25,Y+15
 5477 0100 A889      		ldd r26,Y+16
 5478 0102 B989      		ldd r27,Y+17
 5479 0104 3496      		adiw r30,4
 5480 0106 8083      		st Z,r24
 5481 0108 9183      		std Z+1,r25
 5482 010a A283      		std Z+2,r26
 5483 010c B383      		std Z+3,r27
 773:Lib/FATFs/ff.c **** 			/* Write it into the FSInfo sector */
 5484               		.loc 1 773 0
 5485 010e 8A85      		ldd r24,Y+10
 5486 0110 9B85      		ldd r25,Y+11
 5487 0112 AC85      		ldd r26,Y+12
 5488 0114 BD85      		ldd r27,Y+13
 5489 0116 3496      		adiw r30,4
 5490 0118 8083      		st Z,r24
 5491 011a 9183      		std Z+1,r25
 5492 011c A283      		std Z+2,r26
 5493 011e B383      		std Z+3,r27
 775:Lib/FATFs/ff.c **** 			fs->fsi_flag = 0;
 5494               		.loc 1 775 0
 5495 0120 2A89      		ldd r18,Y+18
 5496 0122 3B89      		ldd r19,Y+19
 5497 0124 4C89      		ldd r20,Y+20
 5498 0126 5D89      		ldd r21,Y+21
 5499 0128 01E0      		ldi r16,lo8(1)
 5500               	.LVL471:
 5501 012a 8981      		ldd r24,Y+1
 5502 012c 0E94 0000 		call disk_write
 5503               	.LVL472:
 776:Lib/FATFs/ff.c **** 		}
 5504               		.loc 1 776 0
 5505 0130 1D82      		std Y+5,__zero_reg__
 5506               	.L400:
 779:Lib/FATFs/ff.c **** 			res = FR_DISK_ERR;
 5507               		.loc 1 779 0
 5508 0132 40E0      		ldi r20,0
 5509 0134 50E0      		ldi r21,0
 5510 0136 60E0      		ldi r22,0
 5511 0138 8981      		ldd r24,Y+1
 5512 013a 0E94 0000 		call disk_ioctl
 5513               	.LVL473:
 5514 013e 91E0      		ldi r25,lo8(1)
 5515 0140 8111      		cpse r24,__zero_reg__
 5516 0142 00C0      		rjmp .L399
 5517 0144 90E0      		ldi r25,0
 5518               	.LVL474:
 5519               	.L399:
 5520               	.LBE85:
 5521               	.LBE84:
2618:Lib/FATFs/ff.c **** 			}
2619:Lib/FATFs/ff.c **** 		}
2620:Lib/FATFs/ff.c **** 	}
2621:Lib/FATFs/ff.c **** 
2622:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, res);
2623:Lib/FATFs/ff.c **** }
 5522               		.loc 1 2623 0
 5523 0146 892F      		mov r24,r25
 5524               	/* epilogue start */
 5525 0148 DF91      		pop r29
 5526 014a CF91      		pop r28
 5527 014c 1F91      		pop r17
 5528 014e 0F91      		pop r16
 5529 0150 0895      		ret
 5530               		.cfi_endproc
 5531               	.LFE163:
 5533               		.section	.text.f_close,"ax",@progbits
 5534               	.global	f_close
 5536               	f_close:
 5537               	.LFB164:
2624:Lib/FATFs/ff.c **** 
2625:Lib/FATFs/ff.c **** #endif /* !_FS_READONLY */
2626:Lib/FATFs/ff.c **** 
2627:Lib/FATFs/ff.c **** 
2628:Lib/FATFs/ff.c **** 
2629:Lib/FATFs/ff.c **** 
2630:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2631:Lib/FATFs/ff.c **** /* Close File                                                            */
2632:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2633:Lib/FATFs/ff.c **** 
2634:Lib/FATFs/ff.c **** FRESULT f_close (
2635:Lib/FATFs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2636:Lib/FATFs/ff.c **** )
2637:Lib/FATFs/ff.c **** {
 5538               		.loc 1 2637 0
 5539               		.cfi_startproc
 5540               	.LVL475:
 5541 0000 CF93      		push r28
 5542               	.LCFI139:
 5543               		.cfi_def_cfa_offset 3
 5544               		.cfi_offset 28, -2
 5545 0002 DF93      		push r29
 5546               	.LCFI140:
 5547               		.cfi_def_cfa_offset 4
 5548               		.cfi_offset 29, -3
 5549               	/* prologue: function */
 5550               	/* frame size = 0 */
 5551               	/* stack size = 2 */
 5552               	.L__stack_usage = 2
 5553 0004 EC01      		movw r28,r24
2638:Lib/FATFs/ff.c **** 	FRESULT res;
2639:Lib/FATFs/ff.c **** 
2640:Lib/FATFs/ff.c **** #if _FS_READONLY
2641:Lib/FATFs/ff.c **** 	FATFS *fs = fp->fs;
2642:Lib/FATFs/ff.c **** 	res = validate(fs, fp->id);
2643:Lib/FATFs/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2644:Lib/FATFs/ff.c **** 	LEAVE_FF(fs, res);
2645:Lib/FATFs/ff.c **** 
2646:Lib/FATFs/ff.c **** #else
2647:Lib/FATFs/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
 5554               		.loc 1 2647 0
 5555 0006 0E94 0000 		call f_sync
 5556               	.LVL476:
2648:Lib/FATFs/ff.c **** #if _FS_SHARE
2649:Lib/FATFs/ff.c **** 	if (res == FR_OK) {		/* Decrement open counter */
2650:Lib/FATFs/ff.c **** #if _FS_REENTRANT
2651:Lib/FATFs/ff.c **** 		res = validate(fp->fs, fp->id);
2652:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
2653:Lib/FATFs/ff.c **** 			res = dec_lock(fp->lockid);	
2654:Lib/FATFs/ff.c **** 			unlock_fs(fp->fs, FR_OK);
2655:Lib/FATFs/ff.c **** 		}
2656:Lib/FATFs/ff.c **** #else
2657:Lib/FATFs/ff.c **** 		res = dec_lock(fp->lockid);
2658:Lib/FATFs/ff.c **** #endif
2659:Lib/FATFs/ff.c **** 	}
2660:Lib/FATFs/ff.c **** #endif
2661:Lib/FATFs/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 5557               		.loc 1 2661 0
 5558 000a 8111      		cpse r24,__zero_reg__
 5559 000c 00C0      		rjmp .L412
 5560               		.loc 1 2661 0 is_stmt 0 discriminator 1
 5561 000e 1982      		std Y+1,__zero_reg__
 5562 0010 1882      		st Y,__zero_reg__
 5563               	.L412:
 5564               	/* epilogue start */
2662:Lib/FATFs/ff.c **** 	return res;
2663:Lib/FATFs/ff.c **** #endif
2664:Lib/FATFs/ff.c **** }
 5565               		.loc 1 2664 0 is_stmt 1
 5566 0012 DF91      		pop r29
 5567 0014 CF91      		pop r28
 5568               	.LVL477:
 5569 0016 0895      		ret
 5570               		.cfi_endproc
 5571               	.LFE164:
 5573               		.section	.text.f_lseek,"ax",@progbits
 5574               	.global	f_lseek
 5576               	f_lseek:
 5577               	.LFB165:
2665:Lib/FATFs/ff.c **** 
2666:Lib/FATFs/ff.c **** 
2667:Lib/FATFs/ff.c **** 
2668:Lib/FATFs/ff.c **** 
2669:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2670:Lib/FATFs/ff.c **** /* Current Drive/Directory Handlings                                     */
2671:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2672:Lib/FATFs/ff.c **** 
2673:Lib/FATFs/ff.c **** #if _FS_RPATH >= 1
2674:Lib/FATFs/ff.c **** 
2675:Lib/FATFs/ff.c **** FRESULT f_chdrive (
2676:Lib/FATFs/ff.c **** 	BYTE drv		/* Drive number */
2677:Lib/FATFs/ff.c **** )
2678:Lib/FATFs/ff.c **** {
2679:Lib/FATFs/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
2680:Lib/FATFs/ff.c **** 
2681:Lib/FATFs/ff.c **** 	CurrVol = drv;
2682:Lib/FATFs/ff.c **** 
2683:Lib/FATFs/ff.c **** 	return FR_OK;
2684:Lib/FATFs/ff.c **** }
2685:Lib/FATFs/ff.c **** 
2686:Lib/FATFs/ff.c **** 
2687:Lib/FATFs/ff.c **** 
2688:Lib/FATFs/ff.c **** FRESULT f_chdir (
2689:Lib/FATFs/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2690:Lib/FATFs/ff.c **** )
2691:Lib/FATFs/ff.c **** {
2692:Lib/FATFs/ff.c **** 	FRESULT res;
2693:Lib/FATFs/ff.c **** 	DIR dj;
2694:Lib/FATFs/ff.c **** 	DEF_NAMEBUF;
2695:Lib/FATFs/ff.c **** 
2696:Lib/FATFs/ff.c **** 
2697:Lib/FATFs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2698:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2699:Lib/FATFs/ff.c **** 		INIT_BUF(dj);
2700:Lib/FATFs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
2701:Lib/FATFs/ff.c **** 		FREE_BUF();
2702:Lib/FATFs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2703:Lib/FATFs/ff.c **** 			if (!dj.dir) {
2704:Lib/FATFs/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2705:Lib/FATFs/ff.c **** 			} else {
2706:Lib/FATFs/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2707:Lib/FATFs/ff.c **** 					dj.fs->cdir = LD_CLUST(dj.dir);
2708:Lib/FATFs/ff.c **** 				else
2709:Lib/FATFs/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
2710:Lib/FATFs/ff.c **** 			}
2711:Lib/FATFs/ff.c **** 		}
2712:Lib/FATFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2713:Lib/FATFs/ff.c **** 	}
2714:Lib/FATFs/ff.c **** 
2715:Lib/FATFs/ff.c **** 	LEAVE_FF(dj.fs, res);
2716:Lib/FATFs/ff.c **** }
2717:Lib/FATFs/ff.c **** 
2718:Lib/FATFs/ff.c **** 
2719:Lib/FATFs/ff.c **** #if _FS_RPATH >= 2
2720:Lib/FATFs/ff.c **** FRESULT f_getcwd (
2721:Lib/FATFs/ff.c **** 	TCHAR *path,	/* Pointer to the directory path */
2722:Lib/FATFs/ff.c **** 	UINT sz_path	/* Size of path */
2723:Lib/FATFs/ff.c **** )
2724:Lib/FATFs/ff.c **** {
2725:Lib/FATFs/ff.c **** 	FRESULT res;
2726:Lib/FATFs/ff.c **** 	DIR dj;
2727:Lib/FATFs/ff.c **** 	UINT i, n;
2728:Lib/FATFs/ff.c **** 	DWORD ccl;
2729:Lib/FATFs/ff.c **** 	TCHAR *tp;
2730:Lib/FATFs/ff.c **** 	FILINFO fno;
2731:Lib/FATFs/ff.c **** 	DEF_NAMEBUF;
2732:Lib/FATFs/ff.c **** 
2733:Lib/FATFs/ff.c **** 
2734:Lib/FATFs/ff.c **** 	*path = 0;
2735:Lib/FATFs/ff.c **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2736:Lib/FATFs/ff.c **** 	if (res == FR_OK) {
2737:Lib/FATFs/ff.c **** 		INIT_BUF(dj);
2738:Lib/FATFs/ff.c **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2739:Lib/FATFs/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2740:Lib/FATFs/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2741:Lib/FATFs/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2742:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2743:Lib/FATFs/ff.c **** 			res = dir_read(&dj);
2744:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2745:Lib/FATFs/ff.c **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
2746:Lib/FATFs/ff.c **** 			res = dir_sdi(&dj, 0);
2747:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2748:Lib/FATFs/ff.c **** 			do {							/* Find the entry links to the child dir */
2749:Lib/FATFs/ff.c **** 				res = dir_read(&dj);
2750:Lib/FATFs/ff.c **** 				if (res != FR_OK) break;
2751:Lib/FATFs/ff.c **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
2752:Lib/FATFs/ff.c **** 				res = dir_next(&dj, 0);	
2753:Lib/FATFs/ff.c **** 			} while (res == FR_OK);
2754:Lib/FATFs/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2755:Lib/FATFs/ff.c **** 			if (res != FR_OK) break;
2756:Lib/FATFs/ff.c **** #if _USE_LFN
2757:Lib/FATFs/ff.c **** 			fno.lfname = path;
2758:Lib/FATFs/ff.c **** 			fno.lfsize = i;
2759:Lib/FATFs/ff.c **** #endif
2760:Lib/FATFs/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2761:Lib/FATFs/ff.c **** 			tp = fno.fname;
2762:Lib/FATFs/ff.c **** 			if (_USE_LFN && *path) tp = path;
2763:Lib/FATFs/ff.c **** 			for (n = 0; tp[n]; n++) ;
2764:Lib/FATFs/ff.c **** 			if (i < n + 3) {
2765:Lib/FATFs/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2766:Lib/FATFs/ff.c **** 			}
2767:Lib/FATFs/ff.c **** 			while (n) path[--i] = tp[--n];
2768:Lib/FATFs/ff.c **** 			path[--i] = '/';
2769:Lib/FATFs/ff.c **** 		}
2770:Lib/FATFs/ff.c **** 		tp = path;
2771:Lib/FATFs/ff.c **** 		if (res == FR_OK) {
2772:Lib/FATFs/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2773:Lib/FATFs/ff.c **** 			*tp++ = ':';
2774:Lib/FATFs/ff.c **** 			if (i == sz_path) {				/* Root-dir */
2775:Lib/FATFs/ff.c **** 				*tp++ = '/';
2776:Lib/FATFs/ff.c **** 			} else {						/* Sub-dir */
2777:Lib/FATFs/ff.c **** 				do		/* Add stacked path str */
2778:Lib/FATFs/ff.c **** 					*tp++ = path[i++];
2779:Lib/FATFs/ff.c **** 				while (i < sz_path);
2780:Lib/FATFs/ff.c **** 			}
2781:Lib/FATFs/ff.c **** 		}
2782:Lib/FATFs/ff.c **** 		*tp = 0;
2783:Lib/FATFs/ff.c **** 		FREE_BUF();
2784:Lib/FATFs/ff.c **** 	}
2785:Lib/FATFs/ff.c **** 
2786:Lib/FATFs/ff.c **** 	LEAVE_FF(dj.fs, res);
2787:Lib/FATFs/ff.c **** }
2788:Lib/FATFs/ff.c **** #endif /* _FS_RPATH >= 2 */
2789:Lib/FATFs/ff.c **** #endif /* _FS_RPATH >= 1 */
2790:Lib/FATFs/ff.c **** 
2791:Lib/FATFs/ff.c **** 
2792:Lib/FATFs/ff.c **** 
2793:Lib/FATFs/ff.c **** #if _FS_MINIMIZE <= 2
2794:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2795:Lib/FATFs/ff.c **** /* Seek File R/W Pointer                                                 */
2796:Lib/FATFs/ff.c **** /*-----------------------------------------------------------------------*/
2797:Lib/FATFs/ff.c **** 
2798:Lib/FATFs/ff.c **** FRESULT f_lseek (
2799:Lib/FATFs/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2800:Lib/FATFs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2801:Lib/FATFs/ff.c **** )
2802:Lib/FATFs/ff.c **** {
 5578               		.loc 1 2802 0
 5579               		.cfi_startproc
 5580               	.LVL478:
 5581 0000 4F92      		push r4
 5582               	.LCFI141:
 5583               		.cfi_def_cfa_offset 3
 5584               		.cfi_offset 4, -2
 5585 0002 5F92      		push r5
 5586               	.LCFI142:
 5587               		.cfi_def_cfa_offset 4
 5588               		.cfi_offset 5, -3
 5589 0004 6F92      		push r6
 5590               	.LCFI143:
 5591               		.cfi_def_cfa_offset 5
 5592               		.cfi_offset 6, -4
 5593 0006 7F92      		push r7
 5594               	.LCFI144:
 5595               		.cfi_def_cfa_offset 6
 5596               		.cfi_offset 7, -5
 5597 0008 8F92      		push r8
 5598               	.LCFI145:
 5599               		.cfi_def_cfa_offset 7
 5600               		.cfi_offset 8, -6
 5601 000a 9F92      		push r9
 5602               	.LCFI146:
 5603               		.cfi_def_cfa_offset 8
 5604               		.cfi_offset 9, -7
 5605 000c AF92      		push r10
 5606               	.LCFI147:
 5607               		.cfi_def_cfa_offset 9
 5608               		.cfi_offset 10, -8
 5609 000e BF92      		push r11
 5610               	.LCFI148:
 5611               		.cfi_def_cfa_offset 10
 5612               		.cfi_offset 11, -9
 5613 0010 CF92      		push r12
 5614               	.LCFI149:
 5615               		.cfi_def_cfa_offset 11
 5616               		.cfi_offset 12, -10
 5617 0012 DF92      		push r13
 5618               	.LCFI150:
 5619               		.cfi_def_cfa_offset 12
 5620               		.cfi_offset 13, -11
 5621 0014 EF92      		push r14
 5622               	.LCFI151:
 5623               		.cfi_def_cfa_offset 13
 5624               		.cfi_offset 14, -12
 5625 0016 FF92      		push r15
 5626               	.LCFI152:
 5627               		.cfi_def_cfa_offset 14
 5628               		.cfi_offset 15, -13
 5629 0018 0F93      		push r16
 5630               	.LCFI153:
 5631               		.cfi_def_cfa_offset 15
 5632               		.cfi_offset 16, -14
 5633 001a 1F93      		push r17
 5634               	.LCFI154:
 5635               		.cfi_def_cfa_offset 16
 5636               		.cfi_offset 17, -15
 5637 001c CF93      		push r28
 5638               	.LCFI155:
 5639               		.cfi_def_cfa_offset 17
 5640               		.cfi_offset 28, -16
 5641 001e DF93      		push r29
 5642               	.LCFI156:
 5643               		.cfi_def_cfa_offset 18
 5644               		.cfi_offset 29, -17
 5645 0020 00D0      		rcall .
 5646 0022 00D0      		rcall .
 5647 0024 00D0      		rcall .
 5648               	.LCFI157:
 5649               		.cfi_def_cfa_offset 24
 5650 0026 CDB7      		in r28,__SP_L__
 5651 0028 DEB7      		in r29,__SP_H__
 5652               	.LCFI158:
 5653               		.cfi_def_cfa_register 28
 5654               	/* prologue: function */
 5655               	/* frame size = 6 */
 5656               	/* stack size = 22 */
 5657               	.L__stack_usage = 22
 5658 002a 9E83      		std Y+6,r25
 5659 002c 8D83      		std Y+5,r24
 5660 002e 6A01      		movw r12,r20
 5661 0030 7B01      		movw r14,r22
2803:Lib/FATFs/ff.c **** 	FRESULT res;
2804:Lib/FATFs/ff.c **** 
2805:Lib/FATFs/ff.c **** 
2806:Lib/FATFs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5662               		.loc 1 2806 0
 5663 0032 DC01      		movw r26,r24
 5664 0034 1296      		adiw r26,2
 5665 0036 6D91      		ld r22,X+
 5666 0038 7C91      		ld r23,X
 5667 003a 1397      		sbiw r26,2+1
 5668 003c 8D91      		ld r24,X+
 5669 003e 9C91      		ld r25,X
 5670               	.LVL479:
 5671 0040 0E94 0000 		call validate
 5672               	.LVL480:
2807:Lib/FATFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5673               		.loc 1 2807 0
 5674 0044 8111      		cpse r24,__zero_reg__
 5675 0046 00C0      		rjmp .L452
2808:Lib/FATFs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 5676               		.loc 1 2808 0
 5677 0048 ED81      		ldd r30,Y+5
 5678 004a FE81      		ldd r31,Y+6
 5679 004c 2481      		ldd r18,Z+4
 5680 004e 27FD      		sbrc r18,7
 5681 0050 00C0      		rjmp .L436
 5682               	.LBB88:
2809:Lib/FATFs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2810:Lib/FATFs/ff.c **** 
2811:Lib/FATFs/ff.c **** #if _USE_FASTSEEK
2812:Lib/FATFs/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
2813:Lib/FATFs/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2814:Lib/FATFs/ff.c **** 
2815:Lib/FATFs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2816:Lib/FATFs/ff.c **** 			tbl = fp->cltbl;
2817:Lib/FATFs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2818:Lib/FATFs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
2819:Lib/FATFs/ff.c **** 			if (cl) {
2820:Lib/FATFs/ff.c **** 				do {
2821:Lib/FATFs/ff.c **** 					/* Get a fragment */
2822:Lib/FATFs/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2823:Lib/FATFs/ff.c **** 					do {
2824:Lib/FATFs/ff.c **** 						pcl = cl; ncl++;
2825:Lib/FATFs/ff.c **** 						cl = get_fat(fp->fs, cl);
2826:Lib/FATFs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2827:Lib/FATFs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2828:Lib/FATFs/ff.c **** 					} while (cl == pcl + 1);
2829:Lib/FATFs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2830:Lib/FATFs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
2831:Lib/FATFs/ff.c **** 					}
2832:Lib/FATFs/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
2833:Lib/FATFs/ff.c **** 			}
2834:Lib/FATFs/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
2835:Lib/FATFs/ff.c **** 			if (ulen <= tlen)
2836:Lib/FATFs/ff.c **** 				*tbl = 0;		/* Terminate table */
2837:Lib/FATFs/ff.c **** 			else
2838:Lib/FATFs/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2839:Lib/FATFs/ff.c **** 
2840:Lib/FATFs/ff.c **** 		} else {						/* Fast seek */
2841:Lib/FATFs/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2842:Lib/FATFs/ff.c **** 				ofs = fp->fsize;
2843:Lib/FATFs/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
2844:Lib/FATFs/ff.c **** 			if (ofs) {
2845:Lib/FATFs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
2846:Lib/FATFs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
2847:Lib/FATFs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2848:Lib/FATFs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
2849:Lib/FATFs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2850:Lib/FATFs/ff.c **** #if !_FS_TINY
2851:Lib/FATFs/ff.c **** #if !_FS_READONLY
2852:Lib/FATFs/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2853:Lib/FATFs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2854:Lib/FATFs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
2855:Lib/FATFs/ff.c **** 						fp->flag &= ~FA__DIRTY;
2856:Lib/FATFs/ff.c **** 					}
2857:Lib/FATFs/ff.c **** #endif
2858:Lib/FATFs/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2859:Lib/FATFs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2860:Lib/FATFs/ff.c **** #endif
2861:Lib/FATFs/ff.c **** 					fp->dsect = dsc;
2862:Lib/FATFs/ff.c **** 				}
2863:Lib/FATFs/ff.c **** 			}
2864:Lib/FATFs/ff.c **** 		}
2865:Lib/FATFs/ff.c **** 	} else
2866:Lib/FATFs/ff.c **** #endif
2867:Lib/FATFs/ff.c **** 
2868:Lib/FATFs/ff.c **** 	/* Normal Seek */
2869:Lib/FATFs/ff.c **** 	{
2870:Lib/FATFs/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
2871:Lib/FATFs/ff.c **** 
2872:Lib/FATFs/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 5683               		.loc 1 2872 0
 5684 0052 8285      		ldd r24,Z+10
 5685 0054 9385      		ldd r25,Z+11
 5686 0056 A485      		ldd r26,Z+12
 5687 0058 B585      		ldd r27,Z+13
 5688               	.LVL481:
 5689 005a 8C15      		cp r24,r12
 5690 005c 9D05      		cpc r25,r13
 5691 005e AE05      		cpc r26,r14
 5692 0060 BF05      		cpc r27,r15
 5693 0062 00F4      		brsh .L415
2873:Lib/FATFs/ff.c **** #if !_FS_READONLY
2874:Lib/FATFs/ff.c **** 			 && !(fp->flag & FA_WRITE)
 5694               		.loc 1 2874 0
 5695 0064 21FD      		sbrc r18,1
 5696 0066 00C0      		rjmp .L415
 5697 0068 6C01      		movw r12,r24
 5698 006a 7D01      		movw r14,r26
 5699               	.LVL482:
 5700               	.L415:
2875:Lib/FATFs/ff.c **** #endif
2876:Lib/FATFs/ff.c **** 			) ofs = fp->fsize;
2877:Lib/FATFs/ff.c **** 
2878:Lib/FATFs/ff.c **** 		ifptr = fp->fptr;
 5701               		.loc 1 2878 0
 5702 006c AD81      		ldd r26,Y+5
 5703 006e BE81      		ldd r27,Y+6
 5704 0070 1696      		adiw r26,6
 5705 0072 4D90      		ld r4,X+
 5706 0074 5D90      		ld r5,X+
 5707 0076 6D90      		ld r6,X+
 5708 0078 7C90      		ld r7,X
 5709 007a 1997      		sbiw r26,6+3
 5710               	.LVL483:
2879:Lib/FATFs/ff.c **** 		fp->fptr = nsect = 0;
 5711               		.loc 1 2879 0
 5712 007c FD01      		movw r30,r26
 5713 007e 1682      		std Z+6,__zero_reg__
 5714 0080 1782      		std Z+7,__zero_reg__
 5715 0082 1086      		std Z+8,__zero_reg__
 5716 0084 1186      		std Z+9,__zero_reg__
2880:Lib/FATFs/ff.c **** 		if (ofs) {
 5717               		.loc 1 2880 0
 5718 0086 C114      		cp r12,__zero_reg__
 5719 0088 D104      		cpc r13,__zero_reg__
 5720 008a E104      		cpc r14,__zero_reg__
 5721 008c F104      		cpc r15,__zero_reg__
 5722 008e 01F4      		brne .+2
 5723 0090 00C0      		rjmp .L455
2881:Lib/FATFs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 5724               		.loc 1 2881 0
 5725 0092 AD81      		ldd r26,Y+5
 5726 0094 BE81      		ldd r27,Y+6
 5727 0096 0D91      		ld r16,X+
 5728 0098 1C91      		ld r17,X
 5729 009a F801      		movw r30,r16
 5730 009c 8280      		ldd r8,Z+2
 5731 009e 912C      		mov r9,__zero_reg__
 5732 00a0 A12C      		mov r10,__zero_reg__
 5733 00a2 B12C      		mov r11,__zero_reg__
 5734 00a4 39E0      		ldi r19,9
 5735               		1:
 5736 00a6 880C      		lsl r8
 5737 00a8 991C      		rol r9
 5738 00aa AA1C      		rol r10
 5739 00ac BB1C      		rol r11
 5740 00ae 3A95      		dec r19
 5741 00b0 01F4      		brne 1b
 5742               	.LVL484:
2882:Lib/FATFs/ff.c **** 			if (ifptr > 0 &&
 5743               		.loc 1 2882 0
 5744 00b2 4114      		cp r4,__zero_reg__
 5745 00b4 5104      		cpc r5,__zero_reg__
 5746 00b6 6104      		cpc r6,__zero_reg__
 5747 00b8 7104      		cpc r7,__zero_reg__
 5748 00ba 01F4      		brne .+2
 5749 00bc 00C0      		rjmp .L419
2883:Lib/FATFs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5750               		.loc 1 2883 0 discriminator 1
 5751 00be F1E0      		ldi r31,1
 5752 00c0 4F1A      		sub r4,r31
 5753 00c2 5108      		sbc r5,__zero_reg__
 5754 00c4 6108      		sbc r6,__zero_reg__
 5755 00c6 7108      		sbc r7,__zero_reg__
 5756               	.LVL485:
2882:Lib/FATFs/ff.c **** 			if (ifptr > 0 &&
 5757               		.loc 1 2882 0 discriminator 1
 5758 00c8 C701      		movw r24,r14
 5759 00ca B601      		movw r22,r12
 5760 00cc 6150      		subi r22,1
 5761 00ce 7109      		sbc r23,__zero_reg__
 5762 00d0 8109      		sbc r24,__zero_reg__
 5763 00d2 9109      		sbc r25,__zero_reg__
 5764 00d4 A501      		movw r20,r10
 5765 00d6 9401      		movw r18,r8
 5766 00d8 0E94 0000 		call __udivmodsi4
 5767 00dc 2983      		std Y+1,r18
 5768 00de 3A83      		std Y+2,r19
 5769 00e0 4B83      		std Y+3,r20
 5770 00e2 5C83      		std Y+4,r21
 5771 00e4 C301      		movw r24,r6
 5772 00e6 B201      		movw r22,r4
 5773 00e8 A501      		movw r20,r10
 5774 00ea 9401      		movw r18,r8
 5775 00ec 0E94 0000 		call __udivmodsi4
 5776 00f0 8981      		ldd r24,Y+1
 5777 00f2 9A81      		ldd r25,Y+2
 5778 00f4 AB81      		ldd r26,Y+3
 5779 00f6 BC81      		ldd r27,Y+4
 5780 00f8 8217      		cp r24,r18
 5781 00fa 9307      		cpc r25,r19
 5782 00fc A407      		cpc r26,r20
 5783 00fe B507      		cpc r27,r21
 5784 0100 00F0      		brlo .L419
2884:Lib/FATFs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 5785               		.loc 1 2884 0
 5786 0102 8827      		clr r24
 5787 0104 9927      		clr r25
 5788 0106 DC01      		movw r26,r24
 5789 0108 8819      		sub r24,r8
 5790 010a 9909      		sbc r25,r9
 5791 010c AA09      		sbc r26,r10
 5792 010e BB09      		sbc r27,r11
 5793 0110 4822      		and r4,r24
 5794 0112 5922      		and r5,r25
 5795 0114 6A22      		and r6,r26
 5796 0116 7B22      		and r7,r27
 5797               	.LVL486:
 5798 0118 AD81      		ldd r26,Y+5
 5799 011a BE81      		ldd r27,Y+6
 5800 011c 1696      		adiw r26,6
 5801 011e 4D92      		st X+,r4
 5802 0120 5D92      		st X+,r5
 5803 0122 6D92      		st X+,r6
 5804 0124 7C92      		st X,r7
 5805 0126 1997      		sbiw r26,6+3
2885:Lib/FATFs/ff.c **** 				ofs -= fp->fptr;
 5806               		.loc 1 2885 0
 5807 0128 C418      		sub r12,r4
 5808 012a D508      		sbc r13,r5
 5809 012c E608      		sbc r14,r6
 5810 012e F708      		sbc r15,r7
 5811               	.LVL487:
2886:Lib/FATFs/ff.c **** 				clst = fp->clust;
 5812               		.loc 1 2886 0
 5813 0130 5296      		adiw r26,18
 5814 0132 4D91      		ld r20,X+
 5815 0134 5D91      		ld r21,X+
 5816 0136 6D91      		ld r22,X+
 5817 0138 7C91      		ld r23,X
 5818 013a 5597      		sbiw r26,18+3
 5819               	.LVL488:
 5820 013c 00C0      		rjmp .L420
 5821               	.LVL489:
 5822               	.L419:
2887:Lib/FATFs/ff.c **** 			} else {									/* When seek to back cluster, */
2888:Lib/FATFs/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
 5823               		.loc 1 2888 0
 5824 013e ED81      		ldd r30,Y+5
 5825 0140 FE81      		ldd r31,Y+6
 5826 0142 4685      		ldd r20,Z+14
 5827 0144 5785      		ldd r21,Z+15
 5828 0146 6089      		ldd r22,Z+16
 5829 0148 7189      		ldd r23,Z+17
 5830               	.LVL490:
2889:Lib/FATFs/ff.c **** #if !_FS_READONLY
2890:Lib/FATFs/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 5831               		.loc 1 2890 0
 5832 014a 4115      		cp r20,__zero_reg__
 5833 014c 5105      		cpc r21,__zero_reg__
 5834 014e 6105      		cpc r22,__zero_reg__
 5835 0150 7105      		cpc r23,__zero_reg__
 5836 0152 01F4      		brne .L421
2891:Lib/FATFs/ff.c **** 					clst = create_chain(fp->fs, 0);
 5837               		.loc 1 2891 0
 5838 0154 40E0      		ldi r20,0
 5839 0156 50E0      		ldi r21,0
 5840 0158 BA01      		movw r22,r20
 5841               	.LVL491:
 5842 015a C801      		movw r24,r16
 5843 015c 0E94 0000 		call create_chain
 5844               	.LVL492:
 5845 0160 AB01      		movw r20,r22
 5846 0162 BC01      		movw r22,r24
 5847               	.LVL493:
2892:Lib/FATFs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5848               		.loc 1 2892 0
 5849 0164 4130      		cpi r20,1
 5850 0166 5105      		cpc r21,__zero_reg__
 5851 0168 6105      		cpc r22,__zero_reg__
 5852 016a 7105      		cpc r23,__zero_reg__
 5853 016c 01F4      		brne .+2
 5854 016e 00C0      		rjmp .L454
2893:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5855               		.loc 1 2893 0
 5856 0170 4F3F      		cpi r20,-1
 5857 0172 BFEF      		ldi r27,-1
 5858 0174 5B07      		cpc r21,r27
 5859 0176 6B07      		cpc r22,r27
 5860 0178 7B07      		cpc r23,r27
 5861 017a 01F4      		brne .+2
 5862 017c 00C0      		rjmp .L453
2894:Lib/FATFs/ff.c **** 					fp->sclust = clst;
 5863               		.loc 1 2894 0
 5864 017e AD81      		ldd r26,Y+5
 5865 0180 BE81      		ldd r27,Y+6
 5866 0182 1E96      		adiw r26,14
 5867 0184 4D93      		st X+,r20
 5868 0186 5D93      		st X+,r21
 5869 0188 6D93      		st X+,r22
 5870 018a 7C93      		st X,r23
 5871 018c 5197      		sbiw r26,14+3
 5872               	.L421:
2895:Lib/FATFs/ff.c **** 				}
2896:Lib/FATFs/ff.c **** #endif
2897:Lib/FATFs/ff.c **** 				fp->clust = clst;
 5873               		.loc 1 2897 0
 5874 018e ED81      		ldd r30,Y+5
 5875 0190 FE81      		ldd r31,Y+6
 5876 0192 428B      		std Z+18,r20
 5877 0194 538B      		std Z+19,r21
 5878 0196 648B      		std Z+20,r22
 5879 0198 758B      		std Z+21,r23
 5880               	.L420:
2898:Lib/FATFs/ff.c **** 			}
2899:Lib/FATFs/ff.c **** 			if (clst != 0) {
 5881               		.loc 1 2899 0
 5882 019a 4115      		cp r20,__zero_reg__
 5883 019c 5105      		cpc r21,__zero_reg__
 5884 019e 6105      		cpc r22,__zero_reg__
 5885 01a0 7105      		cpc r23,__zero_reg__
 5886 01a2 01F4      		brne .L425
 5887               	.L424:
2879:Lib/FATFs/ff.c **** 		if (ofs) {
 5888               		.loc 1 2879 0
 5889 01a4 C12C      		mov r12,__zero_reg__
 5890 01a6 D12C      		mov r13,__zero_reg__
 5891 01a8 7601      		movw r14,r12
 5892               	.LVL494:
 5893 01aa 00C0      		rjmp .L418
 5894               	.LVL495:
 5895               	.L429:
2900:Lib/FATFs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
2901:Lib/FATFs/ff.c **** #if !_FS_READONLY
2902:Lib/FATFs/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2903:Lib/FATFs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
2904:Lib/FATFs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
2905:Lib/FATFs/ff.c **** 							ofs = bcs; break;
2906:Lib/FATFs/ff.c **** 						}
2907:Lib/FATFs/ff.c **** 					} else
2908:Lib/FATFs/ff.c **** #endif
2909:Lib/FATFs/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2910:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2911:Lib/FATFs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 5896               		.loc 1 2911 0
 5897 01ac 4230      		cpi r20,2
 5898 01ae 5105      		cpc r21,__zero_reg__
 5899 01b0 6105      		cpc r22,__zero_reg__
 5900 01b2 7105      		cpc r23,__zero_reg__
 5901 01b4 00F4      		brsh .+2
 5902 01b6 00C0      		rjmp .L430
 5903               		.loc 1 2911 0 is_stmt 0 discriminator 2
 5904 01b8 AD81      		ldd r26,Y+5
 5905 01ba BE81      		ldd r27,Y+6
 5906 01bc ED91      		ld r30,X+
 5907 01be FC91      		ld r31,X
 5908 01c0 8689      		ldd r24,Z+22
 5909 01c2 9789      		ldd r25,Z+23
 5910 01c4 A08D      		ldd r26,Z+24
 5911 01c6 B18D      		ldd r27,Z+25
 5912 01c8 4817      		cp r20,r24
 5913 01ca 5907      		cpc r21,r25
 5914 01cc 6A07      		cpc r22,r26
 5915 01ce 7B07      		cpc r23,r27
 5916 01d0 00F0      		brlo .+2
 5917 01d2 00C0      		rjmp .L430
2912:Lib/FATFs/ff.c **** 					fp->clust = clst;
 5918               		.loc 1 2912 0 is_stmt 1
 5919 01d4 AD81      		ldd r26,Y+5
 5920 01d6 BE81      		ldd r27,Y+6
 5921 01d8 5296      		adiw r26,18
 5922 01da 4D93      		st X+,r20
 5923 01dc 5D93      		st X+,r21
 5924 01de 6D93      		st X+,r22
 5925 01e0 7C93      		st X,r23
 5926 01e2 5597      		sbiw r26,18+3
2913:Lib/FATFs/ff.c **** 					fp->fptr += bcs;
 5927               		.loc 1 2913 0
 5928 01e4 FD01      		movw r30,r26
 5929 01e6 8681      		ldd r24,Z+6
 5930 01e8 9781      		ldd r25,Z+7
 5931 01ea A085      		ldd r26,Z+8
 5932 01ec B185      		ldd r27,Z+9
 5933 01ee 880D      		add r24,r8
 5934 01f0 991D      		adc r25,r9
 5935 01f2 AA1D      		adc r26,r10
 5936 01f4 BB1D      		adc r27,r11
 5937 01f6 8683      		std Z+6,r24
 5938 01f8 9783      		std Z+7,r25
 5939 01fa A087      		std Z+8,r26
 5940 01fc B187      		std Z+9,r27
2914:Lib/FATFs/ff.c **** 					ofs -= bcs;
 5941               		.loc 1 2914 0
 5942 01fe C818      		sub r12,r8
 5943 0200 D908      		sbc r13,r9
 5944 0202 EA08      		sbc r14,r10
 5945 0204 FB08      		sbc r15,r11
 5946               	.LVL496:
 5947               	.L425:
2900:Lib/FATFs/ff.c **** #if !_FS_READONLY
 5948               		.loc 1 2900 0
 5949 0206 8C14      		cp r8,r12
 5950 0208 9D04      		cpc r9,r13
 5951 020a AE04      		cpc r10,r14
 5952 020c BF04      		cpc r11,r15
 5953 020e 00F4      		brsh .L427
2902:Lib/FATFs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 5954               		.loc 1 2902 0
 5955 0210 AD81      		ldd r26,Y+5
 5956 0212 BE81      		ldd r27,Y+6
 5957 0214 1496      		adiw r26,4
 5958 0216 2C91      		ld r18,X
 5959 0218 1497      		sbiw r26,4
 5960 021a 8D91      		ld r24,X+
 5961 021c 9C91      		ld r25,X
 5962 021e 21FF      		sbrs r18,1
 5963 0220 00C0      		rjmp .L426
2903:Lib/FATFs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 5964               		.loc 1 2903 0
 5965 0222 0E94 0000 		call create_chain
 5966               	.LVL497:
 5967 0226 AB01      		movw r20,r22
 5968 0228 BC01      		movw r22,r24
 5969               	.LVL498:
2904:Lib/FATFs/ff.c **** 							ofs = bcs; break;
 5970               		.loc 1 2904 0
 5971 022a 4115      		cp r20,__zero_reg__
 5972 022c 5105      		cpc r21,__zero_reg__
 5973 022e 6105      		cpc r22,__zero_reg__
 5974 0230 7105      		cpc r23,__zero_reg__
 5975 0232 01F0      		breq .L456
 5976               	.L428:
2910:Lib/FATFs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 5977               		.loc 1 2910 0
 5978 0234 4F3F      		cpi r20,-1
 5979 0236 BFEF      		ldi r27,-1
 5980 0238 5B07      		cpc r21,r27
 5981 023a 6B07      		cpc r22,r27
 5982 023c 7B07      		cpc r23,r27
 5983 023e 01F0      		breq .+2
 5984 0240 00C0      		rjmp .L429
 5985               	.L453:
2910:Lib/FATFs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 5986               		.loc 1 2910 0 is_stmt 0 discriminator 1
 5987 0242 ED81      		ldd r30,Y+5
 5988 0244 FE81      		ldd r31,Y+6
 5989 0246 8481      		ldd r24,Z+4
 5990 0248 8068      		ori r24,lo8(-128)
 5991 024a 8483      		std Z+4,r24
 5992 024c 81E0      		ldi r24,lo8(1)
 5993 024e 00C0      		rjmp .L452
 5994               	.L426:
2909:Lib/FATFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5995               		.loc 1 2909 0 is_stmt 1
 5996 0250 0E94 0000 		call get_fat
 5997               	.LVL499:
 5998 0254 AB01      		movw r20,r22
 5999 0256 BC01      		movw r22,r24
 6000               	.LVL500:
 6001 0258 00C0      		rjmp .L428
 6002               	.L430:
2911:Lib/FATFs/ff.c **** 					fp->clust = clst;
 6003               		.loc 1 2911 0 discriminator 3
 6004 025a ED81      		ldd r30,Y+5
 6005 025c FE81      		ldd r31,Y+6
 6006 025e 8481      		ldd r24,Z+4
 6007 0260 8068      		ori r24,lo8(-128)
 6008 0262 8483      		std Z+4,r24
 6009 0264 00C0      		rjmp .L436
 6010               	.L456:
 6011 0266 7501      		movw r14,r10
 6012 0268 6401      		movw r12,r8
 6013               	.LVL501:
 6014               	.L427:
2915:Lib/FATFs/ff.c **** 				}
2916:Lib/FATFs/ff.c **** 				fp->fptr += ofs;
 6015               		.loc 1 2916 0
 6016 026a ED81      		ldd r30,Y+5
 6017 026c FE81      		ldd r31,Y+6
 6018 026e 8681      		ldd r24,Z+6
 6019 0270 9781      		ldd r25,Z+7
 6020 0272 A085      		ldd r26,Z+8
 6021 0274 B185      		ldd r27,Z+9
 6022 0276 8C0D      		add r24,r12
 6023 0278 9D1D      		adc r25,r13
 6024 027a AE1D      		adc r26,r14
 6025 027c BF1D      		adc r27,r15
 6026 027e 8683      		std Z+6,r24
 6027 0280 9783      		std Z+7,r25
 6028 0282 A087      		std Z+8,r26
 6029 0284 B187      		std Z+9,r27
2917:Lib/FATFs/ff.c **** 				if (ofs % SS(fp->fs)) {
 6030               		.loc 1 2917 0
 6031 0286 D701      		movw r26,r14
 6032 0288 C601      		movw r24,r12
 6033 028a 9170      		andi r25,1
 6034 028c AA27      		clr r26
 6035 028e BB27      		clr r27
 6036 0290 892B      		or r24,r25
 6037 0292 8A2B      		or r24,r26
 6038 0294 8B2B      		or r24,r27
 6039 0296 01F4      		brne .+2
 6040 0298 00C0      		rjmp .L424
2918:Lib/FATFs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 6041               		.loc 1 2918 0
 6042 029a 8081      		ld r24,Z
 6043 029c 9181      		ldd r25,Z+1
 6044 029e 0E94 0000 		call clust2sect
 6045               	.LVL502:
2919:Lib/FATFs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 6046               		.loc 1 2919 0
 6047 02a2 6115      		cp r22,__zero_reg__
 6048 02a4 7105      		cpc r23,__zero_reg__
 6049 02a6 8105      		cpc r24,__zero_reg__
 6050 02a8 9105      		cpc r25,__zero_reg__
 6051 02aa 01F4      		brne .L433
 6052               	.LVL503:
 6053               	.L454:
 6054               		.loc 1 2919 0 is_stmt 0 discriminator 1
 6055 02ac AD81      		ldd r26,Y+5
 6056 02ae BE81      		ldd r27,Y+6
 6057 02b0 1496      		adiw r26,4
 6058 02b2 8C91      		ld r24,X
 6059 02b4 1497      		sbiw r26,4
 6060 02b6 8068      		ori r24,lo8(-128)
 6061 02b8 1496      		adiw r26,4
 6062 02ba 8C93      		st X,r24
 6063 02bc 00C0      		rjmp .L436
 6064               	.LVL504:
 6065               	.L433:
2920:Lib/FATFs/ff.c **** 					nsect += ofs / SS(fp->fs);
 6066               		.loc 1 2920 0 is_stmt 1
 6067 02be 29E0      		ldi r18,9
 6068               		1:
 6069 02c0 F694      		lsr r15
 6070 02c2 E794      		ror r14
 6071 02c4 D794      		ror r13
 6072 02c6 C794      		ror r12
 6073 02c8 2A95      		dec r18
 6074 02ca 01F4      		brne 1b
 6075               	.LVL505:
 6076 02cc C60E      		add r12,r22
 6077 02ce D71E      		adc r13,r23
 6078 02d0 E81E      		adc r14,r24
 6079 02d2 F91E      		adc r15,r25
 6080               	.LVL506:
 6081               	.L418:
2921:Lib/FATFs/ff.c **** 				}
2922:Lib/FATFs/ff.c **** 			}
2923:Lib/FATFs/ff.c **** 		}
2924:Lib/FATFs/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 6082               		.loc 1 2924 0
 6083 02d4 ED81      		ldd r30,Y+5
 6084 02d6 FE81      		ldd r31,Y+6
 6085 02d8 8681      		ldd r24,Z+6
 6086 02da 9781      		ldd r25,Z+7
 6087 02dc A085      		ldd r26,Z+8
 6088 02de B185      		ldd r27,Z+9
 6089 02e0 AC01      		movw r20,r24
 6090 02e2 BD01      		movw r22,r26
 6091 02e4 5170      		andi r21,1
 6092 02e6 6627      		clr r22
 6093 02e8 7727      		clr r23
 6094 02ea 452B      		or r20,r21
 6095 02ec 462B      		or r20,r22
 6096 02ee 472B      		or r20,r23
 6097 02f0 01F0      		breq .L434
 6098               		.loc 1 2924 0 is_stmt 0 discriminator 1
 6099 02f2 4689      		ldd r20,Z+22
 6100 02f4 5789      		ldd r21,Z+23
 6101 02f6 608D      		ldd r22,Z+24
 6102 02f8 718D      		ldd r23,Z+25
 6103 02fa C416      		cp r12,r20
 6104 02fc D506      		cpc r13,r21
 6105 02fe E606      		cpc r14,r22
 6106 0300 F706      		cpc r15,r23
 6107 0302 01F0      		breq .L434
2925:Lib/FATFs/ff.c **** #if !_FS_TINY
2926:Lib/FATFs/ff.c **** #if !_FS_READONLY
2927:Lib/FATFs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
2928:Lib/FATFs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2929:Lib/FATFs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2930:Lib/FATFs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2931:Lib/FATFs/ff.c **** 			}
2932:Lib/FATFs/ff.c **** #endif
2933:Lib/FATFs/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
2934:Lib/FATFs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2935:Lib/FATFs/ff.c **** #endif
2936:Lib/FATFs/ff.c **** 			fp->dsect = nsect;
 6108               		.loc 1 2936 0 is_stmt 1
 6109 0304 C68A      		std Z+22,r12
 6110 0306 D78A      		std Z+23,r13
 6111 0308 E08E      		std Z+24,r14
 6112 030a F18E      		std Z+25,r15
 6113               	.LVL507:
 6114               	.L434:
2937:Lib/FATFs/ff.c **** 		}
2938:Lib/FATFs/ff.c **** #if !_FS_READONLY
2939:Lib/FATFs/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 6115               		.loc 1 2939 0
 6116 030c ED81      		ldd r30,Y+5
 6117 030e FE81      		ldd r31,Y+6
 6118 0310 4285      		ldd r20,Z+10
 6119 0312 5385      		ldd r21,Z+11
 6120 0314 6485      		ldd r22,Z+12
 6121 0316 7585      		ldd r23,Z+13
 6122 0318 4817      		cp r20,r24
 6123 031a 5907      		cpc r21,r25
 6124 031c 6A07      		cpc r22,r26
 6125 031e 7B07      		cpc r23,r27
 6126 0320 00F4      		brsh .L438
2940:Lib/FATFs/ff.c **** 			fp->fsize = fp->fptr;
 6127               		.loc 1 2940 0
 6128 0322 8287      		std Z+10,r24
 6129 0324 9387      		std Z+11,r25
 6130 0326 A487      		std Z+12,r26
 6131 0328 B587      		std Z+13,r27
2941:Lib/FATFs/ff.c **** 			fp->flag |= FA__WRITTEN;
 6132               		.loc 1 2941 0
 6133 032a 8481      		ldd r24,Z+4
 6134 032c 8062      		ori r24,lo8(32)
 6135 032e 8483      		std Z+4,r24
 6136 0330 00C0      		rjmp .L438
 6137               	.LVL508:
 6138               	.L436:
 6139               	.LBE88:
2809:Lib/FATFs/ff.c **** 
 6140               		.loc 1 2809 0
 6141 0332 82E0      		ldi r24,lo8(2)
 6142 0334 00C0      		rjmp .L452
 6143               	.LVL509:
 6144               	.L438:
 6145               	.LBB89:
 6146 0336 80E0      		ldi r24,0
 6147 0338 00C0      		rjmp .L452
 6148               	.LVL510:
 6149               	.L455:
2924:Lib/FATFs/ff.c **** #if !_FS_TINY
 6150               		.loc 1 2924 0
 6151 033a 80E0      		ldi r24,0
 6152 033c 90E0      		ldi r25,0
 6153 033e DC01      		movw r26,r24
 6154 0340 00C0      		rjmp .L434
 6155               	.LVL511:
 6156               	.L452:
 6157               	/* epilogue start */
 6158               	.LBE89:
2942:Lib/FATFs/ff.c **** 		}
2943:Lib/FATFs/ff.c **** #endif
2944:Lib/FATFs/ff.c **** 	}
2945:Lib/FATFs/ff.c **** 
2946:Lib/FATFs/ff.c **** 	LEAVE_FF(fp->fs, res);
2947:Lib/FATFs/ff.c **** }
 6159               		.loc 1 2947 0
 6160 0342 2696      		adiw r28,6
 6161               	.LVL512:
 6162 0344 0FB6      		in __tmp_reg__,__SREG__
 6163 0346 F894      		cli
 6164 0348 DEBF      		out __SP_H__,r29
 6165 034a 0FBE      		out __SREG__,__tmp_reg__
 6166 034c CDBF      		out __SP_L__,r28
 6167               	.LVL513:
 6168 034e DF91      		pop r29
 6169 0350 CF91      		pop r28
 6170 0352 1F91      		pop r17
 6171 0354 0F91      		pop r16
 6172 0356 FF90      		pop r15
 6173 0358 EF90      		pop r14
 6174 035a DF90      		pop r13
 6175 035c CF90      		pop r12
 6176 035e BF90      		pop r11
 6177 0360 AF90      		pop r10
 6178 0362 9F90      		pop r9
 6179 0364 8F90      		pop r8
 6180 0366 7F90      		pop r7
 6181 0368 6F90      		pop r6
 6182 036a 5F90      		pop r5
 6183 036c 4F90      		pop r4
 6184 036e 0895      		ret
 6185               		.cfi_endproc
 6186               	.LFE165:
 6188               		.local	Fsid
 6189               		.comm	Fsid,2,1
 6190               		.local	FatFs
 6191               		.comm	FatFs,2,1
 6192               		.text
 6193               	.Letext0:
 6194               		.file 2 "Lib/FATFs/integer.h"
 6195               		.file 3 "Lib/FATFs/ff.h"
 6196               		.file 4 "Lib/FATFs/diskio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
     /tmp/ccAicFAv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccAicFAv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccAicFAv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccAicFAv.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccAicFAv.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAicFAv.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAicFAv.s:13     .text.mem_cpy:0000000000000000 mem_cpy
     /tmp/ccAicFAv.s:87     .text.move_window:0000000000000000 move_window
     /tmp/ccAicFAv.s:304    .text.check_fs:0000000000000000 check_fs
     /tmp/ccAicFAv.s:403    .text.validate:0000000000000000 validate
     /tmp/ccAicFAv.s:454    .text.clust2sect:0000000000000000 clust2sect
     /tmp/ccAicFAv.s:524    .text.get_fat:0000000000000000 get_fat
     /tmp/ccAicFAv.s:824    .text.dir_sdi.constprop.1:0000000000000000 dir_sdi.constprop.1
     /tmp/ccAicFAv.s:1021   .text.put_fat:0000000000000000 put_fat
     /tmp/ccAicFAv.s:1444   .text.create_chain:0000000000000000 create_chain
     /tmp/ccAicFAv.s:1781   .text.dir_next:0000000000000000 dir_next
     /tmp/ccAicFAv.s:2182   .text.f_mount:0000000000000000 f_mount
     /tmp/ccAicFAv.s:6189   .bss:0000000000000002 FatFs
     /tmp/ccAicFAv.s:2237   .text.f_open:0000000000000000 f_open
                             .bss:0000000000000000 Fsid
     /tmp/ccAicFAv.s:4208   .text.f_read:0000000000000000 f_read
     /tmp/ccAicFAv.s:4692   .text.f_write:0000000000000000 f_write
     /tmp/ccAicFAv.s:5280   .text.f_sync:0000000000000000 f_sync
     /tmp/ccAicFAv.s:5536   .text.f_close:0000000000000000 f_close
     /tmp/ccAicFAv.s:5576   .text.f_lseek:0000000000000000 f_lseek

UNDEFINED SYMBOLS
disk_write
disk_read
disk_status
__muluhisi3
disk_initialize
__udivmodsi4
get_fattime
disk_ioctl
__do_copy_data
__do_clear_bss
