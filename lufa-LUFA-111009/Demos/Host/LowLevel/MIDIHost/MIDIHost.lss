
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000196a  000019fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000196a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800118  00800118  00001a16  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059b9  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000216e  00000000  00000000  00007719  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ef0  00000000  00000000  00009887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000930  00000000  00000000  0000c778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002434  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003605  00000000  00000000  0000f4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00012ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c1       	rjmp	.+660    	; 0x296 <__ctors_end>
       2:	00 00       	nop
       4:	66 c1       	rjmp	.+716    	; 0x2d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c1       	rjmp	.+712    	; 0x2d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c1       	rjmp	.+708    	; 0x2d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c1       	rjmp	.+704    	; 0x2d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c1       	rjmp	.+700    	; 0x2d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c1       	rjmp	.+696    	; 0x2d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c1       	rjmp	.+692    	; 0x2d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c1       	rjmp	.+688    	; 0x2d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c1       	rjmp	.+684    	; 0x2d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	49 c6       	rjmp	.+3218   	; 0xcbc <__vector_10>
      2a:	00 00       	nop
      2c:	52 c1       	rjmp	.+676    	; 0x2d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	50 c1       	rjmp	.+672    	; 0x2d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	4e c1       	rjmp	.+668    	; 0x2d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c1       	rjmp	.+664    	; 0x2d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c1       	rjmp	.+660    	; 0x2d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c1       	rjmp	.+656    	; 0x2d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	46 c1       	rjmp	.+652    	; 0x2d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c1       	rjmp	.+648    	; 0x2d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c1       	rjmp	.+644    	; 0x2d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c1       	rjmp	.+640    	; 0x2d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	3e c1       	rjmp	.+636    	; 0x2d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c1       	rjmp	.+632    	; 0x2d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c1       	rjmp	.+628    	; 0x2d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c1       	rjmp	.+624    	; 0x2d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	36 c1       	rjmp	.+620    	; 0x2d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	34 c1       	rjmp	.+616    	; 0x2d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	32 c1       	rjmp	.+612    	; 0x2d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c1       	rjmp	.+608    	; 0x2d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c1       	rjmp	.+604    	; 0x2d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c1       	rjmp	.+600    	; 0x2d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c1       	rjmp	.+596    	; 0x2d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c1       	rjmp	.+592    	; 0x2d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c1       	rjmp	.+588    	; 0x2d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c1       	rjmp	.+584    	; 0x2d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c1       	rjmp	.+580    	; 0x2d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	20 c1       	rjmp	.+576    	; 0x2d2 <__bad_interrupt>
      92:	00 00       	nop
      94:	1e c1       	rjmp	.+572    	; 0x2d2 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 04       	cpc	r4, r5
      9a:	36 05       	cpc	r19, r6
      9c:	63 04       	cpc	r6, r3
      9e:	6d 04       	cpc	r6, r13
      a0:	98 04       	cpc	r9, r8
      a2:	c0 04       	cpc	r12, r0
      a4:	cb 04       	cpc	r12, r11
      a6:	dc 04       	cpc	r13, r12
      a8:	f8 04       	cpc	r15, r8
      aa:	1f 05       	cpc	r17, r15

000000ac <__trampolines_end>:
      ac:	4d 49       	sbci	r20, 0x9D	; 157
      ae:	44 49       	sbci	r20, 0x94	; 148
      b0:	20 4e       	sbci	r18, 0xE0	; 224
      b2:	6f 74       	andi	r22, 0x4F	; 79
      b4:	65 20       	and	r6, r5
      b6:	25 73       	andi	r18, 0x35	; 53
      b8:	20 2d       	mov	r18, r0
      ba:	20 43       	sbci	r18, 0x30	; 48
      bc:	68 61       	ori	r22, 0x18	; 24
      be:	6e 6e       	ori	r22, 0xEE	; 238
      c0:	65 6c       	ori	r22, 0xC5	; 197
      c2:	20 25       	eor	r18, r0
      c4:	64 2c       	mov	r6, r4
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	69 74       	andi	r22, 0x49	; 73
      ca:	63 68       	ori	r22, 0x83	; 131
      cc:	20 25       	eor	r18, r0
      ce:	64 2c       	mov	r6, r4
      d0:	20 56       	subi	r18, 0x60	; 96
      d2:	65 6c       	ori	r22, 0xC5	; 197
      d4:	6f 63       	ori	r22, 0x3F	; 63
      d6:	69 74       	andi	r22, 0x49	; 73
      d8:	79 20       	and	r7, r9
      da:	25 64       	ori	r18, 0x45	; 69
      dc:	0d 0a       	sbc	r0, r29
      de:	00 1b       	Address 0x00000000000000de is out of bounds.
.word	0xffff	; ????

000000df <__c.4537>:
      df:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      ef:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      ff:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     10f:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     11f:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     12f:	1b 5b 33 37 6d 00                                   .[37m.

00000135 <__c.4530>:
     135:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     145:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     155:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000164 <__c.4525>:
     164:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     174:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

0000017e <__c.4523>:
     17e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     18e:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     19e:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1ae:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1be:	37 6d 00                                            7m.

000001c1 <__c.4521>:
     1c1:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1d1:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001db <__c.4519>:
     1db:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1eb:	69 63 65 2e 0d 0a 00                                ice....

000001f2 <__c.4517>:
     1f2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     202:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     212:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000021c <__c.4514>:
     21c:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     22c:	61 74 61 2e 0d 0a 00                                ata....

00000233 <__c.4509>:
     233:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     243:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     253:	00                                                  .

00000254 <__c.4504>:
     254:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     264:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000271 <__c.4495>:
     271:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     281:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     291:	33 37 6d 00 00                                      37m..

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	d0 e2       	ldi	r29, 0x20	; 32
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61

000002a2 <__do_copy_data>:
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b1 e0       	ldi	r27, 0x01	; 1
     2a8:	ea e6       	ldi	r30, 0x6A	; 106
     2aa:	f9 e1       	ldi	r31, 0x19	; 25
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a8 31       	cpi	r26, 0x18	; 24
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>

000002bc <__do_clear_bss>:
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	a8 e1       	ldi	r26, 0x18	; 24
     2c0:	b1 e0       	ldi	r27, 0x01	; 1
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <.do_clear_bss_start>

000002c4 <.do_clear_bss_loop>:
     2c4:	1d 92       	st	X+, r1

000002c6 <.do_clear_bss_start>:
     2c6:	ab 33       	cpi	r26, 0x3B	; 59
     2c8:	b2 07       	cpc	r27, r18
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <.do_clear_bss_loop>
     2cc:	6e d1       	rcall	.+732    	; 0x5aa <main>
     2ce:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <_exit>

000002d2 <__bad_interrupt>:
     2d2:	96 ce       	rjmp	.-724    	; 0x0 <__vectors>

000002d4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d4:	9b b1       	in	r25, 0x0b	; 11
     2d6:	9f 70       	andi	r25, 0x0F	; 15
     2d8:	89 2b       	or	r24, r25
     2da:	8b b9       	out	0x0b, r24	; 11
     2dc:	08 95       	ret

000002de <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2de:	84 b7       	in	r24, 0x34	; 52
     2e0:	87 7f       	andi	r24, 0xF7	; 247
     2e2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	a8 95       	wdr
     2ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ee:	88 61       	ori	r24, 0x18	; 24
     2f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2f8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	80 e8       	ldi	r24, 0x80	; 128
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     306:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     30a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     30c:	83 e3       	ldi	r24, 0x33	; 51
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     314:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     31e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     322:	88 e1       	ldi	r24, 0x18	; 24
     324:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     328:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     32a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     32c:	8a b1       	in	r24, 0x0a	; 10
     32e:	80 6f       	ori	r24, 0xF0	; 240
     330:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     332:	8b b1       	in	r24, 0x0b	; 11
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     338:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     33a:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     33c:	84 b1       	in	r24, 0x04	; 4
     33e:	8f 71       	andi	r24, 0x1F	; 31
     340:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     342:	8d b1       	in	r24, 0x0d	; 13
     344:	8f 7c       	andi	r24, 0xCF	; 207
     346:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     348:	85 b1       	in	r24, 0x05	; 5
     34a:	80 6e       	ori	r24, 0xE0	; 224
     34c:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     34e:	8e b1       	in	r24, 0x0e	; 14
     350:	80 63       	ori	r24, 0x30	; 48
     352:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     354:	9d d4       	rcall	.+2362   	; 0xc90 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     356:	a5 e3       	ldi	r26, 0x35	; 53
     358:	b1 e0       	ldi	r27, 0x01	; 1
     35a:	e7 e2       	ldi	r30, 0x27	; 39
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	fc 93       	st	X, r31
     362:	ee 93       	st	-X, r30
					stdout = Stream;
     364:	13 96       	adiw	r26, 0x03	; 3
     366:	fc 93       	st	X, r31
     368:	ee 93       	st	-X, r30
     36a:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     36c:	8e e0       	ldi	r24, 0x0E	; 14
     36e:	df 01       	movw	r26, r30
     370:	1d 92       	st	X+, r1
     372:	8a 95       	dec	r24
     374:	e9 f7       	brne	.-6      	; 0x370 <SetupHardware+0x92>
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	83 83       	std	Z+3, r24	; 0x03
     37a:	8a e8       	ldi	r24, 0x8A	; 138
     37c:	99 e0       	ldi	r25, 0x09	; 9
     37e:	91 87       	std	Z+9, r25	; 0x09
     380:	80 87       	std	Z+8, r24	; 0x08
     382:	83 e9       	ldi	r24, 0x93	; 147
     384:	99 e0       	ldi	r25, 0x09	; 9
     386:	93 87       	std	Z+11, r25	; 0x0b
     388:	82 87       	std	Z+10, r24	; 0x0a
     38a:	08 95       	ret

0000038c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     38c:	84 e5       	ldi	r24, 0x54	; 84
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	0e 94 d5 09 	call	0x13aa	; 0x13aa <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     394:	80 ea       	ldi	r24, 0xA0	; 160
     396:	9e cf       	rjmp	.-196    	; 0x2d4 <LEDs_SetAllLEDs>

00000398 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     398:	83 e3       	ldi	r24, 0x33	; 51
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3a0:	80 e1       	ldi	r24, 0x10	; 16
     3a2:	98 cf       	rjmp	.-208    	; 0x2d4 <LEDs_SetAllLEDs>

000003a4 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3a4:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     3a6:	8c e1       	ldi	r24, 0x1C	; 28
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	ff d7       	rcall	.+4094   	; 0x13aa <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3ac:	28 d1       	rcall	.+592    	; 0x5fe <ProcessConfigurationDescriptor>
     3ae:	c8 2f       	mov	r28, r24
     3b0:	88 23       	and	r24, r24
     3b2:	a9 f0       	breq	.+42     	; 0x3de <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
	{
		if (ErrorCode == ControlError)
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	19 f4       	brne	.+6      	; 0x3be <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3b8:	82 ef       	ldi	r24, 0xF2	; 242
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3be:	8b ed       	ldi	r24, 0xDB	; 219
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	f3 d7       	rcall	.+4070   	; 0x13aa <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3c4:	1f 92       	push	r1
     3c6:	cf 93       	push	r28
     3c8:	81 ec       	ldi	r24, 0xC1	; 193
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	c5 d7       	rcall	.+3978   	; 0x135c <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	80 e9       	ldi	r24, 0x90	; 144
     3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	64 d7       	rcall	.+3784   	; 0x12aa <USB_Host_SetDeviceConfiguration>
     3e2:	88 23       	and	r24, r24
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3e6:	1f 92       	push	r1
     3e8:	8f 93       	push	r24
     3ea:	8e e7       	ldi	r24, 0x7E	; 126
     3ec:	91 e0       	ldi	r25, 0x01	; 1

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     3ee:	ee cf       	rjmp	.-36     	; 0x3cc <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3f0:	84 e6       	ldi	r24, 0x64	; 100
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	da d7       	rcall	.+4020   	; 0x13aa <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3f6:	80 e6       	ldi	r24, 0x60	; 96
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3f8:	cf 91       	pop	r28
     3fa:	6c cf       	rjmp	.-296    	; 0x2d4 <LEDs_SetAllLEDs>

000003fc <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3fc:	c8 2f       	mov	r28, r24
	USB_Disable();
     3fe:	e0 d3       	rcall	.+1984   	; 0xbc0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     400:	1f 92       	push	r1
     402:	cf 93       	push	r28
     404:	85 e3       	ldi	r24, 0x35	; 53
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	a7 d7       	rcall	.+3918   	; 0x135c <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     40e:	80 e9       	ldi	r24, 0x90	; 144
     410:	61 df       	rcall	.-318    	; 0x2d4 <LEDs_SetAllLEDs>
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	ff cf       	rjmp	.-2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

0000041c <EVENT_USB_Host_DeviceEnumerationFailed>:
     41c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     420:	1f 92       	push	r1
     422:	9f 93       	push	r25
     424:	1f 92       	push	r1
     426:	6f 93       	push	r22
     428:	1f 92       	push	r1
     42a:	8f 93       	push	r24
     42c:	8f ed       	ldi	r24, 0xDF	; 223
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9f 93       	push	r25
     432:	8f 93       	push	r24
     434:	93 d7       	rcall	.+3878   	; 0x135c <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     436:	8d b7       	in	r24, 0x3d	; 61
     438:	9e b7       	in	r25, 0x3e	; 62
     43a:	08 96       	adiw	r24, 0x08	; 8
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	9e bf       	out	0x3e, r25	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	8d bf       	out	0x3d, r24	; 61
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	45 cf       	rjmp	.-374    	; 0x2d4 <LEDs_SetAllLEDs>

0000044a <MIDIHost_Task>:

/** Task to read in note on/off messages from the attached MIDI device and print it to the serial port.
 *  When the board joystick or buttons are pressed, note on/off messages are sent to the attached device.
 */
void MIDIHost_Task(void)
{
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	00 d0       	rcall	.+0      	; 0x452 <MIDIHost_Task+0x8>
     452:	00 d0       	rcall	.+0      	; 0x454 <MIDIHost_Task+0xa>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     458:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <USB_HostState>
     45c:	8b 30       	cpi	r24, 0x0B	; 11
     45e:	09 f0       	breq	.+2      	; 0x462 <MIDIHost_Task+0x18>
     460:	9c c0       	rjmp	.+312    	; 0x59a <MIDIHost_Task+0x150>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     468:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  return;
	  
	Pipe_SelectPipe(MIDI_DATA_IN_PIPE);

	if (Pipe_IsINReceived())
     46c:	80 ff       	sbrs	r24, 0
     46e:	38 c0       	rjmp	.+112    	; 0x4e0 <MIDIHost_Task+0x96>
	{
		MIDI_EventPacket_t MIDIEvent;

		Pipe_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	64 e0       	ldi	r22, 0x04	; 4
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	ce 01       	movw	r24, r28
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	01 d5       	rcall	.+2562   	; 0xe80 <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     47e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     482:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

		if (!(Pipe_BytesInPipe()))
     486:	89 2b       	or	r24, r25
     488:	29 f4       	brne	.+10     	; 0x494 <MIDIHost_Task+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     48a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     48e:	8e 77       	andi	r24, 0x7E	; 126
     490:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  Pipe_ClearIN();

		bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     494:	29 81       	ldd	r18, Y+1	; 0x01
     496:	2f 70       	andi	r18, 0x0F	; 15
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		if (NoteOnEvent || NoteOffEvent)
     498:	88 e0       	ldi	r24, 0x08	; 8
     49a:	82 0f       	add	r24, r18
     49c:	8f 70       	andi	r24, 0x0F	; 15
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	f8 f4       	brcc	.+62     	; 0x4e0 <MIDIHost_Task+0x96>
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     4a2:	5c 81       	ldd	r21, Y+4	; 0x04
     4a4:	4b 81       	ldd	r20, Y+3	; 0x03
     4a6:	8a 81       	ldd	r24, Y+2	; 0x02
     4a8:	8f 70       	andi	r24, 0x0F	; 15
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	29 30       	cpi	r18, 0x09	; 9
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <MIDIHost_Task+0x6e>
     4b2:	24 e1       	ldi	r18, 0x14	; 20
     4b4:	31 e0       	ldi	r19, 0x01	; 1
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <MIDIHost_Task+0x72>
     4b8:	21 e1       	ldi	r18, 0x11	; 17
     4ba:	31 e0       	ldi	r19, 0x01	; 1
     4bc:	1f 92       	push	r1
     4be:	5f 93       	push	r21
     4c0:	1f 92       	push	r1
     4c2:	4f 93       	push	r20
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	3f 93       	push	r19
     4ca:	2f 93       	push	r18
     4cc:	8c ea       	ldi	r24, 0xAC	; 172
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	43 d7       	rcall	.+3718   	; 0x135c <printf_P>
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     4e6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}				
	}

	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);

	if (Pipe_IsOUTReady())
     4ea:	82 ff       	sbrs	r24, 2
     4ec:	56 c0       	rjmp	.+172    	; 0x59a <MIDIHost_Task+0x150>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     4ee:	83 b1       	in	r24, 0x03	; 3
     4f0:	1c b1       	in	r17, 0x0c	; 12
     4f2:	10 95       	com	r17
     4f4:	10 73       	andi	r17, 0x30	; 48
     4f6:	16 95       	lsr	r17
     4f8:	80 95       	com	r24
     4fa:	80 7e       	andi	r24, 0xE0	; 224
     4fc:	18 2b       	or	r17, r24
		uint8_t MIDICommand = 0;
		uint8_t MIDIPitch;

		static uint8_t PrevJoystickStatus;
		uint8_t JoystickStatus  = Joystick_GetStatus();
		uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     4fe:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
     502:	21 27       	eor	r18, r17

		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     504:	62 9b       	sbis	0x0c, 2	; 12
     506:	02 c0       	rjmp	.+4      	; 0x50c <MIDIHost_Task+0xc2>
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	01 c0       	rjmp	.+2      	; 0x50e <MIDIHost_Task+0xc4>
     50c:	39 e0       	ldi	r19, 0x09	; 9

		if (JoystickChanges & JOY_LEFT)
     50e:	26 ff       	sbrs	r18, 6
     510:	04 c0       	rjmp	.+8      	; 0x51a <MIDIHost_Task+0xd0>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     512:	16 fd       	sbrc	r17, 6
     514:	04 c0       	rjmp	.+8      	; 0x51e <MIDIHost_Task+0xd4>
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	03 c0       	rjmp	.+6      	; 0x520 <MIDIHost_Task+0xd6>

	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);

	if (Pipe_IsOUTReady())
	{
		uint8_t MIDICommand = 0;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	01 c0       	rjmp	.+2      	; 0x520 <MIDIHost_Task+0xd6>
		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

		if (JoystickChanges & JOY_LEFT)
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     51e:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
     520:	27 ff       	sbrs	r18, 7
     522:	05 c0       	rjmp	.+10     	; 0x52e <MIDIHost_Task+0xe4>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3D;
     524:	9d e3       	ldi	r25, 0x3D	; 61
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     526:	17 fd       	sbrc	r17, 7
     528:	04 c0       	rjmp	.+8      	; 0x532 <MIDIHost_Task+0xe8>
     52a:	80 e8       	ldi	r24, 0x80	; 128
     52c:	03 c0       	rjmp	.+6      	; 0x534 <MIDIHost_Task+0xea>
     52e:	9c e3       	ldi	r25, 0x3C	; 60
     530:	01 c0       	rjmp	.+2      	; 0x534 <MIDIHost_Task+0xea>
     532:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
     534:	23 ff       	sbrs	r18, 3
     536:	06 c0       	rjmp	.+12     	; 0x544 <MIDIHost_Task+0xfa>
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3E;
     538:	9e e3       	ldi	r25, 0x3E	; 62
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     53a:	13 fd       	sbrc	r17, 3
     53c:	02 c0       	rjmp	.+4      	; 0x542 <MIDIHost_Task+0xf8>
     53e:	80 e8       	ldi	r24, 0x80	; 128
     540:	01 c0       	rjmp	.+2      	; 0x544 <MIDIHost_Task+0xfa>
     542:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
     544:	24 ff       	sbrs	r18, 4
     546:	06 c0       	rjmp	.+12     	; 0x554 <MIDIHost_Task+0x10a>
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3F;
     548:	9f e3       	ldi	r25, 0x3F	; 63
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     54a:	14 fd       	sbrc	r17, 4
     54c:	02 c0       	rjmp	.+4      	; 0x552 <MIDIHost_Task+0x108>
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	01 c0       	rjmp	.+2      	; 0x554 <MIDIHost_Task+0x10a>
     552:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
     554:	25 ff       	sbrs	r18, 5
     556:	04 c0       	rjmp	.+8      	; 0x560 <MIDIHost_Task+0x116>
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     558:	15 fd       	sbrc	r17, 5
     55a:	1c c0       	rjmp	.+56     	; 0x594 <MIDIHost_Task+0x14a>
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	1b c0       	rjmp	.+54     	; 0x596 <MIDIHost_Task+0x14c>
			MIDIPitch   = 0x3B;
		}

		/* Check if a MIDI command is to be sent */
		if (MIDICommand)
     560:	88 23       	and	r24, r24
     562:	a9 f0       	breq	.+42     	; 0x58e <MIDIHost_Task+0x144>
		{
			MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     564:	28 2f       	mov	r18, r24
     566:	22 95       	swap	r18
     568:	2f 70       	andi	r18, 0x0F	; 15
     56a:	29 83       	std	Y+1, r18	; 0x01
     56c:	83 2b       	or	r24, r19
     56e:	8a 83       	std	Y+2, r24	; 0x02
     570:	9b 83       	std	Y+3, r25	; 0x03
     572:	80 e4       	ldi	r24, 0x40	; 64
     574:	8c 83       	std	Y+4, r24	; 0x04
					.Data2       = MIDIPitch,
					.Data3       = MIDI_STANDARD_VELOCITY,
				};

			/* Write the MIDI event packet to the pipe */
			Pipe_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	64 e0       	ldi	r22, 0x04	; 4
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	ce 01       	movw	r24, r28
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	2f d4       	rcall	.+2142   	; 0xde2 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     584:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     588:	8b 77       	andi	r24, 0x7B	; 123
     58a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			/* Send the data in the pipe to the device */
			Pipe_ClearOUT();
		}

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
     58e:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <__data_end>
     592:	03 c0       	rjmp	.+6      	; 0x59a <MIDIHost_Task+0x150>
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     594:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     596:	9b e3       	ldi	r25, 0x3B	; 59
     598:	e5 cf       	rjmp	.-54     	; 0x564 <MIDIHost_Task+0x11a>
		}

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
	}
}
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	08 95       	ret

000005aa <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5aa:	99 de       	rcall	.-718    	; 0x2de <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     5ac:	81 e7       	ldi	r24, 0x71	; 113
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	fc d6       	rcall	.+3576   	; 0x13aa <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	8f de       	rcall	.-738    	; 0x2d4 <LEDs_SetAllLEDs>
	sei();
     5b6:	78 94       	sei

	for (;;)
	{
		MIDIHost_Task();
     5b8:	48 df       	rcall	.-368    	; 0x44a <MIDIHost_Task>
     5ba:	9e d6       	rcall	.+3388   	; 0x12f8 <USB_USBTask>

		USB_USBTask();
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <main+0xe>

000005be <DComp_NextMIDIStreamingInterface>:
     5be:	fc 01       	movw	r30, r24
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
 */
uint8_t DComp_NextMIDIStreamingInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     5c2:	84 30       	cpi	r24, 0x04	; 4
     5c4:	51 f4       	brne	.+20     	; 0x5da <DComp_NextMIDIStreamingInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
     5c6:	85 81       	ldd	r24, Z+5	; 0x05
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	39 f4       	brne	.+14     	; 0x5da <DComp_NextMIDIStreamingInterface+0x1c>
     5cc:	86 81       	ldd	r24, Z+6	; 0x06
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	21 f4       	brne	.+8      	; 0x5da <DComp_NextMIDIStreamingInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
     5d2:	87 81       	ldd	r24, Z+7	; 0x07
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
     5d4:	81 11       	cpse	r24, r1
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <DComp_NextMIDIStreamingInterface+0x1c>
     5d8:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     5da:	82 e0       	ldi	r24, 0x02	; 2
}
     5dc:	08 95       	ret

000005de <DComp_NextMIDIStreamingDataEndpoint>:
 *  another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingDataEndpoint(void* CurrentDescriptor)
{
     5de:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	95 30       	cpi	r25, 0x05	; 5
     5e4:	31 f4       	brne	.+12     	; 0x5f2 <DComp_NextMIDIStreamingDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     5e6:	83 81       	ldd	r24, Z+3	; 0x03
     5e8:	83 70       	andi	r24, 0x03	; 3
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	31 f4       	brne	.+12     	; 0x5fa <DComp_NextMIDIStreamingDataEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
     5f2:	94 30       	cpi	r25, 0x04	; 4
     5f4:	11 f4       	brne	.+4      	; 0x5fa <DComp_NextMIDIStreamingDataEndpoint+0x1c>
	{
		return DESCRIPTOR_SEARCH_Fail;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
}
     5fc:	08 95       	ret

000005fe <ProcessConfigurationDescriptor>:
 *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endpoints.
 *
 *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5fe:	af 92       	push	r10
     600:	bf 92       	push	r11
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	c4 50       	subi	r28, 0x04	; 4
     618:	d2 40       	sbci	r29, 0x02	; 2
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     624:	ae 01       	movw	r20, r28
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	cd 5f       	subi	r28, 0xFD	; 253
     62c:	dd 4f       	sbci	r29, 0xFD	; 253
     62e:	59 83       	std	Y+1, r21	; 0x01
     630:	48 83       	st	Y, r20
     632:	c3 50       	subi	r28, 0x03	; 3
     634:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	32 e0       	ldi	r19, 0x02	; 2
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7d 4f       	sbci	r23, 0xFD	; 253
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	8b d4       	rcall	.+2326   	; 0xf5a <USB_Host_GetDeviceConfigDescriptor>
     644:	85 30       	cpi	r24, 0x05	; 5
     646:	41 f0       	breq	.+16     	; 0x658 <ProcessConfigurationDescriptor+0x5a>
     648:	86 30       	cpi	r24, 0x06	; 6
     64a:	09 f4       	brne	.+2      	; 0x64e <ProcessConfigurationDescriptor+0x50>
     64c:	4f c0       	rjmp	.+158    	; 0x6ec <ProcessConfigurationDescriptor+0xee>
     64e:	88 23       	and	r24, r24
     650:	19 f1       	breq	.+70     	; 0x698 <ProcessConfigurationDescriptor+0x9a>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     652:	ff 24       	eor	r15, r15
     654:	f3 94       	inc	r15
     656:	4f c0       	rjmp	.+158    	; 0x6f6 <ProcessConfigurationDescriptor+0xf8>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     658:	22 e0       	ldi	r18, 0x02	; 2
     65a:	f2 2e       	mov	r15, r18
     65c:	4c c0       	rjmp	.+152    	; 0x6f6 <ProcessConfigurationDescriptor+0xf8>

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     65e:	4f ee       	ldi	r20, 0xEF	; 239
     660:	52 e0       	ldi	r21, 0x02	; 2
     662:	be 01       	movw	r22, r28
     664:	6d 5f       	subi	r22, 0xFD	; 253
     666:	7d 4f       	sbci	r23, 0xFD	; 253
     668:	ce 01       	movw	r24, r28
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	9d 4f       	sbci	r25, 0xFD	; 253
     66e:	ce d4       	rcall	.+2460   	; 0x100c <USB_GetNextDescriptorComp>
     670:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     672:	81 11       	cpse	r24, r1
     674:	11 c0       	rjmp	.+34     	; 0x698 <ProcessConfigurationDescriptor+0x9a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     676:	cd 5f       	subi	r28, 0xFD	; 253
     678:	dd 4f       	sbci	r29, 0xFD	; 253
     67a:	e8 81       	ld	r30, Y
     67c:	f9 81       	ldd	r31, Y+1	; 0x01
     67e:	c3 50       	subi	r28, 0x03	; 3
     680:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	87 fd       	sbrc	r24, 7
     686:	02 c0       	rjmp	.+4      	; 0x68c <ProcessConfigurationDescriptor+0x8e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
     688:	6f 01       	movw	r12, r30

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     68a:	f8 01       	movw	r30, r16
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     68c:	30 97       	sbiw	r30, 0x00	; 0
     68e:	d1 f4       	brne	.+52     	; 0x6c4 <ProcessConfigurationDescriptor+0xc6>
 *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endpoints.
 *
 *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     690:	8f 01       	movw	r16, r30
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     692:	a1 14       	cp	r10, r1
     694:	b1 04       	cpc	r11, r1
     696:	19 f7       	brne	.-58     	; 0x65e <ProcessConfigurationDescriptor+0x60>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     698:	4f ed       	ldi	r20, 0xDF	; 223
     69a:	52 e0       	ldi	r21, 0x02	; 2
     69c:	be 01       	movw	r22, r28
     69e:	6d 5f       	subi	r22, 0xFD	; 253
     6a0:	7d 4f       	sbci	r23, 0xFD	; 253
     6a2:	ce 01       	movw	r24, r28
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	9d 4f       	sbci	r25, 0xFD	; 253
     6a8:	b1 d4       	rcall	.+2402   	; 0x100c <USB_GetNextDescriptorComp>
     6aa:	81 11       	cpse	r24, r1
     6ac:	22 c0       	rjmp	.+68     	; 0x6f2 <ProcessConfigurationDescriptor+0xf4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     6ae:	cd 5f       	subi	r28, 0xFD	; 253
     6b0:	dd 4f       	sbci	r29, 0xFD	; 253
     6b2:	a8 80       	ld	r10, Y
     6b4:	b9 80       	ldd	r11, Y+1	; 0x01
     6b6:	c3 50       	subi	r28, 0x03	; 3
     6b8:	d2 40       	sbci	r29, 0x02	; 2

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     6ba:	00 e0       	ldi	r16, 0x00	; 0
     6bc:	10 e0       	ldi	r17, 0x00	; 0
			DataOUTEndpoint = NULL;
     6be:	c1 2c       	mov	r12, r1
     6c0:	d1 2c       	mov	r13, r1
     6c2:	e7 cf       	rjmp	.-50     	; 0x692 <ProcessConfigurationDescriptor+0x94>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     6c4:	c1 14       	cp	r12, r1
     6c6:	d1 04       	cpc	r13, r1
     6c8:	19 f3       	breq	.-58     	; 0x690 <ProcessConfigurationDescriptor+0x92>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the MIDI data IN pipe */
	Pipe_ConfigurePipe(MIDI_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     6ca:	04 81       	ldd	r16, Z+4	; 0x04
     6cc:	15 81       	ldd	r17, Z+5	; 0x05
     6ce:	e1 2c       	mov	r14, r1
     6d0:	22 81       	ldd	r18, Z+2	; 0x02
     6d2:	40 e1       	ldi	r20, 0x10	; 16
     6d4:	62 e0       	ldi	r22, 0x02	; 2
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	d5 d1       	rcall	.+938    	; 0xa84 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     6da:	f6 01       	movw	r30, r12
     6dc:	04 81       	ldd	r16, Z+4	; 0x04
     6de:	15 81       	ldd	r17, Z+5	; 0x05
     6e0:	22 81       	ldd	r18, Z+2	; 0x02
     6e2:	40 e2       	ldi	r20, 0x20	; 32
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	cd d1       	rcall	.+922    	; 0xa84 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <ProcessConfigurationDescriptor+0xf8>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	f9 2e       	mov	r15, r25
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <ProcessConfigurationDescriptor+0xf8>
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	f8 2e       	mov	r15, r24
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6f6:	8f 2d       	mov	r24, r15
     6f8:	cc 5f       	subi	r28, 0xFC	; 252
     6fa:	dd 4f       	sbci	r29, 0xFD	; 253
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	08 95       	ret

0000071c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     71c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     720:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     722:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     726:	9d 7f       	andi	r25, 0xFD	; 253
     728:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     72c:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     730:	92 60       	ori	r25, 0x02	; 2
     732:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     736:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     73a:	91 fd       	sbrc	r25, 1
     73c:	fc cf       	rjmp	.-8      	; 0x736 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     73e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     742:	91 60       	ori	r25, 0x01	; 1
     744:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     748:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     74c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     750:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     752:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     756:	2f 7d       	andi	r18, 0xDF	; 223
     758:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     75c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     760:	2f 7d       	andi	r18, 0xDF	; 223
     762:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     766:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     768:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     76c:	35 ff       	sbrs	r19, 5
     76e:	0b c0       	rjmp	.+22     	; 0x786 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     770:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     774:	2f 7d       	andi	r18, 0xDF	; 223
     776:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     77a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     77e:	2d 7f       	andi	r18, 0xFD	; 253
     780:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     784:	08 c0       	rjmp	.+16     	; 0x796 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     786:	ef ec       	ldi	r30, 0xCF	; 207
     788:	f7 e0       	ldi	r31, 0x07	; 7
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <USB_Host_ResetDevice+0x6e>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <USB_Host_ResetDevice+0x74>
     790:	00 00       	nop
     792:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     794:	49 f7       	brne	.-46     	; 0x768 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     796:	99 23       	and	r25, r25
     798:	29 f0       	breq	.+10     	; 0x7a4 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     79a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     79e:	90 62       	ori	r25, 0x20	; 32
     7a0:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     7a4:	81 11       	cpse	r24, r1
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7a8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7ac:	8e 7f       	andi	r24, 0xFE	; 254
     7ae:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     7b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7bc:	08 95       	ret

000007be <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7be:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7c2:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7c4:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7c8:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7ca:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7ce:	3f 7d       	andi	r19, 0xDF	; 223
     7d0:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7d4:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7d8:	3f 7d       	andi	r19, 0xDF	; 223
     7da:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7de:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7e2:	31 60       	ori	r19, 0x01	; 1
     7e4:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7e8:	88 23       	and	r24, r24
     7ea:	39 f1       	breq	.+78     	; 0x83a <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7ec:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7f0:	35 ff       	sbrs	r19, 5
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7f4:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7f8:	3f 7d       	andi	r19, 0xDF	; 223
     7fa:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     7fe:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     800:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <USB_HostState>
     804:	31 30       	cpi	r19, 0x01	; 1
     806:	c1 f0       	breq	.+48     	; 0x838 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     808:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     80c:	34 ff       	sbrs	r19, 4
     80e:	09 c0       	rjmp	.+18     	; 0x822 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     810:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     814:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     818:	8f 7e       	andi	r24, 0xEF	; 239
     81a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     81e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     820:	0c c0       	rjmp	.+24     	; 0x83a <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     822:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     826:	31 ff       	sbrs	r19, 1
     828:	df cf       	rjmp	.-66     	; 0x7e8 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     82a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     82e:	8d 7f       	andi	r24, 0xFD	; 253
     830:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     834:	83 e0       	ldi	r24, 0x03	; 3

			break;
     836:	01 c0       	rjmp	.+2      	; 0x83a <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     838:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     83a:	21 11       	cpse	r18, r1
     83c:	05 c0       	rjmp	.+10     	; 0x848 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     83e:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     842:	2e 7f       	andi	r18, 0xFE	; 254
     844:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     848:	99 23       	and	r25, r25
     84a:	29 f0       	breq	.+10     	; 0x856 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     84c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     850:	90 62       	ori	r25, 0x20	; 32
     852:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     856:	08 95       	ret

00000858 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     858:	ef 92       	push	r14
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     872:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <USB_HostState>
     876:	8e 2f       	mov	r24, r30
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	8a 30       	cpi	r24, 0x0A	; 10
     87c:	91 05       	cpc	r25, r1
     87e:	08 f0       	brcs	.+2      	; 0x882 <USB_Host_ProcessNextHostState+0x2a>
     880:	f5 c0       	rjmp	.+490    	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
     882:	fc 01       	movw	r30, r24
     884:	e4 5b       	subi	r30, 0xB4	; 180
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	60 c5       	rjmp	.+2752   	; 0x134a <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     88a:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <WaitMSRemaining.2935>
     88e:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <WaitMSRemaining.2935+0x1>
     892:	01 15       	cp	r16, r1
     894:	11 05       	cpc	r17, r1
     896:	09 f4       	brne	.+2      	; 0x89a <USB_Host_ProcessNextHostState+0x42>
     898:	e9 c0       	rjmp	.+466    	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 df       	rcall	.-224    	; 0x7be <USB_Host_WaitMS>
     89e:	88 23       	and	r24, r24
     8a0:	31 f0       	breq	.+12     	; 0x8ae <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     8a2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <PostWaitState.2936>
     8a6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     8aa:	91 e0       	ldi	r25, 0x01	; 1
					break;
     8ac:	d1 c0       	rjmp	.+418    	; 0xa50 <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     8ae:	01 50       	subi	r16, 0x01	; 1
     8b0:	11 09       	sbc	r17, r1
     8b2:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <WaitMSRemaining.2935+0x1>
     8b6:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <WaitMSRemaining.2935>
     8ba:	01 2b       	or	r16, r17
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Host_ProcessNextHostState+0x68>
     8be:	d6 c0       	rjmp	.+428    	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     8c0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <PostWaitState.2936>
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8c6:	88 ee       	ldi	r24, 0xE8	; 232
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <WaitMSRemaining.2935+0x1>
     8ce:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_HostState>
			break;
     8d8:	c9 c0       	rjmp	.+402    	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <WaitMSRemaining.2935>
     8de:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <WaitMSRemaining.2935+0x1>
     8e2:	9c 01       	movw	r18, r24
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	31 09       	sbc	r19, r1
     8e8:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <WaitMSRemaining.2935+0x1>
     8ec:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <WaitMSRemaining.2935>
     8f0:	89 2b       	or	r24, r25
     8f2:	39 f0       	breq	.+14     	; 0x902 <USB_Host_ProcessNextHostState+0xaa>
     8f4:	8f ec       	ldi	r24, 0xCF	; 207
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <USB_Host_ProcessNextHostState+0xa0>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <USB_Host_ProcessNextHostState+0xa6>
     8fe:	00 00       	nop
     900:	b5 c0       	rjmp	.+362    	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     902:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     904:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     908:	80 61       	ori	r24, 0x10	; 16
     90a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     90e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     912:	8b 7f       	andi	r24, 0xFB	; 251
     914:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     918:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     91c:	80 61       	ori	r24, 0x10	; 16
     91e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     922:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     926:	82 60       	ori	r24, 0x02	; 2
     928:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     92c:	84 e0       	ldi	r24, 0x04	; 4
     92e:	d2 cf       	rjmp	.-92     	; 0x8d4 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     930:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     934:	80 ff       	sbrs	r24, 0
     936:	9a c0       	rjmp	.+308    	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     938:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     942:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     946:	8d 7f       	andi	r24, 0xFD	; 253
     948:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     94c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     950:	8d 7f       	andi	r24, 0xFD	; 253
     952:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     956:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     95a:	82 60       	ori	r24, 0x02	; 2
     95c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     960:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     96a:	e8 d0       	rcall	.+464    	; 0xb3c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     96c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_HostState>
     970:	84 e6       	ldi	r24, 0x64	; 100
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <WaitMSRemaining.2935+0x1>
     978:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <WaitMSRemaining.2935>
     97c:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     97e:	5c c0       	rjmp	.+184    	; 0xa38 <USB_Host_ProcessNextHostState+0x1e0>
     980:	cd de       	rcall	.-614    	; 0x71c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     982:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_HostState>
     986:	88 ec       	ldi	r24, 0xC8	; 200
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <WaitMSRemaining.2935+0x1>
     98e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <WaitMSRemaining.2935>
     992:	86 e0       	ldi	r24, 0x06	; 6
     994:	51 c0       	rjmp	.+162    	; 0xa38 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     996:	e1 2c       	mov	r14, r1
     998:	00 e4       	ldi	r16, 0x40	; 64
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	6f d0       	rcall	.+222    	; 0xa84 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9a6:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9aa:	87 fd       	sbrc	r24, 7
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	4e c0       	rjmp	.+156    	; 0xa50 <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	8e cf       	rjmp	.-228    	; 0x8d4 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9b8:	88 e0       	ldi	r24, 0x08	; 8
     9ba:	e1 e0       	ldi	r30, 0x01	; 1
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	ae e1       	ldi	r26, 0x1E	; 30
     9c0:	b1 e0       	ldi	r27, 0x01	; 1
     9c2:	01 90       	ld	r0, Z+
     9c4:	0d 92       	st	X+, r0
     9c6:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <USB_Host_ProcessNextHostState+0x16a>
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	77 d3       	rcall	.+1774   	; 0x10be <USB_Host_SendControlRequest>
     9d0:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9d2:	3d c0       	rjmp	.+122    	; 0xa4e <USB_Host_ProcessNextHostState+0x1f6>
     9d4:	88 85       	ldd	r24, Y+8	; 0x08
     9d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     9da:	a0 de       	rcall	.-704    	; 0x71c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9dc:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_HostState>
     9e0:	88 ec       	ldi	r24, 0xC8	; 200
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <WaitMSRemaining.2935+0x1>
     9e8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <WaitMSRemaining.2935>
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	24 c0       	rjmp	.+72     	; 0xa38 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9f0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9f4:	10 e0       	ldi	r17, 0x00	; 0
     9f6:	e1 2c       	mov	r14, r1
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	41 d0       	rcall	.+130    	; 0xa84 <Pipe_ConfigurePipe>
     a02:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a06:	87 ff       	sbrs	r24, 7
     a08:	d2 cf       	rjmp	.-92     	; 0x9ae <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a0a:	88 e0       	ldi	r24, 0x08	; 8
     a0c:	e9 e0       	ldi	r30, 0x09	; 9
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	ae e1       	ldi	r26, 0x1E	; 30
     a12:	b1 e0       	ldi	r27, 0x01	; 1
     a14:	01 90       	ld	r0, Z+
     a16:	0d 92       	st	X+, r0
     a18:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <USB_Host_ProcessNextHostState+0x1bc>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	4e d3       	rcall	.+1692   	; 0x10be <USB_Host_SendControlRequest>
     a22:	81 11       	cpse	r24, r1
     a24:	14 c0       	rjmp	.+40     	; 0xa4e <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a26:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <USB_HostState>
     a2a:	84 e6       	ldi	r24, 0x64	; 100
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <WaitMSRemaining.2935+0x1>
     a32:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <WaitMSRemaining.2935>
     a36:	89 e0       	ldi	r24, 0x09	; 9
     a38:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     a4a:	ac dc       	rcall	.-1704   	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     a4c:	0f c0       	rjmp	.+30     	; 0xa6c <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a54:	21 30       	cpi	r18, 0x01	; 1
     a56:	51 f0       	breq	.+20     	; 0xa6c <USB_Host_ProcessNextHostState+0x214>
     a58:	68 2f       	mov	r22, r24
     a5a:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a5c:	df dc       	rcall	.-1602   	; 0x41c <EVENT_USB_Host_DeviceEnumerationFailed>
     a5e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a68:	97 dc       	rcall	.-1746   	; 0x398 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a6a:	c2 d0       	rcall	.+388    	; 0xbf0 <USB_ResetInterface>
     a6c:	28 96       	adiw	r28, 0x08	; 8
	}
}
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <Pipe_ConfigurePipe>:
     a84:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	2f 70       	andi	r18, 0x0F	; 15
     a8c:	42 2b       	or	r20, r18
     a8e:	90 e4       	ldi	r25, 0x40	; 64
     a90:	69 9f       	mul	r22, r25
     a92:	b0 01       	movw	r22, r0
     a94:	11 24       	eor	r1, r1
     a96:	64 2b       	or	r22, r20
     a98:	38 2f       	mov	r19, r24
     a9a:	2e 2d       	mov	r18, r14
     a9c:	22 60       	ori	r18, 0x02	; 2
     a9e:	37 30       	cpi	r19, 0x07	; 7
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <Pipe_ConfigurePipe+0x20>
     aa2:	45 c0       	rjmp	.+138    	; 0xb2e <Pipe_ConfigurePipe+0xaa>
     aa4:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     aa8:	38 13       	cpse	r19, r24
     aaa:	13 c0       	rjmp	.+38     	; 0xad2 <Pipe_ConfigurePipe+0x4e>
     aac:	48 e0       	ldi	r20, 0x08	; 8
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	40 17       	cp	r20, r16
     ab4:	51 07       	cpc	r21, r17
     ab6:	38 f0       	brcs	.+14     	; 0xac6 <Pipe_ConfigurePipe+0x42>
     ab8:	92 95       	swap	r25
     aba:	90 7f       	andi	r25, 0xF0	; 240
     abc:	92 2b       	or	r25, r18
     abe:	e6 2f       	mov	r30, r22
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e c0       	rjmp	.+28     	; 0xae2 <Pipe_ConfigurePipe+0x5e>
     ac6:	95 30       	cpi	r25, 0x05	; 5
     ac8:	b9 f3       	breq	.-18     	; 0xab8 <Pipe_ConfigurePipe+0x34>
     aca:	9f 5f       	subi	r25, 0xFF	; 255
     acc:	44 0f       	add	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	f0 cf       	rjmp	.-32     	; 0xab2 <Pipe_ConfigurePipe+0x2e>
     ad2:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ad6:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     ada:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     ade:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     ae2:	91 fd       	sbrc	r25, 1
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <Pipe_ConfigurePipe+0x66>
     ae6:	3f 5f       	subi	r19, 0xFF	; 255
     ae8:	da cf       	rjmp	.-76     	; 0xa9e <Pipe_ConfigurePipe+0x1a>
     aea:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     aee:	4e 7f       	andi	r20, 0xFE	; 254
     af0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     af4:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     af8:	4d 7f       	andi	r20, 0xFD	; 253
     afa:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     afe:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b02:	41 60       	ori	r20, 0x01	; 1
     b04:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b08:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     b0c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     b10:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     b14:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     b18:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b1c:	90 62       	ori	r25, 0x20	; 32
     b1e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b22:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     b26:	97 fd       	sbrc	r25, 7
     b28:	de cf       	rjmp	.-68     	; 0xae6 <Pipe_ConfigurePipe+0x62>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <Pipe_ConfigurePipe+0xb0>
     b2e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ef 90       	pop	r14
     b3a:	08 95       	ret

00000b3c <Pipe_ClearPipes>:
     b3c:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b46:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     b4a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b4e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     b52:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b56:	9e 7f       	andi	r25, 0xFE	; 254
     b58:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	87 30       	cpi	r24, 0x07	; 7
     b60:	81 f7       	brne	.-32     	; 0xb42 <Pipe_ClearPipes+0x6>
     b62:	08 95       	ret

00000b64 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b64:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b68:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     b6c:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b6e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b72:	90 73       	andi	r25, 0x30	; 48
     b74:	90 31       	cpi	r25, 0x10	; 16
     b76:	29 f4       	brne	.+10     	; 0xb82 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b78:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     b7c:	90 ff       	sbrs	r25, 0
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <Pipe_WaitUntilReady+0x26>
     b80:	19 c0       	rjmp	.+50     	; 0xbb4 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b82:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b86:	92 fd       	sbrc	r25, 2
     b88:	15 c0       	rjmp	.+42     	; 0xbb4 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b8a:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b8e:	91 fd       	sbrc	r25, 1
     b90:	13 c0       	rjmp	.+38     	; 0xbb8 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b92:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <USB_HostState>
     b96:	91 30       	cpi	r25, 0x01	; 1
     b98:	89 f0       	breq	.+34     	; 0xbbc <Pipe_WaitUntilReady+0x58>
     b9a:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b9e:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ba2:	42 17       	cp	r20, r18
     ba4:	53 07       	cpc	r21, r19
     ba6:	19 f3       	breq	.-58     	; 0xb6e <Pipe_WaitUntilReady+0xa>
     ba8:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     baa:	11 f0       	breq	.+4      	; 0xbb0 <Pipe_WaitUntilReady+0x4c>
     bac:	a9 01       	movw	r20, r18
     bae:	df cf       	rjmp	.-66     	; 0xb6e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     bbc:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bbe:	08 95       	ret

00000bc0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bc0:	70 d0       	rcall	.+224    	; 0xca2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bc2:	77 d0       	rcall	.+238    	; 0xcb2 <USB_INT_ClearAllInterrupts>
     bc4:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	80 83       	st	Z, r24
     bce:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 77       	andi	r24, 0x7F	; 127
     bd6:	80 83       	st	Z, r24
     bd8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bda:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	8c 91       	ld	r24, X
     be0:	8e 7f       	andi	r24, 0xFE	; 254
     be2:	8c 93       	st	X, r24
     be4:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     be6:	8f 7e       	andi	r24, 0xEF	; 239
     be8:	80 83       	st	Z, r24
     bea:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bee:	08 95       	ret

00000bf0 <USB_ResetInterface>:
     bf0:	58 d0       	rcall	.+176    	; 0xca2 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bf2:	5f d0       	rcall	.+190    	; 0xcb2 <USB_INT_ClearAllInterrupts>
     bf4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bfe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c08:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c0c:	8f 7d       	andi	r24, 0xDF	; 223
     c0e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c12:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c16:	8f 77       	andi	r24, 0x7F	; 127
     c18:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c1c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c1e:	89 bd       	out	0x29, r24	; 41
     c20:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c22:	89 bd       	out	0x29, r24	; 41
     c24:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c26:	00 fe       	sbrs	r0, 0
     c28:	fd cf       	rjmp	.-6      	; 0xc24 <USB_ResetInterface+0x34>
     c2a:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c2c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_HostState>
     c30:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     c34:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c36:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c3a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c44:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c4e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c52:	84 60       	ori	r24, 0x04	; 4
     c54:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c58:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     c5c:	8f 7e       	andi	r24, 0xEF	; 239
     c5e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     c62:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     c64:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c66:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c6a:	81 60       	ori	r24, 0x01	; 1
     c6c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c70:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c74:	84 60       	ori	r24, 0x04	; 4
     c76:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c7a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c7e:	8e 7f       	andi	r24, 0xFE	; 254
     c80:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     c84:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c88:	80 61       	ori	r24, 0x10	; 16
     c8a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c8e:	08 95       	ret

00000c90 <USB_Init>:
     c90:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_IsInitialized>

	USB_ResetInterface();
     ca0:	a7 cf       	rjmp	.-178    	; 0xbf0 <USB_ResetInterface>

00000ca2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ca2:	e8 ed       	ldi	r30, 0xD8	; 216
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8c 7f       	andi	r24, 0xFC	; 252
     caa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cac:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cb0:	08 95       	ret

00000cb2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cb2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cb6:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cba:	08 95       	ret

00000cbc <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	0b b6       	in	r0, 0x3b	; 59
     cc8:	0f 92       	push	r0
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ce2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ce6:	85 ff       	sbrs	r24, 5
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cee:	85 ff       	sbrs	r24, 5
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cf2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cfc:	b9 d1       	rcall	.+882    	; 0x1070 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cfe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d02:	81 ff       	sbrs	r24, 1
     d04:	15 c0       	rjmp	.+42     	; 0xd30 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d06:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d0a:	81 ff       	sbrs	r24, 1
     d0c:	11 c0       	rjmp	.+34     	; 0xd30 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d0e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d18:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d22:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     d2c:	35 db       	rcall	.-2454   	; 0x398 <EVENT_USB_Host_DeviceUnattached>
     d2e:	60 df       	rcall	.-320    	; 0xbf0 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d30:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d34:	81 ff       	sbrs	r24, 1
     d36:	15 c0       	rjmp	.+42     	; 0xd62 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d38:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     d3c:	81 ff       	sbrs	r24, 1
     d3e:	11 c0       	rjmp	.+34     	; 0xd62 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d40:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d4a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d4c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	51 db       	rcall	.-2398   	; 0x3fc <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d5a:	1e db       	rcall	.-2500   	; 0x398 <EVENT_USB_Host_DeviceUnattached>
     d5c:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     d5e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_HostState>
     d62:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d66:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d68:	17 c0       	rjmp	.+46     	; 0xd98 <__vector_10+0xdc>
     d6a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d6e:	80 ff       	sbrs	r24, 0
     d70:	13 c0       	rjmp	.+38     	; 0xd98 <__vector_10+0xdc>
     d72:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     d7c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d86:	02 db       	rcall	.-2556   	; 0x38c <EVENT_USB_Host_DeviceAttached>
     d88:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d92:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d94:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <USB_HostState>
     d98:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d9c:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <__vector_10+0x100>
     da0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     da4:	82 ff       	sbrs	r24, 2
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <__vector_10+0x100>
     da8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	32 db       	rcall	.-2460   	; 0x41c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     db8:	ef da       	rcall	.-2594   	; 0x398 <EVENT_USB_Host_DeviceUnattached>
     dba:	1a df       	rcall	.-460    	; 0xbf0 <USB_ResetInterface>

		USB_ResetInterface();
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0b be       	out	0x3b, r0	; 59
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <Pipe_Write_Stream_LE>:
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
     df4:	8b 01       	movw	r16, r22
     df6:	7a 01       	movw	r14, r20
     df8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     dfc:	8f 7c       	andi	r24, 0xCF	; 207
     dfe:	80 62       	ori	r24, 0x20	; 32
     e00:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e04:	af de       	rcall	.-674    	; 0xb64 <Pipe_WaitUntilReady>
     e06:	81 11       	cpse	r24, r1
     e08:	32 c0       	rjmp	.+100    	; 0xe6e <Pipe_Write_Stream_LE+0x8c>
     e0a:	e1 14       	cp	r14, r1
     e0c:	f1 04       	cpc	r15, r1
     e0e:	39 f0       	breq	.+14     	; 0xe1e <Pipe_Write_Stream_LE+0x3c>
     e10:	f7 01       	movw	r30, r14
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	08 1b       	sub	r16, r24
     e18:	19 0b       	sbc	r17, r25
     e1a:	c8 0f       	add	r28, r24
     e1c:	d9 1f       	adc	r29, r25
     e1e:	c1 2c       	mov	r12, r1
     e20:	d1 2c       	mov	r13, r1
     e22:	01 15       	cp	r16, r1
     e24:	11 05       	cpc	r17, r1
     e26:	11 f1       	breq	.+68     	; 0xe6c <Pipe_Write_Stream_LE+0x8a>
     e28:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e2c:	85 fd       	sbrc	r24, 5
     e2e:	15 c0       	rjmp	.+42     	; 0xe5a <Pipe_Write_Stream_LE+0x78>
     e30:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e34:	8b 77       	andi	r24, 0x7B	; 123
     e36:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e3a:	e1 14       	cp	r14, r1
     e3c:	f1 04       	cpc	r15, r1
     e3e:	49 f0       	breq	.+18     	; 0xe52 <Pipe_Write_Stream_LE+0x70>
     e40:	f7 01       	movw	r30, r14
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	c8 0e       	add	r12, r24
     e48:	d9 1e       	adc	r13, r25
     e4a:	d1 82       	std	Z+1, r13	; 0x01
     e4c:	c0 82       	st	Z, r12
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	0e c0       	rjmp	.+28     	; 0xe6e <Pipe_Write_Stream_LE+0x8c>
     e52:	88 de       	rcall	.-752    	; 0xb64 <Pipe_WaitUntilReady>
     e54:	88 23       	and	r24, r24
     e56:	29 f3       	breq	.-54     	; 0xe22 <Pipe_Write_Stream_LE+0x40>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <Pipe_Write_Stream_LE+0x8c>
     e5a:	89 91       	ld	r24, Y+
     e5c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     e60:	01 50       	subi	r16, 0x01	; 1
     e62:	11 09       	sbc	r17, r1
     e64:	ff ef       	ldi	r31, 0xFF	; 255
     e66:	cf 1a       	sub	r12, r31
     e68:	df 0a       	sbc	r13, r31
     e6a:	db cf       	rjmp	.-74     	; 0xe22 <Pipe_Write_Stream_LE+0x40>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	08 95       	ret

00000e80 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
     e92:	8b 01       	movw	r16, r22
     e94:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e96:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     e9a:	8f 7c       	andi	r24, 0xCF	; 207
     e9c:	80 61       	ori	r24, 0x10	; 16
     e9e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ea2:	60 de       	rcall	.-832    	; 0xb64 <Pipe_WaitUntilReady>
     ea4:	81 11       	cpse	r24, r1
     ea6:	32 c0       	rjmp	.+100    	; 0xf0c <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ea8:	e1 14       	cp	r14, r1
     eaa:	f1 04       	cpc	r15, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     eae:	f7 01       	movw	r30, r14
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	08 1b       	sub	r16, r24
     eb6:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     eb8:	c8 0f       	add	r28, r24
     eba:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ebc:	c1 2c       	mov	r12, r1
     ebe:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	11 f1       	breq	.+68     	; 0xf0a <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ec6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     eca:	85 fd       	sbrc	r24, 5
     ecc:	15 c0       	rjmp	.+42     	; 0xef8 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ece:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ed2:	8e 77       	andi	r24, 0x7E	; 126
     ed4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ed8:	e1 14       	cp	r14, r1
     eda:	f1 04       	cpc	r15, r1
     edc:	49 f0       	breq	.+18     	; 0xef0 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     ede:	f7 01       	movw	r30, r14
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	c8 0e       	add	r12, r24
     ee6:	d9 1e       	adc	r13, r25
     ee8:	d1 82       	std	Z+1, r13	; 0x01
     eea:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     eec:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <Pipe_Read_Stream_LE+0x8c>
     ef0:	39 de       	rcall	.-910    	; 0xb64 <Pipe_WaitUntilReady>
     ef2:	88 23       	and	r24, r24
     ef4:	29 f3       	breq	.-54     	; 0xec0 <Pipe_Read_Stream_LE+0x40>
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ef8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     efc:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     efe:	01 50       	subi	r16, 0x01	; 1
     f00:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     f02:	ff ef       	ldi	r31, 0xFF	; 255
     f04:	cf 1a       	sub	r12, r31
     f06:	df 0a       	sbc	r13, r31
     f08:	db cf       	rjmp	.-74     	; 0xec0 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	08 95       	ret

00000f1e <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	dc 01       	movw	r26, r24
     f24:	eb 01       	movw	r28, r22
     f26:	e8 81       	ld	r30, Y
     f28:	f9 81       	ldd	r31, Y+1	; 0x01
     f2a:	20 81       	ld	r18, Z
     f2c:	8d 91       	ld	r24, X+
     f2e:	9c 91       	ld	r25, X
     f30:	11 97       	sbiw	r26, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	82 17       	cp	r24, r18
     f36:	93 07       	cpc	r25, r19
     f38:	08 f4       	brcc	.+2      	; 0xf3c <USB_GetNextDescriptor+0x1e>
     f3a:	9c 01       	movw	r18, r24
     f3c:	e2 0f       	add	r30, r18
     f3e:	f3 1f       	adc	r31, r19
     f40:	eb 01       	movw	r28, r22
     f42:	f9 83       	std	Y+1, r31	; 0x01
     f44:	e8 83       	st	Y, r30
     f46:	8d 91       	ld	r24, X+
     f48:	9c 91       	ld	r25, X
     f4a:	11 97       	sbiw	r26, 0x01	; 1
     f4c:	82 1b       	sub	r24, r18
     f4e:	93 0b       	sbc	r25, r19
     f50:	8d 93       	st	X+, r24
     f52:	9c 93       	st	X, r25
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <USB_Host_GetDeviceConfigDescriptor>:
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	29 97       	sbiw	r28, 0x09	; 9
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	6b 01       	movw	r12, r22
     f7c:	8a 01       	movw	r16, r20
     f7e:	79 01       	movw	r14, r18
     f80:	90 e8       	ldi	r25, 0x80	; 128
     f82:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <USB_ControlRequest>
     f86:	96 e0       	ldi	r25, 0x06	; 6
     f88:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_ControlRequest+0x1>
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	92 60       	ori	r25, 0x02	; 2
     f92:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <USB_ControlRequest+0x3>
     f96:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_ControlRequest+0x2>
     f9a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <USB_ControlRequest+0x5>
     f9e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <USB_ControlRequest+0x4>
     fa2:	89 e0       	ldi	r24, 0x09	; 9
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <USB_ControlRequest+0x7>
     faa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_ControlRequest+0x6>
     fae:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	83 d0       	rcall	.+262    	; 0x10be <USB_Host_SendControlRequest>
     fb8:	81 11       	cpse	r24, r1
     fba:	19 c0       	rjmp	.+50     	; 0xfee <USB_Host_GetDeviceConfigDescriptor+0x94>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	f6 01       	movw	r30, r12
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
     fc6:	e8 16       	cp	r14, r24
     fc8:	f9 06       	cpc	r15, r25
     fca:	70 f0       	brcs	.+28     	; 0xfe8 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     fcc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <USB_ControlRequest+0x7>
     fd0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_ControlRequest+0x6>
     fd4:	c8 01       	movw	r24, r16
     fd6:	73 d0       	rcall	.+230    	; 0x10be <USB_Host_SendControlRequest>
     fd8:	81 11       	cpse	r24, r1
     fda:	09 c0       	rjmp	.+18     	; 0xfee <USB_Host_GetDeviceConfigDescriptor+0x94>
     fdc:	f8 01       	movw	r30, r16
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	21 f4       	brne	.+8      	; 0xfec <USB_Host_GetDeviceConfigDescriptor+0x92>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <USB_Host_GetDeviceConfigDescriptor+0x94>
     fe8:	85 e0       	ldi	r24, 0x05	; 5
     fea:	01 c0       	rjmp	.+2      	; 0xfee <USB_Host_GetDeviceConfigDescriptor+0x94>
     fec:	86 e0       	ldi	r24, 0x06	; 6
     fee:	29 96       	adiw	r28, 0x09	; 9
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	08 95       	ret

0000100c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	8c 01       	movw	r16, r24
    1022:	eb 01       	movw	r28, r22
    1024:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1026:	f8 01       	movw	r30, r16
    1028:	e0 80       	ld	r14, Z
    102a:	f1 80       	ldd	r15, Z+1	; 0x01
    102c:	e1 14       	cp	r14, r1
    102e:	f1 04       	cpc	r15, r1
    1030:	99 f0       	breq	.+38     	; 0x1058 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1032:	a8 80       	ld	r10, Y
    1034:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1036:	be 01       	movw	r22, r28
    1038:	c8 01       	movw	r24, r16
    103a:	71 df       	rcall	.-286    	; 0xf1e <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    103c:	88 81       	ld	r24, Y
    103e:	99 81       	ldd	r25, Y+1	; 0x01
    1040:	f6 01       	movw	r30, r12
    1042:	09 95       	icall
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	79 f3       	breq	.-34     	; 0x1026 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	39 f4       	brne	.+14     	; 0x105a <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    104c:	b9 82       	std	Y+1, r11	; 0x01
    104e:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    1050:	f8 01       	movw	r30, r16
    1052:	f1 82       	std	Z+1, r15	; 0x01
    1054:	e0 82       	st	Z, r14
    1056:	01 c0       	rjmp	.+2      	; 0x105a <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1058:	82 e0       	ldi	r24, 0x02	; 2
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	bf 90       	pop	r11
    106c:	af 90       	pop	r10
    106e:	08 95       	ret

00001070 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1070:	08 95       	ret

00001072 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    107a:	c9 ee       	ldi	r28, 0xE9	; 233
    107c:	d3 e0       	ldi	r29, 0x03	; 3
    107e:	11 11       	cpse	r17, r1
    1080:	0c c0       	rjmp	.+24     	; 0x109a <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1082:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1086:	83 fd       	sbrc	r24, 3
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	98 db       	rcall	.-2256   	; 0x7be <USB_Host_WaitMS>
    108e:	81 11       	cpse	r24, r1
    1090:	12 c0       	rjmp	.+36     	; 0x10b6 <USB_Host_WaitForIOS+0x44>
    1092:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1094:	a1 f7       	brne	.-24     	; 0x107e <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    109a:	11 30       	cpi	r17, 0x01	; 1
    109c:	29 f4       	brne	.+10     	; 0x10a8 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    109e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    10a2:	80 ff       	sbrs	r24, 0
    10a4:	f2 cf       	rjmp	.-28     	; 0x108a <USB_Host_WaitForIOS+0x18>
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10a8:	12 30       	cpi	r17, 0x02	; 2
    10aa:	79 f7       	brne	.-34     	; 0x108a <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10ac:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    10b0:	82 ff       	sbrs	r24, 2
    10b2:	eb cf       	rjmp	.-42     	; 0x108a <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    10b4:	80 e0       	ldi	r24, 0x00	; 0
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	08 95       	ret

000010be <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10ca:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10d2:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <USB_ControlRequest+0x6>
    10d6:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10da:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	6b db       	rcall	.-2346   	; 0x7be <USB_Host_WaitMS>
    10e8:	81 11       	cpse	r24, r1
    10ea:	c8 c0       	rjmp	.+400    	; 0x127c <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ec:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10f0:	8f 7c       	andi	r24, 0xCF	; 207
    10f2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10f6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    10fa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10fe:	8f 7e       	andi	r24, 0xEF	; 239
    1100:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1104:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    110e:	ee e1       	ldi	r30, 0x1E	; 30
    1110:	f1 e0       	ldi	r31, 0x01	; 1
    1112:	86 e2       	ldi	r24, 0x26	; 38
    1114:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1116:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1118:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    111c:	8e 17       	cp	r24, r30
    111e:	9f 07       	cpc	r25, r31
    1120:	d1 f7       	brne	.-12     	; 0x1116 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1122:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1126:	87 77       	andi	r24, 0x77	; 119
    1128:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	a1 df       	rcall	.-190    	; 0x1072 <USB_Host_WaitForIOS>
    1130:	81 11       	cpse	r24, r1
    1132:	a4 c0       	rjmp	.+328    	; 0x127c <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1134:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	3e db       	rcall	.-2436   	; 0x7be <USB_Host_WaitMS>
    1142:	81 11       	cpse	r24, r1
    1144:	9b c0       	rjmp	.+310    	; 0x127c <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1146:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest>
    114a:	87 ff       	sbrs	r24, 7
    114c:	4e c0       	rjmp	.+156    	; 0x11ea <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    114e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1152:	8f 7c       	andi	r24, 0xCF	; 207
    1154:	80 61       	ori	r24, 0x10	; 16
    1156:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    115a:	01 15       	cp	r16, r1
    115c:	11 05       	cpc	r17, r1
    115e:	09 f0       	breq	.+2      	; 0x1162 <USB_Host_SendControlRequest+0xa4>
    1160:	3a c0       	rjmp	.+116    	; 0x11d6 <USB_Host_SendControlRequest+0x118>
    1162:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1166:	8f 7c       	andi	r24, 0xCF	; 207
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    116e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1172:	8f 7b       	andi	r24, 0xBF	; 191
    1174:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	7b df       	rcall	.-266    	; 0x1072 <USB_Host_WaitForIOS>
    117c:	81 11       	cpse	r24, r1
    117e:	7e c0       	rjmp	.+252    	; 0x127c <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1180:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1184:	8b 77       	andi	r24, 0x7B	; 123
    1186:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	72 df       	rcall	.-284    	; 0x1072 <USB_Host_WaitForIOS>
    118e:	76 c0       	rjmp	.+236    	; 0x127c <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1190:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1194:	8f 7b       	andi	r24, 0xBF	; 191
    1196:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	6a df       	rcall	.-300    	; 0x1072 <USB_Host_WaitForIOS>
    119e:	81 11       	cpse	r24, r1
    11a0:	6d c0       	rjmp	.+218    	; 0x127c <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11a2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    11a6:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    11aa:	89 2b       	or	r24, r25
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
    11b2:	f8 01       	movw	r30, r16
    11b4:	8f 01       	movw	r16, r30
    11b6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    11ba:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    11be:	89 2b       	or	r24, r25
    11c0:	69 f4       	brne	.+26     	; 0x11dc <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11c2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    11c6:	80 64       	ori	r24, 0x40	; 64
    11c8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11cc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11d0:	8e 77       	andi	r24, 0x7E	; 126
    11d2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    11d6:	20 97       	sbiw	r28, 0x00	; 0
    11d8:	d9 f6       	brne	.-74     	; 0x1190 <USB_Host_SendControlRequest+0xd2>
    11da:	c3 cf       	rjmp	.-122    	; 0x1162 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11dc:	20 97       	sbiw	r28, 0x00	; 0
    11de:	89 f3       	breq	.-30     	; 0x11c2 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11e0:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    11e4:	81 93       	st	Z+, r24
					DataLen--;
    11e6:	21 97       	sbiw	r28, 0x01	; 1
    11e8:	e5 cf       	rjmp	.-54     	; 0x11b4 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    11ea:	01 15       	cp	r16, r1
    11ec:	11 05       	cpc	r17, r1
    11ee:	91 f1       	breq	.+100    	; 0x1254 <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11f0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    11f4:	8f 7c       	andi	r24, 0xCF	; 207
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11fc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1200:	8f 7b       	andi	r24, 0xBF	; 191
    1202:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    120a:	e1 f0       	breq	.+56     	; 0x1244 <USB_Host_SendControlRequest+0x186>
    120c:	32 df       	rcall	.-412    	; 0x1072 <USB_Host_WaitForIOS>
    120e:	81 11       	cpse	r24, r1
    1210:	35 c0       	rjmp	.+106    	; 0x127c <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1212:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1216:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    121a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	28 17       	cp	r18, r24
    1222:	39 07       	cpc	r19, r25
    1224:	48 f4       	brcc	.+18     	; 0x1238 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    1226:	0f 5f       	subi	r16, 0xFF	; 255
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	f8 01       	movw	r30, r16
    122c:	31 97       	sbiw	r30, 0x01	; 1
    122e:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1230:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    1234:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1236:	69 f7       	brne	.-38     	; 0x1212 <USB_Host_SendControlRequest+0x154>
    1238:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    123c:	8b 77       	andi	r24, 0x7B	; 123
    123e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1242:	e1 cf       	rjmp	.-62     	; 0x1206 <USB_Host_SendControlRequest+0x148>
    1244:	16 df       	rcall	.-468    	; 0x1072 <USB_Host_WaitForIOS>
    1246:	81 11       	cpse	r24, r1
    1248:	19 c0       	rjmp	.+50     	; 0x127c <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    124a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1254:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1258:	8f 7c       	andi	r24, 0xCF	; 207
    125a:	80 61       	ori	r24, 0x10	; 16
    125c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1260:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	02 df       	rcall	.-508    	; 0x1072 <USB_Host_WaitForIOS>
    126e:	81 11       	cpse	r24, r1
    1270:	05 c0       	rjmp	.+10     	; 0x127c <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1272:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1276:	9e 77       	andi	r25, 0x7E	; 126
    1278:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    127c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1280:	90 64       	ori	r25, 0x40	; 64
    1282:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1286:	f1 10       	cpse	r15, r1
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    128a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    128e:	9e 7f       	andi	r25, 0xFE	; 254
    1290:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    129a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	08 95       	ret

000012aa <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    12aa:	cf 93       	push	r28
    12ac:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12ae:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_ControlRequest>
    12b2:	89 e0       	ldi	r24, 0x09	; 9
    12b4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_ControlRequest+0x1>
    12b8:	8c 2f       	mov	r24, r28
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <USB_ControlRequest+0x3>
    12c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_ControlRequest+0x2>
    12c4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <USB_ControlRequest+0x5>
    12c8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <USB_ControlRequest+0x4>
    12cc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <USB_ControlRequest+0x7>
    12d0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12d4:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	f0 de       	rcall	.-544    	; 0x10be <USB_Host_SendControlRequest>
    12de:	81 11       	cpse	r24, r1
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12e2:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12e6:	c1 11       	cpse	r28, r1
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <USB_Host_SetDeviceConfiguration+0x44>
    12ea:	9a e0       	ldi	r25, 0x0A	; 10
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <USB_Host_SetDeviceConfiguration+0x46>
    12ee:	9b e0       	ldi	r25, 0x0B	; 11
    12f0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <USB_HostState>
	}

	return ErrorCode;
}
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12fe:	c7 ea       	ldi	r28, 0xA7	; 167
    1300:	d0 e0       	ldi	r29, 0x00	; 0
    1302:	18 81       	ld	r17, Y
    1304:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1306:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1308:	a7 da       	rcall	.-2738   	; 0x858 <USB_Host_ProcessNextHostState>
    130a:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	08 95       	ret

00001314 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1314:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1318:	95 ff       	sbrs	r25, 5
    131a:	fc cf       	rjmp	.-8      	; 0x1314 <Serial_putchar>
				UDR1 = DataByte;
    131c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	08 95       	ret

00001326 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1326:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    132a:	87 ff       	sbrs	r24, 7
    132c:	08 c0       	rjmp	.+16     	; 0x133e <Serial_getchar+0x18>
    132e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1332:	87 ff       	sbrs	r24, 7
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1336:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	08 95       	ret
	  return _FDEV_EOF;
    133e:	8e ef       	ldi	r24, 0xFE	; 254
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1348:	08 95       	ret

0000134a <__tablejump2__>:
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	00 24       	eor	r0, r0
    1350:	00 1c       	adc	r0, r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	07 90       	elpm	r0, Z+
    1356:	f6 91       	elpm	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	09 94       	ijmp

0000135c <printf_P>:
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	ae 01       	movw	r20, r28
    136a:	49 5f       	subi	r20, 0xF9	; 249
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	da 01       	movw	r26, r20
    1370:	6d 91       	ld	r22, X+
    1372:	7d 91       	ld	r23, X+
    1374:	ad 01       	movw	r20, r26
    1376:	05 e3       	ldi	r16, 0x35	; 53
    1378:	11 e0       	ldi	r17, 0x01	; 1
    137a:	f8 01       	movw	r30, r16
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	dc 01       	movw	r26, r24
    1382:	13 96       	adiw	r26, 0x03	; 3
    1384:	2c 91       	ld	r18, X
    1386:	13 97       	sbiw	r26, 0x03	; 3
    1388:	28 60       	ori	r18, 0x08	; 8
    138a:	13 96       	adiw	r26, 0x03	; 3
    138c:	2c 93       	st	X, r18
    138e:	3e d0       	rcall	.+124    	; 0x140c <vfprintf>
    1390:	d8 01       	movw	r26, r16
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	ed 91       	ld	r30, X+
    1396:	fc 91       	ld	r31, X
    1398:	13 97       	sbiw	r26, 0x03	; 3
    139a:	23 81       	ldd	r18, Z+3	; 0x03
    139c:	27 7f       	andi	r18, 0xF7	; 247
    139e:	23 83       	std	Z+3, r18	; 0x03
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <puts_P>:
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	8c 01       	movw	r16, r24
    13b4:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <__iob+0x2>
    13b8:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <__iob+0x3>
    13bc:	83 81       	ldd	r24, Z+3	; 0x03
    13be:	81 ff       	sbrs	r24, 1
    13c0:	1b c0       	rjmp	.+54     	; 0x13f8 <puts_P+0x4e>
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	c0 e0       	ldi	r28, 0x00	; 0
    13c6:	f8 01       	movw	r30, r16
    13c8:	84 91       	lpm	r24, Z
    13ca:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <__iob+0x2>
    13ce:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <__iob+0x3>
    13d2:	db 01       	movw	r26, r22
    13d4:	18 96       	adiw	r26, 0x08	; 8
    13d6:	ed 91       	ld	r30, X+
    13d8:	fc 91       	ld	r31, X
    13da:	19 97       	sbiw	r26, 0x09	; 9
    13dc:	88 23       	and	r24, r24
    13de:	41 f0       	breq	.+16     	; 0x13f0 <puts_P+0x46>
    13e0:	09 95       	icall
    13e2:	89 2b       	or	r24, r25
    13e4:	11 f0       	breq	.+4      	; 0x13ea <puts_P+0x40>
    13e6:	df ef       	ldi	r29, 0xFF	; 255
    13e8:	cf ef       	ldi	r28, 0xFF	; 255
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	eb cf       	rjmp	.-42     	; 0x13c6 <puts_P+0x1c>
    13f0:	8a e0       	ldi	r24, 0x0A	; 10
    13f2:	09 95       	icall
    13f4:	89 2b       	or	r24, r25
    13f6:	19 f0       	breq	.+6      	; 0x13fe <puts_P+0x54>
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <puts_P+0x58>
    13fe:	8d 2f       	mov	r24, r29
    1400:	9c 2f       	mov	r25, r28
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <vfprintf>:
    140c:	2f 92       	push	r2
    140e:	3f 92       	push	r3
    1410:	4f 92       	push	r4
    1412:	5f 92       	push	r5
    1414:	6f 92       	push	r6
    1416:	7f 92       	push	r7
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	2b 97       	sbiw	r28, 0x0b	; 11
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	6c 01       	movw	r12, r24
    1442:	7b 01       	movw	r14, r22
    1444:	8a 01       	movw	r16, r20
    1446:	fc 01       	movw	r30, r24
    1448:	17 82       	std	Z+7, r1	; 0x07
    144a:	16 82       	std	Z+6, r1	; 0x06
    144c:	83 81       	ldd	r24, Z+3	; 0x03
    144e:	81 ff       	sbrs	r24, 1
    1450:	bf c1       	rjmp	.+894    	; 0x17d0 <vfprintf+0x3c4>
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	3c 01       	movw	r6, r24
    1458:	f6 01       	movw	r30, r12
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	f7 01       	movw	r30, r14
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	7f 01       	movw	r14, r30
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <vfprintf+0x62>
    146c:	ad c1       	rjmp	.+858    	; 0x17c8 <vfprintf+0x3bc>
    146e:	85 32       	cpi	r24, 0x25	; 37
    1470:	39 f4       	brne	.+14     	; 0x1480 <vfprintf+0x74>
    1472:	93 fd       	sbrc	r25, 3
    1474:	85 91       	lpm	r24, Z+
    1476:	93 ff       	sbrs	r25, 3
    1478:	81 91       	ld	r24, Z+
    147a:	7f 01       	movw	r14, r30
    147c:	85 32       	cpi	r24, 0x25	; 37
    147e:	21 f4       	brne	.+8      	; 0x1488 <vfprintf+0x7c>
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	d6 d1       	rcall	.+940    	; 0x1832 <fputc>
    1486:	e8 cf       	rjmp	.-48     	; 0x1458 <vfprintf+0x4c>
    1488:	91 2c       	mov	r9, r1
    148a:	21 2c       	mov	r2, r1
    148c:	31 2c       	mov	r3, r1
    148e:	ff e1       	ldi	r31, 0x1F	; 31
    1490:	f3 15       	cp	r31, r3
    1492:	d8 f0       	brcs	.+54     	; 0x14ca <vfprintf+0xbe>
    1494:	8b 32       	cpi	r24, 0x2B	; 43
    1496:	79 f0       	breq	.+30     	; 0x14b6 <vfprintf+0xaa>
    1498:	38 f4       	brcc	.+14     	; 0x14a8 <vfprintf+0x9c>
    149a:	80 32       	cpi	r24, 0x20	; 32
    149c:	79 f0       	breq	.+30     	; 0x14bc <vfprintf+0xb0>
    149e:	83 32       	cpi	r24, 0x23	; 35
    14a0:	a1 f4       	brne	.+40     	; 0x14ca <vfprintf+0xbe>
    14a2:	23 2d       	mov	r18, r3
    14a4:	20 61       	ori	r18, 0x10	; 16
    14a6:	1d c0       	rjmp	.+58     	; 0x14e2 <vfprintf+0xd6>
    14a8:	8d 32       	cpi	r24, 0x2D	; 45
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <vfprintf+0xb8>
    14ac:	80 33       	cpi	r24, 0x30	; 48
    14ae:	69 f4       	brne	.+26     	; 0x14ca <vfprintf+0xbe>
    14b0:	23 2d       	mov	r18, r3
    14b2:	21 60       	ori	r18, 0x01	; 1
    14b4:	16 c0       	rjmp	.+44     	; 0x14e2 <vfprintf+0xd6>
    14b6:	83 2d       	mov	r24, r3
    14b8:	82 60       	ori	r24, 0x02	; 2
    14ba:	38 2e       	mov	r3, r24
    14bc:	e3 2d       	mov	r30, r3
    14be:	e4 60       	ori	r30, 0x04	; 4
    14c0:	3e 2e       	mov	r3, r30
    14c2:	2a c0       	rjmp	.+84     	; 0x1518 <vfprintf+0x10c>
    14c4:	f3 2d       	mov	r31, r3
    14c6:	f8 60       	ori	r31, 0x08	; 8
    14c8:	1d c0       	rjmp	.+58     	; 0x1504 <vfprintf+0xf8>
    14ca:	37 fc       	sbrc	r3, 7
    14cc:	2d c0       	rjmp	.+90     	; 0x1528 <vfprintf+0x11c>
    14ce:	20 ed       	ldi	r18, 0xD0	; 208
    14d0:	28 0f       	add	r18, r24
    14d2:	2a 30       	cpi	r18, 0x0A	; 10
    14d4:	40 f0       	brcs	.+16     	; 0x14e6 <vfprintf+0xda>
    14d6:	8e 32       	cpi	r24, 0x2E	; 46
    14d8:	b9 f4       	brne	.+46     	; 0x1508 <vfprintf+0xfc>
    14da:	36 fc       	sbrc	r3, 6
    14dc:	75 c1       	rjmp	.+746    	; 0x17c8 <vfprintf+0x3bc>
    14de:	23 2d       	mov	r18, r3
    14e0:	20 64       	ori	r18, 0x40	; 64
    14e2:	32 2e       	mov	r3, r18
    14e4:	19 c0       	rjmp	.+50     	; 0x1518 <vfprintf+0x10c>
    14e6:	36 fe       	sbrs	r3, 6
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <vfprintf+0xea>
    14ea:	8a e0       	ldi	r24, 0x0A	; 10
    14ec:	98 9e       	mul	r9, r24
    14ee:	20 0d       	add	r18, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	92 2e       	mov	r9, r18
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <vfprintf+0x10c>
    14f6:	ea e0       	ldi	r30, 0x0A	; 10
    14f8:	2e 9e       	mul	r2, r30
    14fa:	20 0d       	add	r18, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	22 2e       	mov	r2, r18
    1500:	f3 2d       	mov	r31, r3
    1502:	f0 62       	ori	r31, 0x20	; 32
    1504:	3f 2e       	mov	r3, r31
    1506:	08 c0       	rjmp	.+16     	; 0x1518 <vfprintf+0x10c>
    1508:	8c 36       	cpi	r24, 0x6C	; 108
    150a:	21 f4       	brne	.+8      	; 0x1514 <vfprintf+0x108>
    150c:	83 2d       	mov	r24, r3
    150e:	80 68       	ori	r24, 0x80	; 128
    1510:	38 2e       	mov	r3, r24
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x10c>
    1514:	88 36       	cpi	r24, 0x68	; 104
    1516:	41 f4       	brne	.+16     	; 0x1528 <vfprintf+0x11c>
    1518:	f7 01       	movw	r30, r14
    151a:	93 fd       	sbrc	r25, 3
    151c:	85 91       	lpm	r24, Z+
    151e:	93 ff       	sbrs	r25, 3
    1520:	81 91       	ld	r24, Z+
    1522:	7f 01       	movw	r14, r30
    1524:	81 11       	cpse	r24, r1
    1526:	b3 cf       	rjmp	.-154    	; 0x148e <vfprintf+0x82>
    1528:	98 2f       	mov	r25, r24
    152a:	9f 7d       	andi	r25, 0xDF	; 223
    152c:	95 54       	subi	r25, 0x45	; 69
    152e:	93 30       	cpi	r25, 0x03	; 3
    1530:	28 f4       	brcc	.+10     	; 0x153c <vfprintf+0x130>
    1532:	0c 5f       	subi	r16, 0xFC	; 252
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	9f e3       	ldi	r25, 0x3F	; 63
    1538:	99 83       	std	Y+1, r25	; 0x01
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <vfprintf+0x14a>
    153c:	83 36       	cpi	r24, 0x63	; 99
    153e:	31 f0       	breq	.+12     	; 0x154c <vfprintf+0x140>
    1540:	83 37       	cpi	r24, 0x73	; 115
    1542:	71 f0       	breq	.+28     	; 0x1560 <vfprintf+0x154>
    1544:	83 35       	cpi	r24, 0x53	; 83
    1546:	09 f0       	breq	.+2      	; 0x154a <vfprintf+0x13e>
    1548:	55 c0       	rjmp	.+170    	; 0x15f4 <vfprintf+0x1e8>
    154a:	20 c0       	rjmp	.+64     	; 0x158c <vfprintf+0x180>
    154c:	f8 01       	movw	r30, r16
    154e:	80 81       	ld	r24, Z
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	0e 5f       	subi	r16, 0xFE	; 254
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	88 24       	eor	r8, r8
    1558:	83 94       	inc	r8
    155a:	91 2c       	mov	r9, r1
    155c:	53 01       	movw	r10, r6
    155e:	12 c0       	rjmp	.+36     	; 0x1584 <vfprintf+0x178>
    1560:	28 01       	movw	r4, r16
    1562:	f2 e0       	ldi	r31, 0x02	; 2
    1564:	4f 0e       	add	r4, r31
    1566:	51 1c       	adc	r5, r1
    1568:	f8 01       	movw	r30, r16
    156a:	a0 80       	ld	r10, Z
    156c:	b1 80       	ldd	r11, Z+1	; 0x01
    156e:	36 fe       	sbrs	r3, 6
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <vfprintf+0x16c>
    1572:	69 2d       	mov	r22, r9
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x170>
    1578:	6f ef       	ldi	r22, 0xFF	; 255
    157a:	7f ef       	ldi	r23, 0xFF	; 255
    157c:	c5 01       	movw	r24, r10
    157e:	4e d1       	rcall	.+668    	; 0x181c <strnlen>
    1580:	4c 01       	movw	r8, r24
    1582:	82 01       	movw	r16, r4
    1584:	f3 2d       	mov	r31, r3
    1586:	ff 77       	andi	r31, 0x7F	; 127
    1588:	3f 2e       	mov	r3, r31
    158a:	15 c0       	rjmp	.+42     	; 0x15b6 <vfprintf+0x1aa>
    158c:	28 01       	movw	r4, r16
    158e:	22 e0       	ldi	r18, 0x02	; 2
    1590:	42 0e       	add	r4, r18
    1592:	51 1c       	adc	r5, r1
    1594:	f8 01       	movw	r30, r16
    1596:	a0 80       	ld	r10, Z
    1598:	b1 80       	ldd	r11, Z+1	; 0x01
    159a:	36 fe       	sbrs	r3, 6
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <vfprintf+0x198>
    159e:	69 2d       	mov	r22, r9
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <vfprintf+0x19c>
    15a4:	6f ef       	ldi	r22, 0xFF	; 255
    15a6:	7f ef       	ldi	r23, 0xFF	; 255
    15a8:	c5 01       	movw	r24, r10
    15aa:	2d d1       	rcall	.+602    	; 0x1806 <strnlen_P>
    15ac:	4c 01       	movw	r8, r24
    15ae:	f3 2d       	mov	r31, r3
    15b0:	f0 68       	ori	r31, 0x80	; 128
    15b2:	3f 2e       	mov	r3, r31
    15b4:	82 01       	movw	r16, r4
    15b6:	33 fc       	sbrc	r3, 3
    15b8:	19 c0       	rjmp	.+50     	; 0x15ec <vfprintf+0x1e0>
    15ba:	82 2d       	mov	r24, r2
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	88 16       	cp	r8, r24
    15c0:	99 06       	cpc	r9, r25
    15c2:	a0 f4       	brcc	.+40     	; 0x15ec <vfprintf+0x1e0>
    15c4:	b6 01       	movw	r22, r12
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	33 d1       	rcall	.+614    	; 0x1832 <fputc>
    15cc:	2a 94       	dec	r2
    15ce:	f5 cf       	rjmp	.-22     	; 0x15ba <vfprintf+0x1ae>
    15d0:	f5 01       	movw	r30, r10
    15d2:	37 fc       	sbrc	r3, 7
    15d4:	85 91       	lpm	r24, Z+
    15d6:	37 fe       	sbrs	r3, 7
    15d8:	81 91       	ld	r24, Z+
    15da:	5f 01       	movw	r10, r30
    15dc:	b6 01       	movw	r22, r12
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	28 d1       	rcall	.+592    	; 0x1832 <fputc>
    15e2:	21 10       	cpse	r2, r1
    15e4:	2a 94       	dec	r2
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	82 1a       	sub	r8, r18
    15ea:	91 08       	sbc	r9, r1
    15ec:	81 14       	cp	r8, r1
    15ee:	91 04       	cpc	r9, r1
    15f0:	79 f7       	brne	.-34     	; 0x15d0 <vfprintf+0x1c4>
    15f2:	e1 c0       	rjmp	.+450    	; 0x17b6 <vfprintf+0x3aa>
    15f4:	84 36       	cpi	r24, 0x64	; 100
    15f6:	11 f0       	breq	.+4      	; 0x15fc <vfprintf+0x1f0>
    15f8:	89 36       	cpi	r24, 0x69	; 105
    15fa:	39 f5       	brne	.+78     	; 0x164a <vfprintf+0x23e>
    15fc:	f8 01       	movw	r30, r16
    15fe:	37 fe       	sbrs	r3, 7
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <vfprintf+0x204>
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	0c 5f       	subi	r16, 0xFC	; 252
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <vfprintf+0x214>
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	07 2e       	mov	r0, r23
    1616:	00 0c       	add	r0, r0
    1618:	88 0b       	sbc	r24, r24
    161a:	99 0b       	sbc	r25, r25
    161c:	0e 5f       	subi	r16, 0xFE	; 254
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	f3 2d       	mov	r31, r3
    1622:	ff 76       	andi	r31, 0x6F	; 111
    1624:	3f 2e       	mov	r3, r31
    1626:	97 ff       	sbrs	r25, 7
    1628:	09 c0       	rjmp	.+18     	; 0x163c <vfprintf+0x230>
    162a:	90 95       	com	r25
    162c:	80 95       	com	r24
    162e:	70 95       	com	r23
    1630:	61 95       	neg	r22
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	f0 68       	ori	r31, 0x80	; 128
    163a:	3f 2e       	mov	r3, r31
    163c:	2a e0       	ldi	r18, 0x0A	; 10
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	a3 01       	movw	r20, r6
    1642:	33 d1       	rcall	.+614    	; 0x18aa <__ultoa_invert>
    1644:	88 2e       	mov	r8, r24
    1646:	86 18       	sub	r8, r6
    1648:	44 c0       	rjmp	.+136    	; 0x16d2 <vfprintf+0x2c6>
    164a:	85 37       	cpi	r24, 0x75	; 117
    164c:	31 f4       	brne	.+12     	; 0x165a <vfprintf+0x24e>
    164e:	23 2d       	mov	r18, r3
    1650:	2f 7e       	andi	r18, 0xEF	; 239
    1652:	b2 2e       	mov	r11, r18
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	25 c0       	rjmp	.+74     	; 0x16a4 <vfprintf+0x298>
    165a:	93 2d       	mov	r25, r3
    165c:	99 7f       	andi	r25, 0xF9	; 249
    165e:	b9 2e       	mov	r11, r25
    1660:	8f 36       	cpi	r24, 0x6F	; 111
    1662:	c1 f0       	breq	.+48     	; 0x1694 <vfprintf+0x288>
    1664:	18 f4       	brcc	.+6      	; 0x166c <vfprintf+0x260>
    1666:	88 35       	cpi	r24, 0x58	; 88
    1668:	79 f0       	breq	.+30     	; 0x1688 <vfprintf+0x27c>
    166a:	ae c0       	rjmp	.+348    	; 0x17c8 <vfprintf+0x3bc>
    166c:	80 37       	cpi	r24, 0x70	; 112
    166e:	19 f0       	breq	.+6      	; 0x1676 <vfprintf+0x26a>
    1670:	88 37       	cpi	r24, 0x78	; 120
    1672:	21 f0       	breq	.+8      	; 0x167c <vfprintf+0x270>
    1674:	a9 c0       	rjmp	.+338    	; 0x17c8 <vfprintf+0x3bc>
    1676:	e9 2f       	mov	r30, r25
    1678:	e0 61       	ori	r30, 0x10	; 16
    167a:	be 2e       	mov	r11, r30
    167c:	b4 fe       	sbrs	r11, 4
    167e:	0d c0       	rjmp	.+26     	; 0x169a <vfprintf+0x28e>
    1680:	fb 2d       	mov	r31, r11
    1682:	f4 60       	ori	r31, 0x04	; 4
    1684:	bf 2e       	mov	r11, r31
    1686:	09 c0       	rjmp	.+18     	; 0x169a <vfprintf+0x28e>
    1688:	34 fe       	sbrs	r3, 4
    168a:	0a c0       	rjmp	.+20     	; 0x16a0 <vfprintf+0x294>
    168c:	29 2f       	mov	r18, r25
    168e:	26 60       	ori	r18, 0x06	; 6
    1690:	b2 2e       	mov	r11, r18
    1692:	06 c0       	rjmp	.+12     	; 0x16a0 <vfprintf+0x294>
    1694:	28 e0       	ldi	r18, 0x08	; 8
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <vfprintf+0x298>
    169a:	20 e1       	ldi	r18, 0x10	; 16
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <vfprintf+0x298>
    16a0:	20 e1       	ldi	r18, 0x10	; 16
    16a2:	32 e0       	ldi	r19, 0x02	; 2
    16a4:	f8 01       	movw	r30, r16
    16a6:	b7 fe       	sbrs	r11, 7
    16a8:	07 c0       	rjmp	.+14     	; 0x16b8 <vfprintf+0x2ac>
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	0c 5f       	subi	r16, 0xFC	; 252
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0x2b8>
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 5f       	subi	r16, 0xFE	; 254
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	a3 01       	movw	r20, r6
    16c6:	f1 d0       	rcall	.+482    	; 0x18aa <__ultoa_invert>
    16c8:	88 2e       	mov	r8, r24
    16ca:	86 18       	sub	r8, r6
    16cc:	fb 2d       	mov	r31, r11
    16ce:	ff 77       	andi	r31, 0x7F	; 127
    16d0:	3f 2e       	mov	r3, r31
    16d2:	36 fe       	sbrs	r3, 6
    16d4:	0d c0       	rjmp	.+26     	; 0x16f0 <vfprintf+0x2e4>
    16d6:	23 2d       	mov	r18, r3
    16d8:	2e 7f       	andi	r18, 0xFE	; 254
    16da:	a2 2e       	mov	r10, r18
    16dc:	89 14       	cp	r8, r9
    16de:	58 f4       	brcc	.+22     	; 0x16f6 <vfprintf+0x2ea>
    16e0:	34 fe       	sbrs	r3, 4
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <vfprintf+0x2ee>
    16e4:	32 fc       	sbrc	r3, 2
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <vfprintf+0x2ee>
    16e8:	83 2d       	mov	r24, r3
    16ea:	8e 7e       	andi	r24, 0xEE	; 238
    16ec:	a8 2e       	mov	r10, r24
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <vfprintf+0x2ee>
    16f0:	b8 2c       	mov	r11, r8
    16f2:	a3 2c       	mov	r10, r3
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <vfprintf+0x2f0>
    16f6:	b8 2c       	mov	r11, r8
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <vfprintf+0x2f0>
    16fa:	b9 2c       	mov	r11, r9
    16fc:	a4 fe       	sbrs	r10, 4
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <vfprintf+0x312>
    1700:	fe 01       	movw	r30, r28
    1702:	e8 0d       	add	r30, r8
    1704:	f1 1d       	adc	r31, r1
    1706:	80 81       	ld	r24, Z
    1708:	80 33       	cpi	r24, 0x30	; 48
    170a:	21 f4       	brne	.+8      	; 0x1714 <vfprintf+0x308>
    170c:	9a 2d       	mov	r25, r10
    170e:	99 7e       	andi	r25, 0xE9	; 233
    1710:	a9 2e       	mov	r10, r25
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <vfprintf+0x31a>
    1714:	a2 fe       	sbrs	r10, 2
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <vfprintf+0x318>
    1718:	b3 94       	inc	r11
    171a:	b3 94       	inc	r11
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <vfprintf+0x31a>
    171e:	8a 2d       	mov	r24, r10
    1720:	86 78       	andi	r24, 0x86	; 134
    1722:	09 f0       	breq	.+2      	; 0x1726 <vfprintf+0x31a>
    1724:	b3 94       	inc	r11
    1726:	a3 fc       	sbrc	r10, 3
    1728:	10 c0       	rjmp	.+32     	; 0x174a <vfprintf+0x33e>
    172a:	a0 fe       	sbrs	r10, 0
    172c:	06 c0       	rjmp	.+12     	; 0x173a <vfprintf+0x32e>
    172e:	b2 14       	cp	r11, r2
    1730:	80 f4       	brcc	.+32     	; 0x1752 <vfprintf+0x346>
    1732:	28 0c       	add	r2, r8
    1734:	92 2c       	mov	r9, r2
    1736:	9b 18       	sub	r9, r11
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <vfprintf+0x348>
    173a:	b2 14       	cp	r11, r2
    173c:	58 f4       	brcc	.+22     	; 0x1754 <vfprintf+0x348>
    173e:	b6 01       	movw	r22, r12
    1740:	80 e2       	ldi	r24, 0x20	; 32
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	76 d0       	rcall	.+236    	; 0x1832 <fputc>
    1746:	b3 94       	inc	r11
    1748:	f8 cf       	rjmp	.-16     	; 0x173a <vfprintf+0x32e>
    174a:	b2 14       	cp	r11, r2
    174c:	18 f4       	brcc	.+6      	; 0x1754 <vfprintf+0x348>
    174e:	2b 18       	sub	r2, r11
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <vfprintf+0x34a>
    1752:	98 2c       	mov	r9, r8
    1754:	21 2c       	mov	r2, r1
    1756:	a4 fe       	sbrs	r10, 4
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <vfprintf+0x36c>
    175a:	b6 01       	movw	r22, r12
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	68 d0       	rcall	.+208    	; 0x1832 <fputc>
    1762:	a2 fe       	sbrs	r10, 2
    1764:	16 c0       	rjmp	.+44     	; 0x1792 <vfprintf+0x386>
    1766:	a1 fc       	sbrc	r10, 1
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <vfprintf+0x364>
    176a:	88 e7       	ldi	r24, 0x78	; 120
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x368>
    1770:	88 e5       	ldi	r24, 0x58	; 88
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	b6 01       	movw	r22, r12
    1776:	0c c0       	rjmp	.+24     	; 0x1790 <vfprintf+0x384>
    1778:	8a 2d       	mov	r24, r10
    177a:	86 78       	andi	r24, 0x86	; 134
    177c:	51 f0       	breq	.+20     	; 0x1792 <vfprintf+0x386>
    177e:	a1 fe       	sbrs	r10, 1
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x37a>
    1782:	8b e2       	ldi	r24, 0x2B	; 43
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <vfprintf+0x37c>
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	a7 fc       	sbrc	r10, 7
    178a:	8d e2       	ldi	r24, 0x2D	; 45
    178c:	b6 01       	movw	r22, r12
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	50 d0       	rcall	.+160    	; 0x1832 <fputc>
    1792:	89 14       	cp	r8, r9
    1794:	30 f4       	brcc	.+12     	; 0x17a2 <vfprintf+0x396>
    1796:	b6 01       	movw	r22, r12
    1798:	80 e3       	ldi	r24, 0x30	; 48
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	4a d0       	rcall	.+148    	; 0x1832 <fputc>
    179e:	9a 94       	dec	r9
    17a0:	f8 cf       	rjmp	.-16     	; 0x1792 <vfprintf+0x386>
    17a2:	8a 94       	dec	r8
    17a4:	f3 01       	movw	r30, r6
    17a6:	e8 0d       	add	r30, r8
    17a8:	f1 1d       	adc	r31, r1
    17aa:	80 81       	ld	r24, Z
    17ac:	b6 01       	movw	r22, r12
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	40 d0       	rcall	.+128    	; 0x1832 <fputc>
    17b2:	81 10       	cpse	r8, r1
    17b4:	f6 cf       	rjmp	.-20     	; 0x17a2 <vfprintf+0x396>
    17b6:	22 20       	and	r2, r2
    17b8:	09 f4       	brne	.+2      	; 0x17bc <vfprintf+0x3b0>
    17ba:	4e ce       	rjmp	.-868    	; 0x1458 <vfprintf+0x4c>
    17bc:	b6 01       	movw	r22, r12
    17be:	80 e2       	ldi	r24, 0x20	; 32
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	37 d0       	rcall	.+110    	; 0x1832 <fputc>
    17c4:	2a 94       	dec	r2
    17c6:	f7 cf       	rjmp	.-18     	; 0x17b6 <vfprintf+0x3aa>
    17c8:	f6 01       	movw	r30, r12
    17ca:	86 81       	ldd	r24, Z+6	; 0x06
    17cc:	97 81       	ldd	r25, Z+7	; 0x07
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x3c8>
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	9f ef       	ldi	r25, 0xFF	; 255
    17d4:	2b 96       	adiw	r28, 0x0b	; 11
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	df 90       	pop	r13
    17ee:	cf 90       	pop	r12
    17f0:	bf 90       	pop	r11
    17f2:	af 90       	pop	r10
    17f4:	9f 90       	pop	r9
    17f6:	8f 90       	pop	r8
    17f8:	7f 90       	pop	r7
    17fa:	6f 90       	pop	r6
    17fc:	5f 90       	pop	r5
    17fe:	4f 90       	pop	r4
    1800:	3f 90       	pop	r3
    1802:	2f 90       	pop	r2
    1804:	08 95       	ret

00001806 <strnlen_P>:
    1806:	fc 01       	movw	r30, r24
    1808:	05 90       	lpm	r0, Z+
    180a:	61 50       	subi	r22, 0x01	; 1
    180c:	70 40       	sbci	r23, 0x00	; 0
    180e:	01 10       	cpse	r0, r1
    1810:	d8 f7       	brcc	.-10     	; 0x1808 <strnlen_P+0x2>
    1812:	80 95       	com	r24
    1814:	90 95       	com	r25
    1816:	8e 0f       	add	r24, r30
    1818:	9f 1f       	adc	r25, r31
    181a:	08 95       	ret

0000181c <strnlen>:
    181c:	fc 01       	movw	r30, r24
    181e:	61 50       	subi	r22, 0x01	; 1
    1820:	70 40       	sbci	r23, 0x00	; 0
    1822:	01 90       	ld	r0, Z+
    1824:	01 10       	cpse	r0, r1
    1826:	d8 f7       	brcc	.-10     	; 0x181e <strnlen+0x2>
    1828:	80 95       	com	r24
    182a:	90 95       	com	r25
    182c:	8e 0f       	add	r24, r30
    182e:	9f 1f       	adc	r25, r31
    1830:	08 95       	ret

00001832 <fputc>:
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	fb 01       	movw	r30, r22
    183c:	23 81       	ldd	r18, Z+3	; 0x03
    183e:	21 fd       	sbrc	r18, 1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <fputc+0x16>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	2c c0       	rjmp	.+88     	; 0x18a0 <fputc+0x6e>
    1848:	22 ff       	sbrs	r18, 2
    184a:	16 c0       	rjmp	.+44     	; 0x1878 <fputc+0x46>
    184c:	46 81       	ldd	r20, Z+6	; 0x06
    184e:	57 81       	ldd	r21, Z+7	; 0x07
    1850:	24 81       	ldd	r18, Z+4	; 0x04
    1852:	35 81       	ldd	r19, Z+5	; 0x05
    1854:	42 17       	cp	r20, r18
    1856:	53 07       	cpc	r21, r19
    1858:	44 f4       	brge	.+16     	; 0x186a <fputc+0x38>
    185a:	a0 81       	ld	r26, Z
    185c:	b1 81       	ldd	r27, Z+1	; 0x01
    185e:	9d 01       	movw	r18, r26
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	31 83       	std	Z+1, r19	; 0x01
    1866:	20 83       	st	Z, r18
    1868:	8c 93       	st	X, r24
    186a:	26 81       	ldd	r18, Z+6	; 0x06
    186c:	37 81       	ldd	r19, Z+7	; 0x07
    186e:	2f 5f       	subi	r18, 0xFF	; 255
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	37 83       	std	Z+7, r19	; 0x07
    1874:	26 83       	std	Z+6, r18	; 0x06
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <fputc+0x6e>
    1878:	8b 01       	movw	r16, r22
    187a:	ec 01       	movw	r28, r24
    187c:	fb 01       	movw	r30, r22
    187e:	00 84       	ldd	r0, Z+8	; 0x08
    1880:	f1 85       	ldd	r31, Z+9	; 0x09
    1882:	e0 2d       	mov	r30, r0
    1884:	09 95       	icall
    1886:	89 2b       	or	r24, r25
    1888:	e1 f6       	brne	.-72     	; 0x1842 <fputc+0x10>
    188a:	d8 01       	movw	r26, r16
    188c:	16 96       	adiw	r26, 0x06	; 6
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	17 97       	sbiw	r26, 0x07	; 7
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	17 96       	adiw	r26, 0x07	; 7
    1898:	9c 93       	st	X, r25
    189a:	8e 93       	st	-X, r24
    189c:	16 97       	sbiw	r26, 0x06	; 6
    189e:	ce 01       	movw	r24, r28
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <__ultoa_invert>:
    18aa:	fa 01       	movw	r30, r20
    18ac:	aa 27       	eor	r26, r26
    18ae:	28 30       	cpi	r18, 0x08	; 8
    18b0:	51 f1       	breq	.+84     	; 0x1906 <__ultoa_invert+0x5c>
    18b2:	20 31       	cpi	r18, 0x10	; 16
    18b4:	81 f1       	breq	.+96     	; 0x1916 <__ultoa_invert+0x6c>
    18b6:	e8 94       	clt
    18b8:	6f 93       	push	r22
    18ba:	6e 7f       	andi	r22, 0xFE	; 254
    18bc:	6e 5f       	subi	r22, 0xFE	; 254
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	af 4f       	sbci	r26, 0xFF	; 255
    18c6:	b1 e0       	ldi	r27, 0x01	; 1
    18c8:	3e d0       	rcall	.+124    	; 0x1946 <__ultoa_invert+0x9c>
    18ca:	b4 e0       	ldi	r27, 0x04	; 4
    18cc:	3c d0       	rcall	.+120    	; 0x1946 <__ultoa_invert+0x9c>
    18ce:	67 0f       	add	r22, r23
    18d0:	78 1f       	adc	r23, r24
    18d2:	89 1f       	adc	r24, r25
    18d4:	9a 1f       	adc	r25, r26
    18d6:	a1 1d       	adc	r26, r1
    18d8:	68 0f       	add	r22, r24
    18da:	79 1f       	adc	r23, r25
    18dc:	8a 1f       	adc	r24, r26
    18de:	91 1d       	adc	r25, r1
    18e0:	a1 1d       	adc	r26, r1
    18e2:	6a 0f       	add	r22, r26
    18e4:	71 1d       	adc	r23, r1
    18e6:	81 1d       	adc	r24, r1
    18e8:	91 1d       	adc	r25, r1
    18ea:	a1 1d       	adc	r26, r1
    18ec:	20 d0       	rcall	.+64     	; 0x192e <__ultoa_invert+0x84>
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <__ultoa_invert+0x48>
    18f0:	68 94       	set
    18f2:	3f 91       	pop	r19
    18f4:	2a e0       	ldi	r18, 0x0A	; 10
    18f6:	26 9f       	mul	r18, r22
    18f8:	11 24       	eor	r1, r1
    18fa:	30 19       	sub	r19, r0
    18fc:	30 5d       	subi	r19, 0xD0	; 208
    18fe:	31 93       	st	Z+, r19
    1900:	de f6       	brtc	.-74     	; 0x18b8 <__ultoa_invert+0xe>
    1902:	cf 01       	movw	r24, r30
    1904:	08 95       	ret
    1906:	46 2f       	mov	r20, r22
    1908:	47 70       	andi	r20, 0x07	; 7
    190a:	40 5d       	subi	r20, 0xD0	; 208
    190c:	41 93       	st	Z+, r20
    190e:	b3 e0       	ldi	r27, 0x03	; 3
    1910:	0f d0       	rcall	.+30     	; 0x1930 <__ultoa_invert+0x86>
    1912:	c9 f7       	brne	.-14     	; 0x1906 <__ultoa_invert+0x5c>
    1914:	f6 cf       	rjmp	.-20     	; 0x1902 <__ultoa_invert+0x58>
    1916:	46 2f       	mov	r20, r22
    1918:	4f 70       	andi	r20, 0x0F	; 15
    191a:	40 5d       	subi	r20, 0xD0	; 208
    191c:	4a 33       	cpi	r20, 0x3A	; 58
    191e:	18 f0       	brcs	.+6      	; 0x1926 <__ultoa_invert+0x7c>
    1920:	49 5d       	subi	r20, 0xD9	; 217
    1922:	31 fd       	sbrc	r19, 1
    1924:	40 52       	subi	r20, 0x20	; 32
    1926:	41 93       	st	Z+, r20
    1928:	02 d0       	rcall	.+4      	; 0x192e <__ultoa_invert+0x84>
    192a:	a9 f7       	brne	.-22     	; 0x1916 <__ultoa_invert+0x6c>
    192c:	ea cf       	rjmp	.-44     	; 0x1902 <__ultoa_invert+0x58>
    192e:	b4 e0       	ldi	r27, 0x04	; 4
    1930:	a6 95       	lsr	r26
    1932:	97 95       	ror	r25
    1934:	87 95       	ror	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	ba 95       	dec	r27
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__ultoa_invert+0x86>
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	61 05       	cpc	r22, r1
    1942:	71 05       	cpc	r23, r1
    1944:	08 95       	ret
    1946:	9b 01       	movw	r18, r22
    1948:	ac 01       	movw	r20, r24
    194a:	0a 2e       	mov	r0, r26
    194c:	06 94       	lsr	r0
    194e:	57 95       	ror	r21
    1950:	47 95       	ror	r20
    1952:	37 95       	ror	r19
    1954:	27 95       	ror	r18
    1956:	ba 95       	dec	r27
    1958:	c9 f7       	brne	.-14     	; 0x194c <__ultoa_invert+0xa2>
    195a:	62 0f       	add	r22, r18
    195c:	73 1f       	adc	r23, r19
    195e:	84 1f       	adc	r24, r20
    1960:	95 1f       	adc	r25, r21
    1962:	a0 1d       	adc	r26, r0
    1964:	08 95       	ret

00001966 <_exit>:
    1966:	f8 94       	cli

00001968 <__stop_program>:
    1968:	ff cf       	rjmp	.-2      	; 0x1968 <__stop_program>
