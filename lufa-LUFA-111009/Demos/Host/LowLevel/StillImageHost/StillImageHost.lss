
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001e3c  00001ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800112  00800112  00001ee2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006448  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002476  00000000  00000000  000086cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033c9  00000000  00000000  0000ab42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  0000df0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025b3  00000000  00000000  0000e96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a91  00000000  00000000  00010f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  000149b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a9 c1       	rjmp	.+850    	; 0x354 <__ctors_end>
       2:	00 00       	nop
       4:	c5 c1       	rjmp	.+906    	; 0x390 <__bad_interrupt>
       6:	00 00       	nop
       8:	c3 c1       	rjmp	.+902    	; 0x390 <__bad_interrupt>
       a:	00 00       	nop
       c:	c1 c1       	rjmp	.+898    	; 0x390 <__bad_interrupt>
       e:	00 00       	nop
      10:	bf c1       	rjmp	.+894    	; 0x390 <__bad_interrupt>
      12:	00 00       	nop
      14:	bd c1       	rjmp	.+890    	; 0x390 <__bad_interrupt>
      16:	00 00       	nop
      18:	bb c1       	rjmp	.+886    	; 0x390 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b9 c1       	rjmp	.+882    	; 0x390 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b7 c1       	rjmp	.+878    	; 0x390 <__bad_interrupt>
      22:	00 00       	nop
      24:	b5 c1       	rjmp	.+874    	; 0x390 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_10>
      2c:	b1 c1       	rjmp	.+866    	; 0x390 <__bad_interrupt>
      2e:	00 00       	nop
      30:	af c1       	rjmp	.+862    	; 0x390 <__bad_interrupt>
      32:	00 00       	nop
      34:	ad c1       	rjmp	.+858    	; 0x390 <__bad_interrupt>
      36:	00 00       	nop
      38:	ab c1       	rjmp	.+854    	; 0x390 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a9 c1       	rjmp	.+850    	; 0x390 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a7 c1       	rjmp	.+846    	; 0x390 <__bad_interrupt>
      42:	00 00       	nop
      44:	a5 c1       	rjmp	.+842    	; 0x390 <__bad_interrupt>
      46:	00 00       	nop
      48:	a3 c1       	rjmp	.+838    	; 0x390 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a1 c1       	rjmp	.+834    	; 0x390 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9f c1       	rjmp	.+830    	; 0x390 <__bad_interrupt>
      52:	00 00       	nop
      54:	9d c1       	rjmp	.+826    	; 0x390 <__bad_interrupt>
      56:	00 00       	nop
      58:	9b c1       	rjmp	.+822    	; 0x390 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	99 c1       	rjmp	.+818    	; 0x390 <__bad_interrupt>
      5e:	00 00       	nop
      60:	97 c1       	rjmp	.+814    	; 0x390 <__bad_interrupt>
      62:	00 00       	nop
      64:	95 c1       	rjmp	.+810    	; 0x390 <__bad_interrupt>
      66:	00 00       	nop
      68:	93 c1       	rjmp	.+806    	; 0x390 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	91 c1       	rjmp	.+802    	; 0x390 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8f c1       	rjmp	.+798    	; 0x390 <__bad_interrupt>
      72:	00 00       	nop
      74:	8d c1       	rjmp	.+794    	; 0x390 <__bad_interrupt>
      76:	00 00       	nop
      78:	8b c1       	rjmp	.+790    	; 0x390 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	89 c1       	rjmp	.+786    	; 0x390 <__bad_interrupt>
      7e:	00 00       	nop
      80:	87 c1       	rjmp	.+782    	; 0x390 <__bad_interrupt>
      82:	00 00       	nop
      84:	85 c1       	rjmp	.+778    	; 0x390 <__bad_interrupt>
      86:	00 00       	nop
      88:	83 c1       	rjmp	.+774    	; 0x390 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	81 c1       	rjmp	.+770    	; 0x390 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7f c1       	rjmp	.+766    	; 0x390 <__bad_interrupt>
      92:	00 00       	nop
      94:	7d c1       	rjmp	.+762    	; 0x390 <__bad_interrupt>
      96:	00 00       	nop
      98:	9c 06       	cpc	r9, r28
      9a:	8d 07       	cpc	r24, r29
      9c:	ba 06       	cpc	r11, r26
      9e:	c4 06       	cpc	r12, r20
      a0:	ef 06       	cpc	r14, r31
      a2:	17 07       	cpc	r17, r23
      a4:	22 07       	cpc	r18, r18
      a6:	33 07       	cpc	r19, r19
      a8:	4f 07       	cpc	r20, r31
      aa:	76 07       	cpc	r23, r22

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 43       	sbci	r22, 0x3D	; 61
      b2:	6f 6d       	ori	r22, 0xDF	; 223
      b4:	6d 61       	ori	r22, 0x1D	; 29
      b6:	6e 64       	ori	r22, 0x4E	; 78
      b8:	20 45       	sbci	r18, 0x50	; 80
      ba:	72 72       	andi	r23, 0x22	; 34
      bc:	6f 72       	andi	r22, 0x2F	; 47
      be:	20 28       	or	r2, r0
      c0:	25 53       	subi	r18, 0x35	; 53
      c2:	29 2e       	mov	r2, r25
      c4:	0d 0a       	sbc	r0, r29
      c6:	20 2d       	mov	r18, r0
      c8:	2d 20       	and	r2, r13
      ca:	45 72       	andi	r20, 0x25	; 37
      cc:	72 6f       	ori	r23, 0xF2	; 242
      ce:	72 20       	and	r7, r2
      d0:	43 6f       	ori	r20, 0xF3	; 243
      d2:	64 65       	ori	r22, 0x54	; 84
      d4:	20 25       	eor	r18, r0
      d6:	64 0d       	add	r22, r4
      d8:	0a 1b       	sub	r16, r26
      da:	5b 33       	cpi	r21, 0x3B	; 59
      dc:	37 6d       	ori	r19, 0xD7	; 215
      de:	00 54       	Address 0x00000000000000de is out of bounds.
.word	0xffff	; ????

000000df <__c.4588>:
      df:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
      ef:	00                                                  .

000000f0 <__c.4586>:
      f0:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
     100:	20 4f 4b 00                                          OK.

00000104 <__c.4571>:
     104:	44 6f 6e 65 2e 0d 0a 00                             Done....

0000010c <__c.4568>:
     10c:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     11c:	2e 2e 0d 0a 00                                      .....

00000121 <__c.4565>:
     121:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     131:	2e 2e 0d 0a 00                                      .....

00000136 <__c.4563>:
     136:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
     146:	6e 3a 20 25 73 0d 0a 00                             n: %s...

0000014e <__c.4560>:
     14e:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

0000015d <__c.4557>:
     15d:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
     16d:	20 25 73 0d 0a 00                                    %s...

00000173 <__c.4550>:
     173:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     183:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

0000018f <__c.4544>:
     18f:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     19f:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1af:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1bf:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1cf:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1df:	1b 5b 33 37 6d 00                                   .[37m.

000001e5 <__c.4537>:
     1e5:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1f5:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     205:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000214 <__c.4532>:
     214:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     224:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     234:	00                                                  .

00000235 <__c.4530>:
     235:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     245:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     255:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     265:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     275:	37 6d 00                                            7m.

00000278 <__c.4528>:
     278:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     288:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000292 <__c.4526>:
     292:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     2a2:	69 63 65 2e 0d 0a 00                                ice....

000002a9 <__c.4524>:
     2a9:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2b9:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2c9:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002d3 <__c.4521>:
     2d3:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     2e3:	61 74 61 2e 0d 0a 00                                ata....

000002ea <__c.4516>:
     2ea:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     2fa:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     30a:	00                                                  .

0000030b <__c.4511>:
     30b:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     31b:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000328 <__c.4502>:
     328:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     338:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     348:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d0 e2       	ldi	r29, 0x20	; 32
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	ec e3       	ldi	r30, 0x3C	; 60
     368:	fe e1       	ldi	r31, 0x1E	; 30
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0b bf       	out	0x3b, r16	; 59
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x14>
     370:	07 90       	elpm	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	a2 31       	cpi	r26, 0x12	; 18
     376:	b1 07       	cpc	r27, r17
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0x10>

0000037a <__do_clear_bss>:
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	a2 e1       	ldi	r26, 0x12	; 18
     37e:	b1 e0       	ldi	r27, 0x01	; 1
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
     384:	ac 37       	cpi	r26, 0x7C	; 124
     386:	b2 07       	cpc	r27, r18
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>
     38a:	92 d2       	rcall	.+1316   	; 0x8b0 <main>
     38c:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <_exit>

00000390 <__bad_interrupt>:
     390:	37 ce       	rjmp	.-914    	; 0x0 <__vectors>

00000392 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     392:	9b b1       	in	r25, 0x0b	; 11
     394:	9f 70       	andi	r25, 0x0F	; 15
     396:	89 2b       	or	r24, r25
     398:	8b b9       	out	0x0b, r24	; 11
     39a:	08 95       	ret

0000039c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     39c:	84 b7       	in	r24, 0x34	; 52
     39e:	87 7f       	andi	r24, 0xF7	; 247
     3a0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	a8 95       	wdr
     3a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3ac:	88 61       	ori	r24, 0x18	; 24
     3ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3b6:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	/* Disable Clock Division */
	CLKPR = (1 << CLKPCE);
     3b8:	e1 e6       	ldi	r30, 0x61	; 97
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	80 83       	st	Z, r24
	CLKPR = 0;
     3c0:	10 82       	st	Z, r1
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3c2:	83 e3       	ldi	r24, 0x33	; 51
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     3ca:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3ce:	86 e0       	ldi	r24, 0x06	; 6
     3d0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3d4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3d8:	88 e1       	ldi	r24, 0x18	; 24
     3da:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     3de:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3e0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3e2:	8a b1       	in	r24, 0x0a	; 10
     3e4:	80 6f       	ori	r24, 0xF0	; 240
     3e6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3e8:	8b b1       	in	r24, 0x0b	; 11
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     3ee:	a7 d6       	rcall	.+3406   	; 0x113e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     3f0:	a6 e7       	ldi	r26, 0x76	; 118
     3f2:	b1 e0       	ldi	r27, 0x01	; 1
     3f4:	e8 e6       	ldi	r30, 0x68	; 104
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	11 96       	adiw	r26, 0x01	; 1
     3fa:	fc 93       	st	X, r31
     3fc:	ee 93       	st	-X, r30
					stdout = Stream;
     3fe:	13 96       	adiw	r26, 0x03	; 3
     400:	fc 93       	st	X, r31
     402:	ee 93       	st	-X, r30
     404:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     406:	8e e0       	ldi	r24, 0x0E	; 14
     408:	df 01       	movw	r26, r30
     40a:	1d 92       	st	X+, r1
     40c:	8a 95       	dec	r24
     40e:	e9 f7       	brne	.-6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	83 83       	std	Z+3, r24	; 0x03
     414:	83 ef       	ldi	r24, 0xF3	; 243
     416:	9b e0       	ldi	r25, 0x0B	; 11
     418:	91 87       	std	Z+9, r25	; 0x09
     41a:	80 87       	std	Z+8, r24	; 0x08
     41c:	8c ef       	ldi	r24, 0xFC	; 252
     41e:	9b e0       	ldi	r25, 0x0B	; 11
     420:	93 87       	std	Z+11, r25	; 0x0b
     422:	82 87       	std	Z+10, r24	; 0x0a
     424:	08 95       	ret

00000426 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     426:	8b e0       	ldi	r24, 0x0B	; 11
     428:	93 e0       	ldi	r25, 0x03	; 3
     42a:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     42e:	80 ea       	ldi	r24, 0xA0	; 160
     430:	b0 cf       	rjmp	.-160    	; 0x392 <LEDs_SetAllLEDs>

00000432 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     432:	8a ee       	ldi	r24, 0xEA	; 234
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     43a:	80 e1       	ldi	r24, 0x10	; 16
     43c:	aa cf       	rjmp	.-172    	; 0x392 <LEDs_SetAllLEDs>

0000043e <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     43e:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     440:	83 ed       	ldi	r24, 0xD3	; 211
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     448:	60 d2       	rcall	.+1216   	; 0x90a <ProcessConfigurationDescriptor>
     44a:	c8 2f       	mov	r28, r24
     44c:	88 23       	and	r24, r24
     44e:	b9 f0       	breq	.+46     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	{
		if (ErrorCode == ControlError)
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	19 f4       	brne	.+6      	; 0x45a <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     454:	89 ea       	ldi	r24, 0xA9	; 169
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	02 c0       	rjmp	.+4      	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     45a:	82 e9       	ldi	r24, 0x92	; 146
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     462:	1f 92       	push	r1
     464:	cf 93       	push	r28
     466:	88 e7       	ldi	r24, 0x78	; 120
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	80 e9       	ldi	r24, 0x90	; 144
     47c:	0f c0       	rjmp	.+30     	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 ac 0b 	call	0x1758	; 0x1758 <USB_Host_SetDeviceConfiguration>
     484:	88 23       	and	r24, r24
     486:	29 f0       	breq	.+10     	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     488:	1f 92       	push	r1
     48a:	8f 93       	push	r24
     48c:	85 e3       	ldi	r24, 0x35	; 53
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	ec cf       	rjmp	.-40     	; 0x46a <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     492:	84 e1       	ldi	r24, 0x14	; 20
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     49a:	80 e6       	ldi	r24, 0x60	; 96
     49c:	cf 91       	pop	r28
     49e:	79 cf       	rjmp	.-270    	; 0x392 <LEDs_SetAllLEDs>

000004a0 <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4a0:	c8 2f       	mov	r28, r24
	USB_Disable();
     4a2:	e5 d5       	rcall	.+3018   	; 0x106e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4a4:	1f 92       	push	r1
     4a6:	cf 93       	push	r28
     4a8:	85 ee       	ldi	r24, 0xE5	; 229
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b4:	80 e9       	ldi	r24, 0x90	; 144
     4b6:	6d df       	rcall	.-294    	; 0x392 <LEDs_SetAllLEDs>
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <EVENT_USB_Host_HostError+0x20>

000004c2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4c2:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <USB_HostState>
     4c6:	1f 92       	push	r1
     4c8:	9f 93       	push	r25
     4ca:	1f 92       	push	r1
     4cc:	6f 93       	push	r22
     4ce:	1f 92       	push	r1
     4d0:	8f 93       	push	r24
     4d2:	8f e8       	ldi	r24, 0x8F	; 143
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4de:	8d b7       	in	r24, 0x3d	; 61
     4e0:	9e b7       	in	r25, 0x3e	; 62
     4e2:	08 96       	adiw	r24, 0x08	; 8
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	9e bf       	out	0x3e, r25	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	8d bf       	out	0x3d, r24	; 61
     4ee:	80 e9       	ldi	r24, 0x90	; 144
     4f0:	50 cf       	rjmp	.-352    	; 0x392 <LEDs_SetAllLEDs>

000004f2 <UnicodeToASCII>:
 */
void UnicodeToASCII(uint8_t* UnicodeString,
                    char* Buffer)
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);
     4f2:	fc 01       	movw	r30, r24
     4f4:	31 96       	adiw	r30, 0x01	; 1
     4f6:	dc 01       	movw	r26, r24
     4f8:	9c 91       	ld	r25, X
     4fa:	db 01       	movw	r26, r22
     4fc:	89 2f       	mov	r24, r25

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     4fe:	81 50       	subi	r24, 0x01	; 1
     500:	20 f0       	brcs	.+8      	; 0x50a <UnicodeToASCII+0x18>
	{
		/* Load in the next unicode character (only the lower byte, as only Unicode coded ASCII is supported) */
		*(Buffer++) = *UnicodeString;
     502:	20 81       	ld	r18, Z
     504:	2d 93       	st	X+, r18

		/* Jump to the next unicode character */
		UnicodeString += 2;
     506:	32 96       	adiw	r30, 0x02	; 2
     508:	fa cf       	rjmp	.-12     	; 0x4fe <UnicodeToASCII+0xc>
	}

	/* Null terminate the string */
	*Buffer = 0;
     50a:	fb 01       	movw	r30, r22
     50c:	e9 0f       	add	r30, r25
     50e:	f1 1d       	adc	r31, r1
     510:	10 82       	st	Z, r1
     512:	08 95       	ret

00000514 <ShowCommandError>:
 *  \param[in] ResponseCodeError  Indicates if the error is due to a command failed indication from the device, or a communication failure
 */
void ShowCommandError(uint8_t ErrorCode,
                      bool ResponseCodeError)
{
	const char* FailureType = ((ResponseCodeError) ? PSTR("Response Code != OK") : PSTR("Transaction Fail"));
     514:	61 11       	cpse	r22, r1
     516:	03 c0       	rjmp	.+6      	; 0x51e <ShowCommandError+0xa>
     518:	2f ed       	ldi	r18, 0xDF	; 223
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <ShowCommandError+0xe>
     51e:	20 ef       	ldi	r18, 0xF0	; 240
     520:	30 e0       	ldi	r19, 0x00	; 0

	printf_P(PSTR(ESC_FG_RED "Command Error (%S).\r\n"
     522:	1f 92       	push	r1
     524:	8f 93       	push	r24
     526:	3f 93       	push	r19
     528:	2f 93       	push	r18
     52a:	8c ea       	ldi	r24, 0xAC	; 172
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), FailureType, ErrorCode);

	/* Indicate error via status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	80 e9       	ldi	r24, 0x90	; 144
     544:	26 cf       	rjmp	.-436    	; 0x392 <LEDs_SetAllLEDs>

00000546 <StillImageHost_Task>:

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     546:	3f 92       	push	r3
     548:	4f 92       	push	r4
     54a:	5f 92       	push	r5
     54c:	6f 92       	push	r6
     54e:	7f 92       	push	r7
     550:	8f 92       	push	r8
     552:	9f 92       	push	r9
     554:	af 92       	push	r10
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     56c:	0d b7       	in	r16, 0x3d	; 61
     56e:	1e b7       	in	r17, 0x3e	; 62
/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     570:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <USB_HostState>
     574:	8b 30       	cpi	r24, 0x0B	; 11
     576:	09 f0       	breq	.+2      	; 0x57a <StillImageHost_Task+0x34>
     578:	7f c1       	rjmp	.+766    	; 0x878 <StillImageHost_Task+0x332>
	  return;

	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     57a:	80 e2       	ldi	r24, 0x20	; 32
     57c:	0a df       	rcall	.-492    	; 0x392 <LEDs_SetAllLEDs>

	puts_P(PSTR("Retrieving Device Info...\r\n"));
     57e:	83 e7       	ldi	r24, 0x73	; 115
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     586:	e8 e1       	ldi	r30, 0x18	; 24
     588:	3e 2e       	mov	r3, r30
     58a:	fd e2       	ldi	r31, 0x2D	; 45
     58c:	8f 2e       	mov	r8, r31
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	9f 2e       	mov	r9, r31
     592:	f4 01       	movw	r30, r8
     594:	23 2d       	mov	r18, r3
     596:	11 92       	st	Z+, r1
     598:	2a 95       	dec	r18
     59a:	e9 f7       	brne	.-6      	; 0x596 <StillImageHost_Task+0x50>
     59c:	8c e0       	ldi	r24, 0x0C	; 12
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <PIMA_SendBlock>
     5a8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <PIMA_SendBlock+0x1>
     5ac:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <PIMA_SendBlock+0x2>
     5b0:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <PIMA_SendBlock+0x3>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <PIMA_SendBlock+0x5>
     5bc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <PIMA_SendBlock+0x4>
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e1       	ldi	r25, 0x10	; 16
     5c4:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <PIMA_SendBlock+0x7>
     5c8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <PIMA_SendBlock+0x6>

	/* Send the GETDEVICEINFO block */
	SImage_SendBlockHeader();

	/* Receive the response data block */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     5cc:	47 d2       	rcall	.+1166   	; 0xa5c <SImage_SendBlockHeader>
     5ce:	70 d2       	rcall	.+1248   	; 0xab0 <SImage_ReceiveBlockHeader>
     5d0:	81 11       	cpse	r24, r1
     5d2:	37 c1       	rjmp	.+622    	; 0x842 <StillImageHost_Task+0x2fc>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Calculate the size of the returned device info data structure */
	uint16_t DeviceInfoSize = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     5d4:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <PIMA_ReceivedBlock>
     5d8:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <PIMA_ReceivedBlock+0x1>
     5dc:	6c 50       	subi	r22, 0x0C	; 12
     5de:	71 09       	sbc	r23, r1

	/* Create a buffer large enough to hold the entire device info */
	uint8_t DeviceInfo[DeviceInfoSize];
     5e0:	4d b7       	in	r20, 0x3d	; 61
     5e2:	5e b7       	in	r21, 0x3e	; 62
     5e4:	46 1b       	sub	r20, r22
     5e6:	57 0b       	sbc	r21, r23
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	5e bf       	out	0x3e, r21	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	4d bf       	out	0x3d, r20	; 61
     5f2:	8d b7       	in	r24, 0x3d	; 61
     5f4:	9e b7       	in	r25, 0x3e	; 62
     5f6:	01 96       	adiw	r24, 0x01	; 1

	/* Read in the data block data (containing device info) */
	SImage_ReadData(DeviceInfo, DeviceInfoSize);
     5f8:	7c 01       	movw	r14, r24
     5fa:	d4 d2       	rcall	.+1448   	; 0xba4 <SImage_ReadData>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5fc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     600:	8e 77       	andi	r24, 0x7E	; 126
     602:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     606:	f7 01       	movw	r30, r14
     608:	20 85       	ldd	r18, Z+8	; 0x08
     60a:	c7 01       	movw	r24, r14
     60c:	82 0f       	add	r24, r18
     60e:	91 1d       	adc	r25, r1
     610:	82 0f       	add	r24, r18
     612:	91 1d       	adc	r25, r1
	/* Create a pointer for walking through the info dataset */
	uint8_t* DeviceInfoPos = DeviceInfo;

	/* Skip over the data before the unicode device information strings */
	DeviceInfoPos +=  8;                                          // Skip to VendorExtensionDesc String
	DeviceInfoPos += (1 + UNICODE_STRING_LENGTH(*DeviceInfoPos)); // Skip over VendorExtensionDesc String
     614:	fc 01       	movw	r30, r24
     616:	39 96       	adiw	r30, 0x09	; 9
     618:	82 81       	ldd	r24, Z+2	; 0x02
     61a:	93 81       	ldd	r25, Z+3	; 0x03
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	06 96       	adiw	r24, 0x06	; 6
	DeviceInfoPos +=  2;                                          // Skip over FunctionalMode
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Operations Array
     622:	e8 0f       	add	r30, r24
     624:	f9 1f       	adc	r31, r25
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Events Array
     626:	20 81       	ld	r18, Z
     628:	31 81       	ldd	r19, Z+1	; 0x01
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	2c 5f       	subi	r18, 0xFC	; 252
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	e2 0f       	add	r30, r18
     634:	f3 1f       	adc	r31, r19
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Device Properties Array
     636:	20 81       	ld	r18, Z
     638:	31 81       	ldd	r19, Z+1	; 0x01
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	2c 5f       	subi	r18, 0xFC	; 252
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	e2 0f       	add	r30, r18
     644:	f3 1f       	adc	r31, r19
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Capture Formats Array
     646:	20 81       	ld	r18, Z
     648:	31 81       	ldd	r19, Z+1	; 0x01
     64a:	22 0f       	add	r18, r18
     64c:	33 1f       	adc	r19, r19
     64e:	2c 5f       	subi	r18, 0xFC	; 252
     650:	3f 4f       	sbci	r19, 0xFF	; 255
     652:	e2 0f       	add	r30, r18
     654:	f3 1f       	adc	r31, r19
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Image Formats Array
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	04 96       	adiw	r24, 0x04	; 4
     660:	7f 01       	movw	r14, r30
     662:	e8 0e       	add	r14, r24
     664:	f9 1e       	adc	r15, r25

	/* Extract and convert the Manufacturer Unicode string to ASCII and print it through the USART */
	char Manufacturer[*DeviceInfoPos];
     666:	f7 01       	movw	r30, r14
     668:	80 81       	ld	r24, Z
     66a:	2d b7       	in	r18, 0x3d	; 61
     66c:	3e b7       	in	r19, 0x3e	; 62
     66e:	28 1b       	sub	r18, r24
     670:	31 09       	sbc	r19, r1
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	3e bf       	out	0x3e, r19	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	2d bf       	out	0x3d, r18	; 61
     67c:	4d b7       	in	r20, 0x3d	; 61
     67e:	5e b7       	in	r21, 0x3e	; 62
     680:	4f 5f       	subi	r20, 0xFF	; 255
     682:	5f 4f       	sbci	r21, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, Manufacturer);
     684:	6a 01       	movw	r12, r20
     686:	ba 01       	movw	r22, r20
     688:	c7 01       	movw	r24, r14
     68a:	33 df       	rcall	.-410    	; 0x4f2 <UnicodeToASCII>
	printf_P(PSTR("   Manufacturer: %s\r\n"), Manufacturer);
     68c:	df 92       	push	r13
     68e:	cf 92       	push	r12
     690:	8d e5       	ldi	r24, 0x5D	; 93
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Manufacturer String
     69c:	f7 01       	movw	r30, r14
     69e:	20 81       	ld	r18, Z
     6a0:	c7 01       	movw	r24, r14
     6a2:	82 0f       	add	r24, r18
     6a4:	91 1d       	adc	r25, r1
     6a6:	82 0f       	add	r24, r18
     6a8:	91 1d       	adc	r25, r1
     6aa:	9c 01       	movw	r18, r24
     6ac:	2f 5f       	subi	r18, 0xFF	; 255
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
     6b0:	79 01       	movw	r14, r18

	/* Extract and convert the Model Unicode string to ASCII and print it through the USART */
	char Model[*DeviceInfoPos];
     6b2:	f9 01       	movw	r30, r18
     6b4:	80 81       	ld	r24, Z
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	2d b7       	in	r18, 0x3d	; 61
     6c0:	3e b7       	in	r19, 0x3e	; 62
     6c2:	28 1b       	sub	r18, r24
     6c4:	31 09       	sbc	r19, r1
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	3e bf       	out	0x3e, r19	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	2d bf       	out	0x3d, r18	; 61
     6d0:	4d b7       	in	r20, 0x3d	; 61
     6d2:	5e b7       	in	r21, 0x3e	; 62
     6d4:	4f 5f       	subi	r20, 0xFF	; 255
     6d6:	5f 4f       	sbci	r21, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, Model);
     6d8:	6a 01       	movw	r12, r20
     6da:	ba 01       	movw	r22, r20
     6dc:	c7 01       	movw	r24, r14
     6de:	09 df       	rcall	.-494    	; 0x4f2 <UnicodeToASCII>
	printf_P(PSTR("   Model: %s\r\n"), Model);
     6e0:	df 92       	push	r13
     6e2:	cf 92       	push	r12
     6e4:	8e e4       	ldi	r24, 0x4E	; 78
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String
     6f0:	f7 01       	movw	r30, r14
     6f2:	20 81       	ld	r18, Z
     6f4:	c7 01       	movw	r24, r14
     6f6:	82 0f       	add	r24, r18
     6f8:	91 1d       	adc	r25, r1
     6fa:	82 0f       	add	r24, r18
     6fc:	91 1d       	adc	r25, r1
     6fe:	01 96       	adiw	r24, 0x01	; 1

	/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
	char DeviceVersion[*DeviceInfoPos];
     700:	fc 01       	movw	r30, r24
     702:	20 81       	ld	r18, Z
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	4d b7       	in	r20, 0x3d	; 61
     70e:	5e b7       	in	r21, 0x3e	; 62
     710:	42 1b       	sub	r20, r18
     712:	51 09       	sbc	r21, r1
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	5e bf       	out	0x3e, r21	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	4d bf       	out	0x3d, r20	; 61
     71e:	ed b7       	in	r30, 0x3d	; 61
     720:	fe b7       	in	r31, 0x3e	; 62
     722:	31 96       	adiw	r30, 0x01	; 1
	UnicodeToASCII(DeviceInfoPos, DeviceVersion);
     724:	7f 01       	movw	r14, r30
     726:	bf 01       	movw	r22, r30
     728:	e4 de       	rcall	.-568    	; 0x4f2 <UnicodeToASCII>
	printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     72a:	ff 92       	push	r15
     72c:	ef 92       	push	r14
     72e:	86 e3       	ldi	r24, 0x36	; 54
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	0e 94 17 0c 	call	0x182e	; 0x182e <printf_P>

	/* Receive the final response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     73a:	ba d1       	rcall	.+884    	; 0xab0 <SImage_ReceiveBlockHeader>
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	81 11       	cpse	r24, r1
     746:	7d c0       	rjmp	.+250    	; 0x842 <StillImageHost_Task+0x2fc>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     748:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <PIMA_ReceivedBlock+0x4>
     74c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <PIMA_ReceivedBlock+0x5>
     750:	03 97       	sbiw	r24, 0x03	; 3
     752:	09 f0       	breq	.+2      	; 0x756 <StillImageHost_Task+0x210>
     754:	84 c0       	rjmp	.+264    	; 0x85e <StillImageHost_Task+0x318>
     756:	e0 90 4b 01 	lds	r14, 0x014B	; 0x80014b <PIMA_ReceivedBlock+0x6>
     75a:	f0 90 4c 01 	lds	r15, 0x014C	; 0x80014c <PIMA_ReceivedBlock+0x7>
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	ef 16       	cp	r14, r31
     762:	f1 04       	cpc	r15, r1
     764:	09 f0       	breq	.+2      	; 0x768 <StillImageHost_Task+0x222>
     766:	7b c0       	rjmp	.+246    	; 0x85e <StillImageHost_Task+0x318>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Opening Session...\r\n"));
     768:	81 e2       	ldi	r24, 0x21	; 33
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     770:	f4 01       	movw	r30, r8
     772:	23 2d       	mov	r18, r3
     774:	11 92       	st	Z+, r1
     776:	2a 95       	dec	r18
     778:	e9 f7       	brne	.-6      	; 0x774 <StillImageHost_Task+0x22e>
     77a:	80 e1       	ldi	r24, 0x10	; 16
     77c:	48 2e       	mov	r4, r24
     77e:	51 2c       	mov	r5, r1
     780:	61 2c       	mov	r6, r1
     782:	71 2c       	mov	r7, r1
     784:	40 92 2d 01 	sts	0x012D, r4	; 0x80012d <PIMA_SendBlock>
     788:	50 92 2e 01 	sts	0x012E, r5	; 0x80012e <PIMA_SendBlock+0x1>
     78c:	60 92 2f 01 	sts	0x012F, r6	; 0x80012f <PIMA_SendBlock+0x2>
     790:	70 92 30 01 	sts	0x0130, r7	; 0x800130 <PIMA_SendBlock+0x3>
     794:	f0 92 32 01 	sts	0x0132, r15	; 0x800132 <PIMA_SendBlock+0x5>
     798:	e0 92 31 01 	sts	0x0131, r14	; 0x800131 <PIMA_SendBlock+0x4>
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	90 e1       	ldi	r25, 0x10	; 16
     7a0:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <PIMA_SendBlock+0x7>
     7a4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <PIMA_SendBlock+0x6>
     7a8:	c1 2c       	mov	r12, r1
     7aa:	d1 2c       	mov	r13, r1
     7ac:	76 01       	movw	r14, r12
     7ae:	c3 94       	inc	r12
     7b0:	c0 92 39 01 	sts	0x0139, r12	; 0x800139 <PIMA_SendBlock+0xc>
     7b4:	d0 92 3a 01 	sts	0x013A, r13	; 0x80013a <PIMA_SendBlock+0xd>
     7b8:	e0 92 3b 01 	sts	0x013B, r14	; 0x80013b <PIMA_SendBlock+0xe>
			.TransactionID = 0x00000000,
			.Params        = {0x00000001},
		};

	/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     7bc:	f0 92 3c 01 	sts	0x013C, r15	; 0x80013c <PIMA_SendBlock+0xf>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     7c0:	4d d1       	rcall	.+666    	; 0xa5c <SImage_SendBlockHeader>
     7c2:	76 d1       	rcall	.+748    	; 0xab0 <SImage_ReceiveBlockHeader>
     7c4:	81 11       	cpse	r24, r1
     7c6:	3d c0       	rjmp	.+122    	; 0x842 <StillImageHost_Task+0x2fc>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7c8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <PIMA_ReceivedBlock+0x4>
     7cc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <PIMA_ReceivedBlock+0x5>
     7d0:	03 97       	sbiw	r24, 0x03	; 3
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <StillImageHost_Task+0x290>
     7d4:	44 c0       	rjmp	.+136    	; 0x85e <StillImageHost_Task+0x318>
     7d6:	a0 90 4b 01 	lds	r10, 0x014B	; 0x80014b <PIMA_ReceivedBlock+0x6>
     7da:	b0 90 4c 01 	lds	r11, 0x014C	; 0x80014c <PIMA_ReceivedBlock+0x7>
     7de:	31 e0       	ldi	r19, 0x01	; 1
     7e0:	a3 16       	cp	r10, r19
     7e2:	b1 04       	cpc	r11, r1
     7e4:	e1 f5       	brne	.+120    	; 0x85e <StillImageHost_Task+0x318>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Closing Session...\r\n"));
     7e6:	8c e0       	ldi	r24, 0x0C	; 12
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     7ee:	f4 01       	movw	r30, r8
     7f0:	11 92       	st	Z+, r1
     7f2:	3a 94       	dec	r3
     7f4:	e9 f7       	brne	.-6      	; 0x7f0 <StillImageHost_Task+0x2aa>
     7f6:	40 92 2d 01 	sts	0x012D, r4	; 0x80012d <PIMA_SendBlock>
     7fa:	50 92 2e 01 	sts	0x012E, r5	; 0x80012e <PIMA_SendBlock+0x1>
     7fe:	60 92 2f 01 	sts	0x012F, r6	; 0x80012f <PIMA_SendBlock+0x2>
     802:	70 92 30 01 	sts	0x0130, r7	; 0x800130 <PIMA_SendBlock+0x3>
     806:	b0 92 32 01 	sts	0x0132, r11	; 0x800132 <PIMA_SendBlock+0x5>
     80a:	a0 92 31 01 	sts	0x0131, r10	; 0x800131 <PIMA_SendBlock+0x4>
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	90 e1       	ldi	r25, 0x10	; 16
     812:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <PIMA_SendBlock+0x7>
     816:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <PIMA_SendBlock+0x6>
     81a:	c0 92 35 01 	sts	0x0135, r12	; 0x800135 <PIMA_SendBlock+0x8>
     81e:	d0 92 36 01 	sts	0x0136, r13	; 0x800136 <PIMA_SendBlock+0x9>
     822:	e0 92 37 01 	sts	0x0137, r14	; 0x800137 <PIMA_SendBlock+0xa>
     826:	f0 92 38 01 	sts	0x0138, r15	; 0x800138 <PIMA_SendBlock+0xb>
     82a:	c0 92 39 01 	sts	0x0139, r12	; 0x800139 <PIMA_SendBlock+0xc>
     82e:	d0 92 3a 01 	sts	0x013A, r13	; 0x80013a <PIMA_SendBlock+0xd>
     832:	e0 92 3b 01 	sts	0x013B, r14	; 0x80013b <PIMA_SendBlock+0xe>
			.TransactionID = 0x00000001,
			.Params        = {0x00000001},
		};

	/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     836:	f0 92 3c 01 	sts	0x013C, r15	; 0x80013c <PIMA_SendBlock+0xf>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     83a:	10 d1       	rcall	.+544    	; 0xa5c <SImage_SendBlockHeader>
     83c:	39 d1       	rcall	.+626    	; 0xab0 <SImage_ReceiveBlockHeader>
     83e:	88 23       	and	r24, r24
     840:	11 f0       	breq	.+4      	; 0x846 <StillImageHost_Task+0x300>
	{
		ShowCommandError(ErrorCode, false);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	0f c0       	rjmp	.+30     	; 0x864 <StillImageHost_Task+0x31e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     846:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <PIMA_ReceivedBlock+0x4>
     84a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <PIMA_ReceivedBlock+0x5>
     84e:	03 97       	sbiw	r24, 0x03	; 3
     850:	31 f4       	brne	.+12     	; 0x85e <StillImageHost_Task+0x318>
     852:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <PIMA_ReceivedBlock+0x6>
     856:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <PIMA_ReceivedBlock+0x7>
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	29 f0       	breq	.+10     	; 0x868 <StillImageHost_Task+0x322>
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <PIMA_ReceivedBlock+0x6>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Done.\r\n"));
     864:	57 de       	rcall	.-850    	; 0x514 <ShowCommandError>
     866:	06 c0       	rjmp	.+12     	; 0x874 <StillImageHost_Task+0x32e>
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	91 e0       	ldi	r25, 0x01	; 1

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     86c:	0e 94 3e 0c 	call	0x187c	; 0x187c <puts_P>
     870:	80 e6       	ldi	r24, 0x60	; 96
	USB_Host_SetDeviceConfiguration(0);
     872:	8f dd       	rcall	.-1250   	; 0x392 <LEDs_SetAllLEDs>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	70 d7       	rcall	.+3808   	; 0x1758 <USB_Host_SetDeviceConfiguration>
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	1e bf       	out	0x3e, r17	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0d bf       	out	0x3d, r16	; 61
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	1e bf       	out	0x3e, r17	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0d bf       	out	0x3d, r16	; 61
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	af 90       	pop	r10
     8a0:	9f 90       	pop	r9
     8a2:	8f 90       	pop	r8
     8a4:	7f 90       	pop	r7
     8a6:	6f 90       	pop	r6
     8a8:	5f 90       	pop	r5
     8aa:	4f 90       	pop	r4
     8ac:	3f 90       	pop	r3
     8ae:	08 95       	ret

000008b0 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     8b0:	75 dd       	rcall	.-1302   	; 0x39c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     8b2:	88 e2       	ldi	r24, 0x28	; 40
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	e2 d7       	rcall	.+4036   	; 0x187c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     8b8:	80 e1       	ldi	r24, 0x10	; 16
     8ba:	6b dd       	rcall	.-1322   	; 0x392 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		StillImageHost_Task();
     8bc:	78 94       	sei
     8be:	43 de       	rcall	.-890    	; 0x546 <StillImageHost_Task>

		USB_USBTask();
     8c0:	84 d7       	rcall	.+3848   	; 0x17ca <USB_USBTask>
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <main+0xe>

000008c4 <DComp_NextStillImageInterface>:
     8c4:	fc 01       	movw	r30, r24
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     8c6:	81 81       	ldd	r24, Z+1	; 0x01
     8c8:	84 30       	cpi	r24, 0x04	; 4
     8ca:	59 f4       	brne	.+22     	; 0x8e2 <DComp_NextStillImageInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     8cc:	85 81       	ldd	r24, Z+5	; 0x05
     8ce:	86 30       	cpi	r24, 0x06	; 6
     8d0:	41 f4       	brne	.+16     	; 0x8e2 <DComp_NextStillImageInterface+0x1e>
     8d2:	86 81       	ldd	r24, Z+6	; 0x06
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	29 f4       	brne	.+10     	; 0x8e2 <DComp_NextStillImageInterface+0x1e>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
     8d8:	87 81       	ldd	r24, Z+7	; 0x07
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	11 f4       	brne	.+4      	; 0x8e2 <DComp_NextStillImageInterface+0x1e>
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     8e2:	82 e0       	ldi	r24, 0x02	; 2
}
     8e4:	08 95       	ret

000008e6 <DComp_NextStillImageInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
     8e6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	95 30       	cpi	r25, 0x05	; 5
     8ec:	41 f4       	brne	.+16     	; 0x8fe <DComp_NextStillImageInterfaceDataEndpoint+0x18>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     8ee:	83 81       	ldd	r24, Z+3	; 0x03
     8f0:	83 70       	andi	r24, 0x03	; 3
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 97       	sbiw	r24, 0x02	; 2
     8f6:	02 97       	sbiw	r24, 0x02	; 2
     8f8:	30 f4       	brcc	.+12     	; 0x906 <DComp_NextStillImageInterfaceDataEndpoint+0x20>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
     8fe:	94 30       	cpi	r25, 0x04	; 4
     900:	11 f4       	brne	.+4      	; 0x906 <DComp_NextStillImageInterfaceDataEndpoint+0x20>
	{
		return DESCRIPTOR_SEARCH_Fail;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
     906:	82 e0       	ldi	r24, 0x02	; 2
}
     908:	08 95       	ret

0000090a <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	c4 50       	subi	r28, 0x04	; 4
     928:	d2 40       	sbci	r29, 0x02	; 2
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     934:	ae 01       	movw	r20, r28
     936:	4f 5f       	subi	r20, 0xFF	; 255
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	cd 5f       	subi	r28, 0xFD	; 253
     93c:	dd 4f       	sbci	r29, 0xFD	; 253
     93e:	59 83       	std	Y+1, r21	; 0x01
     940:	48 83       	st	Y, r20
     942:	c3 50       	subi	r28, 0x03	; 3
     944:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	32 e0       	ldi	r19, 0x02	; 2
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7d 4f       	sbci	r23, 0xFD	; 253
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	5a d5       	rcall	.+2740   	; 0x1408 <USB_Host_GetDeviceConfigDescriptor>
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	41 f0       	breq	.+16     	; 0x968 <ProcessConfigurationDescriptor+0x5e>
     958:	86 30       	cpi	r24, 0x06	; 6
     95a:	09 f4       	brne	.+2      	; 0x95e <ProcessConfigurationDescriptor+0x54>
     95c:	65 c0       	rjmp	.+202    	; 0xa28 <ProcessConfigurationDescriptor+0x11e>
     95e:	88 23       	and	r24, r24
     960:	31 f1       	breq	.+76     	; 0x9ae <ProcessConfigurationDescriptor+0xa4>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     962:	ff 24       	eor	r15, r15
     964:	f3 94       	inc	r15
     966:	65 c0       	rjmp	.+202    	; 0xa32 <ProcessConfigurationDescriptor+0x128>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     968:	22 e0       	ldi	r18, 0x02	; 2
     96a:	f2 2e       	mov	r15, r18
     96c:	62 c0       	rjmp	.+196    	; 0xa32 <ProcessConfigurationDescriptor+0x128>

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     96e:	43 e7       	ldi	r20, 0x73	; 115
     970:	54 e0       	ldi	r21, 0x04	; 4
     972:	be 01       	movw	r22, r28
     974:	6d 5f       	subi	r22, 0xFD	; 253
     976:	7d 4f       	sbci	r23, 0xFD	; 253
     978:	ce 01       	movw	r24, r28
     97a:	8f 5f       	subi	r24, 0xFF	; 255
     97c:	9d 4f       	sbci	r25, 0xFD	; 253
     97e:	9d d5       	rcall	.+2874   	; 0x14ba <USB_GetNextDescriptorComp>
     980:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     982:	81 11       	cpse	r24, r1
     984:	14 c0       	rjmp	.+40     	; 0x9ae <ProcessConfigurationDescriptor+0xa4>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     986:	cd 5f       	subi	r28, 0xFD	; 253
     988:	dd 4f       	sbci	r29, 0xFD	; 253
     98a:	e8 81       	ld	r30, Y
     98c:	f9 81       	ldd	r31, Y+1	; 0x01
     98e:	c3 50       	subi	r28, 0x03	; 3
     990:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     992:	82 81       	ldd	r24, Z+2	; 0x02
     994:	87 ff       	sbrs	r24, 7
     996:	23 c0       	rjmp	.+70     	; 0x9de <ProcessConfigurationDescriptor+0xd4>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     998:	83 81       	ldd	r24, Z+3	; 0x03
     99a:	83 70       	andi	r24, 0x03	; 3
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	09 f1       	breq	.+66     	; 0x9e2 <ProcessConfigurationDescriptor+0xd8>
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     9a0:	4f 01       	movw	r8, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     9a2:	81 14       	cp	r8, r1
     9a4:	91 04       	cpc	r9, r1
     9a6:	f9 f4       	brne	.+62     	; 0x9e6 <ProcessConfigurationDescriptor+0xdc>
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     9a8:	01 15       	cp	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	01 f7       	brne	.-64     	; 0x96e <ProcessConfigurationDescriptor+0x64>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     9ae:	42 e6       	ldi	r20, 0x62	; 98
     9b0:	54 e0       	ldi	r21, 0x04	; 4
     9b2:	be 01       	movw	r22, r28
     9b4:	6d 5f       	subi	r22, 0xFD	; 253
     9b6:	7d 4f       	sbci	r23, 0xFD	; 253
     9b8:	ce 01       	movw	r24, r28
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	9d 4f       	sbci	r25, 0xFD	; 253
     9be:	7d d5       	rcall	.+2810   	; 0x14ba <USB_GetNextDescriptorComp>
     9c0:	81 11       	cpse	r24, r1
     9c2:	35 c0       	rjmp	.+106    	; 0xa2e <ProcessConfigurationDescriptor+0x124>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     9c4:	cd 5f       	subi	r28, 0xFD	; 253
     9c6:	dd 4f       	sbci	r29, 0xFD	; 253
     9c8:	08 81       	ld	r16, Y
     9ca:	19 81       	ldd	r17, Y+1	; 0x01
     9cc:	c3 50       	subi	r28, 0x03	; 3
     9ce:	d2 40       	sbci	r29, 0x02	; 2

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
     9d0:	c1 2c       	mov	r12, r1
     9d2:	d1 2c       	mov	r13, r1
			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     9d4:	a1 2c       	mov	r10, r1
     9d6:	b1 2c       	mov	r11, r1

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     9d8:	81 2c       	mov	r8, r1
     9da:	91 2c       	mov	r9, r1
     9dc:	e5 cf       	rjmp	.-54     	; 0x9a8 <ProcessConfigurationDescriptor+0x9e>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     9de:	5f 01       	movw	r10, r30
     9e0:	e0 cf       	rjmp	.-64     	; 0x9a2 <ProcessConfigurationDescriptor+0x98>
		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
     9e2:	6f 01       	movw	r12, r30
     9e4:	de cf       	rjmp	.-68     	; 0x9a2 <ProcessConfigurationDescriptor+0x98>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     9e6:	a1 14       	cp	r10, r1
     9e8:	b1 04       	cpc	r11, r1
     9ea:	f1 f2       	breq	.-68     	; 0x9a8 <ProcessConfigurationDescriptor+0x9e>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     9ec:	f4 01       	movw	r30, r8
     9ee:	04 81       	ldd	r16, Z+4	; 0x04
     9f0:	15 81       	ldd	r17, Z+5	; 0x05
     9f2:	e1 2c       	mov	r14, r1
     9f4:	22 81       	ldd	r18, Z+2	; 0x02
     9f6:	40 e1       	ldi	r20, 0x10	; 16
     9f8:	62 e0       	ldi	r22, 0x02	; 2
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	9a d2       	rcall	.+1332   	; 0xf32 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     9fe:	f5 01       	movw	r30, r10
     a00:	04 81       	ldd	r16, Z+4	; 0x04
     a02:	15 81       	ldd	r17, Z+5	; 0x05
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	40 e2       	ldi	r20, 0x20	; 32
     a08:	62 e0       	ldi	r22, 0x02	; 2
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	92 d2       	rcall	.+1316   	; 0xf32 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     a0e:	f6 01       	movw	r30, r12
     a10:	04 81       	ldd	r16, Z+4	; 0x04
     a12:	15 81       	ldd	r17, Z+5	; 0x05
     a14:	22 81       	ldd	r18, Z+2	; 0x02
     a16:	40 e1       	ldi	r20, 0x10	; 16
     a18:	63 e0       	ldi	r22, 0x03	; 3
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	8a d2       	rcall	.+1300   	; 0xf32 <Pipe_ConfigurePipe>
					   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     a1e:	f6 01       	movw	r30, r12
     a20:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     a22:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <ProcessConfigurationDescriptor+0x128>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	f9 2e       	mov	r15, r25
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <ProcessConfigurationDescriptor+0x128>
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextStillImageInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	f8 2e       	mov	r15, r24
					   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     a32:	8f 2d       	mov	r24, r15
     a34:	cc 5f       	subi	r28, 0xFC	; 252
     a36:	dd 4f       	sbci	r29, 0xFD	; 253
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	08 95       	ret

00000a5c <SImage_SendBlockHeader>:

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     a62:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a66:	8f 7b       	andi	r24, 0xBF	; 191
     a68:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	6c e0       	ldi	r22, 0x0C	; 12
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	8d e2       	ldi	r24, 0x2D	; 45
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0b d4       	rcall	.+2070   	; 0x1290 <Pipe_Write_Stream_LE>
     a7a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <PIMA_SendBlock+0x4>
     a7e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <PIMA_SendBlock+0x5>
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	79 f4       	brne	.+30     	; 0xaa4 <SImage_SendBlockHeader+0x48>
     a86:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <PIMA_SendBlock>
     a8a:	6c 50       	subi	r22, 0x0C	; 12
     a8c:	31 f0       	breq	.+12     	; 0xa9a <SImage_SendBlockHeader+0x3e>
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	89 e3       	ldi	r24, 0x39	; 57
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	fb d3       	rcall	.+2038   	; 0x1290 <Pipe_Write_Stream_LE>
     a9a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a9e:	8b 77       	andi	r24, 0x7B	; 123
     aa0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     aa4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     aa8:	80 64       	ori	r24, 0x40	; 64
     aaa:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     aae:	08 95       	ret

00000ab0 <SImage_ReceiveBlockHeader>:
     ab0:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     ab4:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     abe:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ac2:	8f 7b       	andi	r24, 0xBF	; 191
     ac4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ac8:	80 e1       	ldi	r24, 0x10	; 16
     aca:	97 e2       	ldi	r25, 0x27	; 39
     acc:	62 e0       	ldi	r22, 0x02	; 2
     ace:	71 e0       	ldi	r23, 0x01	; 1
     ad0:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ad4:	40 fd       	sbrc	r20, 0
     ad6:	3f c0       	rjmp	.+126    	; 0xb56 <SImage_ReceiveBlockHeader+0xa6>
     ad8:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     adc:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     ae0:	24 17       	cp	r18, r20
     ae2:	35 07       	cpc	r19, r21
     ae4:	19 f0       	breq	.+6      	; 0xaec <SImage_ReceiveBlockHeader+0x3c>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	09 f4       	brne	.+2      	; 0xaec <SImage_ReceiveBlockHeader+0x3c>
     aea:	58 c0       	rjmp	.+176    	; 0xb9c <SImage_ReceiveBlockHeader+0xec>
     aec:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     af0:	20 64       	ori	r18, 0x40	; 64
     af2:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     af6:	60 93 a7 00 	sts	0x00A7, r22	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     afa:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     afe:	2f 7b       	andi	r18, 0xBF	; 191
     b00:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b04:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b08:	21 fd       	sbrc	r18, 1
     b0a:	10 c0       	rjmp	.+32     	; 0xb2c <SImage_ReceiveBlockHeader+0x7c>
     b0c:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b10:	20 64       	ori	r18, 0x40	; 64
     b12:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b16:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     b1a:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b1e:	2f 7b       	andi	r18, 0xBF	; 191
     b20:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b24:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b28:	21 ff       	sbrs	r18, 1
     b2a:	0f c0       	rjmp	.+30     	; 0xb4a <SImage_ReceiveBlockHeader+0x9a>
     b2c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     b30:	8f 70       	andi	r24, 0x0F	; 15
     b32:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     b36:	90 73       	andi	r25, 0x30	; 48
     b38:	90 31       	cpi	r25, 0x10	; 16
     b3a:	11 f0       	breq	.+4      	; 0xb40 <SImage_ReceiveBlockHeader+0x90>
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <SImage_ReceiveBlockHeader+0x92>
     b40:	90 e8       	ldi	r25, 0x80	; 128
     b42:	89 2b       	or	r24, r25
     b44:	30 d6       	rcall	.+3168   	; 0x17a6 <USB_Host_ClearEndpointStall>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	08 95       	ret
     b4a:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <USB_HostState>
     b4e:	21 30       	cpi	r18, 0x01	; 1
     b50:	39 f1       	breq	.+78     	; 0xba0 <SImage_ReceiveBlockHeader+0xf0>
     b52:	9a 01       	movw	r18, r20
     b54:	bd cf       	rjmp	.-134    	; 0xad0 <SImage_ReceiveBlockHeader+0x20>
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	6c e0       	ldi	r22, 0x0C	; 12
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	85 e4       	ldi	r24, 0x45	; 69
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	e5 d3       	rcall	.+1994   	; 0x132e <Pipe_Read_Stream_LE>
     b64:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <PIMA_ReceivedBlock+0x4>
     b68:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <PIMA_ReceivedBlock+0x5>
     b6c:	03 97       	sbiw	r24, 0x03	; 3
     b6e:	79 f4       	brne	.+30     	; 0xb8e <SImage_ReceiveBlockHeader+0xde>
     b70:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <PIMA_ReceivedBlock>
     b74:	6c 50       	subi	r22, 0x0C	; 12
     b76:	31 f0       	breq	.+12     	; 0xb84 <SImage_ReceiveBlockHeader+0xd4>
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	81 e5       	ldi	r24, 0x51	; 81
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	d5 d3       	rcall	.+1962   	; 0x132e <Pipe_Read_Stream_LE>
     b84:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b88:	8e 77       	andi	r24, 0x7E	; 126
     b8a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     b8e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b92:	80 64       	ori	r24, 0x40	; 64
     b94:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	08 95       	ret
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	08 95       	ret

00000ba4 <SImage_ReadData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReadData(void* const Buffer,
                        const uint16_t Bytes)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     bae:	c9 ea       	ldi	r28, 0xA9	; 169
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	28 81       	ld	r18, Y
     bb4:	2f 7b       	andi	r18, 0xBF	; 191
     bb6:	28 83       	st	Y, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	b8 d3       	rcall	.+1904   	; 0x132e <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bbe:	98 81       	ld	r25, Y
     bc0:	90 64       	ori	r25, 0x40	; 64
     bc2:	98 83       	st	Y, r25

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     bca:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     bce:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bd0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bd4:	9d 7f       	andi	r25, 0xFD	; 253
     bd6:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     bda:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     bde:	92 60       	ori	r25, 0x02	; 2
     be0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     be4:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     be8:	91 fd       	sbrc	r25, 1
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bec:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     bf0:	91 60       	ori	r25, 0x01	; 1
     bf2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     bf6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bfa:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bfe:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c00:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c04:	2f 7d       	andi	r18, 0xDF	; 223
     c06:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c0a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c0e:	2f 7d       	andi	r18, 0xDF	; 223
     c10:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c14:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c16:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c1a:	35 ff       	sbrs	r19, 5
     c1c:	0b c0       	rjmp	.+22     	; 0xc34 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c1e:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c22:	2f 7d       	andi	r18, 0xDF	; 223
     c24:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c28:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c2c:	2d 7f       	andi	r18, 0xFD	; 253
     c2e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c32:	08 c0       	rjmp	.+16     	; 0xc44 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c34:	ef ec       	ldi	r30, 0xCF	; 207
     c36:	f7 e0       	ldi	r31, 0x07	; 7
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <USB_Host_ResetDevice+0x6e>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <USB_Host_ResetDevice+0x74>
     c3e:	00 00       	nop
     c40:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     c42:	49 f7       	brne	.-46     	; 0xc16 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     c44:	99 23       	and	r25, r25
     c46:	29 f0       	breq	.+10     	; 0xc52 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     c48:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c4c:	90 62       	ori	r25, 0x20	; 32
     c4e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     c52:	81 11       	cpse	r24, r1
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c56:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     c5a:	8e 7f       	andi	r24, 0xFE	; 254
     c5c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c60:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c64:	82 60       	ori	r24, 0x02	; 2
     c66:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c6a:	08 95       	ret

00000c6c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c6c:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     c70:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c72:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c76:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c78:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c7c:	3f 7d       	andi	r19, 0xDF	; 223
     c7e:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c82:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c86:	3f 7d       	andi	r19, 0xDF	; 223
     c88:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c8c:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     c90:	31 60       	ori	r19, 0x01	; 1
     c92:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     c96:	88 23       	and	r24, r24
     c98:	39 f1       	breq	.+78     	; 0xce8 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c9a:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c9e:	35 ff       	sbrs	r19, 5
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ca2:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ca6:	3f 7d       	andi	r19, 0xDF	; 223
     ca8:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     cac:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     cae:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <USB_HostState>
     cb2:	31 30       	cpi	r19, 0x01	; 1
     cb4:	c1 f0       	breq	.+48     	; 0xce6 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     cb6:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     cba:	34 ff       	sbrs	r19, 4
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     cbe:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     cc2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     cc6:	8f 7e       	andi	r24, 0xEF	; 239
     cc8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     ccc:	82 e0       	ldi	r24, 0x02	; 2

			break;
     cce:	0c c0       	rjmp	.+24     	; 0xce8 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cd0:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     cd4:	31 ff       	sbrs	r19, 1
     cd6:	df cf       	rjmp	.-66     	; 0xc96 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     cd8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     cdc:	8d 7f       	andi	r24, 0xFD	; 253
     cde:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     ce2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     ce6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     ce8:	21 11       	cpse	r18, r1
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cec:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     cf0:	2e 7f       	andi	r18, 0xFE	; 254
     cf2:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     cf6:	99 23       	and	r25, r25
     cf8:	29 f0       	breq	.+10     	; 0xd04 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     cfa:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     cfe:	90 62       	ori	r25, 0x20	; 32
     d00:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     d04:	08 95       	ret

00000d06 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     d06:	ef 92       	push	r14
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	28 97       	sbiw	r28, 0x08	; 8
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     d20:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <USB_HostState>
     d24:	8e 2f       	mov	r24, r30
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	8a 30       	cpi	r24, 0x0A	; 10
     d2a:	91 05       	cpc	r25, r1
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <USB_Host_ProcessNextHostState+0x2a>
     d2e:	f5 c0       	rjmp	.+490    	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
     d30:	fc 01       	movw	r30, r24
     d32:	e4 5b       	subi	r30, 0xB4	; 180
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	72 c5       	rjmp	.+2788   	; 0x181c <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     d38:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     d3c:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     d40:	01 15       	cp	r16, r1
     d42:	11 05       	cpc	r17, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <USB_Host_ProcessNextHostState+0x42>
     d46:	e9 c0       	rjmp	.+466    	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 df       	rcall	.-224    	; 0xc6c <USB_Host_WaitMS>
     d4c:	88 23       	and	r24, r24
     d4e:	31 f0       	breq	.+12     	; 0xd5c <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     d50:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
     d54:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     d58:	91 e0       	ldi	r25, 0x01	; 1
					break;
     d5a:	d1 c0       	rjmp	.+418    	; 0xefe <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     d5c:	01 50       	subi	r16, 0x01	; 1
     d5e:	11 09       	sbc	r17, r1
     d60:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <WaitMSRemaining.2935+0x1>
     d64:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <WaitMSRemaining.2935>
     d68:	01 2b       	or	r16, r17
     d6a:	09 f0       	breq	.+2      	; 0xd6e <USB_Host_ProcessNextHostState+0x68>
     d6c:	d6 c0       	rjmp	.+428    	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     d6e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     d72:	07 c0       	rjmp	.+14     	; 0xd82 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     d74:	88 ee       	ldi	r24, 0xE8	; 232
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     d7c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_HostState>
			break;
     d86:	c9 c0       	rjmp	.+402    	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     d88:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     d8c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     d90:	9c 01       	movw	r18, r24
     d92:	21 50       	subi	r18, 0x01	; 1
     d94:	31 09       	sbc	r19, r1
     d96:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <WaitMSRemaining.2935+0x1>
     d9a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <WaitMSRemaining.2935>
     d9e:	89 2b       	or	r24, r25
     da0:	39 f0       	breq	.+14     	; 0xdb0 <USB_Host_ProcessNextHostState+0xaa>
     da2:	8f ec       	ldi	r24, 0xCF	; 207
     da4:	97 e0       	ldi	r25, 0x07	; 7
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <USB_Host_ProcessNextHostState+0xa0>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <USB_Host_ProcessNextHostState+0xa6>
     dac:	00 00       	nop
     dae:	b5 c0       	rjmp	.+362    	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     db0:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     db2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     db6:	80 61       	ori	r24, 0x10	; 16
     db8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     dbc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     dc0:	8b 7f       	andi	r24, 0xFB	; 251
     dc2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     dc6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     dd0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	d2 cf       	rjmp	.-92     	; 0xd82 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     dde:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     de2:	80 ff       	sbrs	r24, 0
     de4:	9a c0       	rjmp	.+308    	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     de6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     dea:	8e 7f       	andi	r24, 0xFE	; 254
     dec:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     df0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     dfa:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     dfe:	8d 7f       	andi	r24, 0xFD	; 253
     e00:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     e04:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e0e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     e18:	e8 d0       	rcall	.+464    	; 0xfea <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     e1a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <USB_HostState>
     e1e:	84 e6       	ldi	r24, 0x64	; 100
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     e26:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     e2a:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     e2c:	5c c0       	rjmp	.+184    	; 0xee6 <USB_Host_ProcessNextHostState+0x1e0>
     e2e:	cd de       	rcall	.-614    	; 0xbca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     e30:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <USB_HostState>
     e34:	88 ec       	ldi	r24, 0xC8	; 200
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     e3c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     e40:	86 e0       	ldi	r24, 0x06	; 6
     e42:	51 c0       	rjmp	.+162    	; 0xee6 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     e44:	e1 2c       	mov	r14, r1
     e46:	00 e4       	ldi	r16, 0x40	; 64
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	6f d0       	rcall	.+222    	; 0xf32 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     e54:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     e58:	87 fd       	sbrc	r24, 7
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     e5c:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	4e c0       	rjmp	.+156    	; 0xefe <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     e62:	87 e0       	ldi	r24, 0x07	; 7
     e64:	8e cf       	rjmp	.-228    	; 0xd82 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	e1 e0       	ldi	r30, 0x01	; 1
     e6a:	f1 e0       	ldi	r31, 0x01	; 1
     e6c:	af e5       	ldi	r26, 0x5F	; 95
     e6e:	b1 e0       	ldi	r27, 0x01	; 1
     e70:	01 90       	ld	r0, Z+
     e72:	0d 92       	st	X+, r0
     e74:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     e76:	e1 f7       	brne	.-8      	; 0xe70 <USB_Host_ProcessNextHostState+0x16a>
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	77 d3       	rcall	.+1774   	; 0x156c <USB_Host_SendControlRequest>
     e7e:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     e80:	3d c0       	rjmp	.+122    	; 0xefc <USB_Host_ProcessNextHostState+0x1f6>
     e82:	88 85       	ldd	r24, Y+8	; 0x08
     e84:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     e88:	a0 de       	rcall	.-704    	; 0xbca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     e8a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <USB_HostState>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     e96:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     e9a:	88 e0       	ldi	r24, 0x08	; 8
     e9c:	24 c0       	rjmp	.+72     	; 0xee6 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     e9e:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	e1 2c       	mov	r14, r1
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	41 d0       	rcall	.+130    	; 0xf32 <Pipe_ConfigurePipe>
     eb0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     eb4:	87 ff       	sbrs	r24, 7
     eb6:	d2 cf       	rjmp	.-92     	; 0xe5c <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     eb8:	88 e0       	ldi	r24, 0x08	; 8
     eba:	e9 e0       	ldi	r30, 0x09	; 9
     ebc:	f1 e0       	ldi	r31, 0x01	; 1
     ebe:	af e5       	ldi	r26, 0x5F	; 95
     ec0:	b1 e0       	ldi	r27, 0x01	; 1
     ec2:	01 90       	ld	r0, Z+
     ec4:	0d 92       	st	X+, r0
     ec6:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <USB_Host_ProcessNextHostState+0x1bc>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	4e d3       	rcall	.+1692   	; 0x156c <USB_Host_SendControlRequest>
     ed0:	81 11       	cpse	r24, r1
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ed4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <USB_HostState>
     ed8:	84 e6       	ldi	r24, 0x64	; 100
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     ee0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     ee4:	89 e0       	ldi	r24, 0x09	; 9
     ee6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     eea:	17 c0       	rjmp	.+46     	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     ef2:	8a e0       	ldi	r24, 0x0A	; 10
     ef4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     ef8:	a2 da       	rcall	.-2748   	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     f02:	21 30       	cpi	r18, 0x01	; 1
     f04:	51 f0       	breq	.+20     	; 0xf1a <USB_Host_ProcessNextHostState+0x214>
     f06:	68 2f       	mov	r22, r24
     f08:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f0a:	db da       	rcall	.-2634   	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationFailed>
     f0c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     f16:	8d da       	rcall	.-2790   	; 0x432 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f18:	c2 d0       	rcall	.+388    	; 0x109e <USB_ResetInterface>
     f1a:	28 96       	adiw	r28, 0x08	; 8
	}
}
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ef 90       	pop	r14
     f30:	08 95       	ret

00000f32 <Pipe_ConfigurePipe>:
     f32:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	2f 70       	andi	r18, 0x0F	; 15
     f3a:	42 2b       	or	r20, r18
     f3c:	90 e4       	ldi	r25, 0x40	; 64
     f3e:	69 9f       	mul	r22, r25
     f40:	b0 01       	movw	r22, r0
     f42:	11 24       	eor	r1, r1
     f44:	64 2b       	or	r22, r20
     f46:	38 2f       	mov	r19, r24
     f48:	2e 2d       	mov	r18, r14
     f4a:	22 60       	ori	r18, 0x02	; 2
     f4c:	37 30       	cpi	r19, 0x07	; 7
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <Pipe_ConfigurePipe+0x20>
     f50:	45 c0       	rjmp	.+138    	; 0xfdc <Pipe_ConfigurePipe+0xaa>
     f52:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     f56:	38 13       	cpse	r19, r24
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <Pipe_ConfigurePipe+0x4e>
     f5a:	48 e0       	ldi	r20, 0x08	; 8
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	40 17       	cp	r20, r16
     f62:	51 07       	cpc	r21, r17
     f64:	38 f0       	brcs	.+14     	; 0xf74 <Pipe_ConfigurePipe+0x42>
     f66:	92 95       	swap	r25
     f68:	90 7f       	andi	r25, 0xF0	; 240
     f6a:	92 2b       	or	r25, r18
     f6c:	e6 2f       	mov	r30, r22
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <Pipe_ConfigurePipe+0x5e>
     f74:	95 30       	cpi	r25, 0x05	; 5
     f76:	b9 f3       	breq	.-18     	; 0xf66 <Pipe_ConfigurePipe+0x34>
     f78:	9f 5f       	subi	r25, 0xFF	; 255
     f7a:	44 0f       	add	r20, r20
     f7c:	55 1f       	adc	r21, r21
     f7e:	f0 cf       	rjmp	.-32     	; 0xf60 <Pipe_ConfigurePipe+0x2e>
     f80:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f84:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     f88:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     f8c:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     f90:	91 fd       	sbrc	r25, 1
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <Pipe_ConfigurePipe+0x66>
     f94:	3f 5f       	subi	r19, 0xFF	; 255
     f96:	da cf       	rjmp	.-76     	; 0xf4c <Pipe_ConfigurePipe+0x1a>
     f98:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f9c:	4e 7f       	andi	r20, 0xFE	; 254
     f9e:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fa2:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     fa6:	4d 7f       	andi	r20, 0xFD	; 253
     fa8:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     fac:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fb0:	41 60       	ori	r20, 0x01	; 1
     fb2:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fb6:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fba:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     fbe:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     fc2:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     fc6:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fca:	90 62       	ori	r25, 0x20	; 32
     fcc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fd0:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     fd4:	97 fd       	sbrc	r25, 7
     fd6:	de cf       	rjmp	.-68     	; 0xf94 <Pipe_ConfigurePipe+0x62>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <Pipe_ConfigurePipe+0xb0>
     fdc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ef 90       	pop	r14
     fe8:	08 95       	ret

00000fea <Pipe_ClearPipes>:
     fea:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     ff4:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     ff8:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ffc:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1000:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1004:	9e 7f       	andi	r25, 0xFE	; 254
    1006:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	87 30       	cpi	r24, 0x07	; 7
    100e:	81 f7       	brne	.-32     	; 0xff0 <Pipe_ClearPipes+0x6>
    1010:	08 95       	ret

00001012 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1012:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1016:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    101a:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    101c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1020:	90 73       	andi	r25, 0x30	; 48
    1022:	90 31       	cpi	r25, 0x10	; 16
    1024:	29 f4       	brne	.+10     	; 0x1030 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1026:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
    102a:	90 ff       	sbrs	r25, 0
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <Pipe_WaitUntilReady+0x26>
    102e:	19 c0       	rjmp	.+50     	; 0x1062 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1030:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1034:	92 fd       	sbrc	r25, 2
    1036:	15 c0       	rjmp	.+42     	; 0x1062 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1038:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    103c:	91 fd       	sbrc	r25, 1
    103e:	13 c0       	rjmp	.+38     	; 0x1066 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1040:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <USB_HostState>
    1044:	91 30       	cpi	r25, 0x01	; 1
    1046:	89 f0       	breq	.+34     	; 0x106a <Pipe_WaitUntilReady+0x58>
    1048:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    104c:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1050:	42 17       	cp	r20, r18
    1052:	53 07       	cpc	r21, r19
    1054:	19 f3       	breq	.-58     	; 0x101c <Pipe_WaitUntilReady+0xa>
    1056:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1058:	11 f0       	breq	.+4      	; 0x105e <Pipe_WaitUntilReady+0x4c>
    105a:	a9 01       	movw	r20, r18
    105c:	df cf       	rjmp	.-66     	; 0x101c <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    106a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    106c:	08 95       	ret

0000106e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    106e:	70 d0       	rcall	.+224    	; 0x1150 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1070:	77 d0       	rcall	.+238    	; 0x1160 <USB_INT_ClearAllInterrupts>
    1072:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	80 83       	st	Z, r24
    107c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8f 77       	andi	r24, 0x7F	; 127
    1084:	80 83       	st	Z, r24
    1086:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1088:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	8c 91       	ld	r24, X
    108e:	8e 7f       	andi	r24, 0xFE	; 254
    1090:	8c 93       	st	X, r24
    1092:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1094:	8f 7e       	andi	r24, 0xEF	; 239
    1096:	80 83       	st	Z, r24
    1098:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    109c:	08 95       	ret

0000109e <USB_ResetInterface>:
    109e:	58 d0       	rcall	.+176    	; 0x1150 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    10a0:	5f d0       	rcall	.+190    	; 0x1160 <USB_INT_ClearAllInterrupts>
    10a2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    10ac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    10b6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    10ba:	8f 7d       	andi	r24, 0xDF	; 223
    10bc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    10c0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    10ca:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10cc:	89 bd       	out	0x29, r24	; 41
    10ce:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10d0:	89 bd       	out	0x29, r24	; 41
    10d2:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    10d4:	00 fe       	sbrs	r0, 0
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <USB_ResetInterface+0x34>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    10da:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_HostState>
    10de:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
    10e2:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    10e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    10e8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    10ec:	80 64       	ori	r24, 0x40	; 64
    10ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    10f2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    10fc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    1106:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
    110a:	8f 7e       	andi	r24, 0xEF	; 239
    110c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1110:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
    1112:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1114:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1118:	81 60       	ori	r24, 0x01	; 1
    111a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    111e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1122:	84 60       	ori	r24, 0x04	; 4
    1124:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    1128:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    112c:	8e 7f       	andi	r24, 0xFE	; 254
    112e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1132:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    113c:	08 95       	ret

0000113e <USB_Init>:
    113e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	81 60       	ori	r24, 0x01	; 1
    1146:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <USB_IsInitialized>

	USB_ResetInterface();
    114e:	a7 cf       	rjmp	.-178    	; 0x109e <USB_ResetInterface>

00001150 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1150:	e8 ed       	ldi	r30, 0xD8	; 216
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8c 7f       	andi	r24, 0xFC	; 252
    1158:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    115a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    115e:	08 95       	ret

00001160 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1160:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1164:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    1168:	08 95       	ret

0000116a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	0b b6       	in	r0, 0x3b	; 59
    1176:	0f 92       	push	r0
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1190:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1194:	85 ff       	sbrs	r24, 5
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1198:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    119c:	85 ff       	sbrs	r24, 5
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11a0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    11a4:	8f 7d       	andi	r24, 0xDF	; 223
    11a6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    11aa:	b9 d1       	rcall	.+882    	; 0x151e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    11ac:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    11b0:	81 ff       	sbrs	r24, 1
    11b2:	15 c0       	rjmp	.+42     	; 0x11de <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    11b4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    11b8:	81 ff       	sbrs	r24, 1
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    11bc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    11c0:	8d 7f       	andi	r24, 0xFD	; 253
    11c2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    11c6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    11d0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    11d4:	8d 7f       	andi	r24, 0xFD	; 253
    11d6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
    11da:	2b d9       	rcall	.-3498   	; 0x432 <EVENT_USB_Host_DeviceUnattached>
    11dc:	60 df       	rcall	.-320    	; 0x109e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    11de:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    11e2:	81 ff       	sbrs	r24, 1
    11e4:	15 c0       	rjmp	.+42     	; 0x1210 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    11e6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
    11ea:	81 ff       	sbrs	r24, 1
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    11ee:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    11f2:	8d 7f       	andi	r24, 0xFD	; 253
    11f4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    11f8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    11fa:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	4c d9       	rcall	.-3432   	; 0x4a0 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1208:	14 d9       	rcall	.-3544   	; 0x432 <EVENT_USB_Host_DeviceUnattached>
    120a:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
    120c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_HostState>
    1210:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1214:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1216:	17 c0       	rjmp	.+46     	; 0x1246 <__vector_10+0xdc>
    1218:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    121c:	80 ff       	sbrs	r24, 0
    121e:	13 c0       	rjmp	.+38     	; 0x1246 <__vector_10+0xdc>
    1220:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1224:	8e 7f       	andi	r24, 0xFE	; 254
    1226:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
    122a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    122e:	8e 7f       	andi	r24, 0xFE	; 254
    1230:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1234:	f8 d8       	rcall	.-3600   	; 0x426 <EVENT_USB_Host_DeviceAttached>
    1236:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1240:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1242:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_HostState>
    1246:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    124a:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    124c:	0e c0       	rjmp	.+28     	; 0x126a <__vector_10+0x100>
    124e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1252:	82 ff       	sbrs	r24, 2
    1254:	0a c0       	rjmp	.+20     	; 0x126a <__vector_10+0x100>
    1256:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    125a:	8b 7f       	andi	r24, 0xFB	; 251
    125c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	2e d9       	rcall	.-3492   	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1266:	e5 d8       	rcall	.-3638   	; 0x432 <EVENT_USB_Host_DeviceUnattached>
    1268:	1a df       	rcall	.-460    	; 0x109e <USB_ResetInterface>

		USB_ResetInterface();
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0b be       	out	0x3b, r0	; 59
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <Pipe_Write_Stream_LE>:
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	8b 01       	movw	r16, r22
    12a4:	7a 01       	movw	r14, r20
    12a6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    12aa:	8f 7c       	andi	r24, 0xCF	; 207
    12ac:	80 62       	ori	r24, 0x20	; 32
    12ae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    12b2:	af de       	rcall	.-674    	; 0x1012 <Pipe_WaitUntilReady>
    12b4:	81 11       	cpse	r24, r1
    12b6:	32 c0       	rjmp	.+100    	; 0x131c <Pipe_Write_Stream_LE+0x8c>
    12b8:	e1 14       	cp	r14, r1
    12ba:	f1 04       	cpc	r15, r1
    12bc:	39 f0       	breq	.+14     	; 0x12cc <Pipe_Write_Stream_LE+0x3c>
    12be:	f7 01       	movw	r30, r14
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	08 1b       	sub	r16, r24
    12c6:	19 0b       	sbc	r17, r25
    12c8:	c8 0f       	add	r28, r24
    12ca:	d9 1f       	adc	r29, r25
    12cc:	c1 2c       	mov	r12, r1
    12ce:	d1 2c       	mov	r13, r1
    12d0:	01 15       	cp	r16, r1
    12d2:	11 05       	cpc	r17, r1
    12d4:	11 f1       	breq	.+68     	; 0x131a <Pipe_Write_Stream_LE+0x8a>
    12d6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12da:	85 fd       	sbrc	r24, 5
    12dc:	15 c0       	rjmp	.+42     	; 0x1308 <Pipe_Write_Stream_LE+0x78>
    12de:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12e2:	8b 77       	andi	r24, 0x7B	; 123
    12e4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12e8:	e1 14       	cp	r14, r1
    12ea:	f1 04       	cpc	r15, r1
    12ec:	49 f0       	breq	.+18     	; 0x1300 <Pipe_Write_Stream_LE+0x70>
    12ee:	f7 01       	movw	r30, r14
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	c8 0e       	add	r12, r24
    12f6:	d9 1e       	adc	r13, r25
    12f8:	d1 82       	std	Z+1, r13	; 0x01
    12fa:	c0 82       	st	Z, r12
    12fc:	84 e0       	ldi	r24, 0x04	; 4
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <Pipe_Write_Stream_LE+0x8c>
    1300:	88 de       	rcall	.-752    	; 0x1012 <Pipe_WaitUntilReady>
    1302:	88 23       	and	r24, r24
    1304:	29 f3       	breq	.-54     	; 0x12d0 <Pipe_Write_Stream_LE+0x40>
    1306:	0a c0       	rjmp	.+20     	; 0x131c <Pipe_Write_Stream_LE+0x8c>
    1308:	89 91       	ld	r24, Y+
    130a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    130e:	01 50       	subi	r16, 0x01	; 1
    1310:	11 09       	sbc	r17, r1
    1312:	ff ef       	ldi	r31, 0xFF	; 255
    1314:	cf 1a       	sub	r12, r31
    1316:	df 0a       	sbc	r13, r31
    1318:	db cf       	rjmp	.-74     	; 0x12d0 <Pipe_Write_Stream_LE+0x40>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	08 95       	ret

0000132e <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	8b 01       	movw	r16, r22
    1342:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1344:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1348:	8f 7c       	andi	r24, 0xCF	; 207
    134a:	80 61       	ori	r24, 0x10	; 16
    134c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1350:	60 de       	rcall	.-832    	; 0x1012 <Pipe_WaitUntilReady>
    1352:	81 11       	cpse	r24, r1
    1354:	32 c0       	rjmp	.+100    	; 0x13ba <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1356:	e1 14       	cp	r14, r1
    1358:	f1 04       	cpc	r15, r1
    135a:	39 f0       	breq	.+14     	; 0x136a <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
    135c:	f7 01       	movw	r30, r14
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	08 1b       	sub	r16, r24
    1364:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1366:	c8 0f       	add	r28, r24
    1368:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    136a:	c1 2c       	mov	r12, r1
    136c:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    136e:	01 15       	cp	r16, r1
    1370:	11 05       	cpc	r17, r1
    1372:	11 f1       	breq	.+68     	; 0x13b8 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1374:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1378:	85 fd       	sbrc	r24, 5
    137a:	15 c0       	rjmp	.+42     	; 0x13a6 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    137c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1380:	8e 77       	andi	r24, 0x7E	; 126
    1382:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1386:	e1 14       	cp	r14, r1
    1388:	f1 04       	cpc	r15, r1
    138a:	49 f0       	breq	.+18     	; 0x139e <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    138c:	f7 01       	movw	r30, r14
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	c8 0e       	add	r12, r24
    1394:	d9 1e       	adc	r13, r25
    1396:	d1 82       	std	Z+1, r13	; 0x01
    1398:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    139a:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    139c:	0e c0       	rjmp	.+28     	; 0x13ba <Pipe_Read_Stream_LE+0x8c>
    139e:	39 de       	rcall	.-910    	; 0x1012 <Pipe_WaitUntilReady>
    13a0:	88 23       	and	r24, r24
    13a2:	29 f3       	breq	.-54     	; 0x136e <Pipe_Read_Stream_LE+0x40>
    13a4:	0a c0       	rjmp	.+20     	; 0x13ba <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13a6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    13aa:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    13ac:	01 50       	subi	r16, 0x01	; 1
    13ae:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    13b0:	ff ef       	ldi	r31, 0xFF	; 255
    13b2:	cf 1a       	sub	r12, r31
    13b4:	df 0a       	sbc	r13, r31
    13b6:	db cf       	rjmp	.-74     	; 0x136e <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	08 95       	ret

000013cc <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	dc 01       	movw	r26, r24
    13d2:	eb 01       	movw	r28, r22
    13d4:	e8 81       	ld	r30, Y
    13d6:	f9 81       	ldd	r31, Y+1	; 0x01
    13d8:	20 81       	ld	r18, Z
    13da:	8d 91       	ld	r24, X+
    13dc:	9c 91       	ld	r25, X
    13de:	11 97       	sbiw	r26, 0x01	; 1
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	82 17       	cp	r24, r18
    13e4:	93 07       	cpc	r25, r19
    13e6:	08 f4       	brcc	.+2      	; 0x13ea <USB_GetNextDescriptor+0x1e>
    13e8:	9c 01       	movw	r18, r24
    13ea:	e2 0f       	add	r30, r18
    13ec:	f3 1f       	adc	r31, r19
    13ee:	eb 01       	movw	r28, r22
    13f0:	f9 83       	std	Y+1, r31	; 0x01
    13f2:	e8 83       	st	Y, r30
    13f4:	8d 91       	ld	r24, X+
    13f6:	9c 91       	ld	r25, X
    13f8:	11 97       	sbiw	r26, 0x01	; 1
    13fa:	82 1b       	sub	r24, r18
    13fc:	93 0b       	sbc	r25, r19
    13fe:	8d 93       	st	X+, r24
    1400:	9c 93       	st	X, r25
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <USB_Host_GetDeviceConfigDescriptor>:
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	29 97       	sbiw	r28, 0x09	; 9
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	6b 01       	movw	r12, r22
    142a:	8a 01       	movw	r16, r20
    142c:	79 01       	movw	r14, r18
    142e:	90 e8       	ldi	r25, 0x80	; 128
    1430:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <USB_ControlRequest>
    1434:	96 e0       	ldi	r25, 0x06	; 6
    1436:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <USB_ControlRequest+0x1>
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	92 60       	ori	r25, 0x02	; 2
    1440:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <USB_ControlRequest+0x3>
    1444:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <USB_ControlRequest+0x2>
    1448:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <USB_ControlRequest+0x5>
    144c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <USB_ControlRequest+0x4>
    1450:	89 e0       	ldi	r24, 0x09	; 9
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <USB_ControlRequest+0x7>
    1458:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_ControlRequest+0x6>
    145c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	83 d0       	rcall	.+262    	; 0x156c <USB_Host_SendControlRequest>
    1466:	81 11       	cpse	r24, r1
    1468:	19 c0       	rjmp	.+50     	; 0x149c <USB_Host_GetDeviceConfigDescriptor+0x94>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	f6 01       	movw	r30, r12
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	e8 16       	cp	r14, r24
    1476:	f9 06       	cpc	r15, r25
    1478:	70 f0       	brcs	.+28     	; 0x1496 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    147a:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <USB_ControlRequest+0x7>
    147e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_ControlRequest+0x6>
    1482:	c8 01       	movw	r24, r16
    1484:	73 d0       	rcall	.+230    	; 0x156c <USB_Host_SendControlRequest>
    1486:	81 11       	cpse	r24, r1
    1488:	09 c0       	rjmp	.+18     	; 0x149c <USB_Host_GetDeviceConfigDescriptor+0x94>
    148a:	f8 01       	movw	r30, r16
    148c:	81 81       	ldd	r24, Z+1	; 0x01
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	21 f4       	brne	.+8      	; 0x149a <USB_Host_GetDeviceConfigDescriptor+0x92>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	03 c0       	rjmp	.+6      	; 0x149c <USB_Host_GetDeviceConfigDescriptor+0x94>
    1496:	85 e0       	ldi	r24, 0x05	; 5
    1498:	01 c0       	rjmp	.+2      	; 0x149c <USB_Host_GetDeviceConfigDescriptor+0x94>
    149a:	86 e0       	ldi	r24, 0x06	; 6
    149c:	29 96       	adiw	r28, 0x09	; 9
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	08 95       	ret

000014ba <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    14ba:	af 92       	push	r10
    14bc:	bf 92       	push	r11
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	8c 01       	movw	r16, r24
    14d0:	eb 01       	movw	r28, r22
    14d2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    14d4:	f8 01       	movw	r30, r16
    14d6:	e0 80       	ld	r14, Z
    14d8:	f1 80       	ldd	r15, Z+1	; 0x01
    14da:	e1 14       	cp	r14, r1
    14dc:	f1 04       	cpc	r15, r1
    14de:	99 f0       	breq	.+38     	; 0x1506 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    14e0:	a8 80       	ld	r10, Y
    14e2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    14e4:	be 01       	movw	r22, r28
    14e6:	c8 01       	movw	r24, r16
    14e8:	71 df       	rcall	.-286    	; 0x13cc <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    14ea:	88 81       	ld	r24, Y
    14ec:	99 81       	ldd	r25, Y+1	; 0x01
    14ee:	f6 01       	movw	r30, r12
    14f0:	09 95       	icall
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	79 f3       	breq	.-34     	; 0x14d4 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	39 f4       	brne	.+14     	; 0x1508 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    14fa:	b9 82       	std	Y+1, r11	; 0x01
    14fc:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    14fe:	f8 01       	movw	r30, r16
    1500:	f1 82       	std	Z+1, r15	; 0x01
    1502:	e0 82       	st	Z, r14
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1506:	82 e0       	ldi	r24, 0x02	; 2
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
    151c:	08 95       	ret

0000151e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    151e:	08 95       	ret

00001520 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(FeatureStatus);
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	18 2f       	mov	r17, r24
    1528:	c9 ee       	ldi	r28, 0xE9	; 233
    152a:	d3 e0       	ldi	r29, 0x03	; 3
    152c:	11 11       	cpse	r17, r1
    152e:	0c c0       	rjmp	.+24     	; 0x1548 <USB_Host_WaitForIOS+0x28>
    1530:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1534:	83 fd       	sbrc	r24, 3
    1536:	15 c0       	rjmp	.+42     	; 0x1562 <USB_Host_WaitForIOS+0x42>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	98 db       	rcall	.-2256   	; 0xc6c <USB_Host_WaitMS>
    153c:	81 11       	cpse	r24, r1
    153e:	12 c0       	rjmp	.+36     	; 0x1564 <USB_Host_WaitForIOS+0x44>
    1540:	21 97       	sbiw	r28, 0x01	; 1
    1542:	a1 f7       	brne	.-24     	; 0x152c <USB_Host_WaitForIOS+0xc>
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	0e c0       	rjmp	.+28     	; 0x1564 <USB_Host_WaitForIOS+0x44>
    1548:	11 30       	cpi	r17, 0x01	; 1
    154a:	29 f4       	brne	.+10     	; 0x1556 <USB_Host_WaitForIOS+0x36>
    154c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1550:	80 ff       	sbrs	r24, 0
    1552:	f2 cf       	rjmp	.-28     	; 0x1538 <USB_Host_WaitForIOS+0x18>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <USB_Host_WaitForIOS+0x42>
    1556:	12 30       	cpi	r17, 0x02	; 2
    1558:	79 f7       	brne	.-34     	; 0x1538 <USB_Host_WaitForIOS+0x18>
    155a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    155e:	82 ff       	sbrs	r24, 2
    1560:	eb cf       	rjmp	.-42     	; 0x1538 <USB_Host_WaitForIOS+0x18>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	08 95       	ret

0000156c <USB_Host_SendControlRequest>:
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	8c 01       	movw	r16, r24
    1578:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    157c:	81 70       	andi	r24, 0x01	; 1
    157e:	f8 2e       	mov	r15, r24
    1580:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <USB_ControlRequest+0x6>
    1584:	d0 91 66 01 	lds	r29, 0x0166	; 0x800166 <USB_ControlRequest+0x7>
    1588:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    158c:	81 60       	ori	r24, 0x01	; 1
    158e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	6b db       	rcall	.-2346   	; 0xc6c <USB_Host_WaitMS>
    1596:	81 11       	cpse	r24, r1
    1598:	c8 c0       	rjmp	.+400    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    159a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    159e:	8f 7c       	andi	r24, 0xCF	; 207
    15a0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    15a4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
    15a8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    15ac:	8f 7e       	andi	r24, 0xEF	; 239
    15ae:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    15b2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15b6:	8f 7b       	andi	r24, 0xBF	; 191
    15b8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15bc:	ef e5       	ldi	r30, 0x5F	; 95
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	87 e6       	ldi	r24, 0x67	; 103
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	21 91       	ld	r18, Z+
    15c6:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    15ca:	8e 17       	cp	r24, r30
    15cc:	9f 07       	cpc	r25, r31
    15ce:	d1 f7       	brne	.-12     	; 0x15c4 <USB_Host_SendControlRequest+0x58>
    15d0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    15d4:	87 77       	andi	r24, 0x77	; 119
    15d6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	a1 df       	rcall	.-190    	; 0x1520 <USB_Host_WaitForIOS>
    15de:	81 11       	cpse	r24, r1
    15e0:	a4 c0       	rjmp	.+328    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    15e2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15e6:	80 64       	ori	r24, 0x40	; 64
    15e8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	3e db       	rcall	.-2436   	; 0xc6c <USB_Host_WaitMS>
    15f0:	81 11       	cpse	r24, r1
    15f2:	9b c0       	rjmp	.+310    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    15f4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_ControlRequest>
    15f8:	87 ff       	sbrs	r24, 7
    15fa:	4e c0       	rjmp	.+156    	; 0x1698 <USB_Host_SendControlRequest+0x12c>
    15fc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1600:	8f 7c       	andi	r24, 0xCF	; 207
    1602:	80 61       	ori	r24, 0x10	; 16
    1604:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1608:	01 15       	cp	r16, r1
    160a:	11 05       	cpc	r17, r1
    160c:	09 f0       	breq	.+2      	; 0x1610 <USB_Host_SendControlRequest+0xa4>
    160e:	3a c0       	rjmp	.+116    	; 0x1684 <USB_Host_SendControlRequest+0x118>
    1610:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1614:	8f 7c       	andi	r24, 0xCF	; 207
    1616:	80 62       	ori	r24, 0x20	; 32
    1618:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    161c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1620:	8f 7b       	andi	r24, 0xBF	; 191
    1622:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	7b df       	rcall	.-266    	; 0x1520 <USB_Host_WaitForIOS>
    162a:	81 11       	cpse	r24, r1
    162c:	7e c0       	rjmp	.+252    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    162e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1632:	8b 77       	andi	r24, 0x7B	; 123
    1634:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	72 df       	rcall	.-284    	; 0x1520 <USB_Host_WaitForIOS>
    163c:	76 c0       	rjmp	.+236    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    163e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1642:	8f 7b       	andi	r24, 0xBF	; 191
    1644:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	6a df       	rcall	.-300    	; 0x1520 <USB_Host_WaitForIOS>
    164c:	81 11       	cpse	r24, r1
    164e:	6d c0       	rjmp	.+218    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    1650:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1654:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1658:	89 2b       	or	r24, r25
    165a:	11 f4       	brne	.+4      	; 0x1660 <USB_Host_SendControlRequest+0xf4>
    165c:	c0 e0       	ldi	r28, 0x00	; 0
    165e:	d0 e0       	ldi	r29, 0x00	; 0
    1660:	f8 01       	movw	r30, r16
    1662:	8f 01       	movw	r16, r30
    1664:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1668:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    166c:	89 2b       	or	r24, r25
    166e:	69 f4       	brne	.+26     	; 0x168a <USB_Host_SendControlRequest+0x11e>
    1670:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    167a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    167e:	8e 77       	andi	r24, 0x7E	; 126
    1680:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1684:	20 97       	sbiw	r28, 0x00	; 0
    1686:	d9 f6       	brne	.-74     	; 0x163e <USB_Host_SendControlRequest+0xd2>
    1688:	c3 cf       	rjmp	.-122    	; 0x1610 <USB_Host_SendControlRequest+0xa4>
    168a:	20 97       	sbiw	r28, 0x00	; 0
    168c:	89 f3       	breq	.-30     	; 0x1670 <USB_Host_SendControlRequest+0x104>
    168e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1692:	81 93       	st	Z+, r24
    1694:	21 97       	sbiw	r28, 0x01	; 1
    1696:	e5 cf       	rjmp	.-54     	; 0x1662 <USB_Host_SendControlRequest+0xf6>
    1698:	01 15       	cp	r16, r1
    169a:	11 05       	cpc	r17, r1
    169c:	91 f1       	breq	.+100    	; 0x1702 <USB_Host_SendControlRequest+0x196>
    169e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    16a2:	8f 7c       	andi	r24, 0xCF	; 207
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    16aa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    16ae:	8f 7b       	andi	r24, 0xBF	; 191
    16b0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	20 97       	sbiw	r28, 0x00	; 0
    16b8:	e1 f0       	breq	.+56     	; 0x16f2 <USB_Host_SendControlRequest+0x186>
    16ba:	32 df       	rcall	.-412    	; 0x1520 <USB_Host_WaitForIOS>
    16bc:	81 11       	cpse	r24, r1
    16be:	35 c0       	rjmp	.+106    	; 0x172a <USB_Host_SendControlRequest+0x1be>
    16c0:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    16c4:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    16c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	28 17       	cp	r18, r24
    16d0:	39 07       	cpc	r19, r25
    16d2:	48 f4       	brcc	.+18     	; 0x16e6 <USB_Host_SendControlRequest+0x17a>
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	f8 01       	movw	r30, r16
    16da:	31 97       	sbiw	r30, 0x01	; 1
    16dc:	80 81       	ld	r24, Z
    16de:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    16e2:	21 97       	sbiw	r28, 0x01	; 1
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <USB_Host_SendControlRequest+0x154>
    16e6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    16ea:	8b 77       	andi	r24, 0x7B	; 123
    16ec:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    16f0:	e1 cf       	rjmp	.-62     	; 0x16b4 <USB_Host_SendControlRequest+0x148>
    16f2:	16 df       	rcall	.-468    	; 0x1520 <USB_Host_WaitForIOS>
    16f4:	81 11       	cpse	r24, r1
    16f6:	19 c0       	rjmp	.+50     	; 0x172a <USB_Host_SendControlRequest+0x1be>
    16f8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    16fc:	80 64       	ori	r24, 0x40	; 64
    16fe:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1702:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1706:	8f 7c       	andi	r24, 0xCF	; 207
    1708:	80 61       	ori	r24, 0x10	; 16
    170a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    170e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1712:	8f 7b       	andi	r24, 0xBF	; 191
    1714:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	02 df       	rcall	.-508    	; 0x1520 <USB_Host_WaitForIOS>
    171c:	81 11       	cpse	r24, r1
    171e:	05 c0       	rjmp	.+10     	; 0x172a <USB_Host_SendControlRequest+0x1be>
    1720:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1724:	9e 77       	andi	r25, 0x7E	; 126
    1726:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    172a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    172e:	90 64       	ori	r25, 0x40	; 64
    1730:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1734:	f1 10       	cpse	r15, r1
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <USB_Host_SendControlRequest+0x1d6>
    1738:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    173c:	9e 7f       	andi	r25, 0xFE	; 254
    173e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1748:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	08 95       	ret

00001758 <USB_Host_SetDeviceConfiguration>:
    1758:	cf 93       	push	r28
    175a:	c8 2f       	mov	r28, r24
    175c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <USB_ControlRequest>
    1760:	89 e0       	ldi	r24, 0x09	; 9
    1762:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <USB_ControlRequest+0x1>
    1766:	8c 2f       	mov	r24, r28
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <USB_ControlRequest+0x3>
    176e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <USB_ControlRequest+0x2>
    1772:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <USB_ControlRequest+0x5>
    1776:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <USB_ControlRequest+0x4>
    177a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <USB_ControlRequest+0x7>
    177e:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_ControlRequest+0x6>
    1782:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	f0 de       	rcall	.-544    	; 0x156c <USB_Host_SendControlRequest>
    178c:	81 11       	cpse	r24, r1
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <USB_Host_SetDeviceConfiguration+0x4a>
    1790:	c0 93 5d 01 	sts	0x015D, r28	; 0x80015d <USB_Host_ConfigurationNumber>
    1794:	c1 11       	cpse	r28, r1
    1796:	02 c0       	rjmp	.+4      	; 0x179c <USB_Host_SetDeviceConfiguration+0x44>
    1798:	9a e0       	ldi	r25, 0x0A	; 10
    179a:	01 c0       	rjmp	.+2      	; 0x179e <USB_Host_SetDeviceConfiguration+0x46>
    179c:	9b e0       	ldi	r25, 0x0B	; 11
    179e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <USB_HostState>
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <USB_Host_ClearEndpointStall>:
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    17a6:	ef e5       	ldi	r30, 0x5F	; 95
    17a8:	f1 e0       	ldi	r31, 0x01	; 1
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	90 83       	st	Z, r25
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	13 82       	std	Z+3, r1	; 0x03
    17b4:	12 82       	std	Z+2, r1	; 0x02
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	95 83       	std	Z+5, r25	; 0x05
    17ba:	84 83       	std	Z+4, r24	; 0x04
    17bc:	17 82       	std	Z+7, r1	; 0x07
    17be:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17c0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	d1 ce       	rjmp	.-606    	; 0x156c <USB_Host_SendControlRequest>

000017ca <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    17d0:	c7 ea       	ldi	r28, 0xA7	; 167
    17d2:	d0 e0       	ldi	r29, 0x00	; 0
    17d4:	18 81       	ld	r17, Y
    17d6:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17d8:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    17da:	95 da       	rcall	.-2774   	; 0xd06 <USB_Host_ProcessNextHostState>
    17dc:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	08 95       	ret

000017e6 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    17e6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17ea:	95 ff       	sbrs	r25, 5
    17ec:	fc cf       	rjmp	.-8      	; 0x17e6 <Serial_putchar>
				UDR1 = DataByte;
    17ee:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	08 95       	ret

000017f8 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    17f8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    17fc:	87 ff       	sbrs	r24, 7
    17fe:	08 c0       	rjmp	.+16     	; 0x1810 <Serial_getchar+0x18>
    1800:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1804:	87 ff       	sbrs	r24, 7
    1806:	07 c0       	rjmp	.+14     	; 0x1816 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1808:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	08 95       	ret
	  return _FDEV_EOF;
    1810:	8e ef       	ldi	r24, 0xFE	; 254
    1812:	9f ef       	ldi	r25, 0xFF	; 255
    1814:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    181a:	08 95       	ret

0000181c <__tablejump2__>:
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	00 24       	eor	r0, r0
    1822:	00 1c       	adc	r0, r0
    1824:	0b be       	out	0x3b, r0	; 59
    1826:	07 90       	elpm	r0, Z+
    1828:	f6 91       	elpm	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	09 94       	ijmp

0000182e <printf_P>:
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	ae 01       	movw	r20, r28
    183c:	49 5f       	subi	r20, 0xF9	; 249
    183e:	5f 4f       	sbci	r21, 0xFF	; 255
    1840:	da 01       	movw	r26, r20
    1842:	6d 91       	ld	r22, X+
    1844:	7d 91       	ld	r23, X+
    1846:	ad 01       	movw	r20, r26
    1848:	06 e7       	ldi	r16, 0x76	; 118
    184a:	11 e0       	ldi	r17, 0x01	; 1
    184c:	f8 01       	movw	r30, r16
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	dc 01       	movw	r26, r24
    1854:	13 96       	adiw	r26, 0x03	; 3
    1856:	2c 91       	ld	r18, X
    1858:	13 97       	sbiw	r26, 0x03	; 3
    185a:	28 60       	ori	r18, 0x08	; 8
    185c:	13 96       	adiw	r26, 0x03	; 3
    185e:	2c 93       	st	X, r18
    1860:	3e d0       	rcall	.+124    	; 0x18de <vfprintf>
    1862:	d8 01       	movw	r26, r16
    1864:	12 96       	adiw	r26, 0x02	; 2
    1866:	ed 91       	ld	r30, X+
    1868:	fc 91       	ld	r31, X
    186a:	13 97       	sbiw	r26, 0x03	; 3
    186c:	23 81       	ldd	r18, Z+3	; 0x03
    186e:	27 7f       	andi	r18, 0xF7	; 247
    1870:	23 83       	std	Z+3, r18	; 0x03
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <puts_P>:
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	8c 01       	movw	r16, r24
    1886:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <__iob+0x2>
    188a:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <__iob+0x3>
    188e:	83 81       	ldd	r24, Z+3	; 0x03
    1890:	81 ff       	sbrs	r24, 1
    1892:	1b c0       	rjmp	.+54     	; 0x18ca <puts_P+0x4e>
    1894:	d0 e0       	ldi	r29, 0x00	; 0
    1896:	c0 e0       	ldi	r28, 0x00	; 0
    1898:	f8 01       	movw	r30, r16
    189a:	84 91       	lpm	r24, Z
    189c:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <__iob+0x2>
    18a0:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <__iob+0x3>
    18a4:	db 01       	movw	r26, r22
    18a6:	18 96       	adiw	r26, 0x08	; 8
    18a8:	ed 91       	ld	r30, X+
    18aa:	fc 91       	ld	r31, X
    18ac:	19 97       	sbiw	r26, 0x09	; 9
    18ae:	88 23       	and	r24, r24
    18b0:	41 f0       	breq	.+16     	; 0x18c2 <puts_P+0x46>
    18b2:	09 95       	icall
    18b4:	89 2b       	or	r24, r25
    18b6:	11 f0       	breq	.+4      	; 0x18bc <puts_P+0x40>
    18b8:	df ef       	ldi	r29, 0xFF	; 255
    18ba:	cf ef       	ldi	r28, 0xFF	; 255
    18bc:	0f 5f       	subi	r16, 0xFF	; 255
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	eb cf       	rjmp	.-42     	; 0x1898 <puts_P+0x1c>
    18c2:	8a e0       	ldi	r24, 0x0A	; 10
    18c4:	09 95       	icall
    18c6:	89 2b       	or	r24, r25
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <puts_P+0x54>
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	9f ef       	ldi	r25, 0xFF	; 255
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <puts_P+0x58>
    18d0:	8d 2f       	mov	r24, r29
    18d2:	9c 2f       	mov	r25, r28
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <vfprintf>:
    18de:	2f 92       	push	r2
    18e0:	3f 92       	push	r3
    18e2:	4f 92       	push	r4
    18e4:	5f 92       	push	r5
    18e6:	6f 92       	push	r6
    18e8:	7f 92       	push	r7
    18ea:	8f 92       	push	r8
    18ec:	9f 92       	push	r9
    18ee:	af 92       	push	r10
    18f0:	bf 92       	push	r11
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	2b 97       	sbiw	r28, 0x0b	; 11
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	6c 01       	movw	r12, r24
    1914:	7b 01       	movw	r14, r22
    1916:	8a 01       	movw	r16, r20
    1918:	fc 01       	movw	r30, r24
    191a:	17 82       	std	Z+7, r1	; 0x07
    191c:	16 82       	std	Z+6, r1	; 0x06
    191e:	83 81       	ldd	r24, Z+3	; 0x03
    1920:	81 ff       	sbrs	r24, 1
    1922:	bf c1       	rjmp	.+894    	; 0x1ca2 <vfprintf+0x3c4>
    1924:	ce 01       	movw	r24, r28
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	3c 01       	movw	r6, r24
    192a:	f6 01       	movw	r30, r12
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	f7 01       	movw	r30, r14
    1930:	93 fd       	sbrc	r25, 3
    1932:	85 91       	lpm	r24, Z+
    1934:	93 ff       	sbrs	r25, 3
    1936:	81 91       	ld	r24, Z+
    1938:	7f 01       	movw	r14, r30
    193a:	88 23       	and	r24, r24
    193c:	09 f4       	brne	.+2      	; 0x1940 <vfprintf+0x62>
    193e:	ad c1       	rjmp	.+858    	; 0x1c9a <vfprintf+0x3bc>
    1940:	85 32       	cpi	r24, 0x25	; 37
    1942:	39 f4       	brne	.+14     	; 0x1952 <vfprintf+0x74>
    1944:	93 fd       	sbrc	r25, 3
    1946:	85 91       	lpm	r24, Z+
    1948:	93 ff       	sbrs	r25, 3
    194a:	81 91       	ld	r24, Z+
    194c:	7f 01       	movw	r14, r30
    194e:	85 32       	cpi	r24, 0x25	; 37
    1950:	21 f4       	brne	.+8      	; 0x195a <vfprintf+0x7c>
    1952:	b6 01       	movw	r22, r12
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	d6 d1       	rcall	.+940    	; 0x1d04 <fputc>
    1958:	e8 cf       	rjmp	.-48     	; 0x192a <vfprintf+0x4c>
    195a:	91 2c       	mov	r9, r1
    195c:	21 2c       	mov	r2, r1
    195e:	31 2c       	mov	r3, r1
    1960:	ff e1       	ldi	r31, 0x1F	; 31
    1962:	f3 15       	cp	r31, r3
    1964:	d8 f0       	brcs	.+54     	; 0x199c <vfprintf+0xbe>
    1966:	8b 32       	cpi	r24, 0x2B	; 43
    1968:	79 f0       	breq	.+30     	; 0x1988 <vfprintf+0xaa>
    196a:	38 f4       	brcc	.+14     	; 0x197a <vfprintf+0x9c>
    196c:	80 32       	cpi	r24, 0x20	; 32
    196e:	79 f0       	breq	.+30     	; 0x198e <vfprintf+0xb0>
    1970:	83 32       	cpi	r24, 0x23	; 35
    1972:	a1 f4       	brne	.+40     	; 0x199c <vfprintf+0xbe>
    1974:	23 2d       	mov	r18, r3
    1976:	20 61       	ori	r18, 0x10	; 16
    1978:	1d c0       	rjmp	.+58     	; 0x19b4 <vfprintf+0xd6>
    197a:	8d 32       	cpi	r24, 0x2D	; 45
    197c:	61 f0       	breq	.+24     	; 0x1996 <vfprintf+0xb8>
    197e:	80 33       	cpi	r24, 0x30	; 48
    1980:	69 f4       	brne	.+26     	; 0x199c <vfprintf+0xbe>
    1982:	23 2d       	mov	r18, r3
    1984:	21 60       	ori	r18, 0x01	; 1
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <vfprintf+0xd6>
    1988:	83 2d       	mov	r24, r3
    198a:	82 60       	ori	r24, 0x02	; 2
    198c:	38 2e       	mov	r3, r24
    198e:	e3 2d       	mov	r30, r3
    1990:	e4 60       	ori	r30, 0x04	; 4
    1992:	3e 2e       	mov	r3, r30
    1994:	2a c0       	rjmp	.+84     	; 0x19ea <vfprintf+0x10c>
    1996:	f3 2d       	mov	r31, r3
    1998:	f8 60       	ori	r31, 0x08	; 8
    199a:	1d c0       	rjmp	.+58     	; 0x19d6 <vfprintf+0xf8>
    199c:	37 fc       	sbrc	r3, 7
    199e:	2d c0       	rjmp	.+90     	; 0x19fa <vfprintf+0x11c>
    19a0:	20 ed       	ldi	r18, 0xD0	; 208
    19a2:	28 0f       	add	r18, r24
    19a4:	2a 30       	cpi	r18, 0x0A	; 10
    19a6:	40 f0       	brcs	.+16     	; 0x19b8 <vfprintf+0xda>
    19a8:	8e 32       	cpi	r24, 0x2E	; 46
    19aa:	b9 f4       	brne	.+46     	; 0x19da <vfprintf+0xfc>
    19ac:	36 fc       	sbrc	r3, 6
    19ae:	75 c1       	rjmp	.+746    	; 0x1c9a <vfprintf+0x3bc>
    19b0:	23 2d       	mov	r18, r3
    19b2:	20 64       	ori	r18, 0x40	; 64
    19b4:	32 2e       	mov	r3, r18
    19b6:	19 c0       	rjmp	.+50     	; 0x19ea <vfprintf+0x10c>
    19b8:	36 fe       	sbrs	r3, 6
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0xea>
    19bc:	8a e0       	ldi	r24, 0x0A	; 10
    19be:	98 9e       	mul	r9, r24
    19c0:	20 0d       	add	r18, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	92 2e       	mov	r9, r18
    19c6:	11 c0       	rjmp	.+34     	; 0x19ea <vfprintf+0x10c>
    19c8:	ea e0       	ldi	r30, 0x0A	; 10
    19ca:	2e 9e       	mul	r2, r30
    19cc:	20 0d       	add	r18, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	22 2e       	mov	r2, r18
    19d2:	f3 2d       	mov	r31, r3
    19d4:	f0 62       	ori	r31, 0x20	; 32
    19d6:	3f 2e       	mov	r3, r31
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <vfprintf+0x10c>
    19da:	8c 36       	cpi	r24, 0x6C	; 108
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <vfprintf+0x108>
    19de:	83 2d       	mov	r24, r3
    19e0:	80 68       	ori	r24, 0x80	; 128
    19e2:	38 2e       	mov	r3, r24
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x10c>
    19e6:	88 36       	cpi	r24, 0x68	; 104
    19e8:	41 f4       	brne	.+16     	; 0x19fa <vfprintf+0x11c>
    19ea:	f7 01       	movw	r30, r14
    19ec:	93 fd       	sbrc	r25, 3
    19ee:	85 91       	lpm	r24, Z+
    19f0:	93 ff       	sbrs	r25, 3
    19f2:	81 91       	ld	r24, Z+
    19f4:	7f 01       	movw	r14, r30
    19f6:	81 11       	cpse	r24, r1
    19f8:	b3 cf       	rjmp	.-154    	; 0x1960 <vfprintf+0x82>
    19fa:	98 2f       	mov	r25, r24
    19fc:	9f 7d       	andi	r25, 0xDF	; 223
    19fe:	95 54       	subi	r25, 0x45	; 69
    1a00:	93 30       	cpi	r25, 0x03	; 3
    1a02:	28 f4       	brcc	.+10     	; 0x1a0e <vfprintf+0x130>
    1a04:	0c 5f       	subi	r16, 0xFC	; 252
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	9f e3       	ldi	r25, 0x3F	; 63
    1a0a:	99 83       	std	Y+1, r25	; 0x01
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <vfprintf+0x14a>
    1a0e:	83 36       	cpi	r24, 0x63	; 99
    1a10:	31 f0       	breq	.+12     	; 0x1a1e <vfprintf+0x140>
    1a12:	83 37       	cpi	r24, 0x73	; 115
    1a14:	71 f0       	breq	.+28     	; 0x1a32 <vfprintf+0x154>
    1a16:	83 35       	cpi	r24, 0x53	; 83
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <vfprintf+0x13e>
    1a1a:	55 c0       	rjmp	.+170    	; 0x1ac6 <vfprintf+0x1e8>
    1a1c:	20 c0       	rjmp	.+64     	; 0x1a5e <vfprintf+0x180>
    1a1e:	f8 01       	movw	r30, r16
    1a20:	80 81       	ld	r24, Z
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	0e 5f       	subi	r16, 0xFE	; 254
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	88 24       	eor	r8, r8
    1a2a:	83 94       	inc	r8
    1a2c:	91 2c       	mov	r9, r1
    1a2e:	53 01       	movw	r10, r6
    1a30:	12 c0       	rjmp	.+36     	; 0x1a56 <vfprintf+0x178>
    1a32:	28 01       	movw	r4, r16
    1a34:	f2 e0       	ldi	r31, 0x02	; 2
    1a36:	4f 0e       	add	r4, r31
    1a38:	51 1c       	adc	r5, r1
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	a0 80       	ld	r10, Z
    1a3e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a40:	36 fe       	sbrs	r3, 6
    1a42:	03 c0       	rjmp	.+6      	; 0x1a4a <vfprintf+0x16c>
    1a44:	69 2d       	mov	r22, r9
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <vfprintf+0x170>
    1a4a:	6f ef       	ldi	r22, 0xFF	; 255
    1a4c:	7f ef       	ldi	r23, 0xFF	; 255
    1a4e:	c5 01       	movw	r24, r10
    1a50:	4e d1       	rcall	.+668    	; 0x1cee <strnlen>
    1a52:	4c 01       	movw	r8, r24
    1a54:	82 01       	movw	r16, r4
    1a56:	f3 2d       	mov	r31, r3
    1a58:	ff 77       	andi	r31, 0x7F	; 127
    1a5a:	3f 2e       	mov	r3, r31
    1a5c:	15 c0       	rjmp	.+42     	; 0x1a88 <vfprintf+0x1aa>
    1a5e:	28 01       	movw	r4, r16
    1a60:	22 e0       	ldi	r18, 0x02	; 2
    1a62:	42 0e       	add	r4, r18
    1a64:	51 1c       	adc	r5, r1
    1a66:	f8 01       	movw	r30, r16
    1a68:	a0 80       	ld	r10, Z
    1a6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a6c:	36 fe       	sbrs	r3, 6
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <vfprintf+0x198>
    1a70:	69 2d       	mov	r22, r9
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <vfprintf+0x19c>
    1a76:	6f ef       	ldi	r22, 0xFF	; 255
    1a78:	7f ef       	ldi	r23, 0xFF	; 255
    1a7a:	c5 01       	movw	r24, r10
    1a7c:	2d d1       	rcall	.+602    	; 0x1cd8 <strnlen_P>
    1a7e:	4c 01       	movw	r8, r24
    1a80:	f3 2d       	mov	r31, r3
    1a82:	f0 68       	ori	r31, 0x80	; 128
    1a84:	3f 2e       	mov	r3, r31
    1a86:	82 01       	movw	r16, r4
    1a88:	33 fc       	sbrc	r3, 3
    1a8a:	19 c0       	rjmp	.+50     	; 0x1abe <vfprintf+0x1e0>
    1a8c:	82 2d       	mov	r24, r2
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	88 16       	cp	r8, r24
    1a92:	99 06       	cpc	r9, r25
    1a94:	a0 f4       	brcc	.+40     	; 0x1abe <vfprintf+0x1e0>
    1a96:	b6 01       	movw	r22, r12
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	33 d1       	rcall	.+614    	; 0x1d04 <fputc>
    1a9e:	2a 94       	dec	r2
    1aa0:	f5 cf       	rjmp	.-22     	; 0x1a8c <vfprintf+0x1ae>
    1aa2:	f5 01       	movw	r30, r10
    1aa4:	37 fc       	sbrc	r3, 7
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	37 fe       	sbrs	r3, 7
    1aaa:	81 91       	ld	r24, Z+
    1aac:	5f 01       	movw	r10, r30
    1aae:	b6 01       	movw	r22, r12
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	28 d1       	rcall	.+592    	; 0x1d04 <fputc>
    1ab4:	21 10       	cpse	r2, r1
    1ab6:	2a 94       	dec	r2
    1ab8:	21 e0       	ldi	r18, 0x01	; 1
    1aba:	82 1a       	sub	r8, r18
    1abc:	91 08       	sbc	r9, r1
    1abe:	81 14       	cp	r8, r1
    1ac0:	91 04       	cpc	r9, r1
    1ac2:	79 f7       	brne	.-34     	; 0x1aa2 <vfprintf+0x1c4>
    1ac4:	e1 c0       	rjmp	.+450    	; 0x1c88 <vfprintf+0x3aa>
    1ac6:	84 36       	cpi	r24, 0x64	; 100
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <vfprintf+0x1f0>
    1aca:	89 36       	cpi	r24, 0x69	; 105
    1acc:	39 f5       	brne	.+78     	; 0x1b1c <vfprintf+0x23e>
    1ace:	f8 01       	movw	r30, r16
    1ad0:	37 fe       	sbrs	r3, 7
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <vfprintf+0x204>
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	0c 5f       	subi	r16, 0xFC	; 252
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	08 c0       	rjmp	.+16     	; 0x1af2 <vfprintf+0x214>
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	07 2e       	mov	r0, r23
    1ae8:	00 0c       	add	r0, r0
    1aea:	88 0b       	sbc	r24, r24
    1aec:	99 0b       	sbc	r25, r25
    1aee:	0e 5f       	subi	r16, 0xFE	; 254
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	f3 2d       	mov	r31, r3
    1af4:	ff 76       	andi	r31, 0x6F	; 111
    1af6:	3f 2e       	mov	r3, r31
    1af8:	97 ff       	sbrs	r25, 7
    1afa:	09 c0       	rjmp	.+18     	; 0x1b0e <vfprintf+0x230>
    1afc:	90 95       	com	r25
    1afe:	80 95       	com	r24
    1b00:	70 95       	com	r23
    1b02:	61 95       	neg	r22
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	f0 68       	ori	r31, 0x80	; 128
    1b0c:	3f 2e       	mov	r3, r31
    1b0e:	2a e0       	ldi	r18, 0x0A	; 10
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	a3 01       	movw	r20, r6
    1b14:	33 d1       	rcall	.+614    	; 0x1d7c <__ultoa_invert>
    1b16:	88 2e       	mov	r8, r24
    1b18:	86 18       	sub	r8, r6
    1b1a:	44 c0       	rjmp	.+136    	; 0x1ba4 <vfprintf+0x2c6>
    1b1c:	85 37       	cpi	r24, 0x75	; 117
    1b1e:	31 f4       	brne	.+12     	; 0x1b2c <vfprintf+0x24e>
    1b20:	23 2d       	mov	r18, r3
    1b22:	2f 7e       	andi	r18, 0xEF	; 239
    1b24:	b2 2e       	mov	r11, r18
    1b26:	2a e0       	ldi	r18, 0x0A	; 10
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	25 c0       	rjmp	.+74     	; 0x1b76 <vfprintf+0x298>
    1b2c:	93 2d       	mov	r25, r3
    1b2e:	99 7f       	andi	r25, 0xF9	; 249
    1b30:	b9 2e       	mov	r11, r25
    1b32:	8f 36       	cpi	r24, 0x6F	; 111
    1b34:	c1 f0       	breq	.+48     	; 0x1b66 <vfprintf+0x288>
    1b36:	18 f4       	brcc	.+6      	; 0x1b3e <vfprintf+0x260>
    1b38:	88 35       	cpi	r24, 0x58	; 88
    1b3a:	79 f0       	breq	.+30     	; 0x1b5a <vfprintf+0x27c>
    1b3c:	ae c0       	rjmp	.+348    	; 0x1c9a <vfprintf+0x3bc>
    1b3e:	80 37       	cpi	r24, 0x70	; 112
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <vfprintf+0x26a>
    1b42:	88 37       	cpi	r24, 0x78	; 120
    1b44:	21 f0       	breq	.+8      	; 0x1b4e <vfprintf+0x270>
    1b46:	a9 c0       	rjmp	.+338    	; 0x1c9a <vfprintf+0x3bc>
    1b48:	e9 2f       	mov	r30, r25
    1b4a:	e0 61       	ori	r30, 0x10	; 16
    1b4c:	be 2e       	mov	r11, r30
    1b4e:	b4 fe       	sbrs	r11, 4
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <vfprintf+0x28e>
    1b52:	fb 2d       	mov	r31, r11
    1b54:	f4 60       	ori	r31, 0x04	; 4
    1b56:	bf 2e       	mov	r11, r31
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <vfprintf+0x28e>
    1b5a:	34 fe       	sbrs	r3, 4
    1b5c:	0a c0       	rjmp	.+20     	; 0x1b72 <vfprintf+0x294>
    1b5e:	29 2f       	mov	r18, r25
    1b60:	26 60       	ori	r18, 0x06	; 6
    1b62:	b2 2e       	mov	r11, r18
    1b64:	06 c0       	rjmp	.+12     	; 0x1b72 <vfprintf+0x294>
    1b66:	28 e0       	ldi	r18, 0x08	; 8
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <vfprintf+0x298>
    1b6c:	20 e1       	ldi	r18, 0x10	; 16
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <vfprintf+0x298>
    1b72:	20 e1       	ldi	r18, 0x10	; 16
    1b74:	32 e0       	ldi	r19, 0x02	; 2
    1b76:	f8 01       	movw	r30, r16
    1b78:	b7 fe       	sbrs	r11, 7
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <vfprintf+0x2ac>
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	0c 5f       	subi	r16, 0xFC	; 252
    1b86:	1f 4f       	sbci	r17, 0xFF	; 255
    1b88:	06 c0       	rjmp	.+12     	; 0x1b96 <vfprintf+0x2b8>
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 5f       	subi	r16, 0xFE	; 254
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	a3 01       	movw	r20, r6
    1b98:	f1 d0       	rcall	.+482    	; 0x1d7c <__ultoa_invert>
    1b9a:	88 2e       	mov	r8, r24
    1b9c:	86 18       	sub	r8, r6
    1b9e:	fb 2d       	mov	r31, r11
    1ba0:	ff 77       	andi	r31, 0x7F	; 127
    1ba2:	3f 2e       	mov	r3, r31
    1ba4:	36 fe       	sbrs	r3, 6
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <vfprintf+0x2e4>
    1ba8:	23 2d       	mov	r18, r3
    1baa:	2e 7f       	andi	r18, 0xFE	; 254
    1bac:	a2 2e       	mov	r10, r18
    1bae:	89 14       	cp	r8, r9
    1bb0:	58 f4       	brcc	.+22     	; 0x1bc8 <vfprintf+0x2ea>
    1bb2:	34 fe       	sbrs	r3, 4
    1bb4:	0b c0       	rjmp	.+22     	; 0x1bcc <vfprintf+0x2ee>
    1bb6:	32 fc       	sbrc	r3, 2
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <vfprintf+0x2ee>
    1bba:	83 2d       	mov	r24, r3
    1bbc:	8e 7e       	andi	r24, 0xEE	; 238
    1bbe:	a8 2e       	mov	r10, r24
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <vfprintf+0x2ee>
    1bc2:	b8 2c       	mov	r11, r8
    1bc4:	a3 2c       	mov	r10, r3
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <vfprintf+0x2f0>
    1bc8:	b8 2c       	mov	r11, r8
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <vfprintf+0x2f0>
    1bcc:	b9 2c       	mov	r11, r9
    1bce:	a4 fe       	sbrs	r10, 4
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <vfprintf+0x312>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e8 0d       	add	r30, r8
    1bd6:	f1 1d       	adc	r31, r1
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 33       	cpi	r24, 0x30	; 48
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <vfprintf+0x308>
    1bde:	9a 2d       	mov	r25, r10
    1be0:	99 7e       	andi	r25, 0xE9	; 233
    1be2:	a9 2e       	mov	r10, r25
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <vfprintf+0x31a>
    1be6:	a2 fe       	sbrs	r10, 2
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <vfprintf+0x318>
    1bea:	b3 94       	inc	r11
    1bec:	b3 94       	inc	r11
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <vfprintf+0x31a>
    1bf0:	8a 2d       	mov	r24, r10
    1bf2:	86 78       	andi	r24, 0x86	; 134
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <vfprintf+0x31a>
    1bf6:	b3 94       	inc	r11
    1bf8:	a3 fc       	sbrc	r10, 3
    1bfa:	10 c0       	rjmp	.+32     	; 0x1c1c <vfprintf+0x33e>
    1bfc:	a0 fe       	sbrs	r10, 0
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <vfprintf+0x32e>
    1c00:	b2 14       	cp	r11, r2
    1c02:	80 f4       	brcc	.+32     	; 0x1c24 <vfprintf+0x346>
    1c04:	28 0c       	add	r2, r8
    1c06:	92 2c       	mov	r9, r2
    1c08:	9b 18       	sub	r9, r11
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <vfprintf+0x348>
    1c0c:	b2 14       	cp	r11, r2
    1c0e:	58 f4       	brcc	.+22     	; 0x1c26 <vfprintf+0x348>
    1c10:	b6 01       	movw	r22, r12
    1c12:	80 e2       	ldi	r24, 0x20	; 32
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	76 d0       	rcall	.+236    	; 0x1d04 <fputc>
    1c18:	b3 94       	inc	r11
    1c1a:	f8 cf       	rjmp	.-16     	; 0x1c0c <vfprintf+0x32e>
    1c1c:	b2 14       	cp	r11, r2
    1c1e:	18 f4       	brcc	.+6      	; 0x1c26 <vfprintf+0x348>
    1c20:	2b 18       	sub	r2, r11
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x34a>
    1c24:	98 2c       	mov	r9, r8
    1c26:	21 2c       	mov	r2, r1
    1c28:	a4 fe       	sbrs	r10, 4
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <vfprintf+0x36c>
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	80 e3       	ldi	r24, 0x30	; 48
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	68 d0       	rcall	.+208    	; 0x1d04 <fputc>
    1c34:	a2 fe       	sbrs	r10, 2
    1c36:	16 c0       	rjmp	.+44     	; 0x1c64 <vfprintf+0x386>
    1c38:	a1 fc       	sbrc	r10, 1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <vfprintf+0x364>
    1c3c:	88 e7       	ldi	r24, 0x78	; 120
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <vfprintf+0x368>
    1c42:	88 e5       	ldi	r24, 0x58	; 88
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b6 01       	movw	r22, r12
    1c48:	0c c0       	rjmp	.+24     	; 0x1c62 <vfprintf+0x384>
    1c4a:	8a 2d       	mov	r24, r10
    1c4c:	86 78       	andi	r24, 0x86	; 134
    1c4e:	51 f0       	breq	.+20     	; 0x1c64 <vfprintf+0x386>
    1c50:	a1 fe       	sbrs	r10, 1
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <vfprintf+0x37a>
    1c54:	8b e2       	ldi	r24, 0x2B	; 43
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <vfprintf+0x37c>
    1c58:	80 e2       	ldi	r24, 0x20	; 32
    1c5a:	a7 fc       	sbrc	r10, 7
    1c5c:	8d e2       	ldi	r24, 0x2D	; 45
    1c5e:	b6 01       	movw	r22, r12
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	50 d0       	rcall	.+160    	; 0x1d04 <fputc>
    1c64:	89 14       	cp	r8, r9
    1c66:	30 f4       	brcc	.+12     	; 0x1c74 <vfprintf+0x396>
    1c68:	b6 01       	movw	r22, r12
    1c6a:	80 e3       	ldi	r24, 0x30	; 48
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	4a d0       	rcall	.+148    	; 0x1d04 <fputc>
    1c70:	9a 94       	dec	r9
    1c72:	f8 cf       	rjmp	.-16     	; 0x1c64 <vfprintf+0x386>
    1c74:	8a 94       	dec	r8
    1c76:	f3 01       	movw	r30, r6
    1c78:	e8 0d       	add	r30, r8
    1c7a:	f1 1d       	adc	r31, r1
    1c7c:	80 81       	ld	r24, Z
    1c7e:	b6 01       	movw	r22, r12
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	40 d0       	rcall	.+128    	; 0x1d04 <fputc>
    1c84:	81 10       	cpse	r8, r1
    1c86:	f6 cf       	rjmp	.-20     	; 0x1c74 <vfprintf+0x396>
    1c88:	22 20       	and	r2, r2
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <vfprintf+0x3b0>
    1c8c:	4e ce       	rjmp	.-868    	; 0x192a <vfprintf+0x4c>
    1c8e:	b6 01       	movw	r22, r12
    1c90:	80 e2       	ldi	r24, 0x20	; 32
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	37 d0       	rcall	.+110    	; 0x1d04 <fputc>
    1c96:	2a 94       	dec	r2
    1c98:	f7 cf       	rjmp	.-18     	; 0x1c88 <vfprintf+0x3aa>
    1c9a:	f6 01       	movw	r30, r12
    1c9c:	86 81       	ldd	r24, Z+6	; 0x06
    1c9e:	97 81       	ldd	r25, Z+7	; 0x07
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vfprintf+0x3c8>
    1ca2:	8f ef       	ldi	r24, 0xFF	; 255
    1ca4:	9f ef       	ldi	r25, 0xFF	; 255
    1ca6:	2b 96       	adiw	r28, 0x0b	; 11
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	9f 90       	pop	r9
    1cc8:	8f 90       	pop	r8
    1cca:	7f 90       	pop	r7
    1ccc:	6f 90       	pop	r6
    1cce:	5f 90       	pop	r5
    1cd0:	4f 90       	pop	r4
    1cd2:	3f 90       	pop	r3
    1cd4:	2f 90       	pop	r2
    1cd6:	08 95       	ret

00001cd8 <strnlen_P>:
    1cd8:	fc 01       	movw	r30, r24
    1cda:	05 90       	lpm	r0, Z+
    1cdc:	61 50       	subi	r22, 0x01	; 1
    1cde:	70 40       	sbci	r23, 0x00	; 0
    1ce0:	01 10       	cpse	r0, r1
    1ce2:	d8 f7       	brcc	.-10     	; 0x1cda <strnlen_P+0x2>
    1ce4:	80 95       	com	r24
    1ce6:	90 95       	com	r25
    1ce8:	8e 0f       	add	r24, r30
    1cea:	9f 1f       	adc	r25, r31
    1cec:	08 95       	ret

00001cee <strnlen>:
    1cee:	fc 01       	movw	r30, r24
    1cf0:	61 50       	subi	r22, 0x01	; 1
    1cf2:	70 40       	sbci	r23, 0x00	; 0
    1cf4:	01 90       	ld	r0, Z+
    1cf6:	01 10       	cpse	r0, r1
    1cf8:	d8 f7       	brcc	.-10     	; 0x1cf0 <strnlen+0x2>
    1cfa:	80 95       	com	r24
    1cfc:	90 95       	com	r25
    1cfe:	8e 0f       	add	r24, r30
    1d00:	9f 1f       	adc	r25, r31
    1d02:	08 95       	ret

00001d04 <fputc>:
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	fb 01       	movw	r30, r22
    1d0e:	23 81       	ldd	r18, Z+3	; 0x03
    1d10:	21 fd       	sbrc	r18, 1
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <fputc+0x16>
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	2c c0       	rjmp	.+88     	; 0x1d72 <fputc+0x6e>
    1d1a:	22 ff       	sbrs	r18, 2
    1d1c:	16 c0       	rjmp	.+44     	; 0x1d4a <fputc+0x46>
    1d1e:	46 81       	ldd	r20, Z+6	; 0x06
    1d20:	57 81       	ldd	r21, Z+7	; 0x07
    1d22:	24 81       	ldd	r18, Z+4	; 0x04
    1d24:	35 81       	ldd	r19, Z+5	; 0x05
    1d26:	42 17       	cp	r20, r18
    1d28:	53 07       	cpc	r21, r19
    1d2a:	44 f4       	brge	.+16     	; 0x1d3c <fputc+0x38>
    1d2c:	a0 81       	ld	r26, Z
    1d2e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d30:	9d 01       	movw	r18, r26
    1d32:	2f 5f       	subi	r18, 0xFF	; 255
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	31 83       	std	Z+1, r19	; 0x01
    1d38:	20 83       	st	Z, r18
    1d3a:	8c 93       	st	X, r24
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	37 83       	std	Z+7, r19	; 0x07
    1d46:	26 83       	std	Z+6, r18	; 0x06
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <fputc+0x6e>
    1d4a:	8b 01       	movw	r16, r22
    1d4c:	ec 01       	movw	r28, r24
    1d4e:	fb 01       	movw	r30, r22
    1d50:	00 84       	ldd	r0, Z+8	; 0x08
    1d52:	f1 85       	ldd	r31, Z+9	; 0x09
    1d54:	e0 2d       	mov	r30, r0
    1d56:	09 95       	icall
    1d58:	89 2b       	or	r24, r25
    1d5a:	e1 f6       	brne	.-72     	; 0x1d14 <fputc+0x10>
    1d5c:	d8 01       	movw	r26, r16
    1d5e:	16 96       	adiw	r26, 0x06	; 6
    1d60:	8d 91       	ld	r24, X+
    1d62:	9c 91       	ld	r25, X
    1d64:	17 97       	sbiw	r26, 0x07	; 7
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	17 96       	adiw	r26, 0x07	; 7
    1d6a:	9c 93       	st	X, r25
    1d6c:	8e 93       	st	-X, r24
    1d6e:	16 97       	sbiw	r26, 0x06	; 6
    1d70:	ce 01       	movw	r24, r28
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <__ultoa_invert>:
    1d7c:	fa 01       	movw	r30, r20
    1d7e:	aa 27       	eor	r26, r26
    1d80:	28 30       	cpi	r18, 0x08	; 8
    1d82:	51 f1       	breq	.+84     	; 0x1dd8 <__ultoa_invert+0x5c>
    1d84:	20 31       	cpi	r18, 0x10	; 16
    1d86:	81 f1       	breq	.+96     	; 0x1de8 <__ultoa_invert+0x6c>
    1d88:	e8 94       	clt
    1d8a:	6f 93       	push	r22
    1d8c:	6e 7f       	andi	r22, 0xFE	; 254
    1d8e:	6e 5f       	subi	r22, 0xFE	; 254
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8f 4f       	sbci	r24, 0xFF	; 255
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	af 4f       	sbci	r26, 0xFF	; 255
    1d98:	b1 e0       	ldi	r27, 0x01	; 1
    1d9a:	3e d0       	rcall	.+124    	; 0x1e18 <__ultoa_invert+0x9c>
    1d9c:	b4 e0       	ldi	r27, 0x04	; 4
    1d9e:	3c d0       	rcall	.+120    	; 0x1e18 <__ultoa_invert+0x9c>
    1da0:	67 0f       	add	r22, r23
    1da2:	78 1f       	adc	r23, r24
    1da4:	89 1f       	adc	r24, r25
    1da6:	9a 1f       	adc	r25, r26
    1da8:	a1 1d       	adc	r26, r1
    1daa:	68 0f       	add	r22, r24
    1dac:	79 1f       	adc	r23, r25
    1dae:	8a 1f       	adc	r24, r26
    1db0:	91 1d       	adc	r25, r1
    1db2:	a1 1d       	adc	r26, r1
    1db4:	6a 0f       	add	r22, r26
    1db6:	71 1d       	adc	r23, r1
    1db8:	81 1d       	adc	r24, r1
    1dba:	91 1d       	adc	r25, r1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	20 d0       	rcall	.+64     	; 0x1e00 <__ultoa_invert+0x84>
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__ultoa_invert+0x48>
    1dc2:	68 94       	set
    1dc4:	3f 91       	pop	r19
    1dc6:	2a e0       	ldi	r18, 0x0A	; 10
    1dc8:	26 9f       	mul	r18, r22
    1dca:	11 24       	eor	r1, r1
    1dcc:	30 19       	sub	r19, r0
    1dce:	30 5d       	subi	r19, 0xD0	; 208
    1dd0:	31 93       	st	Z+, r19
    1dd2:	de f6       	brtc	.-74     	; 0x1d8a <__ultoa_invert+0xe>
    1dd4:	cf 01       	movw	r24, r30
    1dd6:	08 95       	ret
    1dd8:	46 2f       	mov	r20, r22
    1dda:	47 70       	andi	r20, 0x07	; 7
    1ddc:	40 5d       	subi	r20, 0xD0	; 208
    1dde:	41 93       	st	Z+, r20
    1de0:	b3 e0       	ldi	r27, 0x03	; 3
    1de2:	0f d0       	rcall	.+30     	; 0x1e02 <__ultoa_invert+0x86>
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x5c>
    1de6:	f6 cf       	rjmp	.-20     	; 0x1dd4 <__ultoa_invert+0x58>
    1de8:	46 2f       	mov	r20, r22
    1dea:	4f 70       	andi	r20, 0x0F	; 15
    1dec:	40 5d       	subi	r20, 0xD0	; 208
    1dee:	4a 33       	cpi	r20, 0x3A	; 58
    1df0:	18 f0       	brcs	.+6      	; 0x1df8 <__ultoa_invert+0x7c>
    1df2:	49 5d       	subi	r20, 0xD9	; 217
    1df4:	31 fd       	sbrc	r19, 1
    1df6:	40 52       	subi	r20, 0x20	; 32
    1df8:	41 93       	st	Z+, r20
    1dfa:	02 d0       	rcall	.+4      	; 0x1e00 <__ultoa_invert+0x84>
    1dfc:	a9 f7       	brne	.-22     	; 0x1de8 <__ultoa_invert+0x6c>
    1dfe:	ea cf       	rjmp	.-44     	; 0x1dd4 <__ultoa_invert+0x58>
    1e00:	b4 e0       	ldi	r27, 0x04	; 4
    1e02:	a6 95       	lsr	r26
    1e04:	97 95       	ror	r25
    1e06:	87 95       	ror	r24
    1e08:	77 95       	ror	r23
    1e0a:	67 95       	ror	r22
    1e0c:	ba 95       	dec	r27
    1e0e:	c9 f7       	brne	.-14     	; 0x1e02 <__ultoa_invert+0x86>
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	61 05       	cpc	r22, r1
    1e14:	71 05       	cpc	r23, r1
    1e16:	08 95       	ret
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	0a 2e       	mov	r0, r26
    1e1e:	06 94       	lsr	r0
    1e20:	57 95       	ror	r21
    1e22:	47 95       	ror	r20
    1e24:	37 95       	ror	r19
    1e26:	27 95       	ror	r18
    1e28:	ba 95       	dec	r27
    1e2a:	c9 f7       	brne	.-14     	; 0x1e1e <__ultoa_invert+0xa2>
    1e2c:	62 0f       	add	r22, r18
    1e2e:	73 1f       	adc	r23, r19
    1e30:	84 1f       	adc	r24, r20
    1e32:	95 1f       	adc	r25, r21
    1e34:	a0 1d       	adc	r26, r0
    1e36:	08 95       	ret

00001e38 <_exit>:
    1e38:	f8 94       	cli

00001e3a <__stop_program>:
    1e3a:	ff cf       	rjmp	.-2      	; 0x1e3a <__stop_program>
