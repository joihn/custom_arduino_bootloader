   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  12               	.global	CALLBACK_USB_GetDescriptor
  14               	CALLBACK_USB_GetDescriptor:
  15               	.LFB97:
  16               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /* On some devices, there is a factory set internal serial number which can be automatically sent t
  41:Descriptors.c ****  * the device's serial number when the Device Descriptor's .SerialNumStrIndex entry is set to USE_I
  42:Descriptors.c ****  * This allows the host to track a device across insertions on different ports, allowing them to re
  43:Descriptors.c ****  * resources like COM port numbers and drivers. On demos using this feature, give a warning on unsu
  44:Descriptors.c ****  * so that the user can supply their own serial number descriptor instead or remove the USE_INTERNA
  45:Descriptors.c ****  * from the Device Descriptor (forcing the host to generate a serial number for each device from th
  46:Descriptors.c ****  * port location).
  47:Descriptors.c ****  */
  48:Descriptors.c **** #if (USE_INTERNAL_SERIAL == NO_DESCRIPTOR)
  49:Descriptors.c **** 	#warning USE_INTERNAL_SERIAL is not available on this AVR - please manually construct a device ser
  50:Descriptors.c **** #endif
  51:Descriptors.c **** 
  52:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  53:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  54:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  55:Descriptors.c ****  *  process begins.
  56:Descriptors.c ****  */
  57:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  58:Descriptors.c **** {
  59:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  60:Descriptors.c **** 
  61:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  62:Descriptors.c **** 	.Class                  = USB_CSCP_NoDeviceClass,
  63:Descriptors.c **** 	.SubClass               = USB_CSCP_NoDeviceSubclass,
  64:Descriptors.c **** 	.Protocol               = USB_CSCP_NoDeviceProtocol,
  65:Descriptors.c **** 
  66:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  67:Descriptors.c **** 
  68:Descriptors.c **** 	.VendorID               = 0x03EB,
  69:Descriptors.c **** 	.ProductID              = 0x2045,
  70:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  71:Descriptors.c **** 
  72:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  73:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  74:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  75:Descriptors.c **** 
  76:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  77:Descriptors.c **** };
  78:Descriptors.c **** 
  79:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  80:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  81:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  82:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  83:Descriptors.c ****  */
  84:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  85:Descriptors.c **** {
  86:Descriptors.c **** 	.Config =
  87:Descriptors.c **** 		{
  88:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  89:Descriptors.c **** 
  90:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  91:Descriptors.c **** 			.TotalInterfaces        = 1,
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.ConfigurationNumber    = 1,
  94:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  99:Descriptors.c **** 		},
 100:Descriptors.c **** 
 101:Descriptors.c **** 	.MS_Interface =
 102:Descriptors.c **** 		{
 103:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 104:Descriptors.c **** 
 105:Descriptors.c **** 			.InterfaceNumber        = 0,
 106:Descriptors.c **** 			.AlternateSetting       = 0,
 107:Descriptors.c **** 
 108:Descriptors.c **** 			.TotalEndpoints         = 2,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.Class                  = MS_CSCP_MassStorageClass,
 111:Descriptors.c **** 			.SubClass               = MS_CSCP_SCSITransparentSubclass,
 112:Descriptors.c **** 			.Protocol               = MS_CSCP_BulkOnlyTransportProtocol,
 113:Descriptors.c **** 
 114:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 115:Descriptors.c **** 		},
 116:Descriptors.c **** 
 117:Descriptors.c **** 	.MS_DataInEndpoint =
 118:Descriptors.c **** 		{
 119:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 120:Descriptors.c **** 
 121:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | MASS_STORAGE_IN_EPNUM),
 122:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 123:Descriptors.c **** 			.EndpointSize           = MASS_STORAGE_IO_EPSIZE,
 124:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 125:Descriptors.c **** 		},
 126:Descriptors.c **** 
 127:Descriptors.c **** 	.MS_DataOutEndpoint =
 128:Descriptors.c **** 		{
 129:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 130:Descriptors.c **** 
 131:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_OUT | MASS_STORAGE_OUT_EPNUM),
 132:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 133:Descriptors.c **** 			.EndpointSize           = MASS_STORAGE_IO_EPSIZE,
 134:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 135:Descriptors.c **** 		}
 136:Descriptors.c **** };
 137:Descriptors.c **** 
 138:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 139:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 140:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 141:Descriptors.c ****  */
 142:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 143:Descriptors.c **** {
 144:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 145:Descriptors.c **** 
 146:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 147:Descriptors.c **** };
 148:Descriptors.c **** 
 149:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 150:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 151:Descriptors.c ****  *  Descriptor.
 152:Descriptors.c ****  */
 153:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 154:Descriptors.c **** {
 155:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 156:Descriptors.c **** 
 157:Descriptors.c **** 	.UnicodeString          = L"Dean Camera"
 158:Descriptors.c **** };
 159:Descriptors.c **** 
 160:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 161:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 162:Descriptors.c ****  *  Descriptor.
 163:Descriptors.c ****  */
 164:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 165:Descriptors.c **** {
 166:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(22), .Type = DTYPE_String},
 167:Descriptors.c **** 
 168:Descriptors.c **** 	.UnicodeString          = L"LUFA Mass Storage Demo"
 169:Descriptors.c **** };
 170:Descriptors.c **** 
 171:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 172:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 173:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 174:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 175:Descriptors.c ****  *  USB host.
 176:Descriptors.c ****  */
 177:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 178:Descriptors.c ****                                     const uint8_t wIndex,
 179:Descriptors.c ****                                     const void** const DescriptorAddress)
 180:Descriptors.c **** {
  17               		.loc 1 180 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 181:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 182:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 183:Descriptors.c **** 
 184:Descriptors.c **** 	const void* Address = NULL;
 185:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 186:Descriptors.c **** 
 187:Descriptors.c **** 	switch (DescriptorType)
  24               		.loc 1 187 0
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L12
 188:Descriptors.c **** 	{
 189:Descriptors.c **** 		case DTYPE_Device:
 190:Descriptors.c **** 			Address = &DeviceDescriptor;
 191:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 191 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 190:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  40               		.loc 1 190 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L2
  44               	.LVL2:
  45               	.L3:
 192:Descriptors.c **** 			break;
 193:Descriptors.c **** 		case DTYPE_Configuration:
 194:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 195:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 195 0
  47 0020 80E2      		ldi r24,lo8(32)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 194:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 194 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 196:Descriptors.c **** 			break;
  53               		.loc 1 196 0
  54 0028 00C0      		rjmp .L2
  55               	.LVL4:
  56               	.L4:
 197:Descriptors.c **** 		case DTYPE_String:
 198:Descriptors.c **** 			switch (DescriptorNumber)
  57               		.loc 1 198 0
  58 002a 9927      		clr r25
  59               	.LVL5:
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 00F0      		brlo .L7
  64 0034 0297      		sbiw r24,2
  65 0036 01F4      		brne .L12
  66               	.LVL6:
  67               	.LBB2:
 199:Descriptors.c **** 			{
 200:Descriptors.c **** 				case 0x00:
 201:Descriptors.c **** 					Address = &LanguageString;
 202:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 203:Descriptors.c **** 					break;
 204:Descriptors.c **** 				case 0x01:
 205:Descriptors.c **** 					Address = &ManufacturerString;
 206:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 207:Descriptors.c **** 					break;
 208:Descriptors.c **** 				case 0x02:
 209:Descriptors.c **** 					Address = &ProductString;
 210:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  68               		.loc 1 210 0
  69 0038 E0E0      		ldi r30,lo8(ProductString)
  70 003a F0E0      		ldi r31,hi8(ProductString)
  71 003c 00C0      		rjmp .L13
  72               	.LVL7:
  73               	.L7:
  74               	.LBE2:
  75               	.LBB3:
 202:Descriptors.c **** 					break;
  76               		.loc 1 202 0
  77 003e E0E0      		ldi r30,lo8(LanguageString)
  78 0040 F0E0      		ldi r31,hi8(LanguageString)
  79 0042 00C0      		rjmp .L13
  80               	.LVL8:
  81               	.L6:
  82               	.LBE3:
  83               	.LBB4:
 206:Descriptors.c **** 					break;
  84               		.loc 1 206 0
  85 0044 E0E0      		ldi r30,lo8(ManufacturerString)
  86 0046 F0E0      		ldi r31,hi8(ManufacturerString)
  87               	.LVL9:
  88               	.L13:
  89               	.LBE4:
  90               	.LBB5:
  91               		.loc 1 210 0
  92               	/* #APP */
  93               	 ;  210 "Descriptors.c" 1
  94 0048 8491      		lpm r24, Z
  95               		
  96               	 ;  0 "" 2
  97               	.LVL10:
  98               	/* #NOAPP */
  99               	.LBE5:
 100 004a 90E0      		ldi r25,0
 101               	.LVL11:
 209:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 102               		.loc 1 209 0
 103 004c 9F01      		movw r18,r30
 211:Descriptors.c **** 					break;
 104               		.loc 1 211 0
 105 004e 00C0      		rjmp .L2
 106               	.LVL12:
 107               	.L12:
 185:Descriptors.c **** 
 108               		.loc 1 185 0
 109 0050 80E0      		ldi r24,0
 110 0052 90E0      		ldi r25,0
 184:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 111               		.loc 1 184 0
 112 0054 20E0      		ldi r18,0
 113 0056 30E0      		ldi r19,0
 114               	.LVL13:
 115               	.L2:
 212:Descriptors.c **** 			}
 213:Descriptors.c **** 
 214:Descriptors.c **** 			break;
 215:Descriptors.c **** 	}
 216:Descriptors.c **** 
 217:Descriptors.c **** 	*DescriptorAddress = Address;
 116               		.loc 1 217 0
 117 0058 FA01      		movw r30,r20
 118 005a 3183      		std Z+1,r19
 119 005c 2083      		st Z,r18
 218:Descriptors.c **** 	return Size;
 219:Descriptors.c **** }
 120               		.loc 1 219 0
 121 005e 0895      		ret
 122               		.cfi_endproc
 123               	.LFE97:
 125               	.global	ProductString
 126               		.section	.progmem.data,"a",@progbits
 129               	ProductString:
 130 0000 2E        		.byte	46
 131 0001 03        		.byte	3
 132 0002 4C00      		.string	"L"
 133 0004 5500      		.string	"U"
 134 0006 4600      		.string	"F"
 135 0008 4100      		.string	"A"
 136 000a 2000      		.string	" "
 137 000c 4D00      		.string	"M"
 138 000e 6100      		.string	"a"
 139 0010 7300      		.string	"s"
 140 0012 7300      		.string	"s"
 141 0014 2000      		.string	" "
 142 0016 5300      		.string	"S"
 143 0018 7400      		.string	"t"
 144 001a 6F00      		.string	"o"
 145 001c 7200      		.string	"r"
 146 001e 6100      		.string	"a"
 147 0020 6700      		.string	"g"
 148 0022 6500      		.string	"e"
 149 0024 2000      		.string	" "
 150 0026 4400      		.string	"D"
 151 0028 6500      		.string	"e"
 152 002a 6D00      		.string	"m"
 153 002c 6F00      		.string	"o"
 154 002e 00        		.string	""
 155 002f 00        		.string	""
 156               	.global	ManufacturerString
 159               	ManufacturerString:
 160 0030 18        		.byte	24
 161 0031 03        		.byte	3
 162 0032 4400      		.string	"D"
 163 0034 6500      		.string	"e"
 164 0036 6100      		.string	"a"
 165 0038 6E00      		.string	"n"
 166 003a 2000      		.string	" "
 167 003c 4300      		.string	"C"
 168 003e 6100      		.string	"a"
 169 0040 6D00      		.string	"m"
 170 0042 6500      		.string	"e"
 171 0044 7200      		.string	"r"
 172 0046 6100      		.string	"a"
 173 0048 00        		.string	""
 174 0049 00        		.string	""
 175               	.global	LanguageString
 178               	LanguageString:
 179 004a 04        		.byte	4
 180 004b 03        		.byte	3
 181 004c 0904      		.word	1033
 182               	.global	ConfigurationDescriptor
 185               	ConfigurationDescriptor:
 186 004e 09        		.byte	9
 187 004f 02        		.byte	2
 188 0050 2000      		.word	32
 189 0052 01        		.byte	1
 190 0053 01        		.byte	1
 191 0054 00        		.byte	0
 192 0055 80        		.byte	-128
 193 0056 32        		.byte	50
 194 0057 09        		.byte	9
 195 0058 04        		.byte	4
 196 0059 00        		.byte	0
 197 005a 00        		.byte	0
 198 005b 02        		.byte	2
 199 005c 08        		.byte	8
 200 005d 06        		.byte	6
 201 005e 50        		.byte	80
 202 005f 00        		.byte	0
 203 0060 07        		.byte	7
 204 0061 05        		.byte	5
 205 0062 83        		.byte	-125
 206 0063 02        		.byte	2
 207 0064 4000      		.word	64
 208 0066 01        		.byte	1
 209 0067 07        		.byte	7
 210 0068 05        		.byte	5
 211 0069 04        		.byte	4
 212 006a 02        		.byte	2
 213 006b 4000      		.word	64
 214 006d 01        		.byte	1
 215               	.global	DeviceDescriptor
 218               	DeviceDescriptor:
 219 006e 12        		.byte	18
 220 006f 01        		.byte	1
 221 0070 1001      		.word	272
 222 0072 00        		.byte	0
 223 0073 00        		.byte	0
 224 0074 00        		.byte	0
 225 0075 08        		.byte	8
 226 0076 EB03      		.word	1003
 227 0078 4520      		.word	8261
 228 007a 0100      		.word	1
 229 007c 01        		.byte	1
 230 007d 02        		.byte	2
 231 007e DC        		.byte	-36
 232 007f 01        		.byte	1
 233               		.text
 234               	.Letext0:
 235               		.file 2 "/usr/lib/avr/include/stdint.h"
 236               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 237               		.file 4 "../../../../LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 238               		.file 5 "../../../../LUFA/Drivers/USB/Class/Device/../Common/MassStorage.h"
 239               		.file 6 "Descriptors.h"
 240               		.file 7 "../../../../LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccTGjmmh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccTGjmmh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccTGjmmh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccTGjmmh.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccTGjmmh.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccTGjmmh.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccTGjmmh.s:14     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccTGjmmh.s:218    .progmem.data:000000000000006e DeviceDescriptor
     /tmp/ccTGjmmh.s:185    .progmem.data:000000000000004e ConfigurationDescriptor
     /tmp/ccTGjmmh.s:129    .progmem.data:0000000000000000 ProductString
     /tmp/ccTGjmmh.s:178    .progmem.data:000000000000004a LanguageString
     /tmp/ccTGjmmh.s:159    .progmem.data:0000000000000030 ManufacturerString

NO UNDEFINED SYMBOLS
