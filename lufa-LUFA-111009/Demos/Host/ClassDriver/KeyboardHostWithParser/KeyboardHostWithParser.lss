
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000239e  00002432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000239e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800124  00800124  00002456  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000071ad  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002506  00000000  00000000  000099cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003854  00000000  00000000  0000bed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bfc  00000000  00000000  0000f728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bf8  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004cf9  00000000  00000000  00012f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00017c15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c1       	rjmp	.+594    	; 0x254 <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	af c5       	rjmp	.+2910   	; 0xb88 <__vector_10>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2f c1       	rjmp	.+606    	; 0x290 <__bad_interrupt>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	19 c1       	rjmp	.+562    	; 0x290 <__bad_interrupt>
      5e:	00 00       	nop
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	15 c1       	rjmp	.+554    	; 0x290 <__bad_interrupt>
      66:	00 00       	nop
      68:	13 c1       	rjmp	.+550    	; 0x290 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ff c0       	rjmp	.+510    	; 0x290 <__bad_interrupt>
      92:	00 00       	nop
      94:	fd c0       	rjmp	.+506    	; 0x290 <__bad_interrupt>
      96:	00 00       	nop
      98:	89 03       	fmulsu	r16, r17
      9a:	7a 04       	cpc	r7, r10
      9c:	a7 03       	fmuls	r18, r23
      9e:	b1 03       	fmuls	r19, r17
      a0:	dc 03       	fmulsu	r21, r20
      a2:	04 04       	cpc	r0, r4
      a4:	0f 04       	cpc	r0, r15
      a6:	20 04       	cpc	r2, r0
      a8:	3c 04       	cpc	r3, r12
      aa:	63 04       	cpc	r6, r3

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4517>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4512>:
     131:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     141:	74 65 64 2e 0d 0a 00                                ted....

00000148 <__c.4510>:
     148:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     158:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     168:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     178:	64 20 4b 65 79 62 6f 61 72 64 2e 0d 0a 00           d Keyboard....

00000186 <__c.4508>:
     186:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     196:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a6:	6f 6e 2e 0d 0a 00                                   on....

000001ac <__c.4506>:
     1ac:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1bc:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     1cc:	6f 61 72 64 2e 0d 0a 00                             oard....

000001d4 <__c.4504>:
     1d4:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1e4:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1f4:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000201 <__c.4497>:
     201:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     211:	68 65 64 2e 0d 0a 00                                hed....

00000218 <__c.4492>:
     218:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     228:	0d 0a 00                                            ...

0000022b <__c.4471>:
     22b:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     23b:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     24b:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	d0 e2       	ldi	r29, 0x20	; 32
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	ee e9       	ldi	r30, 0x9E	; 158
     268:	f3 e2       	ldi	r31, 0x23	; 35
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0b bf       	out	0x3b, r16	; 59
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x14>
     270:	07 90       	elpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	a4 32       	cpi	r26, 0x24	; 36
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0x10>

0000027a <__do_clear_bss>:
     27a:	25 e0       	ldi	r18, 0x05	; 5
     27c:	a4 e2       	ldi	r26, 0x24	; 36
     27e:	b1 e0       	ldi	r27, 0x01	; 1
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	af 31       	cpi	r26, 0x1F	; 31
     286:	b2 07       	cpc	r27, r18
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>
     28a:	eb d0       	rcall	.+470    	; 0x462 <main>
     28c:	0c 94 cd 11 	jmp	0x239a	; 0x239a <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     292:	9b b1       	in	r25, 0x0b	; 11
     294:	9f 70       	andi	r25, 0x0F	; 15
     296:	89 2b       	or	r24, r25
     298:	8b b9       	out	0x0b, r24	; 11
     29a:	08 95       	ret

0000029c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     29c:	84 b7       	in	r24, 0x34	; 52
     29e:	87 7f       	andi	r24, 0xF7	; 247
     2a0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	a8 95       	wdr
     2a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ac:	88 61       	ori	r24, 0x18	; 24
     2ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2b6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	80 e8       	ldi	r24, 0x80	; 128
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2c8:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2ca:	83 e3       	ldi	r24, 0x33	; 51
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2d2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2d6:	86 e0       	ldi	r24, 0x06	; 6
     2d8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2dc:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     2e6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2e8:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ea:	8a b1       	in	r24, 0x0a	; 10
     2ec:	80 6f       	ori	r24, 0xF0	; 240
     2ee:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2f0:	8b b1       	in	r24, 0x0b	; 11
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2f6:	32 d4       	rcall	.+2148   	; 0xb5c <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     2f8:	a9 e1       	ldi	r26, 0x19	; 25
     2fa:	b5 e0       	ldi	r27, 0x05	; 5
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	f5 e0       	ldi	r31, 0x05	; 5
     300:	11 96       	adiw	r26, 0x01	; 1
     302:	fc 93       	st	X, r31
     304:	ee 93       	st	-X, r30
					stdout = Stream;
     306:	13 96       	adiw	r26, 0x03	; 3
     308:	fc 93       	st	X, r31
     30a:	ee 93       	st	-X, r30
     30c:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     30e:	8e e0       	ldi	r24, 0x0E	; 14
     310:	df 01       	movw	r26, r30
     312:	1d 92       	st	X+, r1
     314:	8a 95       	dec	r24
     316:	e9 f7       	brne	.-6      	; 0x312 <SetupHardware+0x76>
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	83 83       	std	Z+3, r24	; 0x03
     31c:	84 ea       	ldi	r24, 0xA4	; 164
     31e:	9e e0       	ldi	r25, 0x0E	; 14
     320:	91 87       	std	Z+9, r25	; 0x09
     322:	80 87       	std	Z+8, r24	; 0x08
     324:	8d ea       	ldi	r24, 0xAD	; 173
     326:	9e e0       	ldi	r25, 0x0E	; 14
     328:	93 87       	std	Z+11, r25	; 0x0b
     32a:	82 87       	std	Z+10, r24	; 0x0a
     32c:	08 95       	ret

0000032e <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     32e:	8f 92       	push	r8
     330:	9f 92       	push	r9
     332:	af 92       	push	r10
     334:	bf 92       	push	r11
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     34a:	0d b7       	in	r16, 0x3d	; 61
     34c:	1e b7       	in	r17, 0x3e	; 62
/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     34e:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
     352:	8b 30       	cpi	r24, 0x0B	; 11
     354:	09 f0       	breq	.+2      	; 0x358 <KeyboardHost_Task+0x2a>
     356:	73 c0       	rjmp	.+230    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	  return;
	
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <HID_Host_IsReportReceived>
     360:	88 23       	and	r24, r24
     362:	09 f4       	brne	.+2      	; 0x366 <KeyboardHost_Task+0x38>
     364:	6c c0       	rjmp	.+216    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
     366:	ed b6       	in	r14, 0x3d	; 61
     368:	fe b6       	in	r15, 0x3e	; 62
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
     36a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__DATA_REGION_ORIGIN__+0x12>
     36e:	2d b7       	in	r18, 0x3d	; 61
     370:	3e b7       	in	r19, 0x3e	; 62
     372:	28 1b       	sub	r18, r24
     374:	31 09       	sbc	r19, r1
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	3e bf       	out	0x3e, r19	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	2d bf       	out	0x3d, r18	; 61
     380:	8d b7       	in	r24, 0x3d	; 61
     382:	9e b7       	in	r25, 0x3e	; 62
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	5c 01       	movw	r10, r24
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     388:	bc 01       	movw	r22, r24
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <HID_Host_ReceiveReport>

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     392:	91 2c       	mov	r9, r1
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     394:	8a e2       	ldi	r24, 0x2A	; 42
     396:	88 2e       	mov	r8, r24
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     398:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     39c:	98 16       	cp	r9, r24
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <KeyboardHost_Task+0x74>
     3a0:	44 c0       	rjmp	.+136    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     3a2:	89 9c       	mul	r8, r9
     3a4:	60 01       	movw	r12, r0
     3a6:	11 24       	eor	r1, r1
     3a8:	b6 01       	movw	r22, r12
     3aa:	6b 5d       	subi	r22, 0xDB	; 219
     3ac:	7e 4f       	sbci	r23, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 02 0c 	call	0x1804	; 0x1804 <USB_GetHIDReportItemInfo>
     3b4:	88 23       	and	r24, r24
     3b6:	79 f1       	breq	.+94     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     3b8:	f6 01       	movw	r30, r12
     3ba:	ec 5d       	subi	r30, 0xDC	; 220
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254
     3be:	82 85       	ldd	r24, Z+10	; 0x0a
     3c0:	93 85       	ldd	r25, Z+11	; 0x0b
     3c2:	07 97       	sbiw	r24, 0x07	; 7
     3c4:	41 f5       	brne	.+80     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3c6:	81 85       	ldd	r24, Z+9	; 0x09
     3c8:	88 30       	cpi	r24, 0x08	; 8
     3ca:	29 f5       	brne	.+74     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				(ReportItem->Attributes.BitSize         == 8)                   &&
     3cc:	87 89       	ldd	r24, Z+23	; 0x17
     3ce:	90 8d       	ldd	r25, Z+24	; 0x18
     3d0:	a1 8d       	ldd	r26, Z+25	; 0x19
     3d2:	b2 8d       	ldd	r27, Z+26	; 0x1a
     3d4:	02 97       	sbiw	r24, 0x02	; 2
     3d6:	a1 05       	cpc	r26, r1
     3d8:	b1 05       	cpc	r27, r1
     3da:	e8 f0       	brcs	.+58     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     3dc:	83 81       	ldd	r24, Z+3	; 0x03
     3de:	81 11       	cpse	r24, r1
     3e0:	1a c0       	rjmp	.+52     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
			{
				/* Key code is an unsigned char in length, cast to the appropriate type */
				uint8_t KeyCode = (uint8_t)ReportItem->Value;
     3e2:	83 a1       	ldd	r24, Z+35	; 0x23

				/* If scan-code is non-zero, a key is being pressed */
				if (KeyCode)
     3e4:	88 23       	and	r24, r24
     3e6:	09 f1       	breq	.+66     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     3e8:	2b b1       	in	r18, 0x0b	; 11
     3ea:	90 e2       	ldi	r25, 0x20	; 32
     3ec:	92 27       	eor	r25, r18
     3ee:	9b b9       	out	0x0b, r25	; 11
					LEDs_ToggleLEDs(LEDS_LED2);

					char PressedKey = 0;

					/* Convert scan-code to printable character if alphanumeric */
					if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     3f0:	9c ef       	ldi	r25, 0xFC	; 252
     3f2:	98 0f       	add	r25, r24
     3f4:	9a 31       	cpi	r25, 0x1A	; 26
     3f6:	10 f4       	brcc	.+4      	; 0x3fc <KeyboardHost_Task+0xce>
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     3f8:	83 5c       	subi	r24, 0xC3	; 195
     3fa:	10 c0       	rjmp	.+32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					}
					else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     3fc:	92 ee       	ldi	r25, 0xE2	; 226
     3fe:	98 0f       	add	r25, r24
     400:	99 30       	cpi	r25, 0x09	; 9
     402:	10 f4       	brcc	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
							 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     404:	8d 5e       	subi	r24, 0xED	; 237
     406:	0a c0       	rjmp	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     408:	87 32       	cpi	r24, 0x27	; 39
     40a:	39 f0       	breq	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     40c:	8c 32       	cpi	r24, 0x2C	; 44
     40e:	99 f0       	breq	.+38     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					{
						PressedKey = ' ';
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     410:	88 32       	cpi	r24, 0x28	; 40
     412:	59 f4       	brne	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     414:	12 c0       	rjmp	.+36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     416:	93 94       	inc	r9
     418:	bf cf       	rjmp	.-130    	; 0x398 <KeyboardHost_Task+0x6a>
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
					{
						PressedKey = '0';
     41a:	80 e3       	ldi	r24, 0x30	; 48
						PressedKey = '\n';
					}

					/* Print the pressed key character out through the serial port if valid */
					if (PressedKey)
					  putchar(PressedKey);
     41c:	60 91 1b 05 	lds	r22, 0x051B	; 0x80051b <__iob+0x2>
     420:	70 91 1c 05 	lds	r23, 0x051C	; 0x80051c <__iob+0x3>
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	fe be       	out	0x3e, r15	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	ed be       	out	0x3d, r14	; 61
     434:	04 c0       	rjmp	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
					{
						PressedKey = ' ';
     436:	80 e2       	ldi	r24, 0x20	; 32
     438:	f1 cf       	rjmp	.-30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
					{
						PressedKey = '\n';
     43a:	8a e0       	ldi	r24, 0x0A	; 10
     43c:	ef cf       	rjmp	.-34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	1e bf       	out	0x3e, r17	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	0d bf       	out	0x3d, r16	; 61
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	08 95       	ret

00000462 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     462:	1c df       	rcall	.-456    	; 0x29c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     464:	8b e2       	ldi	r24, 0x2B	; 43
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	11 df       	rcall	.-478    	; 0x292 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		KeyboardHost_Task();
     470:	78 94       	sei
     472:	5d df       	rcall	.-326    	; 0x32e <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     474:	58 d6       	rcall	.+3248   	; 0x1126 <USB_USBTask>
     476:	fd cf       	rjmp	.-6      	; 0x472 <main+0x10>

00000478 <EVENT_USB_Host_DeviceAttached>:
     478:	88 e1       	ldi	r24, 0x18	; 24
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     480:	80 ea       	ldi	r24, 0xA0	; 160
     482:	07 cf       	rjmp	.-498    	; 0x292 <LEDs_SetAllLEDs>

00000484 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     48c:	80 e1       	ldi	r24, 0x10	; 16
     48e:	01 cf       	rjmp	.-510    	; 0x292 <LEDs_SetAllLEDs>

00000490 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	c2 50       	subi	r28, 0x02	; 2
     49a:	d2 40       	sbci	r29, 0x02	; 2
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	f4 de       	rcall	.-536    	; 0x292 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	32 e0       	ldi	r19, 0x02	; 2
     4ae:	ae 01       	movw	r20, r28
     4b0:	4f 5f       	subi	r20, 0xFF	; 255
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	be 01       	movw	r22, r28
     4b6:	6f 5f       	subi	r22, 0xFF	; 255
     4b8:	7d 4f       	sbci	r23, 0xFD	; 253
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	65 d4       	rcall	.+2250   	; 0xd88 <USB_Host_GetDeviceConfigDescriptor>
     4be:	88 23       	and	r24, r24
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4c2:	84 ed       	ldi	r24, 0xD4	; 212
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	18 c0       	rjmp	.+48     	; 0x4f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     4c8:	cf 5f       	subi	r28, 0xFF	; 255
     4ca:	dd 4f       	sbci	r29, 0xFD	; 253
     4cc:	68 81       	ld	r22, Y
     4ce:	79 81       	ldd	r23, Y+1	; 0x01
     4d0:	c1 50       	subi	r28, 0x01	; 1
     4d2:	d2 40       	sbci	r29, 0x02	; 2
     4d4:	ae 01       	movw	r20, r28
     4d6:	4f 5f       	subi	r20, 0xFF	; 255
     4d8:	5f 4f       	sbci	r21, 0xFF	; 255
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 b2 0c 	call	0x1964	; 0x1964 <HID_Host_ConfigurePipes>
     4e2:	88 23       	and	r24, r24
     4e4:	19 f0       	breq	.+6      	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     4e6:	8c ea       	ldi	r24, 0xAC	; 172
     4e8:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	f4 d5       	rcall	.+3048   	; 0x10d8 <USB_Host_SetDeviceConfiguration>
     4f0:	88 23       	and	r24, r24
     4f2:	31 f0       	breq	.+12     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4f4:	86 e8       	ldi	r24, 0x86	; 134
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4fc:	80 e9       	ldi	r24, 0x90	; 144
     4fe:	14 c0       	rjmp	.+40     	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Keyboard_HID_Interface) != 0)
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <HID_Host_SetReportProtocol>
     508:	88 23       	and	r24, r24
     50a:	49 f0       	breq	.+18     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Keyboard.\r\n"));
     50c:	88 e4       	ldi	r24, 0x48	; 72
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     514:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     516:	bd de       	rcall	.-646    	; 0x292 <LEDs_SetAllLEDs>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	de d5       	rcall	.+3004   	; 0x10d8 <USB_Host_SetDeviceConfiguration>
		return;
     51c:	06 c0       	rjmp	.+12     	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     51e:	81 e3       	ldi	r24, 0x31	; 49
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     526:	80 e6       	ldi	r24, 0x60	; 96
     528:	b4 de       	rcall	.-664    	; 0x292 <LEDs_SetAllLEDs>
}
     52a:	ce 5f       	subi	r28, 0xFE	; 254
     52c:	dd 4f       	sbci	r29, 0xFD	; 253
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     53e:	c8 2f       	mov	r28, r24
	USB_Disable();
     540:	a5 d2       	rcall	.+1354   	; 0xa8c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     542:	1f 92       	push	r1
     544:	cf 93       	push	r28
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     552:	80 e9       	ldi	r24, 0x90	; 144
     554:	9e de       	rcall	.-708    	; 0x292 <LEDs_SetAllLEDs>
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	ff cf       	rjmp	.-2      	; 0x55e <EVENT_USB_Host_HostError+0x20>

00000560 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     560:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <USB_HostState>
     564:	1f 92       	push	r1
     566:	9f 93       	push	r25
     568:	1f 92       	push	r1
     56a:	6f 93       	push	r22
     56c:	1f 92       	push	r1
     56e:	8f 93       	push	r24
     570:	8c ea       	ldi	r24, 0xAC	; 172
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     57c:	8d b7       	in	r24, 0x3d	; 61
     57e:	9e b7       	in	r25, 0x3e	; 62
     580:	08 96       	adiw	r24, 0x08	; 8
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	9e bf       	out	0x3e, r25	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	8d bf       	out	0x3d, r24	; 61
     58c:	80 e9       	ldi	r24, 0x90	; 144
     58e:	81 ce       	rjmp	.-766    	; 0x292 <LEDs_SetAllLEDs>

00000590 <CALLBACK_HIDParser_FilterHIDReportItem>:
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	fc 01       	movw	r30, r24
     594:	81 85       	ldd	r24, Z+9	; 0x09
     596:	92 85       	ldd	r25, Z+10	; 0x0a
     598:	07 97       	sbiw	r24, 0x07	; 7
     59a:	09 f0       	breq	.+2      	; 0x59e <CALLBACK_HIDParser_FilterHIDReportItem+0xe>
     59c:	20 e0       	ldi	r18, 0x00	; 0
}
     59e:	82 2f       	mov	r24, r18
     5a0:	08 95       	ret

000005a2 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5a2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5a6:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5a8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5ac:	9d 7f       	andi	r25, 0xFD	; 253
     5ae:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5b2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5b6:	92 60       	ori	r25, 0x02	; 2
     5b8:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5bc:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5c0:	91 fd       	sbrc	r25, 1
     5c2:	fc cf       	rjmp	.-8      	; 0x5bc <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5c4:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5c8:	91 60       	ori	r25, 0x01	; 1
     5ca:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     5ce:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5d2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5d6:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5d8:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5dc:	2f 7d       	andi	r18, 0xDF	; 223
     5de:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5e2:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5e6:	2f 7d       	andi	r18, 0xDF	; 223
     5e8:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5ec:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5ee:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5f2:	35 ff       	sbrs	r19, 5
     5f4:	0b c0       	rjmp	.+22     	; 0x60c <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5f6:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5fa:	2f 7d       	andi	r18, 0xDF	; 223
     5fc:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     600:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     604:	2d 7f       	andi	r18, 0xFD	; 253
     606:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     60a:	08 c0       	rjmp	.+16     	; 0x61c <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60c:	ef ec       	ldi	r30, 0xCF	; 207
     60e:	f7 e0       	ldi	r31, 0x07	; 7
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <USB_Host_ResetDevice+0x6e>
     614:	00 c0       	rjmp	.+0      	; 0x616 <USB_Host_ResetDevice+0x74>
     616:	00 00       	nop
     618:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     61a:	49 f7       	brne	.-46     	; 0x5ee <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     61c:	99 23       	and	r25, r25
     61e:	29 f0       	breq	.+10     	; 0x62a <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     620:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     624:	90 62       	ori	r25, 0x20	; 32
     626:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     62a:	81 11       	cpse	r24, r1
     62c:	05 c0       	rjmp	.+10     	; 0x638 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     62e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     632:	8e 7f       	andi	r24, 0xFE	; 254
     634:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     638:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     63c:	82 60       	ori	r24, 0x02	; 2
     63e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     642:	08 95       	ret

00000644 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     644:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     648:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     64a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     64e:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     650:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     654:	3f 7d       	andi	r19, 0xDF	; 223
     656:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     65a:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     65e:	3f 7d       	andi	r19, 0xDF	; 223
     660:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     664:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     668:	31 60       	ori	r19, 0x01	; 1
     66a:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     66e:	88 23       	and	r24, r24
     670:	39 f1       	breq	.+78     	; 0x6c0 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     672:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     676:	35 ff       	sbrs	r19, 5
     678:	06 c0       	rjmp	.+12     	; 0x686 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     67a:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     67e:	3f 7d       	andi	r19, 0xDF	; 223
     680:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     684:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     686:	30 91 0a 05 	lds	r19, 0x050A	; 0x80050a <USB_HostState>
     68a:	31 30       	cpi	r19, 0x01	; 1
     68c:	c1 f0       	breq	.+48     	; 0x6be <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     68e:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     692:	34 ff       	sbrs	r19, 4
     694:	09 c0       	rjmp	.+18     	; 0x6a8 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     696:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     69a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     69e:	8f 7e       	andi	r24, 0xEF	; 239
     6a0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6a4:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6a8:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     6ac:	31 ff       	sbrs	r19, 1
     6ae:	df cf       	rjmp	.-66     	; 0x66e <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6b0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6b4:	8d 7f       	andi	r24, 0xFD	; 253
     6b6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6ba:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     6be:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     6c0:	21 11       	cpse	r18, r1
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6c4:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6c8:	2e 7f       	andi	r18, 0xFE	; 254
     6ca:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6ce:	99 23       	and	r25, r25
     6d0:	29 f0       	breq	.+10     	; 0x6dc <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6d2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6d6:	90 62       	ori	r25, 0x20	; 32
     6d8:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6dc:	08 95       	ret

000006de <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6de:	ef 92       	push	r14
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	28 97       	sbiw	r28, 0x08	; 8
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6f8:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <USB_HostState>
     6fc:	8e 2f       	mov	r24, r30
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	8a 30       	cpi	r24, 0x0A	; 10
     702:	91 05       	cpc	r25, r1
     704:	08 f0       	brcs	.+2      	; 0x708 <USB_Host_ProcessNextHostState+0x2a>
     706:	f6 c0       	rjmp	.+492    	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
     708:	fc 01       	movw	r30, r24
     70a:	e4 5b       	subi	r30, 0xB4	; 180
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     712:	00 91 fe 04 	lds	r16, 0x04FE	; 0x8004fe <WaitMSRemaining.2935>
     716:	10 91 ff 04 	lds	r17, 0x04FF	; 0x8004ff <WaitMSRemaining.2935+0x1>
     71a:	01 15       	cp	r16, r1
     71c:	11 05       	cpc	r17, r1
     71e:	09 f4       	brne	.+2      	; 0x722 <USB_Host_ProcessNextHostState+0x44>
     720:	e9 c0       	rjmp	.+466    	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	8f df       	rcall	.-226    	; 0x644 <USB_Host_WaitMS>
     726:	88 23       	and	r24, r24
     728:	31 f0       	breq	.+12     	; 0x736 <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     72a:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <PostWaitState.2936>
     72e:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     732:	91 e0       	ldi	r25, 0x01	; 1
					break;
     734:	d1 c0       	rjmp	.+418    	; 0x8d8 <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     736:	01 50       	subi	r16, 0x01	; 1
     738:	11 09       	sbc	r17, r1
     73a:	10 93 ff 04 	sts	0x04FF, r17	; 0x8004ff <WaitMSRemaining.2935+0x1>
     73e:	00 93 fe 04 	sts	0x04FE, r16	; 0x8004fe <WaitMSRemaining.2935>
     742:	01 2b       	or	r16, r17
     744:	09 f0       	breq	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x6a>
     746:	d6 c0       	rjmp	.+428    	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     748:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <PostWaitState.2936>
     74c:	07 c0       	rjmp	.+14     	; 0x75c <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     74e:	88 ee       	ldi	r24, 0xE8	; 232
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     756:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
			break;
     760:	c9 c0       	rjmp	.+402    	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     762:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <WaitMSRemaining.2935>
     766:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <WaitMSRemaining.2935+0x1>
     76a:	9c 01       	movw	r18, r24
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	31 09       	sbc	r19, r1
     770:	30 93 ff 04 	sts	0x04FF, r19	; 0x8004ff <WaitMSRemaining.2935+0x1>
     774:	20 93 fe 04 	sts	0x04FE, r18	; 0x8004fe <WaitMSRemaining.2935>
     778:	89 2b       	or	r24, r25
     77a:	39 f0       	breq	.+14     	; 0x78a <USB_Host_ProcessNextHostState+0xac>
     77c:	8f ec       	ldi	r24, 0xCF	; 207
     77e:	97 e0       	ldi	r25, 0x07	; 7
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <USB_Host_ProcessNextHostState+0xa2>
     784:	00 c0       	rjmp	.+0      	; 0x786 <USB_Host_ProcessNextHostState+0xa8>
     786:	00 00       	nop
     788:	b5 c0       	rjmp	.+362    	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     78a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     78c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     790:	80 61       	ori	r24, 0x10	; 16
     792:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     796:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     79a:	8b 7f       	andi	r24, 0xFB	; 251
     79c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     7a0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     7a4:	80 61       	ori	r24, 0x10	; 16
     7a6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7aa:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     7ae:	82 60       	ori	r24, 0x02	; 2
     7b0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	d2 cf       	rjmp	.-92     	; 0x75c <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7b8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7bc:	80 ff       	sbrs	r24, 0
     7be:	9a c0       	rjmp	.+308    	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7c0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7c4:	8e 7f       	andi	r24, 0xFE	; 254
     7c6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ca:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7ce:	8d 7f       	andi	r24, 0xFD	; 253
     7d0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7d4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     7d8:	8d 7f       	andi	r24, 0xFD	; 253
     7da:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7de:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     7e2:	82 60       	ori	r24, 0x02	; 2
     7e4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7e8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7ec:	81 60       	ori	r24, 0x01	; 1
     7ee:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7f2:	e8 d0       	rcall	.+464    	; 0x9c4 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7f4:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     7f8:	84 e6       	ldi	r24, 0x64	; 100
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     800:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     804:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     806:	5c c0       	rjmp	.+184    	; 0x8c0 <USB_Host_ProcessNextHostState+0x1e2>
     808:	cc de       	rcall	.-616    	; 0x5a2 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     80a:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     80e:	88 ec       	ldi	r24, 0xC8	; 200
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     816:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	51 c0       	rjmp	.+162    	; 0x8c0 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     81e:	e1 2c       	mov	r14, r1
     820:	00 e4       	ldi	r16, 0x40	; 64
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	6f d0       	rcall	.+222    	; 0x90c <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     82e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     832:	87 fd       	sbrc	r24, 7
     834:	03 c0       	rjmp	.+6      	; 0x83c <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     836:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	4e c0       	rjmp	.+156    	; 0x8d8 <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	8e cf       	rjmp	.-228    	; 0x75c <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     840:	88 e0       	ldi	r24, 0x08	; 8
     842:	e4 e1       	ldi	r30, 0x14	; 20
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	a2 e0       	ldi	r26, 0x02	; 2
     848:	b5 e0       	ldi	r27, 0x05	; 5
     84a:	01 90       	ld	r0, Z+
     84c:	0d 92       	st	X+, r0
     84e:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     850:	e1 f7       	brne	.-8      	; 0x84a <USB_Host_ProcessNextHostState+0x16c>
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	4a d3       	rcall	.+1684   	; 0xeec <USB_Host_SendControlRequest>
     858:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     85a:	3d c0       	rjmp	.+122    	; 0x8d6 <USB_Host_ProcessNextHostState+0x1f8>
     85c:	88 85       	ldd	r24, Y+8	; 0x08
     85e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     862:	9f de       	rcall	.-706    	; 0x5a2 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     864:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     870:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	24 c0       	rjmp	.+72     	; 0x8c0 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     878:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     87c:	10 e0       	ldi	r17, 0x00	; 0
     87e:	e1 2c       	mov	r14, r1
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	41 d0       	rcall	.+130    	; 0x90c <Pipe_ConfigurePipe>
     88a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     88e:	87 ff       	sbrs	r24, 7
     890:	d2 cf       	rjmp	.-92     	; 0x836 <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     892:	88 e0       	ldi	r24, 0x08	; 8
     894:	ec e1       	ldi	r30, 0x1C	; 28
     896:	f1 e0       	ldi	r31, 0x01	; 1
     898:	a2 e0       	ldi	r26, 0x02	; 2
     89a:	b5 e0       	ldi	r27, 0x05	; 5
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8a2:	e1 f7       	brne	.-8      	; 0x89c <USB_Host_ProcessNextHostState+0x1be>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	21 d3       	rcall	.+1602   	; 0xeec <USB_Host_SendControlRequest>
     8aa:	81 11       	cpse	r24, r1
     8ac:	14 c0       	rjmp	.+40     	; 0x8d6 <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8ae:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_HostState>
     8b2:	84 e6       	ldi	r24, 0x64	; 100
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <WaitMSRemaining.2935+0x1>
     8ba:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <WaitMSRemaining.2935>
     8be:	89 e0       	ldi	r24, 0x09	; 9
     8c0:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <PostWaitState.2936>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8c4:	17 c0       	rjmp	.+46     	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     8d2:	de dd       	rcall	.-1092   	; 0x490 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8dc:	21 30       	cpi	r18, 0x01	; 1
     8de:	51 f0       	breq	.+20     	; 0x8f4 <USB_Host_ProcessNextHostState+0x216>
     8e0:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8e2:	89 2f       	mov	r24, r25
     8e4:	3d de       	rcall	.-902    	; 0x560 <EVENT_USB_Host_DeviceEnumerationFailed>
     8e6:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     8ea:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8ec:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     8f0:	c9 dd       	rcall	.-1134   	; 0x484 <EVENT_USB_Host_DeviceUnattached>
     8f2:	e4 d0       	rcall	.+456    	; 0xabc <USB_ResetInterface>
	}
}
     8f4:	28 96       	adiw	r28, 0x08	; 8
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ef 90       	pop	r14
     90a:	08 95       	ret

0000090c <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     90c:	ef 92       	push	r14
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     912:	2f 70       	andi	r18, 0x0F	; 15
     914:	42 2b       	or	r20, r18
     916:	90 e4       	ldi	r25, 0x40	; 64
     918:	69 9f       	mul	r22, r25
     91a:	b0 01       	movw	r22, r0
     91c:	11 24       	eor	r1, r1
     91e:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     920:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     922:	2e 2d       	mov	r18, r14
     924:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     926:	37 30       	cpi	r19, 0x07	; 7
     928:	08 f0       	brcs	.+2      	; 0x92c <Pipe_ConfigurePipe+0x20>
     92a:	45 c0       	rjmp	.+138    	; 0x9b6 <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     92c:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     930:	38 13       	cpse	r19, r24
     932:	13 c0       	rjmp	.+38     	; 0x95a <Pipe_ConfigurePipe+0x4e>
     934:	48 e0       	ldi	r20, 0x08	; 8
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     93a:	40 17       	cp	r20, r16
     93c:	51 07       	cpc	r21, r17
     93e:	38 f0       	brcs	.+14     	; 0x94e <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     940:	92 95       	swap	r25
     942:	90 7f       	andi	r25, 0xF0	; 240
     944:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     946:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     948:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	0e c0       	rjmp	.+28     	; 0x96a <Pipe_ConfigurePipe+0x5e>
     94e:	95 30       	cpi	r25, 0x05	; 5
     950:	b9 f3       	breq	.-18     	; 0x940 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     952:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     954:	44 0f       	add	r20, r20
     956:	55 1f       	adc	r21, r21
     958:	f0 cf       	rjmp	.-32     	; 0x93a <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     95a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     95e:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     962:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     966:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     96a:	91 fd       	sbrc	r25, 1
     96c:	02 c0       	rjmp	.+4      	; 0x972 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     96e:	3f 5f       	subi	r19, 0xFF	; 255
     970:	da cf       	rjmp	.-76     	; 0x926 <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     972:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     976:	4e 7f       	andi	r20, 0xFE	; 254
     978:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     97c:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     980:	4d 7f       	andi	r20, 0xFD	; 253
     982:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     986:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     98a:	41 60       	ori	r20, 0x01	; 1
     98c:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     990:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     994:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     998:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     99c:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9a0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9a4:	90 62       	ori	r25, 0x20	; 32
     9a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9aa:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     9ae:	97 fd       	sbrc	r25, 7
     9b0:	de cf       	rjmp	.-68     	; 0x96e <Pipe_ConfigurePipe+0x62>
		  return false;		
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9b6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ef 90       	pop	r14
     9c2:	08 95       	ret

000009c4 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9c4:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9ce:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     9d2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     9d6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9da:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9de:	9e 7f       	andi	r25, 0xFE	; 254
     9e0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	87 30       	cpi	r24, 0x07	; 7
     9e8:	81 f7       	brne	.-32     	; 0x9ca <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9ea:	08 95       	ret

000009ec <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9ec:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     9f0:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9f2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9f4:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9f8:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9fc:	27 ff       	sbrs	r18, 7
     9fe:	0f c0       	rjmp	.+30     	; 0xa1e <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a00:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     a04:	42 2f       	mov	r20, r18
     a06:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a08:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a0c:	20 73       	andi	r18, 0x30	; 48
     a0e:	20 31       	cpi	r18, 0x10	; 16
     a10:	11 f0       	breq	.+4      	; 0xa16 <Pipe_IsEndpointBound+0x2a>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <Pipe_IsEndpointBound+0x2c>
     a16:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a18:	24 2b       	or	r18, r20
     a1a:	82 17       	cp	r24, r18
     a1c:	39 f0       	breq	.+14     	; 0xa2c <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	97 30       	cpi	r25, 0x07	; 7
     a22:	41 f7       	brne	.-48     	; 0x9f4 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a24:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a2e:	08 95       	ret

00000a30 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a30:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a34:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     a38:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a3a:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a3e:	90 73       	andi	r25, 0x30	; 48
     a40:	90 31       	cpi	r25, 0x10	; 16
     a42:	29 f4       	brne	.+10     	; 0xa4e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a44:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     a48:	90 ff       	sbrs	r25, 0
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <Pipe_WaitUntilReady+0x26>
     a4c:	19 c0       	rjmp	.+50     	; 0xa80 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a4e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a52:	92 fd       	sbrc	r25, 2
     a54:	15 c0       	rjmp	.+42     	; 0xa80 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a56:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a5a:	91 fd       	sbrc	r25, 1
     a5c:	13 c0       	rjmp	.+38     	; 0xa84 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a5e:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <USB_HostState>
     a62:	91 30       	cpi	r25, 0x01	; 1
     a64:	89 f0       	breq	.+34     	; 0xa88 <Pipe_WaitUntilReady+0x58>
     a66:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a6a:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a6e:	42 17       	cp	r20, r18
     a70:	53 07       	cpc	r21, r19
     a72:	19 f3       	breq	.-58     	; 0xa3a <Pipe_WaitUntilReady+0xa>
     a74:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a76:	11 f0       	breq	.+4      	; 0xa7c <Pipe_WaitUntilReady+0x4c>
     a78:	a9 01       	movw	r20, r18
     a7a:	df cf       	rjmp	.-66     	; 0xa3a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a88:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a8a:	08 95       	ret

00000a8c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a8c:	70 d0       	rcall	.+224    	; 0xb6e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a8e:	77 d0       	rcall	.+238    	; 0xb7e <USB_INT_ClearAllInterrupts>
     a90:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	80 83       	st	Z, r24
     a9a:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	8f 77       	andi	r24, 0x7F	; 127
     aa2:	80 83       	st	Z, r24
     aa4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aa6:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	8c 91       	ld	r24, X
     aac:	8e 7f       	andi	r24, 0xFE	; 254
     aae:	8c 93       	st	X, r24
     ab0:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     ab2:	8f 7e       	andi	r24, 0xEF	; 239
     ab4:	80 83       	st	Z, r24
     ab6:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     aba:	08 95       	ret

00000abc <USB_ResetInterface>:
     abc:	58 d0       	rcall	.+176    	; 0xb6e <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     abe:	5f d0       	rcall	.+190    	; 0xb7e <USB_INT_ClearAllInterrupts>
     ac0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     aca:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ad4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ad8:	8f 7d       	andi	r24, 0xDF	; 223
     ada:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ade:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ae2:	8f 77       	andi	r24, 0x7F	; 127
     ae4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     ae8:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aea:	89 bd       	out	0x29, r24	; 41
     aec:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     aee:	89 bd       	out	0x29, r24	; 41
     af0:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     af2:	00 fe       	sbrs	r0, 0
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <USB_ResetInterface+0x34>
     af6:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     af8:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     afc:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     b00:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b02:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     b06:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b10:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b1a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b1e:	84 60       	ori	r24, 0x04	; 4
     b20:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b24:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     b28:	8f 7e       	andi	r24, 0xEF	; 239
     b2a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b2e:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     b30:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b32:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b3c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b40:	84 60       	ori	r24, 0x04	; 4
     b42:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b46:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     b50:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b54:	80 61       	ori	r24, 0x10	; 16
     b56:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b5a:	08 95       	ret

00000b5c <USB_Init>:
     b5c:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <USB_IsInitialized>

	USB_ResetInterface();
     b6c:	a7 cf       	rjmp	.-178    	; 0xabc <USB_ResetInterface>

00000b6e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b6e:	e8 ed       	ldi	r30, 0xD8	; 216
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8c 7f       	andi	r24, 0xFC	; 252
     b76:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b78:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b7c:	08 95       	ret

00000b7e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b7e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b82:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b86:	08 95       	ret

00000b88 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	0b b6       	in	r0, 0x3b	; 59
     b94:	0f 92       	push	r0
     b96:	2f 93       	push	r18
     b98:	3f 93       	push	r19
     b9a:	4f 93       	push	r20
     b9c:	5f 93       	push	r21
     b9e:	6f 93       	push	r22
     ba0:	7f 93       	push	r23
     ba2:	8f 93       	push	r24
     ba4:	9f 93       	push	r25
     ba6:	af 93       	push	r26
     ba8:	bf 93       	push	r27
     baa:	ef 93       	push	r30
     bac:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bae:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bb2:	85 ff       	sbrs	r24, 5
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bb6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bba:	85 ff       	sbrs	r24, 5
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bbe:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bc2:	8f 7d       	andi	r24, 0xDF	; 223
     bc4:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bc8:	6a d1       	rcall	.+724    	; 0xe9e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bca:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bce:	81 ff       	sbrs	r24, 1
     bd0:	15 c0       	rjmp	.+42     	; 0xbfc <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bd2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bd6:	81 ff       	sbrs	r24, 1
     bd8:	11 c0       	rjmp	.+34     	; 0xbfc <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bda:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bde:	8d 7f       	andi	r24, 0xFD	; 253
     be0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     be4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     bf8:	45 dc       	rcall	.-1910   	; 0x484 <EVENT_USB_Host_DeviceUnattached>
     bfa:	60 df       	rcall	.-320    	; 0xabc <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bfc:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c00:	81 ff       	sbrs	r24, 1
     c02:	15 c0       	rjmp	.+42     	; 0xc2e <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c04:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     c08:	81 ff       	sbrs	r24, 1
     c0a:	11 c0       	rjmp	.+34     	; 0xc2e <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c0c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     c10:	8d 7f       	andi	r24, 0xFD	; 253
     c12:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c16:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c18:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	8c dc       	rcall	.-1768   	; 0x53e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c26:	2e dc       	rcall	.-1956   	; 0x484 <EVENT_USB_Host_DeviceUnattached>
     c28:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     c2a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     c2e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c32:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c34:	17 c0       	rjmp	.+46     	; 0xc64 <__vector_10+0xdc>
     c36:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c3a:	80 ff       	sbrs	r24, 0
     c3c:	13 c0       	rjmp	.+38     	; 0xc64 <__vector_10+0xdc>
     c3e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     c48:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c52:	12 dc       	rcall	.-2012   	; 0x478 <EVENT_USB_Host_DeviceAttached>
     c54:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c58:	82 60       	ori	r24, 0x02	; 2
     c5a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c5e:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c60:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_HostState>
     c64:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c68:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <__vector_10+0x100>
     c6c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c70:	82 ff       	sbrs	r24, 2
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <__vector_10+0x100>
     c74:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c78:	8b 7f       	andi	r24, 0xFB	; 251
     c7a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	6e dc       	rcall	.-1828   	; 0x560 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c84:	ff db       	rcall	.-2050   	; 0x484 <EVENT_USB_Host_DeviceUnattached>
     c86:	1a df       	rcall	.-460    	; 0xabc <USB_ResetInterface>

		USB_ResetInterface();
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	7f 91       	pop	r23
     c96:	6f 91       	pop	r22
     c98:	5f 91       	pop	r21
     c9a:	4f 91       	pop	r20
     c9c:	3f 91       	pop	r19
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	0b be       	out	0x3b, r0	; 59
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <Pipe_Read_Stream_LE>:
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	8b 01       	movw	r16, r22
     cc2:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     cc4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     cc8:	8f 7c       	andi	r24, 0xCF	; 207
     cca:	80 61       	ori	r24, 0x10	; 16
     ccc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     cd0:	af de       	rcall	.-674    	; 0xa30 <Pipe_WaitUntilReady>
     cd2:	81 11       	cpse	r24, r1
     cd4:	32 c0       	rjmp	.+100    	; 0xd3a <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	39 f0       	breq	.+14     	; 0xcea <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     cdc:	f7 01       	movw	r30, r14
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	08 1b       	sub	r16, r24
     ce4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ce6:	c8 0f       	add	r28, r24
     ce8:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     cea:	c1 2c       	mov	r12, r1
     cec:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     cee:	01 15       	cp	r16, r1
     cf0:	11 05       	cpc	r17, r1
     cf2:	11 f1       	breq	.+68     	; 0xd38 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     cf4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     cf8:	85 fd       	sbrc	r24, 5
     cfa:	15 c0       	rjmp	.+42     	; 0xd26 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     cfc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d00:	8e 77       	andi	r24, 0x7E	; 126
     d02:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d06:	e1 14       	cp	r14, r1
     d08:	f1 04       	cpc	r15, r1
     d0a:	49 f0       	breq	.+18     	; 0xd1e <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     d0c:	f7 01       	movw	r30, r14
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	c8 0e       	add	r12, r24
     d14:	d9 1e       	adc	r13, r25
     d16:	d1 82       	std	Z+1, r13	; 0x01
     d18:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     d1a:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <Pipe_Read_Stream_LE+0x8c>
     d1e:	88 de       	rcall	.-752    	; 0xa30 <Pipe_WaitUntilReady>
     d20:	88 23       	and	r24, r24
     d22:	29 f3       	breq	.-54     	; 0xcee <Pipe_Read_Stream_LE+0x40>
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     d26:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d2a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d2c:	01 50       	subi	r16, 0x01	; 1
     d2e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     d30:	ff ef       	ldi	r31, 0xFF	; 255
     d32:	cf 1a       	sub	r12, r31
     d34:	df 0a       	sbc	r13, r31
     d36:	db cf       	rjmp	.-74     	; 0xcee <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     d38:	80 e0       	ldi	r24, 0x00	; 0
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	08 95       	ret

00000d4c <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	dc 01       	movw	r26, r24
     d52:	eb 01       	movw	r28, r22
     d54:	e8 81       	ld	r30, Y
     d56:	f9 81       	ldd	r31, Y+1	; 0x01
     d58:	20 81       	ld	r18, Z
     d5a:	8d 91       	ld	r24, X+
     d5c:	9c 91       	ld	r25, X
     d5e:	11 97       	sbiw	r26, 0x01	; 1
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	08 f4       	brcc	.+2      	; 0xd6a <USB_GetNextDescriptor+0x1e>
     d68:	9c 01       	movw	r18, r24
     d6a:	e2 0f       	add	r30, r18
     d6c:	f3 1f       	adc	r31, r19
     d6e:	eb 01       	movw	r28, r22
     d70:	f9 83       	std	Y+1, r31	; 0x01
     d72:	e8 83       	st	Y, r30
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	82 1b       	sub	r24, r18
     d7c:	93 0b       	sbc	r25, r19
     d7e:	8d 93       	st	X+, r24
     d80:	9c 93       	st	X, r25
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <USB_Host_GetDeviceConfigDescriptor>:
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	29 97       	sbiw	r28, 0x09	; 9
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	6b 01       	movw	r12, r22
     daa:	8a 01       	movw	r16, r20
     dac:	79 01       	movw	r14, r18
     dae:	90 e8       	ldi	r25, 0x80	; 128
     db0:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <USB_ControlRequest>
     db4:	96 e0       	ldi	r25, 0x06	; 6
     db6:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <USB_ControlRequest+0x1>
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	92 60       	ori	r25, 0x02	; 2
     dc0:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <USB_ControlRequest+0x3>
     dc4:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <USB_ControlRequest+0x2>
     dc8:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_ControlRequest+0x5>
     dcc:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_ControlRequest+0x4>
     dd0:	89 e0       	ldi	r24, 0x09	; 9
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <USB_ControlRequest+0x7>
     dd8:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_ControlRequest+0x6>
     ddc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	83 d0       	rcall	.+262    	; 0xeec <USB_Host_SendControlRequest>
     de6:	81 11       	cpse	r24, r1
     de8:	19 c0       	rjmp	.+50     	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x94>
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	f6 01       	movw	r30, r12
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
     df4:	e8 16       	cp	r14, r24
     df6:	f9 06       	cpc	r15, r25
     df8:	70 f0       	brcs	.+28     	; 0xe16 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     dfa:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <USB_ControlRequest+0x7>
     dfe:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_ControlRequest+0x6>
     e02:	c8 01       	movw	r24, r16
     e04:	73 d0       	rcall	.+230    	; 0xeec <USB_Host_SendControlRequest>
     e06:	81 11       	cpse	r24, r1
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e0a:	f8 01       	movw	r30, r16
     e0c:	81 81       	ldd	r24, Z+1	; 0x01
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	21 f4       	brne	.+8      	; 0xe1a <USB_Host_GetDeviceConfigDescriptor+0x92>
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	29 96       	adiw	r28, 0x09	; 9
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	08 95       	ret

00000e3a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	8c 01       	movw	r16, r24
     e50:	eb 01       	movw	r28, r22
     e52:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e54:	f8 01       	movw	r30, r16
     e56:	e0 80       	ld	r14, Z
     e58:	f1 80       	ldd	r15, Z+1	; 0x01
     e5a:	e1 14       	cp	r14, r1
     e5c:	f1 04       	cpc	r15, r1
     e5e:	99 f0       	breq	.+38     	; 0xe86 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e60:	a8 80       	ld	r10, Y
     e62:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     e64:	be 01       	movw	r22, r28
     e66:	c8 01       	movw	r24, r16
     e68:	71 df       	rcall	.-286    	; 0xd4c <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e6a:	88 81       	ld	r24, Y
     e6c:	99 81       	ldd	r25, Y+1	; 0x01
     e6e:	f6 01       	movw	r30, r12
     e70:	09 95       	icall
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	79 f3       	breq	.-34     	; 0xe54 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	39 f4       	brne	.+14     	; 0xe88 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     e7a:	b9 82       	std	Y+1, r11	; 0x01
     e7c:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     e7e:	f8 01       	movw	r30, r16
     e80:	f1 82       	std	Z+1, r15	; 0x01
     e82:	e0 82       	st	Z, r14
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e86:	82 e0       	ldi	r24, 0x02	; 2
}
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	bf 90       	pop	r11
     e9a:	af 90       	pop	r10
     e9c:	08 95       	ret

00000e9e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e9e:	08 95       	ret

00000ea0 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ea8:	c9 ee       	ldi	r28, 0xE9	; 233
     eaa:	d3 e0       	ldi	r29, 0x03	; 3
     eac:	11 11       	cpse	r17, r1
     eae:	0c c0       	rjmp	.+24     	; 0xec8 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     eb0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     eb4:	83 fd       	sbrc	r24, 3
     eb6:	15 c0       	rjmp	.+42     	; 0xee2 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	c4 db       	rcall	.-2168   	; 0x644 <USB_Host_WaitMS>
     ebc:	81 11       	cpse	r24, r1
     ebe:	12 c0       	rjmp	.+36     	; 0xee4 <USB_Host_WaitForIOS+0x44>
     ec0:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ec2:	a1 f7       	brne	.-24     	; 0xeac <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	0e c0       	rjmp	.+28     	; 0xee4 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ec8:	11 30       	cpi	r17, 0x01	; 1
     eca:	29 f4       	brne	.+10     	; 0xed6 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ecc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	f2 cf       	rjmp	.-28     	; 0xeb8 <USB_Host_WaitForIOS+0x18>
     ed4:	06 c0       	rjmp	.+12     	; 0xee2 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ed6:	12 30       	cpi	r17, 0x02	; 2
     ed8:	79 f7       	brne	.-34     	; 0xeb8 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     eda:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     ede:	82 ff       	sbrs	r24, 2
     ee0:	eb cf       	rjmp	.-42     	; 0xeb8 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ef8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f00:	c0 91 08 05 	lds	r28, 0x0508	; 0x800508 <USB_ControlRequest+0x6>
     f04:	d0 91 09 05 	lds	r29, 0x0509	; 0x800509 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f08:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	97 db       	rcall	.-2258   	; 0x644 <USB_Host_WaitMS>
     f16:	81 11       	cpse	r24, r1
     f18:	c8 c0       	rjmp	.+400    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f1a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f1e:	8f 7c       	andi	r24, 0xCF	; 207
     f20:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f24:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     f28:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f2c:	8f 7e       	andi	r24, 0xEF	; 239
     f2e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f32:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f36:	8f 7b       	andi	r24, 0xBF	; 191
     f38:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f3c:	e2 e0       	ldi	r30, 0x02	; 2
     f3e:	f5 e0       	ldi	r31, 0x05	; 5
     f40:	8a e0       	ldi	r24, 0x0A	; 10
     f42:	95 e0       	ldi	r25, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     f44:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f46:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f4a:	8e 17       	cp	r24, r30
     f4c:	9f 07       	cpc	r25, r31
     f4e:	d1 f7       	brne	.-12     	; 0xf44 <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f50:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f54:	87 77       	andi	r24, 0x77	; 119
     f56:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	a1 df       	rcall	.-190    	; 0xea0 <USB_Host_WaitForIOS>
     f5e:	81 11       	cpse	r24, r1
     f60:	a4 c0       	rjmp	.+328    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f62:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	6a db       	rcall	.-2348   	; 0x644 <USB_Host_WaitMS>
     f70:	81 11       	cpse	r24, r1
     f72:	9b c0       	rjmp	.+310    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f74:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <USB_ControlRequest>
     f78:	87 ff       	sbrs	r24, 7
     f7a:	4e c0       	rjmp	.+156    	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f7c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f80:	8f 7c       	andi	r24, 0xCF	; 207
     f82:	80 61       	ori	r24, 0x10	; 16
     f84:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f88:	01 15       	cp	r16, r1
     f8a:	11 05       	cpc	r17, r1
     f8c:	09 f0       	breq	.+2      	; 0xf90 <USB_Host_SendControlRequest+0xa4>
     f8e:	3a c0       	rjmp	.+116    	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     f90:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f94:	8f 7c       	andi	r24, 0xCF	; 207
     f96:	80 62       	ori	r24, 0x20	; 32
     f98:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f9c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fa0:	8f 7b       	andi	r24, 0xBF	; 191
     fa2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	7b df       	rcall	.-266    	; 0xea0 <USB_Host_WaitForIOS>
     faa:	81 11       	cpse	r24, r1
     fac:	7e c0       	rjmp	.+252    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fae:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fb2:	8b 77       	andi	r24, 0x7B	; 123
     fb4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	72 df       	rcall	.-284    	; 0xea0 <USB_Host_WaitForIOS>
     fbc:	76 c0       	rjmp	.+236    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fbe:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	6a df       	rcall	.-300    	; 0xea0 <USB_Host_WaitForIOS>
     fcc:	81 11       	cpse	r24, r1
     fce:	6d c0       	rjmp	.+218    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fd0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     fd4:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     fd8:	89 2b       	or	r24, r25
     fda:	11 f4       	brne	.+4      	; 0xfe0 <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
     fdc:	c0 e0       	ldi	r28, 0x00	; 0
     fde:	d0 e0       	ldi	r29, 0x00	; 0
     fe0:	f8 01       	movw	r30, r16
     fe2:	8f 01       	movw	r16, r30
     fe4:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     fe8:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
     fec:	89 2b       	or	r24, r25
     fee:	69 f4       	brne	.+26     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ffa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ffe:	8e 77       	andi	r24, 0x7E	; 126
    1000:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1004:	20 97       	sbiw	r28, 0x00	; 0
    1006:	d9 f6       	brne	.-74     	; 0xfbe <USB_Host_SendControlRequest+0xd2>
    1008:	c3 cf       	rjmp	.-122    	; 0xf90 <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    100a:	20 97       	sbiw	r28, 0x00	; 0
    100c:	89 f3       	breq	.-30     	; 0xff0 <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    100e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    1012:	81 93       	st	Z+, r24
					DataLen--;
    1014:	21 97       	sbiw	r28, 0x01	; 1
    1016:	e5 cf       	rjmp	.-54     	; 0xfe2 <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1018:	01 15       	cp	r16, r1
    101a:	11 05       	cpc	r17, r1
    101c:	91 f1       	breq	.+100    	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    101e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1022:	8f 7c       	andi	r24, 0xCF	; 207
    1024:	80 62       	ori	r24, 0x20	; 32
    1026:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    102a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    102e:	8f 7b       	andi	r24, 0xBF	; 191
    1030:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1038:	e1 f0       	breq	.+56     	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    103a:	32 df       	rcall	.-412    	; 0xea0 <USB_Host_WaitForIOS>
    103c:	81 11       	cpse	r24, r1
    103e:	35 c0       	rjmp	.+106    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1040:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1044:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1048:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	28 17       	cp	r18, r24
    1050:	39 07       	cpc	r19, r25
    1052:	48 f4       	brcc	.+18     	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>
				{
					Pipe_Write_8(*(DataStream++));
    1054:	0f 5f       	subi	r16, 0xFF	; 255
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	f8 01       	movw	r30, r16
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    105e:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    1062:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1064:	69 f7       	brne	.-38     	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>
    1066:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    106a:	8b 77       	andi	r24, 0x7B	; 123
    106c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1070:	e1 cf       	rjmp	.-62     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1072:	16 df       	rcall	.-468    	; 0xea0 <USB_Host_WaitForIOS>
    1074:	81 11       	cpse	r24, r1
    1076:	19 c0       	rjmp	.+50     	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1078:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1082:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1086:	8f 7c       	andi	r24, 0xCF	; 207
    1088:	80 61       	ori	r24, 0x10	; 16
    108a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1092:	8f 7b       	andi	r24, 0xBF	; 191
    1094:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	02 df       	rcall	.-508    	; 0xea0 <USB_Host_WaitForIOS>
    109c:	81 11       	cpse	r24, r1
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10a0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10a4:	9e 77       	andi	r25, 0x7E	; 126
    10a6:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10aa:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10ae:	90 64       	ori	r25, 0x40	; 64
    10b0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    10b4:	f1 10       	cpse	r15, r1
    10b6:	05 c0       	rjmp	.+10     	; 0x10c2 <__EEPROM_REGION_LENGTH__+0xc2>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10b8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    10bc:	9e 7f       	andi	r25, 0xFE	; 254
    10be:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    10c8:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	08 95       	ret

000010d8 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    10d8:	cf 93       	push	r28
    10da:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    10dc:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <USB_ControlRequest>
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <USB_ControlRequest+0x1>
    10e6:	8c 2f       	mov	r24, r28
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <USB_ControlRequest+0x3>
    10ee:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <USB_ControlRequest+0x2>
    10f2:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_ControlRequest+0x5>
    10f6:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_ControlRequest+0x4>
    10fa:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <USB_ControlRequest+0x7>
    10fe:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1102:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	f0 de       	rcall	.-544    	; 0xeec <USB_Host_SendControlRequest>
    110c:	81 11       	cpse	r24, r1
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1110:	c0 93 00 05 	sts	0x0500, r28	; 0x800500 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1114:	c1 11       	cpse	r28, r1
    1116:	02 c0       	rjmp	.+4      	; 0x111c <USB_Host_SetDeviceConfiguration+0x44>
    1118:	9a e0       	ldi	r25, 0x0A	; 10
    111a:	01 c0       	rjmp	.+2      	; 0x111e <USB_Host_SetDeviceConfiguration+0x46>
    111c:	9b e0       	ldi	r25, 0x0B	; 11
    111e:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <USB_HostState>
	}

	return ErrorCode;
}
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    112c:	c7 ea       	ldi	r28, 0xA7	; 167
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	18 81       	ld	r17, Y
    1132:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1134:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1136:	d3 da       	rcall	.-2650   	; 0x6de <USB_Host_ProcessNextHostState>
    1138:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <USB_ProcessHIDReport>:
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
    1142:	2f 92       	push	r2
    1144:	3f 92       	push	r3
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	cc 58       	subi	r28, 0x8C	; 140
    116c:	d1 09       	sbc	r29, r1
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	6c 01       	movw	r12, r24
    117a:	e7 96       	adiw	r28, 0x37	; 55
    117c:	7f af       	std	Y+63, r23	; 0x3f
    117e:	6e af       	std	Y+62, r22	; 0x3e
    1180:	e7 97       	sbiw	r28, 0x37	; 55
    1182:	1a 01       	movw	r2, r20
    1184:	9a 01       	movw	r18, r20
    1186:	20 57       	subi	r18, 0x70	; 112
    1188:	3c 4f       	sbci	r19, 0xFC	; 252
    118a:	e9 96       	adiw	r28, 0x39	; 57
    118c:	3f af       	std	Y+63, r19	; 0x3f
    118e:	2e af       	std	Y+62, r18	; 0x3e
    1190:	e9 97       	sbiw	r28, 0x39	; 57
    1192:	89 ed       	ldi	r24, 0xD9	; 217
    1194:	93 e0       	ldi	r25, 0x03	; 3
    1196:	da 01       	movw	r26, r20
    1198:	fc 01       	movw	r30, r24
    119a:	1d 92       	st	X+, r1
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	e9 f7       	brne	.-6      	; 0x119a <USB_ProcessHIDReport+0x58>
    11a0:	fe 01       	movw	r30, r28
    11a2:	31 96       	adiw	r30, 0x01	; 1
    11a4:	8c e1       	ldi	r24, 0x1C	; 28
    11a6:	df 01       	movw	r26, r30
    11a8:	1d 92       	st	X+, r1
    11aa:	8a 95       	dec	r24
    11ac:	e9 f7       	brne	.-6      	; 0x11a8 <USB_ProcessHIDReport+0x66>
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	d9 01       	movw	r26, r18
    11b2:	1d 92       	st	X+, r1
    11b4:	8a 95       	dec	r24
    11b6:	e9 f7       	brne	.-6      	; 0x11b2 <USB_ProcessHIDReport+0x70>
    11b8:	21 50       	subi	r18, 0x01	; 1
    11ba:	31 09       	sbc	r19, r1
    11bc:	c1 58       	subi	r28, 0x81	; 129
    11be:	df 4f       	sbci	r29, 0xFF	; 255
    11c0:	39 83       	std	Y+1, r19	; 0x01
    11c2:	28 83       	st	Y, r18
    11c4:	cf 57       	subi	r28, 0x7F	; 127
    11c6:	d0 40       	sbci	r29, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	d9 01       	movw	r26, r18
    11cc:	8c 93       	st	X, r24
    11ce:	ed 96       	adiw	r28, 0x3d	; 61
    11d0:	1c ae       	std	Y+60, r1	; 0x3c
    11d2:	1d ae       	std	Y+61, r1	; 0x3d
    11d4:	1e ae       	std	Y+62, r1	; 0x3e
    11d6:	1f ae       	std	Y+63, r1	; 0x3f
    11d8:	ed 97       	sbiw	r28, 0x3d	; 61
    11da:	41 2c       	mov	r4, r1
    11dc:	51 2c       	mov	r5, r1
    11de:	32 01       	movw	r6, r4
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	e5 96       	adiw	r28, 0x35	; 53
    11e4:	1f ae       	std	Y+63, r1	; 0x3f
    11e6:	1e ae       	std	Y+62, r1	; 0x3e
    11e8:	e5 97       	sbiw	r28, 0x35	; 53
    11ea:	7f 01       	movw	r14, r30
    11ec:	fa 01       	movw	r30, r20
    11ee:	ea 52       	subi	r30, 0x2A	; 42
    11f0:	fc 4f       	sbci	r31, 0xFC	; 252
    11f2:	cf 57       	subi	r28, 0x7F	; 127
    11f4:	df 4f       	sbci	r29, 0xFF	; 255
    11f6:	f9 83       	std	Y+1, r31	; 0x01
    11f8:	e8 83       	st	Y, r30
    11fa:	c1 58       	subi	r28, 0x81	; 129
    11fc:	d0 40       	sbci	r29, 0x00	; 0
    11fe:	27 50       	subi	r18, 0x07	; 7
    1200:	31 09       	sbc	r19, r1
    1202:	c7 57       	subi	r28, 0x77	; 119
    1204:	df 4f       	sbci	r29, 0xFF	; 255
    1206:	39 83       	std	Y+1, r19	; 0x01
    1208:	28 83       	st	Y, r18
    120a:	c9 58       	subi	r28, 0x89	; 137
    120c:	d0 40       	sbci	r29, 0x00	; 0
    120e:	48 52       	subi	r20, 0x28	; 40
    1210:	5c 4f       	sbci	r21, 0xFC	; 252
    1212:	cd 57       	subi	r28, 0x7D	; 125
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	59 83       	std	Y+1, r21	; 0x01
    1218:	48 83       	st	Y, r20
    121a:	c3 58       	subi	r28, 0x83	; 131
    121c:	d0 40       	sbci	r29, 0x00	; 0
    121e:	c5 57       	subi	r28, 0x75	; 117
    1220:	df 4f       	sbci	r29, 0xFF	; 255
    1222:	b9 83       	std	Y+1, r27	; 0x01
    1224:	a8 83       	st	Y, r26
    1226:	cb 58       	subi	r28, 0x8B	; 139
    1228:	d0 40       	sbci	r29, 0x00	; 0
    122a:	e7 96       	adiw	r28, 0x37	; 55
    122c:	2e ad       	ldd	r18, Y+62	; 0x3e
    122e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1230:	e7 97       	sbiw	r28, 0x37	; 55
    1232:	23 2b       	or	r18, r19
    1234:	09 f4       	brne	.+2      	; 0x1238 <USB_ProcessHIDReport+0xf6>
    1236:	b9 c2       	rjmp	.+1394   	; 0x17aa <USB_ProcessHIDReport+0x668>
    1238:	d6 01       	movw	r26, r12
    123a:	bc 91       	ld	r27, X
    123c:	ef 96       	adiw	r28, 0x3f	; 63
    123e:	bf af       	std	Y+63, r27	; 0x3f
    1240:	ef 97       	sbiw	r28, 0x3f	; 63
    1242:	8b 2f       	mov	r24, r27
    1244:	83 70       	andi	r24, 0x03	; 3
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	49 f1       	breq	.+82     	; 0x129c <USB_ProcessHIDReport+0x15a>
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	99 f0       	breq	.+38     	; 0x1274 <USB_ProcessHIDReport+0x132>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	c9 f1       	breq	.+114    	; 0x12c4 <USB_ProcessHIDReport+0x182>
    1252:	ef ef       	ldi	r30, 0xFF	; 255
    1254:	ce 1a       	sub	r12, r30
    1256:	de 0a       	sbc	r13, r30
    1258:	e7 96       	adiw	r28, 0x37	; 55
    125a:	2e ad       	ldd	r18, Y+62	; 0x3e
    125c:	3f ad       	ldd	r19, Y+63	; 0x3f
    125e:	e7 97       	sbiw	r28, 0x37	; 55
    1260:	21 50       	subi	r18, 0x01	; 1
    1262:	31 09       	sbc	r19, r1
    1264:	e7 96       	adiw	r28, 0x37	; 55
    1266:	3f af       	std	Y+63, r19	; 0x3f
    1268:	2e af       	std	Y+62, r18	; 0x3e
    126a:	e7 97       	sbiw	r28, 0x37	; 55
    126c:	81 2c       	mov	r8, r1
    126e:	91 2c       	mov	r9, r1
    1270:	54 01       	movw	r10, r8
    1272:	3a c0       	rjmp	.+116    	; 0x12e8 <USB_ProcessHIDReport+0x1a6>
    1274:	d6 01       	movw	r26, r12
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	8d 90       	ld	r8, X+
    127a:	9d 90       	ld	r9, X+
    127c:	ad 90       	ld	r10, X+
    127e:	bc 90       	ld	r11, X
    1280:	14 97       	sbiw	r26, 0x04	; 4
    1282:	e7 96       	adiw	r28, 0x37	; 55
    1284:	ee ad       	ldd	r30, Y+62	; 0x3e
    1286:	ff ad       	ldd	r31, Y+63	; 0x3f
    1288:	e7 97       	sbiw	r28, 0x37	; 55
    128a:	35 97       	sbiw	r30, 0x05	; 5
    128c:	e7 96       	adiw	r28, 0x37	; 55
    128e:	ff af       	std	Y+63, r31	; 0x3f
    1290:	ee af       	std	Y+62, r30	; 0x3e
    1292:	e7 97       	sbiw	r28, 0x37	; 55
    1294:	f5 e0       	ldi	r31, 0x05	; 5
    1296:	cf 0e       	add	r12, r31
    1298:	d1 1c       	adc	r13, r1
    129a:	26 c0       	rjmp	.+76     	; 0x12e8 <USB_ProcessHIDReport+0x1a6>
    129c:	d6 01       	movw	r26, r12
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	8d 90       	ld	r8, X+
    12a2:	9c 90       	ld	r9, X
    12a4:	12 97       	sbiw	r26, 0x02	; 2
    12a6:	a1 2c       	mov	r10, r1
    12a8:	b1 2c       	mov	r11, r1
    12aa:	e7 96       	adiw	r28, 0x37	; 55
    12ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    12ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    12b0:	e7 97       	sbiw	r28, 0x37	; 55
    12b2:	33 97       	sbiw	r30, 0x03	; 3
    12b4:	e7 96       	adiw	r28, 0x37	; 55
    12b6:	ff af       	std	Y+63, r31	; 0x3f
    12b8:	ee af       	std	Y+62, r30	; 0x3e
    12ba:	e7 97       	sbiw	r28, 0x37	; 55
    12bc:	f3 e0       	ldi	r31, 0x03	; 3
    12be:	cf 0e       	add	r12, r31
    12c0:	d1 1c       	adc	r13, r1
    12c2:	12 c0       	rjmp	.+36     	; 0x12e8 <USB_ProcessHIDReport+0x1a6>
    12c4:	d6 01       	movw	r26, r12
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	8c 90       	ld	r8, X
    12ca:	91 2c       	mov	r9, r1
    12cc:	a1 2c       	mov	r10, r1
    12ce:	b1 2c       	mov	r11, r1
    12d0:	e7 96       	adiw	r28, 0x37	; 55
    12d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    12d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    12d6:	e7 97       	sbiw	r28, 0x37	; 55
    12d8:	32 97       	sbiw	r30, 0x02	; 2
    12da:	e7 96       	adiw	r28, 0x37	; 55
    12dc:	ff af       	std	Y+63, r31	; 0x3f
    12de:	ee af       	std	Y+62, r30	; 0x3e
    12e0:	e7 97       	sbiw	r28, 0x37	; 55
    12e2:	f2 e0       	ldi	r31, 0x02	; 2
    12e4:	cf 0e       	add	r12, r31
    12e6:	d1 1c       	adc	r13, r1
    12e8:	ef 96       	adiw	r28, 0x3f	; 63
    12ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    12ec:	ef 97       	sbiw	r28, 0x3f	; 63
    12ee:	1c 7f       	andi	r17, 0xFC	; 252
    12f0:	14 36       	cpi	r17, 0x64	; 100
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <USB_ProcessHIDReport+0x1b4>
    12f4:	9d c0       	rjmp	.+314    	; 0x1430 <USB_ProcessHIDReport+0x2ee>
    12f6:	88 f5       	brcc	.+98     	; 0x135a <USB_ProcessHIDReport+0x218>
    12f8:	14 32       	cpi	r17, 0x24	; 36
    12fa:	09 f4       	brne	.+2      	; 0x12fe <USB_ProcessHIDReport+0x1bc>
    12fc:	83 c0       	rjmp	.+262    	; 0x1404 <USB_ProcessHIDReport+0x2c2>
    12fe:	b0 f4       	brcc	.+44     	; 0x132c <USB_ProcessHIDReport+0x1ea>
    1300:	18 30       	cpi	r17, 0x08	; 8
    1302:	09 f4       	brne	.+2      	; 0x1306 <USB_ProcessHIDReport+0x1c4>
    1304:	ff c0       	rjmp	.+510    	; 0x1504 <USB_ProcessHIDReport+0x3c2>
    1306:	48 f4       	brcc	.+18     	; 0x131a <USB_ProcessHIDReport+0x1d8>
    1308:	14 30       	cpi	r17, 0x04	; 4
    130a:	09 f0       	breq	.+2      	; 0x130e <USB_ProcessHIDReport+0x1cc>
    130c:	3d c2       	rjmp	.+1146   	; 0x1788 <USB_ProcessHIDReport+0x646>
    130e:	d7 01       	movw	r26, r14
    1310:	12 96       	adiw	r26, 0x02	; 2
    1312:	9c 92       	st	X, r9
    1314:	8e 92       	st	-X, r8
    1316:	11 97       	sbiw	r26, 0x01	; 1
    1318:	37 c2       	rjmp	.+1134   	; 0x1788 <USB_ProcessHIDReport+0x646>
    131a:	14 31       	cpi	r17, 0x14	; 20
    131c:	09 f4       	brne	.+2      	; 0x1320 <USB_ProcessHIDReport+0x1de>
    131e:	6c c0       	rjmp	.+216    	; 0x13f8 <USB_ProcessHIDReport+0x2b6>
    1320:	18 31       	cpi	r17, 0x18	; 24
    1322:	09 f0       	breq	.+2      	; 0x1326 <USB_ProcessHIDReport+0x1e4>
    1324:	31 c2       	rjmp	.+1122   	; 0x1788 <USB_ProcessHIDReport+0x646>
    1326:	24 01       	movw	r4, r8
    1328:	35 01       	movw	r6, r10
    132a:	2e c2       	rjmp	.+1116   	; 0x1788 <USB_ProcessHIDReport+0x646>
    132c:	14 33       	cpi	r17, 0x34	; 52
    132e:	09 f4       	brne	.+2      	; 0x1332 <USB_ProcessHIDReport+0x1f0>
    1330:	71 c0       	rjmp	.+226    	; 0x1414 <USB_ProcessHIDReport+0x2d2>
    1332:	50 f4       	brcc	.+20     	; 0x1348 <USB_ProcessHIDReport+0x206>
    1334:	18 32       	cpi	r17, 0x28	; 40
    1336:	09 f0       	breq	.+2      	; 0x133a <USB_ProcessHIDReport+0x1f8>
    1338:	27 c2       	rjmp	.+1102   	; 0x1788 <USB_ProcessHIDReport+0x646>
    133a:	ed 96       	adiw	r28, 0x3d	; 61
    133c:	8c ae       	std	Y+60, r8	; 0x3c
    133e:	9d ae       	std	Y+61, r9	; 0x3d
    1340:	ae ae       	std	Y+62, r10	; 0x3e
    1342:	bf ae       	std	Y+63, r11	; 0x3f
    1344:	ed 97       	sbiw	r28, 0x3d	; 61
    1346:	20 c2       	rjmp	.+1088   	; 0x1788 <USB_ProcessHIDReport+0x646>
    1348:	14 34       	cpi	r17, 0x44	; 68
    134a:	09 f4       	brne	.+2      	; 0x134e <USB_ProcessHIDReport+0x20c>
    134c:	69 c0       	rjmp	.+210    	; 0x1420 <USB_ProcessHIDReport+0x2de>
    134e:	14 35       	cpi	r17, 0x54	; 84
    1350:	09 f0       	breq	.+2      	; 0x1354 <USB_ProcessHIDReport+0x212>
    1352:	1a c2       	rjmp	.+1076   	; 0x1788 <USB_ProcessHIDReport+0x646>
    1354:	f7 01       	movw	r30, r14
    1356:	81 86       	std	Z+9, r8	; 0x09
    1358:	17 c2       	rjmp	.+1070   	; 0x1788 <USB_ProcessHIDReport+0x646>
    135a:	14 39       	cpi	r17, 0x94	; 148
    135c:	09 f4       	brne	.+2      	; 0x1360 <USB_ProcessHIDReport+0x21e>
    135e:	70 c0       	rjmp	.+224    	; 0x1440 <USB_ProcessHIDReport+0x2fe>
    1360:	78 f4       	brcc	.+30     	; 0x1380 <USB_ProcessHIDReport+0x23e>
    1362:	10 38       	cpi	r17, 0x80	; 128
    1364:	e1 f0       	breq	.+56     	; 0x139e <USB_ProcessHIDReport+0x25c>
    1366:	30 f4       	brcc	.+12     	; 0x1374 <USB_ProcessHIDReport+0x232>
    1368:	14 37       	cpi	r17, 0x74	; 116
    136a:	09 f0       	breq	.+2      	; 0x136e <USB_ProcessHIDReport+0x22c>
    136c:	0d c2       	rjmp	.+1050   	; 0x1788 <USB_ProcessHIDReport+0x646>
    136e:	f7 01       	movw	r30, r14
    1370:	80 82       	st	Z, r8
    1372:	0a c2       	rjmp	.+1044   	; 0x1788 <USB_ProcessHIDReport+0x646>
    1374:	14 38       	cpi	r17, 0x84	; 132
    1376:	09 f4       	brne	.+2      	; 0x137a <USB_ProcessHIDReport+0x238>
    1378:	67 c0       	rjmp	.+206    	; 0x1448 <USB_ProcessHIDReport+0x306>
    137a:	10 39       	cpi	r17, 0x90	; 144
    137c:	81 f0       	breq	.+32     	; 0x139e <USB_ProcessHIDReport+0x25c>
    137e:	04 c2       	rjmp	.+1032   	; 0x1788 <USB_ProcessHIDReport+0x646>
    1380:	10 3b       	cpi	r17, 0xB0	; 176
    1382:	69 f0       	breq	.+26     	; 0x139e <USB_ProcessHIDReport+0x25c>
    1384:	30 f4       	brcc	.+12     	; 0x1392 <USB_ProcessHIDReport+0x250>
    1386:	10 3a       	cpi	r17, 0xA0	; 160
    1388:	09 f4       	brne	.+2      	; 0x138c <USB_ProcessHIDReport+0x24a>
    138a:	ca c0       	rjmp	.+404    	; 0x1520 <USB_ProcessHIDReport+0x3de>
    138c:	14 3a       	cpi	r17, 0xA4	; 164
    138e:	c9 f0       	breq	.+50     	; 0x13c2 <USB_ProcessHIDReport+0x280>
    1390:	fb c1       	rjmp	.+1014   	; 0x1788 <USB_ProcessHIDReport+0x646>
    1392:	14 3b       	cpi	r17, 0xB4	; 180
    1394:	39 f1       	breq	.+78     	; 0x13e4 <USB_ProcessHIDReport+0x2a2>
    1396:	10 3c       	cpi	r17, 0xC0	; 192
    1398:	09 f4       	brne	.+2      	; 0x139c <USB_ProcessHIDReport+0x25a>
    139a:	2a c1       	rjmp	.+596    	; 0x15f0 <USB_ProcessHIDReport+0x4ae>
    139c:	f5 c1       	rjmp	.+1002   	; 0x1788 <USB_ProcessHIDReport+0x646>
    139e:	ee 96       	adiw	r28, 0x3e	; 62
    13a0:	1f ae       	std	Y+63, r1	; 0x3f
    13a2:	ee 97       	sbiw	r28, 0x3e	; 62
    13a4:	a5 01       	movw	r20, r10
    13a6:	94 01       	movw	r18, r8
    13a8:	21 70       	andi	r18, 0x01	; 1
    13aa:	33 27       	eor	r19, r19
    13ac:	44 27       	eor	r20, r20
    13ae:	55 27       	eor	r21, r21
    13b0:	cb 57       	subi	r28, 0x7B	; 123
    13b2:	df 4f       	sbci	r29, 0xFF	; 255
    13b4:	28 83       	st	Y, r18
    13b6:	39 83       	std	Y+1, r19	; 0x01
    13b8:	4a 83       	std	Y+2, r20	; 0x02
    13ba:	5b 83       	std	Y+3, r21	; 0x03
    13bc:	c5 58       	subi	r28, 0x85	; 133
    13be:	d0 40       	sbci	r29, 0x00	; 0
    13c0:	47 c1       	rjmp	.+654    	; 0x1650 <USB_ProcessHIDReport+0x50e>
    13c2:	ce 01       	movw	r24, r28
    13c4:	4d 96       	adiw	r24, 0x1d	; 29
    13c6:	e8 16       	cp	r14, r24
    13c8:	f9 06       	cpc	r15, r25
    13ca:	09 f4       	brne	.+2      	; 0x13ce <USB_ProcessHIDReport+0x28c>
    13cc:	f4 c1       	rjmp	.+1000   	; 0x17b6 <USB_ProcessHIDReport+0x674>
    13ce:	c7 01       	movw	r24, r14
    13d0:	4c 96       	adiw	r24, 0x1c	; 28
    13d2:	2a e2       	ldi	r18, 0x2A	; 42
    13d4:	f7 01       	movw	r30, r14
    13d6:	dc 01       	movw	r26, r24
    13d8:	01 90       	ld	r0, Z+
    13da:	0d 92       	st	X+, r0
    13dc:	2a 95       	dec	r18
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <USB_ProcessHIDReport+0x296>
    13e0:	7c 01       	movw	r14, r24
    13e2:	d2 c1       	rjmp	.+932    	; 0x1788 <USB_ProcessHIDReport+0x646>
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	8e 15       	cp	r24, r14
    13ea:	9f 05       	cpc	r25, r15
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <USB_ProcessHIDReport+0x2ae>
    13ee:	e5 c1       	rjmp	.+970    	; 0x17ba <USB_ProcessHIDReport+0x678>
    13f0:	3c e1       	ldi	r19, 0x1C	; 28
    13f2:	e3 1a       	sub	r14, r19
    13f4:	f1 08       	sbc	r15, r1
    13f6:	c8 c1       	rjmp	.+912    	; 0x1788 <USB_ProcessHIDReport+0x646>
    13f8:	f7 01       	movw	r30, r14
    13fa:	82 86       	std	Z+10, r8	; 0x0a
    13fc:	93 86       	std	Z+11, r9	; 0x0b
    13fe:	a4 86       	std	Z+12, r10	; 0x0c
    1400:	b5 86       	std	Z+13, r11	; 0x0d
    1402:	c2 c1       	rjmp	.+900    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1404:	d7 01       	movw	r26, r14
    1406:	1e 96       	adiw	r26, 0x0e	; 14
    1408:	8d 92       	st	X+, r8
    140a:	9d 92       	st	X+, r9
    140c:	ad 92       	st	X+, r10
    140e:	bc 92       	st	X, r11
    1410:	51 97       	sbiw	r26, 0x11	; 17
    1412:	ba c1       	rjmp	.+884    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1414:	f7 01       	movw	r30, r14
    1416:	82 8a       	std	Z+18, r8	; 0x12
    1418:	93 8a       	std	Z+19, r9	; 0x13
    141a:	a4 8a       	std	Z+20, r10	; 0x14
    141c:	b5 8a       	std	Z+21, r11	; 0x15
    141e:	b4 c1       	rjmp	.+872    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1420:	d7 01       	movw	r26, r14
    1422:	56 96       	adiw	r26, 0x16	; 22
    1424:	8d 92       	st	X+, r8
    1426:	9d 92       	st	X+, r9
    1428:	ad 92       	st	X+, r10
    142a:	bc 92       	st	X, r11
    142c:	59 97       	sbiw	r26, 0x19	; 25
    142e:	ac c1       	rjmp	.+856    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1430:	d7 01       	movw	r26, r14
    1432:	15 96       	adiw	r26, 0x05	; 5
    1434:	8d 92       	st	X+, r8
    1436:	9d 92       	st	X+, r9
    1438:	ad 92       	st	X+, r10
    143a:	bc 92       	st	X, r11
    143c:	18 97       	sbiw	r26, 0x08	; 8
    143e:	a4 c1       	rjmp	.+840    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1440:	d7 01       	movw	r26, r14
    1442:	5a 96       	adiw	r26, 0x1a	; 26
    1444:	8c 92       	st	X, r8
    1446:	a0 c1       	rjmp	.+832    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1448:	98 2d       	mov	r25, r8
    144a:	f7 01       	movw	r30, r14
    144c:	83 8e       	std	Z+27, r8	; 0x1b
    144e:	cd 57       	subi	r28, 0x7D	; 125
    1450:	df 4f       	sbci	r29, 0xFF	; 255
    1452:	a8 81       	ld	r26, Y
    1454:	b9 81       	ldd	r27, Y+1	; 0x01
    1456:	c3 58       	subi	r28, 0x83	; 131
    1458:	d0 40       	sbci	r29, 0x00	; 0
    145a:	8c 91       	ld	r24, X
    145c:	88 23       	and	r24, r24
    145e:	09 f4       	brne	.+2      	; 0x1462 <USB_ProcessHIDReport+0x320>
    1460:	41 c0       	rjmp	.+130    	; 0x14e4 <USB_ProcessHIDReport+0x3a2>
    1462:	c5 57       	subi	r28, 0x75	; 117
    1464:	df 4f       	sbci	r29, 0xFF	; 255
    1466:	e8 81       	ld	r30, Y
    1468:	f9 81       	ldd	r31, Y+1	; 0x01
    146a:	cb 58       	subi	r28, 0x8B	; 139
    146c:	d0 40       	sbci	r29, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	f1 01       	movw	r30, r2
    1472:	e0 57       	subi	r30, 0x70	; 112
    1474:	fc 4f       	sbci	r31, 0xFC	; 252
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	28 17       	cp	r18, r24
    147c:	b8 f4       	brcc	.+46     	; 0x14ac <USB_ProcessHIDReport+0x36a>
    147e:	a9 01       	movw	r20, r18
    1480:	60 81       	ld	r22, Z
    1482:	2f 5f       	subi	r18, 0xFF	; 255
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	37 96       	adiw	r30, 0x07	; 7
    1488:	96 13       	cpse	r25, r22
    148a:	f7 cf       	rjmp	.-18     	; 0x147a <USB_ProcessHIDReport+0x338>
    148c:	27 e0       	ldi	r18, 0x07	; 7
    148e:	24 9f       	mul	r18, r20
    1490:	c0 01       	movw	r24, r0
    1492:	25 9f       	mul	r18, r21
    1494:	90 0d       	add	r25, r0
    1496:	11 24       	eor	r1, r1
    1498:	80 57       	subi	r24, 0x70	; 112
    149a:	9c 4f       	sbci	r25, 0xFC	; 252
    149c:	91 01       	movw	r18, r2
    149e:	28 0f       	add	r18, r24
    14a0:	39 1f       	adc	r19, r25
    14a2:	e9 96       	adiw	r28, 0x39	; 57
    14a4:	3f af       	std	Y+63, r19	; 0x3f
    14a6:	2e af       	std	Y+62, r18	; 0x3e
    14a8:	e9 97       	sbiw	r28, 0x39	; 57
    14aa:	1c c0       	rjmp	.+56     	; 0x14e4 <USB_ProcessHIDReport+0x3a2>
    14ac:	8a 30       	cpi	r24, 0x0A	; 10
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <USB_ProcessHIDReport+0x370>
    14b0:	8e c1       	rjmp	.+796    	; 0x17ce <USB_ProcessHIDReport+0x68c>
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	98 0f       	add	r25, r24
    14b6:	c1 58       	subi	r28, 0x81	; 129
    14b8:	df 4f       	sbci	r29, 0xFF	; 255
    14ba:	a8 81       	ld	r26, Y
    14bc:	b9 81       	ldd	r27, Y+1	; 0x01
    14be:	cf 57       	subi	r28, 0x7F	; 127
    14c0:	d0 40       	sbci	r29, 0x00	; 0
    14c2:	9c 93       	st	X, r25
    14c4:	97 e0       	ldi	r25, 0x07	; 7
    14c6:	91 01       	movw	r18, r2
    14c8:	98 9f       	mul	r25, r24
    14ca:	20 0d       	add	r18, r0
    14cc:	31 1d       	adc	r19, r1
    14ce:	11 24       	eor	r1, r1
    14d0:	f9 01       	movw	r30, r18
    14d2:	e0 57       	subi	r30, 0x70	; 112
    14d4:	fc 4f       	sbci	r31, 0xFC	; 252
    14d6:	e9 96       	adiw	r28, 0x39	; 57
    14d8:	ff af       	std	Y+63, r31	; 0x3f
    14da:	ee af       	std	Y+62, r30	; 0x3e
    14dc:	e9 97       	sbiw	r28, 0x39	; 57
    14de:	11 92       	st	Z+, r1
    14e0:	9a 95       	dec	r25
    14e2:	e9 f7       	brne	.-6      	; 0x14de <USB_ProcessHIDReport+0x39c>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	cd 57       	subi	r28, 0x7D	; 125
    14e8:	df 4f       	sbci	r29, 0xFF	; 255
    14ea:	a8 81       	ld	r26, Y
    14ec:	b9 81       	ldd	r27, Y+1	; 0x01
    14ee:	c3 58       	subi	r28, 0x83	; 131
    14f0:	d0 40       	sbci	r29, 0x00	; 0
    14f2:	8c 93       	st	X, r24
    14f4:	f7 01       	movw	r30, r14
    14f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    14f8:	e9 96       	adiw	r28, 0x39	; 57
    14fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    14fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    14fe:	e9 97       	sbiw	r28, 0x39	; 57
    1500:	8c 93       	st	X, r24
    1502:	42 c1       	rjmp	.+644    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1504:	08 30       	cpi	r16, 0x08	; 8
    1506:	09 f4       	brne	.+2      	; 0x150a <USB_ProcessHIDReport+0x3c8>
    1508:	5a c1       	rjmp	.+692    	; 0x17be <USB_ProcessHIDReport+0x67c>
    150a:	fe 01       	movw	r30, r28
    150c:	ed 59       	subi	r30, 0x9D	; 157
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	e0 0f       	add	r30, r16
    1512:	f1 1d       	adc	r31, r1
    1514:	e0 0f       	add	r30, r16
    1516:	f1 1d       	adc	r31, r1
    1518:	91 82       	std	Z+1, r9	; 0x01
    151a:	80 82       	st	Z, r8
    151c:	0f 5f       	subi	r16, 0xFF	; 255
    151e:	34 c1       	rjmp	.+616    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1520:	e5 96       	adiw	r28, 0x35	; 53
    1522:	ee ad       	ldd	r30, Y+62	; 0x3e
    1524:	ff ad       	ldd	r31, Y+63	; 0x3f
    1526:	e5 97       	sbiw	r28, 0x35	; 53
    1528:	ef 2b       	or	r30, r31
    152a:	41 f4       	brne	.+16     	; 0x153c <USB_ProcessHIDReport+0x3fa>
    152c:	91 01       	movw	r18, r2
    152e:	27 5b       	subi	r18, 0xB7	; 183
    1530:	3c 4f       	sbci	r19, 0xFC	; 252
    1532:	e5 96       	adiw	r28, 0x35	; 53
    1534:	3f af       	std	Y+63, r19	; 0x3f
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	e5 97       	sbiw	r28, 0x35	; 53
    153a:	1d c0       	rjmp	.+58     	; 0x1576 <USB_ProcessHIDReport+0x434>
    153c:	f1 01       	movw	r30, r2
    153e:	e0 5b       	subi	r30, 0xB0	; 176
    1540:	fc 4f       	sbci	r31, 0xFC	; 252
    1542:	85 81       	ldd	r24, Z+5	; 0x05
    1544:	96 81       	ldd	r25, Z+6	; 0x06
    1546:	89 2b       	or	r24, r25
    1548:	61 f0       	breq	.+24     	; 0x1562 <USB_ProcessHIDReport+0x420>
    154a:	c7 57       	subi	r28, 0x77	; 119
    154c:	df 4f       	sbci	r29, 0xFF	; 255
    154e:	48 81       	ld	r20, Y
    1550:	59 81       	ldd	r21, Y+1	; 0x01
    1552:	c9 58       	subi	r28, 0x89	; 137
    1554:	d0 40       	sbci	r29, 0x00	; 0
    1556:	e4 17       	cp	r30, r20
    1558:	f5 07       	cpc	r31, r21
    155a:	09 f4       	brne	.+2      	; 0x155e <USB_ProcessHIDReport+0x41c>
    155c:	32 c1       	rjmp	.+612    	; 0x17c2 <USB_ProcessHIDReport+0x680>
    155e:	37 96       	adiw	r30, 0x07	; 7
    1560:	f0 cf       	rjmp	.-32     	; 0x1542 <USB_ProcessHIDReport+0x400>
    1562:	e5 96       	adiw	r28, 0x35	; 53
    1564:	8e ad       	ldd	r24, Y+62	; 0x3e
    1566:	9f ad       	ldd	r25, Y+63	; 0x3f
    1568:	e5 97       	sbiw	r28, 0x35	; 53
    156a:	96 83       	std	Z+6, r25	; 0x06
    156c:	85 83       	std	Z+5, r24	; 0x05
    156e:	e5 96       	adiw	r28, 0x35	; 53
    1570:	ff af       	std	Y+63, r31	; 0x3f
    1572:	ee af       	std	Y+62, r30	; 0x3e
    1574:	e5 97       	sbiw	r28, 0x35	; 53
    1576:	e5 96       	adiw	r28, 0x35	; 53
    1578:	ae ad       	ldd	r26, Y+62	; 0x3e
    157a:	bf ad       	ldd	r27, Y+63	; 0x3f
    157c:	e5 97       	sbiw	r28, 0x35	; 53
    157e:	8c 92       	st	X, r8
    1580:	f7 01       	movw	r30, r14
    1582:	81 81       	ldd	r24, Z+1	; 0x01
    1584:	92 81       	ldd	r25, Z+2	; 0x02
    1586:	12 96       	adiw	r26, 0x02	; 2
    1588:	9c 93       	st	X, r25
    158a:	8e 93       	st	-X, r24
    158c:	11 97       	sbiw	r26, 0x01	; 1
    158e:	00 23       	and	r16, r16
    1590:	a9 f0       	breq	.+42     	; 0x15bc <USB_ProcessHIDReport+0x47a>
    1592:	a5 96       	adiw	r28, 0x25	; 37
    1594:	8e ad       	ldd	r24, Y+62	; 0x3e
    1596:	9f ad       	ldd	r25, Y+63	; 0x3f
    1598:	a5 97       	sbiw	r28, 0x25	; 37
    159a:	14 96       	adiw	r26, 0x04	; 4
    159c:	9c 93       	st	X, r25
    159e:	8e 93       	st	-X, r24
    15a0:	13 97       	sbiw	r26, 0x03	; 3
    15a2:	fe 01       	movw	r30, r28
    15a4:	ed 59       	subi	r30, 0x9D	; 157
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	22 81       	ldd	r18, Z+2	; 0x02
    15ac:	33 81       	ldd	r19, Z+3	; 0x03
    15ae:	21 93       	st	Z+, r18
    15b0:	31 93       	st	Z+, r19
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	08 13       	cpse	r16, r24
    15b6:	f9 cf       	rjmp	.-14     	; 0x15aa <USB_ProcessHIDReport+0x468>
    15b8:	01 50       	subi	r16, 0x01	; 1
    15ba:	e6 c0       	rjmp	.+460    	; 0x1788 <USB_ProcessHIDReport+0x646>
    15bc:	ed 96       	adiw	r28, 0x3d	; 61
    15be:	2c ad       	ldd	r18, Y+60	; 0x3c
    15c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    15c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    15c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    15c6:	ed 97       	sbiw	r28, 0x3d	; 61
    15c8:	24 15       	cp	r18, r4
    15ca:	35 05       	cpc	r19, r5
    15cc:	46 05       	cpc	r20, r6
    15ce:	57 05       	cpc	r21, r7
    15d0:	08 f4       	brcc	.+2      	; 0x15d4 <USB_ProcessHIDReport+0x492>
    15d2:	da c0       	rjmp	.+436    	; 0x1788 <USB_ProcessHIDReport+0x646>
    15d4:	e5 96       	adiw	r28, 0x35	; 53
    15d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    15d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    15da:	e5 97       	sbiw	r28, 0x35	; 53
    15dc:	14 96       	adiw	r26, 0x04	; 4
    15de:	5c 92       	st	X, r5
    15e0:	4e 92       	st	-X, r4
    15e2:	13 97       	sbiw	r26, 0x03	; 3
    15e4:	bf ef       	ldi	r27, 0xFF	; 255
    15e6:	4b 1a       	sub	r4, r27
    15e8:	5b 0a       	sbc	r5, r27
    15ea:	6b 0a       	sbc	r6, r27
    15ec:	7b 0a       	sbc	r7, r27
    15ee:	cc c0       	rjmp	.+408    	; 0x1788 <USB_ProcessHIDReport+0x646>
    15f0:	e5 96       	adiw	r28, 0x35	; 53
    15f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    15f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15f6:	e5 97       	sbiw	r28, 0x35	; 53
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	09 f4       	brne	.+2      	; 0x15fe <USB_ProcessHIDReport+0x4bc>
    15fc:	e4 c0       	rjmp	.+456    	; 0x17c6 <USB_ProcessHIDReport+0x684>
    15fe:	25 81       	ldd	r18, Z+5	; 0x05
    1600:	36 81       	ldd	r19, Z+6	; 0x06
    1602:	e5 96       	adiw	r28, 0x35	; 53
    1604:	3f af       	std	Y+63, r19	; 0x3f
    1606:	2e af       	std	Y+62, r18	; 0x3e
    1608:	e5 97       	sbiw	r28, 0x35	; 53
    160a:	be c0       	rjmp	.+380    	; 0x1788 <USB_ProcessHIDReport+0x646>
    160c:	d1 01       	movw	r26, r2
    160e:	ea e2       	ldi	r30, 0x2A	; 42
    1610:	e8 9f       	mul	r30, r24
    1612:	a0 0d       	add	r26, r0
    1614:	b1 1d       	adc	r27, r1
    1616:	11 24       	eor	r1, r1
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	fe 01       	movw	r30, r28
    161c:	f9 96       	adiw	r30, 0x39	; 57
    161e:	8a e2       	ldi	r24, 0x2A	; 42
    1620:	01 90       	ld	r0, Z+
    1622:	0d 92       	st	X+, r0
    1624:	8a 95       	dec	r24
    1626:	e1 f7       	brne	.-8      	; 0x1620 <USB_ProcessHIDReport+0x4de>
    1628:	cb 57       	subi	r28, 0x7B	; 123
    162a:	df 4f       	sbci	r29, 0xFF	; 255
    162c:	28 81       	ld	r18, Y
    162e:	39 81       	ldd	r19, Y+1	; 0x01
    1630:	4a 81       	ldd	r20, Y+2	; 0x02
    1632:	5b 81       	ldd	r21, Y+3	; 0x03
    1634:	c5 58       	subi	r28, 0x85	; 133
    1636:	d0 40       	sbci	r29, 0x00	; 0
    1638:	23 2b       	or	r18, r19
    163a:	24 2b       	or	r18, r20
    163c:	25 2b       	or	r18, r21
    163e:	09 f4       	brne	.+2      	; 0x1642 <USB_ProcessHIDReport+0x500>
    1640:	97 c0       	rjmp	.+302    	; 0x1770 <USB_ProcessHIDReport+0x62e>
    1642:	ee 96       	adiw	r28, 0x3e	; 62
    1644:	bf ad       	ldd	r27, Y+63	; 0x3f
    1646:	ee 97       	sbiw	r28, 0x3e	; 62
    1648:	bf 5f       	subi	r27, 0xFF	; 255
    164a:	ee 96       	adiw	r28, 0x3e	; 62
    164c:	bf af       	std	Y+63, r27	; 0x3f
    164e:	ee 97       	sbiw	r28, 0x3e	; 62
    1650:	f7 01       	movw	r30, r14
    1652:	82 8d       	ldd	r24, Z+26	; 0x1a
    1654:	ee 96       	adiw	r28, 0x3e	; 62
    1656:	ff ad       	ldd	r31, Y+63	; 0x3f
    1658:	ee 97       	sbiw	r28, 0x3e	; 62
    165a:	f8 17       	cp	r31, r24
    165c:	08 f0       	brcs	.+2      	; 0x1660 <USB_ProcessHIDReport+0x51e>
    165e:	94 c0       	rjmp	.+296    	; 0x1788 <USB_ProcessHIDReport+0x646>
    1660:	8a e1       	ldi	r24, 0x1A	; 26
    1662:	f7 01       	movw	r30, r14
    1664:	de 01       	movw	r26, r28
    1666:	af 5b       	subi	r26, 0xBF	; 191
    1668:	bf 4f       	sbci	r27, 0xFF	; 255
    166a:	01 90       	ld	r0, Z+
    166c:	0d 92       	st	X+, r0
    166e:	8a 95       	dec	r24
    1670:	e1 f7       	brne	.-8      	; 0x166a <USB_ProcessHIDReport+0x528>
    1672:	9d ae       	std	Y+61, r9	; 0x3d
    1674:	8c ae       	std	Y+60, r8	; 0x3c
    1676:	e5 96       	adiw	r28, 0x35	; 53
    1678:	4e ad       	ldd	r20, Y+62	; 0x3e
    167a:	5f ad       	ldd	r21, Y+63	; 0x3f
    167c:	e5 97       	sbiw	r28, 0x35	; 53
    167e:	21 96       	adiw	r28, 0x01	; 1
    1680:	5f af       	std	Y+63, r21	; 0x3f
    1682:	4e af       	std	Y+62, r20	; 0x3e
    1684:	21 97       	sbiw	r28, 0x01	; 1
    1686:	d7 01       	movw	r26, r14
    1688:	5b 96       	adiw	r26, 0x1b	; 27
    168a:	8c 91       	ld	r24, X
    168c:	8e af       	std	Y+62, r24	; 0x3e
    168e:	00 23       	and	r16, r16
    1690:	a9 f0       	breq	.+42     	; 0x16bc <USB_ProcessHIDReport+0x57a>
    1692:	a5 96       	adiw	r28, 0x25	; 37
    1694:	8e ad       	ldd	r24, Y+62	; 0x3e
    1696:	9f ad       	ldd	r25, Y+63	; 0x3f
    1698:	a5 97       	sbiw	r28, 0x25	; 37
    169a:	26 96       	adiw	r28, 0x06	; 6
    169c:	9f af       	std	Y+63, r25	; 0x3f
    169e:	8e af       	std	Y+62, r24	; 0x3e
    16a0:	26 97       	sbiw	r28, 0x06	; 6
    16a2:	fe 01       	movw	r30, r28
    16a4:	ed 59       	subi	r30, 0x9D	; 157
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	22 81       	ldd	r18, Z+2	; 0x02
    16ac:	33 81       	ldd	r19, Z+3	; 0x03
    16ae:	21 93       	st	Z+, r18
    16b0:	31 93       	st	Z+, r19
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	08 13       	cpse	r16, r24
    16b6:	f9 cf       	rjmp	.-14     	; 0x16aa <USB_ProcessHIDReport+0x568>
    16b8:	01 50       	subi	r16, 0x01	; 1
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <USB_ProcessHIDReport+0x5a2>
    16bc:	ed 96       	adiw	r28, 0x3d	; 61
    16be:	2c ad       	ldd	r18, Y+60	; 0x3c
    16c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    16c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    16c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    16c6:	ed 97       	sbiw	r28, 0x3d	; 61
    16c8:	24 15       	cp	r18, r4
    16ca:	35 05       	cpc	r19, r5
    16cc:	46 05       	cpc	r20, r6
    16ce:	57 05       	cpc	r21, r7
    16d0:	48 f0       	brcs	.+18     	; 0x16e4 <USB_ProcessHIDReport+0x5a2>
    16d2:	26 96       	adiw	r28, 0x06	; 6
    16d4:	5f ae       	std	Y+63, r5	; 0x3f
    16d6:	4e ae       	std	Y+62, r4	; 0x3e
    16d8:	26 97       	sbiw	r28, 0x06	; 6
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	43 1a       	sub	r4, r19
    16de:	53 0a       	sbc	r5, r19
    16e0:	63 0a       	sbc	r6, r19
    16e2:	73 0a       	sbc	r7, r19
    16e4:	10 38       	cpi	r17, 0x80	; 128
    16e6:	11 f4       	brne	.+4      	; 0x16ec <USB_ProcessHIDReport+0x5aa>
    16e8:	1b ae       	std	Y+59, r1	; 0x3b
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <USB_ProcessHIDReport+0x5b8>
    16ec:	10 39       	cpi	r17, 0x90	; 144
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <USB_ProcessHIDReport+0x5b4>
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	4b af       	std	Y+59, r20	; 0x3b
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <USB_ProcessHIDReport+0x5b8>
    16f6:	52 e0       	ldi	r21, 0x02	; 2
    16f8:	5b af       	std	Y+59, r21	; 0x3b
    16fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    16fc:	e9 96       	adiw	r28, 0x39	; 57
    16fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1700:	ff ad       	ldd	r31, Y+63	; 0x3f
    1702:	e9 97       	sbiw	r28, 0x39	; 57
    1704:	e8 0f       	add	r30, r24
    1706:	f1 1d       	adc	r31, r1
    1708:	e8 0f       	add	r30, r24
    170a:	f1 1d       	adc	r31, r1
    170c:	81 81       	ldd	r24, Z+1	; 0x01
    170e:	92 81       	ldd	r25, Z+2	; 0x02
    1710:	9a af       	std	Y+58, r25	; 0x3a
    1712:	89 af       	std	Y+57, r24	; 0x39
    1714:	d7 01       	movw	r26, r14
    1716:	2c 91       	ld	r18, X
    1718:	81 81       	ldd	r24, Z+1	; 0x01
    171a:	92 81       	ldd	r25, Z+2	; 0x02
    171c:	82 0f       	add	r24, r18
    171e:	91 1d       	adc	r25, r1
    1720:	92 83       	std	Z+2, r25	; 0x02
    1722:	81 83       	std	Z+1, r24	; 0x01
    1724:	8b ad       	ldd	r24, Y+59	; 0x3b
    1726:	e9 96       	adiw	r28, 0x39	; 57
    1728:	ee ad       	ldd	r30, Y+62	; 0x3e
    172a:	ff ad       	ldd	r31, Y+63	; 0x3f
    172c:	e9 97       	sbiw	r28, 0x39	; 57
    172e:	e8 0f       	add	r30, r24
    1730:	f1 1d       	adc	r31, r1
    1732:	e8 0f       	add	r30, r24
    1734:	f1 1d       	adc	r31, r1
    1736:	cf 57       	subi	r28, 0x7F	; 127
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	a8 81       	ld	r26, Y
    173c:	b9 81       	ldd	r27, Y+1	; 0x01
    173e:	c1 58       	subi	r28, 0x81	; 129
    1740:	d0 40       	sbci	r29, 0x00	; 0
    1742:	2d 91       	ld	r18, X+
    1744:	3c 91       	ld	r19, X
    1746:	81 81       	ldd	r24, Z+1	; 0x01
    1748:	92 81       	ldd	r25, Z+2	; 0x02
    174a:	82 17       	cp	r24, r18
    174c:	93 07       	cpc	r25, r19
    174e:	08 f4       	brcc	.+2      	; 0x1752 <USB_ProcessHIDReport+0x610>
    1750:	c9 01       	movw	r24, r18
    1752:	cf 57       	subi	r28, 0x7F	; 127
    1754:	df 4f       	sbci	r29, 0xFF	; 255
    1756:	e8 81       	ld	r30, Y
    1758:	f9 81       	ldd	r31, Y+1	; 0x01
    175a:	c1 58       	subi	r28, 0x81	; 129
    175c:	d0 40       	sbci	r29, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	d1 01       	movw	r26, r2
    1764:	8c 91       	ld	r24, X
    1766:	84 31       	cpi	r24, 0x14	; 20
    1768:	09 f0       	breq	.+2      	; 0x176c <USB_ProcessHIDReport+0x62a>
    176a:	50 cf       	rjmp	.-352    	; 0x160c <USB_ProcessHIDReport+0x4ca>
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	30 c0       	rjmp	.+96     	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    1770:	ce 01       	movw	r24, r28
    1772:	c9 96       	adiw	r24, 0x39	; 57
    1774:	0e 94 c8 02 	call	0x590	; 0x590 <CALLBACK_HIDParser_FilterHIDReportItem>
    1778:	88 23       	and	r24, r24
    177a:	09 f4       	brne	.+2      	; 0x177e <USB_ProcessHIDReport+0x63c>
    177c:	62 cf       	rjmp	.-316    	; 0x1642 <USB_ProcessHIDReport+0x500>
    177e:	d1 01       	movw	r26, r2
    1780:	8c 91       	ld	r24, X
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	8c 93       	st	X, r24
    1786:	5d cf       	rjmp	.-326    	; 0x1642 <USB_ProcessHIDReport+0x500>
    1788:	ef 96       	adiw	r28, 0x3f	; 63
    178a:	8f ad       	ldd	r24, Y+63	; 0x3f
    178c:	ef 97       	sbiw	r28, 0x3f	; 63
    178e:	8c 70       	andi	r24, 0x0C	; 12
    1790:	09 f0       	breq	.+2      	; 0x1794 <USB_ProcessHIDReport+0x652>
    1792:	4b cd       	rjmp	.-1386   	; 0x122a <USB_ProcessHIDReport+0xe8>
    1794:	ed 96       	adiw	r28, 0x3d	; 61
    1796:	1c ae       	std	Y+60, r1	; 0x3c
    1798:	1d ae       	std	Y+61, r1	; 0x3d
    179a:	1e ae       	std	Y+62, r1	; 0x3e
    179c:	1f ae       	std	Y+63, r1	; 0x3f
    179e:	ed 97       	sbiw	r28, 0x3d	; 61
    17a0:	41 2c       	mov	r4, r1
    17a2:	51 2c       	mov	r5, r1
    17a4:	32 01       	movw	r6, r4
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	40 cd       	rjmp	.-1408   	; 0x122a <USB_ProcessHIDReport+0xe8>
    17aa:	d1 01       	movw	r26, r2
    17ac:	8c 91       	ld	r24, X
    17ae:	88 23       	and	r24, r24
    17b0:	61 f0       	breq	.+24     	; 0x17ca <USB_ProcessHIDReport+0x688>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0b c0       	rjmp	.+22     	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17be:	86 e0       	ldi	r24, 0x06	; 6
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17ca:	88 e0       	ldi	r24, 0x08	; 8
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <USB_ProcessHIDReport+0x68e>
    17ce:	87 e0       	ldi	r24, 0x07	; 7
    17d0:	c4 57       	subi	r28, 0x74	; 116
    17d2:	df 4f       	sbci	r29, 0xFF	; 255
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
    17ec:	cf 90       	pop	r12
    17ee:	bf 90       	pop	r11
    17f0:	af 90       	pop	r10
    17f2:	9f 90       	pop	r9
    17f4:	8f 90       	pop	r8
    17f6:	7f 90       	pop	r7
    17f8:	6f 90       	pop	r6
    17fa:	5f 90       	pop	r5
    17fc:	4f 90       	pop	r4
    17fe:	3f 90       	pop	r3
    1800:	2f 90       	pop	r2
    1802:	08 95       	ret

00001804 <USB_GetHIDReportItemInfo>:
    1804:	8f 92       	push	r8
    1806:	9f 92       	push	r9
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	fb 01       	movw	r30, r22
    1816:	30 97       	sbiw	r30, 0x00	; 0
    1818:	09 f4       	brne	.+2      	; 0x181c <USB_GetHIDReportItemInfo+0x18>
    181a:	48 c0       	rjmp	.+144    	; 0x18ac <USB_GetHIDReportItemInfo+0xa8>
    181c:	25 81       	ldd	r18, Z+5	; 0x05
    181e:	22 23       	and	r18, r18
    1820:	29 f0       	breq	.+10     	; 0x182c <USB_GetHIDReportItemInfo+0x28>
    1822:	dc 01       	movw	r26, r24
    1824:	3c 91       	ld	r19, X
    1826:	23 13       	cpse	r18, r19
    1828:	41 c0       	rjmp	.+130    	; 0x18ac <USB_GetHIDReportItemInfo+0xa8>
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	20 85       	ldd	r18, Z+8	; 0x08
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	c2 a0       	ldd	r12, Z+34	; 0x22
    1836:	d3 a0       	ldd	r13, Z+35	; 0x23
    1838:	e4 a0       	ldd	r14, Z+36	; 0x24
    183a:	f5 a0       	ldd	r15, Z+37	; 0x25
    183c:	c6 a2       	std	Z+38, r12	; 0x26
    183e:	d7 a2       	std	Z+39, r13	; 0x27
    1840:	e0 a6       	std	Z+40, r14	; 0x28
    1842:	f1 a6       	std	Z+41, r15	; 0x29
    1844:	12 a2       	std	Z+34, r1	; 0x22
    1846:	13 a2       	std	Z+35, r1	; 0x23
    1848:	14 a2       	std	Z+36, r1	; 0x24
    184a:	15 a2       	std	Z+37, r1	; 0x25
    184c:	c1 2c       	mov	r12, r1
    184e:	d1 2c       	mov	r13, r1
    1850:	76 01       	movw	r14, r12
    1852:	c3 94       	inc	r12
    1854:	21 50       	subi	r18, 0x01	; 1
    1856:	31 09       	sbc	r19, r1
    1858:	38 f1       	brcs	.+78     	; 0x18a8 <USB_GetHIDReportItemInfo+0xa4>
    185a:	db 01       	movw	r26, r22
    185c:	53 e0       	ldi	r21, 0x03	; 3
    185e:	b6 95       	lsr	r27
    1860:	a7 95       	ror	r26
    1862:	5a 95       	dec	r21
    1864:	e1 f7       	brne	.-8      	; 0x185e <USB_GetHIDReportItemInfo+0x5a>
    1866:	a8 0f       	add	r26, r24
    1868:	b9 1f       	adc	r27, r25
    186a:	4c 91       	ld	r20, X
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	db 01       	movw	r26, r22
    1870:	a7 70       	andi	r26, 0x07	; 7
    1872:	bb 27       	eor	r27, r27
    1874:	02 c0       	rjmp	.+4      	; 0x187a <USB_GetHIDReportItemInfo+0x76>
    1876:	55 95       	asr	r21
    1878:	47 95       	ror	r20
    187a:	aa 95       	dec	r26
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <USB_GetHIDReportItemInfo+0x72>
    187e:	40 ff       	sbrs	r20, 0
    1880:	0c c0       	rjmp	.+24     	; 0x189a <USB_GetHIDReportItemInfo+0x96>
    1882:	82 a0       	ldd	r8, Z+34	; 0x22
    1884:	93 a0       	ldd	r9, Z+35	; 0x23
    1886:	a4 a0       	ldd	r10, Z+36	; 0x24
    1888:	b5 a0       	ldd	r11, Z+37	; 0x25
    188a:	8c 28       	or	r8, r12
    188c:	9d 28       	or	r9, r13
    188e:	ae 28       	or	r10, r14
    1890:	bf 28       	or	r11, r15
    1892:	82 a2       	std	Z+34, r8	; 0x22
    1894:	93 a2       	std	Z+35, r9	; 0x23
    1896:	a4 a2       	std	Z+36, r10	; 0x24
    1898:	b5 a2       	std	Z+37, r11	; 0x25
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	cc 0c       	add	r12, r12
    18a0:	dd 1c       	adc	r13, r13
    18a2:	ee 1c       	adc	r14, r14
    18a4:	ff 1c       	adc	r15, r15
    18a6:	d6 cf       	rjmp	.-84     	; 0x1854 <USB_GetHIDReportItemInfo+0x50>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <USB_GetHIDReportItemInfo+0xaa>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	9f 90       	pop	r9
    18bc:	8f 90       	pop	r8
    18be:	08 95       	ret

000018c0 <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    18c0:	fc 01       	movw	r30, r24
    18c2:	ea 5b       	subi	r30, 0xBA	; 186
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	44 0f       	add	r20, r20
    18ca:	55 1f       	adc	r21, r21
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    18cc:	4f 56       	subi	r20, 0x6F	; 111
    18ce:	5c 4f       	sbci	r21, 0xFC	; 252
    18d0:	dc 01       	movw	r26, r24
    18d2:	a4 0f       	add	r26, r20
    18d4:	b5 1f       	adc	r27, r21
    18d6:	2d 91       	ld	r18, X+
    18d8:	3c 91       	ld	r19, X

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    18da:	dc 01       	movw	r26, r24
    18dc:	a0 57       	subi	r26, 0x70	; 112
    18de:	bc 4f       	sbci	r27, 0xFC	; 252
    18e0:	7c 91       	ld	r23, X
    18e2:	76 13       	cpse	r23, r22
    18e4:	11 c0       	rjmp	.+34     	; 0x1908 <USB_GetHIDReportSize+0x48>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a9 01       	movw	r20, r18
    18ec:	47 70       	andi	r20, 0x07	; 7
    18ee:	55 27       	eor	r21, r21
    18f0:	45 2b       	or	r20, r21
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <USB_GetHIDReportSize+0x38>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	43 e0       	ldi	r20, 0x03	; 3
    18fa:	36 95       	lsr	r19
    18fc:	27 95       	ror	r18
    18fe:	4a 95       	dec	r20
    1900:	e1 f7       	brne	.-8      	; 0x18fa <USB_GetHIDReportSize+0x3a>
    1902:	82 0f       	add	r24, r18
    1904:	93 1f       	adc	r25, r19
    1906:	08 95       	ret
    1908:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    190a:	8e 17       	cp	r24, r30
    190c:	9f 07       	cpc	r25, r31
    190e:	01 f7       	brne	.-64     	; 0x18d0 <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
}
    1914:	08 95       	ret

00001916 <DCOMP_HID_Host_NextHIDInterface>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1916:	fc 01       	movw	r30, r24
    1918:	21 81       	ldd	r18, Z+1	; 0x01
    191a:	24 30       	cpi	r18, 0x04	; 4
    191c:	29 f4       	brne	.+10     	; 0x1928 <DCOMP_HID_Host_NextHIDInterface+0x12>
    191e:	85 81       	ldd	r24, Z+5	; 0x05
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	11 f4       	brne	.+4      	; 0x1928 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	08 95       	ret
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	08 95       	ret

0000192c <DCOMP_HID_Host_NextHIDDescriptor>:
    192c:	fc 01       	movw	r30, r24
    192e:	81 81       	ldd	r24, Z+1	; 0x01
    1930:	81 32       	cpi	r24, 0x21	; 33
    1932:	21 f0       	breq	.+8      	; 0x193c <DCOMP_HID_Host_NextHIDDescriptor+0x10>
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	21 f0       	breq	.+8      	; 0x1940 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	08 95       	ret
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	08 95       	ret

00001944 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
    1944:	fc 01       	movw	r30, r24
    1946:	21 81       	ldd	r18, Z+1	; 0x01
    1948:	25 30       	cpi	r18, 0x05	; 5
    194a:	31 f4       	brne	.+12     	; 0x1958 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	4e d8       	rcall	.-3940   	; 0x9ec <Pipe_IsEndpointBound>
    1950:	88 23       	and	r24, r24
    1952:	31 f0       	breq	.+12     	; 0x1960 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	08 95       	ret
    1958:	24 30       	cpi	r18, 0x04	; 4
    195a:	e1 f7       	brne	.-8      	; 0x1954 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	08 95       	ret
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret

00001964 <HID_Host_ConfigurePipes>:
    1964:	2f 92       	push	r2
    1966:	3f 92       	push	r3
    1968:	4f 92       	push	r4
    196a:	5f 92       	push	r5
    196c:	6f 92       	push	r6
    196e:	7f 92       	push	r7
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	00 d0       	rcall	.+0      	; 0x198a <HID_Host_ConfigurePipes+0x26>
    198a:	00 d0       	rcall	.+0      	; 0x198c <HID_Host_ConfigurePipes+0x28>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	7a 83       	std	Y+2, r23	; 0x02
    1992:	69 83       	std	Y+1, r22	; 0x01
    1994:	5c 83       	std	Y+4, r21	; 0x04
    1996:	4b 83       	std	Y+3, r20	; 0x03
    1998:	fc 01       	movw	r30, r24
    199a:	37 96       	adiw	r30, 0x07	; 7
    199c:	2c e0       	ldi	r18, 0x0C	; 12
    199e:	df 01       	movw	r26, r30
    19a0:	1d 92       	st	X+, r1
    19a2:	2a 95       	dec	r18
    19a4:	e9 f7       	brne	.-6      	; 0x19a0 <HID_Host_ConfigurePipes+0x3c>
    19a6:	eb 81       	ldd	r30, Y+3	; 0x03
    19a8:	fc 81       	ldd	r31, Y+4	; 0x04
    19aa:	11 81       	ldd	r17, Z+1	; 0x01
    19ac:	12 30       	cpi	r17, 0x02	; 2
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <HID_Host_ConfigurePipes+0x4e>
    19b0:	7e c0       	rjmp	.+252    	; 0x1aae <HID_Host_ConfigurePipes+0x14a>
    19b2:	6c 01       	movw	r12, r24
    19b4:	41 2c       	mov	r4, r1
    19b6:	51 2c       	mov	r5, r1
    19b8:	61 2c       	mov	r6, r1
    19ba:	71 2c       	mov	r7, r1
    19bc:	81 2c       	mov	r8, r1
    19be:	91 2c       	mov	r9, r1
    19c0:	a1 2c       	mov	r10, r1
    19c2:	b1 2c       	mov	r11, r1
    19c4:	a1 14       	cp	r10, r1
    19c6:	b1 04       	cpc	r11, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <HID_Host_ConfigurePipes+0x68>
    19ca:	75 c0       	rjmp	.+234    	; 0x1ab6 <HID_Host_ConfigurePipes+0x152>
    19cc:	81 14       	cp	r8, r1
    19ce:	91 04       	cpc	r9, r1
    19d0:	91 f4       	brne	.+36     	; 0x19f6 <HID_Host_ConfigurePipes+0x92>
    19d2:	61 14       	cp	r6, r1
    19d4:	71 04       	cpc	r7, r1
    19d6:	79 f0       	breq	.+30     	; 0x19f6 <HID_Host_ConfigurePipes+0x92>
    19d8:	42 ea       	ldi	r20, 0xA2	; 162
    19da:	5c e0       	ldi	r21, 0x0C	; 12
    19dc:	be 01       	movw	r22, r28
    19de:	6d 5f       	subi	r22, 0xFD	; 253
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	ce 01       	movw	r24, r28
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	29 da       	rcall	.-2990   	; 0xe3a <USB_GetNextDescriptorComp>
    19e8:	88 23       	and	r24, r24
    19ea:	09 f4       	brne	.+2      	; 0x19ee <HID_Host_ConfigurePipes+0x8a>
    19ec:	90 c0       	rjmp	.+288    	; 0x1b0e <HID_Host_ConfigurePipes+0x1aa>
    19ee:	a1 14       	cp	r10, r1
    19f0:	b1 04       	cpc	r11, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <HID_Host_ConfigurePipes+0x92>
    19f4:	64 c0       	rjmp	.+200    	; 0x1abe <HID_Host_ConfigurePipes+0x15a>
    19f6:	ff 24       	eor	r15, r15
    19f8:	f3 94       	inc	r15
    19fa:	22 24       	eor	r2, r2
    19fc:	23 94       	inc	r2
    19fe:	f6 01       	movw	r30, r12
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 11       	cpse	r24, r15
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <HID_Host_ConfigurePipes+0xc0>
    1a06:	d5 01       	movw	r26, r10
    1a08:	14 96       	adiw	r26, 0x04	; 4
    1a0a:	0d 91       	ld	r16, X+
    1a0c:	1c 91       	ld	r17, X
    1a0e:	15 97       	sbiw	r26, 0x05	; 5
    1a10:	12 96       	adiw	r26, 0x02	; 2
    1a12:	2c 91       	ld	r18, X
    1a14:	12 97       	sbiw	r26, 0x02	; 2
    1a16:	81 81       	ldd	r24, Z+1	; 0x01
    1a18:	16 96       	adiw	r26, 0x06	; 6
    1a1a:	3c 90       	ld	r3, X
    1a1c:	12 87       	std	Z+10, r17	; 0x0a
    1a1e:	01 87       	std	Z+9, r16	; 0x09
    1a20:	40 e1       	ldi	r20, 0x10	; 16
    1a22:	16 c0       	rjmp	.+44     	; 0x1a50 <HID_Host_ConfigurePipes+0xec>
    1a24:	f6 01       	movw	r30, r12
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	8f 11       	cpse	r24, r15
    1a2a:	21 c0       	rjmp	.+66     	; 0x1a6e <HID_Host_ConfigurePipes+0x10a>
    1a2c:	81 14       	cp	r8, r1
    1a2e:	91 04       	cpc	r9, r1
    1a30:	f1 f0       	breq	.+60     	; 0x1a6e <HID_Host_ConfigurePipes+0x10a>
    1a32:	d4 01       	movw	r26, r8
    1a34:	14 96       	adiw	r26, 0x04	; 4
    1a36:	0d 91       	ld	r16, X+
    1a38:	1c 91       	ld	r17, X
    1a3a:	15 97       	sbiw	r26, 0x05	; 5
    1a3c:	12 96       	adiw	r26, 0x02	; 2
    1a3e:	2c 91       	ld	r18, X
    1a40:	12 97       	sbiw	r26, 0x02	; 2
    1a42:	83 81       	ldd	r24, Z+3	; 0x03
    1a44:	16 96       	adiw	r26, 0x06	; 6
    1a46:	3c 90       	ld	r3, X
    1a48:	14 87       	std	Z+12, r17	; 0x0c
    1a4a:	03 87       	std	Z+11, r16	; 0x0b
    1a4c:	26 86       	std	Z+14, r2	; 0x0e
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	81 11       	cpse	r24, r1
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <HID_Host_ConfigurePipes+0xf4>
    1a54:	e1 2c       	mov	r14, r1
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <HID_Host_ConfigurePipes+0xf8>
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	e8 2e       	mov	r14, r24
    1a5c:	63 e0       	ldi	r22, 0x03	; 3
    1a5e:	8f 2d       	mov	r24, r15
    1a60:	0e 94 86 04 	call	0x90c	; 0x90c <Pipe_ConfigurePipe>
    1a64:	88 23       	and	r24, r24
    1a66:	29 f1       	breq	.+74     	; 0x1ab2 <HID_Host_ConfigurePipes+0x14e>
    1a68:	31 10       	cpse	r3, r1
    1a6a:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1a6e:	f3 94       	inc	r15
    1a70:	b7 e0       	ldi	r27, 0x07	; 7
    1a72:	fb 12       	cpse	r15, r27
    1a74:	c4 cf       	rjmp	.-120    	; 0x19fe <HID_Host_ConfigurePipes+0x9a>
    1a76:	f3 01       	movw	r30, r6
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	d6 01       	movw	r26, r12
    1a7c:	18 96       	adiw	r26, 0x08	; 8
    1a7e:	8c 93       	st	X, r24
    1a80:	18 97       	sbiw	r26, 0x08	; 8
    1a82:	f2 01       	movw	r30, r4
    1a84:	87 81       	ldd	r24, Z+7	; 0x07
    1a86:	90 85       	ldd	r25, Z+8	; 0x08
    1a88:	51 96       	adiw	r26, 0x11	; 17
    1a8a:	9c 93       	st	X, r25
    1a8c:	8e 93       	st	-X, r24
    1a8e:	50 97       	sbiw	r26, 0x10	; 16
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	d3 01       	movw	r26, r6
    1a94:	16 96       	adiw	r26, 0x06	; 6
    1a96:	9c 91       	ld	r25, X
    1a98:	91 11       	cpse	r25, r1
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <HID_Host_ConfigurePipes+0x13a>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	f6 01       	movw	r30, r12
    1aa0:	85 87       	std	Z+13, r24	; 0x0d
    1aa2:	88 e0       	ldi	r24, 0x08	; 8
    1aa4:	82 8b       	std	Z+18, r24	; 0x12
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	87 83       	std	Z+7, r24	; 0x07
    1aaa:	10 e0       	ldi	r17, 0x00	; 0
    1aac:	3c c0       	rjmp	.+120    	; 0x1b26 <HID_Host_ConfigurePipes+0x1c2>
    1aae:	11 e0       	ldi	r17, 0x01	; 1
    1ab0:	3a c0       	rjmp	.+116    	; 0x1b26 <HID_Host_ConfigurePipes+0x1c2>
    1ab2:	13 e0       	ldi	r17, 0x03	; 3
    1ab4:	38 c0       	rjmp	.+112    	; 0x1b26 <HID_Host_ConfigurePipes+0x1c2>
    1ab6:	61 14       	cp	r6, r1
    1ab8:	71 04       	cpc	r7, r1
    1aba:	09 f0       	breq	.+2      	; 0x1abe <HID_Host_ConfigurePipes+0x15a>
    1abc:	8d cf       	rjmp	.-230    	; 0x19d8 <HID_Host_ConfigurePipes+0x74>
    1abe:	81 14       	cp	r8, r1
    1ac0:	91 04       	cpc	r9, r1
    1ac2:	71 f5       	brne	.+92     	; 0x1b20 <HID_Host_ConfigurePipes+0x1bc>
    1ac4:	4b e8       	ldi	r20, 0x8B	; 139
    1ac6:	5c e0       	ldi	r21, 0x0C	; 12
    1ac8:	be 01       	movw	r22, r28
    1aca:	6d 5f       	subi	r22, 0xFD	; 253
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	b3 d9       	rcall	.-3226   	; 0xe3a <USB_GetNextDescriptorComp>
    1ad4:	81 11       	cpse	r24, r1
    1ad6:	27 c0       	rjmp	.+78     	; 0x1b26 <HID_Host_ConfigurePipes+0x1c2>
    1ad8:	6b 80       	ldd	r6, Y+3	; 0x03
    1ada:	7c 80       	ldd	r7, Y+4	; 0x04
    1adc:	f6 01       	movw	r30, r12
    1ade:	84 81       	ldd	r24, Z+4	; 0x04
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <HID_Host_ConfigurePipes+0x19e>
    1ae4:	46 e9       	ldi	r20, 0x96	; 150
    1ae6:	5c e0       	ldi	r21, 0x0C	; 12
    1ae8:	be 01       	movw	r22, r28
    1aea:	6d 5f       	subi	r22, 0xFD	; 253
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	a3 d9       	rcall	.-3258   	; 0xe3a <USB_GetNextDescriptorComp>
    1af4:	81 11       	cpse	r24, r1
    1af6:	17 c0       	rjmp	.+46     	; 0x1b26 <HID_Host_ConfigurePipes+0x1c2>
    1af8:	4b 80       	ldd	r4, Y+3	; 0x03
    1afa:	5c 80       	ldd	r5, Y+4	; 0x04
    1afc:	e0 e0       	ldi	r30, 0x00	; 0
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <HID_Host_ConfigurePipes+0x1b8>
    1b02:	d3 01       	movw	r26, r6
    1b04:	17 96       	adiw	r26, 0x07	; 7
    1b06:	9c 91       	ld	r25, X
    1b08:	89 13       	cpse	r24, r25
    1b0a:	dc cf       	rjmp	.-72     	; 0x1ac4 <HID_Host_ConfigurePipes+0x160>
    1b0c:	eb cf       	rjmp	.-42     	; 0x1ae4 <HID_Host_ConfigurePipes+0x180>
    1b0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b10:	fc 81       	ldd	r31, Y+4	; 0x04
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	87 fd       	sbrc	r24, 7
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <HID_Host_ConfigurePipes+0x1b8>
    1b18:	4f 01       	movw	r8, r30
    1b1a:	f5 01       	movw	r30, r10
    1b1c:	5f 01       	movw	r10, r30
    1b1e:	52 cf       	rjmp	.-348    	; 0x19c4 <HID_Host_ConfigurePipes+0x60>
    1b20:	a1 2c       	mov	r10, r1
    1b22:	b1 2c       	mov	r11, r1
    1b24:	68 cf       	rjmp	.-304    	; 0x19f6 <HID_Host_ConfigurePipes+0x92>
    1b26:	81 2f       	mov	r24, r17
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	df 90       	pop	r13
    1b3e:	cf 90       	pop	r12
    1b40:	bf 90       	pop	r11
    1b42:	af 90       	pop	r10
    1b44:	9f 90       	pop	r9
    1b46:	8f 90       	pop	r8
    1b48:	7f 90       	pop	r7
    1b4a:	6f 90       	pop	r6
    1b4c:	5f 90       	pop	r5
    1b4e:	4f 90       	pop	r4
    1b50:	3f 90       	pop	r3
    1b52:	2f 90       	pop	r2
    1b54:	08 95       	ret

00001b56 <HID_Host_ReceiveReport>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	eb 01       	movw	r28, r22
    1b5e:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
    1b62:	8b 30       	cpi	r24, 0x0B	; 11
    1b64:	b9 f5       	brne	.+110    	; 0x1bd4 <HID_Host_ReceiveReport+0x7e>
    1b66:	87 81       	ldd	r24, Z+7	; 0x07
    1b68:	88 23       	and	r24, r24
    1b6a:	a1 f1       	breq	.+104    	; 0x1bd4 <HID_Host_ReceiveReport+0x7e>
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1b72:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1b76:	8f 7b       	andi	r24, 0xBF	; 191
    1b78:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1b7c:	87 85       	ldd	r24, Z+15	; 0x0f
    1b7e:	81 11       	cpse	r24, r1
    1b80:	12 c0       	rjmp	.+36     	; 0x1ba6 <HID_Host_ReceiveReport+0x50>
    1b82:	a5 81       	ldd	r26, Z+5	; 0x05
    1b84:	b6 81       	ldd	r27, Z+6	; 0x06
    1b86:	a8 52       	subi	r26, 0x28	; 40
    1b88:	bc 4f       	sbci	r27, 0xFC	; 252
    1b8a:	8c 91       	ld	r24, X
    1b8c:	88 23       	and	r24, r24
    1b8e:	29 f0       	breq	.+10     	; 0x1b9a <HID_Host_ReceiveReport+0x44>
    1b90:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1b94:	68 83       	st	Y, r22
    1b96:	21 96       	adiw	r28, 0x01	; 1
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <HID_Host_ReceiveReport+0x46>
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	85 81       	ldd	r24, Z+5	; 0x05
    1ba0:	96 81       	ldd	r25, Z+6	; 0x06
    1ba2:	8e de       	rcall	.-740    	; 0x18c0 <USB_GetHIDReportSize>
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <HID_Host_ReceiveReport+0x58>
    1ba6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1baa:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	7b d8       	rcall	.-3850   	; 0xcae <Pipe_Read_Stream_LE>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <HID_Host_ReceiveReport+0x80>
    1bbc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1bc0:	8e 77       	andi	r24, 0x7E	; 126
    1bc2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1bc6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bca:	80 64       	ori	r24, 0x40	; 64
    1bcc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <HID_Host_ReceiveReport+0x80>
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <HID_Host_IsReportReceived>:
    1bdc:	fc 01       	movw	r30, r24
    1bde:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_HostState>
    1be2:	8b 30       	cpi	r24, 0x0B	; 11
    1be4:	a1 f4       	brne	.+40     	; 0x1c0e <HID_Host_IsReportReceived+0x32>
    1be6:	87 81       	ldd	r24, Z+7	; 0x07
    1be8:	88 23       	and	r24, r24
    1bea:	91 f0       	breq	.+36     	; 0x1c10 <HID_Host_IsReportReceived+0x34>
    1bec:	80 81       	ld	r24, Z
    1bee:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1bf2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bf6:	8f 7b       	andi	r24, 0xBF	; 191
    1bf8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1bfc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c06:	90 64       	ori	r25, 0x40	; 64
    1c08:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c0c:	08 95       	ret
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	08 95       	ret

00001c12 <HID_Host_SetReportProtocol>:
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1c12:	cf 92       	push	r12
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1c28:	ed b6       	in	r14, 0x3d	; 61
    1c2a:	fe b6       	in	r15, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	50 96       	adiw	r26, 0x10	; 16
    1c30:	2d 91       	ld	r18, X+
    1c32:	3c 91       	ld	r19, X
    1c34:	51 97       	sbiw	r26, 0x11	; 17
    1c36:	ed b7       	in	r30, 0x3d	; 61
    1c38:	fe b7       	in	r31, 0x3e	; 62
    1c3a:	e2 1b       	sub	r30, r18
    1c3c:	f3 0b       	sbc	r31, r19
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	fe bf       	out	0x3e, r31	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	ed bf       	out	0x3d, r30	; 61
    1c48:	8d b7       	in	r24, 0x3d	; 61
    1c4a:	9e b7       	in	r25, 0x3e	; 62
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	6c 01       	movw	r12, r24

	USB_ControlRequest = (USB_Request_Header_t)
    1c50:	18 96       	adiw	r26, 0x08	; 8
    1c52:	8c 91       	ld	r24, X
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	41 e8       	ldi	r20, 0x81	; 129
    1c58:	40 93 02 05 	sts	0x0502, r20	; 0x800502 <USB_ControlRequest>
    1c5c:	46 e0       	ldi	r20, 0x06	; 6
    1c5e:	40 93 03 05 	sts	0x0503, r20	; 0x800503 <USB_ControlRequest+0x1>
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	52 e2       	ldi	r21, 0x22	; 34
    1c66:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <USB_ControlRequest+0x3>
    1c6a:	40 93 04 05 	sts	0x0504, r20	; 0x800504 <USB_ControlRequest+0x2>
    1c6e:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <USB_ControlRequest+0x5>
    1c72:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_ControlRequest+0x4>
    1c76:	30 93 09 05 	sts	0x0509, r19	; 0x800509 <USB_ControlRequest+0x7>
    1c7a:	20 93 08 05 	sts	0x0508, r18	; 0x800508 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1c7e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1c82:	c6 01       	movw	r24, r12
    1c84:	33 d9       	rcall	.-3482   	; 0xeec <USB_Host_SendControlRequest>
    1c86:	81 11       	cpse	r24, r1
    1c88:	51 c0       	rjmp	.+162    	; 0x1d2c <HID_Host_SetReportProtocol+0x11a>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1c8a:	d8 01       	movw	r26, r16
    1c8c:	1f 96       	adiw	r26, 0x0f	; 15
    1c8e:	8c 91       	ld	r24, X
    1c90:	1f 97       	sbiw	r26, 0x0f	; 15
    1c92:	88 23       	and	r24, r24
    1c94:	f1 f0       	breq	.+60     	; 0x1cd2 <HID_Host_SetReportProtocol+0xc0>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1c96:	18 96       	adiw	r26, 0x08	; 8
    1c98:	8c 91       	ld	r24, X
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	21 e2       	ldi	r18, 0x21	; 33
    1c9e:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <USB_ControlRequest>
    1ca2:	2b e0       	ldi	r18, 0x0B	; 11
    1ca4:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <USB_ControlRequest+0x1>
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <USB_ControlRequest+0x3>
    1cb0:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <USB_ControlRequest+0x2>
    1cb4:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <USB_ControlRequest+0x5>
    1cb8:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_ControlRequest+0x4>
    1cbc:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <USB_ControlRequest+0x7>
    1cc0:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_ControlRequest+0x6>
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	11 d9       	rcall	.-3550   	; 0xeec <USB_Host_SendControlRequest>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	2f c0       	rjmp	.+94     	; 0x1d2c <HID_Host_SetReportProtocol+0x11a>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1cce:	f8 01       	movw	r30, r16
    1cd0:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1cd2:	d8 01       	movw	r26, r16
    1cd4:	15 96       	adiw	r26, 0x05	; 5
    1cd6:	4d 91       	ld	r20, X+
    1cd8:	5c 91       	ld	r21, X
    1cda:	16 97       	sbiw	r26, 0x06	; 6
    1cdc:	41 15       	cp	r20, r1
    1cde:	51 05       	cpc	r21, r1
    1ce0:	21 f1       	breq	.+72     	; 0x1d2a <HID_Host_SetReportProtocol+0x118>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1ce2:	50 96       	adiw	r26, 0x10	; 16
    1ce4:	6d 91       	ld	r22, X+
    1ce6:	7c 91       	ld	r23, X
    1ce8:	51 97       	sbiw	r26, 0x11	; 17
    1cea:	c6 01       	movw	r24, r12
    1cec:	2a da       	rcall	.-2988   	; 0x1142 <USB_ProcessHIDReport>
    1cee:	88 23       	and	r24, r24
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <HID_Host_SetReportProtocol+0xe4>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	1b c0       	rjmp	.+54     	; 0x1d2c <HID_Host_SetReportProtocol+0x11a>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1cf6:	d8 01       	movw	r26, r16
    1cf8:	15 96       	adiw	r26, 0x05	; 5
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	16 97       	sbiw	r26, 0x06	; 6
    1d00:	ea 52       	subi	r30, 0x2A	; 42
    1d02:	fc 4f       	sbci	r31, 0xFC	; 252
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1d08:	ac 01       	movw	r20, r24
    1d0a:	47 70       	andi	r20, 0x07	; 7
    1d0c:	55 27       	eor	r21, r21
    1d0e:	21 e0       	ldi	r18, 0x01	; 1
    1d10:	45 2b       	or	r20, r21
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <HID_Host_SetReportProtocol+0x104>
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	33 e0       	ldi	r19, 0x03	; 3
    1d18:	96 95       	lsr	r25
    1d1a:	87 95       	ror	r24
    1d1c:	3a 95       	dec	r19
    1d1e:	e1 f7       	brne	.-8      	; 0x1d18 <HID_Host_SetReportProtocol+0x106>
    1d20:	82 0f       	add	r24, r18
    1d22:	f8 01       	movw	r30, r16
    1d24:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <HID_Host_SetReportProtocol+0x11a>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1d2a:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	fe be       	out	0x3e, r15	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	ed be       	out	0x3d, r14	; 61
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	08 95       	ret

00001d48 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1d48:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1d4c:	95 ff       	sbrs	r25, 5
    1d4e:	fc cf       	rjmp	.-8      	; 0x1d48 <Serial_putchar>
				UDR1 = DataByte;
    1d50:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	08 95       	ret

00001d5a <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1d5a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1d5e:	87 ff       	sbrs	r24, 7
    1d60:	08 c0       	rjmp	.+16     	; 0x1d72 <Serial_getchar+0x18>
    1d62:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1d66:	87 ff       	sbrs	r24, 7
    1d68:	07 c0       	rjmp	.+14     	; 0x1d78 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1d6a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	08 95       	ret
	  return _FDEV_EOF;
    1d72:	8e ef       	ldi	r24, 0xFE	; 254
    1d74:	9f ef       	ldi	r25, 0xFF	; 255
    1d76:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1d7c:	08 95       	ret

00001d7e <__tablejump2__>:
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	00 24       	eor	r0, r0
    1d84:	00 1c       	adc	r0, r0
    1d86:	0b be       	out	0x3b, r0	; 59
    1d88:	07 90       	elpm	r0, Z+
    1d8a:	f6 91       	elpm	r31, Z
    1d8c:	e0 2d       	mov	r30, r0
    1d8e:	09 94       	ijmp

00001d90 <fputc>:
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	fb 01       	movw	r30, r22
    1d9a:	23 81       	ldd	r18, Z+3	; 0x03
    1d9c:	21 fd       	sbrc	r18, 1
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <fputc+0x16>
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	9f ef       	ldi	r25, 0xFF	; 255
    1da4:	2c c0       	rjmp	.+88     	; 0x1dfe <fputc+0x6e>
    1da6:	22 ff       	sbrs	r18, 2
    1da8:	16 c0       	rjmp	.+44     	; 0x1dd6 <fputc+0x46>
    1daa:	46 81       	ldd	r20, Z+6	; 0x06
    1dac:	57 81       	ldd	r21, Z+7	; 0x07
    1dae:	24 81       	ldd	r18, Z+4	; 0x04
    1db0:	35 81       	ldd	r19, Z+5	; 0x05
    1db2:	42 17       	cp	r20, r18
    1db4:	53 07       	cpc	r21, r19
    1db6:	44 f4       	brge	.+16     	; 0x1dc8 <fputc+0x38>
    1db8:	a0 81       	ld	r26, Z
    1dba:	b1 81       	ldd	r27, Z+1	; 0x01
    1dbc:	9d 01       	movw	r18, r26
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	31 83       	std	Z+1, r19	; 0x01
    1dc4:	20 83       	st	Z, r18
    1dc6:	8c 93       	st	X, r24
    1dc8:	26 81       	ldd	r18, Z+6	; 0x06
    1dca:	37 81       	ldd	r19, Z+7	; 0x07
    1dcc:	2f 5f       	subi	r18, 0xFF	; 255
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	37 83       	std	Z+7, r19	; 0x07
    1dd2:	26 83       	std	Z+6, r18	; 0x06
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <fputc+0x6e>
    1dd6:	8b 01       	movw	r16, r22
    1dd8:	ec 01       	movw	r28, r24
    1dda:	fb 01       	movw	r30, r22
    1ddc:	00 84       	ldd	r0, Z+8	; 0x08
    1dde:	f1 85       	ldd	r31, Z+9	; 0x09
    1de0:	e0 2d       	mov	r30, r0
    1de2:	09 95       	icall
    1de4:	89 2b       	or	r24, r25
    1de6:	e1 f6       	brne	.-72     	; 0x1da0 <fputc+0x10>
    1de8:	d8 01       	movw	r26, r16
    1dea:	16 96       	adiw	r26, 0x06	; 6
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	17 97       	sbiw	r26, 0x07	; 7
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	17 96       	adiw	r26, 0x07	; 7
    1df6:	9c 93       	st	X, r25
    1df8:	8e 93       	st	-X, r24
    1dfa:	16 97       	sbiw	r26, 0x06	; 6
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <printf_P>:
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	ae 01       	movw	r20, r28
    1e16:	49 5f       	subi	r20, 0xF9	; 249
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	da 01       	movw	r26, r20
    1e1c:	6d 91       	ld	r22, X+
    1e1e:	7d 91       	ld	r23, X+
    1e20:	ad 01       	movw	r20, r26
    1e22:	09 e1       	ldi	r16, 0x19	; 25
    1e24:	15 e0       	ldi	r17, 0x05	; 5
    1e26:	f8 01       	movw	r30, r16
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	13 96       	adiw	r26, 0x03	; 3
    1e30:	2c 91       	ld	r18, X
    1e32:	13 97       	sbiw	r26, 0x03	; 3
    1e34:	28 60       	ori	r18, 0x08	; 8
    1e36:	13 96       	adiw	r26, 0x03	; 3
    1e38:	2c 93       	st	X, r18
    1e3a:	3e d0       	rcall	.+124    	; 0x1eb8 <vfprintf>
    1e3c:	d8 01       	movw	r26, r16
    1e3e:	12 96       	adiw	r26, 0x02	; 2
    1e40:	ed 91       	ld	r30, X+
    1e42:	fc 91       	ld	r31, X
    1e44:	13 97       	sbiw	r26, 0x03	; 3
    1e46:	23 81       	ldd	r18, Z+3	; 0x03
    1e48:	27 7f       	andi	r18, 0xF7	; 247
    1e4a:	23 83       	std	Z+3, r18	; 0x03
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	08 95       	ret

00001e56 <puts_P>:
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	8c 01       	movw	r16, r24
    1e60:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <__iob+0x2>
    1e64:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <__iob+0x3>
    1e68:	83 81       	ldd	r24, Z+3	; 0x03
    1e6a:	81 ff       	sbrs	r24, 1
    1e6c:	1b c0       	rjmp	.+54     	; 0x1ea4 <puts_P+0x4e>
    1e6e:	d0 e0       	ldi	r29, 0x00	; 0
    1e70:	c0 e0       	ldi	r28, 0x00	; 0
    1e72:	f8 01       	movw	r30, r16
    1e74:	84 91       	lpm	r24, Z
    1e76:	60 91 1b 05 	lds	r22, 0x051B	; 0x80051b <__iob+0x2>
    1e7a:	70 91 1c 05 	lds	r23, 0x051C	; 0x80051c <__iob+0x3>
    1e7e:	db 01       	movw	r26, r22
    1e80:	18 96       	adiw	r26, 0x08	; 8
    1e82:	ed 91       	ld	r30, X+
    1e84:	fc 91       	ld	r31, X
    1e86:	19 97       	sbiw	r26, 0x09	; 9
    1e88:	88 23       	and	r24, r24
    1e8a:	41 f0       	breq	.+16     	; 0x1e9c <puts_P+0x46>
    1e8c:	09 95       	icall
    1e8e:	89 2b       	or	r24, r25
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <puts_P+0x40>
    1e92:	df ef       	ldi	r29, 0xFF	; 255
    1e94:	cf ef       	ldi	r28, 0xFF	; 255
    1e96:	0f 5f       	subi	r16, 0xFF	; 255
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	eb cf       	rjmp	.-42     	; 0x1e72 <puts_P+0x1c>
    1e9c:	8a e0       	ldi	r24, 0x0A	; 10
    1e9e:	09 95       	icall
    1ea0:	89 2b       	or	r24, r25
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <puts_P+0x54>
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <puts_P+0x58>
    1eaa:	8d 2f       	mov	r24, r29
    1eac:	9c 2f       	mov	r25, r28
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	08 95       	ret

00001eb8 <vfprintf>:
    1eb8:	2f 92       	push	r2
    1eba:	3f 92       	push	r3
    1ebc:	4f 92       	push	r4
    1ebe:	5f 92       	push	r5
    1ec0:	6f 92       	push	r6
    1ec2:	7f 92       	push	r7
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	6c 01       	movw	r12, r24
    1eee:	7b 01       	movw	r14, r22
    1ef0:	8a 01       	movw	r16, r20
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	17 82       	std	Z+7, r1	; 0x07
    1ef6:	16 82       	std	Z+6, r1	; 0x06
    1ef8:	83 81       	ldd	r24, Z+3	; 0x03
    1efa:	81 ff       	sbrs	r24, 1
    1efc:	bf c1       	rjmp	.+894    	; 0x227c <__stack+0x17d>
    1efe:	ce 01       	movw	r24, r28
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	3c 01       	movw	r6, r24
    1f04:	f6 01       	movw	r30, r12
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	f7 01       	movw	r30, r14
    1f0a:	93 fd       	sbrc	r25, 3
    1f0c:	85 91       	lpm	r24, Z+
    1f0e:	93 ff       	sbrs	r25, 3
    1f10:	81 91       	ld	r24, Z+
    1f12:	7f 01       	movw	r14, r30
    1f14:	88 23       	and	r24, r24
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <vfprintf+0x62>
    1f18:	ad c1       	rjmp	.+858    	; 0x2274 <__stack+0x175>
    1f1a:	85 32       	cpi	r24, 0x25	; 37
    1f1c:	39 f4       	brne	.+14     	; 0x1f2c <vfprintf+0x74>
    1f1e:	93 fd       	sbrc	r25, 3
    1f20:	85 91       	lpm	r24, Z+
    1f22:	93 ff       	sbrs	r25, 3
    1f24:	81 91       	ld	r24, Z+
    1f26:	7f 01       	movw	r14, r30
    1f28:	85 32       	cpi	r24, 0x25	; 37
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <vfprintf+0x7c>
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	2f df       	rcall	.-418    	; 0x1d90 <fputc>
    1f32:	e8 cf       	rjmp	.-48     	; 0x1f04 <vfprintf+0x4c>
    1f34:	91 2c       	mov	r9, r1
    1f36:	21 2c       	mov	r2, r1
    1f38:	31 2c       	mov	r3, r1
    1f3a:	ff e1       	ldi	r31, 0x1F	; 31
    1f3c:	f3 15       	cp	r31, r3
    1f3e:	d8 f0       	brcs	.+54     	; 0x1f76 <vfprintf+0xbe>
    1f40:	8b 32       	cpi	r24, 0x2B	; 43
    1f42:	79 f0       	breq	.+30     	; 0x1f62 <vfprintf+0xaa>
    1f44:	38 f4       	brcc	.+14     	; 0x1f54 <vfprintf+0x9c>
    1f46:	80 32       	cpi	r24, 0x20	; 32
    1f48:	79 f0       	breq	.+30     	; 0x1f68 <vfprintf+0xb0>
    1f4a:	83 32       	cpi	r24, 0x23	; 35
    1f4c:	a1 f4       	brne	.+40     	; 0x1f76 <vfprintf+0xbe>
    1f4e:	23 2d       	mov	r18, r3
    1f50:	20 61       	ori	r18, 0x10	; 16
    1f52:	1d c0       	rjmp	.+58     	; 0x1f8e <vfprintf+0xd6>
    1f54:	8d 32       	cpi	r24, 0x2D	; 45
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <vfprintf+0xb8>
    1f58:	80 33       	cpi	r24, 0x30	; 48
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <vfprintf+0xbe>
    1f5c:	23 2d       	mov	r18, r3
    1f5e:	21 60       	ori	r18, 0x01	; 1
    1f60:	16 c0       	rjmp	.+44     	; 0x1f8e <vfprintf+0xd6>
    1f62:	83 2d       	mov	r24, r3
    1f64:	82 60       	ori	r24, 0x02	; 2
    1f66:	38 2e       	mov	r3, r24
    1f68:	e3 2d       	mov	r30, r3
    1f6a:	e4 60       	ori	r30, 0x04	; 4
    1f6c:	3e 2e       	mov	r3, r30
    1f6e:	2a c0       	rjmp	.+84     	; 0x1fc4 <vfprintf+0x10c>
    1f70:	f3 2d       	mov	r31, r3
    1f72:	f8 60       	ori	r31, 0x08	; 8
    1f74:	1d c0       	rjmp	.+58     	; 0x1fb0 <vfprintf+0xf8>
    1f76:	37 fc       	sbrc	r3, 7
    1f78:	2d c0       	rjmp	.+90     	; 0x1fd4 <vfprintf+0x11c>
    1f7a:	20 ed       	ldi	r18, 0xD0	; 208
    1f7c:	28 0f       	add	r18, r24
    1f7e:	2a 30       	cpi	r18, 0x0A	; 10
    1f80:	40 f0       	brcs	.+16     	; 0x1f92 <vfprintf+0xda>
    1f82:	8e 32       	cpi	r24, 0x2E	; 46
    1f84:	b9 f4       	brne	.+46     	; 0x1fb4 <vfprintf+0xfc>
    1f86:	36 fc       	sbrc	r3, 6
    1f88:	75 c1       	rjmp	.+746    	; 0x2274 <__stack+0x175>
    1f8a:	23 2d       	mov	r18, r3
    1f8c:	20 64       	ori	r18, 0x40	; 64
    1f8e:	32 2e       	mov	r3, r18
    1f90:	19 c0       	rjmp	.+50     	; 0x1fc4 <vfprintf+0x10c>
    1f92:	36 fe       	sbrs	r3, 6
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <vfprintf+0xea>
    1f96:	8a e0       	ldi	r24, 0x0A	; 10
    1f98:	98 9e       	mul	r9, r24
    1f9a:	20 0d       	add	r18, r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	92 2e       	mov	r9, r18
    1fa0:	11 c0       	rjmp	.+34     	; 0x1fc4 <vfprintf+0x10c>
    1fa2:	ea e0       	ldi	r30, 0x0A	; 10
    1fa4:	2e 9e       	mul	r2, r30
    1fa6:	20 0d       	add	r18, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	22 2e       	mov	r2, r18
    1fac:	f3 2d       	mov	r31, r3
    1fae:	f0 62       	ori	r31, 0x20	; 32
    1fb0:	3f 2e       	mov	r3, r31
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <vfprintf+0x10c>
    1fb4:	8c 36       	cpi	r24, 0x6C	; 108
    1fb6:	21 f4       	brne	.+8      	; 0x1fc0 <vfprintf+0x108>
    1fb8:	83 2d       	mov	r24, r3
    1fba:	80 68       	ori	r24, 0x80	; 128
    1fbc:	38 2e       	mov	r3, r24
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <vfprintf+0x10c>
    1fc0:	88 36       	cpi	r24, 0x68	; 104
    1fc2:	41 f4       	brne	.+16     	; 0x1fd4 <vfprintf+0x11c>
    1fc4:	f7 01       	movw	r30, r14
    1fc6:	93 fd       	sbrc	r25, 3
    1fc8:	85 91       	lpm	r24, Z+
    1fca:	93 ff       	sbrs	r25, 3
    1fcc:	81 91       	ld	r24, Z+
    1fce:	7f 01       	movw	r14, r30
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	b3 cf       	rjmp	.-154    	; 0x1f3a <vfprintf+0x82>
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	9f 7d       	andi	r25, 0xDF	; 223
    1fd8:	95 54       	subi	r25, 0x45	; 69
    1fda:	93 30       	cpi	r25, 0x03	; 3
    1fdc:	28 f4       	brcc	.+10     	; 0x1fe8 <vfprintf+0x130>
    1fde:	0c 5f       	subi	r16, 0xFC	; 252
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	9f e3       	ldi	r25, 0x3F	; 63
    1fe4:	99 83       	std	Y+1, r25	; 0x01
    1fe6:	0d c0       	rjmp	.+26     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1fe8:	83 36       	cpi	r24, 0x63	; 99
    1fea:	31 f0       	breq	.+12     	; 0x1ff8 <vfprintf+0x140>
    1fec:	83 37       	cpi	r24, 0x73	; 115
    1fee:	71 f0       	breq	.+28     	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    1ff0:	83 35       	cpi	r24, 0x53	; 83
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <vfprintf+0x13e>
    1ff4:	55 c0       	rjmp	.+170    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
    1ff6:	20 c0       	rjmp	.+64     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	80 81       	ld	r24, Z
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	0e 5f       	subi	r16, 0xFE	; 254
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	88 24       	eor	r8, r8
    2004:	83 94       	inc	r8
    2006:	91 2c       	mov	r9, r1
    2008:	53 01       	movw	r10, r6
    200a:	12 c0       	rjmp	.+36     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    200c:	28 01       	movw	r4, r16
    200e:	f2 e0       	ldi	r31, 0x02	; 2
    2010:	4f 0e       	add	r4, r31
    2012:	51 1c       	adc	r5, r1
    2014:	f8 01       	movw	r30, r16
    2016:	a0 80       	ld	r10, Z
    2018:	b1 80       	ldd	r11, Z+1	; 0x01
    201a:	36 fe       	sbrs	r3, 6
    201c:	03 c0       	rjmp	.+6      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    201e:	69 2d       	mov	r22, r9
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    2024:	6f ef       	ldi	r22, 0xFF	; 255
    2026:	7f ef       	ldi	r23, 0xFF	; 255
    2028:	c5 01       	movw	r24, r10
    202a:	4e d1       	rcall	.+668    	; 0x22c8 <strnlen>
    202c:	4c 01       	movw	r8, r24
    202e:	82 01       	movw	r16, r4
    2030:	f3 2d       	mov	r31, r3
    2032:	ff 77       	andi	r31, 0x7F	; 127
    2034:	3f 2e       	mov	r3, r31
    2036:	15 c0       	rjmp	.+42     	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2038:	28 01       	movw	r4, r16
    203a:	22 e0       	ldi	r18, 0x02	; 2
    203c:	42 0e       	add	r4, r18
    203e:	51 1c       	adc	r5, r1
    2040:	f8 01       	movw	r30, r16
    2042:	a0 80       	ld	r10, Z
    2044:	b1 80       	ldd	r11, Z+1	; 0x01
    2046:	36 fe       	sbrs	r3, 6
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    204a:	69 2d       	mov	r22, r9
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2050:	6f ef       	ldi	r22, 0xFF	; 255
    2052:	7f ef       	ldi	r23, 0xFF	; 255
    2054:	c5 01       	movw	r24, r10
    2056:	2d d1       	rcall	.+602    	; 0x22b2 <strnlen_P>
    2058:	4c 01       	movw	r8, r24
    205a:	f3 2d       	mov	r31, r3
    205c:	f0 68       	ori	r31, 0x80	; 128
    205e:	3f 2e       	mov	r3, r31
    2060:	82 01       	movw	r16, r4
    2062:	33 fc       	sbrc	r3, 3
    2064:	19 c0       	rjmp	.+50     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2066:	82 2d       	mov	r24, r2
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	88 16       	cp	r8, r24
    206c:	99 06       	cpc	r9, r25
    206e:	a0 f4       	brcc	.+40     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2070:	b6 01       	movw	r22, r12
    2072:	80 e2       	ldi	r24, 0x20	; 32
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	8c de       	rcall	.-744    	; 0x1d90 <fputc>
    2078:	2a 94       	dec	r2
    207a:	f5 cf       	rjmp	.-22     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    207c:	f5 01       	movw	r30, r10
    207e:	37 fc       	sbrc	r3, 7
    2080:	85 91       	lpm	r24, Z+
    2082:	37 fe       	sbrs	r3, 7
    2084:	81 91       	ld	r24, Z+
    2086:	5f 01       	movw	r10, r30
    2088:	b6 01       	movw	r22, r12
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	81 de       	rcall	.-766    	; 0x1d90 <fputc>
    208e:	21 10       	cpse	r2, r1
    2090:	2a 94       	dec	r2
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	82 1a       	sub	r8, r18
    2096:	91 08       	sbc	r9, r1
    2098:	81 14       	cp	r8, r1
    209a:	91 04       	cpc	r9, r1
    209c:	79 f7       	brne	.-34     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    209e:	e1 c0       	rjmp	.+450    	; 0x2262 <__stack+0x163>
    20a0:	84 36       	cpi	r24, 0x64	; 100
    20a2:	11 f0       	breq	.+4      	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    20a4:	89 36       	cpi	r24, 0x69	; 105
    20a6:	39 f5       	brne	.+78     	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    20a8:	f8 01       	movw	r30, r16
    20aa:	37 fe       	sbrs	r3, 7
    20ac:	07 c0       	rjmp	.+14     	; 0x20bc <__DATA_REGION_LENGTH__+0xbc>
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	0c 5f       	subi	r16, 0xFC	; 252
    20b8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <__DATA_REGION_LENGTH__+0xcc>
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	07 2e       	mov	r0, r23
    20c2:	00 0c       	add	r0, r0
    20c4:	88 0b       	sbc	r24, r24
    20c6:	99 0b       	sbc	r25, r25
    20c8:	0e 5f       	subi	r16, 0xFE	; 254
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	f3 2d       	mov	r31, r3
    20ce:	ff 76       	andi	r31, 0x6F	; 111
    20d0:	3f 2e       	mov	r3, r31
    20d2:	97 ff       	sbrs	r25, 7
    20d4:	09 c0       	rjmp	.+18     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20d6:	90 95       	com	r25
    20d8:	80 95       	com	r24
    20da:	70 95       	com	r23
    20dc:	61 95       	neg	r22
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	8f 4f       	sbci	r24, 0xFF	; 255
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	f0 68       	ori	r31, 0x80	; 128
    20e6:	3f 2e       	mov	r3, r31
    20e8:	2a e0       	ldi	r18, 0x0A	; 10
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	a3 01       	movw	r20, r6
    20ee:	f7 d0       	rcall	.+494    	; 0x22de <__ultoa_invert>
    20f0:	88 2e       	mov	r8, r24
    20f2:	86 18       	sub	r8, r6
    20f4:	44 c0       	rjmp	.+136    	; 0x217e <__stack+0x7f>
    20f6:	85 37       	cpi	r24, 0x75	; 117
    20f8:	31 f4       	brne	.+12     	; 0x2106 <__stack+0x7>
    20fa:	23 2d       	mov	r18, r3
    20fc:	2f 7e       	andi	r18, 0xEF	; 239
    20fe:	b2 2e       	mov	r11, r18
    2100:	2a e0       	ldi	r18, 0x0A	; 10
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	25 c0       	rjmp	.+74     	; 0x2150 <__stack+0x51>
    2106:	93 2d       	mov	r25, r3
    2108:	99 7f       	andi	r25, 0xF9	; 249
    210a:	b9 2e       	mov	r11, r25
    210c:	8f 36       	cpi	r24, 0x6F	; 111
    210e:	c1 f0       	breq	.+48     	; 0x2140 <__stack+0x41>
    2110:	18 f4       	brcc	.+6      	; 0x2118 <__stack+0x19>
    2112:	88 35       	cpi	r24, 0x58	; 88
    2114:	79 f0       	breq	.+30     	; 0x2134 <__stack+0x35>
    2116:	ae c0       	rjmp	.+348    	; 0x2274 <__stack+0x175>
    2118:	80 37       	cpi	r24, 0x70	; 112
    211a:	19 f0       	breq	.+6      	; 0x2122 <__stack+0x23>
    211c:	88 37       	cpi	r24, 0x78	; 120
    211e:	21 f0       	breq	.+8      	; 0x2128 <__stack+0x29>
    2120:	a9 c0       	rjmp	.+338    	; 0x2274 <__stack+0x175>
    2122:	e9 2f       	mov	r30, r25
    2124:	e0 61       	ori	r30, 0x10	; 16
    2126:	be 2e       	mov	r11, r30
    2128:	b4 fe       	sbrs	r11, 4
    212a:	0d c0       	rjmp	.+26     	; 0x2146 <__stack+0x47>
    212c:	fb 2d       	mov	r31, r11
    212e:	f4 60       	ori	r31, 0x04	; 4
    2130:	bf 2e       	mov	r11, r31
    2132:	09 c0       	rjmp	.+18     	; 0x2146 <__stack+0x47>
    2134:	34 fe       	sbrs	r3, 4
    2136:	0a c0       	rjmp	.+20     	; 0x214c <__stack+0x4d>
    2138:	29 2f       	mov	r18, r25
    213a:	26 60       	ori	r18, 0x06	; 6
    213c:	b2 2e       	mov	r11, r18
    213e:	06 c0       	rjmp	.+12     	; 0x214c <__stack+0x4d>
    2140:	28 e0       	ldi	r18, 0x08	; 8
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <__stack+0x51>
    2146:	20 e1       	ldi	r18, 0x10	; 16
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <__stack+0x51>
    214c:	20 e1       	ldi	r18, 0x10	; 16
    214e:	32 e0       	ldi	r19, 0x02	; 2
    2150:	f8 01       	movw	r30, r16
    2152:	b7 fe       	sbrs	r11, 7
    2154:	07 c0       	rjmp	.+14     	; 0x2164 <__stack+0x65>
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	0c 5f       	subi	r16, 0xFC	; 252
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <__stack+0x71>
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 5f       	subi	r16, 0xFE	; 254
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	a3 01       	movw	r20, r6
    2172:	b5 d0       	rcall	.+362    	; 0x22de <__ultoa_invert>
    2174:	88 2e       	mov	r8, r24
    2176:	86 18       	sub	r8, r6
    2178:	fb 2d       	mov	r31, r11
    217a:	ff 77       	andi	r31, 0x7F	; 127
    217c:	3f 2e       	mov	r3, r31
    217e:	36 fe       	sbrs	r3, 6
    2180:	0d c0       	rjmp	.+26     	; 0x219c <__stack+0x9d>
    2182:	23 2d       	mov	r18, r3
    2184:	2e 7f       	andi	r18, 0xFE	; 254
    2186:	a2 2e       	mov	r10, r18
    2188:	89 14       	cp	r8, r9
    218a:	58 f4       	brcc	.+22     	; 0x21a2 <__stack+0xa3>
    218c:	34 fe       	sbrs	r3, 4
    218e:	0b c0       	rjmp	.+22     	; 0x21a6 <__stack+0xa7>
    2190:	32 fc       	sbrc	r3, 2
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <__stack+0xa7>
    2194:	83 2d       	mov	r24, r3
    2196:	8e 7e       	andi	r24, 0xEE	; 238
    2198:	a8 2e       	mov	r10, r24
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <__stack+0xa7>
    219c:	b8 2c       	mov	r11, r8
    219e:	a3 2c       	mov	r10, r3
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <__stack+0xa9>
    21a2:	b8 2c       	mov	r11, r8
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <__stack+0xa9>
    21a6:	b9 2c       	mov	r11, r9
    21a8:	a4 fe       	sbrs	r10, 4
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <__stack+0xcb>
    21ac:	fe 01       	movw	r30, r28
    21ae:	e8 0d       	add	r30, r8
    21b0:	f1 1d       	adc	r31, r1
    21b2:	80 81       	ld	r24, Z
    21b4:	80 33       	cpi	r24, 0x30	; 48
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <__stack+0xc1>
    21b8:	9a 2d       	mov	r25, r10
    21ba:	99 7e       	andi	r25, 0xE9	; 233
    21bc:	a9 2e       	mov	r10, r25
    21be:	09 c0       	rjmp	.+18     	; 0x21d2 <__stack+0xd3>
    21c0:	a2 fe       	sbrs	r10, 2
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <__stack+0xd1>
    21c4:	b3 94       	inc	r11
    21c6:	b3 94       	inc	r11
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <__stack+0xd3>
    21ca:	8a 2d       	mov	r24, r10
    21cc:	86 78       	andi	r24, 0x86	; 134
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <__stack+0xd3>
    21d0:	b3 94       	inc	r11
    21d2:	a3 fc       	sbrc	r10, 3
    21d4:	10 c0       	rjmp	.+32     	; 0x21f6 <__stack+0xf7>
    21d6:	a0 fe       	sbrs	r10, 0
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <__stack+0xe7>
    21da:	b2 14       	cp	r11, r2
    21dc:	80 f4       	brcc	.+32     	; 0x21fe <__stack+0xff>
    21de:	28 0c       	add	r2, r8
    21e0:	92 2c       	mov	r9, r2
    21e2:	9b 18       	sub	r9, r11
    21e4:	0d c0       	rjmp	.+26     	; 0x2200 <__stack+0x101>
    21e6:	b2 14       	cp	r11, r2
    21e8:	58 f4       	brcc	.+22     	; 0x2200 <__stack+0x101>
    21ea:	b6 01       	movw	r22, r12
    21ec:	80 e2       	ldi	r24, 0x20	; 32
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	cf dd       	rcall	.-1122   	; 0x1d90 <fputc>
    21f2:	b3 94       	inc	r11
    21f4:	f8 cf       	rjmp	.-16     	; 0x21e6 <__stack+0xe7>
    21f6:	b2 14       	cp	r11, r2
    21f8:	18 f4       	brcc	.+6      	; 0x2200 <__stack+0x101>
    21fa:	2b 18       	sub	r2, r11
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <__stack+0x103>
    21fe:	98 2c       	mov	r9, r8
    2200:	21 2c       	mov	r2, r1
    2202:	a4 fe       	sbrs	r10, 4
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <__stack+0x125>
    2206:	b6 01       	movw	r22, r12
    2208:	80 e3       	ldi	r24, 0x30	; 48
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	c1 dd       	rcall	.-1150   	; 0x1d90 <fputc>
    220e:	a2 fe       	sbrs	r10, 2
    2210:	16 c0       	rjmp	.+44     	; 0x223e <__stack+0x13f>
    2212:	a1 fc       	sbrc	r10, 1
    2214:	03 c0       	rjmp	.+6      	; 0x221c <__stack+0x11d>
    2216:	88 e7       	ldi	r24, 0x78	; 120
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x121>
    221c:	88 e5       	ldi	r24, 0x58	; 88
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	b6 01       	movw	r22, r12
    2222:	0c c0       	rjmp	.+24     	; 0x223c <__stack+0x13d>
    2224:	8a 2d       	mov	r24, r10
    2226:	86 78       	andi	r24, 0x86	; 134
    2228:	51 f0       	breq	.+20     	; 0x223e <__stack+0x13f>
    222a:	a1 fe       	sbrs	r10, 1
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <__stack+0x133>
    222e:	8b e2       	ldi	r24, 0x2B	; 43
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <__stack+0x135>
    2232:	80 e2       	ldi	r24, 0x20	; 32
    2234:	a7 fc       	sbrc	r10, 7
    2236:	8d e2       	ldi	r24, 0x2D	; 45
    2238:	b6 01       	movw	r22, r12
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a9 dd       	rcall	.-1198   	; 0x1d90 <fputc>
    223e:	89 14       	cp	r8, r9
    2240:	30 f4       	brcc	.+12     	; 0x224e <__stack+0x14f>
    2242:	b6 01       	movw	r22, r12
    2244:	80 e3       	ldi	r24, 0x30	; 48
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a3 dd       	rcall	.-1210   	; 0x1d90 <fputc>
    224a:	9a 94       	dec	r9
    224c:	f8 cf       	rjmp	.-16     	; 0x223e <__stack+0x13f>
    224e:	8a 94       	dec	r8
    2250:	f3 01       	movw	r30, r6
    2252:	e8 0d       	add	r30, r8
    2254:	f1 1d       	adc	r31, r1
    2256:	80 81       	ld	r24, Z
    2258:	b6 01       	movw	r22, r12
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	99 dd       	rcall	.-1230   	; 0x1d90 <fputc>
    225e:	81 10       	cpse	r8, r1
    2260:	f6 cf       	rjmp	.-20     	; 0x224e <__stack+0x14f>
    2262:	22 20       	and	r2, r2
    2264:	09 f4       	brne	.+2      	; 0x2268 <__stack+0x169>
    2266:	4e ce       	rjmp	.-868    	; 0x1f04 <vfprintf+0x4c>
    2268:	b6 01       	movw	r22, r12
    226a:	80 e2       	ldi	r24, 0x20	; 32
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	90 dd       	rcall	.-1248   	; 0x1d90 <fputc>
    2270:	2a 94       	dec	r2
    2272:	f7 cf       	rjmp	.-18     	; 0x2262 <__stack+0x163>
    2274:	f6 01       	movw	r30, r12
    2276:	86 81       	ldd	r24, Z+6	; 0x06
    2278:	97 81       	ldd	r25, Z+7	; 0x07
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <__stack+0x181>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	9f ef       	ldi	r25, 0xFF	; 255
    2280:	2b 96       	adiw	r28, 0x0b	; 11
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	bf 90       	pop	r11
    229e:	af 90       	pop	r10
    22a0:	9f 90       	pop	r9
    22a2:	8f 90       	pop	r8
    22a4:	7f 90       	pop	r7
    22a6:	6f 90       	pop	r6
    22a8:	5f 90       	pop	r5
    22aa:	4f 90       	pop	r4
    22ac:	3f 90       	pop	r3
    22ae:	2f 90       	pop	r2
    22b0:	08 95       	ret

000022b2 <strnlen_P>:
    22b2:	fc 01       	movw	r30, r24
    22b4:	05 90       	lpm	r0, Z+
    22b6:	61 50       	subi	r22, 0x01	; 1
    22b8:	70 40       	sbci	r23, 0x00	; 0
    22ba:	01 10       	cpse	r0, r1
    22bc:	d8 f7       	brcc	.-10     	; 0x22b4 <strnlen_P+0x2>
    22be:	80 95       	com	r24
    22c0:	90 95       	com	r25
    22c2:	8e 0f       	add	r24, r30
    22c4:	9f 1f       	adc	r25, r31
    22c6:	08 95       	ret

000022c8 <strnlen>:
    22c8:	fc 01       	movw	r30, r24
    22ca:	61 50       	subi	r22, 0x01	; 1
    22cc:	70 40       	sbci	r23, 0x00	; 0
    22ce:	01 90       	ld	r0, Z+
    22d0:	01 10       	cpse	r0, r1
    22d2:	d8 f7       	brcc	.-10     	; 0x22ca <strnlen+0x2>
    22d4:	80 95       	com	r24
    22d6:	90 95       	com	r25
    22d8:	8e 0f       	add	r24, r30
    22da:	9f 1f       	adc	r25, r31
    22dc:	08 95       	ret

000022de <__ultoa_invert>:
    22de:	fa 01       	movw	r30, r20
    22e0:	aa 27       	eor	r26, r26
    22e2:	28 30       	cpi	r18, 0x08	; 8
    22e4:	51 f1       	breq	.+84     	; 0x233a <__ultoa_invert+0x5c>
    22e6:	20 31       	cpi	r18, 0x10	; 16
    22e8:	81 f1       	breq	.+96     	; 0x234a <__ultoa_invert+0x6c>
    22ea:	e8 94       	clt
    22ec:	6f 93       	push	r22
    22ee:	6e 7f       	andi	r22, 0xFE	; 254
    22f0:	6e 5f       	subi	r22, 0xFE	; 254
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	8f 4f       	sbci	r24, 0xFF	; 255
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	af 4f       	sbci	r26, 0xFF	; 255
    22fa:	b1 e0       	ldi	r27, 0x01	; 1
    22fc:	3e d0       	rcall	.+124    	; 0x237a <__ultoa_invert+0x9c>
    22fe:	b4 e0       	ldi	r27, 0x04	; 4
    2300:	3c d0       	rcall	.+120    	; 0x237a <__ultoa_invert+0x9c>
    2302:	67 0f       	add	r22, r23
    2304:	78 1f       	adc	r23, r24
    2306:	89 1f       	adc	r24, r25
    2308:	9a 1f       	adc	r25, r26
    230a:	a1 1d       	adc	r26, r1
    230c:	68 0f       	add	r22, r24
    230e:	79 1f       	adc	r23, r25
    2310:	8a 1f       	adc	r24, r26
    2312:	91 1d       	adc	r25, r1
    2314:	a1 1d       	adc	r26, r1
    2316:	6a 0f       	add	r22, r26
    2318:	71 1d       	adc	r23, r1
    231a:	81 1d       	adc	r24, r1
    231c:	91 1d       	adc	r25, r1
    231e:	a1 1d       	adc	r26, r1
    2320:	20 d0       	rcall	.+64     	; 0x2362 <__ultoa_invert+0x84>
    2322:	09 f4       	brne	.+2      	; 0x2326 <__ultoa_invert+0x48>
    2324:	68 94       	set
    2326:	3f 91       	pop	r19
    2328:	2a e0       	ldi	r18, 0x0A	; 10
    232a:	26 9f       	mul	r18, r22
    232c:	11 24       	eor	r1, r1
    232e:	30 19       	sub	r19, r0
    2330:	30 5d       	subi	r19, 0xD0	; 208
    2332:	31 93       	st	Z+, r19
    2334:	de f6       	brtc	.-74     	; 0x22ec <__ultoa_invert+0xe>
    2336:	cf 01       	movw	r24, r30
    2338:	08 95       	ret
    233a:	46 2f       	mov	r20, r22
    233c:	47 70       	andi	r20, 0x07	; 7
    233e:	40 5d       	subi	r20, 0xD0	; 208
    2340:	41 93       	st	Z+, r20
    2342:	b3 e0       	ldi	r27, 0x03	; 3
    2344:	0f d0       	rcall	.+30     	; 0x2364 <__ultoa_invert+0x86>
    2346:	c9 f7       	brne	.-14     	; 0x233a <__ultoa_invert+0x5c>
    2348:	f6 cf       	rjmp	.-20     	; 0x2336 <__ultoa_invert+0x58>
    234a:	46 2f       	mov	r20, r22
    234c:	4f 70       	andi	r20, 0x0F	; 15
    234e:	40 5d       	subi	r20, 0xD0	; 208
    2350:	4a 33       	cpi	r20, 0x3A	; 58
    2352:	18 f0       	brcs	.+6      	; 0x235a <__ultoa_invert+0x7c>
    2354:	49 5d       	subi	r20, 0xD9	; 217
    2356:	31 fd       	sbrc	r19, 1
    2358:	40 52       	subi	r20, 0x20	; 32
    235a:	41 93       	st	Z+, r20
    235c:	02 d0       	rcall	.+4      	; 0x2362 <__ultoa_invert+0x84>
    235e:	a9 f7       	brne	.-22     	; 0x234a <__ultoa_invert+0x6c>
    2360:	ea cf       	rjmp	.-44     	; 0x2336 <__ultoa_invert+0x58>
    2362:	b4 e0       	ldi	r27, 0x04	; 4
    2364:	a6 95       	lsr	r26
    2366:	97 95       	ror	r25
    2368:	87 95       	ror	r24
    236a:	77 95       	ror	r23
    236c:	67 95       	ror	r22
    236e:	ba 95       	dec	r27
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__ultoa_invert+0x86>
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	61 05       	cpc	r22, r1
    2376:	71 05       	cpc	r23, r1
    2378:	08 95       	ret
    237a:	9b 01       	movw	r18, r22
    237c:	ac 01       	movw	r20, r24
    237e:	0a 2e       	mov	r0, r26
    2380:	06 94       	lsr	r0
    2382:	57 95       	ror	r21
    2384:	47 95       	ror	r20
    2386:	37 95       	ror	r19
    2388:	27 95       	ror	r18
    238a:	ba 95       	dec	r27
    238c:	c9 f7       	brne	.-14     	; 0x2380 <__ultoa_invert+0xa2>
    238e:	62 0f       	add	r22, r18
    2390:	73 1f       	adc	r23, r19
    2392:	84 1f       	adc	r24, r20
    2394:	95 1f       	adc	r25, r21
    2396:	a0 1d       	adc	r26, r0
    2398:	08 95       	ret

0000239a <_exit>:
    239a:	f8 94       	cli

0000239c <__stop_program>:
    239c:	ff cf       	rjmp	.-2      	; 0x239c <__stop_program>
