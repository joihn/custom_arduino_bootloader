
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015a  0080015a  00000d5e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005006  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a32  00000000  00000000  00005fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b2e  00000000  00000000  00007a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c8  00000000  00000000  0000a550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023fe  00000000  00000000  0000ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b6b  00000000  00000000  0000d016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000fb81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	b4 c2       	rjmp	.+1384   	; 0x592 <__vector_10>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	f2 04       	cpc	r15, r2
  9a:	14 05       	cpc	r17, r4
  9c:	01 06       	cpc	r0, r17
  9e:	14 05       	cpc	r17, r4
  a0:	01 06       	cpc	r0, r17
  a2:	59 05       	cpc	r21, r9
  a4:	7c 05       	cpc	r23, r12
  a6:	01 06       	cpc	r0, r17
  a8:	ce 05       	cpc	r28, r14
  aa:	e0 05       	cpc	r30, r0

000000ac <ProductString>:
  ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
  bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
  ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
  e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
  e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 118:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000126 <DeviceDescriptor>:
 126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 136:	dc 01                                               ..

00000138 <__ctors_end>:
 138:	11 24       	eor	r1, r1
 13a:	1f be       	out	0x3f, r1	; 63
 13c:	cf ef       	ldi	r28, 0xFF	; 255
 13e:	d0 e2       	ldi	r29, 0x20	; 32
 140:	de bf       	out	0x3e, r29	; 62
 142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	e0 e7       	ldi	r30, 0x70	; 112
 14c:	fc e0       	ldi	r31, 0x0C	; 12
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	aa 35       	cpi	r26, 0x5A	; 90
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	aa e5       	ldi	r26, 0x5A	; 90
 162:	b1 e0       	ldi	r27, 0x01	; 1
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a8 36       	cpi	r26, 0x68	; 104
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	f9 d0       	rcall	.+498    	; 0x362 <main>
 170:	7d c5       	rjmp	.+2810   	; 0xc6c <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 174:	9b b1       	in	r25, 0x0b	; 11
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 2b       	or	r24, r25
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	08 95       	ret

0000017e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 17e:	84 b7       	in	r24, 0x34	; 52
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	a8 95       	wdr
 18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 18e:	88 61       	ori	r24, 0x18	; 24
 190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 198:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1aa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	8f 71       	andi	r24, 0x1F	; 31
 1b0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1b2:	8d b1       	in	r24, 0x0d	; 13
 1b4:	8f 7c       	andi	r24, 0xCF	; 207
 1b6:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	80 6e       	ori	r24, 0xE0	; 224
 1bc:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1be:	8e b1       	in	r24, 0x0e	; 14
 1c0:	80 63       	ori	r24, 0x30	; 48
 1c2:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	80 6f       	ori	r24, 0xF0	; 240
 1c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 1d0:	ca c1       	rjmp	.+916    	; 0x566 <USB_Init>

000001d2 <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1d2:	80 ea       	ldi	r24, 0xA0	; 160
 1d4:	cf cf       	rjmp	.-98     	; 0x174 <LEDs_SetAllLEDs>

000001d6 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	cd cf       	rjmp	.-102    	; 0x174 <LEDs_SetAllLEDs>

000001da <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 1da:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 1dc:	42 e0       	ldi	r20, 0x02	; 2
 1de:	61 ec       	ldi	r22, 0xC1	; 193
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	f6 d0       	rcall	.+492    	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv>
 1e4:	c8 2f       	mov	r28, r24
 1e6:	42 e1       	ldi	r20, 0x12	; 18
 1e8:	61 e8       	ldi	r22, 0x81	; 129
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	f1 d0       	rcall	.+482    	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv>
 1ee:	c8 23       	and	r28, r24
 1f0:	42 e1       	ldi	r20, 0x12	; 18
 1f2:	60 e8       	ldi	r22, 0x80	; 128
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	ec d0       	rcall	.+472    	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv>
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rate so that the host knows to send new values */
	LineEncoding.BaudRateBPS = 0;
 1f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 200:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 204:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 208:	cc 23       	and	r28, r28
 20a:	11 f0       	breq	.+4      	; 0x210 <EVENT_USB_Device_ConfigurationChanged+0x36>
 20c:	81 11       	cpse	r24, r1
 20e:	02 c0       	rjmp	.+4      	; 0x214 <EVENT_USB_Device_ConfigurationChanged+0x3a>
 210:	80 e9       	ldi	r24, 0x90	; 144
 212:	01 c0       	rjmp	.+2      	; 0x216 <EVENT_USB_Device_ConfigurationChanged+0x3c>
}
 214:	80 e6       	ldi	r24, 0x60	; 96

	/* Reset line encoding baud rate so that the host knows to send new values */
	LineEncoding.BaudRateBPS = 0;

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 216:	cf 91       	pop	r28
 218:	ad cf       	rjmp	.-166    	; 0x174 <LEDs_SetAllLEDs>

0000021a <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 21a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <USB_ControlRequest+0x1>
 21e:	81 32       	cpi	r24, 0x21	; 33
 220:	29 f0       	breq	.+10     	; 0x22c <EVENT_USB_Device_ControlRequest+0x12>
 222:	82 32       	cpi	r24, 0x22	; 34
 224:	49 f1       	breq	.+82     	; 0x278 <EVENT_USB_Device_ControlRequest+0x5e>
 226:	80 32       	cpi	r24, 0x20	; 32
 228:	89 f5       	brne	.+98     	; 0x28c <EVENT_USB_Device_ControlRequest+0x72>
 22a:	12 c0       	rjmp	.+36     	; 0x250 <EVENT_USB_Device_ControlRequest+0x36>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 22c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <USB_ControlRequest>
 230:	81 3a       	cpi	r24, 0xA1	; 161
 232:	61 f5       	brne	.+88     	; 0x28c <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 234:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 238:	87 7f       	andi	r24, 0xF7	; 247
 23a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 23e:	67 e0       	ldi	r22, 0x07	; 7
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	b7 d2       	rcall	.+1390   	; 0x7b6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 248:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 24c:	8b 77       	andi	r24, 0x7B	; 123
 24e:	11 c0       	rjmp	.+34     	; 0x272 <EVENT_USB_Device_ControlRequest+0x58>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 250:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <USB_ControlRequest>
 254:	81 32       	cpi	r24, 0x21	; 33
 256:	d1 f4       	brne	.+52     	; 0x28c <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 258:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 25c:	87 7f       	andi	r24, 0xF7	; 247
 25e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	fd d2       	rcall	.+1530   	; 0x866 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 26c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 270:	8e 77       	andi	r24, 0x7E	; 126
 272:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 276:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 278:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <USB_ControlRequest>
 27c:	81 32       	cpi	r24, 0x21	; 33
 27e:	31 f4       	brne	.+12     	; 0x28c <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 280:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 28a:	d6 c0       	rjmp	.+428    	; 0x438 <Endpoint_ClearStatusStage>
 28c:	08 95       	ret

0000028e <CDC_Task>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 28e:	83 b1       	in	r24, 0x03	; 3
 290:	9c b1       	in	r25, 0x0c	; 12
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 292:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <USB_DeviceState>
 296:	24 30       	cpi	r18, 0x04	; 4
 298:	09 f0       	breq	.+2      	; 0x29c <CDC_Task+0xe>
 29a:	62 c0       	rjmp	.+196    	; 0x360 <CDC_Task+0xd2>
 29c:	90 95       	com	r25
 29e:	90 73       	andi	r25, 0x30	; 48
 2a0:	96 95       	lsr	r25
 2a2:	80 95       	com	r24
 2a4:	80 7e       	andi	r24, 0xE0	; 224
 2a6:	89 2b       	or	r24, r25
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 2a8:	87 fd       	sbrc	r24, 7
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <CDC_Task+0x34>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 2ac:	84 fd       	sbrc	r24, 4
 2ae:	28 c0       	rjmp	.+80     	; 0x300 <CDC_Task+0x72>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 2b0:	86 fd       	sbrc	r24, 6
 2b2:	29 c0       	rjmp	.+82     	; 0x306 <CDC_Task+0x78>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 2b4:	83 fd       	sbrc	r24, 3
 2b6:	2a c0       	rjmp	.+84     	; 0x30c <CDC_Task+0x7e>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 2b8:	85 fd       	sbrc	r24, 5
 2ba:	2b c0       	rjmp	.+86     	; 0x312 <CDC_Task+0x84>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 2bc:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
 2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <CDC_Task+0x58>
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
 2c2:	8b e4       	ldi	r24, 0x4B	; 75
 2c4:	91 e0       	ldi	r25, 0x01	; 1
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding.BaudRateBPS)
 2c6:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <__data_end>
 2ca:	21 11       	cpse	r18, r1
 2cc:	0c c0       	rjmp	.+24     	; 0x2e6 <CDC_Task+0x58>
 2ce:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d2:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2da:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2de:	45 2b       	or	r20, r21
 2e0:	46 2b       	or	r20, r22
 2e2:	47 2b       	or	r20, r23
 2e4:	c9 f4       	brne	.+50     	; 0x318 <CDC_Task+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 2f0:	82 ff       	sbrs	r24, 2
 2f2:	36 c0       	rjmp	.+108    	; 0x360 <CDC_Task+0xd2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2f8:	8b 77       	andi	r24, 0x7B	; 123
 2fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2fe:	08 95       	ret

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
 300:	8b e3       	ldi	r24, 0x3B	; 59
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	e0 cf       	rjmp	.-64     	; 0x2c6 <CDC_Task+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
 306:	8b e2       	ldi	r24, 0x2B	; 43
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	dd cf       	rjmp	.-70     	; 0x2c6 <CDC_Task+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
 30c:	8a e1       	ldi	r24, 0x1A	; 26
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	da cf       	rjmp	.-76     	; 0x2c6 <CDC_Task+0x38>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
 312:	87 e0       	ldi	r24, 0x07	; 7
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	d7 cf       	rjmp	.-82     	; 0x2c6 <CDC_Task+0x38>
	  ActionSent = false;

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding.BaudRateBPS)
	{
		ActionSent = true;
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <__data_end>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 31e:	23 e0       	ldi	r18, 0x03	; 3
 320:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString), NULL);
 324:	fc 01       	movw	r30, r24
 326:	01 90       	ld	r0, Z+
 328:	00 20       	and	r0, r0
 32a:	e9 f7       	brne	.-6      	; 0x326 <CDC_Task+0x98>
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	bf 01       	movw	r22, r30
 330:	68 1b       	sub	r22, r24
 332:	79 0b       	sbc	r23, r25
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	f4 d1       	rcall	.+1000   	; 0x722 <Endpoint_Write_Stream_LE>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 33a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 33e:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 346:	8e 77       	andi	r24, 0x7E	; 126
 348:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* If the last packet filled the endpoint, send an empty packet to release the buffer on
		 * the receiver (otherwise all data will be cached until a non-full packet is received) */
		if (IsFull)
 34c:	20 31       	cpi	r18, 0x10	; 16
 34e:	31 05       	cpc	r19, r1
		{
			/* Wait until the endpoint is ready for another packet */
			Endpoint_WaitUntilReady();
 350:	51 f6       	brne	.-108    	; 0x2e6 <CDC_Task+0x58>
 352:	91 d0       	rcall	.+290    	; 0x476 <Endpoint_WaitUntilReady>
 354:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 358:	8e 77       	andi	r24, 0x7E	; 126
 35a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 35e:	c3 cf       	rjmp	.-122    	; 0x2e6 <CDC_Task+0x58>
 360:	08 95       	ret

00000362 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 362:	0d df       	rcall	.-486    	; 0x17e <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	06 df       	rcall	.-500    	; 0x174 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		CDC_Task();
 368:	78 94       	sei
 36a:	91 df       	rcall	.-222    	; 0x28e <CDC_Task>
		USB_USBTask();
 36c:	64 d4       	rcall	.+2248   	; 0xc36 <USB_USBTask>
 36e:	fd cf       	rjmp	.-6      	; 0x36a <main+0x8>

00000370 <CALLBACK_USB_GetDescriptor>:
 370:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 372:	33 27       	eor	r19, r19
 374:	22 30       	cpi	r18, 0x02	; 2
 376:	31 05       	cpc	r19, r1
 378:	59 f0       	breq	.+22     	; 0x390 <CALLBACK_USB_GetDescriptor+0x20>
 37a:	23 30       	cpi	r18, 0x03	; 3
 37c:	31 05       	cpc	r19, r1
 37e:	69 f0       	breq	.+26     	; 0x39a <CALLBACK_USB_GetDescriptor+0x2a>
 380:	21 30       	cpi	r18, 0x01	; 1
 382:	31 05       	cpc	r19, r1
 384:	e9 f4       	brne	.+58     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 386:	82 e1       	ldi	r24, 0x12	; 18
 388:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 38a:	26 e2       	ldi	r18, 0x26	; 38
 38c:	31 e0       	ldi	r19, 0x01	; 1
 38e:	1c c0       	rjmp	.+56     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 390:	8e e3       	ldi	r24, 0x3E	; 62
 392:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 394:	28 ee       	ldi	r18, 0xE8	; 232
 396:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 398:	17 c0       	rjmp	.+46     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 39a:	99 27       	eor	r25, r25
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	91 05       	cpc	r25, r1
 3a0:	49 f0       	breq	.+18     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x44>
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x3e>
 3a4:	02 97       	sbiw	r24, 0x02	; 2
 3a6:	61 f4       	brne	.+24     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3a8:	ec ea       	ldi	r30, 0xAC	; 172
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3ae:	e4 ee       	ldi	r30, 0xE4	; 228
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3b4:	ea ec       	ldi	r30, 0xCA	; 202
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3b8:	84 91       	lpm	r24, Z
 3ba:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 3bc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3c8:	fa 01       	movw	r30, r20
 3ca:	31 83       	std	Z+1, r19	; 0x01
 3cc:	20 83       	st	Z, r18
	return Size;
}
 3ce:	08 95       	ret

000003d0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 3d0:	98 2f       	mov	r25, r24
 3d2:	97 30       	cpi	r25, 0x07	; 7
 3d4:	68 f5       	brcc	.+90     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3d6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3da:	98 17       	cp	r25, r24
 3dc:	39 f0       	breq	.+14     	; 0x3ec <Endpoint_ConfigureEndpoint_Prv+0x1c>
 3de:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3e2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3e6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <Endpoint_ConfigureEndpoint_Prv+0x22>
 3ec:	24 2f       	mov	r18, r20
 3ee:	76 2f       	mov	r23, r22
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	21 fd       	sbrc	r18, 1
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <Endpoint_ConfigureEndpoint_Prv+0x2a>
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	ec cf       	rjmp	.-40     	; 0x3d2 <Endpoint_ConfigureEndpoint_Prv+0x2>
 3fa:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3fe:	3e 7f       	andi	r19, 0xFE	; 254
 400:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 404:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 408:	3d 7f       	andi	r19, 0xFD	; 253
 40a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 40e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 412:	31 60       	ori	r19, 0x01	; 1
 414:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 418:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 41c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 420:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 424:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 428:	27 fd       	sbrc	r18, 7
 42a:	e5 cf       	rjmp	.-54     	; 0x3f6 <Endpoint_ConfigureEndpoint_Prv+0x26>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
 430:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	08 95       	ret

00000438 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 438:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <USB_ControlRequest>
 43c:	87 ff       	sbrs	r24, 7
 43e:	11 c0       	rjmp	.+34     	; 0x462 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 440:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 444:	82 fd       	sbrc	r24, 2
 446:	05 c0       	rjmp	.+10     	; 0x452 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 448:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 44c:	81 11       	cpse	r24, r1
 44e:	f8 cf       	rjmp	.-16     	; 0x440 <Endpoint_ClearStatusStage+0x8>
 450:	11 c0       	rjmp	.+34     	; 0x474 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 452:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 456:	8b 77       	andi	r24, 0x7B	; 123
 458:	0b c0       	rjmp	.+22     	; 0x470 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 45a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 45e:	88 23       	and	r24, r24
 460:	49 f0       	breq	.+18     	; 0x474 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 466:	80 ff       	sbrs	r24, 0
 468:	f8 cf       	rjmp	.-16     	; 0x45a <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 46a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 46e:	8e 77       	andi	r24, 0x7E	; 126
 470:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 474:	08 95       	ret

00000476 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 476:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 47a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 47e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 480:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 484:	84 2f       	mov	r24, r20
 486:	81 70       	andi	r24, 0x01	; 1
 488:	40 ff       	sbrs	r20, 0
 48a:	23 c0       	rjmp	.+70     	; 0x4d2 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 48c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 490:	80 fd       	sbrc	r24, 0
 492:	1d c0       	rjmp	.+58     	; 0x4ce <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 494:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 498:	88 23       	and	r24, r24
 49a:	99 f0       	breq	.+38     	; 0x4c2 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 49c:	85 30       	cpi	r24, 0x05	; 5
 49e:	99 f0       	breq	.+38     	; 0x4c6 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 4a0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 4a4:	85 fd       	sbrc	r24, 5
 4a6:	11 c0       	rjmp	.+34     	; 0x4ca <Endpoint_WaitUntilReady+0x54>
 4a8:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 4ac:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 4b0:	24 17       	cp	r18, r20
 4b2:	35 07       	cpc	r19, r21
 4b4:	29 f3       	breq	.-54     	; 0x480 <Endpoint_WaitUntilReady+0xa>
 4b6:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 4b8:	11 f0       	breq	.+4      	; 0x4be <Endpoint_WaitUntilReady+0x48>
 4ba:	9a 01       	movw	r18, r20
 4bc:	e1 cf       	rjmp	.-62     	; 0x480 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4d2:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4d6:	42 ff       	sbrs	r20, 2
 4d8:	dd cf       	rjmp	.-70     	; 0x494 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4da:	08 95       	ret

000004dc <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4e4:	49 d0       	rcall	.+146    	; 0x578 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4e6:	50 d0       	rcall	.+160    	; 0x588 <USB_INT_ClearAllInterrupts>
 4e8:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4ea:	d0 e0       	ldi	r29, 0x00	; 0
 4ec:	88 81       	ld	r24, Y
 4ee:	8f 77       	andi	r24, 0x7F	; 127
 4f0:	88 83       	st	Y, r24
 4f2:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	88 83       	st	Y, r24
 4f8:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4fa:	8f 7d       	andi	r24, 0xDF	; 223
 4fc:	88 83       	st	Y, r24
 4fe:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	80 68       	ori	r24, 0x80	; 128
 506:	80 83       	st	Z, r24
 508:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 50a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 50e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 512:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 516:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 51a:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 51c:	10 e0       	ldi	r17, 0x00	; 0
 51e:	f8 01       	movw	r30, r16
 520:	80 81       	ld	r24, Z
 522:	8b 7f       	andi	r24, 0xFB	; 251
 524:	80 83       	st	Z, r24
 526:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 528:	81 60       	ori	r24, 0x01	; 1
 52a:	88 83       	st	Y, r24
 52c:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	4e df       	rcall	.-356    	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv>
 534:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	8e 7f       	andi	r24, 0xFE	; 254
 53c:	80 83       	st	Z, r24
 53e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	81 60       	ori	r24, 0x01	; 1
 546:	80 83       	st	Z, r24
 548:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 54a:	88 60       	ori	r24, 0x08	; 8
 54c:	80 83       	st	Z, r24
 54e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 550:	80 81       	ld	r24, Z
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	80 83       	st	Z, r24
 556:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 558:	80 61       	ori	r24, 0x10	; 16
 55a:	88 83       	st	Y, r24
 55c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	08 95       	ret

00000566 <USB_Init>:
 566:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <USB_IsInitialized>

	USB_ResetInterface();
 576:	b2 cf       	rjmp	.-156    	; 0x4dc <USB_ResetInterface>

00000578 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 578:	e8 ed       	ldi	r30, 0xD8	; 216
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	8c 7f       	andi	r24, 0xFC	; 252
 580:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 582:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 586:	08 95       	ret

00000588 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 588:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 58c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 590:	08 95       	ret

00000592 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	0b b6       	in	r0, 0x3b	; 59
 59e:	0f 92       	push	r0
 5a0:	2f 93       	push	r18
 5a2:	3f 93       	push	r19
 5a4:	4f 93       	push	r20
 5a6:	5f 93       	push	r21
 5a8:	6f 93       	push	r22
 5aa:	7f 93       	push	r23
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	af 93       	push	r26
 5b2:	bf 93       	push	r27
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 5b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5bc:	82 ff       	sbrs	r24, 2
 5be:	0a c0       	rjmp	.+20     	; 0x5d4 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 5c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5c4:	82 ff       	sbrs	r24, 2
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 5c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5cc:	8b 7f       	andi	r24, 0xFB	; 251
 5ce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5d2:	30 d3       	rcall	.+1632   	; 0xc34 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 5d4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 5d8:	80 ff       	sbrs	r24, 0
 5da:	1d c0       	rjmp	.+58     	; 0x616 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5dc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5e0:	80 ff       	sbrs	r24, 0
 5e2:	19 c0       	rjmp	.+50     	; 0x616 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5ee:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5f2:	80 ff       	sbrs	r24, 0
 5f4:	0c c0       	rjmp	.+24     	; 0x60e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5f6:	8c e0       	ldi	r24, 0x0C	; 12
 5f8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5fa:	8e e0       	ldi	r24, 0x0E	; 14
 5fc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 5fe:	09 b4       	in	r0, 0x29	; 41
 600:	00 fe       	sbrs	r0, 0
 602:	fd cf       	rjmp	.-6      	; 0x5fe <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <USB_DeviceState>
			EVENT_USB_Device_Connect();
 60a:	e3 dd       	rcall	.-1082   	; 0x1d2 <EVENT_USB_Device_Connect>
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 60e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 610:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 614:	e0 dd       	rcall	.-1088   	; 0x1d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 616:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 61a:	80 ff       	sbrs	r24, 0
 61c:	18 c0       	rjmp	.+48     	; 0x64e <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 61e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 622:	80 ff       	sbrs	r24, 0
 624:	14 c0       	rjmp	.+40     	; 0x64e <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 626:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 62a:	8e 7f       	andi	r24, 0xFE	; 254
 62c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 630:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 634:	80 61       	ori	r24, 0x10	; 16
 636:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 63a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 63e:	80 62       	ori	r24, 0x20	; 32
 640:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 644:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 64c:	f3 d2       	rcall	.+1510   	; 0xc34 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 64e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 652:	84 ff       	sbrs	r24, 4
 654:	2d c0       	rjmp	.+90     	; 0x6b0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 656:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 65a:	84 ff       	sbrs	r24, 4
 65c:	29 c0       	rjmp	.+82     	; 0x6b0 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 65e:	8c e0       	ldi	r24, 0x0C	; 12
 660:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 662:	8e e0       	ldi	r24, 0x0E	; 14
 664:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 666:	09 b4       	in	r0, 0x29	; 41
 668:	00 fe       	sbrs	r0, 0
 66a:	fd cf       	rjmp	.-6      	; 0x666 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 66c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 670:	8f 7d       	andi	r24, 0xDF	; 223
 672:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 676:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 67a:	8f 7e       	andi	r24, 0xEF	; 239
 67c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 680:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 684:	8f 7e       	andi	r24, 0xEF	; 239
 686:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 68a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 68e:	81 60       	ori	r24, 0x01	; 1
 690:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 694:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <USB_Device_ConfigurationNumber>
 698:	81 11       	cpse	r24, r1
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 69c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 6a0:	87 fd       	sbrc	r24, 7
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <__vector_10+0x116>
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <__vector_10+0x118>
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 6ae:	c2 d2       	rcall	.+1412   	; 0xc34 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6b4:	83 ff       	sbrs	r24, 3
 6b6:	22 c0       	rjmp	.+68     	; 0x6fc <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6bc:	83 ff       	sbrs	r24, 3
 6be:	1e c0       	rjmp	.+60     	; 0x6fc <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6c4:	87 7f       	andi	r24, 0xF7	; 247
 6c6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 6d0:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6d4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6d8:	8e 7f       	andi	r24, 0xFE	; 254
 6da:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6e2:	8e 7f       	andi	r24, 0xFE	; 254
 6e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6ec:	80 61       	ori	r24, 0x10	; 16
 6ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6f2:	42 e0       	ldi	r20, 0x02	; 2
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	6b de       	rcall	.-810    	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6fa:	9c d2       	rcall	.+1336   	; 0xc34 <USB_Event_Stub>
 6fc:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6fe:	ef 91       	pop	r30
 700:	bf 91       	pop	r27
 702:	af 91       	pop	r26
 704:	9f 91       	pop	r25
 706:	8f 91       	pop	r24
 708:	7f 91       	pop	r23
 70a:	6f 91       	pop	r22
 70c:	5f 91       	pop	r21
 70e:	4f 91       	pop	r20
 710:	3f 91       	pop	r19
 712:	2f 91       	pop	r18
 714:	0f 90       	pop	r0
 716:	0b be       	out	0x3b, r0	; 59
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

00000722 <Endpoint_Write_Stream_LE>:
 722:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 724:	df 92       	push	r13
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
 734:	8b 01       	movw	r16, r22
 736:	7a 01       	movw	r14, r20
 738:	9e de       	rcall	.-708    	; 0x476 <Endpoint_WaitUntilReady>
 73a:	81 11       	cpse	r24, r1
 73c:	33 c0       	rjmp	.+102    	; 0x7a4 <Endpoint_Write_Stream_LE+0x82>
 73e:	e1 14       	cp	r14, r1
 740:	f1 04       	cpc	r15, r1
 742:	39 f0       	breq	.+14     	; 0x752 <Endpoint_Write_Stream_LE+0x30>
 744:	f7 01       	movw	r30, r14
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	08 1b       	sub	r16, r24
 74c:	19 0b       	sbc	r17, r25
 74e:	c8 0f       	add	r28, r24
 750:	d9 1f       	adc	r29, r25
 752:	c1 2c       	mov	r12, r1
 754:	d1 2c       	mov	r13, r1
 756:	01 15       	cp	r16, r1
 758:	11 05       	cpc	r17, r1
 75a:	19 f1       	breq	.+70     	; 0x7a2 <Endpoint_Write_Stream_LE+0x80>
 75c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 760:	85 fd       	sbrc	r24, 5
 762:	16 c0       	rjmp	.+44     	; 0x790 <Endpoint_Write_Stream_LE+0x6e>
 764:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 768:	8e 77       	andi	r24, 0x7E	; 126
 76a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 76e:	63 d2       	rcall	.+1222   	; 0xc36 <USB_USBTask>
 770:	e1 14       	cp	r14, r1
 772:	f1 04       	cpc	r15, r1
 774:	49 f0       	breq	.+18     	; 0x788 <Endpoint_Write_Stream_LE+0x66>
 776:	f7 01       	movw	r30, r14
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	c8 0e       	add	r12, r24
 77e:	d9 1e       	adc	r13, r25
 780:	d1 82       	std	Z+1, r13	; 0x01
 782:	c0 82       	st	Z, r12
 784:	85 e0       	ldi	r24, 0x05	; 5
 786:	0e c0       	rjmp	.+28     	; 0x7a4 <Endpoint_Write_Stream_LE+0x82>
 788:	76 de       	rcall	.-788    	; 0x476 <Endpoint_WaitUntilReady>
 78a:	88 23       	and	r24, r24
 78c:	21 f3       	breq	.-56     	; 0x756 <Endpoint_Write_Stream_LE+0x34>
 78e:	0a c0       	rjmp	.+20     	; 0x7a4 <Endpoint_Write_Stream_LE+0x82>
 790:	89 91       	ld	r24, Y+
 792:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 796:	01 50       	subi	r16, 0x01	; 1
 798:	11 09       	sbc	r17, r1
 79a:	ff ef       	ldi	r31, 0xFF	; 255
 79c:	cf 1a       	sub	r12, r31
 79e:	df 0a       	sbc	r13, r31
 7a0:	da cf       	rjmp	.-76     	; 0x756 <Endpoint_Write_Stream_LE+0x34>
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	ff 90       	pop	r15
 7ae:	ef 90       	pop	r14
 7b0:	df 90       	pop	r13
 7b2:	cf 90       	pop	r12
 7b4:	08 95       	ret

000007b6 <Endpoint_Write_Control_Stream_LE>:
 7b6:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <USB_ControlRequest+0x6>
 7ba:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <USB_ControlRequest+0x7>
 7be:	26 17       	cp	r18, r22
 7c0:	37 07       	cpc	r19, r23
 7c2:	48 f0       	brcs	.+18     	; 0x7d6 <Endpoint_Write_Control_Stream_LE+0x20>
 7c4:	61 15       	cp	r22, r1
 7c6:	71 05       	cpc	r23, r1
 7c8:	39 f4       	brne	.+14     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x22>
 7ca:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7ce:	2e 77       	andi	r18, 0x7E	; 126
 7d0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x22>
 7d6:	b9 01       	movw	r22, r18
 7d8:	fc 01       	movw	r30, r24
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	61 15       	cp	r22, r1
 7de:	71 05       	cpc	r23, r1
 7e0:	69 f1       	breq	.+90     	; 0x83c <Endpoint_Write_Control_Stream_LE+0x86>
 7e2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 7e6:	88 23       	and	r24, r24
 7e8:	d1 f1       	breq	.+116    	; 0x85e <Endpoint_Write_Control_Stream_LE+0xa8>
 7ea:	85 30       	cpi	r24, 0x05	; 5
 7ec:	d1 f1       	breq	.+116    	; 0x862 <Endpoint_Write_Control_Stream_LE+0xac>
 7ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7f2:	83 fd       	sbrc	r24, 3
 7f4:	32 c0       	rjmp	.+100    	; 0x85a <Endpoint_Write_Control_Stream_LE+0xa4>
 7f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7fa:	82 fd       	sbrc	r24, 2
 7fc:	28 c0       	rjmp	.+80     	; 0x84e <Endpoint_Write_Control_Stream_LE+0x98>
 7fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 802:	80 ff       	sbrs	r24, 0
 804:	eb cf       	rjmp	.-42     	; 0x7dc <Endpoint_Write_Control_Stream_LE+0x26>
 806:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 80a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 80e:	61 15       	cp	r22, r1
 810:	71 05       	cpc	r23, r1
 812:	51 f0       	breq	.+20     	; 0x828 <Endpoint_Write_Control_Stream_LE+0x72>
 814:	88 30       	cpi	r24, 0x08	; 8
 816:	91 05       	cpc	r25, r1
 818:	38 f4       	brcc	.+14     	; 0x828 <Endpoint_Write_Control_Stream_LE+0x72>
 81a:	21 91       	ld	r18, Z+
 81c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 820:	61 50       	subi	r22, 0x01	; 1
 822:	71 09       	sbc	r23, r1
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	f3 cf       	rjmp	.-26     	; 0x80e <Endpoint_Write_Control_Stream_LE+0x58>
 828:	21 e0       	ldi	r18, 0x01	; 1
 82a:	08 97       	sbiw	r24, 0x08	; 8
 82c:	09 f0       	breq	.+2      	; 0x830 <Endpoint_Write_Control_Stream_LE+0x7a>
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 834:	8e 77       	andi	r24, 0x7E	; 126
 836:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 83a:	d0 cf       	rjmp	.-96     	; 0x7dc <Endpoint_Write_Control_Stream_LE+0x26>
 83c:	21 11       	cpse	r18, r1
 83e:	d1 cf       	rjmp	.-94     	; 0x7e2 <Endpoint_Write_Control_Stream_LE+0x2c>
 840:	06 c0       	rjmp	.+12     	; 0x84e <Endpoint_Write_Control_Stream_LE+0x98>
 842:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 846:	88 23       	and	r24, r24
 848:	51 f0       	breq	.+20     	; 0x85e <Endpoint_Write_Control_Stream_LE+0xa8>
 84a:	85 30       	cpi	r24, 0x05	; 5
 84c:	51 f0       	breq	.+20     	; 0x862 <Endpoint_Write_Control_Stream_LE+0xac>
 84e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 852:	82 ff       	sbrs	r24, 2
 854:	f6 cf       	rjmp	.-20     	; 0x842 <Endpoint_Write_Control_Stream_LE+0x8c>
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	08 95       	ret
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	08 95       	ret
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	08 95       	ret
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	08 95       	ret

00000866 <Endpoint_Read_Control_Stream_LE>:
 866:	61 15       	cp	r22, r1
 868:	71 05       	cpc	r23, r1
 86a:	29 f4       	brne	.+10     	; 0x876 <Endpoint_Read_Control_Stream_LE+0x10>
 86c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 870:	2b 77       	andi	r18, 0x7B	; 123
 872:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 876:	fc 01       	movw	r30, r24
 878:	61 15       	cp	r22, r1
 87a:	71 05       	cpc	r23, r1
 87c:	31 f1       	breq	.+76     	; 0x8ca <Endpoint_Read_Control_Stream_LE+0x64>
 87e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 882:	88 23       	and	r24, r24
 884:	51 f1       	breq	.+84     	; 0x8da <Endpoint_Read_Control_Stream_LE+0x74>
 886:	85 30       	cpi	r24, 0x05	; 5
 888:	51 f1       	breq	.+84     	; 0x8de <Endpoint_Read_Control_Stream_LE+0x78>
 88a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 88e:	83 fd       	sbrc	r24, 3
 890:	22 c0       	rjmp	.+68     	; 0x8d6 <Endpoint_Read_Control_Stream_LE+0x70>
 892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 896:	82 ff       	sbrs	r24, 2
 898:	ef cf       	rjmp	.-34     	; 0x878 <Endpoint_Read_Control_Stream_LE+0x12>
 89a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 89e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 8a2:	89 2b       	or	r24, r25
 8a4:	31 f0       	breq	.+12     	; 0x8b2 <Endpoint_Read_Control_Stream_LE+0x4c>
 8a6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8aa:	81 93       	st	Z+, r24
 8ac:	61 50       	subi	r22, 0x01	; 1
 8ae:	71 09       	sbc	r23, r1
 8b0:	a1 f7       	brne	.-24     	; 0x89a <Endpoint_Read_Control_Stream_LE+0x34>
 8b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b6:	8b 77       	andi	r24, 0x7B	; 123
 8b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8bc:	dd cf       	rjmp	.-70     	; 0x878 <Endpoint_Read_Control_Stream_LE+0x12>
 8be:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 8c2:	88 23       	and	r24, r24
 8c4:	51 f0       	breq	.+20     	; 0x8da <Endpoint_Read_Control_Stream_LE+0x74>
 8c6:	85 30       	cpi	r24, 0x05	; 5
 8c8:	51 f0       	breq	.+20     	; 0x8de <Endpoint_Read_Control_Stream_LE+0x78>
 8ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8ce:	80 ff       	sbrs	r24, 0
 8d0:	f6 cf       	rjmp	.-20     	; 0x8be <Endpoint_Read_Control_Stream_LE+0x58>
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	08 95       	ret
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	08 95       	ret
 8da:	82 e0       	ldi	r24, 0x02	; 2
 8dc:	08 95       	ret
 8de:	83 e0       	ldi	r24, 0x03	; 3
 8e0:	08 95       	ret

000008e2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8e2:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <USB_ControlRequest+0x6>
 8e6:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <USB_ControlRequest+0x7>
 8ea:	26 17       	cp	r18, r22
 8ec:	37 07       	cpc	r19, r23
 8ee:	48 f0       	brcs	.+18     	; 0x902 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8f0:	61 15       	cp	r22, r1
 8f2:	71 05       	cpc	r23, r1
 8f4:	39 f4       	brne	.+14     	; 0x904 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8fa:	2e 77       	andi	r18, 0x7E	; 126
 8fc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 900:	01 c0       	rjmp	.+2      	; 0x904 <Endpoint_Write_Control_PStream_LE+0x22>
 902:	b9 01       	movw	r22, r18
 904:	fc 01       	movw	r30, r24
 906:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 908:	61 15       	cp	r22, r1
 90a:	71 05       	cpc	r23, r1
 90c:	71 f1       	breq	.+92     	; 0x96a <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 90e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 912:	88 23       	and	r24, r24
 914:	d9 f1       	breq	.+118    	; 0x98c <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 916:	85 30       	cpi	r24, 0x05	; 5
 918:	d9 f1       	breq	.+118    	; 0x990 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 91a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 91e:	83 fd       	sbrc	r24, 3
 920:	33 c0       	rjmp	.+102    	; 0x988 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 922:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 926:	82 fd       	sbrc	r24, 2
 928:	29 c0       	rjmp	.+82     	; 0x97c <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 92a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 92e:	80 ff       	sbrs	r24, 0
 930:	eb cf       	rjmp	.-42     	; 0x908 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 932:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 936:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 93a:	61 15       	cp	r22, r1
 93c:	71 05       	cpc	r23, r1
 93e:	59 f0       	breq	.+22     	; 0x956 <Endpoint_Write_Control_PStream_LE+0x74>
 940:	88 30       	cpi	r24, 0x08	; 8
 942:	91 05       	cpc	r25, r1
 944:	40 f4       	brcc	.+16     	; 0x956 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 946:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 948:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 94c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 94e:	61 50       	subi	r22, 0x01	; 1
 950:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 952:	01 96       	adiw	r24, 0x01	; 1
 954:	f2 cf       	rjmp	.-28     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 956:	21 e0       	ldi	r18, 0x01	; 1
 958:	08 97       	sbiw	r24, 0x08	; 8
 95a:	09 f0       	breq	.+2      	; 0x95e <Endpoint_Write_Control_PStream_LE+0x7c>
 95c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 95e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 962:	8e 77       	andi	r24, 0x7E	; 126
 964:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 968:	cf cf       	rjmp	.-98     	; 0x908 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 96a:	21 11       	cpse	r18, r1
 96c:	d0 cf       	rjmp	.-96     	; 0x90e <Endpoint_Write_Control_PStream_LE+0x2c>
 96e:	06 c0       	rjmp	.+12     	; 0x97c <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 970:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 974:	88 23       	and	r24, r24
 976:	51 f0       	breq	.+20     	; 0x98c <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 978:	85 30       	cpi	r24, 0x05	; 5
 97a:	51 f0       	breq	.+20     	; 0x990 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 97c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 980:	82 ff       	sbrs	r24, 2
 982:	f6 cf       	rjmp	.-20     	; 0x970 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 98c:	82 e0       	ldi	r24, 0x02	; 2
 98e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 990:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 992:	08 95       	ret

00000994 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	aa 97       	sbiw	r28, 0x2a	; 42
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	e0 e6       	ldi	r30, 0x60	; 96
 9ae:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9b0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9b4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9b6:	21 e0       	ldi	r18, 0x01	; 1
 9b8:	e8 36       	cpi	r30, 0x68	; 104
 9ba:	f2 07       	cpc	r31, r18
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9be:	2d dc       	rcall	.-1958   	; 0x21a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 9c4:	83 ff       	sbrs	r24, 3
 9c6:	1d c1       	rjmp	.+570    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9c8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 9cc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <USB_ControlRequest+0x1>
 9d0:	49 2f       	mov	r20, r25
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	4a 30       	cpi	r20, 0x0A	; 10
 9d6:	51 05       	cpc	r21, r1
 9d8:	08 f0       	brcs	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0x48>
 9da:	13 c1       	rjmp	.+550    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
 9dc:	fa 01       	movw	r30, r20
 9de:	e4 5b       	subi	r30, 0xB4	; 180
 9e0:	ff 4f       	sbci	r31, 0xFF	; 255
 9e2:	3b c1       	rjmp	.+630    	; 0xc5a <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9e4:	80 38       	cpi	r24, 0x80	; 128
 9e6:	81 f0       	breq	.+32     	; 0xa08 <USB_Device_ProcessControlRequest+0x74>
 9e8:	82 38       	cpi	r24, 0x82	; 130
 9ea:	09 f0       	breq	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0x5a>
 9ec:	0a c1       	rjmp	.+532    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9ee:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_ControlRequest+0x4>
 9f2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 9fc:	85 fb       	bst	r24, 5
 9fe:	88 27       	eor	r24, r24
 a00:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a02:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a08:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a0c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <USB_Device_RemoteWakeupEnabled>
 a10:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a12:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a14:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a18:	97 7f       	andi	r25, 0xF7	; 247
 a1a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a1e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 a22:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 a26:	c5 c0       	rjmp	.+394    	; 0xbb2 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a28:	28 2f       	mov	r18, r24
 a2a:	2d 7f       	andi	r18, 0xFD	; 253
 a2c:	09 f0       	breq	.+2      	; 0xa30 <USB_Device_ProcessControlRequest+0x9c>
 a2e:	e9 c0       	rjmp	.+466    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a30:	88 23       	and	r24, r24
 a32:	19 f0       	breq	.+6      	; 0xa3a <USB_Device_ProcessControlRequest+0xa6>
 a34:	82 30       	cpi	r24, 0x02	; 2
 a36:	61 f0       	breq	.+24     	; 0xa50 <USB_Device_ProcessControlRequest+0xbc>
 a38:	e4 c0       	rjmp	.+456    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a3a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <USB_ControlRequest+0x2>
 a3e:	81 30       	cpi	r24, 0x01	; 1
 a40:	09 f0       	breq	.+2      	; 0xa44 <USB_Device_ProcessControlRequest+0xb0>
 a42:	df c0       	rjmp	.+446    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a44:	93 30       	cpi	r25, 0x03	; 3
 a46:	09 f0       	breq	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0xb6>
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <USB_Device_RemoteWakeupEnabled>
 a4e:	2b c0       	rjmp	.+86     	; 0xaa6 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a50:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <USB_ControlRequest+0x2>
 a54:	81 11       	cpse	r24, r1
 a56:	27 c0       	rjmp	.+78     	; 0xaa6 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a58:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_ControlRequest+0x4>
 a5c:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a5e:	09 f4       	brne	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0xce>
 a60:	d0 c0       	rjmp	.+416    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a62:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a66:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a6a:	20 ff       	sbrs	r18, 0
 a6c:	1c c0       	rjmp	.+56     	; 0xaa6 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a6e:	93 30       	cpi	r25, 0x03	; 3
 a70:	21 f4       	brne	.+8      	; 0xa7a <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a72:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a76:	80 62       	ori	r24, 0x20	; 32
 a78:	14 c0       	rjmp	.+40     	; 0xaa2 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a7a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a7e:	90 61       	ori	r25, 0x10	; 16
 a80:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a84:	21 e0       	ldi	r18, 0x01	; 1
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	a9 01       	movw	r20, r18
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <USB_Device_ProcessControlRequest+0xfc>
 a8c:	44 0f       	add	r20, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	8a 95       	dec	r24
 a92:	e2 f7       	brpl	.-8      	; 0xa8c <USB_Device_ProcessControlRequest+0xf8>
 a94:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 a98:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a9c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 aa0:	88 60       	ori	r24, 0x08	; 8
 aa2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aa6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aae:	87 7f       	andi	r24, 0xF7	; 247
 ab0:	83 c0       	rjmp	.+262    	; 0xbb8 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ab2:	81 11       	cpse	r24, r1
 ab4:	a6 c0       	rjmp	.+332    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 ab6:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <USB_ControlRequest+0x2>
 aba:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 abc:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 abe:	f8 94       	cli
 ac0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ac4:	87 7f       	andi	r24, 0xF7	; 247
 ac6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 aca:	b6 dc       	rcall	.-1684   	; 0x438 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 acc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 ad0:	80 ff       	sbrs	r24, 0
 ad2:	fc cf       	rjmp	.-8      	; 0xacc <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ad4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ad8:	80 78       	andi	r24, 0x80	; 128
 ada:	81 2b       	or	r24, r17

				UDADDR = Temp;
 adc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 ae0:	80 68       	ori	r24, 0x80	; 128
 ae2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ae6:	11 11       	cpse	r17, r1
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <USB_Device_ProcessControlRequest+0x15a>
 aea:	82 e0       	ldi	r24, 0x02	; 2
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <USB_Device_ProcessControlRequest+0x15c>
 aee:	83 e0       	ldi	r24, 0x03	; 3
 af0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 af4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 af6:	85 c0       	rjmp	.+266    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 af8:	80 58       	subi	r24, 0x80	; 128
 afa:	82 30       	cpi	r24, 0x02	; 2
 afc:	08 f0       	brcs	.+2      	; 0xb00 <USB_Device_ProcessControlRequest+0x16c>
 afe:	81 c0       	rjmp	.+258    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b00:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <USB_ControlRequest+0x2>
 b04:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <USB_ControlRequest+0x3>
 b08:	8c 3d       	cpi	r24, 0xDC	; 220
 b0a:	53 e0       	ldi	r21, 0x03	; 3
 b0c:	95 07       	cpc	r25, r21
 b0e:	71 f5       	brne	.+92     	; 0xb6c <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b10:	83 e0       	ldi	r24, 0x03	; 3
 b12:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b14:	8a e2       	ldi	r24, 0x2A	; 42
 b16:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b18:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b1a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b1c:	de 01       	movw	r26, r28
 b1e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b20:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b22:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b24:	51 e2       	ldi	r21, 0x21	; 33
 b26:	e3 2f       	mov	r30, r19
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 b2e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b30:	20 ff       	sbrs	r18, 0
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 b34:	e2 95       	swap	r30
 b36:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b38:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b3a:	ef 70       	andi	r30, 0x0F	; 15
 b3c:	8e 2f       	mov	r24, r30
 b3e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b40:	ea 30       	cpi	r30, 0x0A	; 10
 b42:	10 f0       	brcs	.+4      	; 0xb48 <USB_Device_ProcessControlRequest+0x1b4>
 b44:	c7 96       	adiw	r24, 0x37	; 55
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <USB_Device_ProcessControlRequest+0x1b6>
 b48:	c0 96       	adiw	r24, 0x30	; 48
 b4a:	8d 93       	st	X+, r24
 b4c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b4e:	2f 5f       	subi	r18, 0xFF	; 255
 b50:	24 31       	cpi	r18, 0x14	; 20
 b52:	49 f7       	brne	.-46     	; 0xb26 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b54:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b5a:	87 7f       	andi	r24, 0xF7	; 247
 b5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b60:	6a e2       	ldi	r22, 0x2A	; 42
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	ce 01       	movw	r24, r28
 b66:	01 96       	adiw	r24, 0x01	; 1
 b68:	26 de       	rcall	.-948    	; 0x7b6 <Endpoint_Write_Control_Stream_LE>
 b6a:	12 c0       	rjmp	.+36     	; 0xb90 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b6c:	ae 01       	movw	r20, r28
 b6e:	4f 5f       	subi	r20, 0xFF	; 255
 b70:	5f 4f       	sbci	r21, 0xFF	; 255
 b72:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <USB_ControlRequest+0x4>
 b76:	fc db       	rcall	.-2056   	; 0x370 <CALLBACK_USB_GetDescriptor>
 b78:	bc 01       	movw	r22, r24
 b7a:	89 2b       	or	r24, r25
 b7c:	09 f4       	brne	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0x1ec>
 b7e:	41 c0       	rjmp	.+130    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
 b80:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b84:	97 7f       	andi	r25, 0xF7	; 247
 b86:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b8a:	89 81       	ldd	r24, Y+1	; 0x01
 b8c:	9a 81       	ldd	r25, Y+2	; 0x02
 b8e:	a9 de       	rcall	.-686    	; 0x8e2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b94:	8b 77       	andi	r24, 0x7B	; 123
 b96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b9a:	33 c0       	rjmp	.+102    	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b9c:	80 38       	cpi	r24, 0x80	; 128
 b9e:	89 f5       	brne	.+98     	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ba4:	87 7f       	andi	r24, 0xF7	; 247
 ba6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 baa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bb6:	8e 77       	andi	r24, 0x7E	; 126
 bb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bbc:	3d dc       	rcall	.-1926   	; 0x438 <Endpoint_ClearStatusStage>
 bbe:	21 c0       	rjmp	.+66     	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bc0:	81 11       	cpse	r24, r1
 bc2:	1f c0       	rjmp	.+62     	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bc4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <USB_ControlRequest+0x2>
 bc8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <USB_ControlRequest+0x3>
 bcc:	99 27       	eor	r25, r25
 bce:	02 97       	sbiw	r24, 0x02	; 2
 bd0:	c4 f4       	brge	.+48     	; 0xc02 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bd6:	87 7f       	andi	r24, 0xF7	; 247
 bd8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bdc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <USB_ControlRequest+0x2>
 be0:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 be4:	29 dc       	rcall	.-1966   	; 0x438 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 be6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <USB_Device_ConfigurationNumber>
 bea:	81 11       	cpse	r24, r1
 bec:	06 c0       	rjmp	.+12     	; 0xbfa <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bee:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bf2:	87 fd       	sbrc	r24, 7
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <USB_Device_ProcessControlRequest+0x266>
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <USB_Device_ProcessControlRequest+0x268>
 bfa:	84 e0       	ldi	r24, 0x04	; 4
 bfc:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 c00:	ec da       	rcall	.-2600   	; 0x1da <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c06:	83 ff       	sbrs	r24, 3
 c08:	0a c0       	rjmp	.+20     	; 0xc1e <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c0a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c0e:	80 62       	ori	r24, 0x20	; 32
 c10:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c18:	87 7f       	andi	r24, 0xF7	; 247
 c1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c1e:	aa 96       	adiw	r28, 0x2a	; 42
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	1f 91       	pop	r17
 c30:	0f 91       	pop	r16
 c32:	08 95       	ret

00000c34 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c34:	08 95       	ret

00000c36 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c36:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c38:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <USB_DeviceState>
 c3c:	88 23       	and	r24, r24
 c3e:	59 f0       	breq	.+22     	; 0xc56 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c40:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c44:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c46:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c4e:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c50:	a1 de       	rcall	.-702    	; 0x994 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c52:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c56:	cf 91       	pop	r28
 c58:	08 95       	ret

00000c5a <__tablejump2__>:
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	00 24       	eor	r0, r0
 c60:	00 1c       	adc	r0, r0
 c62:	0b be       	out	0x3b, r0	; 59
 c64:	07 90       	elpm	r0, Z+
 c66:	f6 91       	elpm	r31, Z
 c68:	e0 2d       	mov	r30, r0
 c6a:	09 94       	ijmp

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
