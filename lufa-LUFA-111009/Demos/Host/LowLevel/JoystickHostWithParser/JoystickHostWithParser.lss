
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002220  000022b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  000022c6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000022c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006c5b  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002661  00000000  00000000  000092db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003709  00000000  00000000  0000b93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  0000f048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029d0  00000000  00000000  0000fba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041a7  00000000  00000000  00012578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0001671f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c1       	rjmp	.+740    	; 0x2e6 <__ctors_end>
       2:	00 00       	nop
       4:	8e c1       	rjmp	.+796    	; 0x322 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c1       	rjmp	.+792    	; 0x322 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c1       	rjmp	.+788    	; 0x322 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c1       	rjmp	.+784    	; 0x322 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c1       	rjmp	.+780    	; 0x322 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c1       	rjmp	.+776    	; 0x322 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c1       	rjmp	.+772    	; 0x322 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c1       	rjmp	.+768    	; 0x322 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c1       	rjmp	.+764    	; 0x322 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c7       	rjmp	.+3688   	; 0xe92 <__vector_10>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c1       	rjmp	.+752    	; 0x322 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c1       	rjmp	.+748    	; 0x322 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c1       	rjmp	.+744    	; 0x322 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c1       	rjmp	.+740    	; 0x322 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c1       	rjmp	.+736    	; 0x322 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c1       	rjmp	.+732    	; 0x322 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c1       	rjmp	.+728    	; 0x322 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c1       	rjmp	.+724    	; 0x322 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c1       	rjmp	.+720    	; 0x322 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c1       	rjmp	.+716    	; 0x322 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c1       	rjmp	.+712    	; 0x322 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c1       	rjmp	.+708    	; 0x322 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c1       	rjmp	.+704    	; 0x322 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c1       	rjmp	.+700    	; 0x322 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c1       	rjmp	.+696    	; 0x322 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c1       	rjmp	.+692    	; 0x322 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c1       	rjmp	.+688    	; 0x322 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c1       	rjmp	.+684    	; 0x322 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c1       	rjmp	.+680    	; 0x322 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c1       	rjmp	.+676    	; 0x322 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c1       	rjmp	.+672    	; 0x322 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c1       	rjmp	.+668    	; 0x322 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c1       	rjmp	.+664    	; 0x322 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c1       	rjmp	.+660    	; 0x322 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c1       	rjmp	.+656    	; 0x322 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c1       	rjmp	.+652    	; 0x322 <__bad_interrupt>
      96:	00 00       	nop
      98:	30 05       	cpc	r19, r0
      9a:	21 06       	cpc	r2, r17
      9c:	4e 05       	cpc	r20, r14
      9e:	58 05       	cpc	r21, r8
      a0:	83 05       	cpc	r24, r3
      a2:	ab 05       	cpc	r26, r11
      a4:	b6 05       	cpc	r27, r6
      a6:	c7 05       	cpc	r28, r7
      a8:	e3 05       	cpc	r30, r3
      aa:	0a 06       	cpc	r0, r26

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4538>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4533>:
     131:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     141:	74 65 64 2e 0d 0a 00                                ted....

00000148 <__c.4531>:
     148:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     158:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000162 <__c.4529>:
     162:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4a 6f 79 73     Not a valid Joys
     172:	74 69 63 6b 2e 1b 5b 33 37 6d 00                    tick..[37m.

0000017d <__c.4527>:
     17d:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     18d:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000198 <__c.4525>:
     198:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     1a8:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1b8:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001c1 <__c.4523>:
     1c1:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1d1:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1e1:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1f1:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     201:	37 6d 00                                            7m.

00000204 <__c.4521>:
     204:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     214:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000021e <__c.4519>:
     21e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     22e:	69 63 65 2e 0d 0a 00                                ice....

00000235 <__c.4517>:
     235:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     245:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     255:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000025f <__c.4514>:
     25f:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     26f:	61 74 61 2e 0d 0a 00                                ata....

00000276 <__c.4509>:
     276:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     286:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000295 <__c.4504>:
     295:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     2a5:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002b2 <__c.4495>:
     2b2:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 49     .[36mJoystick HI
     2c2:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2d2:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2e2:	37 6d 00 00                                         7m..

000002e6 <__ctors_end>:
     2e6:	11 24       	eor	r1, r1
     2e8:	1f be       	out	0x3f, r1	; 63
     2ea:	cf ef       	ldi	r28, 0xFF	; 255
     2ec:	d0 e2       	ldi	r29, 0x20	; 32
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	cd bf       	out	0x3d, r28	; 61

000002f2 <__do_copy_data>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	a0 e0       	ldi	r26, 0x00	; 0
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	e0 e2       	ldi	r30, 0x20	; 32
     2fa:	f2 e2       	ldi	r31, 0x22	; 34
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	0b bf       	out	0x3b, r16	; 59
     300:	02 c0       	rjmp	.+4      	; 0x306 <__do_copy_data+0x14>
     302:	07 90       	elpm	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	a2 31       	cpi	r26, 0x12	; 18
     308:	b1 07       	cpc	r27, r17
     30a:	d9 f7       	brne	.-10     	; 0x302 <__do_copy_data+0x10>

0000030c <__do_clear_bss>:
     30c:	25 e0       	ldi	r18, 0x05	; 5
     30e:	a2 e1       	ldi	r26, 0x12	; 18
     310:	b1 e0       	ldi	r27, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <.do_clear_bss_start>

00000314 <.do_clear_bss_loop>:
     314:	1d 92       	st	X+, r1

00000316 <.do_clear_bss_start>:
     316:	af 30       	cpi	r26, 0x0F	; 15
     318:	b2 07       	cpc	r27, r18
     31a:	e1 f7       	brne	.-8      	; 0x314 <.do_clear_bss_loop>
     31c:	b1 d1       	rcall	.+866    	; 0x680 <main>
     31e:	0c 94 0e 11 	jmp	0x221c	; 0x221c <_exit>

00000322 <__bad_interrupt>:
     322:	6e ce       	rjmp	.-804    	; 0x0 <__vectors>

00000324 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     324:	9b b1       	in	r25, 0x0b	; 11
     326:	9f 70       	andi	r25, 0x0F	; 15
     328:	89 2b       	or	r24, r25
     32a:	8b b9       	out	0x0b, r24	; 11
     32c:	08 95       	ret

0000032e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     32e:	84 b7       	in	r24, 0x34	; 52
     330:	87 7f       	andi	r24, 0xF7	; 247
     332:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	a8 95       	wdr
     33a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     33e:	88 61       	ori	r24, 0x18	; 24
     340:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     344:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     348:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     356:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     35a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     35c:	83 e3       	ldi	r24, 0x33	; 51
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     364:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     368:	86 e0       	ldi	r24, 0x06	; 6
     36a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     36e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     372:	88 e1       	ldi	r24, 0x18	; 24
     374:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     378:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     37a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     37c:	8a b1       	in	r24, 0x0a	; 10
     37e:	80 6f       	ori	r24, 0xF0	; 240
     380:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     382:	8b b1       	in	r24, 0x0b	; 11
     384:	8f 70       	andi	r24, 0x0F	; 15
     386:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     388:	6e d5       	rcall	.+2780   	; 0xe66 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     38a:	a9 e0       	ldi	r26, 0x09	; 9
     38c:	b5 e0       	ldi	r27, 0x05	; 5
     38e:	eb ef       	ldi	r30, 0xFB	; 251
     390:	f4 e0       	ldi	r31, 0x04	; 4
     392:	11 96       	adiw	r26, 0x01	; 1
     394:	fc 93       	st	X, r31
     396:	ee 93       	st	-X, r30
					stdout = Stream;
     398:	13 96       	adiw	r26, 0x03	; 3
     39a:	fc 93       	st	X, r31
     39c:	ee 93       	st	-X, r30
     39e:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     3a0:	8e e0       	ldi	r24, 0x0E	; 14
     3a2:	df 01       	movw	r26, r30
     3a4:	1d 92       	st	X+, r1
     3a6:	8a 95       	dec	r24
     3a8:	e9 f7       	brne	.-6      	; 0x3a4 <SetupHardware+0x76>
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	83 83       	std	Z+3, r24	; 0x03
     3ae:	85 ee       	ldi	r24, 0xE5	; 229
     3b0:	9d e0       	ldi	r25, 0x0D	; 13
     3b2:	91 87       	std	Z+9, r25	; 0x09
     3b4:	80 87       	std	Z+8, r24	; 0x08
     3b6:	8e ee       	ldi	r24, 0xEE	; 238
     3b8:	9d e0       	ldi	r25, 0x0D	; 13
     3ba:	93 87       	std	Z+11, r25	; 0x0b
     3bc:	82 87       	std	Z+10, r24	; 0x0a
     3be:	08 95       	ret

000003c0 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3c0:	85 e9       	ldi	r24, 0x95	; 149
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3c8:	80 ea       	ldi	r24, 0xA0	; 160
     3ca:	ac cf       	rjmp	.-168    	; 0x324 <LEDs_SetAllLEDs>

000003cc <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3cc:	86 e7       	ldi	r24, 0x76	; 118
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	a6 cf       	rjmp	.-180    	; 0x324 <LEDs_SetAllLEDs>

000003d8 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3d8:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     3da:	8f e5       	ldi	r24, 0x5F	; 95
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	
	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3e2:	78 d1       	rcall	.+752    	; 0x6d4 <ProcessConfigurationDescriptor>
     3e4:	c8 2f       	mov	r28, r24
     3e6:	88 23       	and	r24, r24
     3e8:	b9 f0       	breq	.+46     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		if (ErrorCode == ControlError)
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3ee:	85 e3       	ldi	r24, 0x35	; 53
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3f4:	8e e1       	ldi	r24, 0x1E	; 30
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3fc:	1f 92       	push	r1
     3fe:	cf 93       	push	r28
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	9f 93       	push	r25
     406:	8f 93       	push	r24
     408:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	80 e9       	ldi	r24, 0x90	; 144
     416:	40 c0       	rjmp	.+128    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	e3 d7       	rcall	.+4038   	; 0x13e2 <USB_Host_SetDeviceConfiguration>
     41c:	88 23       	and	r24, r24
     41e:	29 f0       	breq	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     420:	1f 92       	push	r1
     422:	8f 93       	push	r24
     424:	81 ec       	ldi	r24, 0xC1	; 193
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	ed cf       	rjmp	.-38     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     42a:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <HIDReportSize+0x1>
     42e:	8f 93       	push	r24
     430:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <HIDReportSize>
     434:	8f 93       	push	r24
     436:	88 e9       	ldi	r24, 0x98	; 152
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     442:	e7 d1       	rcall	.+974    	; 0x812 <GetHIDReportData>
     444:	c8 2f       	mov	r28, r24
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	88 23       	and	r24, r24
     450:	f1 f0       	breq	.+60     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     452:	8d e7       	ldi	r24, 0x7D	; 125
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     45a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <HIDReportInfo>
     45e:	81 11       	cpse	r24, r1
     460:	05 c0       	rjmp	.+10     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
     462:	82 e6       	ldi	r24, 0x62	; 98
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
     46a:	0c c0       	rjmp	.+24     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     46c:	1f 92       	push	r1
     46e:	cf 93       	push	r28
     470:	88 e4       	ldi	r24, 0x48	; 72
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <printf_P>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     482:	0f 90       	pop	r0
     484:	80 e9       	ldi	r24, 0x90	; 144
		USB_Host_SetDeviceConfiguration(0);
     486:	4e df       	rcall	.-356    	; 0x324 <LEDs_SetAllLEDs>
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     488:	80 e0       	ldi	r24, 0x00	; 0
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     48a:	cf 91       	pop	r28
     48c:	aa c7       	rjmp	.+3924   	; 0x13e2 <USB_Host_SetDeviceConfiguration>
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     48e:	81 e3       	ldi	r24, 0x31	; 49
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     496:	80 e6       	ldi	r24, 0x60	; 96
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     498:	cf 91       	pop	r28
     49a:	44 cf       	rjmp	.-376    	; 0x324 <LEDs_SetAllLEDs>

0000049c <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     49c:	c8 2f       	mov	r28, r24
	USB_Disable();
     49e:	7b d4       	rcall	.+2294   	; 0xd96 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4a0:	1f 92       	push	r1
     4a2:	cf 93       	push	r28
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b0:	80 e9       	ldi	r24, 0x90	; 144
     4b2:	38 df       	rcall	.-400    	; 0x324 <LEDs_SetAllLEDs>
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	ff cf       	rjmp	.-2      	; 0x4bc <EVENT_USB_Host_HostError+0x20>

000004be <EVENT_USB_Host_DeviceEnumerationFailed>:
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4be:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <USB_HostState>
     4c2:	1f 92       	push	r1
     4c4:	9f 93       	push	r25
     4c6:	1f 92       	push	r1
     4c8:	6f 93       	push	r22
     4ca:	1f 92       	push	r1
     4cc:	8f 93       	push	r24
     4ce:	8c ea       	ldi	r24, 0xAC	; 172
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	9f 93       	push	r25
     4d4:	8f 93       	push	r24
     4d6:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4da:	8d b7       	in	r24, 0x3d	; 61
     4dc:	9e b7       	in	r25, 0x3e	; 62
     4de:	08 96       	adiw	r24, 0x08	; 8
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	9e bf       	out	0x3e, r25	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	8d bf       	out	0x3d, r24	; 61
     4ea:	80 e9       	ldi	r24, 0x90	; 144
     4ec:	1b cf       	rjmp	.-458    	; 0x324 <LEDs_SetAllLEDs>

000004ee <ProcessJoystickReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	8c 01       	movw	r16, r24
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     502:	c1 2c       	mov	r12, r1
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;
     504:	d1 2c       	mov	r13, r1

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     506:	9a e2       	ldi	r25, 0x2A	; 42
     508:	b9 2e       	mov	r11, r25

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     50a:	20 e1       	ldi	r18, 0x10	; 16
     50c:	e2 2e       	mov	r14, r18
     50e:	f1 2c       	mov	r15, r1
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     510:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <HIDReportInfo>
     514:	c8 16       	cp	r12, r24
     516:	08 f0       	brcs	.+2      	; 0x51a <ProcessJoystickReport+0x2c>
     518:	55 c0       	rjmp	.+170    	; 0x5c4 <ProcessJoystickReport+0xd6>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     51a:	bc 9c       	mul	r11, r12
     51c:	e0 01       	movw	r28, r0
     51e:	11 24       	eor	r1, r1
     520:	be 01       	movw	r22, r28
     522:	6a 5e       	subi	r22, 0xEA	; 234
     524:	7e 4f       	sbci	r23, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     526:	cb 5e       	subi	r28, 0xEB	; 235
     528:	de 4f       	sbci	r29, 0xFE	; 254
     52a:	8a 85       	ldd	r24, Y+10	; 0x0a
     52c:	9b 85       	ldd	r25, Y+11	; 0x0b
     52e:	89 30       	cpi	r24, 0x09	; 9
     530:	91 05       	cpc	r25, r1
     532:	99 f4       	brne	.+38     	; 0x55a <ProcessJoystickReport+0x6c>
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	81 11       	cpse	r24, r1
     538:	43 c0       	rjmp	.+134    	; 0x5c0 <ProcessJoystickReport+0xd2>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the joystick button value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     53a:	c8 01       	movw	r24, r16
     53c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     540:	88 23       	and	r24, r24
     542:	f1 f1       	breq	.+124    	; 0x5c0 <ProcessJoystickReport+0xd2>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     544:	8b a1       	ldd	r24, Y+35	; 0x23
     546:	9c a1       	ldd	r25, Y+36	; 0x24
     548:	ad a1       	ldd	r26, Y+37	; 0x25
     54a:	be a1       	ldd	r27, Y+38	; 0x26
     54c:	89 2b       	or	r24, r25
     54e:	8a 2b       	or	r24, r26
     550:	8b 2b       	or	r24, r27
     552:	b1 f1       	breq	.+108    	; 0x5c0 <ProcessJoystickReport+0xd2>
			  LEDMask = LEDS_ALL_LEDS;
     554:	80 ef       	ldi	r24, 0xF0	; 240
     556:	d8 2e       	mov	r13, r24
     558:	33 c0       	rjmp	.+102    	; 0x5c0 <ProcessJoystickReport+0xd2>
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	89 f5       	brne	.+98     	; 0x5c0 <ProcessJoystickReport+0xd2>
     55e:	8c 85       	ldd	r24, Y+12	; 0x0c
     560:	9d 85       	ldd	r25, Y+13	; 0x0d
     562:	c0 97       	sbiw	r24, 0x30	; 48
     564:	02 97       	sbiw	r24, 0x02	; 2
     566:	60 f5       	brcc	.+88     	; 0x5c0 <ProcessJoystickReport+0xd2>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	81 11       	cpse	r24, r1
     56c:	29 c0       	rjmp	.+82     	; 0x5c0 <ProcessJoystickReport+0xd2>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the joystick relative position value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     56e:	c8 01       	movw	r24, r16
     570:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     574:	88 23       	and	r24, r24
     576:	21 f1       	breq	.+72     	; 0x5c0 <ProcessJoystickReport+0xd2>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	97 01       	movw	r18, r14
     57c:	28 1b       	sub	r18, r24
     57e:	31 09       	sbc	r19, r1
     580:	8b a1       	ldd	r24, Y+35	; 0x23
     582:	9c a1       	ldd	r25, Y+36	; 0x24
     584:	ad a1       	ldd	r26, Y+37	; 0x25
     586:	be a1       	ldd	r27, Y+38	; 0x26
     588:	04 c0       	rjmp	.+8      	; 0x592 <ProcessJoystickReport+0xa4>
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	aa 1f       	adc	r26, r26
     590:	bb 1f       	adc	r27, r27
     592:	2a 95       	dec	r18
     594:	d2 f7       	brpl	.-12     	; 0x58a <ProcessJoystickReport+0x9c>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	99 f0       	breq	.+38     	; 0x5c0 <ProcessJoystickReport+0xd2>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     59a:	2c 85       	ldd	r18, Y+12	; 0x0c
     59c:	3d 85       	ldd	r19, Y+13	; 0x0d
     59e:	20 33       	cpi	r18, 0x30	; 48
     5a0:	31 05       	cpc	r19, r1
     5a2:	39 f4       	brne	.+14     	; 0x5b2 <ProcessJoystickReport+0xc4>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     5a4:	18 16       	cp	r1, r24
     5a6:	19 06       	cpc	r1, r25
     5a8:	14 f0       	brlt	.+4      	; 0x5ae <ProcessJoystickReport+0xc0>
     5aa:	80 e2       	ldi	r24, 0x20	; 32
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <ProcessJoystickReport+0xd0>
     5ae:	80 e1       	ldi	r24, 0x10	; 16
     5b0:	06 c0       	rjmp	.+12     	; 0x5be <ProcessJoystickReport+0xd0>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     5b2:	18 16       	cp	r1, r24
     5b4:	19 06       	cpc	r1, r25
     5b6:	14 f0       	brlt	.+4      	; 0x5bc <ProcessJoystickReport+0xce>
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	01 c0       	rjmp	.+2      	; 0x5be <ProcessJoystickReport+0xd0>
     5bc:	80 e8       	ldi	r24, 0x80	; 128
     5be:	d8 2a       	or	r13, r24
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     5c0:	c3 94       	inc	r12
     5c2:	a6 cf       	rjmp	.-180    	; 0x510 <ProcessJoystickReport+0x22>
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     5c4:	8d 2d       	mov	r24, r13
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     5d8:	a5 ce       	rjmp	.-694    	; 0x324 <LEDs_SetAllLEDs>

000005da <JoystickHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     5ea:	0d b7       	in	r16, 0x3d	; 61
     5ec:	1e b7       	in	r17, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     5ee:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <USB_HostState>
     5f2:	8b 30       	cpi	r24, 0x0B	; 11
     5f4:	c9 f5       	brne	.+114    	; 0x668 <JoystickHost_Task+0x8e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5fc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     600:	8f 7b       	andi	r24, 0xBF	; 191
     602:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     606:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	/* Select and unfreeze joystick data pipe */
	Pipe_SelectPipe(JOYSTICK_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     60a:	80 ff       	sbrs	r24, 0
     60c:	28 c0       	rjmp	.+80     	; 0x65e <JoystickHost_Task+0x84>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     60e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		/* Check if data has been received from the attached joystick */
		if (Pipe_IsReadWriteAllowed())
     612:	85 ff       	sbrs	r24, 5
     614:	1f c0       	rjmp	.+62     	; 0x654 <JoystickHost_Task+0x7a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     616:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     61a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		{
			/* Create buffer big enough for the report */
			uint8_t JoystickReport[Pipe_BytesInPipe()];
     61e:	2d b7       	in	r18, 0x3d	; 61
     620:	3e b7       	in	r19, 0x3e	; 62
     622:	28 1b       	sub	r18, r24
     624:	39 0b       	sbc	r19, r25
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	3e bf       	out	0x3e, r19	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	2d bf       	out	0x3d, r18	; 61
     630:	8d b7       	in	r24, 0x3d	; 61
     632:	9e b7       	in	r25, 0x3e	; 62
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	7c 01       	movw	r14, r24
     638:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     63c:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

			/* Load in the joystick report */
			Pipe_Read_Stream_LE(JoystickReport, Pipe_BytesInPipe(), NULL);
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	b9 d4       	rcall	.+2418   	; 0xfb8 <Pipe_Read_Stream_LE>

			/* Process the read in joystick report from the device */
			ProcessJoystickReport(JoystickReport);
     646:	c7 01       	movw	r24, r14
     648:	52 df       	rcall	.-348    	; 0x4ee <ProcessJoystickReport>
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	1e bf       	out	0x3e, r17	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	0d bf       	out	0x3d, r16	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     654:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     658:	8e 77       	andi	r24, 0x7E	; 126
     65a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     65e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     662:	80 64       	ori	r24, 0x40	; 64
     664:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	1e bf       	out	0x3e, r17	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0d bf       	out	0x3d, r16	; 61
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     680:	56 de       	rcall	.-852    	; 0x32e <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     682:	82 eb       	ldi	r24, 0xB2	; 178
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	4b de       	rcall	.-874    	; 0x324 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		JoystickHost_Task();
     68e:	78 94       	sei
     690:	a4 df       	rcall	.-184    	; 0x5da <JoystickHost_Task>

		USB_USBTask();
     692:	ce d6       	rcall	.+3484   	; 0x1430 <USB_USBTask>
     694:	fd cf       	rjmp	.-6      	; 0x690 <main+0x10>

00000696 <DComp_NextJoystickInterface>:
 */
uint8_t DComp_NextJoystickInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     696:	fc 01       	movw	r30, r24
     698:	21 81       	ldd	r18, Z+1	; 0x01
     69a:	24 30       	cpi	r18, 0x04	; 4
     69c:	29 f4       	brne	.+10     	; 0x6a8 <DComp_NextJoystickInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if ((Interface->Class == HID_CSCP_HIDClass))
     69e:	85 81       	ldd	r24, Z+5	; 0x05
     6a0:	83 30       	cpi	r24, 0x03	; 3
     6a2:	11 f4       	brne	.+4      	; 0x6a8 <DComp_NextJoystickInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6a8:	82 e0       	ldi	r24, 0x02	; 2
}
     6aa:	08 95       	ret

000006ac <DComp_NextJoystickInterfaceDataEndpoint>:
 */
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6ac:	fc 01       	movw	r30, r24
     6ae:	81 81       	ldd	r24, Z+1	; 0x01
     6b0:	85 30       	cpi	r24, 0x05	; 5
     6b2:	21 f0       	breq	.+8      	; 0x6bc <DComp_NextJoystickInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     6b4:	84 30       	cpi	r24, 0x04	; 4
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <DComp_NextJoystickInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	08 95       	ret
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     6c2:	08 95       	ret

000006c4 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     6c4:	fc 01       	movw	r30, r24
     6c6:	81 81       	ldd	r24, Z+1	; 0x01
     6c8:	81 32       	cpi	r24, 0x21	; 33
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <DComp_NextHID+0xc>
	  return DESCRIPTOR_SEARCH_Found;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	08 95       	ret
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
     6d0:	80 e0       	ldi	r24, 0x00	; 0
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     6d2:	08 95       	ret

000006d4 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref JoystickHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	c4 50       	subi	r28, 0x04	; 4
     6ee:	d2 40       	sbci	r29, 0x02	; 2
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6fa:	ae 01       	movw	r20, r28
     6fc:	4f 5f       	subi	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	cd 5f       	subi	r28, 0xFD	; 253
     702:	dd 4f       	sbci	r29, 0xFD	; 253
     704:	59 83       	std	Y+1, r21	; 0x01
     706:	48 83       	st	Y, r20
     708:	c3 50       	subi	r28, 0x03	; 3
     70a:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	32 e0       	ldi	r19, 0x02	; 2
     710:	be 01       	movw	r22, r28
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7d 4f       	sbci	r23, 0xFD	; 253
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	bc d4       	rcall	.+2424   	; 0x1092 <USB_Host_GetDeviceConfigDescriptor>
     71a:	85 30       	cpi	r24, 0x05	; 5
     71c:	09 f4       	brne	.+2      	; 0x720 <ProcessConfigurationDescriptor+0x4c>
     71e:	64 c0       	rjmp	.+200    	; 0x7e8 <ProcessConfigurationDescriptor+0x114>
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	39 f0       	breq	.+14     	; 0x732 <ProcessConfigurationDescriptor+0x5e>
     724:	81 11       	cpse	r24, r1
     726:	08 c0       	rjmp	.+16     	; 0x738 <ProcessConfigurationDescriptor+0x64>
     728:	a1 2c       	mov	r10, r1
     72a:	b1 2c       	mov	r11, r1
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	34 c0       	rjmp	.+104    	; 0x79a <ProcessConfigurationDescriptor+0xc6>
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     732:	23 e0       	ldi	r18, 0x03	; 3
     734:	f2 2e       	mov	r15, r18
     736:	5a c0       	rjmp	.+180    	; 0x7ec <ProcessConfigurationDescriptor+0x118>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     738:	ff 24       	eor	r15, r15
     73a:	f3 94       	inc	r15
     73c:	57 c0       	rjmp	.+174    	; 0x7ec <ProcessConfigurationDescriptor+0x118>

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     73e:	46 e5       	ldi	r20, 0x56	; 86
     740:	53 e0       	ldi	r21, 0x03	; 3
     742:	be 01       	movw	r22, r28
     744:	6d 5f       	subi	r22, 0xFD	; 253
     746:	7d 4f       	sbci	r23, 0xFD	; 253
     748:	ce 01       	movw	r24, r28
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	9d 4f       	sbci	r25, 0xFD	; 253
     74e:	fa d4       	rcall	.+2548   	; 0x1144 <USB_GetNextDescriptorComp>
     750:	f8 2e       	mov	r15, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     752:	88 23       	and	r24, r24
     754:	49 f1       	breq	.+82     	; 0x7a8 <ProcessConfigurationDescriptor+0xd4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextJoystickInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     756:	4b e4       	ldi	r20, 0x4B	; 75
     758:	53 e0       	ldi	r21, 0x03	; 3
     75a:	be 01       	movw	r22, r28
     75c:	6d 5f       	subi	r22, 0xFD	; 253
     75e:	7d 4f       	sbci	r23, 0xFD	; 253
     760:	ce 01       	movw	r24, r28
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	9d 4f       	sbci	r25, 0xFD	; 253
     766:	ee d4       	rcall	.+2524   	; 0x1144 <USB_GetNextDescriptorComp>
     768:	81 11       	cpse	r24, r1
     76a:	1b c0       	rjmp	.+54     	; 0x7a2 <ProcessConfigurationDescriptor+0xce>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     76c:	cd 5f       	subi	r28, 0xFD	; 253
     76e:	dd 4f       	sbci	r29, 0xFD	; 253
     770:	08 81       	ld	r16, Y
     772:	19 81       	ldd	r17, Y+1	; 0x01
     774:	c3 50       	subi	r28, 0x03	; 3
     776:	d2 40       	sbci	r29, 0x02	; 2

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     778:	42 e6       	ldi	r20, 0x62	; 98
     77a:	53 e0       	ldi	r21, 0x03	; 3
     77c:	be 01       	movw	r22, r28
     77e:	6d 5f       	subi	r22, 0xFD	; 253
     780:	7d 4f       	sbci	r23, 0xFD	; 253
     782:	ce 01       	movw	r24, r28
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	9d 4f       	sbci	r25, 0xFD	; 253
     788:	dd d4       	rcall	.+2490   	; 0x1144 <USB_GetNextDescriptorComp>
     78a:	81 11       	cpse	r24, r1
     78c:	0a c0       	rjmp	.+20     	; 0x7a2 <ProcessConfigurationDescriptor+0xce>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     78e:	cd 5f       	subi	r28, 0xFD	; 253
     790:	dd 4f       	sbci	r29, 0xFD	; 253
     792:	a8 80       	ld	r10, Y
     794:	b9 80       	ldd	r11, Y+1	; 0x01
     796:	c3 50       	subi	r28, 0x03	; 3
     798:	d2 40       	sbci	r29, 0x02	; 2
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     79a:	01 15       	cp	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	79 f6       	brne	.-98     	; 0x73e <ProcessConfigurationDescriptor+0x6a>
     7a0:	da cf       	rjmp	.-76     	; 0x756 <ProcessConfigurationDescriptor+0x82>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextJoystickInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     7a2:	94 e0       	ldi	r25, 0x04	; 4
     7a4:	f9 2e       	mov	r15, r25
     7a6:	22 c0       	rjmp	.+68     	; 0x7ec <ProcessConfigurationDescriptor+0x118>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7a8:	cd 5f       	subi	r28, 0xFD	; 253
     7aa:	dd 4f       	sbci	r29, 0xFD	; 253
     7ac:	c8 80       	ld	r12, Y
     7ae:	d9 80       	ldd	r13, Y+1	; 0x01
     7b0:	c3 50       	subi	r28, 0x03	; 3
     7b2:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7b4:	f6 01       	movw	r30, r12
     7b6:	22 81       	ldd	r18, Z+2	; 0x02
     7b8:	27 ff       	sbrs	r18, 7
     7ba:	ef cf       	rjmp	.-34     	; 0x79a <ProcessConfigurationDescriptor+0xc6>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     7bc:	c1 14       	cp	r12, r1
     7be:	d1 04       	cpc	r13, r1
     7c0:	61 f3       	breq	.-40     	; 0x79a <ProcessConfigurationDescriptor+0xc6>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(JOYSTICK_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     7c2:	04 81       	ldd	r16, Z+4	; 0x04
     7c4:	15 81       	ldd	r17, Z+5	; 0x05
     7c6:	e1 2c       	mov	r14, r1
     7c8:	40 e1       	ldi	r20, 0x10	; 16
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	45 d2       	rcall	.+1162   	; 0xc5a <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     7d0:	f6 01       	movw	r30, r12
     7d2:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     7d4:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     7d8:	f5 01       	movw	r30, r10
     7da:	87 81       	ldd	r24, Z+7	; 0x07
     7dc:	90 85       	ldd	r25, Z+8	; 0x08
     7de:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <HIDReportSize+0x1>
     7e2:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <HIDReportSize>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <ProcessConfigurationDescriptor+0x118>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	f8 2e       	mov	r15, r24
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7ec:	8f 2d       	mov	r24, r15
     7ee:	cc 5f       	subi	r28, 0xFC	; 252
     7f0:	dd 4f       	sbci	r29, 0xFD	; 253
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	08 95       	ret

00000812 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     822:	ed b6       	in	r14, 0x3d	; 61
     824:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     826:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <HIDReportSize>
     82a:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <HIDReportSize+0x1>
     82e:	2d b7       	in	r18, 0x3d	; 61
     830:	3e b7       	in	r19, 0x3e	; 62
     832:	28 1b       	sub	r18, r24
     834:	39 0b       	sbc	r19, r25
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	3e bf       	out	0x3e, r19	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	2d bf       	out	0x3d, r18	; 61
     840:	0d b7       	in	r16, 0x3d	; 61
     842:	1e b7       	in	r17, 0x3e	; 62
     844:	0f 5f       	subi	r16, 0xFF	; 255
     846:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     848:	21 e8       	ldi	r18, 0x81	; 129
     84a:	20 93 f2 04 	sts	0x04F2, r18	; 0x8004f2 <USB_ControlRequest>
     84e:	26 e0       	ldi	r18, 0x06	; 6
     850:	20 93 f3 04 	sts	0x04F3, r18	; 0x8004f3 <USB_ControlRequest+0x1>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	32 e2       	ldi	r19, 0x22	; 34
     858:	30 93 f5 04 	sts	0x04F5, r19	; 0x8004f5 <USB_ControlRequest+0x3>
     85c:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <USB_ControlRequest+0x2>
     860:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <USB_ControlRequest+0x5>
     864:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <USB_ControlRequest+0x4>
     868:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <USB_ControlRequest+0x7>
     86c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     870:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     874:	c8 01       	movw	r24, r16
     876:	bf d4       	rcall	.+2430   	; 0x11f6 <USB_Host_SendControlRequest>
     878:	81 11       	cpse	r24, r1
     87a:	0d c0       	rjmp	.+26     	; 0x896 <GetHIDReportData+0x84>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     87c:	60 91 ee 04 	lds	r22, 0x04EE	; 0x8004ee <HIDReportSize>
     880:	70 91 ef 04 	lds	r23, 0x04EF	; 0x8004ef <HIDReportSize+0x1>
     884:	45 e1       	ldi	r20, 0x15	; 21
     886:	51 e0       	ldi	r21, 0x01	; 1
     888:	c8 01       	movw	r24, r16
     88a:	e0 d5       	rcall	.+3008   	; 0x144c <USB_ProcessHIDReport>
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	81 11       	cpse	r24, r1
     890:	03 c0       	rjmp	.+6      	; 0x898 <GetHIDReportData+0x86>
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	01 c0       	rjmp	.+2      	; 0x898 <GetHIDReportData+0x86>
     896:	92 e0       	ldi	r25, 0x02	; 2
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     898:	89 2f       	mov	r24, r25
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	fe be       	out	0x3e, r15	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	ed be       	out	0x3d, r14	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <CALLBACK_HIDParser_FilterHIDReportItem>:

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     8b2:	dc 01       	movw	r26, r24
     8b4:	16 96       	adiw	r26, 0x06	; 6
     8b6:	ed 91       	ld	r30, X+
     8b8:	fc 91       	ld	r31, X
     8ba:	17 97       	sbiw	r26, 0x07	; 7
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	b1 f0       	breq	.+44     	; 0x8ec <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     8c0:	21 81       	ldd	r18, Z+1	; 0x01
     8c2:	32 81       	ldd	r19, Z+2	; 0x02
     8c4:	21 30       	cpi	r18, 0x01	; 1
     8c6:	31 05       	cpc	r19, r1
     8c8:	29 f4       	brne	.+10     	; 0x8d4 <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     8ca:	23 81       	ldd	r18, Z+3	; 0x03
     8cc:	34 81       	ldd	r19, Z+4	; 0x04
     8ce:	24 30       	cpi	r18, 0x04	; 4
     8d0:	31 05       	cpc	r19, r1
     8d2:	21 f0       	breq	.+8      	; 0x8dc <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     8d4:	05 80       	ldd	r0, Z+5	; 0x05
     8d6:	f6 81       	ldd	r31, Z+6	; 0x06
     8d8:	e0 2d       	mov	r30, r0
     8da:	f0 cf       	rjmp	.-32     	; 0x8bc <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current joystick item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     8dc:	fc 01       	movw	r30, r24
     8de:	21 85       	ldd	r18, Z+9	; 0x09
     8e0:	32 85       	ldd	r19, Z+10	; 0x0a
     8e2:	27 7f       	andi	r18, 0xF7	; 247
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	21 30       	cpi	r18, 0x01	; 1
     8e8:	31 05       	cpc	r19, r1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     8ee:	08 95       	ret

000008f0 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8f0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8f4:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     8f6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     8fa:	9d 7f       	andi	r25, 0xFD	; 253
     8fc:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     900:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     904:	92 60       	ori	r25, 0x02	; 2
     906:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     90a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     90e:	91 fd       	sbrc	r25, 1
     910:	fc cf       	rjmp	.-8      	; 0x90a <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     912:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     916:	91 60       	ori	r25, 0x01	; 1
     918:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     91c:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     920:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     924:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     926:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     92a:	2f 7d       	andi	r18, 0xDF	; 223
     92c:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     930:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     934:	2f 7d       	andi	r18, 0xDF	; 223
     936:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     93a:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     93c:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     940:	35 ff       	sbrs	r19, 5
     942:	0b c0       	rjmp	.+22     	; 0x95a <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     944:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     948:	2f 7d       	andi	r18, 0xDF	; 223
     94a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     94e:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     952:	2d 7f       	andi	r18, 0xFD	; 253
     954:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     958:	08 c0       	rjmp	.+16     	; 0x96a <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     95a:	ef ec       	ldi	r30, 0xCF	; 207
     95c:	f7 e0       	ldi	r31, 0x07	; 7
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <USB_Host_ResetDevice+0x6e>
     962:	00 c0       	rjmp	.+0      	; 0x964 <USB_Host_ResetDevice+0x74>
     964:	00 00       	nop
     966:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     968:	49 f7       	brne	.-46     	; 0x93c <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     96a:	99 23       	and	r25, r25
     96c:	29 f0       	breq	.+10     	; 0x978 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     96e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     972:	90 62       	ori	r25, 0x20	; 32
     974:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     978:	81 11       	cpse	r24, r1
     97a:	05 c0       	rjmp	.+10     	; 0x986 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     97c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     980:	8e 7f       	andi	r24, 0xFE	; 254
     982:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     986:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     990:	08 95       	ret

00000992 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     992:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     996:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     998:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     99c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     99e:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     9a2:	3f 7d       	andi	r19, 0xDF	; 223
     9a4:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9a8:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9ac:	3f 7d       	andi	r19, 0xDF	; 223
     9ae:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9b2:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     9b6:	31 60       	ori	r19, 0x01	; 1
     9b8:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9bc:	88 23       	and	r24, r24
     9be:	39 f1       	breq	.+78     	; 0xa0e <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9c0:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9c4:	35 ff       	sbrs	r19, 5
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9c8:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     9cc:	3f 7d       	andi	r19, 0xDF	; 223
     9ce:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9d2:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9d4:	30 91 fa 04 	lds	r19, 0x04FA	; 0x8004fa <USB_HostState>
     9d8:	31 30       	cpi	r19, 0x01	; 1
     9da:	c1 f0       	breq	.+48     	; 0xa0c <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     9dc:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     9e0:	34 ff       	sbrs	r19, 4
     9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     9e4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     9e8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     9ec:	8f 7e       	andi	r24, 0xEF	; 239
     9ee:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     9f2:	82 e0       	ldi	r24, 0x02	; 2

			break;
     9f4:	0c c0       	rjmp	.+24     	; 0xa0e <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9f6:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     9fa:	31 ff       	sbrs	r19, 1
     9fc:	df cf       	rjmp	.-66     	; 0x9bc <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9fe:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     a08:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     a0c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     a0e:	21 11       	cpse	r18, r1
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a12:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     a16:	2e 7f       	andi	r18, 0xFE	; 254
     a18:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a1c:	99 23       	and	r25, r25
     a1e:	29 f0       	breq	.+10     	; 0xa2a <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a20:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a24:	90 62       	ori	r25, 0x20	; 32
     a26:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a2a:	08 95       	ret

00000a2c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a2c:	ef 92       	push	r14
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	28 97       	sbiw	r28, 0x08	; 8
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     a46:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <USB_HostState>
     a4a:	8e 2f       	mov	r24, r30
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	8a 30       	cpi	r24, 0x0A	; 10
     a50:	91 05       	cpc	r25, r1
     a52:	08 f0       	brcs	.+2      	; 0xa56 <USB_Host_ProcessNextHostState+0x2a>
     a54:	f6 c0       	rjmp	.+492    	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
     a56:	fc 01       	movw	r30, r24
     a58:	e4 5b       	subi	r30, 0xB4	; 180
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a60:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     a64:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     a68:	01 15       	cp	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	09 f4       	brne	.+2      	; 0xa70 <USB_Host_ProcessNextHostState+0x44>
     a6e:	e9 c0       	rjmp	.+466    	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	8f df       	rcall	.-226    	; 0x992 <USB_Host_WaitMS>
     a74:	88 23       	and	r24, r24
     a76:	31 f0       	breq	.+12     	; 0xa84 <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     a78:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
     a7c:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     a80:	91 e0       	ldi	r25, 0x01	; 1
					break;
     a82:	d1 c0       	rjmp	.+418    	; 0xc26 <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     a84:	01 50       	subi	r16, 0x01	; 1
     a86:	11 09       	sbc	r17, r1
     a88:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <WaitMSRemaining.2935+0x1>
     a8c:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <WaitMSRemaining.2935>
     a90:	01 2b       	or	r16, r17
     a92:	09 f0       	breq	.+2      	; 0xa96 <USB_Host_ProcessNextHostState+0x6a>
     a94:	d6 c0       	rjmp	.+428    	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     a96:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a9c:	88 ee       	ldi	r24, 0xE8	; 232
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     aa4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
			break;
     aae:	c9 c0       	rjmp	.+402    	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     ab0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     ab4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     ab8:	9c 01       	movw	r18, r24
     aba:	21 50       	subi	r18, 0x01	; 1
     abc:	31 09       	sbc	r19, r1
     abe:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <WaitMSRemaining.2935+0x1>
     ac2:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <WaitMSRemaining.2935>
     ac6:	89 2b       	or	r24, r25
     ac8:	39 f0       	breq	.+14     	; 0xad8 <USB_Host_ProcessNextHostState+0xac>
     aca:	8f ec       	ldi	r24, 0xCF	; 207
     acc:	97 e0       	ldi	r25, 0x07	; 7
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <USB_Host_ProcessNextHostState+0xa2>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <USB_Host_ProcessNextHostState+0xa8>
     ad4:	00 00       	nop
     ad6:	b5 c0       	rjmp	.+362    	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     ad8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ada:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ade:	80 61       	ori	r24, 0x10	; 16
     ae0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ae4:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ae8:	8b 7f       	andi	r24, 0xFB	; 251
     aea:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     aee:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     af2:	80 61       	ori	r24, 0x10	; 16
     af4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     af8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     afc:	82 60       	ori	r24, 0x02	; 2
     afe:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	d2 cf       	rjmp	.-92     	; 0xaaa <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b06:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b0a:	80 ff       	sbrs	r24, 0
     b0c:	9a c0       	rjmp	.+308    	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b0e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b12:	8e 7f       	andi	r24, 0xFE	; 254
     b14:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b18:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b1c:	8d 7f       	andi	r24, 0xFD	; 253
     b1e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b22:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     b26:	8d 7f       	andi	r24, 0xFD	; 253
     b28:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b2c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b30:	82 60       	ori	r24, 0x02	; 2
     b32:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b36:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     b3a:	81 60       	ori	r24, 0x01	; 1
     b3c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b40:	e8 d0       	rcall	.+464    	; 0xd12 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b42:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     b46:	84 e6       	ldi	r24, 0x64	; 100
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     b4e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     b52:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b54:	5c c0       	rjmp	.+184    	; 0xc0e <USB_Host_ProcessNextHostState+0x1e2>
     b56:	cc de       	rcall	.-616    	; 0x8f0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b58:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     b5c:	88 ec       	ldi	r24, 0xC8	; 200
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     b64:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     b68:	86 e0       	ldi	r24, 0x06	; 6
     b6a:	51 c0       	rjmp	.+162    	; 0xc0e <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     b6c:	e1 2c       	mov	r14, r1
     b6e:	00 e4       	ldi	r16, 0x40	; 64
     b70:	10 e0       	ldi	r17, 0x00	; 0
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	6f d0       	rcall	.+222    	; 0xc5a <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b7c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     b80:	87 fd       	sbrc	r24, 7
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b84:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b86:	94 e0       	ldi	r25, 0x04	; 4
     b88:	4e c0       	rjmp	.+156    	; 0xc26 <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     b8a:	87 e0       	ldi	r24, 0x07	; 7
     b8c:	8e cf       	rjmp	.-228    	; 0xaaa <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	e1 e0       	ldi	r30, 0x01	; 1
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	a2 ef       	ldi	r26, 0xF2	; 242
     b96:	b4 e0       	ldi	r27, 0x04	; 4
     b98:	01 90       	ld	r0, Z+
     b9a:	0d 92       	st	X+, r0
     b9c:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <USB_Host_ProcessNextHostState+0x16c>
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	28 d3       	rcall	.+1616   	; 0x11f6 <USB_Host_SendControlRequest>
     ba6:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     ba8:	3d c0       	rjmp	.+122    	; 0xc24 <USB_Host_ProcessNextHostState+0x1f8>
     baa:	88 85       	ldd	r24, Y+8	; 0x08
     bac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     bb0:	9f de       	rcall	.-706    	; 0x8f0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     bb2:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     bb6:	88 ec       	ldi	r24, 0xC8	; 200
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     bbe:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	24 c0       	rjmp	.+72     	; 0xc0e <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     bc6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	e1 2c       	mov	r14, r1
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	41 d0       	rcall	.+130    	; 0xc5a <Pipe_ConfigurePipe>
     bd8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     bdc:	87 ff       	sbrs	r24, 7
     bde:	d2 cf       	rjmp	.-92     	; 0xb84 <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     be0:	88 e0       	ldi	r24, 0x08	; 8
     be2:	e9 e0       	ldi	r30, 0x09	; 9
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	a2 ef       	ldi	r26, 0xF2	; 242
     be8:	b4 e0       	ldi	r27, 0x04	; 4
     bea:	01 90       	ld	r0, Z+
     bec:	0d 92       	st	X+, r0
     bee:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     bf0:	e1 f7       	brne	.-8      	; 0xbea <USB_Host_ProcessNextHostState+0x1be>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	ff d2       	rcall	.+1534   	; 0x11f6 <USB_Host_SendControlRequest>
     bf8:	81 11       	cpse	r24, r1
     bfa:	14 c0       	rjmp	.+40     	; 0xc24 <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     bfc:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <USB_HostState>
     c00:	84 e6       	ldi	r24, 0x64	; 100
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     c08:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     c12:	17 c0       	rjmp	.+46     	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     c20:	db db       	rcall	.-2122   	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c2a:	21 30       	cpi	r18, 0x01	; 1
     c2c:	51 f0       	breq	.+20     	; 0xc42 <USB_Host_ProcessNextHostState+0x216>
     c2e:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c30:	89 2f       	mov	r24, r25
     c32:	45 dc       	rcall	.-1910   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
     c34:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     c38:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c3a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     c3e:	c6 db       	rcall	.-2164   	; 0x3cc <EVENT_USB_Host_DeviceUnattached>
     c40:	c2 d0       	rcall	.+388    	; 0xdc6 <USB_ResetInterface>
	}
}
     c42:	28 96       	adiw	r28, 0x08	; 8
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ef 90       	pop	r14
     c58:	08 95       	ret

00000c5a <Pipe_ConfigurePipe>:
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c5a:	ef 92       	push	r14
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	2f 70       	andi	r18, 0x0F	; 15
     c62:	42 2b       	or	r20, r18
     c64:	90 e4       	ldi	r25, 0x40	; 64
     c66:	69 9f       	mul	r22, r25
     c68:	b0 01       	movw	r22, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	64 2b       	or	r22, r20
     c6e:	38 2f       	mov	r19, r24
     c70:	2e 2d       	mov	r18, r14
     c72:	22 60       	ori	r18, 0x02	; 2
     c74:	37 30       	cpi	r19, 0x07	; 7
     c76:	08 f0       	brcs	.+2      	; 0xc7a <Pipe_ConfigurePipe+0x20>
     c78:	45 c0       	rjmp	.+138    	; 0xd04 <Pipe_ConfigurePipe+0xaa>
     c7a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     c7e:	38 13       	cpse	r19, r24
     c80:	13 c0       	rjmp	.+38     	; 0xca8 <Pipe_ConfigurePipe+0x4e>
     c82:	48 e0       	ldi	r20, 0x08	; 8
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	40 17       	cp	r20, r16
     c8a:	51 07       	cpc	r21, r17
     c8c:	38 f0       	brcs	.+14     	; 0xc9c <Pipe_ConfigurePipe+0x42>
     c8e:	92 95       	swap	r25
     c90:	90 7f       	andi	r25, 0xF0	; 240
     c92:	92 2b       	or	r25, r18
     c94:	e6 2f       	mov	r30, r22
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <Pipe_ConfigurePipe+0x5e>
     c9c:	95 30       	cpi	r25, 0x05	; 5
     c9e:	b9 f3       	breq	.-18     	; 0xc8e <Pipe_ConfigurePipe+0x34>
     ca0:	9f 5f       	subi	r25, 0xFF	; 255
     ca2:	44 0f       	add	r20, r20
     ca4:	55 1f       	adc	r21, r21
     ca6:	f0 cf       	rjmp	.-32     	; 0xc88 <Pipe_ConfigurePipe+0x2e>
     ca8:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     cac:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cb0:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     cb4:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     cb8:	91 fd       	sbrc	r25, 1
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <Pipe_ConfigurePipe+0x66>
     cbc:	3f 5f       	subi	r19, 0xFF	; 255
     cbe:	da cf       	rjmp	.-76     	; 0xc74 <Pipe_ConfigurePipe+0x1a>
     cc0:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cc4:	4e 7f       	andi	r20, 0xFE	; 254
     cc6:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cca:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cce:	4d 7f       	andi	r20, 0xFD	; 253
     cd0:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     cd4:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cd8:	41 60       	ori	r20, 0x01	; 1
     cda:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cde:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     ce2:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     ce6:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     cea:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     cee:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cf2:	90 62       	ori	r25, 0x20	; 32
     cf4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     cf8:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     cfc:	97 fd       	sbrc	r25, 7
     cfe:	de cf       	rjmp	.-68     	; 0xcbc <Pipe_ConfigurePipe+0x62>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <Pipe_ConfigurePipe+0xb0>
     d04:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ef 90       	pop	r14
     d10:	08 95       	ret

00000d12 <Pipe_ClearPipes>:
     d12:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     d1c:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     d20:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d24:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     d28:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d2c:	9e 7f       	andi	r25, 0xFE	; 254
     d2e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	87 30       	cpi	r24, 0x07	; 7
     d36:	81 f7       	brne	.-32     	; 0xd18 <Pipe_ClearPipes+0x6>
     d38:	08 95       	ret

00000d3a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d3a:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     d3e:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     d42:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d44:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d48:	90 73       	andi	r25, 0x30	; 48
     d4a:	90 31       	cpi	r25, 0x10	; 16
     d4c:	29 f4       	brne	.+10     	; 0xd58 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d4e:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     d52:	90 ff       	sbrs	r25, 0
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <Pipe_WaitUntilReady+0x26>
     d56:	19 c0       	rjmp	.+50     	; 0xd8a <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d58:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d5c:	92 fd       	sbrc	r25, 2
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d60:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d64:	91 fd       	sbrc	r25, 1
     d66:	13 c0       	rjmp	.+38     	; 0xd8e <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d68:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <USB_HostState>
     d6c:	91 30       	cpi	r25, 0x01	; 1
     d6e:	89 f0       	breq	.+34     	; 0xd92 <Pipe_WaitUntilReady+0x58>
     d70:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     d74:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d78:	42 17       	cp	r20, r18
     d7a:	53 07       	cpc	r21, r19
     d7c:	19 f3       	breq	.-58     	; 0xd44 <Pipe_WaitUntilReady+0xa>
     d7e:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d80:	11 f0       	breq	.+4      	; 0xd86 <Pipe_WaitUntilReady+0x4c>
     d82:	a9 01       	movw	r20, r18
     d84:	df cf       	rjmp	.-66     	; 0xd44 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d92:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     d94:	08 95       	ret

00000d96 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d96:	70 d0       	rcall	.+224    	; 0xe78 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d98:	77 d0       	rcall	.+238    	; 0xe88 <USB_INT_ClearAllInterrupts>
     d9a:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	80 83       	st	Z, r24
     da4:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8f 77       	andi	r24, 0x7F	; 127
     dac:	80 83       	st	Z, r24
     dae:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     db0:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	8c 91       	ld	r24, X
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	8c 93       	st	X, r24
     dba:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	80 83       	st	Z, r24
     dc0:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     dc4:	08 95       	ret

00000dc6 <USB_ResetInterface>:
     dc6:	58 d0       	rcall	.+176    	; 0xe78 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     dc8:	5f d0       	rcall	.+190    	; 0xe88 <USB_INT_ClearAllInterrupts>
     dca:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     dce:	8f 77       	andi	r24, 0x7F	; 127
     dd0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dd4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dde:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     de2:	8f 7d       	andi	r24, 0xDF	; 223
     de4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     de8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dec:	8f 77       	andi	r24, 0x7F	; 127
     dee:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     df2:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     df4:	89 bd       	out	0x29, r24	; 41
     df6:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     df8:	89 bd       	out	0x29, r24	; 41
     dfa:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     dfc:	00 fe       	sbrs	r0, 0
     dfe:	fd cf       	rjmp	.-6      	; 0xdfa <USB_ResetInterface+0x34>
     e00:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e02:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
     e06:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     e0a:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e0c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     e10:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e1a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e24:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     e2e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     e32:	8f 7e       	andi	r24, 0xEF	; 239
     e34:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     e38:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     e3a:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     e3c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e46:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e4a:	84 60       	ori	r24, 0x04	; 4
     e4c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e50:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e54:	8e 7f       	andi	r24, 0xFE	; 254
     e56:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     e5a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e64:	08 95       	ret

00000e66 <USB_Init>:
     e66:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <USB_IsInitialized>

	USB_ResetInterface();
     e76:	a7 cf       	rjmp	.-178    	; 0xdc6 <USB_ResetInterface>

00000e78 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e78:	e8 ed       	ldi	r30, 0xD8	; 216
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8c 7f       	andi	r24, 0xFC	; 252
     e80:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e82:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     e86:	08 95       	ret

00000e88 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e88:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e8c:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     e90:	08 95       	ret

00000e92 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	0b b6       	in	r0, 0x3b	; 59
     e9e:	0f 92       	push	r0
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     eb8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ebc:	85 ff       	sbrs	r24, 5
     ebe:	0a c0       	rjmp	.+20     	; 0xed4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ec0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ec4:	85 ff       	sbrs	r24, 5
     ec6:	06 c0       	rjmp	.+12     	; 0xed4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ec8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ecc:	8f 7d       	andi	r24, 0xDF	; 223
     ece:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ed2:	6a d1       	rcall	.+724    	; 0x11a8 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ed4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ed8:	81 ff       	sbrs	r24, 1
     eda:	15 c0       	rjmp	.+42     	; 0xf06 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     edc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ee0:	81 ff       	sbrs	r24, 1
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ee4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ee8:	8d 7f       	andi	r24, 0xFD	; 253
     eea:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     eee:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ef2:	8e 7f       	andi	r24, 0xFE	; 254
     ef4:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ef8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     f02:	64 da       	rcall	.-2872   	; 0x3cc <EVENT_USB_Host_DeviceUnattached>
     f04:	60 df       	rcall	.-320    	; 0xdc6 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     f06:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f0a:	81 ff       	sbrs	r24, 1
     f0c:	15 c0       	rjmp	.+42     	; 0xf38 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     f0e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     f12:	81 ff       	sbrs	r24, 1
     f14:	11 c0       	rjmp	.+34     	; 0xf38 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f16:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f1a:	8d 7f       	andi	r24, 0xFD	; 253
     f1c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     f20:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f22:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	b6 da       	rcall	.-2708   	; 0x49c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f30:	4d da       	rcall	.-2918   	; 0x3cc <EVENT_USB_Host_DeviceUnattached>
     f32:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     f34:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
     f38:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f3c:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f3e:	17 c0       	rjmp	.+46     	; 0xf6e <__vector_10+0xdc>
     f40:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f44:	80 ff       	sbrs	r24, 0
     f46:	13 c0       	rjmp	.+38     	; 0xf6e <__vector_10+0xdc>
     f48:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     f52:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f5c:	31 da       	rcall	.-2974   	; 0x3c0 <EVENT_USB_Host_DeviceAttached>
     f5e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     f68:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f6a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <USB_HostState>
     f6e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f72:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f74:	0e c0       	rjmp	.+28     	; 0xf92 <__vector_10+0x100>
     f76:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f7a:	82 ff       	sbrs	r24, 2
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <__vector_10+0x100>
     f7e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f82:	8b 7f       	andi	r24, 0xFB	; 251
     f84:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	98 da       	rcall	.-2768   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     f8e:	1e da       	rcall	.-3012   	; 0x3cc <EVENT_USB_Host_DeviceUnattached>
     f90:	1a df       	rcall	.-460    	; 0xdc6 <USB_ResetInterface>

		USB_ResetInterface();
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0b be       	out	0x3b, r0	; 59
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <Pipe_Read_Stream_LE>:
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
     fca:	8b 01       	movw	r16, r22
     fcc:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fce:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fd2:	8f 7c       	andi	r24, 0xCF	; 207
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     fda:	af de       	rcall	.-674    	; 0xd3a <Pipe_WaitUntilReady>
     fdc:	81 11       	cpse	r24, r1
     fde:	32 c0       	rjmp	.+100    	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     fe0:	e1 14       	cp	r14, r1
     fe2:	f1 04       	cpc	r15, r1
     fe4:	39 f0       	breq	.+14     	; 0xff4 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     fe6:	f7 01       	movw	r30, r14
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	08 1b       	sub	r16, r24
     fee:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ff0:	c8 0f       	add	r28, r24
     ff2:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ff4:	c1 2c       	mov	r12, r1
     ff6:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
     ffc:	11 f1       	breq	.+68     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ffe:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1002:	85 fd       	sbrc	r24, 5
    1004:	15 c0       	rjmp	.+42     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1006:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    100a:	8e 77       	andi	r24, 0x7E	; 126
    100c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1010:	e1 14       	cp	r14, r1
    1012:	f1 04       	cpc	r15, r1
    1014:	49 f0       	breq	.+18     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
			{
				*BytesProcessed += BytesInTransfer;
    1016:	f7 01       	movw	r30, r14
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	c8 0e       	add	r12, r24
    101e:	d9 1e       	adc	r13, r25
    1020:	d1 82       	std	Z+1, r13	; 0x01
    1022:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
    1024:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1028:	88 de       	rcall	.-752    	; 0xd3a <Pipe_WaitUntilReady>
    102a:	88 23       	and	r24, r24
    102c:	29 f3       	breq	.-54     	; 0xff8 <Pipe_Read_Stream_LE+0x40>
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1030:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1034:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1036:	01 50       	subi	r16, 0x01	; 1
    1038:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    103a:	ff ef       	ldi	r31, 0xFF	; 255
    103c:	cf 1a       	sub	r12, r31
    103e:	df 0a       	sbc	r13, r31
    1040:	db cf       	rjmp	.-74     	; 0xff8 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
    1042:	80 e0       	ldi	r24, 0x00	; 0
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	08 95       	ret

00001056 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	dc 01       	movw	r26, r24
    105c:	eb 01       	movw	r28, r22
    105e:	e8 81       	ld	r30, Y
    1060:	f9 81       	ldd	r31, Y+1	; 0x01
    1062:	20 81       	ld	r18, Z
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	82 17       	cp	r24, r18
    106e:	93 07       	cpc	r25, r19
    1070:	08 f4       	brcc	.+2      	; 0x1074 <USB_GetNextDescriptor+0x1e>
    1072:	9c 01       	movw	r18, r24
    1074:	e2 0f       	add	r30, r18
    1076:	f3 1f       	adc	r31, r19
    1078:	eb 01       	movw	r28, r22
    107a:	f9 83       	std	Y+1, r31	; 0x01
    107c:	e8 83       	st	Y, r30
    107e:	8d 91       	ld	r24, X+
    1080:	9c 91       	ld	r25, X
    1082:	11 97       	sbiw	r26, 0x01	; 1
    1084:	82 1b       	sub	r24, r18
    1086:	93 0b       	sbc	r25, r19
    1088:	8d 93       	st	X+, r24
    108a:	9c 93       	st	X, r25
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <USB_Host_GetDeviceConfigDescriptor>:
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	29 97       	sbiw	r28, 0x09	; 9
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	6b 01       	movw	r12, r22
    10b4:	8a 01       	movw	r16, r20
    10b6:	79 01       	movw	r14, r18
    10b8:	90 e8       	ldi	r25, 0x80	; 128
    10ba:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <USB_ControlRequest>
    10be:	96 e0       	ldi	r25, 0x06	; 6
    10c0:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <USB_ControlRequest+0x1>
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	92 60       	ori	r25, 0x02	; 2
    10ca:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <USB_ControlRequest+0x3>
    10ce:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <USB_ControlRequest+0x2>
    10d2:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <USB_ControlRequest+0x5>
    10d6:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <USB_ControlRequest+0x4>
    10da:	89 e0       	ldi	r24, 0x09	; 9
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <USB_ControlRequest+0x7>
    10e2:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <USB_ControlRequest+0x6>
    10e6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	83 d0       	rcall	.+262    	; 0x11f6 <USB_Host_SendControlRequest>
    10f0:	81 11       	cpse	r24, r1
    10f2:	19 c0       	rjmp	.+50     	; 0x1126 <USB_Host_GetDeviceConfigDescriptor+0x94>
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	f6 01       	movw	r30, r12
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
    10fe:	e8 16       	cp	r14, r24
    1100:	f9 06       	cpc	r15, r25
    1102:	70 f0       	brcs	.+28     	; 0x1120 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1104:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <USB_ControlRequest+0x7>
    1108:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <USB_ControlRequest+0x6>
    110c:	c8 01       	movw	r24, r16
    110e:	73 d0       	rcall	.+230    	; 0x11f6 <USB_Host_SendControlRequest>
    1110:	81 11       	cpse	r24, r1
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1114:	f8 01       	movw	r30, r16
    1116:	81 81       	ldd	r24, Z+1	; 0x01
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	21 f4       	brne	.+8      	; 0x1124 <USB_Host_GetDeviceConfigDescriptor+0x92>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1120:	85 e0       	ldi	r24, 0x05	; 5
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1124:	86 e0       	ldi	r24, 0x06	; 6
    1126:	29 96       	adiw	r28, 0x09	; 9
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	08 95       	ret

00001144 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	8c 01       	movw	r16, r24
    115a:	eb 01       	movw	r28, r22
    115c:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    115e:	f8 01       	movw	r30, r16
    1160:	e0 80       	ld	r14, Z
    1162:	f1 80       	ldd	r15, Z+1	; 0x01
    1164:	e1 14       	cp	r14, r1
    1166:	f1 04       	cpc	r15, r1
    1168:	99 f0       	breq	.+38     	; 0x1190 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    116a:	a8 80       	ld	r10, Y
    116c:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    116e:	be 01       	movw	r22, r28
    1170:	c8 01       	movw	r24, r16
    1172:	71 df       	rcall	.-286    	; 0x1056 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1174:	88 81       	ld	r24, Y
    1176:	99 81       	ldd	r25, Y+1	; 0x01
    1178:	f6 01       	movw	r30, r12
    117a:	09 95       	icall
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	79 f3       	breq	.-34     	; 0x115e <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	39 f4       	brne	.+14     	; 0x1192 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
    1184:	b9 82       	std	Y+1, r11	; 0x01
    1186:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
    1188:	f8 01       	movw	r30, r16
    118a:	f1 82       	std	Z+1, r15	; 0x01
    118c:	e0 82       	st	Z, r14
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1190:	82 e0       	ldi	r24, 0x02	; 2
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	af 90       	pop	r10
    11a6:	08 95       	ret

000011a8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    11a8:	08 95       	ret

000011aa <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11b2:	c9 ee       	ldi	r28, 0xE9	; 233
    11b4:	d3 e0       	ldi	r29, 0x03	; 3
    11b6:	11 11       	cpse	r17, r1
    11b8:	0c c0       	rjmp	.+24     	; 0x11d2 <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    11ba:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    11be:	83 fd       	sbrc	r24, 3
    11c0:	15 c0       	rjmp	.+42     	; 0x11ec <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	e6 db       	rcall	.-2100   	; 0x992 <USB_Host_WaitMS>
    11c6:	81 11       	cpse	r24, r1
    11c8:	12 c0       	rjmp	.+36     	; 0x11ee <USB_Host_WaitForIOS+0x44>
    11ca:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    11cc:	a1 f7       	brne	.-24     	; 0x11b6 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    11ce:	84 e0       	ldi	r24, 0x04	; 4
    11d0:	0e c0       	rjmp	.+28     	; 0x11ee <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11d2:	11 30       	cpi	r17, 0x01	; 1
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    11d6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    11da:	80 ff       	sbrs	r24, 0
    11dc:	f2 cf       	rjmp	.-28     	; 0x11c2 <USB_Host_WaitForIOS+0x18>
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11e0:	12 30       	cpi	r17, 0x02	; 2
    11e2:	79 f7       	brne	.-34     	; 0x11c2 <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    11e4:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    11e8:	82 ff       	sbrs	r24, 2
    11ea:	eb cf       	rjmp	.-42     	; 0x11c2 <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    11ec:	80 e0       	ldi	r24, 0x00	; 0
}
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	08 95       	ret

000011f6 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1202:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1206:	81 70       	andi	r24, 0x01	; 1
    1208:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    120a:	c0 91 f8 04 	lds	r28, 0x04F8	; 0x8004f8 <USB_ControlRequest+0x6>
    120e:	d0 91 f9 04 	lds	r29, 0x04F9	; 0x8004f9 <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1212:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	b9 db       	rcall	.-2190   	; 0x992 <USB_Host_WaitMS>
    1220:	81 11       	cpse	r24, r1
    1222:	c8 c0       	rjmp	.+400    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1224:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1228:	8f 7c       	andi	r24, 0xCF	; 207
    122a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    122e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
    1232:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1236:	8f 7e       	andi	r24, 0xEF	; 239
    1238:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    123c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1240:	8f 7b       	andi	r24, 0xBF	; 191
    1242:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1246:	e2 ef       	ldi	r30, 0xF2	; 242
    1248:	f4 e0       	ldi	r31, 0x04	; 4
    124a:	8a ef       	ldi	r24, 0xFA	; 250
    124c:	94 e0       	ldi	r25, 0x04	; 4
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    124e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1250:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1254:	8e 17       	cp	r24, r30
    1256:	9f 07       	cpc	r25, r31
    1258:	d1 f7       	brne	.-12     	; 0x124e <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    125a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    125e:	87 77       	andi	r24, 0x77	; 119
    1260:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	a1 df       	rcall	.-190    	; 0x11aa <USB_Host_WaitForIOS>
    1268:	81 11       	cpse	r24, r1
    126a:	a4 c0       	rjmp	.+328    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    126c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1270:	80 64       	ori	r24, 0x40	; 64
    1272:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	8c db       	rcall	.-2280   	; 0x992 <USB_Host_WaitMS>
    127a:	81 11       	cpse	r24, r1
    127c:	9b c0       	rjmp	.+310    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    127e:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <USB_ControlRequest>
    1282:	87 ff       	sbrs	r24, 7
    1284:	4e c0       	rjmp	.+156    	; 0x1322 <USB_Host_SendControlRequest+0x12c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1286:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    128a:	8f 7c       	andi	r24, 0xCF	; 207
    128c:	80 61       	ori	r24, 0x10	; 16
    128e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1292:	01 15       	cp	r16, r1
    1294:	11 05       	cpc	r17, r1
    1296:	09 f0       	breq	.+2      	; 0x129a <USB_Host_SendControlRequest+0xa4>
    1298:	3a c0       	rjmp	.+116    	; 0x130e <USB_Host_SendControlRequest+0x118>
    129a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    129e:	8f 7c       	andi	r24, 0xCF	; 207
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12a6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12aa:	8f 7b       	andi	r24, 0xBF	; 191
    12ac:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	7b df       	rcall	.-266    	; 0x11aa <USB_Host_WaitForIOS>
    12b4:	81 11       	cpse	r24, r1
    12b6:	7e c0       	rjmp	.+252    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12b8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    12bc:	8b 77       	andi	r24, 0x7B	; 123
    12be:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	72 df       	rcall	.-284    	; 0x11aa <USB_Host_WaitForIOS>
    12c6:	76 c0       	rjmp	.+236    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12c8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12cc:	8f 7b       	andi	r24, 0xBF	; 191
    12ce:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	6a df       	rcall	.-300    	; 0x11aa <USB_Host_WaitForIOS>
    12d6:	81 11       	cpse	r24, r1
    12d8:	6d c0       	rjmp	.+218    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12da:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    12de:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f4       	brne	.+4      	; 0x12ea <USB_Host_SendControlRequest+0xf4>
				  DataLen = 0;
    12e6:	c0 e0       	ldi	r28, 0x00	; 0
    12e8:	d0 e0       	ldi	r29, 0x00	; 0
    12ea:	f8 01       	movw	r30, r16
    12ec:	8f 01       	movw	r16, r30
    12ee:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    12f2:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    12f6:	89 2b       	or	r24, r25
    12f8:	69 f4       	brne	.+26     	; 0x1314 <USB_Host_SendControlRequest+0x11e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12fa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    12fe:	80 64       	ori	r24, 0x40	; 64
    1300:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1304:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1308:	8e 77       	andi	r24, 0x7E	; 126
    130a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    130e:	20 97       	sbiw	r28, 0x00	; 0
    1310:	d9 f6       	brne	.-74     	; 0x12c8 <USB_Host_SendControlRequest+0xd2>
    1312:	c3 cf       	rjmp	.-122    	; 0x129a <USB_Host_SendControlRequest+0xa4>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1314:	20 97       	sbiw	r28, 0x00	; 0
    1316:	89 f3       	breq	.-30     	; 0x12fa <USB_Host_SendControlRequest+0x104>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1318:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    131c:	81 93       	st	Z+, r24
					DataLen--;
    131e:	21 97       	sbiw	r28, 0x01	; 1
    1320:	e5 cf       	rjmp	.-54     	; 0x12ec <USB_Host_SendControlRequest+0xf6>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1322:	01 15       	cp	r16, r1
    1324:	11 05       	cpc	r17, r1
    1326:	91 f1       	breq	.+100    	; 0x138c <USB_Host_SendControlRequest+0x196>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1328:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    132c:	8f 7c       	andi	r24, 0xCF	; 207
    132e:	80 62       	ori	r24, 0x20	; 32
    1330:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1334:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1338:	8f 7b       	andi	r24, 0xBF	; 191
    133a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1342:	e1 f0       	breq	.+56     	; 0x137c <USB_Host_SendControlRequest+0x186>
    1344:	32 df       	rcall	.-412    	; 0x11aa <USB_Host_WaitForIOS>
    1346:	81 11       	cpse	r24, r1
    1348:	35 c0       	rjmp	.+106    	; 0x13b4 <USB_Host_SendControlRequest+0x1be>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    134a:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    134e:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	48 f4       	brcc	.+18     	; 0x1370 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_8(*(DataStream++));
    135e:	0f 5f       	subi	r16, 0xFF	; 255
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	f8 01       	movw	r30, r16
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1368:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    136c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    136e:	69 f7       	brne	.-38     	; 0x134a <USB_Host_SendControlRequest+0x154>
    1370:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1374:	8b 77       	andi	r24, 0x7B	; 123
    1376:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    137a:	e1 cf       	rjmp	.-62     	; 0x133e <USB_Host_SendControlRequest+0x148>
    137c:	16 df       	rcall	.-468    	; 0x11aa <USB_Host_WaitForIOS>
    137e:	81 11       	cpse	r24, r1
    1380:	19 c0       	rjmp	.+50     	; 0x13b4 <USB_Host_SendControlRequest+0x1be>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1382:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1386:	80 64       	ori	r24, 0x40	; 64
    1388:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    138c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1390:	8f 7c       	andi	r24, 0xCF	; 207
    1392:	80 61       	ori	r24, 0x10	; 16
    1394:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1398:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    139c:	8f 7b       	andi	r24, 0xBF	; 191
    139e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	02 df       	rcall	.-508    	; 0x11aa <USB_Host_WaitForIOS>
    13a6:	81 11       	cpse	r24, r1
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <USB_Host_SendControlRequest+0x1be>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13aa:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13ae:	9e 77       	andi	r25, 0x7E	; 126
    13b0:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13b4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13b8:	90 64       	ori	r25, 0x40	; 64
    13ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    13be:	f1 10       	cpse	r15, r1
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <USB_Host_SendControlRequest+0x1d6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13c2:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    13c6:	9e 7f       	andi	r25, 0xFE	; 254
    13c8:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    13d2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	08 95       	ret

000013e2 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    13e2:	cf 93       	push	r28
    13e4:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    13e6:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <USB_ControlRequest>
    13ea:	89 e0       	ldi	r24, 0x09	; 9
    13ec:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <USB_ControlRequest+0x1>
    13f0:	8c 2f       	mov	r24, r28
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <USB_ControlRequest+0x3>
    13f8:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <USB_ControlRequest+0x2>
    13fc:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <USB_ControlRequest+0x5>
    1400:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <USB_ControlRequest+0x4>
    1404:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <USB_ControlRequest+0x7>
    1408:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    140c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	f0 de       	rcall	.-544    	; 0x11f6 <USB_Host_SendControlRequest>
    1416:	81 11       	cpse	r24, r1
    1418:	09 c0       	rjmp	.+18     	; 0x142c <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    141a:	c0 93 f0 04 	sts	0x04F0, r28	; 0x8004f0 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    141e:	c1 11       	cpse	r28, r1
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <USB_Host_SetDeviceConfiguration+0x44>
    1422:	9a e0       	ldi	r25, 0x0A	; 10
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <USB_Host_SetDeviceConfiguration+0x46>
    1426:	9b e0       	ldi	r25, 0x0B	; 11
    1428:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <USB_HostState>
	}

	return ErrorCode;
}
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1436:	c7 ea       	ldi	r28, 0xA7	; 167
    1438:	d0 e0       	ldi	r29, 0x00	; 0
    143a:	18 81       	ld	r17, Y
    143c:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    143e:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1440:	f5 da       	rcall	.-2582   	; 0xa2c <USB_Host_ProcessNextHostState>
    1442:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	08 95       	ret

0000144c <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    144c:	2f 92       	push	r2
    144e:	3f 92       	push	r3
    1450:	4f 92       	push	r4
    1452:	5f 92       	push	r5
    1454:	6f 92       	push	r6
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	cc 58       	subi	r28, 0x8C	; 140
    1476:	d1 09       	sbc	r29, r1
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	6c 01       	movw	r12, r24
    1484:	e7 96       	adiw	r28, 0x37	; 55
    1486:	7f af       	std	Y+63, r23	; 0x3f
    1488:	6e af       	std	Y+62, r22	; 0x3e
    148a:	e7 97       	sbiw	r28, 0x37	; 55
    148c:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    148e:	9a 01       	movw	r18, r20
    1490:	20 57       	subi	r18, 0x70	; 112
    1492:	3c 4f       	sbci	r19, 0xFC	; 252
    1494:	e9 96       	adiw	r28, 0x39	; 57
    1496:	3f af       	std	Y+63, r19	; 0x3f
    1498:	2e af       	std	Y+62, r18	; 0x3e
    149a:	e9 97       	sbiw	r28, 0x39	; 57
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    149c:	89 ed       	ldi	r24, 0xD9	; 217
    149e:	93 e0       	ldi	r25, 0x03	; 3
    14a0:	da 01       	movw	r26, r20
    14a2:	fc 01       	movw	r30, r24
    14a4:	1d 92       	st	X+, r1
    14a6:	31 97       	sbiw	r30, 0x01	; 1
    14a8:	e9 f7       	brne	.-6      	; 0x14a4 <USB_ProcessHIDReport+0x58>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    14aa:	fe 01       	movw	r30, r28
    14ac:	31 96       	adiw	r30, 0x01	; 1
    14ae:	8c e1       	ldi	r24, 0x1C	; 28
    14b0:	df 01       	movw	r26, r30
    14b2:	1d 92       	st	X+, r1
    14b4:	8a 95       	dec	r24
    14b6:	e9 f7       	brne	.-6      	; 0x14b2 <USB_ProcessHIDReport+0x66>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    14b8:	87 e0       	ldi	r24, 0x07	; 7
    14ba:	d9 01       	movw	r26, r18
    14bc:	1d 92       	st	X+, r1
    14be:	8a 95       	dec	r24
    14c0:	e9 f7       	brne	.-6      	; 0x14bc <USB_ProcessHIDReport+0x70>

	ParserData->TotalDeviceReports = 1;
    14c2:	21 50       	subi	r18, 0x01	; 1
    14c4:	31 09       	sbc	r19, r1
    14c6:	c1 58       	subi	r28, 0x81	; 129
    14c8:	df 4f       	sbci	r29, 0xFF	; 255
    14ca:	39 83       	std	Y+1, r19	; 0x01
    14cc:	28 83       	st	Y, r18
    14ce:	cf 57       	subi	r28, 0x7F	; 127
    14d0:	d0 40       	sbci	r29, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	d9 01       	movw	r26, r18
    14d6:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
    14d8:	ed 96       	adiw	r28, 0x3d	; 61
    14da:	1c ae       	std	Y+60, r1	; 0x3c
    14dc:	1d ae       	std	Y+61, r1	; 0x3d
    14de:	1e ae       	std	Y+62, r1	; 0x3e
    14e0:	1f ae       	std	Y+63, r1	; 0x3f
    14e2:	ed 97       	sbiw	r28, 0x3d	; 61
    14e4:	41 2c       	mov	r4, r1
    14e6:	51 2c       	mov	r5, r1
    14e8:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
    14ea:	00 e0       	ldi	r16, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
    14ec:	e5 96       	adiw	r28, 0x35	; 53
    14ee:	1f ae       	std	Y+63, r1	; 0x3f
    14f0:	1e ae       	std	Y+62, r1	; 0x3e
    14f2:	e5 97       	sbiw	r28, 0x35	; 53
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
    14f4:	7f 01       	movw	r14, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    14f6:	fa 01       	movw	r30, r20
    14f8:	ea 52       	subi	r30, 0x2A	; 42
    14fa:	fc 4f       	sbci	r31, 0xFC	; 252
    14fc:	cf 57       	subi	r28, 0x7F	; 127
    14fe:	df 4f       	sbci	r29, 0xFF	; 255
    1500:	f9 83       	std	Y+1, r31	; 0x01
    1502:	e8 83       	st	Y, r30
    1504:	c1 58       	subi	r28, 0x81	; 129
    1506:	d0 40       	sbci	r29, 0x00	; 0

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1508:	27 50       	subi	r18, 0x07	; 7
    150a:	31 09       	sbc	r19, r1
    150c:	c7 57       	subi	r28, 0x77	; 119
    150e:	df 4f       	sbci	r29, 0xFF	; 255
    1510:	39 83       	std	Y+1, r19	; 0x01
    1512:	28 83       	st	Y, r18
    1514:	c9 58       	subi	r28, 0x89	; 137
    1516:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    1518:	48 52       	subi	r20, 0x28	; 40
    151a:	5c 4f       	sbci	r21, 0xFC	; 252
    151c:	cd 57       	subi	r28, 0x7D	; 125
    151e:	df 4f       	sbci	r29, 0xFF	; 255
    1520:	59 83       	std	Y+1, r21	; 0x01
    1522:	48 83       	st	Y, r20
    1524:	c3 58       	subi	r28, 0x83	; 131
    1526:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1528:	c5 57       	subi	r28, 0x75	; 117
    152a:	df 4f       	sbci	r29, 0xFF	; 255
    152c:	b9 83       	std	Y+1, r27	; 0x01
    152e:	a8 83       	st	Y, r26
    1530:	cb 58       	subi	r28, 0x8B	; 139
    1532:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1534:	e7 96       	adiw	r28, 0x37	; 55
    1536:	2e ad       	ldd	r18, Y+62	; 0x3e
    1538:	3f ad       	ldd	r19, Y+63	; 0x3f
    153a:	e7 97       	sbiw	r28, 0x37	; 55
    153c:	23 2b       	or	r18, r19
    153e:	09 f4       	brne	.+2      	; 0x1542 <USB_ProcessHIDReport+0xf6>
    1540:	b9 c2       	rjmp	.+1394   	; 0x1ab4 <USB_ProcessHIDReport+0x668>
	{
		uint8_t  HIDReportItem  = *ReportData;
    1542:	d6 01       	movw	r26, r12
    1544:	bc 91       	ld	r27, X
    1546:	ef 96       	adiw	r28, 0x3f	; 63
    1548:	bf af       	std	Y+63, r27	; 0x3f
    154a:	ef 97       	sbiw	r28, 0x3f	; 63
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    154c:	8b 2f       	mov	r24, r27
    154e:	83 70       	andi	r24, 0x03	; 3
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	49 f1       	breq	.+82     	; 0x15a6 <USB_ProcessHIDReport+0x15a>
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	99 f0       	breq	.+38     	; 0x157e <USB_ProcessHIDReport+0x132>
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	c9 f1       	breq	.+114    	; 0x15ce <USB_ProcessHIDReport+0x182>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
    155c:	ef ef       	ldi	r30, 0xFF	; 255
    155e:	ce 1a       	sub	r12, r30
    1560:	de 0a       	sbc	r13, r30
		ReportSize--;
    1562:	e7 96       	adiw	r28, 0x37	; 55
    1564:	2e ad       	ldd	r18, Y+62	; 0x3e
    1566:	3f ad       	ldd	r19, Y+63	; 0x3f
    1568:	e7 97       	sbiw	r28, 0x37	; 55
    156a:	21 50       	subi	r18, 0x01	; 1
    156c:	31 09       	sbc	r19, r1
    156e:	e7 96       	adiw	r28, 0x37	; 55
    1570:	3f af       	std	Y+63, r19	; 0x3f
    1572:	2e af       	std	Y+62, r18	; 0x3e
    1574:	e7 97       	sbiw	r28, 0x37	; 55
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
    1576:	81 2c       	mov	r8, r1
    1578:	91 2c       	mov	r9, r1
    157a:	54 01       	movw	r10, r8
    157c:	3a c0       	rjmp	.+116    	; 0x15f2 <USB_ProcessHIDReport+0x1a6>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    157e:	d6 01       	movw	r26, r12
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	8d 90       	ld	r8, X+
    1584:	9d 90       	ld	r9, X+
    1586:	ad 90       	ld	r10, X+
    1588:	bc 90       	ld	r11, X
    158a:	14 97       	sbiw	r26, 0x04	; 4
				ReportSize     -= 4;
    158c:	e7 96       	adiw	r28, 0x37	; 55
    158e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1590:	ff ad       	ldd	r31, Y+63	; 0x3f
    1592:	e7 97       	sbiw	r28, 0x37	; 55
    1594:	35 97       	sbiw	r30, 0x05	; 5
    1596:	e7 96       	adiw	r28, 0x37	; 55
    1598:	ff af       	std	Y+63, r31	; 0x3f
    159a:	ee af       	std	Y+62, r30	; 0x3e
    159c:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
    159e:	f5 e0       	ldi	r31, 0x05	; 5
    15a0:	cf 0e       	add	r12, r31
    15a2:	d1 1c       	adc	r13, r1
				break;
    15a4:	26 c0       	rjmp	.+76     	; 0x15f2 <USB_ProcessHIDReport+0x1a6>
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    15a6:	d6 01       	movw	r26, r12
    15a8:	11 96       	adiw	r26, 0x01	; 1
    15aa:	8d 90       	ld	r8, X+
    15ac:	9c 90       	ld	r9, X
    15ae:	12 97       	sbiw	r26, 0x02	; 2
    15b0:	a1 2c       	mov	r10, r1
    15b2:	b1 2c       	mov	r11, r1
				ReportSize     -= 2;
    15b4:	e7 96       	adiw	r28, 0x37	; 55
    15b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    15b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    15ba:	e7 97       	sbiw	r28, 0x37	; 55
    15bc:	33 97       	sbiw	r30, 0x03	; 3
    15be:	e7 96       	adiw	r28, 0x37	; 55
    15c0:	ff af       	std	Y+63, r31	; 0x3f
    15c2:	ee af       	std	Y+62, r30	; 0x3e
    15c4:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
    15c6:	f3 e0       	ldi	r31, 0x03	; 3
    15c8:	cf 0e       	add	r12, r31
    15ca:	d1 1c       	adc	r13, r1
				break;
    15cc:	12 c0       	rjmp	.+36     	; 0x15f2 <USB_ProcessHIDReport+0x1a6>
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    15ce:	d6 01       	movw	r26, r12
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	8c 90       	ld	r8, X
    15d4:	91 2c       	mov	r9, r1
    15d6:	a1 2c       	mov	r10, r1
    15d8:	b1 2c       	mov	r11, r1
				ReportSize     -= 1;
    15da:	e7 96       	adiw	r28, 0x37	; 55
    15dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    15de:	ff ad       	ldd	r31, Y+63	; 0x3f
    15e0:	e7 97       	sbiw	r28, 0x37	; 55
    15e2:	32 97       	sbiw	r30, 0x02	; 2
    15e4:	e7 96       	adiw	r28, 0x37	; 55
    15e6:	ff af       	std	Y+63, r31	; 0x3f
    15e8:	ee af       	std	Y+62, r30	; 0x3e
    15ea:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
    15ec:	f2 e0       	ldi	r31, 0x02	; 2
    15ee:	cf 0e       	add	r12, r31
    15f0:	d1 1c       	adc	r13, r1
    15f2:	ef 96       	adiw	r28, 0x3f	; 63
    15f4:	1f ad       	ldd	r17, Y+63	; 0x3f
    15f6:	ef 97       	sbiw	r28, 0x3f	; 63
    15f8:	1c 7f       	andi	r17, 0xFC	; 252
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    15fa:	14 36       	cpi	r17, 0x64	; 100
    15fc:	09 f4       	brne	.+2      	; 0x1600 <USB_ProcessHIDReport+0x1b4>
    15fe:	9d c0       	rjmp	.+314    	; 0x173a <USB_ProcessHIDReport+0x2ee>
    1600:	88 f5       	brcc	.+98     	; 0x1664 <USB_ProcessHIDReport+0x218>
    1602:	14 32       	cpi	r17, 0x24	; 36
    1604:	09 f4       	brne	.+2      	; 0x1608 <USB_ProcessHIDReport+0x1bc>
    1606:	83 c0       	rjmp	.+262    	; 0x170e <USB_ProcessHIDReport+0x2c2>
    1608:	b0 f4       	brcc	.+44     	; 0x1636 <USB_ProcessHIDReport+0x1ea>
    160a:	18 30       	cpi	r17, 0x08	; 8
    160c:	09 f4       	brne	.+2      	; 0x1610 <USB_ProcessHIDReport+0x1c4>
    160e:	ff c0       	rjmp	.+510    	; 0x180e <USB_ProcessHIDReport+0x3c2>
    1610:	48 f4       	brcc	.+18     	; 0x1624 <USB_ProcessHIDReport+0x1d8>
    1612:	14 30       	cpi	r17, 0x04	; 4
    1614:	09 f0       	breq	.+2      	; 0x1618 <USB_ProcessHIDReport+0x1cc>
    1616:	3d c2       	rjmp	.+1146   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1618:	d7 01       	movw	r26, r14
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	9c 92       	st	X, r9
    161e:	8e 92       	st	-X, r8
    1620:	11 97       	sbiw	r26, 0x01	; 1
				break;
    1622:	37 c2       	rjmp	.+1134   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1624:	14 31       	cpi	r17, 0x14	; 20
    1626:	09 f4       	brne	.+2      	; 0x162a <USB_ProcessHIDReport+0x1de>
    1628:	6c c0       	rjmp	.+216    	; 0x1702 <USB_ProcessHIDReport+0x2b6>
    162a:	18 31       	cpi	r17, 0x18	; 24
    162c:	09 f0       	breq	.+2      	; 0x1630 <USB_ProcessHIDReport+0x1e4>
    162e:	31 c2       	rjmp	.+1122   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
				break;
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
    1630:	24 01       	movw	r4, r8
    1632:	35 01       	movw	r6, r10
    1634:	2e c2       	rjmp	.+1116   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1636:	14 33       	cpi	r17, 0x34	; 52
    1638:	09 f4       	brne	.+2      	; 0x163c <USB_ProcessHIDReport+0x1f0>
    163a:	71 c0       	rjmp	.+226    	; 0x171e <USB_ProcessHIDReport+0x2d2>
    163c:	50 f4       	brcc	.+20     	; 0x1652 <USB_ProcessHIDReport+0x206>
    163e:	18 32       	cpi	r17, 0x28	; 40
    1640:	09 f0       	breq	.+2      	; 0x1644 <USB_ProcessHIDReport+0x1f8>
    1642:	27 c2       	rjmp	.+1102   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
    1644:	ed 96       	adiw	r28, 0x3d	; 61
    1646:	8c ae       	std	Y+60, r8	; 0x3c
    1648:	9d ae       	std	Y+61, r9	; 0x3d
    164a:	ae ae       	std	Y+62, r10	; 0x3e
    164c:	bf ae       	std	Y+63, r11	; 0x3f
    164e:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
    1650:	20 c2       	rjmp	.+1088   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1652:	14 34       	cpi	r17, 0x44	; 68
    1654:	09 f4       	brne	.+2      	; 0x1658 <USB_ProcessHIDReport+0x20c>
    1656:	69 c0       	rjmp	.+210    	; 0x172a <USB_ProcessHIDReport+0x2de>
    1658:	14 35       	cpi	r17, 0x54	; 84
    165a:	09 f0       	breq	.+2      	; 0x165e <USB_ProcessHIDReport+0x212>
    165c:	1a c2       	rjmp	.+1076   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    165e:	f7 01       	movw	r30, r14
    1660:	81 86       	std	Z+9, r8	; 0x09
				break;
    1662:	17 c2       	rjmp	.+1070   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1664:	14 39       	cpi	r17, 0x94	; 148
    1666:	09 f4       	brne	.+2      	; 0x166a <USB_ProcessHIDReport+0x21e>
    1668:	70 c0       	rjmp	.+224    	; 0x174a <USB_ProcessHIDReport+0x2fe>
    166a:	78 f4       	brcc	.+30     	; 0x168a <USB_ProcessHIDReport+0x23e>
    166c:	10 38       	cpi	r17, 0x80	; 128
    166e:	e1 f0       	breq	.+56     	; 0x16a8 <USB_ProcessHIDReport+0x25c>
    1670:	30 f4       	brcc	.+12     	; 0x167e <USB_ProcessHIDReport+0x232>
    1672:	14 37       	cpi	r17, 0x74	; 116
    1674:	09 f0       	breq	.+2      	; 0x1678 <USB_ProcessHIDReport+0x22c>
    1676:	0d c2       	rjmp	.+1050   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1678:	f7 01       	movw	r30, r14
    167a:	80 82       	st	Z, r8
				break;
    167c:	0a c2       	rjmp	.+1044   	; 0x1a92 <USB_ProcessHIDReport+0x646>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    167e:	14 38       	cpi	r17, 0x84	; 132
    1680:	09 f4       	brne	.+2      	; 0x1684 <USB_ProcessHIDReport+0x238>
    1682:	67 c0       	rjmp	.+206    	; 0x1752 <USB_ProcessHIDReport+0x306>
    1684:	10 39       	cpi	r17, 0x90	; 144
    1686:	81 f0       	breq	.+32     	; 0x16a8 <USB_ProcessHIDReport+0x25c>
    1688:	04 c2       	rjmp	.+1032   	; 0x1a92 <USB_ProcessHIDReport+0x646>
    168a:	10 3b       	cpi	r17, 0xB0	; 176
    168c:	69 f0       	breq	.+26     	; 0x16a8 <USB_ProcessHIDReport+0x25c>
    168e:	30 f4       	brcc	.+12     	; 0x169c <USB_ProcessHIDReport+0x250>
    1690:	10 3a       	cpi	r17, 0xA0	; 160
    1692:	09 f4       	brne	.+2      	; 0x1696 <USB_ProcessHIDReport+0x24a>
    1694:	ca c0       	rjmp	.+404    	; 0x182a <USB_ProcessHIDReport+0x3de>
    1696:	14 3a       	cpi	r17, 0xA4	; 164
    1698:	c9 f0       	breq	.+50     	; 0x16cc <USB_ProcessHIDReport+0x280>
    169a:	fb c1       	rjmp	.+1014   	; 0x1a92 <USB_ProcessHIDReport+0x646>
    169c:	14 3b       	cpi	r17, 0xB4	; 180
    169e:	39 f1       	breq	.+78     	; 0x16ee <USB_ProcessHIDReport+0x2a2>
    16a0:	10 3c       	cpi	r17, 0xC0	; 192
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <USB_ProcessHIDReport+0x25a>
    16a4:	2a c1       	rjmp	.+596    	; 0x18fa <USB_ProcessHIDReport+0x4ae>
    16a6:	f5 c1       	rjmp	.+1002   	; 0x1a92 <USB_ProcessHIDReport+0x646>
    16a8:	ee 96       	adiw	r28, 0x3e	; 62
    16aa:	1f ae       	std	Y+63, r1	; 0x3f
    16ac:	ee 97       	sbiw	r28, 0x3e	; 62
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    16ae:	a5 01       	movw	r20, r10
    16b0:	94 01       	movw	r18, r8
    16b2:	21 70       	andi	r18, 0x01	; 1
    16b4:	33 27       	eor	r19, r19
    16b6:	44 27       	eor	r20, r20
    16b8:	55 27       	eor	r21, r21
    16ba:	cb 57       	subi	r28, 0x7B	; 123
    16bc:	df 4f       	sbci	r29, 0xFF	; 255
    16be:	28 83       	st	Y, r18
    16c0:	39 83       	std	Y+1, r19	; 0x01
    16c2:	4a 83       	std	Y+2, r20	; 0x02
    16c4:	5b 83       	std	Y+3, r21	; 0x03
    16c6:	c5 58       	subi	r28, 0x85	; 133
    16c8:	d0 40       	sbci	r29, 0x00	; 0
    16ca:	47 c1       	rjmp	.+654    	; 0x195a <USB_ProcessHIDReport+0x50e>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    16cc:	ce 01       	movw	r24, r28
    16ce:	4d 96       	adiw	r24, 0x1d	; 29
    16d0:	e8 16       	cp	r14, r24
    16d2:	f9 06       	cpc	r15, r25
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <USB_ProcessHIDReport+0x28c>
    16d6:	f4 c1       	rjmp	.+1000   	; 0x1ac0 <USB_ProcessHIDReport+0x674>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    16d8:	c7 01       	movw	r24, r14
    16da:	4c 96       	adiw	r24, 0x1c	; 28
    16dc:	2a e2       	ldi	r18, 0x2A	; 42
    16de:	f7 01       	movw	r30, r14
    16e0:	dc 01       	movw	r26, r24
    16e2:	01 90       	ld	r0, Z+
    16e4:	0d 92       	st	X+, r0
    16e6:	2a 95       	dec	r18
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <USB_ProcessHIDReport+0x296>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    16ea:	7c 01       	movw	r14, r24
				break;
    16ec:	d2 c1       	rjmp	.+932    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    16ee:	ce 01       	movw	r24, r28
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	8e 15       	cp	r24, r14
    16f4:	9f 05       	cpc	r25, r15
    16f6:	09 f4       	brne	.+2      	; 0x16fa <USB_ProcessHIDReport+0x2ae>
    16f8:	e5 c1       	rjmp	.+970    	; 0x1ac4 <USB_ProcessHIDReport+0x678>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    16fa:	3c e1       	ldi	r19, 0x1C	; 28
    16fc:	e3 1a       	sub	r14, r19
    16fe:	f1 08       	sbc	r15, r1
				break;
    1700:	c8 c1       	rjmp	.+912    	; 0x1a92 <USB_ProcessHIDReport+0x646>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1702:	f7 01       	movw	r30, r14
    1704:	82 86       	std	Z+10, r8	; 0x0a
    1706:	93 86       	std	Z+11, r9	; 0x0b
    1708:	a4 86       	std	Z+12, r10	; 0x0c
    170a:	b5 86       	std	Z+13, r11	; 0x0d
				break;
    170c:	c2 c1       	rjmp	.+900    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    170e:	d7 01       	movw	r26, r14
    1710:	1e 96       	adiw	r26, 0x0e	; 14
    1712:	8d 92       	st	X+, r8
    1714:	9d 92       	st	X+, r9
    1716:	ad 92       	st	X+, r10
    1718:	bc 92       	st	X, r11
    171a:	51 97       	sbiw	r26, 0x11	; 17
				break;
    171c:	ba c1       	rjmp	.+884    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    171e:	f7 01       	movw	r30, r14
    1720:	82 8a       	std	Z+18, r8	; 0x12
    1722:	93 8a       	std	Z+19, r9	; 0x13
    1724:	a4 8a       	std	Z+20, r10	; 0x14
    1726:	b5 8a       	std	Z+21, r11	; 0x15
				break;
    1728:	b4 c1       	rjmp	.+872    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    172a:	d7 01       	movw	r26, r14
    172c:	56 96       	adiw	r26, 0x16	; 22
    172e:	8d 92       	st	X+, r8
    1730:	9d 92       	st	X+, r9
    1732:	ad 92       	st	X+, r10
    1734:	bc 92       	st	X, r11
    1736:	59 97       	sbiw	r26, 0x19	; 25
				break;
    1738:	ac c1       	rjmp	.+856    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    173a:	d7 01       	movw	r26, r14
    173c:	15 96       	adiw	r26, 0x05	; 5
    173e:	8d 92       	st	X+, r8
    1740:	9d 92       	st	X+, r9
    1742:	ad 92       	st	X+, r10
    1744:	bc 92       	st	X, r11
    1746:	18 97       	sbiw	r26, 0x08	; 8
				break;
    1748:	a4 c1       	rjmp	.+840    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    174a:	d7 01       	movw	r26, r14
    174c:	5a 96       	adiw	r26, 0x1a	; 26
    174e:	8c 92       	st	X, r8
				break;
    1750:	a0 c1       	rjmp	.+832    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    1752:	98 2d       	mov	r25, r8
    1754:	f7 01       	movw	r30, r14
    1756:	83 8e       	std	Z+27, r8	; 0x1b

				if (ParserData->UsingReportIDs)
    1758:	cd 57       	subi	r28, 0x7D	; 125
    175a:	df 4f       	sbci	r29, 0xFF	; 255
    175c:	a8 81       	ld	r26, Y
    175e:	b9 81       	ldd	r27, Y+1	; 0x01
    1760:	c3 58       	subi	r28, 0x83	; 131
    1762:	d0 40       	sbci	r29, 0x00	; 0
    1764:	8c 91       	ld	r24, X
    1766:	88 23       	and	r24, r24
    1768:	09 f4       	brne	.+2      	; 0x176c <USB_ProcessHIDReport+0x320>
    176a:	41 c0       	rjmp	.+130    	; 0x17ee <USB_ProcessHIDReport+0x3a2>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    176c:	c5 57       	subi	r28, 0x75	; 117
    176e:	df 4f       	sbci	r29, 0xFF	; 255
    1770:	e8 81       	ld	r30, Y
    1772:	f9 81       	ldd	r31, Y+1	; 0x01
    1774:	cb 58       	subi	r28, 0x8B	; 139
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	f1 01       	movw	r30, r2
    177c:	e0 57       	subi	r30, 0x70	; 112
    177e:	fc 4f       	sbci	r31, 0xFC	; 252
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	28 17       	cp	r18, r24
    1786:	b8 f4       	brcc	.+46     	; 0x17b6 <USB_ProcessHIDReport+0x36a>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1788:	a9 01       	movw	r20, r18
    178a:	60 81       	ld	r22, Z
    178c:	2f 5f       	subi	r18, 0xFF	; 255
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	37 96       	adiw	r30, 0x07	; 7
    1792:	96 13       	cpse	r25, r22
    1794:	f7 cf       	rjmp	.-18     	; 0x1784 <USB_ProcessHIDReport+0x338>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1796:	27 e0       	ldi	r18, 0x07	; 7
    1798:	24 9f       	mul	r18, r20
    179a:	c0 01       	movw	r24, r0
    179c:	25 9f       	mul	r18, r21
    179e:	90 0d       	add	r25, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	80 57       	subi	r24, 0x70	; 112
    17a4:	9c 4f       	sbci	r25, 0xFC	; 252
    17a6:	91 01       	movw	r18, r2
    17a8:	28 0f       	add	r18, r24
    17aa:	39 1f       	adc	r19, r25
    17ac:	e9 96       	adiw	r28, 0x39	; 57
    17ae:	3f af       	std	Y+63, r19	; 0x3f
    17b0:	2e af       	std	Y+62, r18	; 0x3e
    17b2:	e9 97       	sbiw	r28, 0x39	; 57
    17b4:	1c c0       	rjmp	.+56     	; 0x17ee <USB_ProcessHIDReport+0x3a2>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    17b6:	8a 30       	cpi	r24, 0x0A	; 10
    17b8:	09 f4       	brne	.+2      	; 0x17bc <USB_ProcessHIDReport+0x370>
    17ba:	8e c1       	rjmp	.+796    	; 0x1ad8 <USB_ProcessHIDReport+0x68c>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	98 0f       	add	r25, r24
    17c0:	c1 58       	subi	r28, 0x81	; 129
    17c2:	df 4f       	sbci	r29, 0xFF	; 255
    17c4:	a8 81       	ld	r26, Y
    17c6:	b9 81       	ldd	r27, Y+1	; 0x01
    17c8:	cf 57       	subi	r28, 0x7F	; 127
    17ca:	d0 40       	sbci	r29, 0x00	; 0
    17cc:	9c 93       	st	X, r25
    17ce:	97 e0       	ldi	r25, 0x07	; 7
    17d0:	91 01       	movw	r18, r2
    17d2:	98 9f       	mul	r25, r24
    17d4:	20 0d       	add	r18, r0
    17d6:	31 1d       	adc	r19, r1
    17d8:	11 24       	eor	r1, r1
    17da:	f9 01       	movw	r30, r18
    17dc:	e0 57       	subi	r30, 0x70	; 112
    17de:	fc 4f       	sbci	r31, 0xFC	; 252
    17e0:	e9 96       	adiw	r28, 0x39	; 57
    17e2:	ff af       	std	Y+63, r31	; 0x3f
    17e4:	ee af       	std	Y+62, r30	; 0x3e
    17e6:	e9 97       	sbiw	r28, 0x39	; 57
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    17e8:	11 92       	st	Z+, r1
    17ea:	9a 95       	dec	r25
    17ec:	e9 f7       	brne	.-6      	; 0x17e8 <USB_ProcessHIDReport+0x39c>
					}
				}

				ParserData->UsingReportIDs = true;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	cd 57       	subi	r28, 0x7D	; 125
    17f2:	df 4f       	sbci	r29, 0xFF	; 255
    17f4:	a8 81       	ld	r26, Y
    17f6:	b9 81       	ldd	r27, Y+1	; 0x01
    17f8:	c3 58       	subi	r28, 0x83	; 131
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	8c 93       	st	X, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    17fe:	f7 01       	movw	r30, r14
    1800:	83 8d       	ldd	r24, Z+27	; 0x1b
    1802:	e9 96       	adiw	r28, 0x39	; 57
    1804:	ae ad       	ldd	r26, Y+62	; 0x3e
    1806:	bf ad       	ldd	r27, Y+63	; 0x3f
    1808:	e9 97       	sbiw	r28, 0x39	; 57
    180a:	8c 93       	st	X, r24
				break;
    180c:	42 c1       	rjmp	.+644    	; 0x1a92 <USB_ProcessHIDReport+0x646>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    180e:	08 30       	cpi	r16, 0x08	; 8
    1810:	09 f4       	brne	.+2      	; 0x1814 <USB_ProcessHIDReport+0x3c8>
    1812:	5a c1       	rjmp	.+692    	; 0x1ac8 <USB_ProcessHIDReport+0x67c>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1814:	fe 01       	movw	r30, r28
    1816:	ed 59       	subi	r30, 0x9D	; 157
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	e0 0f       	add	r30, r16
    181c:	f1 1d       	adc	r31, r1
    181e:	e0 0f       	add	r30, r16
    1820:	f1 1d       	adc	r31, r1
    1822:	91 82       	std	Z+1, r9	; 0x01
    1824:	80 82       	st	Z, r8
    1826:	0f 5f       	subi	r16, 0xFF	; 255
				break;
    1828:	34 c1       	rjmp	.+616    	; 0x1a92 <USB_ProcessHIDReport+0x646>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    182a:	e5 96       	adiw	r28, 0x35	; 53
    182c:	ee ad       	ldd	r30, Y+62	; 0x3e
    182e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1830:	e5 97       	sbiw	r28, 0x35	; 53
    1832:	ef 2b       	or	r30, r31
    1834:	41 f4       	brne	.+16     	; 0x1846 <USB_ProcessHIDReport+0x3fa>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    1836:	91 01       	movw	r18, r2
    1838:	27 5b       	subi	r18, 0xB7	; 183
    183a:	3c 4f       	sbci	r19, 0xFC	; 252
    183c:	e5 96       	adiw	r28, 0x35	; 53
    183e:	3f af       	std	Y+63, r19	; 0x3f
    1840:	2e af       	std	Y+62, r18	; 0x3e
    1842:	e5 97       	sbiw	r28, 0x35	; 53
    1844:	1d c0       	rjmp	.+58     	; 0x1880 <USB_ProcessHIDReport+0x434>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    1846:	f1 01       	movw	r30, r2
    1848:	e0 5b       	subi	r30, 0xB0	; 176
    184a:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
    184c:	85 81       	ldd	r24, Z+5	; 0x05
    184e:	96 81       	ldd	r25, Z+6	; 0x06
    1850:	89 2b       	or	r24, r25
    1852:	61 f0       	breq	.+24     	; 0x186c <USB_ProcessHIDReport+0x420>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1854:	c7 57       	subi	r28, 0x77	; 119
    1856:	df 4f       	sbci	r29, 0xFF	; 255
    1858:	48 81       	ld	r20, Y
    185a:	59 81       	ldd	r21, Y+1	; 0x01
    185c:	c9 58       	subi	r28, 0x89	; 137
    185e:	d0 40       	sbci	r29, 0x00	; 0
    1860:	e4 17       	cp	r30, r20
    1862:	f5 07       	cpc	r31, r21
    1864:	09 f4       	brne	.+2      	; 0x1868 <USB_ProcessHIDReport+0x41c>
    1866:	32 c1       	rjmp	.+612    	; 0x1acc <USB_ProcessHIDReport+0x680>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1868:	37 96       	adiw	r30, 0x07	; 7
    186a:	f0 cf       	rjmp	.-32     	; 0x184c <USB_ProcessHIDReport+0x400>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    186c:	e5 96       	adiw	r28, 0x35	; 53
    186e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1870:	9f ad       	ldd	r25, Y+63	; 0x3f
    1872:	e5 97       	sbiw	r28, 0x35	; 53
    1874:	96 83       	std	Z+6, r25	; 0x06
    1876:	85 83       	std	Z+5, r24	; 0x05
    1878:	e5 96       	adiw	r28, 0x35	; 53
    187a:	ff af       	std	Y+63, r31	; 0x3f
    187c:	ee af       	std	Y+62, r30	; 0x3e
    187e:	e5 97       	sbiw	r28, 0x35	; 53
				}

				CurrCollectionPath->Type       = ReportItemData;
    1880:	e5 96       	adiw	r28, 0x35	; 53
    1882:	ae ad       	ldd	r26, Y+62	; 0x3e
    1884:	bf ad       	ldd	r27, Y+63	; 0x3f
    1886:	e5 97       	sbiw	r28, 0x35	; 53
    1888:	8c 92       	st	X, r8
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    188a:	f7 01       	movw	r30, r14
    188c:	81 81       	ldd	r24, Z+1	; 0x01
    188e:	92 81       	ldd	r25, Z+2	; 0x02
    1890:	12 96       	adiw	r26, 0x02	; 2
    1892:	9c 93       	st	X, r25
    1894:	8e 93       	st	-X, r24
    1896:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
    1898:	00 23       	and	r16, r16
    189a:	a9 f0       	breq	.+42     	; 0x18c6 <USB_ProcessHIDReport+0x47a>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    189c:	a5 96       	adiw	r28, 0x25	; 37
    189e:	8e ad       	ldd	r24, Y+62	; 0x3e
    18a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    18a2:	a5 97       	sbiw	r28, 0x25	; 37
    18a4:	14 96       	adiw	r26, 0x04	; 4
    18a6:	9c 93       	st	X, r25
    18a8:	8e 93       	st	-X, r24
    18aa:	13 97       	sbiw	r26, 0x03	; 3
    18ac:	fe 01       	movw	r30, r28
    18ae:	ed 59       	subi	r30, 0x9D	; 157
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 0; i < UsageListSize; i++)
    18b2:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
    18b4:	22 81       	ldd	r18, Z+2	; 0x02
    18b6:	33 81       	ldd	r19, Z+3	; 0x03
    18b8:	21 93       	st	Z+, r18
    18ba:	31 93       	st	Z+, r19

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	08 13       	cpse	r16, r24
    18c0:	f9 cf       	rjmp	.-14     	; 0x18b4 <USB_ProcessHIDReport+0x468>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    18c2:	01 50       	subi	r16, 0x01	; 1
    18c4:	e6 c0       	rjmp	.+460    	; 0x1a92 <USB_ProcessHIDReport+0x646>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    18c6:	ed 96       	adiw	r28, 0x3d	; 61
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	ed 97       	sbiw	r28, 0x3d	; 61
    18d2:	24 15       	cp	r18, r4
    18d4:	35 05       	cpc	r19, r5
    18d6:	46 05       	cpc	r20, r6
    18d8:	57 05       	cpc	r21, r7
    18da:	08 f4       	brcc	.+2      	; 0x18de <USB_ProcessHIDReport+0x492>
    18dc:	da c0       	rjmp	.+436    	; 0x1a92 <USB_ProcessHIDReport+0x646>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    18de:	e5 96       	adiw	r28, 0x35	; 53
    18e0:	ae ad       	ldd	r26, Y+62	; 0x3e
    18e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    18e4:	e5 97       	sbiw	r28, 0x35	; 53
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	5c 92       	st	X, r5
    18ea:	4e 92       	st	-X, r4
    18ec:	13 97       	sbiw	r26, 0x03	; 3
    18ee:	bf ef       	ldi	r27, 0xFF	; 255
    18f0:	4b 1a       	sub	r4, r27
    18f2:	5b 0a       	sbc	r5, r27
    18f4:	6b 0a       	sbc	r6, r27
    18f6:	7b 0a       	sbc	r7, r27
    18f8:	cc c0       	rjmp	.+408    	; 0x1a92 <USB_ProcessHIDReport+0x646>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    18fa:	e5 96       	adiw	r28, 0x35	; 53
    18fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    18fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1900:	e5 97       	sbiw	r28, 0x35	; 53
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	09 f4       	brne	.+2      	; 0x1908 <USB_ProcessHIDReport+0x4bc>
    1906:	e4 c0       	rjmp	.+456    	; 0x1ad0 <USB_ProcessHIDReport+0x684>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1908:	25 81       	ldd	r18, Z+5	; 0x05
    190a:	36 81       	ldd	r19, Z+6	; 0x06
    190c:	e5 96       	adiw	r28, 0x35	; 53
    190e:	3f af       	std	Y+63, r19	; 0x3f
    1910:	2e af       	std	Y+62, r18	; 0x3e
    1912:	e5 97       	sbiw	r28, 0x35	; 53
				break;
    1914:	be c0       	rjmp	.+380    	; 0x1a92 <USB_ProcessHIDReport+0x646>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1916:	d1 01       	movw	r26, r2
    1918:	ea e2       	ldi	r30, 0x2A	; 42
    191a:	e8 9f       	mul	r30, r24
    191c:	a0 0d       	add	r26, r0
    191e:	b1 1d       	adc	r27, r1
    1920:	11 24       	eor	r1, r1
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	fe 01       	movw	r30, r28
    1926:	f9 96       	adiw	r30, 0x39	; 57
    1928:	8a e2       	ldi	r24, 0x2A	; 42
    192a:	01 90       	ld	r0, Z+
    192c:	0d 92       	st	X+, r0
    192e:	8a 95       	dec	r24
    1930:	e1 f7       	brne	.-8      	; 0x192a <USB_ProcessHIDReport+0x4de>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1932:	cb 57       	subi	r28, 0x7B	; 123
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	28 81       	ld	r18, Y
    1938:	39 81       	ldd	r19, Y+1	; 0x01
    193a:	4a 81       	ldd	r20, Y+2	; 0x02
    193c:	5b 81       	ldd	r21, Y+3	; 0x03
    193e:	c5 58       	subi	r28, 0x85	; 133
    1940:	d0 40       	sbci	r29, 0x00	; 0
    1942:	23 2b       	or	r18, r19
    1944:	24 2b       	or	r18, r20
    1946:	25 2b       	or	r18, r21
    1948:	09 f4       	brne	.+2      	; 0x194c <USB_ProcessHIDReport+0x500>
    194a:	97 c0       	rjmp	.+302    	; 0x1a7a <USB_ProcessHIDReport+0x62e>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    194c:	ee 96       	adiw	r28, 0x3e	; 62
    194e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1950:	ee 97       	sbiw	r28, 0x3e	; 62
    1952:	bf 5f       	subi	r27, 0xFF	; 255
    1954:	ee 96       	adiw	r28, 0x3e	; 62
    1956:	bf af       	std	Y+63, r27	; 0x3f
    1958:	ee 97       	sbiw	r28, 0x3e	; 62
    195a:	f7 01       	movw	r30, r14
    195c:	82 8d       	ldd	r24, Z+26	; 0x1a
    195e:	ee 96       	adiw	r28, 0x3e	; 62
    1960:	ff ad       	ldd	r31, Y+63	; 0x3f
    1962:	ee 97       	sbiw	r28, 0x3e	; 62
    1964:	f8 17       	cp	r31, r24
    1966:	08 f0       	brcs	.+2      	; 0x196a <USB_ProcessHIDReport+0x51e>
    1968:	94 c0       	rjmp	.+296    	; 0x1a92 <USB_ProcessHIDReport+0x646>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    196a:	8a e1       	ldi	r24, 0x1A	; 26
    196c:	f7 01       	movw	r30, r14
    196e:	de 01       	movw	r26, r28
    1970:	af 5b       	subi	r26, 0xBF	; 191
    1972:	bf 4f       	sbci	r27, 0xFF	; 255
    1974:	01 90       	ld	r0, Z+
    1976:	0d 92       	st	X+, r0
    1978:	8a 95       	dec	r24
    197a:	e1 f7       	brne	.-8      	; 0x1974 <USB_ProcessHIDReport+0x528>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    197c:	9d ae       	std	Y+61, r9	; 0x3d
    197e:	8c ae       	std	Y+60, r8	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
    1980:	e5 96       	adiw	r28, 0x35	; 53
    1982:	4e ad       	ldd	r20, Y+62	; 0x3e
    1984:	5f ad       	ldd	r21, Y+63	; 0x3f
    1986:	e5 97       	sbiw	r28, 0x35	; 53
    1988:	21 96       	adiw	r28, 0x01	; 1
    198a:	5f af       	std	Y+63, r21	; 0x3f
    198c:	4e af       	std	Y+62, r20	; 0x3e
    198e:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1990:	d7 01       	movw	r26, r14
    1992:	5b 96       	adiw	r26, 0x1b	; 27
    1994:	8c 91       	ld	r24, X
    1996:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
    1998:	00 23       	and	r16, r16
    199a:	a9 f0       	breq	.+42     	; 0x19c6 <USB_ProcessHIDReport+0x57a>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    199c:	a5 96       	adiw	r28, 0x25	; 37
    199e:	8e ad       	ldd	r24, Y+62	; 0x3e
    19a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19a2:	a5 97       	sbiw	r28, 0x25	; 37
    19a4:	26 96       	adiw	r28, 0x06	; 6
    19a6:	9f af       	std	Y+63, r25	; 0x3f
    19a8:	8e af       	std	Y+62, r24	; 0x3e
    19aa:	26 97       	sbiw	r28, 0x06	; 6
    19ac:	fe 01       	movw	r30, r28
    19ae:	ed 59       	subi	r30, 0x9D	; 157
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 0; i < UsageListSize; i++)
    19b2:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
    19b4:	22 81       	ldd	r18, Z+2	; 0x02
    19b6:	33 81       	ldd	r19, Z+3	; 0x03
    19b8:	21 93       	st	Z+, r18
    19ba:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	08 13       	cpse	r16, r24
    19c0:	f9 cf       	rjmp	.-14     	; 0x19b4 <USB_ProcessHIDReport+0x568>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    19c2:	01 50       	subi	r16, 0x01	; 1
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <USB_ProcessHIDReport+0x5a2>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    19c6:	ed 96       	adiw	r28, 0x3d	; 61
    19c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    19cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    19d0:	ed 97       	sbiw	r28, 0x3d	; 61
    19d2:	24 15       	cp	r18, r4
    19d4:	35 05       	cpc	r19, r5
    19d6:	46 05       	cpc	r20, r6
    19d8:	57 05       	cpc	r21, r7
    19da:	48 f0       	brcs	.+18     	; 0x19ee <USB_ProcessHIDReport+0x5a2>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    19dc:	26 96       	adiw	r28, 0x06	; 6
    19de:	5f ae       	std	Y+63, r5	; 0x3f
    19e0:	4e ae       	std	Y+62, r4	; 0x3e
    19e2:	26 97       	sbiw	r28, 0x06	; 6
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	43 1a       	sub	r4, r19
    19e8:	53 0a       	sbc	r5, r19
    19ea:	63 0a       	sbc	r6, r19
    19ec:	73 0a       	sbc	r7, r19
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    19ee:	10 38       	cpi	r17, 0x80	; 128
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <USB_ProcessHIDReport+0x5aa>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    19f2:	1b ae       	std	Y+59, r1	; 0x3b
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <USB_ProcessHIDReport+0x5b8>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    19f6:	10 39       	cpi	r17, 0x90	; 144
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <USB_ProcessHIDReport+0x5b4>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	4b af       	std	Y+59, r20	; 0x3b
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <USB_ProcessHIDReport+0x5b8>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1a00:	52 e0       	ldi	r21, 0x02	; 2
    1a02:	5b af       	std	Y+59, r21	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a06:	e9 96       	adiw	r28, 0x39	; 57
    1a08:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a0c:	e9 97       	sbiw	r28, 0x39	; 57
    1a0e:	e8 0f       	add	r30, r24
    1a10:	f1 1d       	adc	r31, r1
    1a12:	e8 0f       	add	r30, r24
    1a14:	f1 1d       	adc	r31, r1
    1a16:	81 81       	ldd	r24, Z+1	; 0x01
    1a18:	92 81       	ldd	r25, Z+2	; 0x02
    1a1a:	9a af       	std	Y+58, r25	; 0x3a
    1a1c:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1a1e:	d7 01       	movw	r26, r14
    1a20:	2c 91       	ld	r18, X
    1a22:	81 81       	ldd	r24, Z+1	; 0x01
    1a24:	92 81       	ldd	r25, Z+2	; 0x02
    1a26:	82 0f       	add	r24, r18
    1a28:	91 1d       	adc	r25, r1
    1a2a:	92 83       	std	Z+2, r25	; 0x02
    1a2c:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1a2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a30:	e9 96       	adiw	r28, 0x39	; 57
    1a32:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a34:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a36:	e9 97       	sbiw	r28, 0x39	; 57
    1a38:	e8 0f       	add	r30, r24
    1a3a:	f1 1d       	adc	r31, r1
    1a3c:	e8 0f       	add	r30, r24
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	cf 57       	subi	r28, 0x7F	; 127
    1a42:	df 4f       	sbci	r29, 0xFF	; 255
    1a44:	a8 81       	ld	r26, Y
    1a46:	b9 81       	ldd	r27, Y+1	; 0x01
    1a48:	c1 58       	subi	r28, 0x81	; 129
    1a4a:	d0 40       	sbci	r29, 0x00	; 0
    1a4c:	2d 91       	ld	r18, X+
    1a4e:	3c 91       	ld	r19, X
    1a50:	81 81       	ldd	r24, Z+1	; 0x01
    1a52:	92 81       	ldd	r25, Z+2	; 0x02
    1a54:	82 17       	cp	r24, r18
    1a56:	93 07       	cpc	r25, r19
    1a58:	08 f4       	brcc	.+2      	; 0x1a5c <USB_ProcessHIDReport+0x610>
    1a5a:	c9 01       	movw	r24, r18
    1a5c:	cf 57       	subi	r28, 0x7F	; 127
    1a5e:	df 4f       	sbci	r29, 0xFF	; 255
    1a60:	e8 81       	ld	r30, Y
    1a62:	f9 81       	ldd	r31, Y+1	; 0x01
    1a64:	c1 58       	subi	r28, 0x81	; 129
    1a66:	d0 40       	sbci	r29, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1a6c:	d1 01       	movw	r26, r2
    1a6e:	8c 91       	ld	r24, X
    1a70:	84 31       	cpi	r24, 0x14	; 20
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <USB_ProcessHIDReport+0x62a>
    1a74:	50 cf       	rjmp	.-352    	; 0x1916 <USB_ProcessHIDReport+0x4ca>
					  return HID_PARSE_InsufficientReportItems;
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	30 c0       	rjmp	.+96     	; 0x1ada <USB_ProcessHIDReport+0x68e>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	c9 96       	adiw	r24, 0x39	; 57
    1a7e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <CALLBACK_HIDParser_FilterHIDReportItem>
    1a82:	88 23       	and	r24, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <USB_ProcessHIDReport+0x63c>
    1a86:	62 cf       	rjmp	.-316    	; 0x194c <USB_ProcessHIDReport+0x500>
					  ParserData->TotalReportItems++;
    1a88:	d1 01       	movw	r26, r2
    1a8a:	8c 91       	ld	r24, X
    1a8c:	8f 5f       	subi	r24, 0xFF	; 255
    1a8e:	8c 93       	st	X, r24
    1a90:	5d cf       	rjmp	.-326    	; 0x194c <USB_ProcessHIDReport+0x500>
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1a92:	ef 96       	adiw	r28, 0x3f	; 63
    1a94:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a96:	ef 97       	sbiw	r28, 0x3f	; 63
    1a98:	8c 70       	andi	r24, 0x0C	; 12
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <USB_ProcessHIDReport+0x652>
    1a9c:	4b cd       	rjmp	.-1386   	; 0x1534 <USB_ProcessHIDReport+0xe8>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    1a9e:	ed 96       	adiw	r28, 0x3d	; 61
    1aa0:	1c ae       	std	Y+60, r1	; 0x3c
    1aa2:	1d ae       	std	Y+61, r1	; 0x3d
    1aa4:	1e ae       	std	Y+62, r1	; 0x3e
    1aa6:	1f ae       	std	Y+63, r1	; 0x3f
    1aa8:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    1aaa:	41 2c       	mov	r4, r1
    1aac:	51 2c       	mov	r5, r1
    1aae:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	40 cd       	rjmp	.-1408   	; 0x1534 <USB_ProcessHIDReport+0xe8>
		}
	}

	if (!(ParserData->TotalReportItems))
    1ab4:	d1 01       	movw	r26, r2
    1ab6:	8c 91       	ld	r24, X
    1ab8:	88 23       	and	r24, r24
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <USB_ProcessHIDReport+0x688>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <USB_ProcessHIDReport+0x68e>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	0b c0       	rjmp	.+22     	; 0x1ada <USB_ProcessHIDReport+0x68e>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    1ac4:	82 e0       	ldi	r24, 0x02	; 2
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <USB_ProcessHIDReport+0x68e>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    1ac8:	86 e0       	ldi	r24, 0x06	; 6
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <USB_ProcessHIDReport+0x68e>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <USB_ProcessHIDReport+0x68e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <USB_ProcessHIDReport+0x68e>
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;
    1ad4:	88 e0       	ldi	r24, 0x08	; 8
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <USB_ProcessHIDReport+0x68e>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    1ad8:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1ada:	c4 57       	subi	r28, 0x74	; 116
    1adc:	df 4f       	sbci	r29, 0xFF	; 255
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	af 90       	pop	r10
    1afc:	9f 90       	pop	r9
    1afe:	8f 90       	pop	r8
    1b00:	7f 90       	pop	r7
    1b02:	6f 90       	pop	r6
    1b04:	5f 90       	pop	r5
    1b06:	4f 90       	pop	r4
    1b08:	3f 90       	pop	r3
    1b0a:	2f 90       	pop	r2
    1b0c:	08 95       	ret

00001b0e <USB_GetHIDReportItemInfo>:

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1b0e:	8f 92       	push	r8
    1b10:	9f 92       	push	r9
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
    1b20:	30 97       	sbiw	r30, 0x00	; 0
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <USB_GetHIDReportItemInfo+0x18>
    1b24:	48 c0       	rjmp	.+144    	; 0x1bb6 <USB_GetHIDReportItemInfo+0xa8>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1b26:	25 81       	ldd	r18, Z+5	; 0x05
    1b28:	22 23       	and	r18, r18
    1b2a:	29 f0       	breq	.+10     	; 0x1b36 <USB_GetHIDReportItemInfo+0x28>
	{
		if (ReportItem->ReportID != ReportData[0])
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	3c 91       	ld	r19, X
    1b30:	23 13       	cpse	r18, r19
    1b32:	41 c0       	rjmp	.+130    	; 0x1bb6 <USB_GetHIDReportItemInfo+0xa8>
		  return false;

		ReportData++;
    1b34:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1b36:	20 85       	ldd	r18, Z+8	; 0x08
    1b38:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1b3e:	c2 a0       	ldd	r12, Z+34	; 0x22
    1b40:	d3 a0       	ldd	r13, Z+35	; 0x23
    1b42:	e4 a0       	ldd	r14, Z+36	; 0x24
    1b44:	f5 a0       	ldd	r15, Z+37	; 0x25
    1b46:	c6 a2       	std	Z+38, r12	; 0x26
    1b48:	d7 a2       	std	Z+39, r13	; 0x27
    1b4a:	e0 a6       	std	Z+40, r14	; 0x28
    1b4c:	f1 a6       	std	Z+41, r15	; 0x29
	ReportItem->Value = 0;
    1b4e:	12 a2       	std	Z+34, r1	; 0x22
    1b50:	13 a2       	std	Z+35, r1	; 0x23
    1b52:	14 a2       	std	Z+36, r1	; 0x24
    1b54:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
    1b56:	c1 2c       	mov	r12, r1
    1b58:	d1 2c       	mov	r13, r1
    1b5a:	76 01       	movw	r14, r12
    1b5c:	c3 94       	inc	r12
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1b5e:	21 50       	subi	r18, 0x01	; 1
    1b60:	31 09       	sbc	r19, r1
    1b62:	38 f1       	brcs	.+78     	; 0x1bb2 <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1b64:	db 01       	movw	r26, r22
    1b66:	53 e0       	ldi	r21, 0x03	; 3
    1b68:	b6 95       	lsr	r27
    1b6a:	a7 95       	ror	r26
    1b6c:	5a 95       	dec	r21
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <USB_GetHIDReportItemInfo+0x5a>
    1b70:	a8 0f       	add	r26, r24
    1b72:	b9 1f       	adc	r27, r25
    1b74:	4c 91       	ld	r20, X
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	db 01       	movw	r26, r22
    1b7a:	a7 70       	andi	r26, 0x07	; 7
    1b7c:	bb 27       	eor	r27, r27
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <USB_GetHIDReportItemInfo+0x76>
    1b80:	55 95       	asr	r21
    1b82:	47 95       	ror	r20
    1b84:	aa 95       	dec	r26
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <USB_GetHIDReportItemInfo+0x72>
    1b88:	40 ff       	sbrs	r20, 0
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
    1b8c:	82 a0       	ldd	r8, Z+34	; 0x22
    1b8e:	93 a0       	ldd	r9, Z+35	; 0x23
    1b90:	a4 a0       	ldd	r10, Z+36	; 0x24
    1b92:	b5 a0       	ldd	r11, Z+37	; 0x25
    1b94:	8c 28       	or	r8, r12
    1b96:	9d 28       	or	r9, r13
    1b98:	ae 28       	or	r10, r14
    1b9a:	bf 28       	or	r11, r15
    1b9c:	82 a2       	std	Z+34, r8	; 0x22
    1b9e:	93 a2       	std	Z+35, r9	; 0x23
    1ba0:	a4 a2       	std	Z+36, r10	; 0x24
    1ba2:	b5 a2       	std	Z+37, r11	; 0x25

		CurrentBit++;
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
    1ba8:	cc 0c       	add	r12, r12
    1baa:	dd 1c       	adc	r13, r13
    1bac:	ee 1c       	adc	r14, r14
    1bae:	ff 1c       	adc	r15, r15
    1bb0:	d6 cf       	rjmp	.-84     	; 0x1b5e <USB_GetHIDReportItemInfo+0x50>
	}

	return true;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <USB_GetHIDReportItemInfo+0xaa>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	08 95       	ret

00001bca <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1bca:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1bce:	95 ff       	sbrs	r25, 5
    1bd0:	fc cf       	rjmp	.-8      	; 0x1bca <Serial_putchar>
				UDR1 = DataByte;
    1bd2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	08 95       	ret

00001bdc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1bdc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1be0:	87 ff       	sbrs	r24, 7
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <Serial_getchar+0x18>
    1be4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1be8:	87 ff       	sbrs	r24, 7
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1bec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	08 95       	ret
	  return _FDEV_EOF;
    1bf4:	8e ef       	ldi	r24, 0xFE	; 254
    1bf6:	9f ef       	ldi	r25, 0xFF	; 255
    1bf8:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1bfe:	08 95       	ret

00001c00 <__tablejump2__>:
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	00 24       	eor	r0, r0
    1c06:	00 1c       	adc	r0, r0
    1c08:	0b be       	out	0x3b, r0	; 59
    1c0a:	07 90       	elpm	r0, Z+
    1c0c:	f6 91       	elpm	r31, Z
    1c0e:	e0 2d       	mov	r30, r0
    1c10:	09 94       	ijmp

00001c12 <printf_P>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	ae 01       	movw	r20, r28
    1c20:	49 5f       	subi	r20, 0xF9	; 249
    1c22:	5f 4f       	sbci	r21, 0xFF	; 255
    1c24:	da 01       	movw	r26, r20
    1c26:	6d 91       	ld	r22, X+
    1c28:	7d 91       	ld	r23, X+
    1c2a:	ad 01       	movw	r20, r26
    1c2c:	09 e0       	ldi	r16, 0x09	; 9
    1c2e:	15 e0       	ldi	r17, 0x05	; 5
    1c30:	f8 01       	movw	r30, r16
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	dc 01       	movw	r26, r24
    1c38:	13 96       	adiw	r26, 0x03	; 3
    1c3a:	2c 91       	ld	r18, X
    1c3c:	13 97       	sbiw	r26, 0x03	; 3
    1c3e:	28 60       	ori	r18, 0x08	; 8
    1c40:	13 96       	adiw	r26, 0x03	; 3
    1c42:	2c 93       	st	X, r18
    1c44:	3e d0       	rcall	.+124    	; 0x1cc2 <vfprintf>
    1c46:	d8 01       	movw	r26, r16
    1c48:	12 96       	adiw	r26, 0x02	; 2
    1c4a:	ed 91       	ld	r30, X+
    1c4c:	fc 91       	ld	r31, X
    1c4e:	13 97       	sbiw	r26, 0x03	; 3
    1c50:	23 81       	ldd	r18, Z+3	; 0x03
    1c52:	27 7f       	andi	r18, 0xF7	; 247
    1c54:	23 83       	std	Z+3, r18	; 0x03
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <puts_P>:
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	8c 01       	movw	r16, r24
    1c6a:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <__iob+0x2>
    1c6e:	f0 91 0c 05 	lds	r31, 0x050C	; 0x80050c <__iob+0x3>
    1c72:	83 81       	ldd	r24, Z+3	; 0x03
    1c74:	81 ff       	sbrs	r24, 1
    1c76:	1b c0       	rjmp	.+54     	; 0x1cae <puts_P+0x4e>
    1c78:	d0 e0       	ldi	r29, 0x00	; 0
    1c7a:	c0 e0       	ldi	r28, 0x00	; 0
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	84 91       	lpm	r24, Z
    1c80:	60 91 0b 05 	lds	r22, 0x050B	; 0x80050b <__iob+0x2>
    1c84:	70 91 0c 05 	lds	r23, 0x050C	; 0x80050c <__iob+0x3>
    1c88:	db 01       	movw	r26, r22
    1c8a:	18 96       	adiw	r26, 0x08	; 8
    1c8c:	ed 91       	ld	r30, X+
    1c8e:	fc 91       	ld	r31, X
    1c90:	19 97       	sbiw	r26, 0x09	; 9
    1c92:	88 23       	and	r24, r24
    1c94:	41 f0       	breq	.+16     	; 0x1ca6 <puts_P+0x46>
    1c96:	09 95       	icall
    1c98:	89 2b       	or	r24, r25
    1c9a:	11 f0       	breq	.+4      	; 0x1ca0 <puts_P+0x40>
    1c9c:	df ef       	ldi	r29, 0xFF	; 255
    1c9e:	cf ef       	ldi	r28, 0xFF	; 255
    1ca0:	0f 5f       	subi	r16, 0xFF	; 255
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	eb cf       	rjmp	.-42     	; 0x1c7c <puts_P+0x1c>
    1ca6:	8a e0       	ldi	r24, 0x0A	; 10
    1ca8:	09 95       	icall
    1caa:	89 2b       	or	r24, r25
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <puts_P+0x54>
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <puts_P+0x58>
    1cb4:	8d 2f       	mov	r24, r29
    1cb6:	9c 2f       	mov	r25, r28
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <vfprintf>:
    1cc2:	2f 92       	push	r2
    1cc4:	3f 92       	push	r3
    1cc6:	4f 92       	push	r4
    1cc8:	5f 92       	push	r5
    1cca:	6f 92       	push	r6
    1ccc:	7f 92       	push	r7
    1cce:	8f 92       	push	r8
    1cd0:	9f 92       	push	r9
    1cd2:	af 92       	push	r10
    1cd4:	bf 92       	push	r11
    1cd6:	cf 92       	push	r12
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	2b 97       	sbiw	r28, 0x0b	; 11
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	6c 01       	movw	r12, r24
    1cf8:	7b 01       	movw	r14, r22
    1cfa:	8a 01       	movw	r16, r20
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	17 82       	std	Z+7, r1	; 0x07
    1d00:	16 82       	std	Z+6, r1	; 0x06
    1d02:	83 81       	ldd	r24, Z+3	; 0x03
    1d04:	81 ff       	sbrs	r24, 1
    1d06:	bf c1       	rjmp	.+894    	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    1d08:	ce 01       	movw	r24, r28
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	3c 01       	movw	r6, r24
    1d0e:	f6 01       	movw	r30, r12
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	f7 01       	movw	r30, r14
    1d14:	93 fd       	sbrc	r25, 3
    1d16:	85 91       	lpm	r24, Z+
    1d18:	93 ff       	sbrs	r25, 3
    1d1a:	81 91       	ld	r24, Z+
    1d1c:	7f 01       	movw	r14, r30
    1d1e:	88 23       	and	r24, r24
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <vfprintf+0x62>
    1d22:	ad c1       	rjmp	.+858    	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
    1d24:	85 32       	cpi	r24, 0x25	; 37
    1d26:	39 f4       	brne	.+14     	; 0x1d36 <vfprintf+0x74>
    1d28:	93 fd       	sbrc	r25, 3
    1d2a:	85 91       	lpm	r24, Z+
    1d2c:	93 ff       	sbrs	r25, 3
    1d2e:	81 91       	ld	r24, Z+
    1d30:	7f 01       	movw	r14, r30
    1d32:	85 32       	cpi	r24, 0x25	; 37
    1d34:	21 f4       	brne	.+8      	; 0x1d3e <vfprintf+0x7c>
    1d36:	b6 01       	movw	r22, r12
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	d6 d1       	rcall	.+940    	; 0x20e8 <fputc>
    1d3c:	e8 cf       	rjmp	.-48     	; 0x1d0e <vfprintf+0x4c>
    1d3e:	91 2c       	mov	r9, r1
    1d40:	21 2c       	mov	r2, r1
    1d42:	31 2c       	mov	r3, r1
    1d44:	ff e1       	ldi	r31, 0x1F	; 31
    1d46:	f3 15       	cp	r31, r3
    1d48:	d8 f0       	brcs	.+54     	; 0x1d80 <vfprintf+0xbe>
    1d4a:	8b 32       	cpi	r24, 0x2B	; 43
    1d4c:	79 f0       	breq	.+30     	; 0x1d6c <vfprintf+0xaa>
    1d4e:	38 f4       	brcc	.+14     	; 0x1d5e <vfprintf+0x9c>
    1d50:	80 32       	cpi	r24, 0x20	; 32
    1d52:	79 f0       	breq	.+30     	; 0x1d72 <vfprintf+0xb0>
    1d54:	83 32       	cpi	r24, 0x23	; 35
    1d56:	a1 f4       	brne	.+40     	; 0x1d80 <vfprintf+0xbe>
    1d58:	23 2d       	mov	r18, r3
    1d5a:	20 61       	ori	r18, 0x10	; 16
    1d5c:	1d c0       	rjmp	.+58     	; 0x1d98 <vfprintf+0xd6>
    1d5e:	8d 32       	cpi	r24, 0x2D	; 45
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <vfprintf+0xb8>
    1d62:	80 33       	cpi	r24, 0x30	; 48
    1d64:	69 f4       	brne	.+26     	; 0x1d80 <vfprintf+0xbe>
    1d66:	23 2d       	mov	r18, r3
    1d68:	21 60       	ori	r18, 0x01	; 1
    1d6a:	16 c0       	rjmp	.+44     	; 0x1d98 <vfprintf+0xd6>
    1d6c:	83 2d       	mov	r24, r3
    1d6e:	82 60       	ori	r24, 0x02	; 2
    1d70:	38 2e       	mov	r3, r24
    1d72:	e3 2d       	mov	r30, r3
    1d74:	e4 60       	ori	r30, 0x04	; 4
    1d76:	3e 2e       	mov	r3, r30
    1d78:	2a c0       	rjmp	.+84     	; 0x1dce <vfprintf+0x10c>
    1d7a:	f3 2d       	mov	r31, r3
    1d7c:	f8 60       	ori	r31, 0x08	; 8
    1d7e:	1d c0       	rjmp	.+58     	; 0x1dba <vfprintf+0xf8>
    1d80:	37 fc       	sbrc	r3, 7
    1d82:	2d c0       	rjmp	.+90     	; 0x1dde <vfprintf+0x11c>
    1d84:	20 ed       	ldi	r18, 0xD0	; 208
    1d86:	28 0f       	add	r18, r24
    1d88:	2a 30       	cpi	r18, 0x0A	; 10
    1d8a:	40 f0       	brcs	.+16     	; 0x1d9c <vfprintf+0xda>
    1d8c:	8e 32       	cpi	r24, 0x2E	; 46
    1d8e:	b9 f4       	brne	.+46     	; 0x1dbe <vfprintf+0xfc>
    1d90:	36 fc       	sbrc	r3, 6
    1d92:	75 c1       	rjmp	.+746    	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
    1d94:	23 2d       	mov	r18, r3
    1d96:	20 64       	ori	r18, 0x40	; 64
    1d98:	32 2e       	mov	r3, r18
    1d9a:	19 c0       	rjmp	.+50     	; 0x1dce <vfprintf+0x10c>
    1d9c:	36 fe       	sbrs	r3, 6
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <vfprintf+0xea>
    1da0:	8a e0       	ldi	r24, 0x0A	; 10
    1da2:	98 9e       	mul	r9, r24
    1da4:	20 0d       	add	r18, r0
    1da6:	11 24       	eor	r1, r1
    1da8:	92 2e       	mov	r9, r18
    1daa:	11 c0       	rjmp	.+34     	; 0x1dce <vfprintf+0x10c>
    1dac:	ea e0       	ldi	r30, 0x0A	; 10
    1dae:	2e 9e       	mul	r2, r30
    1db0:	20 0d       	add	r18, r0
    1db2:	11 24       	eor	r1, r1
    1db4:	22 2e       	mov	r2, r18
    1db6:	f3 2d       	mov	r31, r3
    1db8:	f0 62       	ori	r31, 0x20	; 32
    1dba:	3f 2e       	mov	r3, r31
    1dbc:	08 c0       	rjmp	.+16     	; 0x1dce <vfprintf+0x10c>
    1dbe:	8c 36       	cpi	r24, 0x6C	; 108
    1dc0:	21 f4       	brne	.+8      	; 0x1dca <vfprintf+0x108>
    1dc2:	83 2d       	mov	r24, r3
    1dc4:	80 68       	ori	r24, 0x80	; 128
    1dc6:	38 2e       	mov	r3, r24
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <vfprintf+0x10c>
    1dca:	88 36       	cpi	r24, 0x68	; 104
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <vfprintf+0x11c>
    1dce:	f7 01       	movw	r30, r14
    1dd0:	93 fd       	sbrc	r25, 3
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	93 ff       	sbrs	r25, 3
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	7f 01       	movw	r14, r30
    1dda:	81 11       	cpse	r24, r1
    1ddc:	b3 cf       	rjmp	.-154    	; 0x1d44 <vfprintf+0x82>
    1dde:	98 2f       	mov	r25, r24
    1de0:	9f 7d       	andi	r25, 0xDF	; 223
    1de2:	95 54       	subi	r25, 0x45	; 69
    1de4:	93 30       	cpi	r25, 0x03	; 3
    1de6:	28 f4       	brcc	.+10     	; 0x1df2 <vfprintf+0x130>
    1de8:	0c 5f       	subi	r16, 0xFC	; 252
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	9f e3       	ldi	r25, 0x3F	; 63
    1dee:	99 83       	std	Y+1, r25	; 0x01
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <vfprintf+0x14a>
    1df2:	83 36       	cpi	r24, 0x63	; 99
    1df4:	31 f0       	breq	.+12     	; 0x1e02 <vfprintf+0x140>
    1df6:	83 37       	cpi	r24, 0x73	; 115
    1df8:	71 f0       	breq	.+28     	; 0x1e16 <vfprintf+0x154>
    1dfa:	83 35       	cpi	r24, 0x53	; 83
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <vfprintf+0x13e>
    1dfe:	55 c0       	rjmp	.+170    	; 0x1eaa <vfprintf+0x1e8>
    1e00:	20 c0       	rjmp	.+64     	; 0x1e42 <vfprintf+0x180>
    1e02:	f8 01       	movw	r30, r16
    1e04:	80 81       	ld	r24, Z
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	0e 5f       	subi	r16, 0xFE	; 254
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	88 24       	eor	r8, r8
    1e0e:	83 94       	inc	r8
    1e10:	91 2c       	mov	r9, r1
    1e12:	53 01       	movw	r10, r6
    1e14:	12 c0       	rjmp	.+36     	; 0x1e3a <vfprintf+0x178>
    1e16:	28 01       	movw	r4, r16
    1e18:	f2 e0       	ldi	r31, 0x02	; 2
    1e1a:	4f 0e       	add	r4, r31
    1e1c:	51 1c       	adc	r5, r1
    1e1e:	f8 01       	movw	r30, r16
    1e20:	a0 80       	ld	r10, Z
    1e22:	b1 80       	ldd	r11, Z+1	; 0x01
    1e24:	36 fe       	sbrs	r3, 6
    1e26:	03 c0       	rjmp	.+6      	; 0x1e2e <vfprintf+0x16c>
    1e28:	69 2d       	mov	r22, r9
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <vfprintf+0x170>
    1e2e:	6f ef       	ldi	r22, 0xFF	; 255
    1e30:	7f ef       	ldi	r23, 0xFF	; 255
    1e32:	c5 01       	movw	r24, r10
    1e34:	4e d1       	rcall	.+668    	; 0x20d2 <strnlen>
    1e36:	4c 01       	movw	r8, r24
    1e38:	82 01       	movw	r16, r4
    1e3a:	f3 2d       	mov	r31, r3
    1e3c:	ff 77       	andi	r31, 0x7F	; 127
    1e3e:	3f 2e       	mov	r3, r31
    1e40:	15 c0       	rjmp	.+42     	; 0x1e6c <vfprintf+0x1aa>
    1e42:	28 01       	movw	r4, r16
    1e44:	22 e0       	ldi	r18, 0x02	; 2
    1e46:	42 0e       	add	r4, r18
    1e48:	51 1c       	adc	r5, r1
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	a0 80       	ld	r10, Z
    1e4e:	b1 80       	ldd	r11, Z+1	; 0x01
    1e50:	36 fe       	sbrs	r3, 6
    1e52:	03 c0       	rjmp	.+6      	; 0x1e5a <vfprintf+0x198>
    1e54:	69 2d       	mov	r22, r9
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <vfprintf+0x19c>
    1e5a:	6f ef       	ldi	r22, 0xFF	; 255
    1e5c:	7f ef       	ldi	r23, 0xFF	; 255
    1e5e:	c5 01       	movw	r24, r10
    1e60:	2d d1       	rcall	.+602    	; 0x20bc <strnlen_P>
    1e62:	4c 01       	movw	r8, r24
    1e64:	f3 2d       	mov	r31, r3
    1e66:	f0 68       	ori	r31, 0x80	; 128
    1e68:	3f 2e       	mov	r3, r31
    1e6a:	82 01       	movw	r16, r4
    1e6c:	33 fc       	sbrc	r3, 3
    1e6e:	19 c0       	rjmp	.+50     	; 0x1ea2 <vfprintf+0x1e0>
    1e70:	82 2d       	mov	r24, r2
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	88 16       	cp	r8, r24
    1e76:	99 06       	cpc	r9, r25
    1e78:	a0 f4       	brcc	.+40     	; 0x1ea2 <vfprintf+0x1e0>
    1e7a:	b6 01       	movw	r22, r12
    1e7c:	80 e2       	ldi	r24, 0x20	; 32
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	33 d1       	rcall	.+614    	; 0x20e8 <fputc>
    1e82:	2a 94       	dec	r2
    1e84:	f5 cf       	rjmp	.-22     	; 0x1e70 <vfprintf+0x1ae>
    1e86:	f5 01       	movw	r30, r10
    1e88:	37 fc       	sbrc	r3, 7
    1e8a:	85 91       	lpm	r24, Z+
    1e8c:	37 fe       	sbrs	r3, 7
    1e8e:	81 91       	ld	r24, Z+
    1e90:	5f 01       	movw	r10, r30
    1e92:	b6 01       	movw	r22, r12
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	28 d1       	rcall	.+592    	; 0x20e8 <fputc>
    1e98:	21 10       	cpse	r2, r1
    1e9a:	2a 94       	dec	r2
    1e9c:	21 e0       	ldi	r18, 0x01	; 1
    1e9e:	82 1a       	sub	r8, r18
    1ea0:	91 08       	sbc	r9, r1
    1ea2:	81 14       	cp	r8, r1
    1ea4:	91 04       	cpc	r9, r1
    1ea6:	79 f7       	brne	.-34     	; 0x1e86 <vfprintf+0x1c4>
    1ea8:	e1 c0       	rjmp	.+450    	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    1eaa:	84 36       	cpi	r24, 0x64	; 100
    1eac:	11 f0       	breq	.+4      	; 0x1eb2 <vfprintf+0x1f0>
    1eae:	89 36       	cpi	r24, 0x69	; 105
    1eb0:	39 f5       	brne	.+78     	; 0x1f00 <vfprintf+0x23e>
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	37 fe       	sbrs	r3, 7
    1eb6:	07 c0       	rjmp	.+14     	; 0x1ec6 <vfprintf+0x204>
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	0c 5f       	subi	r16, 0xFC	; 252
    1ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <vfprintf+0x214>
    1ec6:	60 81       	ld	r22, Z
    1ec8:	71 81       	ldd	r23, Z+1	; 0x01
    1eca:	07 2e       	mov	r0, r23
    1ecc:	00 0c       	add	r0, r0
    1ece:	88 0b       	sbc	r24, r24
    1ed0:	99 0b       	sbc	r25, r25
    1ed2:	0e 5f       	subi	r16, 0xFE	; 254
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	f3 2d       	mov	r31, r3
    1ed8:	ff 76       	andi	r31, 0x6F	; 111
    1eda:	3f 2e       	mov	r3, r31
    1edc:	97 ff       	sbrs	r25, 7
    1ede:	09 c0       	rjmp	.+18     	; 0x1ef2 <vfprintf+0x230>
    1ee0:	90 95       	com	r25
    1ee2:	80 95       	com	r24
    1ee4:	70 95       	com	r23
    1ee6:	61 95       	neg	r22
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	8f 4f       	sbci	r24, 0xFF	; 255
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	f0 68       	ori	r31, 0x80	; 128
    1ef0:	3f 2e       	mov	r3, r31
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	a3 01       	movw	r20, r6
    1ef8:	33 d1       	rcall	.+614    	; 0x2160 <__ultoa_invert>
    1efa:	88 2e       	mov	r8, r24
    1efc:	86 18       	sub	r8, r6
    1efe:	44 c0       	rjmp	.+136    	; 0x1f88 <vfprintf+0x2c6>
    1f00:	85 37       	cpi	r24, 0x75	; 117
    1f02:	31 f4       	brne	.+12     	; 0x1f10 <vfprintf+0x24e>
    1f04:	23 2d       	mov	r18, r3
    1f06:	2f 7e       	andi	r18, 0xEF	; 239
    1f08:	b2 2e       	mov	r11, r18
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	25 c0       	rjmp	.+74     	; 0x1f5a <vfprintf+0x298>
    1f10:	93 2d       	mov	r25, r3
    1f12:	99 7f       	andi	r25, 0xF9	; 249
    1f14:	b9 2e       	mov	r11, r25
    1f16:	8f 36       	cpi	r24, 0x6F	; 111
    1f18:	c1 f0       	breq	.+48     	; 0x1f4a <vfprintf+0x288>
    1f1a:	18 f4       	brcc	.+6      	; 0x1f22 <vfprintf+0x260>
    1f1c:	88 35       	cpi	r24, 0x58	; 88
    1f1e:	79 f0       	breq	.+30     	; 0x1f3e <vfprintf+0x27c>
    1f20:	ae c0       	rjmp	.+348    	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
    1f22:	80 37       	cpi	r24, 0x70	; 112
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <vfprintf+0x26a>
    1f26:	88 37       	cpi	r24, 0x78	; 120
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <vfprintf+0x270>
    1f2a:	a9 c0       	rjmp	.+338    	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
    1f2c:	e9 2f       	mov	r30, r25
    1f2e:	e0 61       	ori	r30, 0x10	; 16
    1f30:	be 2e       	mov	r11, r30
    1f32:	b4 fe       	sbrs	r11, 4
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <vfprintf+0x28e>
    1f36:	fb 2d       	mov	r31, r11
    1f38:	f4 60       	ori	r31, 0x04	; 4
    1f3a:	bf 2e       	mov	r11, r31
    1f3c:	09 c0       	rjmp	.+18     	; 0x1f50 <vfprintf+0x28e>
    1f3e:	34 fe       	sbrs	r3, 4
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <vfprintf+0x294>
    1f42:	29 2f       	mov	r18, r25
    1f44:	26 60       	ori	r18, 0x06	; 6
    1f46:	b2 2e       	mov	r11, r18
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <vfprintf+0x294>
    1f4a:	28 e0       	ldi	r18, 0x08	; 8
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <vfprintf+0x298>
    1f50:	20 e1       	ldi	r18, 0x10	; 16
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <vfprintf+0x298>
    1f56:	20 e1       	ldi	r18, 0x10	; 16
    1f58:	32 e0       	ldi	r19, 0x02	; 2
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	b7 fe       	sbrs	r11, 7
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <vfprintf+0x2ac>
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	0c 5f       	subi	r16, 0xFC	; 252
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	06 c0       	rjmp	.+12     	; 0x1f7a <vfprintf+0x2b8>
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 5f       	subi	r16, 0xFE	; 254
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	a3 01       	movw	r20, r6
    1f7c:	f1 d0       	rcall	.+482    	; 0x2160 <__ultoa_invert>
    1f7e:	88 2e       	mov	r8, r24
    1f80:	86 18       	sub	r8, r6
    1f82:	fb 2d       	mov	r31, r11
    1f84:	ff 77       	andi	r31, 0x7F	; 127
    1f86:	3f 2e       	mov	r3, r31
    1f88:	36 fe       	sbrs	r3, 6
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <vfprintf+0x2e4>
    1f8c:	23 2d       	mov	r18, r3
    1f8e:	2e 7f       	andi	r18, 0xFE	; 254
    1f90:	a2 2e       	mov	r10, r18
    1f92:	89 14       	cp	r8, r9
    1f94:	58 f4       	brcc	.+22     	; 0x1fac <vfprintf+0x2ea>
    1f96:	34 fe       	sbrs	r3, 4
    1f98:	0b c0       	rjmp	.+22     	; 0x1fb0 <vfprintf+0x2ee>
    1f9a:	32 fc       	sbrc	r3, 2
    1f9c:	09 c0       	rjmp	.+18     	; 0x1fb0 <vfprintf+0x2ee>
    1f9e:	83 2d       	mov	r24, r3
    1fa0:	8e 7e       	andi	r24, 0xEE	; 238
    1fa2:	a8 2e       	mov	r10, r24
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <vfprintf+0x2ee>
    1fa6:	b8 2c       	mov	r11, r8
    1fa8:	a3 2c       	mov	r10, r3
    1faa:	03 c0       	rjmp	.+6      	; 0x1fb2 <vfprintf+0x2f0>
    1fac:	b8 2c       	mov	r11, r8
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <vfprintf+0x2f0>
    1fb0:	b9 2c       	mov	r11, r9
    1fb2:	a4 fe       	sbrs	r10, 4
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <vfprintf+0x312>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e8 0d       	add	r30, r8
    1fba:	f1 1d       	adc	r31, r1
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 33       	cpi	r24, 0x30	; 48
    1fc0:	21 f4       	brne	.+8      	; 0x1fca <vfprintf+0x308>
    1fc2:	9a 2d       	mov	r25, r10
    1fc4:	99 7e       	andi	r25, 0xE9	; 233
    1fc6:	a9 2e       	mov	r10, r25
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <vfprintf+0x31a>
    1fca:	a2 fe       	sbrs	r10, 2
    1fcc:	06 c0       	rjmp	.+12     	; 0x1fda <vfprintf+0x318>
    1fce:	b3 94       	inc	r11
    1fd0:	b3 94       	inc	r11
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <vfprintf+0x31a>
    1fd4:	8a 2d       	mov	r24, r10
    1fd6:	86 78       	andi	r24, 0x86	; 134
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <vfprintf+0x31a>
    1fda:	b3 94       	inc	r11
    1fdc:	a3 fc       	sbrc	r10, 3
    1fde:	10 c0       	rjmp	.+32     	; 0x2000 <__DATA_REGION_LENGTH__>
    1fe0:	a0 fe       	sbrs	r10, 0
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <vfprintf+0x32e>
    1fe4:	b2 14       	cp	r11, r2
    1fe6:	80 f4       	brcc	.+32     	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    1fe8:	28 0c       	add	r2, r8
    1fea:	92 2c       	mov	r9, r2
    1fec:	9b 18       	sub	r9, r11
    1fee:	0d c0       	rjmp	.+26     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ff0:	b2 14       	cp	r11, r2
    1ff2:	58 f4       	brcc	.+22     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ff4:	b6 01       	movw	r22, r12
    1ff6:	80 e2       	ldi	r24, 0x20	; 32
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	76 d0       	rcall	.+236    	; 0x20e8 <fputc>
    1ffc:	b3 94       	inc	r11
    1ffe:	f8 cf       	rjmp	.-16     	; 0x1ff0 <vfprintf+0x32e>
    2000:	b2 14       	cp	r11, r2
    2002:	18 f4       	brcc	.+6      	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    2004:	2b 18       	sub	r2, r11
    2006:	02 c0       	rjmp	.+4      	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    2008:	98 2c       	mov	r9, r8
    200a:	21 2c       	mov	r2, r1
    200c:	a4 fe       	sbrs	r10, 4
    200e:	0f c0       	rjmp	.+30     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    2010:	b6 01       	movw	r22, r12
    2012:	80 e3       	ldi	r24, 0x30	; 48
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	68 d0       	rcall	.+208    	; 0x20e8 <fputc>
    2018:	a2 fe       	sbrs	r10, 2
    201a:	16 c0       	rjmp	.+44     	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    201c:	a1 fc       	sbrc	r10, 1
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    2020:	88 e7       	ldi	r24, 0x78	; 120
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 c0       	rjmp	.+4      	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    2026:	88 e5       	ldi	r24, 0x58	; 88
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	b6 01       	movw	r22, r12
    202c:	0c c0       	rjmp	.+24     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    202e:	8a 2d       	mov	r24, r10
    2030:	86 78       	andi	r24, 0x86	; 134
    2032:	51 f0       	breq	.+20     	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    2034:	a1 fe       	sbrs	r10, 1
    2036:	02 c0       	rjmp	.+4      	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    2038:	8b e2       	ldi	r24, 0x2B	; 43
    203a:	01 c0       	rjmp	.+2      	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    203c:	80 e2       	ldi	r24, 0x20	; 32
    203e:	a7 fc       	sbrc	r10, 7
    2040:	8d e2       	ldi	r24, 0x2D	; 45
    2042:	b6 01       	movw	r22, r12
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	50 d0       	rcall	.+160    	; 0x20e8 <fputc>
    2048:	89 14       	cp	r8, r9
    204a:	30 f4       	brcc	.+12     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    204c:	b6 01       	movw	r22, r12
    204e:	80 e3       	ldi	r24, 0x30	; 48
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	4a d0       	rcall	.+148    	; 0x20e8 <fputc>
    2054:	9a 94       	dec	r9
    2056:	f8 cf       	rjmp	.-16     	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    2058:	8a 94       	dec	r8
    205a:	f3 01       	movw	r30, r6
    205c:	e8 0d       	add	r30, r8
    205e:	f1 1d       	adc	r31, r1
    2060:	80 81       	ld	r24, Z
    2062:	b6 01       	movw	r22, r12
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	40 d0       	rcall	.+128    	; 0x20e8 <fputc>
    2068:	81 10       	cpse	r8, r1
    206a:	f6 cf       	rjmp	.-20     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    206c:	22 20       	and	r2, r2
    206e:	09 f4       	brne	.+2      	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2070:	4e ce       	rjmp	.-868    	; 0x1d0e <vfprintf+0x4c>
    2072:	b6 01       	movw	r22, r12
    2074:	80 e2       	ldi	r24, 0x20	; 32
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	37 d0       	rcall	.+110    	; 0x20e8 <fputc>
    207a:	2a 94       	dec	r2
    207c:	f7 cf       	rjmp	.-18     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    207e:	f6 01       	movw	r30, r12
    2080:	86 81       	ldd	r24, Z+6	; 0x06
    2082:	97 81       	ldd	r25, Z+7	; 0x07
    2084:	02 c0       	rjmp	.+4      	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	9f ef       	ldi	r25, 0xFF	; 255
    208a:	2b 96       	adiw	r28, 0x0b	; 11
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	8f 90       	pop	r8
    20ae:	7f 90       	pop	r7
    20b0:	6f 90       	pop	r6
    20b2:	5f 90       	pop	r5
    20b4:	4f 90       	pop	r4
    20b6:	3f 90       	pop	r3
    20b8:	2f 90       	pop	r2
    20ba:	08 95       	ret

000020bc <strnlen_P>:
    20bc:	fc 01       	movw	r30, r24
    20be:	05 90       	lpm	r0, Z+
    20c0:	61 50       	subi	r22, 0x01	; 1
    20c2:	70 40       	sbci	r23, 0x00	; 0
    20c4:	01 10       	cpse	r0, r1
    20c6:	d8 f7       	brcc	.-10     	; 0x20be <strnlen_P+0x2>
    20c8:	80 95       	com	r24
    20ca:	90 95       	com	r25
    20cc:	8e 0f       	add	r24, r30
    20ce:	9f 1f       	adc	r25, r31
    20d0:	08 95       	ret

000020d2 <strnlen>:
    20d2:	fc 01       	movw	r30, r24
    20d4:	61 50       	subi	r22, 0x01	; 1
    20d6:	70 40       	sbci	r23, 0x00	; 0
    20d8:	01 90       	ld	r0, Z+
    20da:	01 10       	cpse	r0, r1
    20dc:	d8 f7       	brcc	.-10     	; 0x20d4 <strnlen+0x2>
    20de:	80 95       	com	r24
    20e0:	90 95       	com	r25
    20e2:	8e 0f       	add	r24, r30
    20e4:	9f 1f       	adc	r25, r31
    20e6:	08 95       	ret

000020e8 <fputc>:
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	fb 01       	movw	r30, r22
    20f2:	23 81       	ldd	r18, Z+3	; 0x03
    20f4:	21 fd       	sbrc	r18, 1
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <fputc+0x16>
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	9f ef       	ldi	r25, 0xFF	; 255
    20fc:	2c c0       	rjmp	.+88     	; 0x2156 <__stack+0x57>
    20fe:	22 ff       	sbrs	r18, 2
    2100:	16 c0       	rjmp	.+44     	; 0x212e <__stack+0x2f>
    2102:	46 81       	ldd	r20, Z+6	; 0x06
    2104:	57 81       	ldd	r21, Z+7	; 0x07
    2106:	24 81       	ldd	r18, Z+4	; 0x04
    2108:	35 81       	ldd	r19, Z+5	; 0x05
    210a:	42 17       	cp	r20, r18
    210c:	53 07       	cpc	r21, r19
    210e:	44 f4       	brge	.+16     	; 0x2120 <__stack+0x21>
    2110:	a0 81       	ld	r26, Z
    2112:	b1 81       	ldd	r27, Z+1	; 0x01
    2114:	9d 01       	movw	r18, r26
    2116:	2f 5f       	subi	r18, 0xFF	; 255
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	31 83       	std	Z+1, r19	; 0x01
    211c:	20 83       	st	Z, r18
    211e:	8c 93       	st	X, r24
    2120:	26 81       	ldd	r18, Z+6	; 0x06
    2122:	37 81       	ldd	r19, Z+7	; 0x07
    2124:	2f 5f       	subi	r18, 0xFF	; 255
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	37 83       	std	Z+7, r19	; 0x07
    212a:	26 83       	std	Z+6, r18	; 0x06
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <__stack+0x57>
    212e:	8b 01       	movw	r16, r22
    2130:	ec 01       	movw	r28, r24
    2132:	fb 01       	movw	r30, r22
    2134:	00 84       	ldd	r0, Z+8	; 0x08
    2136:	f1 85       	ldd	r31, Z+9	; 0x09
    2138:	e0 2d       	mov	r30, r0
    213a:	09 95       	icall
    213c:	89 2b       	or	r24, r25
    213e:	e1 f6       	brne	.-72     	; 0x20f8 <fputc+0x10>
    2140:	d8 01       	movw	r26, r16
    2142:	16 96       	adiw	r26, 0x06	; 6
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	17 97       	sbiw	r26, 0x07	; 7
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	17 96       	adiw	r26, 0x07	; 7
    214e:	9c 93       	st	X, r25
    2150:	8e 93       	st	-X, r24
    2152:	16 97       	sbiw	r26, 0x06	; 6
    2154:	ce 01       	movw	r24, r28
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	08 95       	ret

00002160 <__ultoa_invert>:
    2160:	fa 01       	movw	r30, r20
    2162:	aa 27       	eor	r26, r26
    2164:	28 30       	cpi	r18, 0x08	; 8
    2166:	51 f1       	breq	.+84     	; 0x21bc <__ultoa_invert+0x5c>
    2168:	20 31       	cpi	r18, 0x10	; 16
    216a:	81 f1       	breq	.+96     	; 0x21cc <__ultoa_invert+0x6c>
    216c:	e8 94       	clt
    216e:	6f 93       	push	r22
    2170:	6e 7f       	andi	r22, 0xFE	; 254
    2172:	6e 5f       	subi	r22, 0xFE	; 254
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	af 4f       	sbci	r26, 0xFF	; 255
    217c:	b1 e0       	ldi	r27, 0x01	; 1
    217e:	3e d0       	rcall	.+124    	; 0x21fc <__ultoa_invert+0x9c>
    2180:	b4 e0       	ldi	r27, 0x04	; 4
    2182:	3c d0       	rcall	.+120    	; 0x21fc <__ultoa_invert+0x9c>
    2184:	67 0f       	add	r22, r23
    2186:	78 1f       	adc	r23, r24
    2188:	89 1f       	adc	r24, r25
    218a:	9a 1f       	adc	r25, r26
    218c:	a1 1d       	adc	r26, r1
    218e:	68 0f       	add	r22, r24
    2190:	79 1f       	adc	r23, r25
    2192:	8a 1f       	adc	r24, r26
    2194:	91 1d       	adc	r25, r1
    2196:	a1 1d       	adc	r26, r1
    2198:	6a 0f       	add	r22, r26
    219a:	71 1d       	adc	r23, r1
    219c:	81 1d       	adc	r24, r1
    219e:	91 1d       	adc	r25, r1
    21a0:	a1 1d       	adc	r26, r1
    21a2:	20 d0       	rcall	.+64     	; 0x21e4 <__ultoa_invert+0x84>
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <__ultoa_invert+0x48>
    21a6:	68 94       	set
    21a8:	3f 91       	pop	r19
    21aa:	2a e0       	ldi	r18, 0x0A	; 10
    21ac:	26 9f       	mul	r18, r22
    21ae:	11 24       	eor	r1, r1
    21b0:	30 19       	sub	r19, r0
    21b2:	30 5d       	subi	r19, 0xD0	; 208
    21b4:	31 93       	st	Z+, r19
    21b6:	de f6       	brtc	.-74     	; 0x216e <__ultoa_invert+0xe>
    21b8:	cf 01       	movw	r24, r30
    21ba:	08 95       	ret
    21bc:	46 2f       	mov	r20, r22
    21be:	47 70       	andi	r20, 0x07	; 7
    21c0:	40 5d       	subi	r20, 0xD0	; 208
    21c2:	41 93       	st	Z+, r20
    21c4:	b3 e0       	ldi	r27, 0x03	; 3
    21c6:	0f d0       	rcall	.+30     	; 0x21e6 <__ultoa_invert+0x86>
    21c8:	c9 f7       	brne	.-14     	; 0x21bc <__ultoa_invert+0x5c>
    21ca:	f6 cf       	rjmp	.-20     	; 0x21b8 <__ultoa_invert+0x58>
    21cc:	46 2f       	mov	r20, r22
    21ce:	4f 70       	andi	r20, 0x0F	; 15
    21d0:	40 5d       	subi	r20, 0xD0	; 208
    21d2:	4a 33       	cpi	r20, 0x3A	; 58
    21d4:	18 f0       	brcs	.+6      	; 0x21dc <__ultoa_invert+0x7c>
    21d6:	49 5d       	subi	r20, 0xD9	; 217
    21d8:	31 fd       	sbrc	r19, 1
    21da:	40 52       	subi	r20, 0x20	; 32
    21dc:	41 93       	st	Z+, r20
    21de:	02 d0       	rcall	.+4      	; 0x21e4 <__ultoa_invert+0x84>
    21e0:	a9 f7       	brne	.-22     	; 0x21cc <__ultoa_invert+0x6c>
    21e2:	ea cf       	rjmp	.-44     	; 0x21b8 <__ultoa_invert+0x58>
    21e4:	b4 e0       	ldi	r27, 0x04	; 4
    21e6:	a6 95       	lsr	r26
    21e8:	97 95       	ror	r25
    21ea:	87 95       	ror	r24
    21ec:	77 95       	ror	r23
    21ee:	67 95       	ror	r22
    21f0:	ba 95       	dec	r27
    21f2:	c9 f7       	brne	.-14     	; 0x21e6 <__ultoa_invert+0x86>
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	61 05       	cpc	r22, r1
    21f8:	71 05       	cpc	r23, r1
    21fa:	08 95       	ret
    21fc:	9b 01       	movw	r18, r22
    21fe:	ac 01       	movw	r20, r24
    2200:	0a 2e       	mov	r0, r26
    2202:	06 94       	lsr	r0
    2204:	57 95       	ror	r21
    2206:	47 95       	ror	r20
    2208:	37 95       	ror	r19
    220a:	27 95       	ror	r18
    220c:	ba 95       	dec	r27
    220e:	c9 f7       	brne	.-14     	; 0x2202 <__ultoa_invert+0xa2>
    2210:	62 0f       	add	r22, r18
    2212:	73 1f       	adc	r23, r19
    2214:	84 1f       	adc	r24, r20
    2216:	95 1f       	adc	r25, r21
    2218:	a0 1d       	adc	r26, r0
    221a:	08 95       	ret

0000221c <_exit>:
    221c:	f8 94       	cli

0000221e <__stop_program>:
    221e:	ff cf       	rjmp	.-2      	; 0x221e <__stop_program>
