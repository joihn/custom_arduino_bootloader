
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00001cfc  00001d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001d6  008001d6  00001e66  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001e66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000985e  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000271e  00000000  00000000  0000baae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000498d  00000000  00000000  0000e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  00012b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003140  00000000  00000000  000136e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a56  00000000  00000000  00016820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001b276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bc c0       	rjmp	.+376    	; 0x17a <__ctors_end>
       2:	00 00       	nop
       4:	d8 c0       	rjmp	.+432    	; 0x1b6 <__bad_interrupt>
       6:	00 00       	nop
       8:	d6 c0       	rjmp	.+428    	; 0x1b6 <__bad_interrupt>
       a:	00 00       	nop
       c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__bad_interrupt>
       e:	00 00       	nop
      10:	d2 c0       	rjmp	.+420    	; 0x1b6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d0 c0       	rjmp	.+416    	; 0x1b6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ce c0       	rjmp	.+412    	; 0x1b6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ca c0       	rjmp	.+404    	; 0x1b6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c8 c0       	rjmp	.+400    	; 0x1b6 <__bad_interrupt>
      26:	00 00       	nop
      28:	fb c6       	rjmp	.+3574   	; 0xe20 <__vector_10>
      2a:	00 00       	nop
      2c:	c4 c0       	rjmp	.+392    	; 0x1b6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c2 c0       	rjmp	.+388    	; 0x1b6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c0       	rjmp	.+384    	; 0x1b6 <__bad_interrupt>
      36:	00 00       	nop
      38:	be c0       	rjmp	.+380    	; 0x1b6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bc c0       	rjmp	.+376    	; 0x1b6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ba c0       	rjmp	.+372    	; 0x1b6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b8 c0       	rjmp	.+368    	; 0x1b6 <__bad_interrupt>
      46:	00 00       	nop
      48:	b6 c0       	rjmp	.+364    	; 0x1b6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b4 c0       	rjmp	.+360    	; 0x1b6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b2 c0       	rjmp	.+356    	; 0x1b6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b0 c0       	rjmp	.+352    	; 0x1b6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ae c0       	rjmp	.+348    	; 0x1b6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ac c0       	rjmp	.+344    	; 0x1b6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	aa c0       	rjmp	.+340    	; 0x1b6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a8 c0       	rjmp	.+336    	; 0x1b6 <__bad_interrupt>
      66:	00 00       	nop
      68:	a6 c0       	rjmp	.+332    	; 0x1b6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a4 c0       	rjmp	.+328    	; 0x1b6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a2 c0       	rjmp	.+324    	; 0x1b6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__bad_interrupt>
      76:	00 00       	nop
      78:	9e c0       	rjmp	.+316    	; 0x1b6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9c c0       	rjmp	.+312    	; 0x1b6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9a c0       	rjmp	.+308    	; 0x1b6 <__bad_interrupt>
      82:	00 00       	nop
      84:	98 c0       	rjmp	.+304    	; 0x1b6 <__bad_interrupt>
      86:	00 00       	nop
      88:	96 c0       	rjmp	.+300    	; 0x1b6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	94 c0       	rjmp	.+296    	; 0x1b6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	92 c0       	rjmp	.+292    	; 0x1b6 <__bad_interrupt>
      92:	00 00       	nop
      94:	90 c0       	rjmp	.+288    	; 0x1b6 <__bad_interrupt>
      96:	00 00       	nop
      98:	d4 09       	sbc	r29, r4
      9a:	f6 09       	sbc	r31, r6
      9c:	e5 0a       	sbc	r14, r21
      9e:	f6 09       	sbc	r31, r6
      a0:	e5 0a       	sbc	r14, r21
      a2:	3b 0a       	sbc	r3, r27
      a4:	5e 0a       	sbc	r5, r30
      a6:	e5 0a       	sbc	r14, r21
      a8:	b1 0a       	sbc	r11, r17
      aa:	c3 0a       	sbc	r12, r19

000000ac <ProductString>:
      ac:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.
      bc:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.
      cc:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      dc:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <LanguageString>:
     106:	04 03 09 04                                         ....

0000010a <ConfigurationDescriptor>:
     10a:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
     11a:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     12a:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
     13a:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 01 07     ................
     14a:	05 82 02 10 00 01 09 04 02 00 02 08 06 50 00 07     .............P..
     15a:	05 84 02 40 00 01 07 05 05 02 40 00 01              ...@......@..

00000167 <DeviceDescriptor>:
     167:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
     177:	dc 01 00                                            ...

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d0 e2       	ldi	r29, 0x20	; 32
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	ec ef       	ldi	r30, 0xFC	; 252
     18e:	fc e1       	ldi	r31, 0x1C	; 28
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	0b bf       	out	0x3b, r16	; 59
     194:	02 c0       	rjmp	.+4      	; 0x19a <__do_copy_data+0x14>
     196:	07 90       	elpm	r0, Z+
     198:	0d 92       	st	X+, r0
     19a:	a6 3d       	cpi	r26, 0xD6	; 214
     19c:	b1 07       	cpc	r27, r17
     19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0x10>

000001a0 <__do_clear_bss>:
     1a0:	21 e0       	ldi	r18, 0x01	; 1
     1a2:	a6 ed       	ldi	r26, 0xD6	; 214
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <.do_clear_bss_start>

000001a8 <.do_clear_bss_loop>:
     1a8:	1d 92       	st	X+, r1

000001aa <.do_clear_bss_start>:
     1aa:	a2 3f       	cpi	r26, 0xF2	; 242
     1ac:	b2 07       	cpc	r27, r18
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <.do_clear_bss_loop>
     1b0:	75 d0       	rcall	.+234    	; 0x29c <main>
     1b2:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <_exit>

000001b6 <__bad_interrupt>:
     1b6:	24 cf       	rjmp	.-440    	; 0x0 <__vectors>

000001b8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1b8:	9b b1       	in	r25, 0x0b	; 11
     1ba:	9f 70       	andi	r25, 0x0F	; 15
     1bc:	89 2b       	or	r24, r25
     1be:	8b b9       	out	0x0b, r24	; 11
     1c0:	08 95       	ret

000001c2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1c2:	84 b7       	in	r24, 0x34	; 52
     1c4:	87 7f       	andi	r24, 0xF7	; 247
     1c6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	a8 95       	wdr
     1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1d2:	88 61       	ori	r24, 0x18	; 24
     1d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1dc:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	80 e8       	ldi	r24, 0x80	; 128
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	f8 94       	cli
     1e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1ee:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1f0:	8a b1       	in	r24, 0x0a	; 10
     1f2:	80 6f       	ori	r24, 0xF0	; 240
     1f4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1f6:	8b b1       	in	r24, 0x0b	; 11
     1f8:	8f 70       	andi	r24, 0x0F	; 15
     1fa:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     1fc:	84 b1       	in	r24, 0x04	; 4
     1fe:	8f 71       	andi	r24, 0x1F	; 31
     200:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     202:	8d b1       	in	r24, 0x0d	; 13
     204:	8f 7c       	andi	r24, 0xCF	; 207
     206:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	80 6e       	ori	r24, 0xE0	; 224
     20c:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     20e:	8e b1       	in	r24, 0x0e	; 14
     210:	80 63       	ori	r24, 0x30	; 48
     212:	8e b9       	out	0x0e, r24	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     214:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     216:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     218:	84 b1       	in	r24, 0x04	; 4
     21a:	86 60       	ori	r24, 0x06	; 6
     21c:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     21e:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     220:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     222:	8d b5       	in	r24, 0x2d	; 45
     224:	81 60       	ori	r24, 0x01	; 1
     226:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     228:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     22a:	8c e5       	ldi	r24, 0x5C	; 92
     22c:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     22e:	8d b1       	in	r24, 0x0d	; 13
     230:	83 60       	ori	r24, 0x03	; 3
     232:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     234:	8e b1       	in	r24, 0x0e	; 14
     236:	83 60       	ori	r24, 0x03	; 3
     238:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	LEDs_Init();
	Joystick_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     23a:	dc d5       	rcall	.+3000   	; 0xdf4 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     23c:	35 c3       	rjmp	.+1642   	; 0x8a8 <DataflashManager_ResetDataflashProtections>

0000023e <CheckJoystickMovement>:
     23e:	83 b1       	in	r24, 0x03	; 3
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     240:	9c b1       	in	r25, 0x0c	; 12
     242:	90 95       	com	r25
     244:	90 73       	andi	r25, 0x30	; 48
     246:	96 95       	lsr	r25
     248:	80 95       	com	r24
     24a:	80 7e       	andi	r24, 0xE0	; 224
     24c:	89 2b       	or	r24, r25
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     24e:	87 fd       	sbrc	r24, 7
     250:	0b c0       	rjmp	.+22     	; 0x268 <CheckJoystickMovement+0x2a>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     252:	84 fd       	sbrc	r24, 4
     254:	0c c0       	rjmp	.+24     	; 0x26e <CheckJoystickMovement+0x30>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     256:	86 fd       	sbrc	r24, 6
     258:	0d c0       	rjmp	.+26     	; 0x274 <CheckJoystickMovement+0x36>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     25a:	83 fd       	sbrc	r24, 3
     25c:	0e c0       	rjmp	.+28     	; 0x27a <CheckJoystickMovement+0x3c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     25e:	85 fd       	sbrc	r24, 5
     260:	0f c0       	rjmp	.+30     	; 0x280 <CheckJoystickMovement+0x42>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     262:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
     266:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     268:	87 ec       	ldi	r24, 0xC7	; 199
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0b c0       	rjmp	.+22     	; 0x284 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     26e:	87 eb       	ldi	r24, 0xB7	; 183
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	08 c0       	rjmp	.+16     	; 0x284 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     274:	87 ea       	ldi	r24, 0xA7	; 167
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	05 c0       	rjmp	.+10     	; 0x284 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     27a:	86 e9       	ldi	r24, 0x96	; 150
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	02 c0       	rjmp	.+4      	; 0x284 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     280:	83 e8       	ldi	r24, 0x83	; 131
     282:	91 e0       	ldi	r25, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     284:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <__data_end>
     288:	21 11       	cpse	r18, r1
     28a:	07 c0       	rjmp	.+14     	; 0x29a <CheckJoystickMovement+0x5c>
	{
		ActionSent = true;
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <__data_end>

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
     292:	67 ed       	ldi	r22, 0xD7	; 215
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <fputs>
     29a:	08 95       	ret

0000029c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     29c:	92 df       	rcall	.-220    	; 0x1c2 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     29e:	67 ed       	ldi	r22, 0xD7	; 215
     2a0:	71 e0       	ldi	r23, 0x01	; 1
     2a2:	87 e3       	ldi	r24, 0x37	; 55
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 09 0c 	call	0x1812	; 0x1812 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2aa:	80 e1       	ldi	r24, 0x10	; 16
     2ac:	85 df       	rcall	.-246    	; 0x1b8 <LEDs_SetAllLEDs>
	sei();
     2ae:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
     2b0:	c6 df       	rcall	.-116    	; 0x23e <CheckJoystickMovement>
     2b2:	87 e3       	ldi	r24, 0x37	; 55

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CDC_Device_ReceiveByte>
     2ba:	87 e3       	ldi	r24, 0x37	; 55

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 c1 0b 	call	0x1782	; 0x1782 <CDC_Device_USBTask>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
		MS_Device_USBTask(&Disk_MS_Interface);
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <MS_Device_USBTask>
     2ca:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <USB_USBTask>
		USB_USBTask();
     2ce:	f0 cf       	rjmp	.-32     	; 0x2b0 <main+0x14>

000002d0 <EVENT_USB_Device_Connect>:
     2d0:	80 ea       	ldi	r24, 0xA0	; 160
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2d2:	72 cf       	rjmp	.-284    	; 0x1b8 <LEDs_SetAllLEDs>

000002d4 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2d4:	80 e1       	ldi	r24, 0x10	; 16
     2d6:	70 cf       	rjmp	.-288    	; 0x1b8 <LEDs_SetAllLEDs>

000002d8 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2d8:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2da:	87 e3       	ldi	r24, 0x37	; 55
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 11 0b 	call	0x1622	; 0x1622 <CDC_Device_ConfigureEndpoints>
     2e2:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ec:	cc 23       	and	r28, r28
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     2f0:	81 11       	cpse	r24, r1
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <EVENT_USB_Device_ConfigurationChanged+0x20>
     2f4:	80 e9       	ldi	r24, 0x90	; 144
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <EVENT_USB_Device_ConfigurationChanged+0x22>
     2f8:	80 e6       	ldi	r24, 0x60	; 96
}
     2fa:	cf 91       	pop	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2fc:	5d cf       	rjmp	.-326    	; 0x1b8 <LEDs_SetAllLEDs>

000002fe <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2fe:	87 e3       	ldi	r24, 0x37	; 55
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 1d 0c 	call	0x183a	; 0x183a <CDC_Device_ProcessControlRequest>
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <MS_Device_ProcessControlRequest>

0000030e <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	50 df       	rcall	.-352    	; 0x1b8 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     318:	ce 01       	movw	r24, r28
     31a:	85 d3       	rcall	.+1802   	; 0xa26 <SCSI_DecodeSCSICommand>
     31c:	c8 2f       	mov	r28, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     31e:	80 e6       	ldi	r24, 0x60	; 96
     320:	4b df       	rcall	.-362    	; 0x1b8 <LEDs_SetAllLEDs>
     322:	8c 2f       	mov	r24, r28

	return CommandSuccess;
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <CALLBACK_USB_GetDescriptor>:
     32a:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     32c:	33 27       	eor	r19, r19
     32e:	22 30       	cpi	r18, 0x02	; 2
     330:	31 05       	cpc	r19, r1
     332:	59 f0       	breq	.+22     	; 0x34a <CALLBACK_USB_GetDescriptor+0x20>
     334:	23 30       	cpi	r18, 0x03	; 3
     336:	31 05       	cpc	r19, r1
     338:	69 f0       	breq	.+26     	; 0x354 <CALLBACK_USB_GetDescriptor+0x2a>
     33a:	21 30       	cpi	r18, 0x01	; 1
     33c:	31 05       	cpc	r19, r1
     33e:	e9 f4       	brne	.+58     	; 0x37a <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     340:	82 e1       	ldi	r24, 0x12	; 18
     342:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     344:	27 e6       	ldi	r18, 0x67	; 103
     346:	31 e0       	ldi	r19, 0x01	; 1
     348:	1c c0       	rjmp	.+56     	; 0x382 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     34a:	8d e5       	ldi	r24, 0x5D	; 93
     34c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     34e:	2a e0       	ldi	r18, 0x0A	; 10
     350:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     352:	17 c0       	rjmp	.+46     	; 0x382 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     354:	99 27       	eor	r25, r25
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	91 05       	cpc	r25, r1
     35a:	49 f0       	breq	.+18     	; 0x36e <CALLBACK_USB_GetDescriptor+0x44>
     35c:	28 f0       	brcs	.+10     	; 0x368 <CALLBACK_USB_GetDescriptor+0x3e>
     35e:	02 97       	sbiw	r24, 0x02	; 2
     360:	61 f4       	brne	.+24     	; 0x37a <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     362:	ec ea       	ldi	r30, 0xAC	; 172
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	05 c0       	rjmp	.+10     	; 0x372 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     368:	e6 e0       	ldi	r30, 0x06	; 6
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	02 c0       	rjmp	.+4      	; 0x372 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     36e:	ec ee       	ldi	r30, 0xEC	; 236
     370:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     372:	84 91       	lpm	r24, Z
     374:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     376:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     378:	04 c0       	rjmp	.+8      	; 0x382 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     382:	fa 01       	movw	r30, r20
     384:	31 83       	std	Z+1, r19	; 0x01
     386:	20 83       	st	Z, r18
	return Size;
}
     388:	08 95       	ret

0000038a <Dataflash_ToggleSelectedChipCS>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     38a:	8e b1       	in	r24, 0x0e	; 14
     38c:	9e b1       	in	r25, 0x0e	; 14
     38e:	93 60       	ori	r25, 0x03	; 3
     390:	9e b9       	out	0x0e, r25	; 14
     392:	9e b1       	in	r25, 0x0e	; 14
     394:	9c 7f       	andi	r25, 0xFC	; 252
     396:	83 70       	andi	r24, 0x03	; 3
     398:	89 2b       	or	r24, r25
     39a:	8e b9       	out	0x0e, r24	; 14
     39c:	08 95       	ret

0000039e <Dataflash_WaitWhileBusy>:
     39e:	f5 df       	rcall	.-22     	; 0x38a <Dataflash_ToggleSelectedChipCS>
     3a0:	87 ed       	ldi	r24, 0xD7	; 215
     3a2:	8e bd       	out	0x2e, r24	; 46
     3a4:	0d b4       	in	r0, 0x2d	; 45
     3a6:	07 fe       	sbrs	r0, 7
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <Dataflash_WaitWhileBusy+0x6>
     3aa:	1e bc       	out	0x2e, r1	; 46
     3ac:	0d b4       	in	r0, 0x2d	; 45
     3ae:	07 fe       	sbrs	r0, 7
     3b0:	fd cf       	rjmp	.-6      	; 0x3ac <Dataflash_WaitWhileBusy+0xe>
     3b2:	0e b4       	in	r0, 0x2e	; 46
     3b4:	07 fe       	sbrs	r0, 7
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <Dataflash_WaitWhileBusy+0xc>
     3b8:	e8 cf       	rjmp	.-48     	; 0x38a <Dataflash_ToggleSelectedChipCS>

000003ba <Dataflash_SendAddressBytes>:
     3ba:	9c 01       	movw	r18, r24
     3bc:	36 95       	lsr	r19
     3be:	27 95       	ror	r18
     3c0:	56 e0       	ldi	r21, 0x06	; 6
     3c2:	96 95       	lsr	r25
     3c4:	87 95       	ror	r24
     3c6:	5a 95       	dec	r21
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <Dataflash_SendAddressBytes+0x8>
     3ca:	8e bd       	out	0x2e, r24	; 46
     3cc:	0d b4       	in	r0, 0x2d	; 45
     3ce:	07 fe       	sbrs	r0, 7
     3d0:	fd cf       	rjmp	.-6      	; 0x3cc <Dataflash_SendAddressBytes+0x12>
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	22 0f       	add	r18, r18
     3d8:	72 2b       	or	r23, r18
     3da:	7e bd       	out	0x2e, r23	; 46
     3dc:	0d b4       	in	r0, 0x2d	; 45
     3de:	07 fe       	sbrs	r0, 7
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <Dataflash_SendAddressBytes+0x22>
     3e2:	6e bd       	out	0x2e, r22	; 46
     3e4:	0d b4       	in	r0, 0x2d	; 45
     3e6:	07 fe       	sbrs	r0, 7
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <Dataflash_SendAddressBytes+0x2a>
     3ea:	08 95       	ret

000003ec <Dataflash_SelectChipFromPage>:
     3ec:	9c 01       	movw	r18, r24
     3ee:	9e b1       	in	r25, 0x0e	; 14
     3f0:	93 60       	ori	r25, 0x03	; 3
     3f2:	9e b9       	out	0x0e, r25	; 14
     3f4:	21 15       	cp	r18, r1
     3f6:	80 e4       	ldi	r24, 0x40	; 64
     3f8:	38 07       	cpc	r19, r24
     3fa:	40 f4       	brcc	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	8e b1       	in	r24, 0x0e	; 14
     3fe:	8c 7f       	andi	r24, 0xFC	; 252
     400:	20 ff       	sbrs	r18, 0
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	81 60       	ori	r24, 0x01	; 1
     406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	82 60       	ori	r24, 0x02	; 2
     40a:	8e b9       	out	0x0e, r24	; 14
     40c:	08 95       	ret

0000040e <DataflashManager_WriteBlocks>:
     40e:	4f 92       	push	r4
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	4c 01       	movw	r8, r24
     430:	89 01       	movw	r16, r18
     432:	2a 01       	movw	r4, r20
     434:	3b 01       	movw	r6, r22
     436:	39 e0       	ldi	r19, 0x09	; 9
     438:	44 0c       	add	r4, r4
     43a:	55 1c       	adc	r5, r5
     43c:	66 1c       	adc	r6, r6
     43e:	77 1c       	adc	r7, r7
     440:	3a 95       	dec	r19
     442:	d1 f7       	brne	.-12     	; 0x438 <DataflashManager_WriteBlocks+0x2a>
     444:	6a e0       	ldi	r22, 0x0A	; 10
     446:	76 94       	lsr	r7
     448:	67 94       	ror	r6
     44a:	57 94       	ror	r5
     44c:	47 94       	ror	r4
     44e:	6a 95       	dec	r22
     450:	d1 f7       	brne	.-12     	; 0x446 <DataflashManager_WriteBlocks+0x38>
     452:	e2 01       	movw	r28, r4
     454:	54 2f       	mov	r21, r20
     456:	44 27       	eor	r20, r20
     458:	55 0f       	add	r21, r21
     45a:	7a 01       	movw	r14, r20
     45c:	ee 24       	eor	r14, r14
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	f8 22       	and	r15, r24
     462:	c2 01       	movw	r24, r4
     464:	c3 df       	rcall	.-122    	; 0x3ec <Dataflash_SelectChipFromPage>
     466:	83 e5       	ldi	r24, 0x53	; 83
     468:	8e bd       	out	0x2e, r24	; 46
     46a:	0d b4       	in	r0, 0x2d	; 45
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <DataflashManager_WriteBlocks+0x5c>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	c2 01       	movw	r24, r4
     476:	a1 df       	rcall	.-190    	; 0x3ba <Dataflash_SendAddressBytes>
     478:	92 df       	rcall	.-220    	; 0x39e <Dataflash_WaitWhileBusy>
     47a:	84 e8       	ldi	r24, 0x84	; 132
     47c:	8e bd       	out	0x2e, r24	; 46
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <DataflashManager_WriteBlocks+0x70>
     484:	b7 01       	movw	r22, r14
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	97 df       	rcall	.-210    	; 0x3ba <Dataflash_SendAddressBytes>
     48c:	3b d4       	rcall	.+2166   	; 0xd04 <Endpoint_WaitUntilReady>
     48e:	81 11       	cpse	r24, r1
     490:	ea c0       	rjmp	.+468    	; 0x666 <DataflashManager_WriteBlocks+0x258>
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	f6 94       	lsr	r15
     496:	e7 94       	ror	r14
     498:	9a 95       	dec	r25
     49a:	e1 f7       	brne	.-8      	; 0x494 <DataflashManager_WriteBlocks+0x86>
     49c:	7e 2c       	mov	r7, r14
     49e:	58 01       	movw	r10, r16
     4a0:	25 e0       	ldi	r18, 0x05	; 5
     4a2:	aa 0c       	add	r10, r10
     4a4:	bb 1c       	adc	r11, r11
     4a6:	2a 95       	dec	r18
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <DataflashManager_WriteBlocks+0x94>
     4aa:	e1 2c       	mov	r14, r1
     4ac:	f1 2c       	mov	r15, r1
     4ae:	61 2c       	mov	r6, r1
     4b0:	01 15       	cp	r16, r1
     4b2:	11 05       	cpc	r17, r1
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <DataflashManager_WriteBlocks+0xaa>
     4b6:	bc c0       	rjmp	.+376    	; 0x630 <DataflashManager_WriteBlocks+0x222>
     4b8:	65 01       	movw	r12, r10
     4ba:	ce 0c       	add	r12, r14
     4bc:	df 1c       	adc	r13, r15
     4be:	80 e2       	ldi	r24, 0x20	; 32
     4c0:	58 2e       	mov	r5, r24
     4c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4c6:	85 ff       	sbrs	r24, 5
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <DataflashManager_WriteBlocks+0xc4>
     4ca:	e0 e4       	ldi	r30, 0x40	; 64
     4cc:	7e 12       	cpse	r7, r30
     4ce:	42 c0       	rjmp	.+132    	; 0x554 <DataflashManager_WriteBlocks+0x146>
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <DataflashManager_WriteBlocks+0xd6>
     4d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4d6:	8b 77       	andi	r24, 0x7B	; 123
     4d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4dc:	13 d4       	rcall	.+2086   	; 0xd04 <Endpoint_WaitUntilReady>
     4de:	88 23       	and	r24, r24
     4e0:	a1 f3       	breq	.-24     	; 0x4ca <DataflashManager_WriteBlocks+0xbc>
     4e2:	c1 c0       	rjmp	.+386    	; 0x666 <DataflashManager_WriteBlocks+0x258>
     4e4:	5c df       	rcall	.-328    	; 0x39e <Dataflash_WaitWhileBusy>
     4e6:	61 10       	cpse	r6, r1
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DataflashManager_WriteBlocks+0xe0>
     4ea:	83 e8       	ldi	r24, 0x83	; 131
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <DataflashManager_WriteBlocks+0xe2>
     4ee:	86 e8       	ldi	r24, 0x86	; 134
     4f0:	8e bd       	out	0x2e, r24	; 46
     4f2:	0d b4       	in	r0, 0x2d	; 45
     4f4:	07 fe       	sbrs	r0, 7
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <DataflashManager_WriteBlocks+0xe4>
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	ce 01       	movw	r24, r28
     4fe:	5d df       	rcall	.-326    	; 0x3ba <Dataflash_SendAddressBytes>
     500:	21 96       	adiw	r28, 0x01	; 1
     502:	8e b1       	in	r24, 0x0e	; 14
     504:	83 70       	andi	r24, 0x03	; 3
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	09 f4       	brne	.+2      	; 0x50c <DataflashManager_WriteBlocks+0xfe>
     50a:	68 26       	eor	r6, r24
     50c:	ce 01       	movw	r24, r28
     50e:	6e df       	rcall	.-292    	; 0x3ec <Dataflash_SelectChipFromPage>
     510:	f0 e4       	ldi	r31, 0x40	; 64
     512:	cf 16       	cp	r12, r31
     514:	d1 04       	cpc	r13, r1
     516:	78 f4       	brcc	.+30     	; 0x536 <DataflashManager_WriteBlocks+0x128>
     518:	42 df       	rcall	.-380    	; 0x39e <Dataflash_WaitWhileBusy>
     51a:	61 10       	cpse	r6, r1
     51c:	02 c0       	rjmp	.+4      	; 0x522 <DataflashManager_WriteBlocks+0x114>
     51e:	83 e5       	ldi	r24, 0x53	; 83
     520:	01 c0       	rjmp	.+2      	; 0x524 <DataflashManager_WriteBlocks+0x116>
     522:	85 e5       	ldi	r24, 0x55	; 85
     524:	8e bd       	out	0x2e, r24	; 46
     526:	0d b4       	in	r0, 0x2d	; 45
     528:	07 fe       	sbrs	r0, 7
     52a:	fd cf       	rjmp	.-6      	; 0x526 <DataflashManager_WriteBlocks+0x118>
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	ce 01       	movw	r24, r28
     532:	43 df       	rcall	.-378    	; 0x3ba <Dataflash_SendAddressBytes>
     534:	34 df       	rcall	.-408    	; 0x39e <Dataflash_WaitWhileBusy>
     536:	61 10       	cpse	r6, r1
     538:	02 c0       	rjmp	.+4      	; 0x53e <DataflashManager_WriteBlocks+0x130>
     53a:	84 e8       	ldi	r24, 0x84	; 132
     53c:	01 c0       	rjmp	.+2      	; 0x540 <DataflashManager_WriteBlocks+0x132>
     53e:	87 e8       	ldi	r24, 0x87	; 135
     540:	8e bd       	out	0x2e, r24	; 46
     542:	0d b4       	in	r0, 0x2d	; 45
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <DataflashManager_WriteBlocks+0x134>
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	34 df       	rcall	.-408    	; 0x3ba <Dataflash_SendAddressBytes>
     552:	71 2c       	mov	r7, r1
     554:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     558:	8e bd       	out	0x2e, r24	; 46
     55a:	0d b4       	in	r0, 0x2d	; 45
     55c:	07 fe       	sbrs	r0, 7
     55e:	fd cf       	rjmp	.-6      	; 0x55a <DataflashManager_WriteBlocks+0x14c>
     560:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     564:	8e bd       	out	0x2e, r24	; 46
     566:	0d b4       	in	r0, 0x2d	; 45
     568:	07 fe       	sbrs	r0, 7
     56a:	fd cf       	rjmp	.-6      	; 0x566 <DataflashManager_WriteBlocks+0x158>
     56c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     570:	8e bd       	out	0x2e, r24	; 46
     572:	0d b4       	in	r0, 0x2d	; 45
     574:	07 fe       	sbrs	r0, 7
     576:	fd cf       	rjmp	.-6      	; 0x572 <DataflashManager_WriteBlocks+0x164>
     578:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     57c:	8e bd       	out	0x2e, r24	; 46
     57e:	0d b4       	in	r0, 0x2d	; 45
     580:	07 fe       	sbrs	r0, 7
     582:	fd cf       	rjmp	.-6      	; 0x57e <DataflashManager_WriteBlocks+0x170>
     584:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     588:	8e bd       	out	0x2e, r24	; 46
     58a:	0d b4       	in	r0, 0x2d	; 45
     58c:	07 fe       	sbrs	r0, 7
     58e:	fd cf       	rjmp	.-6      	; 0x58a <DataflashManager_WriteBlocks+0x17c>
     590:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     594:	8e bd       	out	0x2e, r24	; 46
     596:	0d b4       	in	r0, 0x2d	; 45
     598:	07 fe       	sbrs	r0, 7
     59a:	fd cf       	rjmp	.-6      	; 0x596 <DataflashManager_WriteBlocks+0x188>
     59c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5a0:	8e bd       	out	0x2e, r24	; 46
     5a2:	0d b4       	in	r0, 0x2d	; 45
     5a4:	07 fe       	sbrs	r0, 7
     5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <DataflashManager_WriteBlocks+0x194>
     5a8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5ac:	8e bd       	out	0x2e, r24	; 46
     5ae:	0d b4       	in	r0, 0x2d	; 45
     5b0:	07 fe       	sbrs	r0, 7
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <DataflashManager_WriteBlocks+0x1a0>
     5b4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5b8:	8e bd       	out	0x2e, r24	; 46
     5ba:	0d b4       	in	r0, 0x2d	; 45
     5bc:	07 fe       	sbrs	r0, 7
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <DataflashManager_WriteBlocks+0x1ac>
     5c0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5c4:	8e bd       	out	0x2e, r24	; 46
     5c6:	0d b4       	in	r0, 0x2d	; 45
     5c8:	07 fe       	sbrs	r0, 7
     5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <DataflashManager_WriteBlocks+0x1b8>
     5cc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5d0:	8e bd       	out	0x2e, r24	; 46
     5d2:	0d b4       	in	r0, 0x2d	; 45
     5d4:	07 fe       	sbrs	r0, 7
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <DataflashManager_WriteBlocks+0x1c4>
     5d8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5dc:	8e bd       	out	0x2e, r24	; 46
     5de:	0d b4       	in	r0, 0x2d	; 45
     5e0:	07 fe       	sbrs	r0, 7
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <DataflashManager_WriteBlocks+0x1d0>
     5e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5e8:	8e bd       	out	0x2e, r24	; 46
     5ea:	0d b4       	in	r0, 0x2d	; 45
     5ec:	07 fe       	sbrs	r0, 7
     5ee:	fd cf       	rjmp	.-6      	; 0x5ea <DataflashManager_WriteBlocks+0x1dc>
     5f0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5f4:	8e bd       	out	0x2e, r24	; 46
     5f6:	0d b4       	in	r0, 0x2d	; 45
     5f8:	07 fe       	sbrs	r0, 7
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <DataflashManager_WriteBlocks+0x1e8>
     5fc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     600:	8e bd       	out	0x2e, r24	; 46
     602:	0d b4       	in	r0, 0x2d	; 45
     604:	07 fe       	sbrs	r0, 7
     606:	fd cf       	rjmp	.-6      	; 0x602 <DataflashManager_WriteBlocks+0x1f4>
     608:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     60c:	8e bd       	out	0x2e, r24	; 46
     60e:	0d b4       	in	r0, 0x2d	; 45
     610:	07 fe       	sbrs	r0, 7
     612:	fd cf       	rjmp	.-6      	; 0x60e <DataflashManager_WriteBlocks+0x200>
     614:	73 94       	inc	r7
     616:	f4 01       	movw	r30, r8
     618:	86 a9       	ldd	r24, Z+54	; 0x36
     61a:	81 11       	cpse	r24, r1
     61c:	24 c0       	rjmp	.+72     	; 0x666 <DataflashManager_WriteBlocks+0x258>
     61e:	5a 94       	dec	r5
     620:	51 10       	cpse	r5, r1
     622:	4f cf       	rjmp	.-354    	; 0x4c2 <DataflashManager_WriteBlocks+0xb4>
     624:	01 50       	subi	r16, 0x01	; 1
     626:	11 09       	sbc	r17, r1
     628:	f0 e2       	ldi	r31, 0x20	; 32
     62a:	ef 1a       	sub	r14, r31
     62c:	f1 08       	sbc	r15, r1
     62e:	40 cf       	rjmp	.-384    	; 0x4b0 <DataflashManager_WriteBlocks+0xa2>
     630:	b6 de       	rcall	.-660    	; 0x39e <Dataflash_WaitWhileBusy>
     632:	61 10       	cpse	r6, r1
     634:	02 c0       	rjmp	.+4      	; 0x63a <DataflashManager_WriteBlocks+0x22c>
     636:	83 e8       	ldi	r24, 0x83	; 131
     638:	01 c0       	rjmp	.+2      	; 0x63c <DataflashManager_WriteBlocks+0x22e>
     63a:	86 e8       	ldi	r24, 0x86	; 134
     63c:	8e bd       	out	0x2e, r24	; 46
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <DataflashManager_WriteBlocks+0x230>
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	ce 01       	movw	r24, r28
     64a:	b7 de       	rcall	.-658    	; 0x3ba <Dataflash_SendAddressBytes>
     64c:	a8 de       	rcall	.-688    	; 0x39e <Dataflash_WaitWhileBusy>
     64e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     652:	85 fd       	sbrc	r24, 5
     654:	05 c0       	rjmp	.+10     	; 0x660 <DataflashManager_WriteBlocks+0x252>
     656:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     65a:	8b 77       	andi	r24, 0x7B	; 123
     65c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     660:	8e b1       	in	r24, 0x0e	; 14
     662:	83 60       	ori	r24, 0x03	; 3
     664:	8e b9       	out	0x0e, r24	; 14
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	7f 90       	pop	r7
     680:	6f 90       	pop	r6
     682:	5f 90       	pop	r5
     684:	4f 90       	pop	r4
     686:	08 95       	ret

00000688 <DataflashManager_ReadBlocks>:
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	6c 01       	movw	r12, r24
     6a2:	79 01       	movw	r14, r18
     6a4:	4a 01       	movw	r8, r20
     6a6:	5b 01       	movw	r10, r22
     6a8:	29 e0       	ldi	r18, 0x09	; 9
     6aa:	88 0c       	add	r8, r8
     6ac:	99 1c       	adc	r9, r9
     6ae:	aa 1c       	adc	r10, r10
     6b0:	bb 1c       	adc	r11, r11
     6b2:	2a 95       	dec	r18
     6b4:	d1 f7       	brne	.-12     	; 0x6aa <DataflashManager_ReadBlocks+0x22>
     6b6:	3a e0       	ldi	r19, 0x0A	; 10
     6b8:	b6 94       	lsr	r11
     6ba:	a7 94       	ror	r10
     6bc:	97 94       	ror	r9
     6be:	87 94       	ror	r8
     6c0:	3a 95       	dec	r19
     6c2:	d1 f7       	brne	.-12     	; 0x6b8 <DataflashManager_ReadBlocks+0x30>
     6c4:	84 01       	movw	r16, r8
     6c6:	ea 01       	movw	r28, r20
     6c8:	dc 2f       	mov	r29, r28
     6ca:	cc 27       	eor	r28, r28
     6cc:	dd 0f       	add	r29, r29
     6ce:	cc 27       	eor	r28, r28
     6d0:	d2 70       	andi	r29, 0x02	; 2
     6d2:	c4 01       	movw	r24, r8
     6d4:	8b de       	rcall	.-746    	; 0x3ec <Dataflash_SelectChipFromPage>
     6d6:	82 ed       	ldi	r24, 0xD2	; 210
     6d8:	8e bd       	out	0x2e, r24	; 46
     6da:	0d b4       	in	r0, 0x2d	; 45
     6dc:	07 fe       	sbrs	r0, 7
     6de:	fd cf       	rjmp	.-6      	; 0x6da <DataflashManager_ReadBlocks+0x52>
     6e0:	be 01       	movw	r22, r28
     6e2:	c4 01       	movw	r24, r8
     6e4:	6a de       	rcall	.-812    	; 0x3ba <Dataflash_SendAddressBytes>
     6e6:	1e bc       	out	0x2e, r1	; 46
     6e8:	0d b4       	in	r0, 0x2d	; 45
     6ea:	07 fe       	sbrs	r0, 7
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <DataflashManager_ReadBlocks+0x60>
     6ee:	1e bc       	out	0x2e, r1	; 46
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <DataflashManager_ReadBlocks+0x68>
     6f6:	1e bc       	out	0x2e, r1	; 46
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <DataflashManager_ReadBlocks+0x70>
     6fe:	1e bc       	out	0x2e, r1	; 46
     700:	0d b4       	in	r0, 0x2d	; 45
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <DataflashManager_ReadBlocks+0x78>
     706:	fe d2       	rcall	.+1532   	; 0xd04 <Endpoint_WaitUntilReady>
     708:	81 11       	cpse	r24, r1
     70a:	c1 c0       	rjmp	.+386    	; 0x88e <DataflashManager_ReadBlocks+0x206>
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	d6 95       	lsr	r29
     710:	c7 95       	ror	r28
     712:	8a 95       	dec	r24
     714:	e1 f7       	brne	.-8      	; 0x70e <DataflashManager_ReadBlocks+0x86>
     716:	92 ed       	ldi	r25, 0xD2	; 210
     718:	b9 2e       	mov	r11, r25
     71a:	e1 14       	cp	r14, r1
     71c:	f1 04       	cpc	r15, r1
     71e:	09 f4       	brne	.+2      	; 0x722 <DataflashManager_ReadBlocks+0x9a>
     720:	aa c0       	rjmp	.+340    	; 0x876 <DataflashManager_ReadBlocks+0x1ee>
     722:	d0 e2       	ldi	r29, 0x20	; 32
     724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     728:	85 ff       	sbrs	r24, 5
     72a:	08 c0       	rjmp	.+16     	; 0x73c <DataflashManager_ReadBlocks+0xb4>
     72c:	c0 34       	cpi	r28, 0x40	; 64
     72e:	39 f5       	brne	.+78     	; 0x77e <DataflashManager_ReadBlocks+0xf6>
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	c8 01       	movw	r24, r16
     736:	5a de       	rcall	.-844    	; 0x3ec <Dataflash_SelectChipFromPage>
     738:	be bc       	out	0x2e, r11	; 46
     73a:	09 c0       	rjmp	.+18     	; 0x74e <DataflashManager_ReadBlocks+0xc6>
     73c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     740:	8e 77       	andi	r24, 0x7E	; 126
     742:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     746:	de d2       	rcall	.+1468   	; 0xd04 <Endpoint_WaitUntilReady>
     748:	88 23       	and	r24, r24
     74a:	81 f3       	breq	.-32     	; 0x72c <DataflashManager_ReadBlocks+0xa4>
     74c:	a0 c0       	rjmp	.+320    	; 0x88e <DataflashManager_ReadBlocks+0x206>
     74e:	0d b4       	in	r0, 0x2d	; 45
     750:	07 fe       	sbrs	r0, 7
     752:	fd cf       	rjmp	.-6      	; 0x74e <DataflashManager_ReadBlocks+0xc6>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	c8 01       	movw	r24, r16
     75a:	2f de       	rcall	.-930    	; 0x3ba <Dataflash_SendAddressBytes>
     75c:	1e bc       	out	0x2e, r1	; 46
     75e:	0d b4       	in	r0, 0x2d	; 45
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <DataflashManager_ReadBlocks+0xd6>
     764:	1e bc       	out	0x2e, r1	; 46
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_ReadBlocks+0xde>
     76c:	1e bc       	out	0x2e, r1	; 46
     76e:	0d b4       	in	r0, 0x2d	; 45
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <DataflashManager_ReadBlocks+0xe6>
     774:	1e bc       	out	0x2e, r1	; 46
     776:	0d b4       	in	r0, 0x2d	; 45
     778:	07 fe       	sbrs	r0, 7
     77a:	fd cf       	rjmp	.-6      	; 0x776 <DataflashManager_ReadBlocks+0xee>
     77c:	c0 e0       	ldi	r28, 0x00	; 0
     77e:	1e bc       	out	0x2e, r1	; 46
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <DataflashManager_ReadBlocks+0xf8>
     786:	8e b5       	in	r24, 0x2e	; 46
     788:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     78c:	1e bc       	out	0x2e, r1	; 46
     78e:	0d b4       	in	r0, 0x2d	; 45
     790:	07 fe       	sbrs	r0, 7
     792:	fd cf       	rjmp	.-6      	; 0x78e <DataflashManager_ReadBlocks+0x106>
     794:	8e b5       	in	r24, 0x2e	; 46
     796:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     79a:	1e bc       	out	0x2e, r1	; 46
     79c:	0d b4       	in	r0, 0x2d	; 45
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <DataflashManager_ReadBlocks+0x114>
     7a2:	8e b5       	in	r24, 0x2e	; 46
     7a4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7a8:	1e bc       	out	0x2e, r1	; 46
     7aa:	0d b4       	in	r0, 0x2d	; 45
     7ac:	07 fe       	sbrs	r0, 7
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <DataflashManager_ReadBlocks+0x122>
     7b0:	8e b5       	in	r24, 0x2e	; 46
     7b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7b6:	1e bc       	out	0x2e, r1	; 46
     7b8:	0d b4       	in	r0, 0x2d	; 45
     7ba:	07 fe       	sbrs	r0, 7
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <DataflashManager_ReadBlocks+0x130>
     7be:	8e b5       	in	r24, 0x2e	; 46
     7c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7c4:	1e bc       	out	0x2e, r1	; 46
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <DataflashManager_ReadBlocks+0x13e>
     7cc:	8e b5       	in	r24, 0x2e	; 46
     7ce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7d2:	1e bc       	out	0x2e, r1	; 46
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <DataflashManager_ReadBlocks+0x14c>
     7da:	8e b5       	in	r24, 0x2e	; 46
     7dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7e0:	1e bc       	out	0x2e, r1	; 46
     7e2:	0d b4       	in	r0, 0x2d	; 45
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_ReadBlocks+0x15a>
     7e8:	8e b5       	in	r24, 0x2e	; 46
     7ea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7ee:	1e bc       	out	0x2e, r1	; 46
     7f0:	0d b4       	in	r0, 0x2d	; 45
     7f2:	07 fe       	sbrs	r0, 7
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <DataflashManager_ReadBlocks+0x168>
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7fc:	1e bc       	out	0x2e, r1	; 46
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <DataflashManager_ReadBlocks+0x176>
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     80a:	1e bc       	out	0x2e, r1	; 46
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <DataflashManager_ReadBlocks+0x184>
     812:	8e b5       	in	r24, 0x2e	; 46
     814:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     818:	1e bc       	out	0x2e, r1	; 46
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	fd cf       	rjmp	.-6      	; 0x81a <DataflashManager_ReadBlocks+0x192>
     820:	8e b5       	in	r24, 0x2e	; 46
     822:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     826:	1e bc       	out	0x2e, r1	; 46
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <DataflashManager_ReadBlocks+0x1a0>
     82e:	8e b5       	in	r24, 0x2e	; 46
     830:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     834:	1e bc       	out	0x2e, r1	; 46
     836:	0d b4       	in	r0, 0x2d	; 45
     838:	07 fe       	sbrs	r0, 7
     83a:	fd cf       	rjmp	.-6      	; 0x836 <DataflashManager_ReadBlocks+0x1ae>
     83c:	8e b5       	in	r24, 0x2e	; 46
     83e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     842:	1e bc       	out	0x2e, r1	; 46
     844:	0d b4       	in	r0, 0x2d	; 45
     846:	07 fe       	sbrs	r0, 7
     848:	fd cf       	rjmp	.-6      	; 0x844 <DataflashManager_ReadBlocks+0x1bc>
     84a:	8e b5       	in	r24, 0x2e	; 46
     84c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     850:	1e bc       	out	0x2e, r1	; 46
     852:	0d b4       	in	r0, 0x2d	; 45
     854:	07 fe       	sbrs	r0, 7
     856:	fd cf       	rjmp	.-6      	; 0x852 <DataflashManager_ReadBlocks+0x1ca>
     858:	8e b5       	in	r24, 0x2e	; 46
     85a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     85e:	cf 5f       	subi	r28, 0xFF	; 255
     860:	f6 01       	movw	r30, r12
     862:	86 a9       	ldd	r24, Z+54	; 0x36
     864:	81 11       	cpse	r24, r1
     866:	13 c0       	rjmp	.+38     	; 0x88e <DataflashManager_ReadBlocks+0x206>
     868:	d1 50       	subi	r29, 0x01	; 1
     86a:	09 f0       	breq	.+2      	; 0x86e <DataflashManager_ReadBlocks+0x1e6>
     86c:	5b cf       	rjmp	.-330    	; 0x724 <DataflashManager_ReadBlocks+0x9c>
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	ef 1a       	sub	r14, r31
     872:	f1 08       	sbc	r15, r1
     874:	52 cf       	rjmp	.-348    	; 0x71a <DataflashManager_ReadBlocks+0x92>
     876:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87a:	85 fd       	sbrc	r24, 5
     87c:	05 c0       	rjmp	.+10     	; 0x888 <DataflashManager_ReadBlocks+0x200>
     87e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     882:	8e 77       	andi	r24, 0x7E	; 126
     884:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     888:	8e b1       	in	r24, 0x0e	; 14
     88a:	83 60       	ori	r24, 0x03	; 3
     88c:	8e b9       	out	0x0e, r24	; 14
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	08 95       	ret

000008a8 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     8a8:	8e b1       	in	r24, 0x0e	; 14
     8aa:	8c 7f       	andi	r24, 0xFC	; 252
     8ac:	82 60       	ori	r24, 0x02	; 2
     8ae:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b0:	87 ed       	ldi	r24, 0xD7	; 215
     8b2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8b4:	0d b4       	in	r0, 0x2d	; 45
     8b6:	07 fe       	sbrs	r0, 7
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8ba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8bc:	0d b4       	in	r0, 0x2d	; 45
     8be:	07 fe       	sbrs	r0, 7
     8c0:	fd cf       	rjmp	.-6      	; 0x8bc <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     8c2:	0e b4       	in	r0, 0x2e	; 46
     8c4:	01 fc       	sbrc	r0, 1
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <DataflashManager_ResetDataflashProtections+0x2e>
     8c8:	8e b1       	in	r24, 0x0e	; 14
     8ca:	8c 7f       	andi	r24, 0xFC	; 252
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d0:	87 ed       	ldi	r24, 0xD7	; 215
     8d2:	8e bd       	out	0x2e, r24	; 46
     8d4:	16 c0       	rjmp	.+44     	; 0x902 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     8d6:	59 dd       	rcall	.-1358   	; 0x38a <Dataflash_ToggleSelectedChipCS>
     8d8:	8d e3       	ldi	r24, 0x3D	; 61
     8da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <DataflashManager_ResetDataflashProtections+0x34>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e2:	8a e2       	ldi	r24, 0x2A	; 42
     8e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <DataflashManager_ResetDataflashProtections+0x3e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ec:	8f e7       	ldi	r24, 0x7F	; 127
     8ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f0:	0d b4       	in	r0, 0x2d	; 45
     8f2:	07 fe       	sbrs	r0, 7
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <DataflashManager_ResetDataflashProtections+0x48>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f6:	8a e9       	ldi	r24, 0x9A	; 154
     8f8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8fa:	0d b4       	in	r0, 0x2d	; 45
     8fc:	07 fe       	sbrs	r0, 7
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <DataflashManager_ResetDataflashProtections+0x52>
     900:	e3 cf       	rjmp	.-58     	; 0x8c8 <DataflashManager_ResetDataflashProtections+0x20>
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_ResetDataflashProtections+0x5a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     908:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <DataflashManager_ResetDataflashProtections+0x62>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     910:	0e b4       	in	r0, 0x2e	; 46
     912:	01 fc       	sbrc	r0, 1
     914:	04 c0       	rjmp	.+8      	; 0x91e <DataflashManager_ResetDataflashProtections+0x76>
     916:	8e b1       	in	r24, 0x0e	; 14
     918:	83 60       	ori	r24, 0x03	; 3
     91a:	8e b9       	out	0x0e, r24	; 14
	{
		Dataflash_ToggleSelectedChipCS();
     91c:	08 95       	ret
     91e:	35 dd       	rcall	.-1430   	; 0x38a <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     920:	8d e3       	ldi	r24, 0x3D	; 61
     922:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     924:	0d b4       	in	r0, 0x2d	; 45
     926:	07 fe       	sbrs	r0, 7
     928:	fd cf       	rjmp	.-6      	; 0x924 <DataflashManager_ResetDataflashProtections+0x7c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     92a:	8a e2       	ldi	r24, 0x2A	; 42
     92c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     92e:	0d b4       	in	r0, 0x2d	; 45
     930:	07 fe       	sbrs	r0, 7
     932:	fd cf       	rjmp	.-6      	; 0x92e <DataflashManager_ResetDataflashProtections+0x86>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     934:	8f e7       	ldi	r24, 0x7F	; 127
     936:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     938:	0d b4       	in	r0, 0x2d	; 45
     93a:	07 fe       	sbrs	r0, 7
     93c:	fd cf       	rjmp	.-6      	; 0x938 <DataflashManager_ResetDataflashProtections+0x90>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93e:	8a e9       	ldi	r24, 0x9A	; 154
     940:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
     946:	fd cf       	rjmp	.-6      	; 0x942 <DataflashManager_ResetDataflashProtections+0x9a>
     948:	e6 cf       	rjmp	.-52     	; 0x916 <DataflashManager_ResetDataflashProtections+0x6e>

0000094a <DataflashManager_CheckDataflashOperation>:
     94a:	8e b1       	in	r24, 0x0e	; 14
     94c:	8c 7f       	andi	r24, 0xFC	; 252
     94e:	82 60       	ori	r24, 0x02	; 2
     950:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     952:	8f e9       	ldi	r24, 0x9F	; 159
     954:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     95c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     95e:	0d b4       	in	r0, 0x2d	; 45
     960:	07 fe       	sbrs	r0, 7
     962:	fd cf       	rjmp	.-6      	; 0x95e <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     964:	9e b5       	in	r25, 0x2e	; 46
     966:	8e b1       	in	r24, 0x0e	; 14
     968:	83 60       	ori	r24, 0x03	; 3
     96a:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     96c:	9f 31       	cpi	r25, 0x1F	; 31
     96e:	a1 f4       	brne	.+40     	; 0x998 <DataflashManager_CheckDataflashOperation+0x4e>
     970:	8e b1       	in	r24, 0x0e	; 14
     972:	8c 7f       	andi	r24, 0xFC	; 252
     974:	81 60       	ori	r24, 0x01	; 1
     976:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     978:	8f e9       	ldi	r24, 0x9F	; 159
     97a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     97c:	0d b4       	in	r0, 0x2d	; 45
     97e:	07 fe       	sbrs	r0, 7
     980:	fd cf       	rjmp	.-6      	; 0x97c <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     982:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     984:	0d b4       	in	r0, 0x2d	; 45
     986:	07 fe       	sbrs	r0, 7
     988:	fd cf       	rjmp	.-6      	; 0x984 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     98a:	9e b5       	in	r25, 0x2e	; 46
     98c:	8e b1       	in	r24, 0x0e	; 14
     98e:	83 60       	ori	r24, 0x03	; 3
     990:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	9f 31       	cpi	r25, 0x1F	; 31
     996:	09 f0       	breq	.+2      	; 0x99a <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     998:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     99a:	08 95       	ret

0000099c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9a8:	4e 8d       	ldd	r20, Y+30	; 0x1e
     9aa:	5d 8d       	ldd	r21, Y+29	; 0x1d
     9ac:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9ae:	7b 8d       	ldd	r23, Y+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     9b0:	09 a1       	ldd	r16, Y+33	; 0x21
     9b2:	18 a1       	ldd	r17, Y+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9b4:	41 15       	cp	r20, r1
     9b6:	20 e8       	ldi	r18, 0x80	; 128
     9b8:	52 07       	cpc	r21, r18
     9ba:	61 05       	cpc	r22, r1
     9bc:	71 05       	cpc	r23, r1
     9be:	68 f0       	brcs	.+26     	; 0x9da <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SenseData+0x2>
     9c4:	80 7f       	andi	r24, 0xF0	; 240
     9c6:	85 60       	ori	r24, 0x05	; 5
     9c8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SenseData+0x2>
     9cc:	81 e2       	ldi	r24, 0x21	; 33
     9ce:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <SenseData+0xc>
     9d2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	21 c0       	rjmp	.+66     	; 0xa1c <SCSI_Command_ReadWrite_10+0x80>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9da:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9dc:	88 23       	and	r24, r24
     9de:	19 f0       	breq	.+6      	; 0x9e6 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e0:	ce 01       	movw	r24, r28
     9e2:	52 de       	rcall	.-860    	; 0x688 <DataflashManager_ReadBlocks>
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <SCSI_Command_ReadWrite_10+0x4e>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e6:	ce 01       	movw	r24, r28
     9e8:	12 dd       	rcall	.-1500   	; 0x40e <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9ea:	c8 01       	movw	r24, r16
     9ec:	a0 e0       	ldi	r26, 0x00	; 0
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	29 e0       	ldi	r18, 0x09	; 9
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	aa 1f       	adc	r26, r26
     9f8:	bb 1f       	adc	r27, r27
     9fa:	2a 95       	dec	r18
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <SCSI_Command_ReadWrite_10+0x56>
     9fe:	4a 89       	ldd	r20, Y+18	; 0x12
     a00:	5b 89       	ldd	r21, Y+19	; 0x13
     a02:	6c 89       	ldd	r22, Y+20	; 0x14
     a04:	7d 89       	ldd	r23, Y+21	; 0x15
     a06:	8a 01       	movw	r16, r20
     a08:	9b 01       	movw	r18, r22
     a0a:	08 1b       	sub	r16, r24
     a0c:	19 0b       	sbc	r17, r25
     a0e:	2a 0b       	sbc	r18, r26
     a10:	3b 0b       	sbc	r19, r27
     a12:	0a 8b       	std	Y+18, r16	; 0x12
     a14:	1b 8b       	std	Y+19, r17	; 0x13
     a16:	2c 8b       	std	Y+20, r18	; 0x14
     a18:	3d 8b       	std	Y+21, r19	; 0x15

	return true;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	28 97       	sbiw	r28, 0x08	; 8
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a48:	fc 01       	movw	r30, r24
     a4a:	81 8d       	ldd	r24, Z+25	; 0x19
     a4c:	8d 31       	cpi	r24, 0x1D	; 29
     a4e:	09 f4       	brne	.+2      	; 0xa52 <SCSI_DecodeSCSICommand+0x2c>
     a50:	bc c0       	rjmp	.+376    	; 0xbca <SCSI_DecodeSCSICommand+0x1a4>
     a52:	20 f5       	brcc	.+72     	; 0xa9c <SCSI_DecodeSCSICommand+0x76>
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	09 f4       	brne	.+2      	; 0xa5a <SCSI_DecodeSCSICommand+0x34>
     a58:	92 c0       	rjmp	.+292    	; 0xb7e <SCSI_DecodeSCSICommand+0x158>
     a5a:	20 f4       	brcc	.+8      	; 0xa64 <SCSI_DecodeSCSICommand+0x3e>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <SCSI_DecodeSCSICommand+0x3c>
     a60:	d3 c0       	rjmp	.+422    	; 0xc08 <SCSI_DecodeSCSICommand+0x1e2>
     a62:	d8 c0       	rjmp	.+432    	; 0xc14 <SCSI_DecodeSCSICommand+0x1ee>
     a64:	82 31       	cpi	r24, 0x12	; 18
     a66:	09 f4       	brne	.+2      	; 0xa6a <SCSI_DecodeSCSICommand+0x44>
     a68:	56 c0       	rjmp	.+172    	; 0xb16 <SCSI_DecodeSCSICommand+0xf0>
     a6a:	8a 31       	cpi	r24, 0x1A	; 26
     a6c:	09 f0       	breq	.+2      	; 0xa70 <SCSI_DecodeSCSICommand+0x4a>
     a6e:	d2 c0       	rjmp	.+420    	; 0xc14 <SCSI_DecodeSCSICommand+0x1ee>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a70:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a74:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a78:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a7c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a84:	8e 77       	andi	r24, 0x7E	; 126
     a86:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     a8a:	f8 01       	movw	r30, r16
     a8c:	82 89       	ldd	r24, Z+18	; 0x12
     a8e:	93 89       	ldd	r25, Z+19	; 0x13
     a90:	a4 89       	ldd	r26, Z+20	; 0x14
     a92:	b5 89       	ldd	r27, Z+21	; 0x15
     a94:	04 97       	sbiw	r24, 0x04	; 4
     a96:	a1 09       	sbc	r26, r1
     a98:	b1 09       	sbc	r27, r1
     a9a:	b1 c0       	rjmp	.+354    	; 0xbfe <SCSI_DecodeSCSICommand+0x1d8>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a9c:	88 32       	cpi	r24, 0x28	; 40
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <SCSI_DecodeSCSICommand+0x7c>
     aa0:	a8 c0       	rjmp	.+336    	; 0xbf2 <SCSI_DecodeSCSICommand+0x1cc>
     aa2:	90 f5       	brcc	.+100    	; 0xb08 <SCSI_DecodeSCSICommand+0xe2>
     aa4:	8e 31       	cpi	r24, 0x1E	; 30
     aa6:	09 f4       	brne	.+2      	; 0xaaa <SCSI_DecodeSCSICommand+0x84>
     aa8:	af c0       	rjmp	.+350    	; 0xc08 <SCSI_DecodeSCSICommand+0x1e2>
     aaa:	85 32       	cpi	r24, 0x25	; 37
     aac:	09 f0       	breq	.+2      	; 0xab0 <SCSI_DecodeSCSICommand+0x8a>
     aae:	b2 c0       	rjmp	.+356    	; 0xc14 <SCSI_DecodeSCSICommand+0x1ee>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	9f e7       	ldi	r25, 0x7F	; 127
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	8d 83       	std	Y+5, r24	; 0x05
     aba:	9e 83       	std	Y+6, r25	; 0x06
     abc:	af 83       	std	Y+7, r26	; 0x07
     abe:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	ab 83       	std	Y+3, r26	; 0x03
     ace:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	64 e0       	ldi	r22, 0x04	; 4
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	ce 01       	movw	r24, r28
     ada:	05 96       	adiw	r24, 0x05	; 5
     adc:	f2 d2       	rcall	.+1508   	; 0x10c2 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	eb d2       	rcall	.+1494   	; 0x10c2 <Endpoint_Write_Stream_BE>
     aec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     af0:	8e 77       	andi	r24, 0x7E	; 126
     af2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     af6:	f8 01       	movw	r30, r16
     af8:	82 89       	ldd	r24, Z+18	; 0x12
     afa:	93 89       	ldd	r25, Z+19	; 0x13
     afc:	a4 89       	ldd	r26, Z+20	; 0x14
     afe:	b5 89       	ldd	r27, Z+21	; 0x15
     b00:	08 97       	sbiw	r24, 0x08	; 8
     b02:	a1 09       	sbc	r26, r1
     b04:	b1 09       	sbc	r27, r1
     b06:	7b c0       	rjmp	.+246    	; 0xbfe <SCSI_DecodeSCSICommand+0x1d8>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     b08:	8a 32       	cpi	r24, 0x2A	; 42
     b0a:	09 f4       	brne	.+2      	; 0xb0e <SCSI_DecodeSCSICommand+0xe8>
     b0c:	70 c0       	rjmp	.+224    	; 0xbee <SCSI_DecodeSCSICommand+0x1c8>
     b0e:	8f 32       	cpi	r24, 0x2F	; 47
     b10:	09 f4       	brne	.+2      	; 0xb14 <SCSI_DecodeSCSICommand+0xee>
     b12:	7a c0       	rjmp	.+244    	; 0xc08 <SCSI_DecodeSCSICommand+0x1e2>
     b14:	7f c0       	rjmp	.+254    	; 0xc14 <SCSI_DecodeSCSICommand+0x1ee>
     b16:	f8 01       	movw	r30, r16
     b18:	e5 8c       	ldd	r14, Z+29	; 0x1d
     b1a:	f4 8c       	ldd	r15, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b1e:	83 70       	andi	r24, 0x03	; 3
     b20:	19 f4       	brne	.+6      	; 0xb28 <SCSI_DecodeSCSICommand+0x102>
     b22:	83 8d       	ldd	r24, Z+27	; 0x1b
     b24:	88 23       	and	r24, r24
     b26:	41 f0       	breq	.+16     	; 0xb38 <SCSI_DecodeSCSICommand+0x112>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b28:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SenseData+0x2>
     b2c:	80 7f       	andi	r24, 0xF0	; 240
     b2e:	85 60       	ori	r24, 0x05	; 5
     b30:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SenseData+0x2>
     b34:	84 e2       	ldi	r24, 0x24	; 36
     b36:	75 c0       	rjmp	.+234    	; 0xc22 <SCSI_DecodeSCSICommand+0x1fc>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b38:	67 01       	movw	r12, r14
     b3a:	f5 e2       	ldi	r31, 0x25	; 37
     b3c:	ef 16       	cp	r14, r31
     b3e:	f1 04       	cpc	r15, r1
     b40:	18 f0       	brcs	.+6      	; 0xb48 <SCSI_DecodeSCSICommand+0x122>
     b42:	94 e2       	ldi	r25, 0x24	; 36
     b44:	c9 2e       	mov	r12, r25
     b46:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	b6 01       	movw	r22, r12
     b4e:	8f e5       	ldi	r24, 0x5F	; 95
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	6d d2       	rcall	.+1242   	; 0x102e <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	c7 01       	movw	r24, r14
     b5a:	8c 19       	sub	r24, r12
     b5c:	9d 09       	sbc	r25, r13
     b5e:	28 d2       	rcall	.+1104   	; 0xfb0 <Endpoint_Null_Stream>
     b60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b64:	8e 77       	andi	r24, 0x7E	; 126
     b66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b6a:	f8 01       	movw	r30, r16
     b6c:	82 89       	ldd	r24, Z+18	; 0x12
     b6e:	93 89       	ldd	r25, Z+19	; 0x13
     b70:	a4 89       	ldd	r26, Z+20	; 0x14
     b72:	b5 89       	ldd	r27, Z+21	; 0x15
     b74:	8c 19       	sub	r24, r12
     b76:	9d 09       	sbc	r25, r13
     b78:	a1 09       	sbc	r26, r1
     b7a:	b1 09       	sbc	r27, r1
     b7c:	40 c0       	rjmp	.+128    	; 0xbfe <SCSI_DecodeSCSICommand+0x1d8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b7e:	f8 01       	movw	r30, r16
     b80:	f5 8c       	ldd	r15, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b82:	ef 2c       	mov	r14, r15
     b84:	f2 e1       	ldi	r31, 0x12	; 18
     b86:	ff 15       	cp	r31, r15
     b88:	10 f4       	brcc	.+4      	; 0xb8e <SCSI_DecodeSCSICommand+0x168>
     b8a:	82 e1       	ldi	r24, 0x12	; 18
     b8c:	e8 2e       	mov	r14, r24

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b8e:	ce 2c       	mov	r12, r14
     b90:	d1 2c       	mov	r13, r1
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	b6 01       	movw	r22, r12
     b98:	8d e4       	ldi	r24, 0x4D	; 77
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	48 d2       	rcall	.+1168   	; 0x102e <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b9e:	8f 2d       	mov	r24, r15
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	8c 19       	sub	r24, r12
     ba8:	9d 09       	sbc	r25, r13
     baa:	02 d2       	rcall	.+1028   	; 0xfb0 <Endpoint_Null_Stream>
     bac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bb0:	8e 77       	andi	r24, 0x7E	; 126
     bb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     bb6:	f8 01       	movw	r30, r16
     bb8:	82 89       	ldd	r24, Z+18	; 0x12
     bba:	93 89       	ldd	r25, Z+19	; 0x13
     bbc:	a4 89       	ldd	r26, Z+20	; 0x14
     bbe:	b5 89       	ldd	r27, Z+21	; 0x15
     bc0:	8e 19       	sub	r24, r14
     bc2:	91 09       	sbc	r25, r1
     bc4:	a1 09       	sbc	r26, r1
     bc6:	b1 09       	sbc	r27, r1
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     bc8:	1a c0       	rjmp	.+52     	; 0xbfe <SCSI_DecodeSCSICommand+0x1d8>
     bca:	f8 01       	movw	r30, r16
     bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
     bce:	82 ff       	sbrs	r24, 2

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     bd0:	ab cf       	rjmp	.-170    	; 0xb28 <SCSI_DecodeSCSICommand+0x102>
     bd2:	bb de       	rcall	.-650    	; 0x94a <DataflashManager_CheckDataflashOperation>
     bd4:	81 11       	cpse	r24, r1
     bd6:	18 c0       	rjmp	.+48     	; 0xc08 <SCSI_DecodeSCSICommand+0x1e2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     bd8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SenseData+0x2>
     bdc:	80 7f       	andi	r24, 0xF0	; 240
     bde:	84 60       	ori	r24, 0x04	; 4
     be0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SenseData+0x2>
     be4:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <SenseData+0xc>
     be8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <SenseData+0xd>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     bec:	28 c0       	rjmp	.+80     	; 0xc3e <SCSI_DecodeSCSICommand+0x218>
     bee:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <SCSI_DecodeSCSICommand+0x1ce>
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	c8 01       	movw	r24, r16
     bf6:	d2 de       	rcall	.-604    	; 0x99c <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     bf8:	81 11       	cpse	r24, r1
     bfa:	16 c0       	rjmp	.+44     	; 0xc28 <SCSI_DecodeSCSICommand+0x202>
     bfc:	20 c0       	rjmp	.+64     	; 0xc3e <SCSI_DecodeSCSICommand+0x218>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     bfe:	82 8b       	std	Z+18, r24	; 0x12
     c00:	93 8b       	std	Z+19, r25	; 0x13
     c02:	a4 8b       	std	Z+20, r26	; 0x14
     c04:	b5 8b       	std	Z+21, r27	; 0x15
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <SCSI_DecodeSCSICommand+0x202>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c08:	f8 01       	movw	r30, r16
     c0a:	12 8a       	std	Z+18, r1	; 0x12
     c0c:	13 8a       	std	Z+19, r1	; 0x13
     c0e:	14 8a       	std	Z+20, r1	; 0x14
     c10:	15 8a       	std	Z+21, r1	; 0x15
			break;
     c12:	0a c0       	rjmp	.+20     	; 0xc28 <SCSI_DecodeSCSICommand+0x202>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c14:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SenseData+0x2>
     c18:	80 7f       	andi	r24, 0xF0	; 240
     c1a:	85 60       	ori	r24, 0x05	; 5
     c1c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SenseData+0x2>
     c20:	80 e2       	ldi	r24, 0x20	; 32
     c22:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <SenseData+0xc>
     c26:	e0 cf       	rjmp	.-64     	; 0xbe8 <SCSI_DecodeSCSICommand+0x1c2>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c28:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <SenseData+0x2>
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SenseData+0x2>
     c32:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <SenseData+0xc>
     c36:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <SCSI_DecodeSCSICommand+0x21a>
	}

	return false;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
}
     c40:	28 96       	adiw	r28, 0x08	; 8
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	08 95       	ret

00000c5e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     c5e:	98 2f       	mov	r25, r24
     c60:	97 30       	cpi	r25, 0x07	; 7
     c62:	68 f5       	brcc	.+90     	; 0xcbe <Endpoint_ConfigureEndpoint_Prv+0x60>
     c64:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c68:	98 17       	cp	r25, r24
     c6a:	39 f0       	breq	.+14     	; 0xc7a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     c6c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c70:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c74:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     c78:	03 c0       	rjmp	.+6      	; 0xc80 <Endpoint_ConfigureEndpoint_Prv+0x22>
     c7a:	24 2f       	mov	r18, r20
     c7c:	76 2f       	mov	r23, r22
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	21 fd       	sbrc	r18, 1
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     c84:	9f 5f       	subi	r25, 0xFF	; 255
     c86:	ec cf       	rjmp	.-40     	; 0xc60 <Endpoint_ConfigureEndpoint_Prv+0x2>
     c88:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     c8c:	3e 7f       	andi	r19, 0xFE	; 254
     c8e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     c92:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c96:	3d 7f       	andi	r19, 0xFD	; 253
     c98:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c9c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ca0:	31 60       	ori	r19, 0x01	; 1
     ca2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ca6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     caa:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     cae:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     cb2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     cb6:	27 fd       	sbrc	r18, 7
     cb8:	e5 cf       	rjmp	.-54     	; 0xc84 <Endpoint_ConfigureEndpoint_Prv+0x26>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret
     cbe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret

00000cc6 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     cc6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest>
     cca:	87 ff       	sbrs	r24, 7
     ccc:	11 c0       	rjmp	.+34     	; 0xcf0 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     cd2:	82 fd       	sbrc	r24, 2
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     cd6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>
     cda:	81 11       	cpse	r24, r1
     cdc:	f8 cf       	rjmp	.-16     	; 0xcce <Endpoint_ClearStatusStage+0x8>
     cde:	11 c0       	rjmp	.+34     	; 0xd02 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ce0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ce4:	8b 77       	andi	r24, 0x7B	; 123
     ce6:	0b c0       	rjmp	.+22     	; 0xcfe <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ce8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>
     cec:	88 23       	and	r24, r24
     cee:	49 f0       	breq	.+18     	; 0xd02 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     cf4:	80 ff       	sbrs	r24, 0
     cf6:	f8 cf       	rjmp	.-16     	; 0xce8 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cfc:	8e 77       	andi	r24, 0x7E	; 126
     cfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d02:	08 95       	ret

00000d04 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d04:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     d08:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     d0c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d0e:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     d12:	84 2f       	mov	r24, r20
     d14:	81 70       	andi	r24, 0x01	; 1
     d16:	40 ff       	sbrs	r20, 0
     d18:	23 c0       	rjmp	.+70     	; 0xd60 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     d1e:	80 fd       	sbrc	r24, 0
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d22:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d26:	88 23       	and	r24, r24
     d28:	99 f0       	breq	.+38     	; 0xd50 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d2a:	85 30       	cpi	r24, 0x05	; 5
     d2c:	99 f0       	breq	.+38     	; 0xd54 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d2e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d32:	85 fd       	sbrc	r24, 5
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <Endpoint_WaitUntilReady+0x54>
     d36:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     d3a:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d3e:	24 17       	cp	r18, r20
     d40:	35 07       	cpc	r19, r21
     d42:	29 f3       	breq	.-54     	; 0xd0e <Endpoint_WaitUntilReady+0xa>
     d44:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d46:	11 f0       	breq	.+4      	; 0xd4c <Endpoint_WaitUntilReady+0x48>
     d48:	9a 01       	movw	r18, r20
     d4a:	e1 cf       	rjmp	.-62     	; 0xd0e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d60:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     d64:	42 ff       	sbrs	r20, 2
     d66:	dd cf       	rjmp	.-70     	; 0xd22 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     d68:	08 95       	ret

00000d6a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d72:	49 d0       	rcall	.+146    	; 0xe06 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d74:	50 d0       	rcall	.+160    	; 0xe16 <USB_INT_ClearAllInterrupts>
     d76:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d78:	d0 e0       	ldi	r29, 0x00	; 0
     d7a:	88 81       	ld	r24, Y
     d7c:	8f 77       	andi	r24, 0x7F	; 127
     d7e:	88 83       	st	Y, r24
     d80:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	88 83       	st	Y, r24
     d86:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     d88:	8f 7d       	andi	r24, 0xDF	; 223
     d8a:	88 83       	st	Y, r24
     d8c:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	80 83       	st	Z, r24
     d96:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d98:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     d9c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     da0:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     da4:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     da8:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	f8 01       	movw	r30, r16
     dae:	80 81       	ld	r24, Z
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	80 83       	st	Z, r24
     db4:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     db6:	81 60       	ori	r24, 0x01	; 1
     db8:	88 83       	st	Y, r24
     dba:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	4e df       	rcall	.-356    	; 0xc5e <Endpoint_ConfigureEndpoint_Prv>
     dc2:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	80 83       	st	Z, r24
     dcc:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	80 83       	st	Z, r24
     dd6:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     dd8:	88 60       	ori	r24, 0x08	; 8
     dda:	80 83       	st	Z, r24
     ddc:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	80 83       	st	Z, r24
     de4:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	88 83       	st	Y, r24
     dea:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <USB_Init>:
     df4:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_IsInitialized>

	USB_ResetInterface();
     e04:	b2 cf       	rjmp	.-156    	; 0xd6a <USB_ResetInterface>

00000e06 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e06:	e8 ed       	ldi	r30, 0xD8	; 216
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8c 7f       	andi	r24, 0xFC	; 252
     e0e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e10:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e14:	08 95       	ret

00000e16 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e16:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e1a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e1e:	08 95       	ret

00000e20 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	0b b6       	in	r0, 0x3b	; 59
     e2c:	0f 92       	push	r0
     e2e:	2f 93       	push	r18
     e30:	3f 93       	push	r19
     e32:	4f 93       	push	r20
     e34:	5f 93       	push	r21
     e36:	6f 93       	push	r22
     e38:	7f 93       	push	r23
     e3a:	8f 93       	push	r24
     e3c:	9f 93       	push	r25
     e3e:	af 93       	push	r26
     e40:	bf 93       	push	r27
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     e46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     e4a:	82 ff       	sbrs	r24, 2
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     e4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e52:	82 ff       	sbrs	r24, 2
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     e56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e5a:	8b 7f       	andi	r24, 0xFB	; 251
     e5c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     e60:	cd d3       	rcall	.+1946   	; 0x15fc <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     e62:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     e66:	80 ff       	sbrs	r24, 0
     e68:	1d c0       	rjmp	.+58     	; 0xea4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     e6a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e6e:	80 ff       	sbrs	r24, 0
     e70:	19 c0       	rjmp	.+50     	; 0xea4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     e72:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e7c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     e80:	80 ff       	sbrs	r24, 0
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e84:	8c e0       	ldi	r24, 0x0C	; 12
     e86:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e88:	8e e0       	ldi	r24, 0x0E	; 14
     e8a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     e8c:	09 b4       	in	r0, 0x29	; 41
     e8e:	00 fe       	sbrs	r0, 0
     e90:	fd cf       	rjmp	.-6      	; 0xe8c <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     e98:	1b da       	rcall	.-3018   	; 0x2d0 <EVENT_USB_Device_Connect>
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e9c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     e9e:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     ea2:	18 da       	rcall	.-3024   	; 0x2d4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ea4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ea8:	80 ff       	sbrs	r24, 0
     eaa:	18 c0       	rjmp	.+48     	; 0xedc <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     eac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     eb0:	80 ff       	sbrs	r24, 0
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     eb4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ebe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     ec8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ecc:	80 62       	ori	r24, 0x20	; 32
     ece:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ed2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     eda:	90 d3       	rcall	.+1824   	; 0x15fc <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     edc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ee0:	84 ff       	sbrs	r24, 4
     ee2:	2d c0       	rjmp	.+90     	; 0xf3e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ee4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ee8:	84 ff       	sbrs	r24, 4
     eea:	29 c0       	rjmp	.+82     	; 0xf3e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     eec:	8c e0       	ldi	r24, 0x0C	; 12
     eee:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ef0:	8e e0       	ldi	r24, 0x0E	; 14
     ef2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ef4:	09 b4       	in	r0, 0x29	; 41
     ef6:	00 fe       	sbrs	r0, 0
     ef8:	fd cf       	rjmp	.-6      	; 0xef4 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     efa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     efe:	8f 7d       	andi	r24, 0xDF	; 223
     f00:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f04:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f0e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f18:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f22:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_Device_ConfigurationNumber>
     f26:	81 11       	cpse	r24, r1
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f2a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f2e:	87 fd       	sbrc	r24, 7
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <__vector_10+0x116>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <__vector_10+0x118>
     f36:	84 e0       	ldi	r24, 0x04	; 4
     f38:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f3c:	5f d3       	rcall	.+1726   	; 0x15fc <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f42:	83 ff       	sbrs	r24, 3
     f44:	22 c0       	rjmp	.+68     	; 0xf8a <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f4a:	83 ff       	sbrs	r24, 3
     f4c:	1e c0       	rjmp	.+60     	; 0xf8a <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     f5e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f62:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f66:	8e 7f       	andi	r24, 0xFE	; 254
     f68:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f6c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f76:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f7a:	80 61       	ori	r24, 0x10	; 16
     f7c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     f80:	42 e0       	ldi	r20, 0x02	; 2
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	6b de       	rcall	.-810    	; 0xc5e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     f88:	39 d3       	rcall	.+1650   	; 0x15fc <USB_Event_Stub>
     f8a:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <Endpoint_Null_Stream>:
     fb0:	ef 92       	push	r14
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
     fbe:	8b 01       	movw	r16, r22
     fc0:	a1 de       	rcall	.-702    	; 0xd04 <Endpoint_WaitUntilReady>
     fc2:	81 11       	cpse	r24, r1
     fc4:	2d c0       	rjmp	.+90     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
     fc6:	01 15       	cp	r16, r1
     fc8:	11 05       	cpc	r17, r1
     fca:	29 f0       	breq	.+10     	; 0xfd6 <Endpoint_Null_Stream+0x26>
     fcc:	f8 01       	movw	r30, r16
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	c8 1b       	sub	r28, r24
     fd4:	d9 0b       	sbc	r29, r25
     fd6:	e1 2c       	mov	r14, r1
     fd8:	f1 2c       	mov	r15, r1
     fda:	20 97       	sbiw	r28, 0x00	; 0
     fdc:	01 f1       	breq	.+64     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     fde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fe2:	85 fd       	sbrc	r24, 5
     fe4:	15 c0       	rjmp	.+42     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     fe6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fea:	8e 77       	andi	r24, 0x7E	; 126
     fec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff0:	01 15       	cp	r16, r1
     ff2:	11 05       	cpc	r17, r1
     ff4:	49 f0       	breq	.+18     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     ff6:	f8 01       	movw	r30, r16
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	e8 0e       	add	r14, r24
     ffe:	f9 1e       	adc	r15, r25
    1000:	f1 82       	std	Z+1, r15	; 0x01
    1002:	e0 82       	st	Z, r14
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1008:	7d de       	rcall	.-774    	; 0xd04 <Endpoint_WaitUntilReady>
    100a:	88 23       	and	r24, r24
    100c:	31 f3       	breq	.-52     	; 0xfda <Endpoint_Null_Stream+0x2a>
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1010:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1014:	21 97       	sbiw	r28, 0x01	; 1
    1016:	ff ef       	ldi	r31, 0xFF	; 255
    1018:	ef 1a       	sub	r14, r31
    101a:	ff 0a       	sbc	r15, r31
    101c:	de cf       	rjmp	.-68     	; 0xfda <Endpoint_Null_Stream+0x2a>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	08 95       	ret

0000102e <Endpoint_Write_Stream_LE>:
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	8b 01       	movw	r16, r22
    1042:	7a 01       	movw	r14, r20
    1044:	5f de       	rcall	.-834    	; 0xd04 <Endpoint_WaitUntilReady>
    1046:	81 11       	cpse	r24, r1
    1048:	33 c0       	rjmp	.+102    	; 0x10b0 <Endpoint_Write_Stream_LE+0x82>
    104a:	e1 14       	cp	r14, r1
    104c:	f1 04       	cpc	r15, r1
    104e:	39 f0       	breq	.+14     	; 0x105e <Endpoint_Write_Stream_LE+0x30>
    1050:	f7 01       	movw	r30, r14
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	08 1b       	sub	r16, r24
    1058:	19 0b       	sbc	r17, r25
    105a:	c8 0f       	add	r28, r24
    105c:	d9 1f       	adc	r29, r25
    105e:	c1 2c       	mov	r12, r1
    1060:	d1 2c       	mov	r13, r1
    1062:	01 15       	cp	r16, r1
    1064:	11 05       	cpc	r17, r1
    1066:	19 f1       	breq	.+70     	; 0x10ae <Endpoint_Write_Stream_LE+0x80>
    1068:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106c:	85 fd       	sbrc	r24, 5
    106e:	16 c0       	rjmp	.+44     	; 0x109c <Endpoint_Write_Stream_LE+0x6e>
    1070:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1074:	8e 77       	andi	r24, 0x7E	; 126
    1076:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    107a:	c1 d2       	rcall	.+1410   	; 0x15fe <USB_USBTask>
    107c:	e1 14       	cp	r14, r1
    107e:	f1 04       	cpc	r15, r1
    1080:	49 f0       	breq	.+18     	; 0x1094 <Endpoint_Write_Stream_LE+0x66>
    1082:	f7 01       	movw	r30, r14
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	c8 0e       	add	r12, r24
    108a:	d9 1e       	adc	r13, r25
    108c:	d1 82       	std	Z+1, r13	; 0x01
    108e:	c0 82       	st	Z, r12
    1090:	85 e0       	ldi	r24, 0x05	; 5
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <Endpoint_Write_Stream_LE+0x82>
    1094:	37 de       	rcall	.-914    	; 0xd04 <Endpoint_WaitUntilReady>
    1096:	88 23       	and	r24, r24
    1098:	21 f3       	breq	.-56     	; 0x1062 <Endpoint_Write_Stream_LE+0x34>
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <Endpoint_Write_Stream_LE+0x82>
    109c:	89 91       	ld	r24, Y+
    109e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10a2:	01 50       	subi	r16, 0x01	; 1
    10a4:	11 09       	sbc	r17, r1
    10a6:	ff ef       	ldi	r31, 0xFF	; 255
    10a8:	cf 1a       	sub	r12, r31
    10aa:	df 0a       	sbc	r13, r31
    10ac:	da cf       	rjmp	.-76     	; 0x1062 <Endpoint_Write_Stream_LE+0x34>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	08 95       	ret

000010c2 <Endpoint_Write_Stream_BE>:
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
    10d4:	8b 01       	movw	r16, r22
    10d6:	7a 01       	movw	r14, r20
    10d8:	15 de       	rcall	.-982    	; 0xd04 <Endpoint_WaitUntilReady>
    10da:	81 11       	cpse	r24, r1
    10dc:	38 c0       	rjmp	.+112    	; 0x114e <Endpoint_Write_Stream_BE+0x8c>
    10de:	c8 01       	movw	r24, r16
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	c8 0f       	add	r28, r24
    10e4:	d9 1f       	adc	r29, r25
    10e6:	e1 14       	cp	r14, r1
    10e8:	f1 04       	cpc	r15, r1
    10ea:	39 f0       	breq	.+14     	; 0x10fa <Endpoint_Write_Stream_BE+0x38>
    10ec:	f7 01       	movw	r30, r14
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	08 1b       	sub	r16, r24
    10f4:	19 0b       	sbc	r17, r25
    10f6:	c8 1b       	sub	r28, r24
    10f8:	d9 0b       	sbc	r29, r25
    10fa:	c1 2c       	mov	r12, r1
    10fc:	d1 2c       	mov	r13, r1
    10fe:	01 15       	cp	r16, r1
    1100:	11 05       	cpc	r17, r1
    1102:	21 f1       	breq	.+72     	; 0x114c <Endpoint_Write_Stream_BE+0x8a>
    1104:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1108:	85 fd       	sbrc	r24, 5
    110a:	16 c0       	rjmp	.+44     	; 0x1138 <Endpoint_Write_Stream_BE+0x76>
    110c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1110:	8e 77       	andi	r24, 0x7E	; 126
    1112:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1116:	73 d2       	rcall	.+1254   	; 0x15fe <USB_USBTask>
    1118:	e1 14       	cp	r14, r1
    111a:	f1 04       	cpc	r15, r1
    111c:	49 f0       	breq	.+18     	; 0x1130 <Endpoint_Write_Stream_BE+0x6e>
    111e:	f7 01       	movw	r30, r14
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	c8 0e       	add	r12, r24
    1126:	d9 1e       	adc	r13, r25
    1128:	d1 82       	std	Z+1, r13	; 0x01
    112a:	c0 82       	st	Z, r12
    112c:	85 e0       	ldi	r24, 0x05	; 5
    112e:	0f c0       	rjmp	.+30     	; 0x114e <Endpoint_Write_Stream_BE+0x8c>
    1130:	e9 dd       	rcall	.-1070   	; 0xd04 <Endpoint_WaitUntilReady>
    1132:	88 23       	and	r24, r24
    1134:	21 f3       	breq	.-56     	; 0x10fe <Endpoint_Write_Stream_BE+0x3c>
    1136:	0b c0       	rjmp	.+22     	; 0x114e <Endpoint_Write_Stream_BE+0x8c>
    1138:	88 81       	ld	r24, Y
    113a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    113e:	21 97       	sbiw	r28, 0x01	; 1
    1140:	01 50       	subi	r16, 0x01	; 1
    1142:	11 09       	sbc	r17, r1
    1144:	ff ef       	ldi	r31, 0xFF	; 255
    1146:	cf 1a       	sub	r12, r31
    1148:	df 0a       	sbc	r13, r31
    114a:	d9 cf       	rjmp	.-78     	; 0x10fe <Endpoint_Write_Stream_BE+0x3c>
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	08 95       	ret

00001160 <Endpoint_Read_Stream_LE>:
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	8b 01       	movw	r16, r22
    1174:	7a 01       	movw	r14, r20
    1176:	c6 dd       	rcall	.-1140   	; 0xd04 <Endpoint_WaitUntilReady>
    1178:	81 11       	cpse	r24, r1
    117a:	33 c0       	rjmp	.+102    	; 0x11e2 <Endpoint_Read_Stream_LE+0x82>
    117c:	e1 14       	cp	r14, r1
    117e:	f1 04       	cpc	r15, r1
    1180:	39 f0       	breq	.+14     	; 0x1190 <Endpoint_Read_Stream_LE+0x30>
    1182:	f7 01       	movw	r30, r14
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	08 1b       	sub	r16, r24
    118a:	19 0b       	sbc	r17, r25
    118c:	c8 0f       	add	r28, r24
    118e:	d9 1f       	adc	r29, r25
    1190:	c1 2c       	mov	r12, r1
    1192:	d1 2c       	mov	r13, r1
    1194:	01 15       	cp	r16, r1
    1196:	11 05       	cpc	r17, r1
    1198:	19 f1       	breq	.+70     	; 0x11e0 <Endpoint_Read_Stream_LE+0x80>
    119a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    119e:	85 fd       	sbrc	r24, 5
    11a0:	16 c0       	rjmp	.+44     	; 0x11ce <Endpoint_Read_Stream_LE+0x6e>
    11a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11a6:	8b 77       	andi	r24, 0x7B	; 123
    11a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11ac:	28 d2       	rcall	.+1104   	; 0x15fe <USB_USBTask>
    11ae:	e1 14       	cp	r14, r1
    11b0:	f1 04       	cpc	r15, r1
    11b2:	49 f0       	breq	.+18     	; 0x11c6 <Endpoint_Read_Stream_LE+0x66>
    11b4:	f7 01       	movw	r30, r14
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	c8 0e       	add	r12, r24
    11bc:	d9 1e       	adc	r13, r25
    11be:	d1 82       	std	Z+1, r13	; 0x01
    11c0:	c0 82       	st	Z, r12
    11c2:	85 e0       	ldi	r24, 0x05	; 5
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <Endpoint_Read_Stream_LE+0x82>
    11c6:	9e dd       	rcall	.-1220   	; 0xd04 <Endpoint_WaitUntilReady>
    11c8:	88 23       	and	r24, r24
    11ca:	21 f3       	breq	.-56     	; 0x1194 <Endpoint_Read_Stream_LE+0x34>
    11cc:	0a c0       	rjmp	.+20     	; 0x11e2 <Endpoint_Read_Stream_LE+0x82>
    11ce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11d2:	89 93       	st	Y+, r24
    11d4:	01 50       	subi	r16, 0x01	; 1
    11d6:	11 09       	sbc	r17, r1
    11d8:	ff ef       	ldi	r31, 0xFF	; 255
    11da:	cf 1a       	sub	r12, r31
    11dc:	df 0a       	sbc	r13, r31
    11de:	da cf       	rjmp	.-76     	; 0x1194 <Endpoint_Read_Stream_LE+0x34>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	08 95       	ret

000011f4 <Endpoint_Write_Control_Stream_LE>:
    11f4:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x6>
    11f8:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <USB_ControlRequest+0x7>
    11fc:	26 17       	cp	r18, r22
    11fe:	37 07       	cpc	r19, r23
    1200:	48 f0       	brcs	.+18     	; 0x1214 <Endpoint_Write_Control_Stream_LE+0x20>
    1202:	61 15       	cp	r22, r1
    1204:	71 05       	cpc	r23, r1
    1206:	39 f4       	brne	.+14     	; 0x1216 <Endpoint_Write_Control_Stream_LE+0x22>
    1208:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    120c:	2e 77       	andi	r18, 0x7E	; 126
    120e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <Endpoint_Write_Control_Stream_LE+0x22>
    1214:	b9 01       	movw	r22, r18
    1216:	fc 01       	movw	r30, r24
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	61 15       	cp	r22, r1
    121c:	71 05       	cpc	r23, r1
    121e:	69 f1       	breq	.+90     	; 0x127a <Endpoint_Write_Control_Stream_LE+0x86>
    1220:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>
    1224:	88 23       	and	r24, r24
    1226:	d1 f1       	breq	.+116    	; 0x129c <Endpoint_Write_Control_Stream_LE+0xa8>
    1228:	85 30       	cpi	r24, 0x05	; 5
    122a:	d1 f1       	breq	.+116    	; 0x12a0 <Endpoint_Write_Control_Stream_LE+0xac>
    122c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1230:	83 fd       	sbrc	r24, 3
    1232:	32 c0       	rjmp	.+100    	; 0x1298 <Endpoint_Write_Control_Stream_LE+0xa4>
    1234:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1238:	82 fd       	sbrc	r24, 2
    123a:	28 c0       	rjmp	.+80     	; 0x128c <Endpoint_Write_Control_Stream_LE+0x98>
    123c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1240:	80 ff       	sbrs	r24, 0
    1242:	eb cf       	rjmp	.-42     	; 0x121a <Endpoint_Write_Control_Stream_LE+0x26>
    1244:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1248:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    124c:	61 15       	cp	r22, r1
    124e:	71 05       	cpc	r23, r1
    1250:	51 f0       	breq	.+20     	; 0x1266 <Endpoint_Write_Control_Stream_LE+0x72>
    1252:	88 30       	cpi	r24, 0x08	; 8
    1254:	91 05       	cpc	r25, r1
    1256:	38 f4       	brcc	.+14     	; 0x1266 <Endpoint_Write_Control_Stream_LE+0x72>
    1258:	21 91       	ld	r18, Z+
    125a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    125e:	61 50       	subi	r22, 0x01	; 1
    1260:	71 09       	sbc	r23, r1
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	f3 cf       	rjmp	.-26     	; 0x124c <Endpoint_Write_Control_Stream_LE+0x58>
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	08 97       	sbiw	r24, 0x08	; 8
    126a:	09 f0       	breq	.+2      	; 0x126e <Endpoint_Write_Control_Stream_LE+0x7a>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1272:	8e 77       	andi	r24, 0x7E	; 126
    1274:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1278:	d0 cf       	rjmp	.-96     	; 0x121a <Endpoint_Write_Control_Stream_LE+0x26>
    127a:	21 11       	cpse	r18, r1
    127c:	d1 cf       	rjmp	.-94     	; 0x1220 <Endpoint_Write_Control_Stream_LE+0x2c>
    127e:	06 c0       	rjmp	.+12     	; 0x128c <Endpoint_Write_Control_Stream_LE+0x98>
    1280:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>
    1284:	88 23       	and	r24, r24
    1286:	51 f0       	breq	.+20     	; 0x129c <Endpoint_Write_Control_Stream_LE+0xa8>
    1288:	85 30       	cpi	r24, 0x05	; 5
    128a:	51 f0       	breq	.+20     	; 0x12a0 <Endpoint_Write_Control_Stream_LE+0xac>
    128c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1290:	82 ff       	sbrs	r24, 2
    1292:	f6 cf       	rjmp	.-20     	; 0x1280 <Endpoint_Write_Control_Stream_LE+0x8c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	08 95       	ret
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	08 95       	ret
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	08 95       	ret

000012a4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    12a4:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x6>
    12a8:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <USB_ControlRequest+0x7>
    12ac:	26 17       	cp	r18, r22
    12ae:	37 07       	cpc	r19, r23
    12b0:	48 f0       	brcs	.+18     	; 0x12c4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    12b2:	61 15       	cp	r22, r1
    12b4:	71 05       	cpc	r23, r1
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12bc:	2e 77       	andi	r18, 0x7E	; 126
    12be:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <Endpoint_Write_Control_PStream_LE+0x22>
    12c4:	b9 01       	movw	r22, r18
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    12ca:	61 15       	cp	r22, r1
    12cc:	71 05       	cpc	r23, r1
    12ce:	71 f1       	breq	.+92     	; 0x132c <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12d0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12d4:	88 23       	and	r24, r24
    12d6:	d9 f1       	breq	.+118    	; 0x134e <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12d8:	85 30       	cpi	r24, 0x05	; 5
    12da:	d9 f1       	breq	.+118    	; 0x1352 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    12e0:	83 fd       	sbrc	r24, 3
    12e2:	33 c0       	rjmp	.+102    	; 0x134a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    12e8:	82 fd       	sbrc	r24, 2
    12ea:	29 c0       	rjmp	.+82     	; 0x133e <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    12f0:	80 ff       	sbrs	r24, 0
    12f2:	eb cf       	rjmp	.-42     	; 0x12ca <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    12f4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    12f8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    12fc:	61 15       	cp	r22, r1
    12fe:	71 05       	cpc	r23, r1
    1300:	59 f0       	breq	.+22     	; 0x1318 <Endpoint_Write_Control_PStream_LE+0x74>
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	91 05       	cpc	r25, r1
    1306:	40 f4       	brcc	.+16     	; 0x1318 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1308:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    130a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    130e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1310:	61 50       	subi	r22, 0x01	; 1
    1312:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	f2 cf       	rjmp	.-28     	; 0x12fc <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	08 97       	sbiw	r24, 0x08	; 8
    131c:	09 f0       	breq	.+2      	; 0x1320 <Endpoint_Write_Control_PStream_LE+0x7c>
    131e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1320:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1324:	8e 77       	andi	r24, 0x7E	; 126
    1326:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    132a:	cf cf       	rjmp	.-98     	; 0x12ca <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    132c:	21 11       	cpse	r18, r1
    132e:	d0 cf       	rjmp	.-96     	; 0x12d0 <Endpoint_Write_Control_PStream_LE+0x2c>
    1330:	06 c0       	rjmp	.+12     	; 0x133e <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1332:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1336:	88 23       	and	r24, r24
    1338:	51 f0       	breq	.+20     	; 0x134e <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    133a:	85 30       	cpi	r24, 0x05	; 5
    133c:	51 f0       	breq	.+20     	; 0x1352 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    133e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1342:	82 ff       	sbrs	r24, 2
    1344:	f6 cf       	rjmp	.-20     	; 0x1332 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1352:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1354:	08 95       	ret

00001356 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	aa 97       	sbiw	r28, 0x2a	; 42
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	ea ee       	ldi	r30, 0xEA	; 234
    1370:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1372:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1376:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	e2 3f       	cpi	r30, 0xF2	; 242
    137c:	f2 07       	cpc	r31, r18
    137e:	c9 f7       	brne	.-14     	; 0x1372 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1380:	0e 94 7f 01 	call	0x2fe	; 0x2fe <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1384:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1388:	83 ff       	sbrs	r24, 3
    138a:	1f c1       	rjmp	.+574    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    138c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1390:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <USB_ControlRequest+0x1>
    1394:	49 2f       	mov	r20, r25
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	4a 30       	cpi	r20, 0x0A	; 10
    139a:	51 05       	cpc	r21, r1
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <USB_Device_ProcessControlRequest+0x4a>
    139e:	15 c1       	rjmp	.+554    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
    13a0:	fa 01       	movw	r30, r20
    13a2:	e4 5b       	subi	r30, 0xB4	; 180
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	73 c4       	rjmp	.+2278   	; 0x1c8e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13a8:	80 38       	cpi	r24, 0x80	; 128
    13aa:	81 f0       	breq	.+32     	; 0x13cc <USB_Device_ProcessControlRequest+0x76>
    13ac:	82 38       	cpi	r24, 0x82	; 130
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <USB_Device_ProcessControlRequest+0x5c>
    13b0:	0c c1       	rjmp	.+536    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    13b2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <USB_ControlRequest+0x4>
    13b6:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    13bc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
    13c0:	85 fb       	bst	r24, 5
    13c2:	88 27       	eor	r24, r24
    13c4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13c6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    13cc:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    13d0:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <USB_Device_RemoteWakeupEnabled>
    13d4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    13d6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13dc:	97 7f       	andi	r25, 0xF7	; 247
    13de:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    13e2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    13e6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    13ea:	c6 c0       	rjmp	.+396    	; 0x1578 <USB_Device_ProcessControlRequest+0x222>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13ec:	28 2f       	mov	r18, r24
    13ee:	2d 7f       	andi	r18, 0xFD	; 253
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <USB_Device_ProcessControlRequest+0x9e>
    13f2:	eb c0       	rjmp	.+470    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    13f4:	88 23       	and	r24, r24
    13f6:	19 f0       	breq	.+6      	; 0x13fe <USB_Device_ProcessControlRequest+0xa8>
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	61 f0       	breq	.+24     	; 0x1414 <USB_Device_ProcessControlRequest+0xbe>
    13fc:	e6 c0       	rjmp	.+460    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    13fe:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	09 f0       	breq	.+2      	; 0x1408 <USB_Device_ProcessControlRequest+0xb2>
    1406:	e1 c0       	rjmp	.+450    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1408:	93 30       	cpi	r25, 0x03	; 3
    140a:	09 f0       	breq	.+2      	; 0x140e <USB_Device_ProcessControlRequest+0xb8>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <USB_Device_RemoteWakeupEnabled>
    1412:	2b c0       	rjmp	.+86     	; 0x146a <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1414:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
    1418:	81 11       	cpse	r24, r1
    141a:	27 c0       	rjmp	.+78     	; 0x146a <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    141c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <USB_ControlRequest+0x4>
    1420:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1422:	09 f4       	brne	.+2      	; 0x1426 <USB_Device_ProcessControlRequest+0xd0>
    1424:	d2 c0       	rjmp	.+420    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1426:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    142a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    142e:	20 ff       	sbrs	r18, 0
    1430:	1c c0       	rjmp	.+56     	; 0x146a <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1432:	93 30       	cpi	r25, 0x03	; 3
    1434:	21 f4       	brne	.+8      	; 0x143e <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1436:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    143a:	80 62       	ori	r24, 0x20	; 32
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    143e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1442:	90 61       	ori	r25, 0x10	; 16
    1444:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <USB_Device_ProcessControlRequest+0xfe>
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <USB_Device_ProcessControlRequest+0xfa>
    1458:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    145c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1460:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1464:	88 60       	ori	r24, 0x08	; 8
    1466:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    146a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    146e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1472:	87 7f       	andi	r24, 0xF7	; 247
    1474:	84 c0       	rjmp	.+264    	; 0x157e <USB_Device_ProcessControlRequest+0x228>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1476:	81 11       	cpse	r24, r1
    1478:	a8 c0       	rjmp	.+336    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    147a:	10 91 ec 01 	lds	r17, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
    147e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1480:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1482:	f8 94       	cli
    1484:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    148e:	1b dc       	rcall	.-1994   	; 0xcc6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1490:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    1494:	80 ff       	sbrs	r24, 0
    1496:	fc cf       	rjmp	.-8      	; 0x1490 <USB_Device_ProcessControlRequest+0x13a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1498:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    149c:	80 78       	andi	r24, 0x80	; 128
    149e:	81 2b       	or	r24, r17

				UDADDR = Temp;
    14a0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    14aa:	11 11       	cpse	r17, r1
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <USB_Device_ProcessControlRequest+0x15c>
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <USB_Device_ProcessControlRequest+0x15e>
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    14b8:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    14ba:	87 c0       	rjmp	.+270    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14bc:	80 58       	subi	r24, 0x80	; 128
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <USB_Device_ProcessControlRequest+0x16e>
    14c2:	83 c0       	rjmp	.+262    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    14c4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
    14c8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <USB_ControlRequest+0x3>
    14cc:	8c 3d       	cpi	r24, 0xDC	; 220
    14ce:	53 e0       	ldi	r21, 0x03	; 3
    14d0:	95 07       	cpc	r25, r21
    14d2:	71 f5       	brne	.+92     	; 0x1530 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    14d8:	8a e2       	ldi	r24, 0x2A	; 42
    14da:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    14dc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    14de:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    14e0:	de 01       	movw	r26, r28
    14e2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    14e4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    14e6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    14e8:	51 e2       	ldi	r21, 0x21	; 33
    14ea:	e3 2f       	mov	r30, r19
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    14f2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    14f4:	20 ff       	sbrs	r18, 0
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    14f8:	e2 95       	swap	r30
    14fa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    14fc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    14fe:	ef 70       	andi	r30, 0x0F	; 15
    1500:	8e 2f       	mov	r24, r30
    1502:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1504:	ea 30       	cpi	r30, 0x0A	; 10
    1506:	10 f0       	brcs	.+4      	; 0x150c <USB_Device_ProcessControlRequest+0x1b6>
    1508:	c7 96       	adiw	r24, 0x37	; 55
    150a:	01 c0       	rjmp	.+2      	; 0x150e <USB_Device_ProcessControlRequest+0x1b8>
    150c:	c0 96       	adiw	r24, 0x30	; 48
    150e:	8d 93       	st	X+, r24
    1510:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	24 31       	cpi	r18, 0x14	; 20
    1516:	49 f7       	brne	.-46     	; 0x14ea <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1518:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    151a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    151e:	87 7f       	andi	r24, 0xF7	; 247
    1520:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1524:	6a e2       	ldi	r22, 0x2A	; 42
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	63 de       	rcall	.-826    	; 0x11f4 <Endpoint_Write_Control_Stream_LE>
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <USB_Device_ProcessControlRequest+0x200>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1530:	ae 01       	movw	r20, r28
    1532:	4f 5f       	subi	r20, 0xFF	; 255
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <USB_ControlRequest+0x4>
    153a:	0e 94 95 01 	call	0x32a	; 0x32a <CALLBACK_USB_GetDescriptor>
    153e:	bc 01       	movw	r22, r24
    1540:	89 2b       	or	r24, r25
    1542:	09 f4       	brne	.+2      	; 0x1546 <USB_Device_ProcessControlRequest+0x1f0>
    1544:	42 c0       	rjmp	.+132    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
    1546:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    154a:	97 7f       	andi	r25, 0xF7	; 247
    154c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	a7 de       	rcall	.-690    	; 0x12a4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1556:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    155a:	8b 77       	andi	r24, 0x7B	; 123
    155c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1560:	34 c0       	rjmp	.+104    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1562:	80 38       	cpi	r24, 0x80	; 128
    1564:	91 f5       	brne	.+100    	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1566:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    156a:	87 7f       	andi	r24, 0xF7	; 247
    156c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1570:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1574:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1578:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    157c:	8e 77       	andi	r24, 0x7E	; 126
    157e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1582:	a1 db       	rcall	.-2238   	; 0xcc6 <Endpoint_ClearStatusStage>
    1584:	22 c0       	rjmp	.+68     	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1586:	81 11       	cpse	r24, r1
    1588:	20 c0       	rjmp	.+64     	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    158a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
    158e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <USB_ControlRequest+0x3>
    1592:	99 27       	eor	r25, r25
    1594:	02 97       	sbiw	r24, 0x02	; 2
    1596:	cc f4       	brge	.+50     	; 0x15ca <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1598:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    159c:	87 7f       	andi	r24, 0xF7	; 247
    159e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    15a2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
    15a6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    15aa:	8d db       	rcall	.-2278   	; 0xcc6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    15ac:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_Device_ConfigurationNumber>
    15b0:	81 11       	cpse	r24, r1
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <USB_Device_ProcessControlRequest+0x26a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    15b4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    15b8:	87 fd       	sbrc	r24, 7
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <USB_Device_ProcessControlRequest+0x26a>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <USB_Device_ProcessControlRequest+0x26c>
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    15c6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    15ce:	83 ff       	sbrs	r24, 3
    15d0:	0a c0       	rjmp	.+20     	; 0x15e6 <USB_Device_ProcessControlRequest+0x290>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15d6:	80 62       	ori	r24, 0x20	; 32
    15d8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15e0:	87 7f       	andi	r24, 0xF7	; 247
    15e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    15e6:	aa 96       	adiw	r28, 0x2a	; 42
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    15fc:	08 95       	ret

000015fe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    15fe:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1600:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_DeviceState>
    1604:	88 23       	and	r24, r24
    1606:	59 f0       	breq	.+22     	; 0x161e <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1608:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    160c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    160e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1612:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1616:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1618:	9e de       	rcall	.-708    	; 0x1356 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    161a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
    162a:	fc 01       	movw	r30, r24
    162c:	3d 96       	adiw	r30, 0x0d	; 13
    162e:	89 e0       	ldi	r24, 0x09	; 9
    1630:	df 01       	movw	r26, r30
    1632:	1d 92       	st	X+, r1
    1634:	8a 95       	dec	r24
    1636:	e9 f7       	brne	.-6      	; 0x1632 <CDC_Device_ConfigureEndpoints+0x10>
    1638:	11 e0       	ldi	r17, 0x01	; 1
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	81 13       	cpse	r24, r17
    163e:	05 c0       	rjmp	.+10     	; 0x164a <CDC_Device_ConfigureEndpoints+0x28>
    1640:	ea 81       	ldd	r30, Y+2	; 0x02
    1642:	fb 81       	ldd	r31, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	20 e8       	ldi	r18, 0x80	; 128
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <CDC_Device_ConfigureEndpoints+0x36>
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	81 13       	cpse	r24, r17
    164e:	06 c0       	rjmp	.+12     	; 0x165c <CDC_Device_ConfigureEndpoints+0x3a>
    1650:	ee 81       	ldd	r30, Y+6	; 0x06
    1652:	ff 81       	ldd	r31, Y+7	; 0x07
    1654:	98 85       	ldd	r25, Y+8	; 0x08
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	0d c0       	rjmp	.+26     	; 0x1676 <CDC_Device_ConfigureEndpoints+0x54>
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	81 17       	cp	r24, r17
    1660:	29 f0       	breq	.+10     	; 0x166c <CDC_Device_ConfigureEndpoints+0x4a>
    1662:	1f 5f       	subi	r17, 0xFF	; 255
    1664:	17 30       	cpi	r17, 0x07	; 7
    1666:	49 f7       	brne	.-46     	; 0x163a <CDC_Device_ConfigureEndpoints+0x18>
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	22 c0       	rjmp	.+68     	; 0x16b0 <CDC_Device_ConfigureEndpoints+0x8e>
    166c:	ea 85       	ldd	r30, Y+10	; 0x0a
    166e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1670:	9c 85       	ldd	r25, Y+12	; 0x0c
    1672:	20 e8       	ldi	r18, 0x80	; 128
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	91 11       	cpse	r25, r1
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	68 e0       	ldi	r22, 0x08	; 8
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	6e 17       	cp	r22, r30
    1682:	7f 07       	cpc	r23, r31
    1684:	20 f4       	brcc	.+8      	; 0x168e <CDC_Device_ConfigureEndpoints+0x6c>
    1686:	4f 5f       	subi	r20, 0xFF	; 255
    1688:	66 0f       	add	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	f9 cf       	rjmp	.-14     	; 0x1680 <CDC_Device_ConfigureEndpoints+0x5e>
    168e:	42 95       	swap	r20
    1690:	40 7f       	andi	r20, 0xF0	; 240
    1692:	92 60       	ori	r25, 0x02	; 2
    1694:	49 2b       	or	r20, r25
    1696:	b0 e4       	ldi	r27, 0x40	; 64
    1698:	8b 9f       	mul	r24, r27
    169a:	c0 01       	movw	r24, r0
    169c:	11 24       	eor	r1, r1
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	21 11       	cpse	r18, r1
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <CDC_Device_ConfigureEndpoints+0x84>
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	68 2b       	or	r22, r24
    16a8:	81 2f       	mov	r24, r17
    16aa:	d9 da       	rcall	.-2638   	; 0xc5e <Endpoint_ConfigureEndpoint_Prv>
    16ac:	81 11       	cpse	r24, r1
    16ae:	d9 cf       	rjmp	.-78     	; 0x1662 <CDC_Device_ConfigureEndpoints+0x40>
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	08 95       	ret

000016b8 <CDC_Device_SendByte>:
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_DeviceState>
    16c2:	24 30       	cpi	r18, 0x04	; 4
    16c4:	f1 f4       	brne	.+60     	; 0x1702 <CDC_Device_SendByte+0x4a>
    16c6:	fc 01       	movw	r30, r24
    16c8:	07 85       	ldd	r16, Z+15	; 0x0f
    16ca:	10 89       	ldd	r17, Z+16	; 0x10
    16cc:	21 89       	ldd	r18, Z+17	; 0x11
    16ce:	32 89       	ldd	r19, Z+18	; 0x12
    16d0:	01 2b       	or	r16, r17
    16d2:	02 2b       	or	r16, r18
    16d4:	03 2b       	or	r16, r19
    16d6:	a9 f0       	breq	.+42     	; 0x1702 <CDC_Device_SendByte+0x4a>
    16d8:	c6 2f       	mov	r28, r22
    16da:	81 81       	ldd	r24, Z+1	; 0x01
    16dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    16e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16e4:	85 ff       	sbrs	r24, 5
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <CDC_Device_SendByte+0x38>
    16e8:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <CDC_Device_SendByte+0x4c>
    16f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16f4:	8e 77       	andi	r24, 0x7E	; 126
    16f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16fa:	04 db       	rcall	.-2552   	; 0xd04 <Endpoint_WaitUntilReady>
    16fc:	88 23       	and	r24, r24
    16fe:	a1 f3       	breq	.-24     	; 0x16e8 <CDC_Device_SendByte+0x30>
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <CDC_Device_SendByte+0x4c>
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <CDC_Device_putchar>:
    170c:	fb 01       	movw	r30, r22
    170e:	68 2f       	mov	r22, r24
    1710:	84 85       	ldd	r24, Z+12	; 0x0c
    1712:	95 85       	ldd	r25, Z+13	; 0x0d
    1714:	d1 df       	rcall	.-94     	; 0x16b8 <CDC_Device_SendByte>
    1716:	21 e0       	ldi	r18, 0x01	; 1
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 11       	cpse	r24, r1
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <CDC_Device_putchar+0x16>
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	88 27       	eor	r24, r24
    1724:	99 27       	eor	r25, r25
    1726:	82 1b       	sub	r24, r18
    1728:	93 0b       	sbc	r25, r19
    172a:	08 95       	ret

0000172c <CDC_Device_Flush>:
    172c:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_DeviceState>
    1730:	24 30       	cpi	r18, 0x04	; 4
    1732:	29 f5       	brne	.+74     	; 0x177e <CDC_Device_Flush+0x52>
    1734:	fc 01       	movw	r30, r24
    1736:	47 85       	ldd	r20, Z+15	; 0x0f
    1738:	50 89       	ldd	r21, Z+16	; 0x10
    173a:	61 89       	ldd	r22, Z+17	; 0x11
    173c:	72 89       	ldd	r23, Z+18	; 0x12
    173e:	45 2b       	or	r20, r21
    1740:	46 2b       	or	r20, r22
    1742:	47 2b       	or	r20, r23
    1744:	e1 f0       	breq	.+56     	; 0x177e <CDC_Device_Flush+0x52>
    1746:	81 81       	ldd	r24, Z+1	; 0x01
    1748:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    174c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1750:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1754:	89 2b       	or	r24, r25
    1756:	89 f0       	breq	.+34     	; 0x177a <CDC_Device_Flush+0x4e>
    1758:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    175c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1760:	8e 77       	andi	r24, 0x7E	; 126
    1762:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1766:	95 fd       	sbrc	r25, 5
    1768:	08 c0       	rjmp	.+16     	; 0x177a <CDC_Device_Flush+0x4e>
    176a:	cc da       	rcall	.-2664   	; 0xd04 <Endpoint_WaitUntilReady>
    176c:	81 11       	cpse	r24, r1
    176e:	08 c0       	rjmp	.+16     	; 0x1780 <CDC_Device_Flush+0x54>
    1770:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1774:	8e 77       	andi	r24, 0x7E	; 126
    1776:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	08 95       	ret

00001782 <CDC_Device_USBTask>:
    1782:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_DeviceState>
    1786:	24 30       	cpi	r18, 0x04	; 4
    1788:	51 f4       	brne	.+20     	; 0x179e <CDC_Device_USBTask+0x1c>
    178a:	fc 01       	movw	r30, r24
    178c:	47 85       	ldd	r20, Z+15	; 0x0f
    178e:	50 89       	ldd	r21, Z+16	; 0x10
    1790:	61 89       	ldd	r22, Z+17	; 0x11
    1792:	72 89       	ldd	r23, Z+18	; 0x12
    1794:	45 2b       	or	r20, r21
    1796:	46 2b       	or	r20, r22
    1798:	47 2b       	or	r20, r23
    179a:	09 f0       	breq	.+2      	; 0x179e <CDC_Device_USBTask+0x1c>
    179c:	c7 cf       	rjmp	.-114    	; 0x172c <CDC_Device_Flush>
    179e:	08 95       	ret

000017a0 <CDC_Device_ReceiveByte>:
    17a0:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_DeviceState>
    17a4:	24 30       	cpi	r18, 0x04	; 4
    17a6:	19 f0       	breq	.+6      	; 0x17ae <CDC_Device_ReceiveByte+0xe>
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f ef       	ldi	r25, 0xFF	; 255
    17ac:	08 95       	ret
    17ae:	fc 01       	movw	r30, r24
    17b0:	47 85       	ldd	r20, Z+15	; 0x0f
    17b2:	50 89       	ldd	r21, Z+16	; 0x10
    17b4:	61 89       	ldd	r22, Z+17	; 0x11
    17b6:	72 89       	ldd	r23, Z+18	; 0x12
    17b8:	45 2b       	or	r20, r21
    17ba:	46 2b       	or	r20, r22
    17bc:	47 2b       	or	r20, r23
    17be:	a1 f3       	breq	.-24     	; 0x17a8 <CDC_Device_ReceiveByte+0x8>
    17c0:	85 81       	ldd	r24, Z+5	; 0x05
    17c2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    17c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ca:	82 ff       	sbrs	r24, 2
    17cc:	ed cf       	rjmp	.-38     	; 0x17a8 <CDC_Device_ReceiveByte+0x8>
    17ce:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17d2:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17d6:	89 2b       	or	r24, r25
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <CDC_Device_ReceiveByte+0x42>
    17da:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <CDC_Device_ReceiveByte+0x46>
    17e2:	2f ef       	ldi	r18, 0xFF	; 255
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17ea:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17ee:	89 2b       	or	r24, r25
    17f0:	29 f4       	brne	.+10     	; 0x17fc <CDC_Device_ReceiveByte+0x5c>
    17f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17f6:	8b 77       	andi	r24, 0x7B	; 123
    17f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17fc:	c9 01       	movw	r24, r18
    17fe:	08 95       	ret

00001800 <CDC_Device_getchar>:
    1800:	fc 01       	movw	r30, r24
    1802:	84 85       	ldd	r24, Z+12	; 0x0c
    1804:	95 85       	ldd	r25, Z+13	; 0x0d
    1806:	cc df       	rcall	.-104    	; 0x17a0 <CDC_Device_ReceiveByte>
    1808:	97 ff       	sbrs	r25, 7
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <CDC_Device_getchar+0x10>
    180c:	8e ef       	ldi	r24, 0xFE	; 254
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <CDC_Device_CreateStream>:
    1812:	fb 01       	movw	r30, r22
    1814:	2e e0       	ldi	r18, 0x0E	; 14
    1816:	db 01       	movw	r26, r22
    1818:	1d 92       	st	X+, r1
    181a:	2a 95       	dec	r18
    181c:	e9 f7       	brne	.-6      	; 0x1818 <CDC_Device_CreateStream+0x6>
    181e:	23 e0       	ldi	r18, 0x03	; 3
    1820:	23 83       	std	Z+3, r18	; 0x03
    1822:	26 e8       	ldi	r18, 0x86	; 134
    1824:	3b e0       	ldi	r19, 0x0B	; 11
    1826:	31 87       	std	Z+9, r19	; 0x09
    1828:	20 87       	std	Z+8, r18	; 0x08
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3c e0       	ldi	r19, 0x0C	; 12
    182e:	33 87       	std	Z+11, r19	; 0x0b
    1830:	22 87       	std	Z+10, r18	; 0x0a
    1832:	95 87       	std	Z+13, r25	; 0x0d
    1834:	84 87       	std	Z+12, r24	; 0x0c
    1836:	08 95       	ret

00001838 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1838:	08 95       	ret

0000183a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1840:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1844:	83 ff       	sbrs	r24, 3
    1846:	95 c0       	rjmp	.+298    	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1848:	88 81       	ld	r24, Y
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <USB_ControlRequest+0x4>
    1850:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <USB_ControlRequest+0x5>
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	09 f0       	breq	.+2      	; 0x185c <CDC_Device_ProcessControlRequest+0x22>
    185a:	8b c0       	rjmp	.+278    	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
    185c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x1>
    1860:	81 32       	cpi	r24, 0x21	; 33
    1862:	59 f0       	breq	.+22     	; 0x187a <CDC_Device_ProcessControlRequest+0x40>
    1864:	18 f4       	brcc	.+6      	; 0x186c <CDC_Device_ProcessControlRequest+0x32>
    1866:	80 32       	cpi	r24, 0x20	; 32
    1868:	d1 f1       	breq	.+116    	; 0x18de <CDC_Device_ProcessControlRequest+0xa4>
    186a:	83 c0       	rjmp	.+262    	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
    186c:	82 32       	cpi	r24, 0x22	; 34
    186e:	09 f4       	brne	.+2      	; 0x1872 <CDC_Device_ProcessControlRequest+0x38>
    1870:	5f c0       	rjmp	.+190    	; 0x1930 <CDC_Device_ProcessControlRequest+0xf6>
    1872:	83 32       	cpi	r24, 0x23	; 35
    1874:	09 f4       	brne	.+2      	; 0x1878 <CDC_Device_ProcessControlRequest+0x3e>
    1876:	6d c0       	rjmp	.+218    	; 0x1952 <CDC_Device_ProcessControlRequest+0x118>
    1878:	7c c0       	rjmp	.+248    	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    187a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest>
    187e:	81 3a       	cpi	r24, 0xA1	; 161
    1880:	09 f0       	breq	.+2      	; 0x1884 <CDC_Device_ProcessControlRequest+0x4a>
    1882:	77 c0       	rjmp	.+238    	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1884:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1888:	87 7f       	andi	r24, 0xF7	; 247
    188a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    188e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1890:	98 89       	ldd	r25, Y+16	; 0x10
    1892:	a9 89       	ldd	r26, Y+17	; 0x11
    1894:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1896:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    189a:	49 2f       	mov	r20, r25
    189c:	5a 2f       	mov	r21, r26
    189e:	6b 2f       	mov	r22, r27
    18a0:	77 27       	eor	r23, r23
    18a2:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    18a6:	ad 01       	movw	r20, r26
    18a8:	66 27       	eor	r22, r22
    18aa:	77 27       	eor	r23, r23
    18ac:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    18b0:	8b 2f       	mov	r24, r27
    18b2:	99 27       	eor	r25, r25
    18b4:	aa 27       	eor	r26, r26
    18b6:	bb 27       	eor	r27, r27
    18b8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    18c2:	8c 89       	ldd	r24, Y+20	; 0x14
    18c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    18c8:	8d 89       	ldd	r24, Y+21	; 0x15
    18ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18d2:	8e 77       	andi	r24, 0x7E	; 126
    18d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    18dc:	f4 c9       	rjmp	.-3096   	; 0xcc6 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18de:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest>
    18e2:	81 32       	cpi	r24, 0x21	; 33
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <CDC_Device_ProcessControlRequest+0xae>
    18e6:	45 c0       	rjmp	.+138    	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ec:	87 7f       	andi	r24, 0xF7	; 247
    18ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    18f2:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
    18f6:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    18fa:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    18fe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1902:	3f 87       	std	Y+15, r19	; 0x0f
    1904:	28 8b       	std	Y+16, r18	; 0x10
    1906:	99 8b       	std	Y+17, r25	; 0x11
    1908:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    190a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1914:	8c 8b       	std	Y+20, r24	; 0x14
    1916:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    191a:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    191c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1920:	8b 77       	andi	r24, 0x7B	; 123
    1922:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1926:	cf d9       	rcall	.-3170   	; 0xcc6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1928:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    192a:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    192c:	cf 91       	pop	r28
    192e:	84 cf       	rjmp	.-248    	; 0x1838 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1930:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest>
    1934:	81 32       	cpi	r24, 0x21	; 33
    1936:	e9 f4       	brne	.+58     	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1938:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    193c:	87 7f       	andi	r24, 0xF7	; 247
    193e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1942:	c1 d9       	rcall	.-3198   	; 0xcc6 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1944:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1948:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    194a:	ce 01       	movw	r24, r28
    194c:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    194e:	cf 91       	pop	r28
    1950:	73 cf       	rjmp	.-282    	; 0x1838 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1952:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest>
    1956:	81 32       	cpi	r24, 0x21	; 33
    1958:	61 f4       	brne	.+24     	; 0x1972 <CDC_Device_ProcessControlRequest+0x138>
    195a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    195e:	87 7f       	andi	r24, 0xF7	; 247
    1960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1964:	b0 d9       	rcall	.-3232   	; 0xcc6 <Endpoint_ClearStatusStage>
    1966:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <USB_ControlRequest+0x2>
			}

			break;
	}
}
    196a:	ce 01       	movw	r24, r28
    196c:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    196e:	cf 91       	pop	r28
    1970:	63 cf       	rjmp	.-314    	; 0x1838 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    197c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1980:	23 ff       	sbrs	r18, 3
    1982:	34 c0       	rjmp	.+104    	; 0x19ec <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1984:	fc 01       	movw	r30, r24
    1986:	20 81       	ld	r18, Z
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <USB_ControlRequest+0x4>
    198e:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <USB_ControlRequest+0x5>
    1992:	42 17       	cp	r20, r18
    1994:	53 07       	cpc	r21, r19
    1996:	51 f5       	brne	.+84     	; 0x19ec <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1998:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <USB_ControlRequest+0x1>
    199c:	2e 3f       	cpi	r18, 0xFE	; 254
    199e:	81 f0       	breq	.+32     	; 0x19c0 <MS_Device_ProcessControlRequest+0x48>
    19a0:	2f 3f       	cpi	r18, 0xFF	; 255
    19a2:	21 f5       	brne	.+72     	; 0x19ec <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19a4:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <USB_ControlRequest>
    19a8:	21 32       	cpi	r18, 0x21	; 33
    19aa:	01 f5       	brne	.+64     	; 0x19ec <MS_Device_ProcessControlRequest+0x74>
    19ac:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19b2:	87 7f       	andi	r24, 0xF7	; 247
    19b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    19b8:	86 d9       	rcall	.-3316   	; 0xcc6 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	8e ab       	std	Y+54, r24	; 0x36
    19be:	16 c0       	rjmp	.+44     	; 0x19ec <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19c0:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <USB_ControlRequest>
    19c4:	21 3a       	cpi	r18, 0xA1	; 161
    19c6:	91 f4       	brne	.+36     	; 0x19ec <MS_Device_ProcessControlRequest+0x74>
    19c8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19cc:	27 7f       	andi	r18, 0xF7	; 247
    19ce:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    19d2:	fc 01       	movw	r30, r24
    19d4:	81 85       	ldd	r24, Z+9	; 0x09
    19d6:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19d8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19e0:	8e 77       	andi	r24, 0x7E	; 126
    19e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    19e6:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    19e8:	cf 91       	pop	r28
    19ea:	6d c9       	rjmp	.-3366   	; 0xcc6 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    19fa:	fc 01       	movw	r30, r24
    19fc:	3a 96       	adiw	r30, 0x0a	; 10
    19fe:	8d e2       	ldi	r24, 0x2D	; 45
    1a00:	df 01       	movw	r26, r30
    1a02:	1d 92       	st	X+, r1
    1a04:	8a 95       	dec	r24
    1a06:	e9 f7       	brne	.-6      	; 0x1a02 <MS_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1a08:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	81 13       	cpse	r24, r17
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1a10:	6a 81       	ldd	r22, Y+2	; 0x02
    1a12:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    1a16:	90 e8       	ldi	r25, 0x80	; 128
    1a18:	0c c0       	rjmp	.+24     	; 0x1a32 <MS_Device_ConfigureEndpoints+0x40>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	81 17       	cp	r24, r17
    1a1e:	29 f0       	breq	.+10     	; 0x1a2a <MS_Device_ConfigureEndpoints+0x38>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1a20:	1f 5f       	subi	r17, 0xFF	; 255
    1a22:	17 30       	cpi	r17, 0x07	; 7
    1a24:	91 f7       	brne	.-28     	; 0x1a0a <MS_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	1d c0       	rjmp	.+58     	; 0x1a64 <MS_Device_ConfigureEndpoints+0x72>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1a2a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a2c:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1a2e:	88 85       	ldd	r24, Y+8	; 0x08
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    1a30:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1a32:	81 11       	cpse	r24, r1
    1a34:	84 e0       	ldi	r24, 0x04	; 4
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1a36:	28 e0       	ldi	r18, 0x08	; 8
    1a38:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a3c:	26 17       	cp	r18, r22
    1a3e:	37 07       	cpc	r19, r23
    1a40:	20 f4       	brcc	.+8      	; 0x1a4a <MS_Device_ConfigureEndpoints+0x58>
				{
					MaskVal++;
    1a42:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	f9 cf       	rjmp	.-14     	; 0x1a3c <MS_Device_ConfigureEndpoints+0x4a>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1a4a:	42 95       	swap	r20
    1a4c:	40 7f       	andi	r20, 0xF0	; 240
    1a4e:	82 60       	ori	r24, 0x02	; 2
    1a50:	48 2b       	or	r20, r24
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	91 11       	cpse	r25, r1
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <MS_Device_ConfigureEndpoints+0x68>
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	60 68       	ori	r22, 0x80	; 128
    1a5c:	81 2f       	mov	r24, r17
    1a5e:	ff d8       	rcall	.-3586   	; 0xc5e <Endpoint_ConfigureEndpoint_Prv>
    1a60:	81 11       	cpse	r24, r1
    1a62:	de cf       	rjmp	.-68     	; 0x1a20 <MS_Device_ConfigureEndpoints+0x2e>
			return false;
		}
	}

	return true;
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	08 95       	ret

00001a6c <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <MS_Device_USBTask+0xe>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1a7e:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_DeviceState>
    1a82:	24 30       	cpi	r18, 0x04	; 4
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <MS_Device_USBTask+0x1c>
    1a86:	fa c0       	rjmp	.+500    	; 0x1c7c <MS_Device_USBTask+0x210>
    1a88:	8c 01       	movw	r16, r24
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1a96:	85 ff       	sbrs	r24, 5
    1a98:	bb c0       	rjmp	.+374    	; 0x1c10 <MS_Device_USBTask+0x1a4>

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1a9a:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a9c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	
	BytesProcessed = 0;
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
    1aa2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1aa4:	78 01       	movw	r14, r16
    1aa6:	fa e0       	ldi	r31, 0x0A	; 10
    1aa8:	ef 0e       	add	r14, r31
    1aaa:	f1 1c       	adc	r15, r1
    1aac:	ae 01       	movw	r20, r28
    1aae:	4f 5f       	subi	r20, 0xFF	; 255
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	6f e0       	ldi	r22, 0x0F	; 15
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	53 db       	rcall	.-2394   	; 0x1160 <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1aba:	f8 01       	movw	r30, r16
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1abc:	85 30       	cpi	r24, 0x05	; 5
    1abe:	21 f4       	brne	.+8      	; 0x1ac8 <MS_Device_USBTask+0x5c>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ac0:	86 a9       	ldd	r24, Z+54	; 0x36
    1ac2:	88 23       	and	r24, r24
    1ac4:	99 f3       	breq	.-26     	; 0x1aac <MS_Device_USBTask+0x40>
    1ac6:	a4 c0       	rjmp	.+328    	; 0x1c10 <MS_Device_USBTask+0x1a4>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1ac8:	82 85       	ldd	r24, Z+10	; 0x0a
    1aca:	93 85       	ldd	r25, Z+11	; 0x0b
    1acc:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ace:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ad0:	85 35       	cpi	r24, 0x55	; 85
    1ad2:	93 45       	sbci	r25, 0x53	; 83
    1ad4:	a2 44       	sbci	r26, 0x42	; 66
    1ad6:	b3 44       	sbci	r27, 0x43	; 67
    1ad8:	61 f4       	brne	.+24     	; 0x1af2 <MS_Device_USBTask+0x86>
    1ada:	f8 01       	movw	r30, r16
    1adc:	97 89       	ldd	r25, Z+23	; 0x17
    1ade:	81 85       	ldd	r24, Z+9	; 0x09
    1ae0:	98 17       	cp	r25, r24
    1ae2:	38 f4       	brcc	.+14     	; 0x1af2 <MS_Device_USBTask+0x86>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1ae4:	86 89       	ldd	r24, Z+22	; 0x16
    1ae6:	8f 71       	andi	r24, 0x1F	; 31
    1ae8:	21 f4       	brne	.+8      	; 0x1af2 <MS_Device_USBTask+0x86>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1aea:	80 8d       	ldd	r24, Z+24	; 0x18
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	80 31       	cpi	r24, 0x10	; 16
    1af0:	78 f0       	brcs	.+30     	; 0x1b10 <MS_Device_USBTask+0xa4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1af2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1af6:	80 62       	ori	r24, 0x20	; 32
    1af8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1afc:	f8 01       	movw	r30, r16
    1afe:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b00:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b04:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b08:	80 62       	ori	r24, 0x20	; 32
    1b0a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b0e:	80 c0       	rjmp	.+256    	; 0x1c10 <MS_Device_USBTask+0x1a4>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1b10:	1a 82       	std	Y+2, r1	; 0x02
    1b12:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1b14:	78 01       	movw	r14, r16
    1b16:	f9 e1       	ldi	r31, 0x19	; 25
    1b18:	ef 0e       	add	r14, r31
    1b1a:	f1 1c       	adc	r15, r1
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	60 8d       	ldd	r22, Z+24	; 0x18
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	ae 01       	movw	r20, r28
    1b24:	4f 5f       	subi	r20, 0xFF	; 255
    1b26:	5f 4f       	sbci	r21, 0xFF	; 255
    1b28:	c7 01       	movw	r24, r14
    1b2a:	1a db       	rcall	.-2508   	; 0x1160 <Endpoint_Read_Stream_LE>
    1b2c:	85 30       	cpi	r24, 0x05	; 5
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <MS_Device_USBTask+0xce>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b30:	f8 01       	movw	r30, r16
    1b32:	86 a9       	ldd	r24, Z+54	; 0x36
    1b34:	88 23       	and	r24, r24
    1b36:	91 f3       	breq	.-28     	; 0x1b1c <MS_Device_USBTask+0xb0>
    1b38:	6b c0       	rjmp	.+214    	; 0x1c10 <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b3e:	8b 77       	andi	r24, 0x7B	; 123
    1b40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1b44:	f8 01       	movw	r30, r16
    1b46:	86 89       	ldd	r24, Z+22	; 0x16
    1b48:	87 ff       	sbrs	r24, 7
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <MS_Device_USBTask+0xe6>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b4c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b4e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 87 01 	call	0x30e	; 0x30e <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	98 27       	eor	r25, r24
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1b60:	45 e5       	ldi	r20, 0x55	; 85
    1b62:	53 e5       	ldi	r21, 0x53	; 83
    1b64:	62 e4       	ldi	r22, 0x42	; 66
    1b66:	73 e5       	ldi	r23, 0x53	; 83
    1b68:	41 a7       	std	Z+41, r20	; 0x29
    1b6a:	52 a7       	std	Z+42, r21	; 0x2a
    1b6c:	63 a7       	std	Z+43, r22	; 0x2b
    1b6e:	74 a7       	std	Z+44, r23	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1b70:	46 85       	ldd	r20, Z+14	; 0x0e
    1b72:	57 85       	ldd	r21, Z+15	; 0x0f
    1b74:	60 89       	ldd	r22, Z+16	; 0x10
    1b76:	71 89       	ldd	r23, Z+17	; 0x11
    1b78:	45 a7       	std	Z+45, r20	; 0x2d
    1b7a:	56 a7       	std	Z+46, r21	; 0x2e
    1b7c:	67 a7       	std	Z+47, r22	; 0x2f
    1b7e:	70 ab       	std	Z+48, r23	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1b80:	42 89       	ldd	r20, Z+18	; 0x12
    1b82:	53 89       	ldd	r21, Z+19	; 0x13
    1b84:	64 89       	ldd	r22, Z+20	; 0x14
    1b86:	75 89       	ldd	r23, Z+21	; 0x15
    1b88:	41 ab       	std	Z+49, r20	; 0x31
    1b8a:	52 ab       	std	Z+50, r21	; 0x32
    1b8c:	63 ab       	std	Z+51, r22	; 0x33
    1b8e:	74 ab       	std	Z+52, r23	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1b90:	81 11       	cpse	r24, r1
    1b92:	09 c0       	rjmp	.+18     	; 0x1ba6 <MS_Device_USBTask+0x13a>
    1b94:	45 2b       	or	r20, r21
    1b96:	46 2b       	or	r20, r22
    1b98:	47 2b       	or	r20, r23
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <MS_Device_USBTask+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b9c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ba0:	80 62       	ori	r24, 0x20	; 32
    1ba2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1baa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	while (Endpoint_IsStalled())
    1bb2:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1bb4:	06 c0       	rjmp	.+12     	; 0x1bc2 <MS_Device_USBTask+0x156>
    1bb6:	23 dd       	rcall	.-1466   	; 0x15fe <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bb8:	f8 01       	movw	r30, r16
    1bba:	86 a9       	ldd	r24, Z+54	; 0x36
    1bbc:	88 23       	and	r24, r24
    1bbe:	b9 f3       	breq	.-18     	; 0x1bae <MS_Device_USBTask+0x142>
    1bc0:	27 c0       	rjmp	.+78     	; 0x1c10 <MS_Device_USBTask+0x1a4>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1bc6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	while (Endpoint_IsStalled())
    1bce:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <MS_Device_USBTask+0x172>
    1bd2:	15 dd       	rcall	.-1494   	; 0x15fe <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	86 a9       	ldd	r24, Z+54	; 0x36
    1bd8:	88 23       	and	r24, r24
    1bda:	b9 f3       	breq	.-18     	; 0x1bca <MS_Device_USBTask+0x15e>
    1bdc:	19 c0       	rjmp	.+50     	; 0x1c10 <MS_Device_USBTask+0x1a4>
		  return;
	}

	uint16_t BytesProcessed = 0;
    1bde:	1a 82       	std	Y+2, r1	; 0x02
    1be0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1be2:	78 01       	movw	r14, r16
    1be4:	f9 e2       	ldi	r31, 0x29	; 41
    1be6:	ef 0e       	add	r14, r31
    1be8:	f1 1c       	adc	r15, r1
    1bea:	ae 01       	movw	r20, r28
    1bec:	4f 5f       	subi	r20, 0xFF	; 255
    1bee:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf0:	6d e0       	ldi	r22, 0x0D	; 13
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	1b da       	rcall	.-3018   	; 0x102e <Endpoint_Write_Stream_LE>
    1bf8:	85 30       	cpi	r24, 0x05	; 5
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <MS_Device_USBTask+0x19a>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	86 a9       	ldd	r24, Z+54	; 0x36
    1c00:	88 23       	and	r24, r24
    1c02:	99 f3       	breq	.-26     	; 0x1bea <MS_Device_USBTask+0x17e>
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c0a:	8e 77       	andi	r24, 0x7E	; 126
    1c0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1c10:	f8 01       	movw	r30, r16
    1c12:	86 a9       	ldd	r24, Z+54	; 0x36
    1c14:	88 23       	and	r24, r24
    1c16:	91 f1       	breq	.+100    	; 0x1c7c <MS_Device_USBTask+0x210>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	05 80       	ldd	r0, Z+5	; 0x05
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <MS_Device_USBTask+0x1ba>
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <MS_Device_USBTask+0x1b6>
    1c2a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1c2e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c32:	01 80       	ldd	r0, Z+1	; 0x01
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <MS_Device_USBTask+0x1ce>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <MS_Device_USBTask+0x1ca>
    1c3e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1c42:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1c46:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c48:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c4c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c50:	80 61       	ori	r24, 0x10	; 16
    1c52:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c5a:	88 60       	ori	r24, 0x08	; 8
    1c5c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c62:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c66:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c6a:	80 61       	ori	r24, 0x10	; 16
    1c6c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c74:	88 60       	ori	r24, 0x08	; 8
    1c76:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1c7a:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	08 95       	ret

00001c8e <__tablejump2__>:
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	00 24       	eor	r0, r0
    1c94:	00 1c       	adc	r0, r0
    1c96:	0b be       	out	0x3b, r0	; 59
    1c98:	07 90       	elpm	r0, Z+
    1c9a:	f6 91       	elpm	r31, Z
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	09 94       	ijmp

00001ca0 <fputs>:
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	db 01       	movw	r26, r22
    1cae:	13 96       	adiw	r26, 0x03	; 3
    1cb0:	2c 91       	ld	r18, X
    1cb2:	21 ff       	sbrs	r18, 1
    1cb4:	18 c0       	rjmp	.+48     	; 0x1ce6 <fputs+0x46>
    1cb6:	8b 01       	movw	r16, r22
    1cb8:	7c 01       	movw	r14, r24
    1cba:	d0 e0       	ldi	r29, 0x00	; 0
    1cbc:	c0 e0       	ldi	r28, 0x00	; 0
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	81 91       	ld	r24, Z+
    1cc2:	7f 01       	movw	r14, r30
    1cc4:	88 23       	and	r24, r24
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <fputs+0x40>
    1cc8:	d8 01       	movw	r26, r16
    1cca:	18 96       	adiw	r26, 0x08	; 8
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	19 97       	sbiw	r26, 0x09	; 9
    1cd2:	b8 01       	movw	r22, r16
    1cd4:	09 95       	icall
    1cd6:	89 2b       	or	r24, r25
    1cd8:	91 f3       	breq	.-28     	; 0x1cbe <fputs+0x1e>
    1cda:	df ef       	ldi	r29, 0xFF	; 255
    1cdc:	cf ef       	ldi	r28, 0xFF	; 255
    1cde:	ef cf       	rjmp	.-34     	; 0x1cbe <fputs+0x1e>
    1ce0:	8d 2f       	mov	r24, r29
    1ce2:	9c 2f       	mov	r25, r28
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <fputs+0x4a>
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	9f ef       	ldi	r25, 0xFF	; 255
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	08 95       	ret

00001cf8 <_exit>:
    1cf8:	f8 94       	cli

00001cfa <__stop_program>:
    1cfa:	ff cf       	rjmp	.-2      	; 0x1cfa <__stop_program>
