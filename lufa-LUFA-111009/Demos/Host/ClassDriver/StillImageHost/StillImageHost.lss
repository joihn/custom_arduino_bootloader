
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001e22  00001eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001eda  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000064c1  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000222a  00000000  00000000  00008735  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033f1  00000000  00000000  0000a95f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a90  00000000  00000000  0000dd50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002698  00000000  00000000  0000e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004257  00000000  00000000  00010e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  000150cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6e c1       	rjmp	.+732    	; 0x2de <__ctors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c1       	rjmp	.+776    	; 0x31a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c1       	rjmp	.+764    	; 0x31a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c1       	rjmp	.+756    	; 0x31a <__bad_interrupt>
      26:	00 00       	nop
      28:	80 c5       	rjmp	.+2816   	; 0xb2a <__vector_10>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c1       	rjmp	.+728    	; 0x31a <__bad_interrupt>
      42:	00 00       	nop
      44:	6a c1       	rjmp	.+724    	; 0x31a <__bad_interrupt>
      46:	00 00       	nop
      48:	68 c1       	rjmp	.+720    	; 0x31a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c1       	rjmp	.+716    	; 0x31a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	58 c1       	rjmp	.+688    	; 0x31a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	46 c1       	rjmp	.+652    	; 0x31a <__bad_interrupt>
      8e:	00 00       	nop
      90:	44 c1       	rjmp	.+648    	; 0x31a <__bad_interrupt>
      92:	00 00       	nop
      94:	42 c1       	rjmp	.+644    	; 0x31a <__bad_interrupt>
      96:	00 00       	nop
      98:	5a 03       	fmul	r21, r18
      9a:	4b 04       	cpc	r4, r11
      9c:	78 03       	fmul	r23, r16
      9e:	82 03       	fmuls	r16, r18
      a0:	ad 03       	fmulsu	r18, r21
      a2:	d5 03       	fmuls	r21, r21
      a4:	e0 03       	fmuls	r22, r16
      a6:	f1 03       	fmuls	r23, r17
      a8:	0d 04       	cpc	r0, r13
      aa:	34 04       	cpc	r3, r4

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4517>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4512>:
     131:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     141:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     151:	00                                                  .

00000152 <__c.4510>:
     152:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     162:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     172:	6f 6e 2e 0d 0a 00                                   on....

00000178 <__c.4508>:
     178:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     188:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     198:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     1a8:	76 69 63 65 2e 0d 0a 00                             vice....

000001b0 <__c.4506>:
     1b0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001dd <__c.4499>:
     1dd:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1ed:	68 65 64 2e 0d 0a 00                                hed....

000001f4 <__c.4494>:
     1f4:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     204:	0d 0a 00                                            ...

00000207 <__c.4489>:
     207:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     217:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000227 <__c.4487>:
     227:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     237:	2e 2e 0d 0a 00                                      .....

0000023c <__c.4485>:
     23c:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

0000024a <__c.4483>:
     24a:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     25a:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

00000267 <__c.4481>:
     267:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     277:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000027f <__c.4479>:
     27f:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
     28f:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

0000029e <__c.4477>:
     29e:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     2ae:	2e 2e 0d 0a 00                                      .....

000002b3 <__c.4468>:
     2b3:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     2c3:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2d3:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002de <__ctors_end>:
     2de:	11 24       	eor	r1, r1
     2e0:	1f be       	out	0x3f, r1	; 63
     2e2:	cf ef       	ldi	r28, 0xFF	; 255
     2e4:	d0 e2       	ldi	r29, 0x20	; 32
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	cd bf       	out	0x3d, r28	; 61

000002ea <__do_copy_data>:
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b1 e0       	ldi	r27, 0x01	; 1
     2f0:	e2 e2       	ldi	r30, 0x22	; 34
     2f2:	fe e1       	ldi	r31, 0x1E	; 30
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	0b bf       	out	0x3b, r16	; 59
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__do_copy_data+0x14>
     2fa:	07 90       	elpm	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	a4 32       	cpi	r26, 0x24	; 36
     300:	b1 07       	cpc	r27, r17
     302:	d9 f7       	brne	.-10     	; 0x2fa <__do_copy_data+0x10>

00000304 <__do_clear_bss>:
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	a4 e2       	ldi	r26, 0x24	; 36
     308:	b1 e0       	ldi	r27, 0x01	; 1
     30a:	01 c0       	rjmp	.+2      	; 0x30e <.do_clear_bss_start>

0000030c <.do_clear_bss_loop>:
     30c:	1d 92       	st	X+, r1

0000030e <.do_clear_bss_start>:
     30e:	a6 34       	cpi	r26, 0x46	; 70
     310:	b2 07       	cpc	r27, r18
     312:	e1 f7       	brne	.-8      	; 0x30c <.do_clear_bss_loop>
     314:	90 d0       	rcall	.+288    	; 0x436 <main>
     316:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <_exit>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     31c:	9b b1       	in	r25, 0x0b	; 11
     31e:	9f 70       	andi	r25, 0x0F	; 15
     320:	89 2b       	or	r24, r25
     322:	8b b9       	out	0x0b, r24	; 11
     324:	08 95       	ret

00000326 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     326:	84 b7       	in	r24, 0x34	; 52
     328:	87 7f       	andi	r24, 0xF7	; 247
     32a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	a8 95       	wdr
     332:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     336:	88 61       	ori	r24, 0x18	; 24
     338:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     33c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     340:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     34e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     352:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     354:	83 e3       	ldi	r24, 0x33	; 51
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     35c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     366:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     36a:	88 e1       	ldi	r24, 0x18	; 24
     36c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     370:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     372:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     374:	8a b1       	in	r24, 0x0a	; 10
     376:	80 6f       	ori	r24, 0xF0	; 240
     378:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     37a:	8b b1       	in	r24, 0x0b	; 11
     37c:	8f 70       	andi	r24, 0x0F	; 15
     37e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     380:	be d3       	rcall	.+1916   	; 0xafe <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     382:	a0 e4       	ldi	r26, 0x40	; 64
     384:	b1 e0       	ldi	r27, 0x01	; 1
     386:	e2 e3       	ldi	r30, 0x32	; 50
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	11 96       	adiw	r26, 0x01	; 1
     38c:	fc 93       	st	X, r31
     38e:	ee 93       	st	-X, r30
					stdout = Stream;
     390:	13 96       	adiw	r26, 0x03	; 3
     392:	fc 93       	st	X, r31
     394:	ee 93       	st	-X, r30
     396:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     398:	8e e0       	ldi	r24, 0x0E	; 14
     39a:	df 01       	movw	r26, r30
     39c:	1d 92       	st	X+, r1
     39e:	8a 95       	dec	r24
     3a0:	e9 f7       	brne	.-6      	; 0x39c <SetupHardware+0x76>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	83 83       	std	Z+3, r24	; 0x03
     3a6:	8d ed       	ldi	r24, 0xDD	; 221
     3a8:	9b e0       	ldi	r25, 0x0B	; 11
     3aa:	91 87       	std	Z+9, r25	; 0x09
     3ac:	80 87       	std	Z+8, r24	; 0x08
     3ae:	86 ee       	ldi	r24, 0xE6	; 230
     3b0:	9b e0       	ldi	r25, 0x0B	; 11
     3b2:	93 87       	std	Z+11, r25	; 0x0b
     3b4:	82 87       	std	Z+10, r24	; 0x0a
     3b6:	08 95       	ret

000003b8 <StillImageHost_Task>:
/** Task to manage an enumerated USB Still Image device once connected, to manage a
 *  new PIMA session in order to send commands to the attached device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     3b8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
     3bc:	8b 30       	cpi	r24, 0x0B	; 11
     3be:	d1 f5       	brne	.+116    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	  return;

	puts_P(PSTR("Opening Session...\r\n"));
     3c0:	8e e9       	ldi	r24, 0x9E	; 158
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>

	if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 9f 0a 	call	0x153e	; 0x153e <SI_Host_OpenSession>
     3d0:	88 23       	and	r24, r24
     3d2:	19 f0       	breq	.+6      	; 0x3da <StillImageHost_Task+0x22>
	{
		puts_P(PSTR("Could not open PIMA session.\r\n"));
     3d4:	8f e7       	ldi	r24, 0x7F	; 127
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	15 c0       	rjmp	.+42     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Turning off Device...\r\n"));
     3da:	87 e6       	ldi	r24, 0x67	; 103
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>

	SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x1013, 0, NULL);
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	63 e1       	ldi	r22, 0x13	; 19
     3ea:	70 e1       	ldi	r23, 0x10	; 16
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <SI_Host_SendCommand>
	if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 ae 0b 	call	0x175c	; 0x175c <SI_Host_ReceiveResponse>
     3fc:	88 23       	and	r24, r24
     3fe:	29 f0       	breq	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		puts_P(PSTR("Could not turn off device.\r\n"));
     400:	8a e4       	ldi	r24, 0x4A	; 74
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>
     408:	13 c0       	rjmp	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Device Off.\r\n"));
     40a:	8c e3       	ldi	r24, 0x3C	; 60
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>

	puts_P(PSTR("Closing Session...\r\n"));
     412:	87 e2       	ldi	r24, 0x27	; 39
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>

	if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 05 0b 	call	0x160a	; 0x160a <SI_Host_CloseSession>
     422:	88 23       	and	r24, r24
     424:	19 f0       	breq	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		puts_P(PSTR("Could not close PIMA session.\r\n"));
     426:	87 e0       	ldi	r24, 0x07	; 7
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	ec cf       	rjmp	.-40     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     42c:	80 e6       	ldi	r24, 0x60	; 96
     42e:	76 df       	rcall	.-276    	; 0x31c <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	72 c6       	rjmp	.+3300   	; 0x1118 <USB_Host_SetDeviceConfiguration>
     434:	08 95       	ret

00000436 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     436:	77 df       	rcall	.-274    	; 0x326 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     438:	83 eb       	ldi	r24, 0xB3	; 179
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     440:	80 e1       	ldi	r24, 0x10	; 16
     442:	6c df       	rcall	.-296    	; 0x31c <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		StillImageHost_Task();
     444:	78 94       	sei
     446:	b8 df       	rcall	.-144    	; 0x3b8 <StillImageHost_Task>
		
		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     448:	a0 d6       	rcall	.+3392   	; 0x118a <USB_USBTask>
     44a:	fd cf       	rjmp	.-6      	; 0x446 <main+0x10>

0000044c <EVENT_USB_Host_DeviceAttached>:
     44c:	84 ef       	ldi	r24, 0xF4	; 244
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     454:	80 ea       	ldi	r24, 0xA0	; 160
     456:	62 cf       	rjmp	.-316    	; 0x31c <LEDs_SetAllLEDs>

00000458 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     458:	8d ed       	ldi	r24, 0xDD	; 221
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	5c cf       	rjmp	.-328    	; 0x31c <LEDs_SetAllLEDs>

00000464 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	c2 50       	subi	r28, 0x02	; 2
     46e:	d2 40       	sbci	r29, 0x02	; 2
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     47a:	80 ea       	ldi	r24, 0xA0	; 160
     47c:	4f df       	rcall	.-354    	; 0x31c <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	32 e0       	ldi	r19, 0x02	; 2
     482:	ae 01       	movw	r20, r28
     484:	4f 5f       	subi	r20, 0xFF	; 255
     486:	5f 4f       	sbci	r21, 0xFF	; 255
     488:	be 01       	movw	r22, r28
     48a:	6f 5f       	subi	r22, 0xFF	; 255
     48c:	7d 4f       	sbci	r23, 0xFD	; 253
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	9b d4       	rcall	.+2358   	; 0xdc8 <USB_Host_GetDeviceConfigDescriptor>
     492:	88 23       	and	r24, r24
     494:	19 f0       	breq	.+6      	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     496:	80 eb       	ldi	r24, 0xB0	; 176
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	17 c0       	rjmp	.+46     	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     49c:	cf 5f       	subi	r28, 0xFF	; 255
     49e:	dd 4f       	sbci	r29, 0xFD	; 253
     4a0:	68 81       	ld	r22, Y
     4a2:	79 81       	ldd	r23, Y+1	; 0x01
     4a4:	c1 50       	subi	r28, 0x01	; 1
     4a6:	d2 40       	sbci	r29, 0x02	; 2
     4a8:	ae 01       	movw	r20, r28
     4aa:	4f 5f       	subi	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	9f d6       	rcall	.+3390   	; 0x11f2 <SI_Host_ConfigurePipes>
     4b4:	88 23       	and	r24, r24
     4b6:	19 f0       	breq	.+6      	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     4b8:	88 e7       	ldi	r24, 0x78	; 120
     4ba:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	2b d6       	rcall	.+3158   	; 0x1118 <USB_Host_SetDeviceConfiguration>
     4c2:	88 23       	and	r24, r24
     4c4:	31 f0       	breq	.+12     	; 0x4d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4c6:	82 e5       	ldi	r24, 0x52	; 82
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4ce:	80 e9       	ldi	r24, 0x90	; 144
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     4d2:	81 e3       	ldi	r24, 0x31	; 49
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 31 0c 	call	0x1862	; 0x1862 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     4da:	80 e6       	ldi	r24, 0x60	; 96
     4dc:	1f df       	rcall	.-450    	; 0x31c <LEDs_SetAllLEDs>
}
     4de:	ce 5f       	subi	r28, 0xFE	; 254
     4e0:	dd 4f       	sbci	r29, 0xFD	; 253
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4f2:	c8 2f       	mov	r28, r24
	USB_Disable();
     4f4:	9c d2       	rcall	.+1336   	; 0xa2e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4f6:	1f 92       	push	r1
     4f8:	cf 93       	push	r28
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	9f 93       	push	r25
     500:	8f 93       	push	r24
     502:	0e 94 0a 0c 	call	0x1814	; 0x1814 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     506:	80 e9       	ldi	r24, 0x90	; 144
     508:	09 df       	rcall	.-494    	; 0x31c <LEDs_SetAllLEDs>
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	ff cf       	rjmp	.-2      	; 0x512 <EVENT_USB_Host_HostError+0x20>

00000514 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     514:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_HostState>
     518:	1f 92       	push	r1
     51a:	9f 93       	push	r25
     51c:	1f 92       	push	r1
     51e:	6f 93       	push	r22
     520:	1f 92       	push	r1
     522:	8f 93       	push	r24
     524:	8c ea       	ldi	r24, 0xAC	; 172
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     530:	8d b7       	in	r24, 0x3d	; 61
     532:	9e b7       	in	r25, 0x3e	; 62
     534:	08 96       	adiw	r24, 0x08	; 8
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	9e bf       	out	0x3e, r25	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	8d bf       	out	0x3d, r24	; 61
     540:	80 e9       	ldi	r24, 0x90	; 144
     542:	ec ce       	rjmp	.-552    	; 0x31c <LEDs_SetAllLEDs>

00000544 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     544:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     548:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     54a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     54e:	9d 7f       	andi	r25, 0xFD	; 253
     550:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     554:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     558:	92 60       	ori	r25, 0x02	; 2
     55a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     55e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     562:	91 fd       	sbrc	r25, 1
     564:	fc cf       	rjmp	.-8      	; 0x55e <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     566:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     56a:	91 60       	ori	r25, 0x01	; 1
     56c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     570:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     574:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     578:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     57a:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     57e:	2f 7d       	andi	r18, 0xDF	; 223
     580:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     584:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     588:	2f 7d       	andi	r18, 0xDF	; 223
     58a:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     58e:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     590:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     594:	35 ff       	sbrs	r19, 5
     596:	0b c0       	rjmp	.+22     	; 0x5ae <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     598:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     59c:	2f 7d       	andi	r18, 0xDF	; 223
     59e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     5a2:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5a6:	2d 7f       	andi	r18, 0xFD	; 253
     5a8:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	ef ec       	ldi	r30, 0xCF	; 207
     5b0:	f7 e0       	ldi	r31, 0x07	; 7
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <USB_Host_ResetDevice+0x6e>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <USB_Host_ResetDevice+0x74>
     5b8:	00 00       	nop
     5ba:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5bc:	49 f7       	brne	.-46     	; 0x590 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5be:	99 23       	and	r25, r25
     5c0:	29 f0       	breq	.+10     	; 0x5cc <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5c2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5c6:	90 62       	ori	r25, 0x20	; 32
     5c8:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5cc:	81 11       	cpse	r24, r1
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5d0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5d4:	8e 7f       	andi	r24, 0xFE	; 254
     5d6:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5de:	82 60       	ori	r24, 0x02	; 2
     5e0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5e4:	08 95       	ret

000005e6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5e6:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5ea:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5ec:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5f0:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5f2:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5f6:	3f 7d       	andi	r19, 0xDF	; 223
     5f8:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5fc:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     600:	3f 7d       	andi	r19, 0xDF	; 223
     602:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     606:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     60a:	31 60       	ori	r19, 0x01	; 1
     60c:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     610:	88 23       	and	r24, r24
     612:	39 f1       	breq	.+78     	; 0x662 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     614:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     618:	35 ff       	sbrs	r19, 5
     61a:	06 c0       	rjmp	.+12     	; 0x628 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     61c:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     620:	3f 7d       	andi	r19, 0xDF	; 223
     622:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     626:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     628:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <USB_HostState>
     62c:	31 30       	cpi	r19, 0x01	; 1
     62e:	c1 f0       	breq	.+48     	; 0x660 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     630:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     634:	34 ff       	sbrs	r19, 4
     636:	09 c0       	rjmp	.+18     	; 0x64a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     638:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     63c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     640:	8f 7e       	andi	r24, 0xEF	; 239
     642:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     646:	82 e0       	ldi	r24, 0x02	; 2

			break;
     648:	0c c0       	rjmp	.+24     	; 0x662 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     64a:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     64e:	31 ff       	sbrs	r19, 1
     650:	df cf       	rjmp	.-66     	; 0x610 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     652:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     656:	8d 7f       	andi	r24, 0xFD	; 253
     658:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     65c:	83 e0       	ldi	r24, 0x03	; 3

			break;
     65e:	01 c0       	rjmp	.+2      	; 0x662 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     660:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     662:	21 11       	cpse	r18, r1
     664:	05 c0       	rjmp	.+10     	; 0x670 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     666:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     66a:	2e 7f       	andi	r18, 0xFE	; 254
     66c:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     670:	99 23       	and	r25, r25
     672:	29 f0       	breq	.+10     	; 0x67e <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     674:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     678:	90 62       	ori	r25, 0x20	; 32
     67a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     67e:	08 95       	ret

00000680 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     680:	ef 92       	push	r14
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	28 97       	sbiw	r28, 0x08	; 8
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     69a:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <USB_HostState>
     69e:	8e 2f       	mov	r24, r30
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	8a 30       	cpi	r24, 0x0A	; 10
     6a4:	91 05       	cpc	r25, r1
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <USB_Host_ProcessNextHostState+0x2a>
     6a8:	f6 c0       	rjmp	.+492    	; 0x896 <USB_Host_ProcessNextHostState+0x216>
     6aa:	fc 01       	movw	r30, r24
     6ac:	e4 5b       	subi	r30, 0xB4	; 180
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6b4:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <WaitMSRemaining.2935>
     6b8:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <WaitMSRemaining.2935+0x1>
     6bc:	01 15       	cp	r16, r1
     6be:	11 05       	cpc	r17, r1
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <USB_Host_ProcessNextHostState+0x44>
     6c2:	e9 c0       	rjmp	.+466    	; 0x896 <USB_Host_ProcessNextHostState+0x216>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	8f df       	rcall	.-226    	; 0x5e6 <USB_Host_WaitMS>
     6c8:	88 23       	and	r24, r24
     6ca:	31 f0       	breq	.+12     	; 0x6d8 <USB_Host_ProcessNextHostState+0x58>
				{
					USB_HostState = PostWaitState;
     6cc:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
     6d0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     6d4:	91 e0       	ldi	r25, 0x01	; 1
					break;
     6d6:	d1 c0       	rjmp	.+418    	; 0x87a <USB_Host_ProcessNextHostState+0x1fa>
				}

				if (!(--WaitMSRemaining))
     6d8:	01 50       	subi	r16, 0x01	; 1
     6da:	11 09       	sbc	r17, r1
     6dc:	10 93 26 01 	sts	0x0126, r17	; 0x800126 <WaitMSRemaining.2935+0x1>
     6e0:	00 93 25 01 	sts	0x0125, r16	; 0x800125 <WaitMSRemaining.2935>
     6e4:	01 2b       	or	r16, r17
     6e6:	09 f0       	breq	.+2      	; 0x6ea <USB_Host_ProcessNextHostState+0x6a>
     6e8:	d6 c0       	rjmp	.+428    	; 0x896 <USB_Host_ProcessNextHostState+0x216>
				  USB_HostState = PostWaitState;
     6ea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <USB_Host_ProcessNextHostState+0x7e>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     6f0:	88 ee       	ldi	r24, 0xE8	; 232
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     6f8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
			break;
     702:	c9 c0       	rjmp	.+402    	; 0x896 <USB_Host_ProcessNextHostState+0x216>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     704:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <WaitMSRemaining.2935>
     708:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <WaitMSRemaining.2935+0x1>
     70c:	9c 01       	movw	r18, r24
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	31 09       	sbc	r19, r1
     712:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <WaitMSRemaining.2935+0x1>
     716:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <WaitMSRemaining.2935>
     71a:	89 2b       	or	r24, r25
     71c:	39 f0       	breq	.+14     	; 0x72c <USB_Host_ProcessNextHostState+0xac>
     71e:	8f ec       	ldi	r24, 0xCF	; 207
     720:	97 e0       	ldi	r25, 0x07	; 7
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <USB_Host_ProcessNextHostState+0xa2>
     726:	00 c0       	rjmp	.+0      	; 0x728 <USB_Host_ProcessNextHostState+0xa8>
     728:	00 00       	nop
     72a:	b5 c0       	rjmp	.+362    	; 0x896 <USB_Host_ProcessNextHostState+0x216>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     72c:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     72e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     732:	80 61       	ori	r24, 0x10	; 16
     734:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     738:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     73c:	8b 7f       	andi	r24, 0xFB	; 251
     73e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     742:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     746:	80 61       	ori	r24, 0x10	; 16
     748:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     74c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	d2 cf       	rjmp	.-92     	; 0x6fe <USB_Host_ProcessNextHostState+0x7e>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     75a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     75e:	80 ff       	sbrs	r24, 0
     760:	9a c0       	rjmp	.+308    	; 0x896 <USB_Host_ProcessNextHostState+0x216>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     762:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     766:	8e 7f       	andi	r24, 0xFE	; 254
     768:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     76c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     770:	8d 7f       	andi	r24, 0xFD	; 253
     772:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     776:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     77a:	8d 7f       	andi	r24, 0xFD	; 253
     77c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     780:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     784:	82 60       	ori	r24, 0x02	; 2
     786:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     78a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     78e:	81 60       	ori	r24, 0x01	; 1
     790:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     794:	e8 d0       	rcall	.+464    	; 0x966 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     796:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     79a:	84 e6       	ldi	r24, 0x64	; 100
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     7a2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     7a6:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7a8:	5c c0       	rjmp	.+184    	; 0x862 <USB_Host_ProcessNextHostState+0x1e2>
     7aa:	cc de       	rcall	.-616    	; 0x544 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7ac:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     7b0:	88 ec       	ldi	r24, 0xC8	; 200
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     7b8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     7bc:	86 e0       	ldi	r24, 0x06	; 6
     7be:	51 c0       	rjmp	.+162    	; 0x862 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7c0:	e1 2c       	mov	r14, r1
     7c2:	00 e4       	ldi	r16, 0x40	; 64
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	6f d0       	rcall	.+222    	; 0x8ae <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     7d0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     7d4:	87 fd       	sbrc	r24, 7
     7d6:	03 c0       	rjmp	.+6      	; 0x7de <USB_Host_ProcessNextHostState+0x15e>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	4e c0       	rjmp	.+156    	; 0x87a <USB_Host_ProcessNextHostState+0x1fa>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7de:	87 e0       	ldi	r24, 0x07	; 7
     7e0:	8e cf       	rjmp	.-228    	; 0x6fe <USB_Host_ProcessNextHostState+0x7e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7e2:	88 e0       	ldi	r24, 0x08	; 8
     7e4:	e4 e1       	ldi	r30, 0x14	; 20
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	a9 e2       	ldi	r26, 0x29	; 41
     7ea:	b1 e0       	ldi	r27, 0x01	; 1
     7ec:	01 90       	ld	r0, Z+
     7ee:	0d 92       	st	X+, r0
     7f0:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <USB_Host_ProcessNextHostState+0x16c>
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	99 d3       	rcall	.+1842   	; 0xf2c <USB_Host_SendControlRequest>
     7fa:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7fc:	3d c0       	rjmp	.+122    	; 0x878 <USB_Host_ProcessNextHostState+0x1f8>
     7fe:	88 85       	ldd	r24, Y+8	; 0x08
     800:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     804:	9f de       	rcall	.-706    	; 0x544 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     806:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     80a:	88 ec       	ldi	r24, 0xC8	; 200
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     812:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	24 c0       	rjmp	.+72     	; 0x862 <USB_Host_ProcessNextHostState+0x1e2>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     81a:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	e1 2c       	mov	r14, r1
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	41 d0       	rcall	.+130    	; 0x8ae <Pipe_ConfigurePipe>
     82c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     830:	87 ff       	sbrs	r24, 7
     832:	d2 cf       	rjmp	.-92     	; 0x7d8 <USB_Host_ProcessNextHostState+0x158>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     834:	88 e0       	ldi	r24, 0x08	; 8
     836:	ec e1       	ldi	r30, 0x1C	; 28
     838:	f1 e0       	ldi	r31, 0x01	; 1
     83a:	a9 e2       	ldi	r26, 0x29	; 41
     83c:	b1 e0       	ldi	r27, 0x01	; 1
     83e:	01 90       	ld	r0, Z+
     840:	0d 92       	st	X+, r0
     842:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     844:	e1 f7       	brne	.-8      	; 0x83e <USB_Host_ProcessNextHostState+0x1be>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	70 d3       	rcall	.+1760   	; 0xf2c <USB_Host_SendControlRequest>
     84c:	81 11       	cpse	r24, r1
     84e:	14 c0       	rjmp	.+40     	; 0x878 <USB_Host_ProcessNextHostState+0x1f8>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     850:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <USB_HostState>
     854:	84 e6       	ldi	r24, 0x64	; 100
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <WaitMSRemaining.2935+0x1>
     85c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <WaitMSRemaining.2935>
     860:	89 e0       	ldi	r24, 0x09	; 9
     862:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     866:	17 c0       	rjmp	.+46     	; 0x896 <USB_Host_ProcessNextHostState+0x216>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     86e:	8a e0       	ldi	r24, 0x0A	; 10
     870:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     874:	f7 dd       	rcall	.-1042   	; 0x464 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     876:	0f c0       	rjmp	.+30     	; 0x896 <USB_Host_ProcessNextHostState+0x216>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     87e:	21 30       	cpi	r18, 0x01	; 1
     880:	51 f0       	breq	.+20     	; 0x896 <USB_Host_ProcessNextHostState+0x216>
     882:	68 2f       	mov	r22, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     884:	89 2f       	mov	r24, r25
     886:	46 de       	rcall	.-884    	; 0x514 <EVENT_USB_Host_DeviceEnumerationFailed>
     888:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     88c:	81 60       	ori	r24, 0x01	; 1

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     88e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_ResetInterface();
     892:	e2 dd       	rcall	.-1084   	; 0x458 <EVENT_USB_Host_DeviceUnattached>
     894:	e4 d0       	rcall	.+456    	; 0xa5e <USB_ResetInterface>
	}
}
     896:	28 96       	adiw	r28, 0x08	; 8
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8ae:	ef 92       	push	r14
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8b4:	2f 70       	andi	r18, 0x0F	; 15
     8b6:	42 2b       	or	r20, r18
     8b8:	90 e4       	ldi	r25, 0x40	; 64
     8ba:	69 9f       	mul	r22, r25
     8bc:	b0 01       	movw	r22, r0
     8be:	11 24       	eor	r1, r1
     8c0:	64 2b       	or	r22, r20

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8c2:	38 2f       	mov	r19, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8c4:	2e 2d       	mov	r18, r14
     8c6:	22 60       	ori	r18, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8c8:	37 30       	cpi	r19, 0x07	; 7
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <Pipe_ConfigurePipe+0x20>
     8cc:	45 c0       	rjmp	.+138    	; 0x958 <Pipe_ConfigurePipe+0xaa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ce:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     8d2:	38 13       	cpse	r19, r24
     8d4:	13 c0       	rjmp	.+38     	; 0x8fc <Pipe_ConfigurePipe+0x4e>
     8d6:	48 e0       	ldi	r20, 0x08	; 8
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8dc:	40 17       	cp	r20, r16
     8de:	51 07       	cpc	r21, r17
     8e0:	38 f0       	brcs	.+14     	; 0x8f0 <Pipe_ConfigurePipe+0x42>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8e2:	92 95       	swap	r25
     8e4:	90 7f       	andi	r25, 0xF0	; 240
     8e6:	92 2b       	or	r25, r18

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8e8:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     8ea:	50 e0       	ldi	r21, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	0e c0       	rjmp	.+28     	; 0x90c <Pipe_ConfigurePipe+0x5e>
     8f0:	95 30       	cpi	r25, 0x05	; 5
     8f2:	b9 f3       	breq	.-18     	; 0x8e2 <Pipe_ConfigurePipe+0x34>
				{
					MaskVal++;
     8f4:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     8f6:	44 0f       	add	r20, r20
     8f8:	55 1f       	adc	r21, r21
     8fa:	f0 cf       	rjmp	.-32     	; 0x8dc <Pipe_ConfigurePipe+0x2e>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     8fc:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			UPCFG1XTemp = UPCFG1X;
     900:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			UPCFG2XTemp = UPCFG2X;
     904:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
			UPIENXTemp  = UPIENX;
     908:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     90c:	91 fd       	sbrc	r25, 1
     90e:	02 c0       	rjmp	.+4      	; 0x914 <Pipe_ConfigurePipe+0x66>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     910:	3f 5f       	subi	r19, 0xFF	; 255
     912:	da cf       	rjmp	.-76     	; 0x8c8 <Pipe_ConfigurePipe+0x1a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     914:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     918:	4e 7f       	andi	r20, 0xFE	; 254
     91a:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     91e:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     922:	4d 7f       	andi	r20, 0xFD	; 253
     924:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     928:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     92c:	41 60       	ori	r20, 0x01	; 1
     92e:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     932:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
		UPCFG1X = UPCFG1XTemp;
     936:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
		UPCFG2X = UPCFG2XTemp;
     93a:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
		UPIENX  = UPIENXTemp;
     93e:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     942:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     946:	90 62       	ori	r25, 0x20	; 32
     948:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     94c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     950:	97 fd       	sbrc	r25, 7
     952:	de cf       	rjmp	.-68     	; 0x910 <Pipe_ConfigurePipe+0x62>
		  return false;		
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	03 c0       	rjmp	.+6      	; 0x95e <Pipe_ConfigurePipe+0xb0>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     958:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     95c:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ef 90       	pop	r14
     964:	08 95       	ret

00000966 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     966:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     970:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		UPINTX  = 0;
     974:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		UPCFG1X = 0;
     978:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     97c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     980:	9e 7f       	andi	r25, 0xFE	; 254
     982:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	87 30       	cpi	r24, 0x07	; 7
     98a:	81 f7       	brne	.-32     	; 0x96c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     98c:	08 95       	ret

0000098e <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     98e:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     992:	37 70       	andi	r19, 0x07	; 7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     994:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     996:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     99a:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     99e:	27 ff       	sbrs	r18, 7
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9a2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     9a6:	42 2f       	mov	r20, r18
     9a8:	4f 70       	andi	r20, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9aa:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9ae:	20 73       	andi	r18, 0x30	; 48
     9b0:	20 31       	cpi	r18, 0x10	; 16
     9b2:	11 f0       	breq	.+4      	; 0x9b8 <Pipe_IsEndpointBound+0x2a>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <Pipe_IsEndpointBound+0x2c>
     9b8:	20 e8       	ldi	r18, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9ba:	24 2b       	or	r18, r20
     9bc:	82 17       	cp	r24, r18
     9be:	39 f0       	breq	.+14     	; 0x9ce <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	97 30       	cpi	r25, 0x07	; 7
     9c4:	41 f7       	brne	.-48     	; 0x996 <Pipe_IsEndpointBound+0x8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9c6:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     9d0:	08 95       	ret

000009d2 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     9d2:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     9d6:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     9da:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9dc:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     9e0:	90 73       	andi	r25, 0x30	; 48
     9e2:	90 31       	cpi	r25, 0x10	; 16
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     9e6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     9ea:	90 ff       	sbrs	r25, 0
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <Pipe_WaitUntilReady+0x26>
     9ee:	19 c0       	rjmp	.+50     	; 0xa22 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     9f0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     9f4:	92 fd       	sbrc	r25, 2
     9f6:	15 c0       	rjmp	.+42     	; 0xa22 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9f8:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     9fc:	91 fd       	sbrc	r25, 1
     9fe:	13 c0       	rjmp	.+38     	; 0xa26 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a00:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_HostState>
     a04:	91 30       	cpi	r25, 0x01	; 1
     a06:	89 f0       	breq	.+34     	; 0xa2a <Pipe_WaitUntilReady+0x58>
     a08:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a0c:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a10:	42 17       	cp	r20, r18
     a12:	53 07       	cpc	r21, r19
     a14:	19 f3       	breq	.-58     	; 0x9dc <Pipe_WaitUntilReady+0xa>
     a16:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a18:	11 f0       	breq	.+4      	; 0xa1e <Pipe_WaitUntilReady+0x4c>
     a1a:	a9 01       	movw	r20, r18
     a1c:	df cf       	rjmp	.-66     	; 0x9dc <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a2a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a2c:	08 95       	ret

00000a2e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a2e:	70 d0       	rcall	.+224    	; 0xb10 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a30:	77 d0       	rcall	.+238    	; 0xb20 <USB_INT_ClearAllInterrupts>
     a32:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	80 83       	st	Z, r24
     a3c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8f 77       	andi	r24, 0x7F	; 127
     a44:	80 83       	st	Z, r24
     a46:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a48:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	8c 91       	ld	r24, X
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	8c 93       	st	X, r24
     a52:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a54:	8f 7e       	andi	r24, 0xEF	; 239
     a56:	80 83       	st	Z, r24
     a58:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a5c:	08 95       	ret

00000a5e <USB_ResetInterface>:
     a5e:	58 d0       	rcall	.+176    	; 0xb10 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     a60:	5f d0       	rcall	.+190    	; 0xb20 <USB_INT_ClearAllInterrupts>
     a62:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a6c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     a70:	80 68       	ori	r24, 0x80	; 128
     a72:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a76:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a7a:	8f 7d       	andi	r24, 0xDF	; 223
     a7c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a80:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     a8a:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a8c:	89 bd       	out	0x29, r24	; 41
     a8e:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a90:	89 bd       	out	0x29, r24	; 41
     a92:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     a94:	00 fe       	sbrs	r0, 0
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <USB_ResetInterface+0x34>
     a98:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a9a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     a9e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     aa2:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     aa4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Host_ControlPipeSize>
     aa8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     aac:	80 64       	ori	r24, 0x40	; 64
     aae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ab2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     abc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ac0:	84 60       	ori	r24, 0x04	; 4
     ac2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     ac6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     aca:	8f 7e       	andi	r24, 0xEF	; 239
     acc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     ad0:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     ad2:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ad4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     ad8:	81 60       	ori	r24, 0x01	; 1
     ada:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ade:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ae2:	84 60       	ori	r24, 0x04	; 4
     ae4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ae8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     aec:	8e 7f       	andi	r24, 0xFE	; 254
     aee:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     af2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     af6:	80 61       	ori	r24, 0x10	; 16
     af8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     afc:	08 95       	ret

00000afe <USB_Init>:
     afe:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	81 60       	ori	r24, 0x01	; 1
     b06:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <USB_IsInitialized>

	USB_ResetInterface();
     b0e:	a7 cf       	rjmp	.-178    	; 0xa5e <USB_ResetInterface>

00000b10 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b10:	e8 ed       	ldi	r30, 0xD8	; 216
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8c 7f       	andi	r24, 0xFC	; 252
     b18:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b1a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b1e:	08 95       	ret

00000b20 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b20:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b24:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b28:	08 95       	ret

00000b2a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	0b b6       	in	r0, 0x3b	; 59
     b36:	0f 92       	push	r0
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b50:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b54:	85 ff       	sbrs	r24, 5
     b56:	0a c0       	rjmp	.+20     	; 0xb6c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b58:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b5c:	85 ff       	sbrs	r24, 5
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b60:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b64:	8f 7d       	andi	r24, 0xDF	; 223
     b66:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b6a:	b9 d1       	rcall	.+882    	; 0xede <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b6c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b70:	81 ff       	sbrs	r24, 1
     b72:	15 c0       	rjmp	.+42     	; 0xb9e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b74:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b78:	81 ff       	sbrs	r24, 1
     b7a:	11 c0       	rjmp	.+34     	; 0xb9e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b7c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b80:	8d 7f       	andi	r24, 0xFD	; 253
     b82:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b86:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b90:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b94:	8d 7f       	andi	r24, 0xFD	; 253
     b96:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     b9a:	5e dc       	rcall	.-1860   	; 0x458 <EVENT_USB_Host_DeviceUnattached>
     b9c:	60 df       	rcall	.-320    	; 0xa5e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     b9e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ba2:	81 ff       	sbrs	r24, 1
     ba4:	15 c0       	rjmp	.+42     	; 0xbd0 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ba6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     baa:	81 ff       	sbrs	r24, 1
     bac:	11 c0       	rjmp	.+34     	; 0xbd0 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bae:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     bb2:	8d 7f       	andi	r24, 0xFD	; 253
     bb4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bb8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bba:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	95 dc       	rcall	.-1750   	; 0x4f2 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     bc8:	47 dc       	rcall	.-1906   	; 0x458 <EVENT_USB_Host_DeviceUnattached>
     bca:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     bcc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     bd0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     bd4:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     bd6:	17 c0       	rjmp	.+46     	; 0xc06 <__vector_10+0xdc>
     bd8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     bdc:	80 ff       	sbrs	r24, 0
     bde:	13 c0       	rjmp	.+38     	; 0xc06 <__vector_10+0xdc>
     be0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     bea:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     bf4:	2b dc       	rcall	.-1962   	; 0x44c <EVENT_USB_Host_DeviceAttached>
     bf6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c00:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c02:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <USB_HostState>
     c06:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c0a:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <__vector_10+0x100>
     c0e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c12:	82 ff       	sbrs	r24, 2
     c14:	0a c0       	rjmp	.+20     	; 0xc2a <__vector_10+0x100>
     c16:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c1a:	8b 7f       	andi	r24, 0xFB	; 251
     c1c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	77 dc       	rcall	.-1810   	; 0x514 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c26:	18 dc       	rcall	.-2000   	; 0x458 <EVENT_USB_Host_DeviceUnattached>
     c28:	1a df       	rcall	.-460    	; 0xa5e <USB_ResetInterface>

		USB_ResetInterface();
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0b be       	out	0x3b, r0	; 59
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <Pipe_Write_Stream_LE>:
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	8b 01       	movw	r16, r22
     c64:	7a 01       	movw	r14, r20
     c66:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     c6a:	8f 7c       	andi	r24, 0xCF	; 207
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     c72:	af de       	rcall	.-674    	; 0x9d2 <Pipe_WaitUntilReady>
     c74:	81 11       	cpse	r24, r1
     c76:	32 c0       	rjmp	.+100    	; 0xcdc <Pipe_Write_Stream_LE+0x8c>
     c78:	e1 14       	cp	r14, r1
     c7a:	f1 04       	cpc	r15, r1
     c7c:	39 f0       	breq	.+14     	; 0xc8c <Pipe_Write_Stream_LE+0x3c>
     c7e:	f7 01       	movw	r30, r14
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	08 1b       	sub	r16, r24
     c86:	19 0b       	sbc	r17, r25
     c88:	c8 0f       	add	r28, r24
     c8a:	d9 1f       	adc	r29, r25
     c8c:	c1 2c       	mov	r12, r1
     c8e:	d1 2c       	mov	r13, r1
     c90:	01 15       	cp	r16, r1
     c92:	11 05       	cpc	r17, r1
     c94:	11 f1       	breq	.+68     	; 0xcda <Pipe_Write_Stream_LE+0x8a>
     c96:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     c9a:	85 fd       	sbrc	r24, 5
     c9c:	15 c0       	rjmp	.+42     	; 0xcc8 <Pipe_Write_Stream_LE+0x78>
     c9e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ca2:	8b 77       	andi	r24, 0x7B	; 123
     ca4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ca8:	e1 14       	cp	r14, r1
     caa:	f1 04       	cpc	r15, r1
     cac:	49 f0       	breq	.+18     	; 0xcc0 <Pipe_Write_Stream_LE+0x70>
     cae:	f7 01       	movw	r30, r14
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	c8 0e       	add	r12, r24
     cb6:	d9 1e       	adc	r13, r25
     cb8:	d1 82       	std	Z+1, r13	; 0x01
     cba:	c0 82       	st	Z, r12
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <Pipe_Write_Stream_LE+0x8c>
     cc0:	88 de       	rcall	.-752    	; 0x9d2 <Pipe_WaitUntilReady>
     cc2:	88 23       	and	r24, r24
     cc4:	29 f3       	breq	.-54     	; 0xc90 <Pipe_Write_Stream_LE+0x40>
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <Pipe_Write_Stream_LE+0x8c>
     cc8:	89 91       	ld	r24, Y+
     cca:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     cce:	01 50       	subi	r16, 0x01	; 1
     cd0:	11 09       	sbc	r17, r1
     cd2:	ff ef       	ldi	r31, 0xFF	; 255
     cd4:	cf 1a       	sub	r12, r31
     cd6:	df 0a       	sbc	r13, r31
     cd8:	db cf       	rjmp	.-74     	; 0xc90 <Pipe_Write_Stream_LE+0x40>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	08 95       	ret

00000cee <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	8b 01       	movw	r16, r22
     d02:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d04:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d08:	8f 7c       	andi	r24, 0xCF	; 207
     d0a:	80 61       	ori	r24, 0x10	; 16
     d0c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d10:	60 de       	rcall	.-832    	; 0x9d2 <Pipe_WaitUntilReady>
     d12:	81 11       	cpse	r24, r1
     d14:	32 c0       	rjmp	.+100    	; 0xd7a <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d16:	e1 14       	cp	r14, r1
     d18:	f1 04       	cpc	r15, r1
     d1a:	39 f0       	breq	.+14     	; 0xd2a <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     d1c:	f7 01       	movw	r30, r14
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	08 1b       	sub	r16, r24
     d24:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d26:	c8 0f       	add	r28, r24
     d28:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d2a:	c1 2c       	mov	r12, r1
     d2c:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d2e:	01 15       	cp	r16, r1
     d30:	11 05       	cpc	r17, r1
     d32:	11 f1       	breq	.+68     	; 0xd78 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d34:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d38:	85 fd       	sbrc	r24, 5
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d3c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     d40:	8e 77       	andi	r24, 0x7E	; 126
     d42:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d46:	e1 14       	cp	r14, r1
     d48:	f1 04       	cpc	r15, r1
     d4a:	49 f0       	breq	.+18     	; 0xd5e <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     d4c:	f7 01       	movw	r30, r14
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	c8 0e       	add	r12, r24
     d54:	d9 1e       	adc	r13, r25
     d56:	d1 82       	std	Z+1, r13	; 0x01
     d58:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     d5a:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <Pipe_Read_Stream_LE+0x8c>
     d5e:	39 de       	rcall	.-910    	; 0x9d2 <Pipe_WaitUntilReady>
     d60:	88 23       	and	r24, r24
     d62:	29 f3       	breq	.-54     	; 0xd2e <Pipe_Read_Stream_LE+0x40>
     d64:	0a c0       	rjmp	.+20     	; 0xd7a <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     d66:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d6a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d6c:	01 50       	subi	r16, 0x01	; 1
     d6e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     d70:	ff ef       	ldi	r31, 0xFF	; 255
     d72:	cf 1a       	sub	r12, r31
     d74:	df 0a       	sbc	r13, r31
     d76:	db cf       	rjmp	.-74     	; 0xd2e <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     d78:	80 e0       	ldi	r24, 0x00	; 0
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	08 95       	ret

00000d8c <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	dc 01       	movw	r26, r24
     d92:	eb 01       	movw	r28, r22
     d94:	e8 81       	ld	r30, Y
     d96:	f9 81       	ldd	r31, Y+1	; 0x01
     d98:	20 81       	ld	r18, Z
     d9a:	8d 91       	ld	r24, X+
     d9c:	9c 91       	ld	r25, X
     d9e:	11 97       	sbiw	r26, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	08 f4       	brcc	.+2      	; 0xdaa <USB_GetNextDescriptor+0x1e>
     da8:	9c 01       	movw	r18, r24
     daa:	e2 0f       	add	r30, r18
     dac:	f3 1f       	adc	r31, r19
     dae:	eb 01       	movw	r28, r22
     db0:	f9 83       	std	Y+1, r31	; 0x01
     db2:	e8 83       	st	Y, r30
     db4:	8d 91       	ld	r24, X+
     db6:	9c 91       	ld	r25, X
     db8:	11 97       	sbiw	r26, 0x01	; 1
     dba:	82 1b       	sub	r24, r18
     dbc:	93 0b       	sbc	r25, r19
     dbe:	8d 93       	st	X+, r24
     dc0:	9c 93       	st	X, r25
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <USB_Host_GetDeviceConfigDescriptor>:
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	29 97       	sbiw	r28, 0x09	; 9
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	6b 01       	movw	r12, r22
     dea:	8a 01       	movw	r16, r20
     dec:	79 01       	movw	r14, r18
     dee:	90 e8       	ldi	r25, 0x80	; 128
     df0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <USB_ControlRequest>
     df4:	96 e0       	ldi	r25, 0x06	; 6
     df6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <USB_ControlRequest+0x1>
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	92 60       	ori	r25, 0x02	; 2
     e00:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x3>
     e04:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x2>
     e08:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x5>
     e0c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x4>
     e10:	89 e0       	ldi	r24, 0x09	; 9
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x7>
     e18:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x6>
     e1c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e20:	ce 01       	movw	r24, r28
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	83 d0       	rcall	.+262    	; 0xf2c <USB_Host_SendControlRequest>
     e26:	81 11       	cpse	r24, r1
     e28:	19 c0       	rjmp	.+50     	; 0xe5c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	f6 01       	movw	r30, r12
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	e8 16       	cp	r14, r24
     e36:	f9 06       	cpc	r15, r25
     e38:	70 f0       	brcs	.+28     	; 0xe56 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     e3a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <USB_ControlRequest+0x7>
     e3e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <USB_ControlRequest+0x6>
     e42:	c8 01       	movw	r24, r16
     e44:	73 d0       	rcall	.+230    	; 0xf2c <USB_Host_SendControlRequest>
     e46:	81 11       	cpse	r24, r1
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e4a:	f8 01       	movw	r30, r16
     e4c:	81 81       	ldd	r24, Z+1	; 0x01
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	21 f4       	brne	.+8      	; 0xe5a <USB_Host_GetDeviceConfigDescriptor+0x92>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e5a:	86 e0       	ldi	r24, 0x06	; 6
     e5c:	29 96       	adiw	r28, 0x09	; 9
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	08 95       	ret

00000e7a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	8c 01       	movw	r16, r24
     e90:	eb 01       	movw	r28, r22
     e92:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e94:	f8 01       	movw	r30, r16
     e96:	e0 80       	ld	r14, Z
     e98:	f1 80       	ldd	r15, Z+1	; 0x01
     e9a:	e1 14       	cp	r14, r1
     e9c:	f1 04       	cpc	r15, r1
     e9e:	99 f0       	breq	.+38     	; 0xec6 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ea0:	a8 80       	ld	r10, Y
     ea2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     ea4:	be 01       	movw	r22, r28
     ea6:	c8 01       	movw	r24, r16
     ea8:	71 df       	rcall	.-286    	; 0xd8c <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eaa:	88 81       	ld	r24, Y
     eac:	99 81       	ldd	r25, Y+1	; 0x01
     eae:	f6 01       	movw	r30, r12
     eb0:	09 95       	icall
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	79 f3       	breq	.-34     	; 0xe94 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	39 f4       	brne	.+14     	; 0xec8 <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     eba:	b9 82       	std	Y+1, r11	; 0x01
     ebc:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     ebe:	f8 01       	movw	r30, r16
     ec0:	f1 82       	std	Z+1, r15	; 0x01
     ec2:	e0 82       	st	Z, r14
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	08 95       	ret

00000ede <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     ede:	08 95       	ret

00000ee0 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(FeatureStatus);
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	18 2f       	mov	r17, r24
     ee8:	c9 ee       	ldi	r28, 0xE9	; 233
     eea:	d3 e0       	ldi	r29, 0x03	; 3
     eec:	11 11       	cpse	r17, r1
     eee:	0c c0       	rjmp	.+24     	; 0xf08 <USB_Host_WaitForIOS+0x28>
     ef0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ef4:	83 fd       	sbrc	r24, 3
     ef6:	15 c0       	rjmp	.+42     	; 0xf22 <USB_Host_WaitForIOS+0x42>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	75 db       	rcall	.-2326   	; 0x5e6 <USB_Host_WaitMS>
     efc:	81 11       	cpse	r24, r1
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <USB_Host_WaitForIOS+0x44>
     f00:	21 97       	sbiw	r28, 0x01	; 1
     f02:	a1 f7       	brne	.-24     	; 0xeec <USB_Host_WaitForIOS+0xc>
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	0e c0       	rjmp	.+28     	; 0xf24 <USB_Host_WaitForIOS+0x44>
     f08:	11 30       	cpi	r17, 0x01	; 1
     f0a:	29 f4       	brne	.+10     	; 0xf16 <USB_Host_WaitForIOS+0x36>
     f0c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f10:	80 ff       	sbrs	r24, 0
     f12:	f2 cf       	rjmp	.-28     	; 0xef8 <USB_Host_WaitForIOS+0x18>
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <USB_Host_WaitForIOS+0x42>
     f16:	12 30       	cpi	r17, 0x02	; 2
     f18:	79 f7       	brne	.-34     	; 0xef8 <USB_Host_WaitForIOS+0x18>
     f1a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f1e:	82 ff       	sbrs	r24, 2
     f20:	eb cf       	rjmp	.-42     	; 0xef8 <USB_Host_WaitForIOS+0x18>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <USB_Host_SendControlRequest>:
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	8c 01       	movw	r16, r24
     f38:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	f8 2e       	mov	r15, r24
     f40:	c0 91 2f 01 	lds	r28, 0x012F	; 0x80012f <USB_ControlRequest+0x6>
     f44:	d0 91 30 01 	lds	r29, 0x0130	; 0x800130 <USB_ControlRequest+0x7>
     f48:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	48 db       	rcall	.-2416   	; 0x5e6 <USB_Host_WaitMS>
     f56:	81 11       	cpse	r24, r1
     f58:	c8 c0       	rjmp	.+400    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
     f5a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f5e:	8f 7c       	andi	r24, 0xCF	; 207
     f60:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f64:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
     f68:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f72:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f76:	8f 7b       	andi	r24, 0xBF	; 191
     f78:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f7c:	e9 e2       	ldi	r30, 0x29	; 41
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	81 e3       	ldi	r24, 0x31	; 49
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	21 91       	ld	r18, Z+
     f86:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     f8a:	8e 17       	cp	r24, r30
     f8c:	9f 07       	cpc	r25, r31
     f8e:	d1 f7       	brne	.-12     	; 0xf84 <USB_Host_SendControlRequest+0x58>
     f90:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f94:	87 77       	andi	r24, 0x77	; 119
     f96:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	a1 df       	rcall	.-190    	; 0xee0 <USB_Host_WaitForIOS>
     f9e:	81 11       	cpse	r24, r1
     fa0:	a4 c0       	rjmp	.+328    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
     fa2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fa6:	80 64       	ori	r24, 0x40	; 64
     fa8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	1b db       	rcall	.-2506   	; 0x5e6 <USB_Host_WaitMS>
     fb0:	81 11       	cpse	r24, r1
     fb2:	9b c0       	rjmp	.+310    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
     fb4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_ControlRequest>
     fb8:	87 ff       	sbrs	r24, 7
     fba:	4e c0       	rjmp	.+156    	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
     fbc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fc0:	8f 7c       	andi	r24, 0xCF	; 207
     fc2:	80 61       	ori	r24, 0x10	; 16
     fc4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fc8:	01 15       	cp	r16, r1
     fca:	11 05       	cpc	r17, r1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <USB_Host_SendControlRequest+0xa4>
     fce:	3a c0       	rjmp	.+116    	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
     fd0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fd4:	8f 7c       	andi	r24, 0xCF	; 207
     fd6:	80 62       	ori	r24, 0x20	; 32
     fd8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fdc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fe0:	8f 7b       	andi	r24, 0xBF	; 191
     fe2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	7b df       	rcall	.-266    	; 0xee0 <USB_Host_WaitForIOS>
     fea:	81 11       	cpse	r24, r1
     fec:	7e c0       	rjmp	.+252    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
     fee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ff2:	8b 77       	andi	r24, 0x7B	; 123
     ff4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	72 df       	rcall	.-284    	; 0xee0 <USB_Host_WaitForIOS>
     ffc:	76 c0       	rjmp	.+236    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
     ffe:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1002:	8f 7b       	andi	r24, 0xBF	; 191
    1004:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	6a df       	rcall	.-300    	; 0xee0 <USB_Host_WaitForIOS>
    100c:	81 11       	cpse	r24, r1
    100e:	6d c0       	rjmp	.+218    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    1010:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1014:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1018:	89 2b       	or	r24, r25
    101a:	11 f4       	brne	.+4      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    101c:	c0 e0       	ldi	r28, 0x00	; 0
    101e:	d0 e0       	ldi	r29, 0x00	; 0
    1020:	f8 01       	movw	r30, r16
    1022:	8f 01       	movw	r16, r30
    1024:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1028:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    102c:	89 2b       	or	r24, r25
    102e:	69 f4       	brne	.+26     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1030:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1034:	80 64       	ori	r24, 0x40	; 64
    1036:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    103a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    103e:	8e 77       	andi	r24, 0x7E	; 126
    1040:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1044:	20 97       	sbiw	r28, 0x00	; 0
    1046:	d9 f6       	brne	.-74     	; 0xffe <USB_Host_SendControlRequest+0xd2>
    1048:	c3 cf       	rjmp	.-122    	; 0xfd0 <USB_Host_SendControlRequest+0xa4>
    104a:	20 97       	sbiw	r28, 0x00	; 0
    104c:	89 f3       	breq	.-30     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    104e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1052:	81 93       	st	Z+, r24
    1054:	21 97       	sbiw	r28, 0x01	; 1
    1056:	e5 cf       	rjmp	.-54     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1058:	01 15       	cp	r16, r1
    105a:	11 05       	cpc	r17, r1
    105c:	91 f1       	breq	.+100    	; 0x10c2 <__EEPROM_REGION_LENGTH__+0xc2>
    105e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1062:	8f 7c       	andi	r24, 0xCF	; 207
    1064:	80 62       	ori	r24, 0x20	; 32
    1066:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    106a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    106e:	8f 7b       	andi	r24, 0xBF	; 191
    1070:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	20 97       	sbiw	r28, 0x00	; 0
    1078:	e1 f0       	breq	.+56     	; 0x10b2 <__EEPROM_REGION_LENGTH__+0xb2>
    107a:	32 df       	rcall	.-412    	; 0xee0 <USB_Host_WaitForIOS>
    107c:	81 11       	cpse	r24, r1
    107e:	35 c0       	rjmp	.+106    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    1080:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1084:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    1088:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Host_ControlPipeSize>
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
    1092:	48 f4       	brcc	.+18     	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    1094:	0f 5f       	subi	r16, 0xFF	; 255
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	f8 01       	movw	r30, r16
    109a:	31 97       	sbiw	r30, 0x01	; 1
    109c:	80 81       	ld	r24, Z
    109e:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    10a2:	21 97       	sbiw	r28, 0x01	; 1
    10a4:	69 f7       	brne	.-38     	; 0x1080 <__EEPROM_REGION_LENGTH__+0x80>
    10a6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10aa:	8b 77       	andi	r24, 0x7B	; 123
    10ac:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10b0:	e1 cf       	rjmp	.-62     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    10b2:	16 df       	rcall	.-468    	; 0xee0 <USB_Host_WaitForIOS>
    10b4:	81 11       	cpse	r24, r1
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    10b8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10bc:	80 64       	ori	r24, 0x40	; 64
    10be:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10c2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10c6:	8f 7c       	andi	r24, 0xCF	; 207
    10c8:	80 61       	ori	r24, 0x10	; 16
    10ca:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10ce:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10d2:	8f 7b       	andi	r24, 0xBF	; 191
    10d4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	02 df       	rcall	.-508    	; 0xee0 <USB_Host_WaitForIOS>
    10dc:	81 11       	cpse	r24, r1
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    10e0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10e4:	9e 77       	andi	r25, 0x7E	; 126
    10e6:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10ea:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10ee:	90 64       	ori	r25, 0x40	; 64
    10f0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10f4:	f1 10       	cpse	r15, r1
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
    10f8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    10fc:	9e 7f       	andi	r25, 0xFE	; 254
    10fe:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1108:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	08 95       	ret

00001118 <USB_Host_SetDeviceConfiguration>:
    1118:	cf 93       	push	r28
    111a:	c8 2f       	mov	r28, r24
    111c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_ControlRequest>
    1120:	89 e0       	ldi	r24, 0x09	; 9
    1122:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_ControlRequest+0x1>
    1126:	8c 2f       	mov	r24, r28
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_ControlRequest+0x3>
    112e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_ControlRequest+0x2>
    1132:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_ControlRequest+0x5>
    1136:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USB_ControlRequest+0x4>
    113a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <USB_ControlRequest+0x7>
    113e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <USB_ControlRequest+0x6>
    1142:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	f0 de       	rcall	.-544    	; 0xf2c <USB_Host_SendControlRequest>
    114c:	81 11       	cpse	r24, r1
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <USB_Host_SetDeviceConfiguration+0x4a>
    1150:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <USB_Host_ConfigurationNumber>
    1154:	c1 11       	cpse	r28, r1
    1156:	02 c0       	rjmp	.+4      	; 0x115c <USB_Host_SetDeviceConfiguration+0x44>
    1158:	9a e0       	ldi	r25, 0x0A	; 10
    115a:	01 c0       	rjmp	.+2      	; 0x115e <USB_Host_SetDeviceConfiguration+0x46>
    115c:	9b e0       	ldi	r25, 0x0B	; 11
    115e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <USB_HostState>
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <USB_Host_ClearEndpointStall>:
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1166:	e9 e2       	ldi	r30, 0x29	; 41
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	90 83       	st	Z, r25
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	13 82       	std	Z+3, r1	; 0x03
    1174:	12 82       	std	Z+2, r1	; 0x02
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	95 83       	std	Z+5, r25	; 0x05
    117a:	84 83       	std	Z+4, r24	; 0x04
    117c:	17 82       	std	Z+7, r1	; 0x07
    117e:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1180:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	d1 ce       	rjmp	.-606    	; 0xf2c <USB_Host_SendControlRequest>

0000118a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1190:	c7 ea       	ldi	r28, 0xA7	; 167
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	18 81       	ld	r17, Y
    1196:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1198:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    119a:	72 da       	rcall	.-2844   	; 0x680 <USB_Host_ProcessNextHostState>
    119c:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	08 95       	ret

000011a6 <DCOMP_SI_Host_NextSIInterface>:

	Pipe_ClearIN();
	Pipe_Freeze();

	return ErrorCode;
}
    11a6:	fc 01       	movw	r30, r24
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <DCOMP_SI_Host_NextSIInterface+0x1e>
    11ae:	85 81       	ldd	r24, Z+5	; 0x05
    11b0:	86 30       	cpi	r24, 0x06	; 6
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <DCOMP_SI_Host_NextSIInterface+0x1e>
    11b4:	86 81       	ldd	r24, Z+6	; 0x06
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	29 f4       	brne	.+10     	; 0x11c4 <DCOMP_SI_Host_NextSIInterface+0x1e>
    11ba:	87 81       	ldd	r24, Z+7	; 0x07
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	11 f4       	brne	.+4      	; 0x11c4 <DCOMP_SI_Host_NextSIInterface+0x1e>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	08 95       	ret
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	08 95       	ret

000011c8 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:
    11c8:	fc 01       	movw	r30, r24
    11ca:	21 81       	ldd	r18, Z+1	; 0x01
    11cc:	25 30       	cpi	r18, 0x05	; 5
    11ce:	59 f4       	brne	.+22     	; 0x11e6 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1e>
    11d0:	23 81       	ldd	r18, Z+3	; 0x03
    11d2:	23 70       	andi	r18, 0x03	; 3
    11d4:	22 50       	subi	r18, 0x02	; 2
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	20 f4       	brcc	.+8      	; 0x11e2 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1a>
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	d8 db       	rcall	.-2128   	; 0x98e <Pipe_IsEndpointBound>
    11de:	88 23       	and	r24, r24
    11e0:	31 f0       	breq	.+12     	; 0x11ee <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x26>
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	08 95       	ret
    11e6:	24 30       	cpi	r18, 0x04	; 4
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1a>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	08 95       	ret
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <SI_Host_ConfigurePipes>:
    11f2:	3f 92       	push	r3
    11f4:	4f 92       	push	r4
    11f6:	5f 92       	push	r5
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <SI_Host_ConfigurePipes+0x24>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <SI_Host_ConfigurePipes+0x26>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	7a 83       	std	Y+2, r23	; 0x02
    121e:	69 83       	std	Y+1, r22	; 0x01
    1220:	5c 83       	std	Y+4, r21	; 0x04
    1222:	4b 83       	std	Y+3, r20	; 0x03
    1224:	fc 01       	movw	r30, r24
    1226:	36 96       	adiw	r30, 0x06	; 6
    1228:	2d e0       	ldi	r18, 0x0D	; 13
    122a:	df 01       	movw	r26, r30
    122c:	1d 92       	st	X+, r1
    122e:	2a 95       	dec	r18
    1230:	e9 f7       	brne	.-6      	; 0x122c <SI_Host_ConfigurePipes+0x3a>
    1232:	eb 81       	ldd	r30, Y+3	; 0x03
    1234:	fc 81       	ldd	r31, Y+4	; 0x04
    1236:	11 81       	ldd	r17, Z+1	; 0x01
    1238:	12 30       	cpi	r17, 0x02	; 2
    123a:	09 f0       	breq	.+2      	; 0x123e <SI_Host_ConfigurePipes+0x4c>
    123c:	8b c0       	rjmp	.+278    	; 0x1354 <SI_Host_ConfigurePipes+0x162>
    123e:	6c 01       	movw	r12, r24
    1240:	43 ed       	ldi	r20, 0xD3	; 211
    1242:	58 e0       	ldi	r21, 0x08	; 8
    1244:	be 01       	movw	r22, r28
    1246:	6d 5f       	subi	r22, 0xFD	; 253
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	15 de       	rcall	.-982    	; 0xe7a <USB_GetNextDescriptorComp>
    1250:	81 11       	cpse	r24, r1
    1252:	83 c0       	rjmp	.+262    	; 0x135a <SI_Host_ConfigurePipes+0x168>
    1254:	4b 80       	ldd	r4, Y+3	; 0x03
    1256:	5c 80       	ldd	r5, Y+4	; 0x04
    1258:	61 2c       	mov	r6, r1
    125a:	71 2c       	mov	r7, r1
    125c:	81 2c       	mov	r8, r1
    125e:	91 2c       	mov	r9, r1
    1260:	a1 2c       	mov	r10, r1
    1262:	b1 2c       	mov	r11, r1
    1264:	41 14       	cp	r4, r1
    1266:	51 04       	cpc	r5, r1
    1268:	59 f3       	breq	.-42     	; 0x1240 <SI_Host_ConfigurePipes+0x4e>
    126a:	44 ee       	ldi	r20, 0xE4	; 228
    126c:	58 e0       	ldi	r21, 0x08	; 8
    126e:	be 01       	movw	r22, r28
    1270:	6d 5f       	subi	r22, 0xFD	; 253
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	ce 01       	movw	r24, r28
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	00 de       	rcall	.-1024   	; 0xe7a <USB_GetNextDescriptorComp>
    127a:	81 11       	cpse	r24, r1
    127c:	e1 cf       	rjmp	.-62     	; 0x1240 <SI_Host_ConfigurePipes+0x4e>
    127e:	eb 81       	ldd	r30, Y+3	; 0x03
    1280:	fc 81       	ldd	r31, Y+4	; 0x04
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	87 ff       	sbrs	r24, 7
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <SI_Host_ConfigurePipes+0xa2>
    1288:	83 81       	ldd	r24, Z+3	; 0x03
    128a:	83 70       	andi	r24, 0x03	; 3
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	21 f0       	breq	.+8      	; 0x1298 <SI_Host_ConfigurePipes+0xa6>
    1290:	3f 01       	movw	r6, r30
    1292:	03 c0       	rjmp	.+6      	; 0x129a <SI_Host_ConfigurePipes+0xa8>
    1294:	4f 01       	movw	r8, r30
    1296:	01 c0       	rjmp	.+2      	; 0x129a <SI_Host_ConfigurePipes+0xa8>
    1298:	5f 01       	movw	r10, r30
    129a:	61 14       	cp	r6, r1
    129c:	71 04       	cpc	r7, r1
    129e:	11 f3       	breq	.-60     	; 0x1264 <SI_Host_ConfigurePipes+0x72>
    12a0:	81 14       	cp	r8, r1
    12a2:	91 04       	cpc	r9, r1
    12a4:	f9 f2       	breq	.-66     	; 0x1264 <SI_Host_ConfigurePipes+0x72>
    12a6:	a1 14       	cp	r10, r1
    12a8:	b1 04       	cpc	r11, r1
    12aa:	e1 f2       	breq	.-72     	; 0x1264 <SI_Host_ConfigurePipes+0x72>
    12ac:	ff 24       	eor	r15, r15
    12ae:	f3 94       	inc	r15
    12b0:	f6 01       	movw	r30, r12
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 11       	cpse	r24, r15
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <SI_Host_ConfigurePipes+0xe0>
    12b8:	d3 01       	movw	r26, r6
    12ba:	14 96       	adiw	r26, 0x04	; 4
    12bc:	0d 91       	ld	r16, X+
    12be:	1c 91       	ld	r17, X
    12c0:	15 97       	sbiw	r26, 0x05	; 5
    12c2:	12 96       	adiw	r26, 0x02	; 2
    12c4:	2c 91       	ld	r18, X
    12c6:	81 81       	ldd	r24, Z+1	; 0x01
    12c8:	11 87       	std	Z+9, r17	; 0x09
    12ca:	00 87       	std	Z+8, r16	; 0x08
    12cc:	31 2c       	mov	r3, r1
    12ce:	40 e1       	ldi	r20, 0x10	; 16
    12d0:	10 c0       	rjmp	.+32     	; 0x12f2 <SI_Host_ConfigurePipes+0x100>
    12d2:	f6 01       	movw	r30, r12
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	8f 11       	cpse	r24, r15
    12d8:	0e c0       	rjmp	.+28     	; 0x12f6 <SI_Host_ConfigurePipes+0x104>
    12da:	d4 01       	movw	r26, r8
    12dc:	14 96       	adiw	r26, 0x04	; 4
    12de:	0d 91       	ld	r16, X+
    12e0:	1c 91       	ld	r17, X
    12e2:	15 97       	sbiw	r26, 0x05	; 5
    12e4:	12 96       	adiw	r26, 0x02	; 2
    12e6:	2c 91       	ld	r18, X
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	13 87       	std	Z+11, r17	; 0x0b
    12ec:	02 87       	std	Z+10, r16	; 0x0a
    12ee:	31 2c       	mov	r3, r1
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	13 c0       	rjmp	.+38     	; 0x131c <SI_Host_ConfigurePipes+0x12a>
    12f6:	f6 01       	movw	r30, r12
    12f8:	84 81       	ldd	r24, Z+4	; 0x04
    12fa:	8f 11       	cpse	r24, r15
    12fc:	1c c0       	rjmp	.+56     	; 0x1336 <SI_Host_ConfigurePipes+0x144>
    12fe:	d5 01       	movw	r26, r10
    1300:	14 96       	adiw	r26, 0x04	; 4
    1302:	0d 91       	ld	r16, X+
    1304:	1c 91       	ld	r17, X
    1306:	15 97       	sbiw	r26, 0x05	; 5
    1308:	12 96       	adiw	r26, 0x02	; 2
    130a:	2c 91       	ld	r18, X
    130c:	12 97       	sbiw	r26, 0x02	; 2
    130e:	85 81       	ldd	r24, Z+5	; 0x05
    1310:	16 96       	adiw	r26, 0x06	; 6
    1312:	3c 90       	ld	r3, X
    1314:	15 87       	std	Z+13, r17	; 0x0d
    1316:	04 87       	std	Z+12, r16	; 0x0c
    1318:	40 e1       	ldi	r20, 0x10	; 16
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	81 11       	cpse	r24, r1
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <SI_Host_ConfigurePipes+0x132>
    1320:	e1 2c       	mov	r14, r1
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <SI_Host_ConfigurePipes+0x136>
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	e8 2e       	mov	r14, r24
    1328:	8f 2d       	mov	r24, r15
    132a:	c1 da       	rcall	.-2686   	; 0x8ae <Pipe_ConfigurePipe>
    132c:	88 23       	and	r24, r24
    132e:	a1 f0       	breq	.+40     	; 0x1358 <SI_Host_ConfigurePipes+0x166>
    1330:	31 10       	cpse	r3, r1
    1332:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
    1336:	f3 94       	inc	r15
    1338:	b7 e0       	ldi	r27, 0x07	; 7
    133a:	fb 12       	cpse	r15, r27
    133c:	b9 cf       	rjmp	.-142    	; 0x12b0 <SI_Host_ConfigurePipes+0xbe>
    133e:	f2 01       	movw	r30, r4
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	d6 01       	movw	r26, r12
    1344:	17 96       	adiw	r26, 0x07	; 7
    1346:	8c 93       	st	X, r24
    1348:	17 97       	sbiw	r26, 0x07	; 7
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	16 96       	adiw	r26, 0x06	; 6
    134e:	8c 93       	st	X, r24
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	03 c0       	rjmp	.+6      	; 0x135a <SI_Host_ConfigurePipes+0x168>
    1354:	11 e0       	ldi	r17, 0x01	; 1
    1356:	01 c0       	rjmp	.+2      	; 0x135a <SI_Host_ConfigurePipes+0x168>
    1358:	13 e0       	ldi	r17, 0x03	; 3
    135a:	81 2f       	mov	r24, r17
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	df 90       	pop	r13
    1372:	cf 90       	pop	r12
    1374:	bf 90       	pop	r11
    1376:	af 90       	pop	r10
    1378:	9f 90       	pop	r9
    137a:	8f 90       	pop	r8
    137c:	7f 90       	pop	r7
    137e:	6f 90       	pop	r6
    1380:	5f 90       	pop	r5
    1382:	4f 90       	pop	r4
    1384:	3f 90       	pop	r3
    1386:	08 95       	ret

00001388 <SI_Host_SendBlockHeader>:
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	fc 01       	movw	r30, r24
    1392:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_HostState>
    1396:	8b 30       	cpi	r24, 0x0B	; 11
    1398:	09 f0       	breq	.+2      	; 0x139c <SI_Host_SendBlockHeader+0x14>
    139a:	43 c0       	rjmp	.+134    	; 0x1422 <SI_Host_SendBlockHeader+0x9a>
    139c:	86 81       	ldd	r24, Z+6	; 0x06
    139e:	88 23       	and	r24, r24
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <SI_Host_SendBlockHeader+0x1c>
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <SI_Host_SendBlockHeader+0x9a>
    13a4:	86 85       	ldd	r24, Z+14	; 0x0e
    13a6:	88 23       	and	r24, r24
    13a8:	99 f0       	breq	.+38     	; 0x13d0 <SI_Host_SendBlockHeader+0x48>
    13aa:	87 85       	ldd	r24, Z+15	; 0x0f
    13ac:	90 89       	ldd	r25, Z+16	; 0x10
    13ae:	a1 89       	ldd	r26, Z+17	; 0x11
    13b0:	b2 89       	ldd	r27, Z+18	; 0x12
    13b2:	8c 01       	movw	r16, r24
    13b4:	9d 01       	movw	r18, r26
    13b6:	0f 5f       	subi	r16, 0xFF	; 255
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	2f 4f       	sbci	r18, 0xFF	; 255
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	07 87       	std	Z+15, r16	; 0x0f
    13c0:	10 8b       	std	Z+16, r17	; 0x10
    13c2:	21 8b       	std	Z+17, r18	; 0x11
    13c4:	32 8b       	std	Z+18, r19	; 0x12
    13c6:	eb 01       	movw	r28, r22
    13c8:	88 87       	std	Y+8, r24	; 0x08
    13ca:	99 87       	std	Y+9, r25	; 0x09
    13cc:	aa 87       	std	Y+10, r26	; 0x0a
    13ce:	bb 87       	std	Y+11, r27	; 0x0b
    13d0:	eb 01       	movw	r28, r22
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    13d8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13dc:	8f 7b       	andi	r24, 0xBF	; 191
    13de:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	6c e0       	ldi	r22, 0x0C	; 12
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	ce 01       	movw	r24, r28
    13ec:	31 dc       	rcall	.-1950   	; 0xc50 <Pipe_Write_Stream_LE>
    13ee:	81 11       	cpse	r24, r1
    13f0:	19 c0       	rjmp	.+50     	; 0x1424 <SI_Host_SendBlockHeader+0x9c>
    13f2:	68 81       	ld	r22, Y
    13f4:	6c 50       	subi	r22, 0x0C	; 12
    13f6:	61 f4       	brne	.+24     	; 0x1410 <SI_Host_SendBlockHeader+0x88>
    13f8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13fc:	8b 77       	andi	r24, 0x7B	; 123
    13fe:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1402:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1406:	80 64       	ori	r24, 0x40	; 64
    1408:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	0a c0       	rjmp	.+20     	; 0x1424 <SI_Host_SendBlockHeader+0x9c>
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	ce 01       	movw	r24, r28
    1418:	0c 96       	adiw	r24, 0x0c	; 12
    141a:	1a dc       	rcall	.-1996   	; 0xc50 <Pipe_Write_Stream_LE>
    141c:	88 23       	and	r24, r24
    141e:	61 f3       	breq	.-40     	; 0x13f8 <SI_Host_SendBlockHeader+0x70>
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <SI_Host_SendBlockHeader+0x9c>
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	08 95       	ret

0000142e <SI_Host_ReceiveBlockHeader>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1436:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    143a:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <USB_HostState>
    143e:	4b 30       	cpi	r20, 0x0B	; 11
    1440:	11 f0       	breq	.+4      	; 0x1446 <SI_Host_ReceiveBlockHeader+0x18>
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	79 c0       	rjmp	.+242    	; 0x1538 <SI_Host_ReceiveBlockHeader+0x10a>
    1446:	fc 01       	movw	r30, r24
    1448:	46 81       	ldd	r20, Z+6	; 0x06
    144a:	44 23       	and	r20, r20
    144c:	d1 f3       	breq	.-12     	; 0x1442 <SI_Host_ReceiveBlockHeader+0x14>
    144e:	eb 01       	movw	r28, r22
    1450:	80 81       	ld	r24, Z
    1452:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1456:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    145a:	8f 7b       	andi	r24, 0xBF	; 191
    145c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1460:	80 e1       	ldi	r24, 0x10	; 16
    1462:	97 e2       	ldi	r25, 0x27	; 39
    1464:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1468:	40 fd       	sbrc	r20, 0
    146a:	46 c0       	rjmp	.+140    	; 0x14f8 <SI_Host_ReceiveBlockHeader+0xca>
    146c:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1470:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    1474:	24 17       	cp	r18, r20
    1476:	35 07       	cpc	r19, r21
    1478:	39 f0       	breq	.+14     	; 0x1488 <SI_Host_ReceiveBlockHeader+0x5a>
    147a:	9c 01       	movw	r18, r24
    147c:	21 50       	subi	r18, 0x01	; 1
    147e:	31 09       	sbc	r19, r1
    1480:	89 2b       	or	r24, r25
    1482:	09 f4       	brne	.+2      	; 0x1486 <SI_Host_ReceiveBlockHeader+0x58>
    1484:	58 c0       	rjmp	.+176    	; 0x1536 <SI_Host_ReceiveBlockHeader+0x108>
    1486:	c9 01       	movw	r24, r18
    1488:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    148c:	20 64       	ori	r18, 0x40	; 64
    148e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1492:	22 81       	ldd	r18, Z+2	; 0x02
    1494:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1498:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    149c:	2f 7b       	andi	r18, 0xBF	; 191
    149e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14a2:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    14a6:	21 fd       	sbrc	r18, 1
    14a8:	11 c0       	rjmp	.+34     	; 0x14cc <SI_Host_ReceiveBlockHeader+0x9e>
    14aa:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14ae:	20 64       	ori	r18, 0x40	; 64
    14b0:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14b4:	20 81       	ld	r18, Z
    14b6:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    14ba:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14be:	2f 7b       	andi	r18, 0xBF	; 191
    14c0:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    14c4:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    14c8:	21 ff       	sbrs	r18, 1
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <SI_Host_ReceiveBlockHeader+0xbc>
    14cc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    14d0:	8f 70       	andi	r24, 0x0F	; 15
    14d2:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    14d6:	90 73       	andi	r25, 0x30	; 48
    14d8:	90 31       	cpi	r25, 0x10	; 16
    14da:	11 f0       	breq	.+4      	; 0x14e0 <SI_Host_ReceiveBlockHeader+0xb2>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <SI_Host_ReceiveBlockHeader+0xb4>
    14e0:	90 e8       	ldi	r25, 0x80	; 128
    14e2:	89 2b       	or	r24, r25
    14e4:	40 de       	rcall	.-896    	; 0x1166 <USB_Host_ClearEndpointStall>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	27 c0       	rjmp	.+78     	; 0x1538 <SI_Host_ReceiveBlockHeader+0x10a>
    14ea:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
    14ee:	21 30       	cpi	r18, 0x01	; 1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <SI_Host_ReceiveBlockHeader+0xc6>
    14f2:	a7 cf       	rjmp	.-178    	; 0x1442 <SI_Host_ReceiveBlockHeader+0x14>
    14f4:	9a 01       	movw	r18, r20
    14f6:	b6 cf       	rjmp	.-148    	; 0x1464 <SI_Host_ReceiveBlockHeader+0x36>
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	6c e0       	ldi	r22, 0x0C	; 12
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	ce 01       	movw	r24, r28
    1502:	f5 db       	rcall	.-2070   	; 0xcee <Pipe_Read_Stream_LE>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	03 97       	sbiw	r24, 0x03	; 3
    150a:	71 f4       	brne	.+28     	; 0x1528 <SI_Host_ReceiveBlockHeader+0xfa>
    150c:	68 81       	ld	r22, Y
    150e:	6c 50       	subi	r22, 0x0C	; 12
    1510:	31 f0       	breq	.+12     	; 0x151e <SI_Host_ReceiveBlockHeader+0xf0>
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	ce 01       	movw	r24, r28
    151a:	0c 96       	adiw	r24, 0x0c	; 12
    151c:	e8 db       	rcall	.-2096   	; 0xcee <Pipe_Read_Stream_LE>
    151e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1522:	8e 77       	andi	r24, 0x7E	; 126
    1524:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1528:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <SI_Host_ReceiveBlockHeader+0x10a>
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <SI_Host_OpenSession>:

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	68 97       	sbiw	r28, 0x18	; 24
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    155a:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
    155e:	2b 30       	cpi	r18, 0x0B	; 11
    1560:	09 f0       	breq	.+2      	; 0x1564 <SI_Host_OpenSession+0x26>
    1562:	43 c0       	rjmp	.+134    	; 0x15ea <SI_Host_OpenSession+0xac>
    1564:	fc 01       	movw	r30, r24
    1566:	26 81       	ldd	r18, Z+6	; 0x06
    1568:	22 23       	and	r18, r18
    156a:	09 f4       	brne	.+2      	; 0x156e <SI_Host_OpenSession+0x30>
    156c:	3e c0       	rjmp	.+124    	; 0x15ea <SI_Host_OpenSession+0xac>
    156e:	8c 01       	movw	r16, r24
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    1570:	17 86       	std	Z+15, r1	; 0x0f
    1572:	10 8a       	std	Z+16, r1	; 0x10
    1574:	11 8a       	std	Z+17, r1	; 0x11
    1576:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    1578:	16 86       	std	Z+14, r1	; 0x0e

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    157a:	ce 01       	movw	r24, r28
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	7c 01       	movw	r14, r24
    1580:	88 e1       	ldi	r24, 0x18	; 24
    1582:	f7 01       	movw	r30, r14
    1584:	11 92       	st	Z+, r1
    1586:	8a 95       	dec	r24
    1588:	e9 f7       	brne	.-6      	; 0x1584 <SI_Host_OpenSession+0x46>
    158a:	80 e1       	ldi	r24, 0x10	; 16
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	ab 83       	std	Y+3, r26	; 0x03
    1598:	bc 83       	std	Y+4, r27	; 0x04
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	90 e1       	ldi	r25, 0x10	; 16
    15a6:	98 87       	std	Y+8, r25	; 0x08
    15a8:	8f 83       	std	Y+7, r24	; 0x07
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 e0       	ldi	r26, 0x00	; 0
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	8d 87       	std	Y+13, r24	; 0x0d
    15b4:	9e 87       	std	Y+14, r25	; 0x0e
    15b6:	af 87       	std	Y+15, r26	; 0x0f
    15b8:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15ba:	b7 01       	movw	r22, r14
    15bc:	c8 01       	movw	r24, r16
    15be:	e4 de       	rcall	.-568    	; 0x1388 <SI_Host_SendBlockHeader>
    15c0:	81 11       	cpse	r24, r1
    15c2:	16 c0       	rjmp	.+44     	; 0x15f0 <SI_Host_OpenSession+0xb2>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15c4:	b7 01       	movw	r22, r14
    15c6:	c8 01       	movw	r24, r16
    15c8:	32 df       	rcall	.-412    	; 0x142e <SI_Host_ReceiveBlockHeader>
    15ca:	81 11       	cpse	r24, r1
    15cc:	11 c0       	rjmp	.+34     	; 0x15f0 <SI_Host_OpenSession+0xb2>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	03 97       	sbiw	r24, 0x03	; 3
    15d4:	61 f4       	brne	.+24     	; 0x15ee <SI_Host_OpenSession+0xb0>
    15d6:	8f 81       	ldd	r24, Y+7	; 0x07
    15d8:	98 85       	ldd	r25, Y+8	; 0x08
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	90 42       	sbci	r25, 0x20	; 32
    15de:	39 f4       	brne	.+14     	; 0x15ee <SI_Host_OpenSession+0xb0>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	f8 01       	movw	r30, r16
    15e4:	86 87       	std	Z+14, r24	; 0x0e

	return PIPE_RWSTREAM_NoError;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <SI_Host_OpenSession+0xb2>
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <SI_Host_OpenSession+0xb2>

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    15ee:	80 e8       	ldi	r24, 0x80	; 128

	SIInterfaceInfo->State.IsSessionOpen = true;

	return PIPE_RWSTREAM_NoError;
}
    15f0:	68 96       	adiw	r28, 0x18	; 24
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	08 95       	ret

0000160a <SI_Host_CloseSession>:

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	68 97       	sbiw	r28, 0x18	; 24
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1626:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
    162a:	2b 30       	cpi	r18, 0x0B	; 11
    162c:	e1 f5       	brne	.+120    	; 0x16a6 <SI_Host_CloseSession+0x9c>
    162e:	fc 01       	movw	r30, r24
    1630:	26 81       	ldd	r18, Z+6	; 0x06
    1632:	22 23       	and	r18, r18
    1634:	c1 f1       	breq	.+112    	; 0x16a6 <SI_Host_CloseSession+0x9c>
    1636:	8c 01       	movw	r16, r24
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	7c 01       	movw	r14, r24
    163e:	88 e1       	ldi	r24, 0x18	; 24
    1640:	f7 01       	movw	r30, r14
    1642:	11 92       	st	Z+, r1
    1644:	8a 95       	dec	r24
    1646:	e9 f7       	brne	.-6      	; 0x1642 <SI_Host_CloseSession+0x38>
    1648:	80 e1       	ldi	r24, 0x10	; 16
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 e0       	ldi	r26, 0x00	; 0
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	ab 83       	std	Y+3, r26	; 0x03
    1656:	bc 83       	std	Y+4, r27	; 0x04
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	90 e1       	ldi	r25, 0x10	; 16
    1664:	98 87       	std	Y+8, r25	; 0x08
    1666:	8f 83       	std	Y+7, r24	; 0x07
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e0       	ldi	r26, 0x00	; 0
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	8d 87       	std	Y+13, r24	; 0x0d
    1672:	9e 87       	std	Y+14, r25	; 0x0e
    1674:	af 87       	std	Y+15, r26	; 0x0f
    1676:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1678:	b7 01       	movw	r22, r14
    167a:	c8 01       	movw	r24, r16
    167c:	85 de       	rcall	.-758    	; 0x1388 <SI_Host_SendBlockHeader>
    167e:	81 11       	cpse	r24, r1
    1680:	15 c0       	rjmp	.+42     	; 0x16ac <SI_Host_CloseSession+0xa2>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1682:	b7 01       	movw	r22, r14
    1684:	c8 01       	movw	r24, r16
    1686:	d3 de       	rcall	.-602    	; 0x142e <SI_Host_ReceiveBlockHeader>
    1688:	81 11       	cpse	r24, r1
    168a:	10 c0       	rjmp	.+32     	; 0x16ac <SI_Host_CloseSession+0xa2>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    168c:	f8 01       	movw	r30, r16
    168e:	16 86       	std	Z+14, r1	; 0x0e

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	03 97       	sbiw	r24, 0x03	; 3
    1696:	49 f4       	brne	.+18     	; 0x16aa <SI_Host_CloseSession+0xa0>
    1698:	8f 81       	ldd	r24, Y+7	; 0x07
    169a:	98 85       	ldd	r25, Y+8	; 0x08
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	90 42       	sbci	r25, 0x20	; 32
    16a0:	21 f4       	brne	.+8      	; 0x16aa <SI_Host_CloseSession+0xa0>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <SI_Host_CloseSession+0xa2>
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <SI_Host_CloseSession+0xa2>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    16aa:	80 e8       	ldi	r24, 0x80	; 128

	return PIPE_RWSTREAM_NoError;
}
    16ac:	68 96       	adiw	r28, 0x18	; 24
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	08 95       	ret

000016c6 <SI_Host_SendCommand>:

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	68 97       	sbiw	r28, 0x18	; 24
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    16e2:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <USB_HostState>
    16e6:	5b 30       	cpi	r21, 0x0B	; 11
    16e8:	59 f5       	brne	.+86     	; 0x1740 <SI_Host_SendCommand+0x7a>
    16ea:	fc 01       	movw	r30, r24
    16ec:	56 81       	ldd	r21, Z+6	; 0x06
    16ee:	55 23       	and	r21, r21
    16f0:	39 f1       	breq	.+78     	; 0x1740 <SI_Host_SendCommand+0x7a>
    16f2:	8c 01       	movw	r16, r24
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    16f4:	ce 01       	movw	r24, r28
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	7c 01       	movw	r14, r24
    16fa:	88 e1       	ldi	r24, 0x18	; 24
    16fc:	f7 01       	movw	r30, r14
    16fe:	11 92       	st	Z+, r1
    1700:	8a 95       	dec	r24
    1702:	e9 f7       	brne	.-6      	; 0x16fe <SI_Host_SendCommand+0x38>
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	4d 5f       	subi	r20, 0xFD	; 253
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	44 0f       	add	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1712:	ca 01       	movw	r24, r20
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	ab 83       	std	Y+3, r26	; 0x03
    171e:	bc 83       	std	Y+4, r27	; 0x04
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	78 87       	std	Y+8, r23	; 0x08
    172a:	6f 83       	std	Y+7, r22	; 0x07
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    172c:	4c 50       	subi	r20, 0x0C	; 12
    172e:	51 09       	sbc	r21, r1
    1730:	b9 01       	movw	r22, r18
    1732:	ce 01       	movw	r24, r28
    1734:	0d 96       	adiw	r24, 0x0d	; 13
    1736:	65 d0       	rcall	.+202    	; 0x1802 <memcpy>

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1738:	b7 01       	movw	r22, r14
    173a:	c8 01       	movw	r24, r16
    173c:	25 de       	rcall	.-950    	; 0x1388 <SI_Host_SendBlockHeader>
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <SI_Host_SendCommand+0x7c>
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1740:	82 e0       	ldi	r24, 0x02	; 2

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1742:	68 96       	adiw	r28, 0x18	; 24
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	08 95       	ret

0000175c <SI_Host_ReceiveResponse>:

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	68 97       	sbiw	r28, 0x18	; 24
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1770:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <USB_HostState>
    1774:	2b 30       	cpi	r18, 0x0B	; 11
    1776:	a9 f4       	brne	.+42     	; 0x17a2 <SI_Host_ReceiveResponse+0x46>
    1778:	fc 01       	movw	r30, r24
    177a:	26 81       	ldd	r18, Z+6	; 0x06
    177c:	22 23       	and	r18, r18
    177e:	89 f0       	breq	.+34     	; 0x17a2 <SI_Host_ReceiveResponse+0x46>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1780:	be 01       	movw	r22, r28
    1782:	6f 5f       	subi	r22, 0xFF	; 255
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	53 de       	rcall	.-858    	; 0x142e <SI_Host_ReceiveBlockHeader>
    1788:	81 11       	cpse	r24, r1
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <SI_Host_ReceiveResponse+0x4c>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	03 97       	sbiw	r24, 0x03	; 3
    1792:	49 f4       	brne	.+18     	; 0x17a6 <SI_Host_ReceiveResponse+0x4a>
    1794:	8f 81       	ldd	r24, Y+7	; 0x07
    1796:	98 85       	ldd	r25, Y+8	; 0x08
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	90 42       	sbci	r25, 0x20	; 32
    179c:	21 f4       	brne	.+8      	; 0x17a6 <SI_Host_ReceiveResponse+0x4a>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <SI_Host_ReceiveResponse+0x4c>
{
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <SI_Host_ReceiveResponse+0x4c>

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    17a6:	80 e8       	ldi	r24, 0x80	; 128

	return PIPE_RWSTREAM_NoError;
}
    17a8:	68 96       	adiw	r28, 0x18	; 24
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    17ba:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17be:	95 ff       	sbrs	r25, 5
    17c0:	fc cf       	rjmp	.-8      	; 0x17ba <Serial_putchar>
				UDR1 = DataByte;
    17c2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	08 95       	ret

000017cc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    17cc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    17d0:	87 ff       	sbrs	r24, 7
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <Serial_getchar+0x18>
    17d4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    17d8:	87 ff       	sbrs	r24, 7
    17da:	07 c0       	rjmp	.+14     	; 0x17ea <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    17dc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	08 95       	ret
	  return _FDEV_EOF;
    17e4:	8e ef       	ldi	r24, 0xFE	; 254
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
    17e8:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    17ee:	08 95       	ret

000017f0 <__tablejump2__>:
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	00 24       	eor	r0, r0
    17f6:	00 1c       	adc	r0, r0
    17f8:	0b be       	out	0x3b, r0	; 59
    17fa:	07 90       	elpm	r0, Z+
    17fc:	f6 91       	elpm	r31, Z
    17fe:	e0 2d       	mov	r30, r0
    1800:	09 94       	ijmp

00001802 <memcpy>:
    1802:	fb 01       	movw	r30, r22
    1804:	dc 01       	movw	r26, r24
    1806:	02 c0       	rjmp	.+4      	; 0x180c <memcpy+0xa>
    1808:	01 90       	ld	r0, Z+
    180a:	0d 92       	st	X+, r0
    180c:	41 50       	subi	r20, 0x01	; 1
    180e:	50 40       	sbci	r21, 0x00	; 0
    1810:	d8 f7       	brcc	.-10     	; 0x1808 <memcpy+0x6>
    1812:	08 95       	ret

00001814 <printf_P>:
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	ae 01       	movw	r20, r28
    1822:	49 5f       	subi	r20, 0xF9	; 249
    1824:	5f 4f       	sbci	r21, 0xFF	; 255
    1826:	da 01       	movw	r26, r20
    1828:	6d 91       	ld	r22, X+
    182a:	7d 91       	ld	r23, X+
    182c:	ad 01       	movw	r20, r26
    182e:	00 e4       	ldi	r16, 0x40	; 64
    1830:	11 e0       	ldi	r17, 0x01	; 1
    1832:	f8 01       	movw	r30, r16
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	dc 01       	movw	r26, r24
    183a:	13 96       	adiw	r26, 0x03	; 3
    183c:	2c 91       	ld	r18, X
    183e:	13 97       	sbiw	r26, 0x03	; 3
    1840:	28 60       	ori	r18, 0x08	; 8
    1842:	13 96       	adiw	r26, 0x03	; 3
    1844:	2c 93       	st	X, r18
    1846:	3e d0       	rcall	.+124    	; 0x18c4 <vfprintf>
    1848:	d8 01       	movw	r26, r16
    184a:	12 96       	adiw	r26, 0x02	; 2
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	13 97       	sbiw	r26, 0x03	; 3
    1852:	23 81       	ldd	r18, Z+3	; 0x03
    1854:	27 7f       	andi	r18, 0xF7	; 247
    1856:	23 83       	std	Z+3, r18	; 0x03
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	08 95       	ret

00001862 <puts_P>:
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	8c 01       	movw	r16, r24
    186c:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__iob+0x2>
    1870:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__iob+0x3>
    1874:	83 81       	ldd	r24, Z+3	; 0x03
    1876:	81 ff       	sbrs	r24, 1
    1878:	1b c0       	rjmp	.+54     	; 0x18b0 <puts_P+0x4e>
    187a:	d0 e0       	ldi	r29, 0x00	; 0
    187c:	c0 e0       	ldi	r28, 0x00	; 0
    187e:	f8 01       	movw	r30, r16
    1880:	84 91       	lpm	r24, Z
    1882:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <__iob+0x2>
    1886:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <__iob+0x3>
    188a:	db 01       	movw	r26, r22
    188c:	18 96       	adiw	r26, 0x08	; 8
    188e:	ed 91       	ld	r30, X+
    1890:	fc 91       	ld	r31, X
    1892:	19 97       	sbiw	r26, 0x09	; 9
    1894:	88 23       	and	r24, r24
    1896:	41 f0       	breq	.+16     	; 0x18a8 <puts_P+0x46>
    1898:	09 95       	icall
    189a:	89 2b       	or	r24, r25
    189c:	11 f0       	breq	.+4      	; 0x18a2 <puts_P+0x40>
    189e:	df ef       	ldi	r29, 0xFF	; 255
    18a0:	cf ef       	ldi	r28, 0xFF	; 255
    18a2:	0f 5f       	subi	r16, 0xFF	; 255
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	eb cf       	rjmp	.-42     	; 0x187e <puts_P+0x1c>
    18a8:	8a e0       	ldi	r24, 0x0A	; 10
    18aa:	09 95       	icall
    18ac:	89 2b       	or	r24, r25
    18ae:	19 f0       	breq	.+6      	; 0x18b6 <puts_P+0x54>
    18b0:	8f ef       	ldi	r24, 0xFF	; 255
    18b2:	9f ef       	ldi	r25, 0xFF	; 255
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <puts_P+0x58>
    18b6:	8d 2f       	mov	r24, r29
    18b8:	9c 2f       	mov	r25, r28
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <vfprintf>:
    18c4:	2f 92       	push	r2
    18c6:	3f 92       	push	r3
    18c8:	4f 92       	push	r4
    18ca:	5f 92       	push	r5
    18cc:	6f 92       	push	r6
    18ce:	7f 92       	push	r7
    18d0:	8f 92       	push	r8
    18d2:	9f 92       	push	r9
    18d4:	af 92       	push	r10
    18d6:	bf 92       	push	r11
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	2b 97       	sbiw	r28, 0x0b	; 11
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	6c 01       	movw	r12, r24
    18fa:	7b 01       	movw	r14, r22
    18fc:	8a 01       	movw	r16, r20
    18fe:	fc 01       	movw	r30, r24
    1900:	17 82       	std	Z+7, r1	; 0x07
    1902:	16 82       	std	Z+6, r1	; 0x06
    1904:	83 81       	ldd	r24, Z+3	; 0x03
    1906:	81 ff       	sbrs	r24, 1
    1908:	bf c1       	rjmp	.+894    	; 0x1c88 <vfprintf+0x3c4>
    190a:	ce 01       	movw	r24, r28
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	3c 01       	movw	r6, r24
    1910:	f6 01       	movw	r30, r12
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	f7 01       	movw	r30, r14
    1916:	93 fd       	sbrc	r25, 3
    1918:	85 91       	lpm	r24, Z+
    191a:	93 ff       	sbrs	r25, 3
    191c:	81 91       	ld	r24, Z+
    191e:	7f 01       	movw	r14, r30
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <vfprintf+0x62>
    1924:	ad c1       	rjmp	.+858    	; 0x1c80 <vfprintf+0x3bc>
    1926:	85 32       	cpi	r24, 0x25	; 37
    1928:	39 f4       	brne	.+14     	; 0x1938 <vfprintf+0x74>
    192a:	93 fd       	sbrc	r25, 3
    192c:	85 91       	lpm	r24, Z+
    192e:	93 ff       	sbrs	r25, 3
    1930:	81 91       	ld	r24, Z+
    1932:	7f 01       	movw	r14, r30
    1934:	85 32       	cpi	r24, 0x25	; 37
    1936:	21 f4       	brne	.+8      	; 0x1940 <vfprintf+0x7c>
    1938:	b6 01       	movw	r22, r12
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	d6 d1       	rcall	.+940    	; 0x1cea <fputc>
    193e:	e8 cf       	rjmp	.-48     	; 0x1910 <vfprintf+0x4c>
    1940:	91 2c       	mov	r9, r1
    1942:	21 2c       	mov	r2, r1
    1944:	31 2c       	mov	r3, r1
    1946:	ff e1       	ldi	r31, 0x1F	; 31
    1948:	f3 15       	cp	r31, r3
    194a:	d8 f0       	brcs	.+54     	; 0x1982 <vfprintf+0xbe>
    194c:	8b 32       	cpi	r24, 0x2B	; 43
    194e:	79 f0       	breq	.+30     	; 0x196e <vfprintf+0xaa>
    1950:	38 f4       	brcc	.+14     	; 0x1960 <vfprintf+0x9c>
    1952:	80 32       	cpi	r24, 0x20	; 32
    1954:	79 f0       	breq	.+30     	; 0x1974 <vfprintf+0xb0>
    1956:	83 32       	cpi	r24, 0x23	; 35
    1958:	a1 f4       	brne	.+40     	; 0x1982 <vfprintf+0xbe>
    195a:	23 2d       	mov	r18, r3
    195c:	20 61       	ori	r18, 0x10	; 16
    195e:	1d c0       	rjmp	.+58     	; 0x199a <vfprintf+0xd6>
    1960:	8d 32       	cpi	r24, 0x2D	; 45
    1962:	61 f0       	breq	.+24     	; 0x197c <vfprintf+0xb8>
    1964:	80 33       	cpi	r24, 0x30	; 48
    1966:	69 f4       	brne	.+26     	; 0x1982 <vfprintf+0xbe>
    1968:	23 2d       	mov	r18, r3
    196a:	21 60       	ori	r18, 0x01	; 1
    196c:	16 c0       	rjmp	.+44     	; 0x199a <vfprintf+0xd6>
    196e:	83 2d       	mov	r24, r3
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	38 2e       	mov	r3, r24
    1974:	e3 2d       	mov	r30, r3
    1976:	e4 60       	ori	r30, 0x04	; 4
    1978:	3e 2e       	mov	r3, r30
    197a:	2a c0       	rjmp	.+84     	; 0x19d0 <vfprintf+0x10c>
    197c:	f3 2d       	mov	r31, r3
    197e:	f8 60       	ori	r31, 0x08	; 8
    1980:	1d c0       	rjmp	.+58     	; 0x19bc <vfprintf+0xf8>
    1982:	37 fc       	sbrc	r3, 7
    1984:	2d c0       	rjmp	.+90     	; 0x19e0 <vfprintf+0x11c>
    1986:	20 ed       	ldi	r18, 0xD0	; 208
    1988:	28 0f       	add	r18, r24
    198a:	2a 30       	cpi	r18, 0x0A	; 10
    198c:	40 f0       	brcs	.+16     	; 0x199e <vfprintf+0xda>
    198e:	8e 32       	cpi	r24, 0x2E	; 46
    1990:	b9 f4       	brne	.+46     	; 0x19c0 <vfprintf+0xfc>
    1992:	36 fc       	sbrc	r3, 6
    1994:	75 c1       	rjmp	.+746    	; 0x1c80 <vfprintf+0x3bc>
    1996:	23 2d       	mov	r18, r3
    1998:	20 64       	ori	r18, 0x40	; 64
    199a:	32 2e       	mov	r3, r18
    199c:	19 c0       	rjmp	.+50     	; 0x19d0 <vfprintf+0x10c>
    199e:	36 fe       	sbrs	r3, 6
    19a0:	06 c0       	rjmp	.+12     	; 0x19ae <vfprintf+0xea>
    19a2:	8a e0       	ldi	r24, 0x0A	; 10
    19a4:	98 9e       	mul	r9, r24
    19a6:	20 0d       	add	r18, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	92 2e       	mov	r9, r18
    19ac:	11 c0       	rjmp	.+34     	; 0x19d0 <vfprintf+0x10c>
    19ae:	ea e0       	ldi	r30, 0x0A	; 10
    19b0:	2e 9e       	mul	r2, r30
    19b2:	20 0d       	add	r18, r0
    19b4:	11 24       	eor	r1, r1
    19b6:	22 2e       	mov	r2, r18
    19b8:	f3 2d       	mov	r31, r3
    19ba:	f0 62       	ori	r31, 0x20	; 32
    19bc:	3f 2e       	mov	r3, r31
    19be:	08 c0       	rjmp	.+16     	; 0x19d0 <vfprintf+0x10c>
    19c0:	8c 36       	cpi	r24, 0x6C	; 108
    19c2:	21 f4       	brne	.+8      	; 0x19cc <vfprintf+0x108>
    19c4:	83 2d       	mov	r24, r3
    19c6:	80 68       	ori	r24, 0x80	; 128
    19c8:	38 2e       	mov	r3, r24
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <vfprintf+0x10c>
    19cc:	88 36       	cpi	r24, 0x68	; 104
    19ce:	41 f4       	brne	.+16     	; 0x19e0 <vfprintf+0x11c>
    19d0:	f7 01       	movw	r30, r14
    19d2:	93 fd       	sbrc	r25, 3
    19d4:	85 91       	lpm	r24, Z+
    19d6:	93 ff       	sbrs	r25, 3
    19d8:	81 91       	ld	r24, Z+
    19da:	7f 01       	movw	r14, r30
    19dc:	81 11       	cpse	r24, r1
    19de:	b3 cf       	rjmp	.-154    	; 0x1946 <vfprintf+0x82>
    19e0:	98 2f       	mov	r25, r24
    19e2:	9f 7d       	andi	r25, 0xDF	; 223
    19e4:	95 54       	subi	r25, 0x45	; 69
    19e6:	93 30       	cpi	r25, 0x03	; 3
    19e8:	28 f4       	brcc	.+10     	; 0x19f4 <vfprintf+0x130>
    19ea:	0c 5f       	subi	r16, 0xFC	; 252
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	9f e3       	ldi	r25, 0x3F	; 63
    19f0:	99 83       	std	Y+1, r25	; 0x01
    19f2:	0d c0       	rjmp	.+26     	; 0x1a0e <vfprintf+0x14a>
    19f4:	83 36       	cpi	r24, 0x63	; 99
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <vfprintf+0x140>
    19f8:	83 37       	cpi	r24, 0x73	; 115
    19fa:	71 f0       	breq	.+28     	; 0x1a18 <vfprintf+0x154>
    19fc:	83 35       	cpi	r24, 0x53	; 83
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <vfprintf+0x13e>
    1a00:	55 c0       	rjmp	.+170    	; 0x1aac <vfprintf+0x1e8>
    1a02:	20 c0       	rjmp	.+64     	; 0x1a44 <vfprintf+0x180>
    1a04:	f8 01       	movw	r30, r16
    1a06:	80 81       	ld	r24, Z
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	0e 5f       	subi	r16, 0xFE	; 254
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	88 24       	eor	r8, r8
    1a10:	83 94       	inc	r8
    1a12:	91 2c       	mov	r9, r1
    1a14:	53 01       	movw	r10, r6
    1a16:	12 c0       	rjmp	.+36     	; 0x1a3c <vfprintf+0x178>
    1a18:	28 01       	movw	r4, r16
    1a1a:	f2 e0       	ldi	r31, 0x02	; 2
    1a1c:	4f 0e       	add	r4, r31
    1a1e:	51 1c       	adc	r5, r1
    1a20:	f8 01       	movw	r30, r16
    1a22:	a0 80       	ld	r10, Z
    1a24:	b1 80       	ldd	r11, Z+1	; 0x01
    1a26:	36 fe       	sbrs	r3, 6
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <vfprintf+0x16c>
    1a2a:	69 2d       	mov	r22, r9
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfprintf+0x170>
    1a30:	6f ef       	ldi	r22, 0xFF	; 255
    1a32:	7f ef       	ldi	r23, 0xFF	; 255
    1a34:	c5 01       	movw	r24, r10
    1a36:	4e d1       	rcall	.+668    	; 0x1cd4 <strnlen>
    1a38:	4c 01       	movw	r8, r24
    1a3a:	82 01       	movw	r16, r4
    1a3c:	f3 2d       	mov	r31, r3
    1a3e:	ff 77       	andi	r31, 0x7F	; 127
    1a40:	3f 2e       	mov	r3, r31
    1a42:	15 c0       	rjmp	.+42     	; 0x1a6e <vfprintf+0x1aa>
    1a44:	28 01       	movw	r4, r16
    1a46:	22 e0       	ldi	r18, 0x02	; 2
    1a48:	42 0e       	add	r4, r18
    1a4a:	51 1c       	adc	r5, r1
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	a0 80       	ld	r10, Z
    1a50:	b1 80       	ldd	r11, Z+1	; 0x01
    1a52:	36 fe       	sbrs	r3, 6
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <vfprintf+0x198>
    1a56:	69 2d       	mov	r22, r9
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <vfprintf+0x19c>
    1a5c:	6f ef       	ldi	r22, 0xFF	; 255
    1a5e:	7f ef       	ldi	r23, 0xFF	; 255
    1a60:	c5 01       	movw	r24, r10
    1a62:	2d d1       	rcall	.+602    	; 0x1cbe <strnlen_P>
    1a64:	4c 01       	movw	r8, r24
    1a66:	f3 2d       	mov	r31, r3
    1a68:	f0 68       	ori	r31, 0x80	; 128
    1a6a:	3f 2e       	mov	r3, r31
    1a6c:	82 01       	movw	r16, r4
    1a6e:	33 fc       	sbrc	r3, 3
    1a70:	19 c0       	rjmp	.+50     	; 0x1aa4 <vfprintf+0x1e0>
    1a72:	82 2d       	mov	r24, r2
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	88 16       	cp	r8, r24
    1a78:	99 06       	cpc	r9, r25
    1a7a:	a0 f4       	brcc	.+40     	; 0x1aa4 <vfprintf+0x1e0>
    1a7c:	b6 01       	movw	r22, r12
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	33 d1       	rcall	.+614    	; 0x1cea <fputc>
    1a84:	2a 94       	dec	r2
    1a86:	f5 cf       	rjmp	.-22     	; 0x1a72 <vfprintf+0x1ae>
    1a88:	f5 01       	movw	r30, r10
    1a8a:	37 fc       	sbrc	r3, 7
    1a8c:	85 91       	lpm	r24, Z+
    1a8e:	37 fe       	sbrs	r3, 7
    1a90:	81 91       	ld	r24, Z+
    1a92:	5f 01       	movw	r10, r30
    1a94:	b6 01       	movw	r22, r12
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	28 d1       	rcall	.+592    	; 0x1cea <fputc>
    1a9a:	21 10       	cpse	r2, r1
    1a9c:	2a 94       	dec	r2
    1a9e:	21 e0       	ldi	r18, 0x01	; 1
    1aa0:	82 1a       	sub	r8, r18
    1aa2:	91 08       	sbc	r9, r1
    1aa4:	81 14       	cp	r8, r1
    1aa6:	91 04       	cpc	r9, r1
    1aa8:	79 f7       	brne	.-34     	; 0x1a88 <vfprintf+0x1c4>
    1aaa:	e1 c0       	rjmp	.+450    	; 0x1c6e <vfprintf+0x3aa>
    1aac:	84 36       	cpi	r24, 0x64	; 100
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <vfprintf+0x1f0>
    1ab0:	89 36       	cpi	r24, 0x69	; 105
    1ab2:	39 f5       	brne	.+78     	; 0x1b02 <vfprintf+0x23e>
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	37 fe       	sbrs	r3, 7
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <vfprintf+0x204>
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	0c 5f       	subi	r16, 0xFC	; 252
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	08 c0       	rjmp	.+16     	; 0x1ad8 <vfprintf+0x214>
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	07 2e       	mov	r0, r23
    1ace:	00 0c       	add	r0, r0
    1ad0:	88 0b       	sbc	r24, r24
    1ad2:	99 0b       	sbc	r25, r25
    1ad4:	0e 5f       	subi	r16, 0xFE	; 254
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	f3 2d       	mov	r31, r3
    1ada:	ff 76       	andi	r31, 0x6F	; 111
    1adc:	3f 2e       	mov	r3, r31
    1ade:	97 ff       	sbrs	r25, 7
    1ae0:	09 c0       	rjmp	.+18     	; 0x1af4 <vfprintf+0x230>
    1ae2:	90 95       	com	r25
    1ae4:	80 95       	com	r24
    1ae6:	70 95       	com	r23
    1ae8:	61 95       	neg	r22
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	f0 68       	ori	r31, 0x80	; 128
    1af2:	3f 2e       	mov	r3, r31
    1af4:	2a e0       	ldi	r18, 0x0A	; 10
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	a3 01       	movw	r20, r6
    1afa:	33 d1       	rcall	.+614    	; 0x1d62 <__ultoa_invert>
    1afc:	88 2e       	mov	r8, r24
    1afe:	86 18       	sub	r8, r6
    1b00:	44 c0       	rjmp	.+136    	; 0x1b8a <vfprintf+0x2c6>
    1b02:	85 37       	cpi	r24, 0x75	; 117
    1b04:	31 f4       	brne	.+12     	; 0x1b12 <vfprintf+0x24e>
    1b06:	23 2d       	mov	r18, r3
    1b08:	2f 7e       	andi	r18, 0xEF	; 239
    1b0a:	b2 2e       	mov	r11, r18
    1b0c:	2a e0       	ldi	r18, 0x0A	; 10
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	25 c0       	rjmp	.+74     	; 0x1b5c <vfprintf+0x298>
    1b12:	93 2d       	mov	r25, r3
    1b14:	99 7f       	andi	r25, 0xF9	; 249
    1b16:	b9 2e       	mov	r11, r25
    1b18:	8f 36       	cpi	r24, 0x6F	; 111
    1b1a:	c1 f0       	breq	.+48     	; 0x1b4c <vfprintf+0x288>
    1b1c:	18 f4       	brcc	.+6      	; 0x1b24 <vfprintf+0x260>
    1b1e:	88 35       	cpi	r24, 0x58	; 88
    1b20:	79 f0       	breq	.+30     	; 0x1b40 <vfprintf+0x27c>
    1b22:	ae c0       	rjmp	.+348    	; 0x1c80 <vfprintf+0x3bc>
    1b24:	80 37       	cpi	r24, 0x70	; 112
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <vfprintf+0x26a>
    1b28:	88 37       	cpi	r24, 0x78	; 120
    1b2a:	21 f0       	breq	.+8      	; 0x1b34 <vfprintf+0x270>
    1b2c:	a9 c0       	rjmp	.+338    	; 0x1c80 <vfprintf+0x3bc>
    1b2e:	e9 2f       	mov	r30, r25
    1b30:	e0 61       	ori	r30, 0x10	; 16
    1b32:	be 2e       	mov	r11, r30
    1b34:	b4 fe       	sbrs	r11, 4
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <vfprintf+0x28e>
    1b38:	fb 2d       	mov	r31, r11
    1b3a:	f4 60       	ori	r31, 0x04	; 4
    1b3c:	bf 2e       	mov	r11, r31
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <vfprintf+0x28e>
    1b40:	34 fe       	sbrs	r3, 4
    1b42:	0a c0       	rjmp	.+20     	; 0x1b58 <vfprintf+0x294>
    1b44:	29 2f       	mov	r18, r25
    1b46:	26 60       	ori	r18, 0x06	; 6
    1b48:	b2 2e       	mov	r11, r18
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <vfprintf+0x294>
    1b4c:	28 e0       	ldi	r18, 0x08	; 8
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <vfprintf+0x298>
    1b52:	20 e1       	ldi	r18, 0x10	; 16
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x298>
    1b58:	20 e1       	ldi	r18, 0x10	; 16
    1b5a:	32 e0       	ldi	r19, 0x02	; 2
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	b7 fe       	sbrs	r11, 7
    1b60:	07 c0       	rjmp	.+14     	; 0x1b70 <vfprintf+0x2ac>
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	0c 5f       	subi	r16, 0xFC	; 252
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <vfprintf+0x2b8>
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 5f       	subi	r16, 0xFE	; 254
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	a3 01       	movw	r20, r6
    1b7e:	f1 d0       	rcall	.+482    	; 0x1d62 <__ultoa_invert>
    1b80:	88 2e       	mov	r8, r24
    1b82:	86 18       	sub	r8, r6
    1b84:	fb 2d       	mov	r31, r11
    1b86:	ff 77       	andi	r31, 0x7F	; 127
    1b88:	3f 2e       	mov	r3, r31
    1b8a:	36 fe       	sbrs	r3, 6
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <vfprintf+0x2e4>
    1b8e:	23 2d       	mov	r18, r3
    1b90:	2e 7f       	andi	r18, 0xFE	; 254
    1b92:	a2 2e       	mov	r10, r18
    1b94:	89 14       	cp	r8, r9
    1b96:	58 f4       	brcc	.+22     	; 0x1bae <vfprintf+0x2ea>
    1b98:	34 fe       	sbrs	r3, 4
    1b9a:	0b c0       	rjmp	.+22     	; 0x1bb2 <vfprintf+0x2ee>
    1b9c:	32 fc       	sbrc	r3, 2
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <vfprintf+0x2ee>
    1ba0:	83 2d       	mov	r24, r3
    1ba2:	8e 7e       	andi	r24, 0xEE	; 238
    1ba4:	a8 2e       	mov	r10, r24
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <vfprintf+0x2ee>
    1ba8:	b8 2c       	mov	r11, r8
    1baa:	a3 2c       	mov	r10, r3
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <vfprintf+0x2f0>
    1bae:	b8 2c       	mov	r11, r8
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <vfprintf+0x2f0>
    1bb2:	b9 2c       	mov	r11, r9
    1bb4:	a4 fe       	sbrs	r10, 4
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <vfprintf+0x312>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e8 0d       	add	r30, r8
    1bbc:	f1 1d       	adc	r31, r1
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 33       	cpi	r24, 0x30	; 48
    1bc2:	21 f4       	brne	.+8      	; 0x1bcc <vfprintf+0x308>
    1bc4:	9a 2d       	mov	r25, r10
    1bc6:	99 7e       	andi	r25, 0xE9	; 233
    1bc8:	a9 2e       	mov	r10, r25
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <vfprintf+0x31a>
    1bcc:	a2 fe       	sbrs	r10, 2
    1bce:	06 c0       	rjmp	.+12     	; 0x1bdc <vfprintf+0x318>
    1bd0:	b3 94       	inc	r11
    1bd2:	b3 94       	inc	r11
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <vfprintf+0x31a>
    1bd6:	8a 2d       	mov	r24, r10
    1bd8:	86 78       	andi	r24, 0x86	; 134
    1bda:	09 f0       	breq	.+2      	; 0x1bde <vfprintf+0x31a>
    1bdc:	b3 94       	inc	r11
    1bde:	a3 fc       	sbrc	r10, 3
    1be0:	10 c0       	rjmp	.+32     	; 0x1c02 <vfprintf+0x33e>
    1be2:	a0 fe       	sbrs	r10, 0
    1be4:	06 c0       	rjmp	.+12     	; 0x1bf2 <vfprintf+0x32e>
    1be6:	b2 14       	cp	r11, r2
    1be8:	80 f4       	brcc	.+32     	; 0x1c0a <vfprintf+0x346>
    1bea:	28 0c       	add	r2, r8
    1bec:	92 2c       	mov	r9, r2
    1bee:	9b 18       	sub	r9, r11
    1bf0:	0d c0       	rjmp	.+26     	; 0x1c0c <vfprintf+0x348>
    1bf2:	b2 14       	cp	r11, r2
    1bf4:	58 f4       	brcc	.+22     	; 0x1c0c <vfprintf+0x348>
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	76 d0       	rcall	.+236    	; 0x1cea <fputc>
    1bfe:	b3 94       	inc	r11
    1c00:	f8 cf       	rjmp	.-16     	; 0x1bf2 <vfprintf+0x32e>
    1c02:	b2 14       	cp	r11, r2
    1c04:	18 f4       	brcc	.+6      	; 0x1c0c <vfprintf+0x348>
    1c06:	2b 18       	sub	r2, r11
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <vfprintf+0x34a>
    1c0a:	98 2c       	mov	r9, r8
    1c0c:	21 2c       	mov	r2, r1
    1c0e:	a4 fe       	sbrs	r10, 4
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <vfprintf+0x36c>
    1c12:	b6 01       	movw	r22, r12
    1c14:	80 e3       	ldi	r24, 0x30	; 48
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	68 d0       	rcall	.+208    	; 0x1cea <fputc>
    1c1a:	a2 fe       	sbrs	r10, 2
    1c1c:	16 c0       	rjmp	.+44     	; 0x1c4a <vfprintf+0x386>
    1c1e:	a1 fc       	sbrc	r10, 1
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <vfprintf+0x364>
    1c22:	88 e7       	ldi	r24, 0x78	; 120
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <vfprintf+0x368>
    1c28:	88 e5       	ldi	r24, 0x58	; 88
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <vfprintf+0x384>
    1c30:	8a 2d       	mov	r24, r10
    1c32:	86 78       	andi	r24, 0x86	; 134
    1c34:	51 f0       	breq	.+20     	; 0x1c4a <vfprintf+0x386>
    1c36:	a1 fe       	sbrs	r10, 1
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x37a>
    1c3a:	8b e2       	ldi	r24, 0x2B	; 43
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <vfprintf+0x37c>
    1c3e:	80 e2       	ldi	r24, 0x20	; 32
    1c40:	a7 fc       	sbrc	r10, 7
    1c42:	8d e2       	ldi	r24, 0x2D	; 45
    1c44:	b6 01       	movw	r22, r12
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	50 d0       	rcall	.+160    	; 0x1cea <fputc>
    1c4a:	89 14       	cp	r8, r9
    1c4c:	30 f4       	brcc	.+12     	; 0x1c5a <vfprintf+0x396>
    1c4e:	b6 01       	movw	r22, r12
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	4a d0       	rcall	.+148    	; 0x1cea <fputc>
    1c56:	9a 94       	dec	r9
    1c58:	f8 cf       	rjmp	.-16     	; 0x1c4a <vfprintf+0x386>
    1c5a:	8a 94       	dec	r8
    1c5c:	f3 01       	movw	r30, r6
    1c5e:	e8 0d       	add	r30, r8
    1c60:	f1 1d       	adc	r31, r1
    1c62:	80 81       	ld	r24, Z
    1c64:	b6 01       	movw	r22, r12
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	40 d0       	rcall	.+128    	; 0x1cea <fputc>
    1c6a:	81 10       	cpse	r8, r1
    1c6c:	f6 cf       	rjmp	.-20     	; 0x1c5a <vfprintf+0x396>
    1c6e:	22 20       	and	r2, r2
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <vfprintf+0x3b0>
    1c72:	4e ce       	rjmp	.-868    	; 0x1910 <vfprintf+0x4c>
    1c74:	b6 01       	movw	r22, r12
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	37 d0       	rcall	.+110    	; 0x1cea <fputc>
    1c7c:	2a 94       	dec	r2
    1c7e:	f7 cf       	rjmp	.-18     	; 0x1c6e <vfprintf+0x3aa>
    1c80:	f6 01       	movw	r30, r12
    1c82:	86 81       	ldd	r24, Z+6	; 0x06
    1c84:	97 81       	ldd	r25, Z+7	; 0x07
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <vfprintf+0x3c8>
    1c88:	8f ef       	ldi	r24, 0xFF	; 255
    1c8a:	9f ef       	ldi	r25, 0xFF	; 255
    1c8c:	2b 96       	adiw	r28, 0x0b	; 11
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	af 90       	pop	r10
    1cac:	9f 90       	pop	r9
    1cae:	8f 90       	pop	r8
    1cb0:	7f 90       	pop	r7
    1cb2:	6f 90       	pop	r6
    1cb4:	5f 90       	pop	r5
    1cb6:	4f 90       	pop	r4
    1cb8:	3f 90       	pop	r3
    1cba:	2f 90       	pop	r2
    1cbc:	08 95       	ret

00001cbe <strnlen_P>:
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	05 90       	lpm	r0, Z+
    1cc2:	61 50       	subi	r22, 0x01	; 1
    1cc4:	70 40       	sbci	r23, 0x00	; 0
    1cc6:	01 10       	cpse	r0, r1
    1cc8:	d8 f7       	brcc	.-10     	; 0x1cc0 <strnlen_P+0x2>
    1cca:	80 95       	com	r24
    1ccc:	90 95       	com	r25
    1cce:	8e 0f       	add	r24, r30
    1cd0:	9f 1f       	adc	r25, r31
    1cd2:	08 95       	ret

00001cd4 <strnlen>:
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	61 50       	subi	r22, 0x01	; 1
    1cd8:	70 40       	sbci	r23, 0x00	; 0
    1cda:	01 90       	ld	r0, Z+
    1cdc:	01 10       	cpse	r0, r1
    1cde:	d8 f7       	brcc	.-10     	; 0x1cd6 <strnlen+0x2>
    1ce0:	80 95       	com	r24
    1ce2:	90 95       	com	r25
    1ce4:	8e 0f       	add	r24, r30
    1ce6:	9f 1f       	adc	r25, r31
    1ce8:	08 95       	ret

00001cea <fputc>:
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	23 81       	ldd	r18, Z+3	; 0x03
    1cf6:	21 fd       	sbrc	r18, 1
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <fputc+0x16>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	2c c0       	rjmp	.+88     	; 0x1d58 <fputc+0x6e>
    1d00:	22 ff       	sbrs	r18, 2
    1d02:	16 c0       	rjmp	.+44     	; 0x1d30 <fputc+0x46>
    1d04:	46 81       	ldd	r20, Z+6	; 0x06
    1d06:	57 81       	ldd	r21, Z+7	; 0x07
    1d08:	24 81       	ldd	r18, Z+4	; 0x04
    1d0a:	35 81       	ldd	r19, Z+5	; 0x05
    1d0c:	42 17       	cp	r20, r18
    1d0e:	53 07       	cpc	r21, r19
    1d10:	44 f4       	brge	.+16     	; 0x1d22 <fputc+0x38>
    1d12:	a0 81       	ld	r26, Z
    1d14:	b1 81       	ldd	r27, Z+1	; 0x01
    1d16:	9d 01       	movw	r18, r26
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	31 83       	std	Z+1, r19	; 0x01
    1d1e:	20 83       	st	Z, r18
    1d20:	8c 93       	st	X, r24
    1d22:	26 81       	ldd	r18, Z+6	; 0x06
    1d24:	37 81       	ldd	r19, Z+7	; 0x07
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	37 83       	std	Z+7, r19	; 0x07
    1d2c:	26 83       	std	Z+6, r18	; 0x06
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <fputc+0x6e>
    1d30:	8b 01       	movw	r16, r22
    1d32:	ec 01       	movw	r28, r24
    1d34:	fb 01       	movw	r30, r22
    1d36:	00 84       	ldd	r0, Z+8	; 0x08
    1d38:	f1 85       	ldd	r31, Z+9	; 0x09
    1d3a:	e0 2d       	mov	r30, r0
    1d3c:	09 95       	icall
    1d3e:	89 2b       	or	r24, r25
    1d40:	e1 f6       	brne	.-72     	; 0x1cfa <fputc+0x10>
    1d42:	d8 01       	movw	r26, r16
    1d44:	16 96       	adiw	r26, 0x06	; 6
    1d46:	8d 91       	ld	r24, X+
    1d48:	9c 91       	ld	r25, X
    1d4a:	17 97       	sbiw	r26, 0x07	; 7
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	17 96       	adiw	r26, 0x07	; 7
    1d50:	9c 93       	st	X, r25
    1d52:	8e 93       	st	-X, r24
    1d54:	16 97       	sbiw	r26, 0x06	; 6
    1d56:	ce 01       	movw	r24, r28
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <__ultoa_invert>:
    1d62:	fa 01       	movw	r30, r20
    1d64:	aa 27       	eor	r26, r26
    1d66:	28 30       	cpi	r18, 0x08	; 8
    1d68:	51 f1       	breq	.+84     	; 0x1dbe <__ultoa_invert+0x5c>
    1d6a:	20 31       	cpi	r18, 0x10	; 16
    1d6c:	81 f1       	breq	.+96     	; 0x1dce <__ultoa_invert+0x6c>
    1d6e:	e8 94       	clt
    1d70:	6f 93       	push	r22
    1d72:	6e 7f       	andi	r22, 0xFE	; 254
    1d74:	6e 5f       	subi	r22, 0xFE	; 254
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	af 4f       	sbci	r26, 0xFF	; 255
    1d7e:	b1 e0       	ldi	r27, 0x01	; 1
    1d80:	3e d0       	rcall	.+124    	; 0x1dfe <__ultoa_invert+0x9c>
    1d82:	b4 e0       	ldi	r27, 0x04	; 4
    1d84:	3c d0       	rcall	.+120    	; 0x1dfe <__ultoa_invert+0x9c>
    1d86:	67 0f       	add	r22, r23
    1d88:	78 1f       	adc	r23, r24
    1d8a:	89 1f       	adc	r24, r25
    1d8c:	9a 1f       	adc	r25, r26
    1d8e:	a1 1d       	adc	r26, r1
    1d90:	68 0f       	add	r22, r24
    1d92:	79 1f       	adc	r23, r25
    1d94:	8a 1f       	adc	r24, r26
    1d96:	91 1d       	adc	r25, r1
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	6a 0f       	add	r22, r26
    1d9c:	71 1d       	adc	r23, r1
    1d9e:	81 1d       	adc	r24, r1
    1da0:	91 1d       	adc	r25, r1
    1da2:	a1 1d       	adc	r26, r1
    1da4:	20 d0       	rcall	.+64     	; 0x1de6 <__ultoa_invert+0x84>
    1da6:	09 f4       	brne	.+2      	; 0x1daa <__ultoa_invert+0x48>
    1da8:	68 94       	set
    1daa:	3f 91       	pop	r19
    1dac:	2a e0       	ldi	r18, 0x0A	; 10
    1dae:	26 9f       	mul	r18, r22
    1db0:	11 24       	eor	r1, r1
    1db2:	30 19       	sub	r19, r0
    1db4:	30 5d       	subi	r19, 0xD0	; 208
    1db6:	31 93       	st	Z+, r19
    1db8:	de f6       	brtc	.-74     	; 0x1d70 <__ultoa_invert+0xe>
    1dba:	cf 01       	movw	r24, r30
    1dbc:	08 95       	ret
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	47 70       	andi	r20, 0x07	; 7
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	41 93       	st	Z+, r20
    1dc6:	b3 e0       	ldi	r27, 0x03	; 3
    1dc8:	0f d0       	rcall	.+30     	; 0x1de8 <__ultoa_invert+0x86>
    1dca:	c9 f7       	brne	.-14     	; 0x1dbe <__ultoa_invert+0x5c>
    1dcc:	f6 cf       	rjmp	.-20     	; 0x1dba <__ultoa_invert+0x58>
    1dce:	46 2f       	mov	r20, r22
    1dd0:	4f 70       	andi	r20, 0x0F	; 15
    1dd2:	40 5d       	subi	r20, 0xD0	; 208
    1dd4:	4a 33       	cpi	r20, 0x3A	; 58
    1dd6:	18 f0       	brcs	.+6      	; 0x1dde <__ultoa_invert+0x7c>
    1dd8:	49 5d       	subi	r20, 0xD9	; 217
    1dda:	31 fd       	sbrc	r19, 1
    1ddc:	40 52       	subi	r20, 0x20	; 32
    1dde:	41 93       	st	Z+, r20
    1de0:	02 d0       	rcall	.+4      	; 0x1de6 <__ultoa_invert+0x84>
    1de2:	a9 f7       	brne	.-22     	; 0x1dce <__ultoa_invert+0x6c>
    1de4:	ea cf       	rjmp	.-44     	; 0x1dba <__ultoa_invert+0x58>
    1de6:	b4 e0       	ldi	r27, 0x04	; 4
    1de8:	a6 95       	lsr	r26
    1dea:	97 95       	ror	r25
    1dec:	87 95       	ror	r24
    1dee:	77 95       	ror	r23
    1df0:	67 95       	ror	r22
    1df2:	ba 95       	dec	r27
    1df4:	c9 f7       	brne	.-14     	; 0x1de8 <__ultoa_invert+0x86>
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	61 05       	cpc	r22, r1
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	08 95       	ret
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	0a 2e       	mov	r0, r26
    1e04:	06 94       	lsr	r0
    1e06:	57 95       	ror	r21
    1e08:	47 95       	ror	r20
    1e0a:	37 95       	ror	r19
    1e0c:	27 95       	ror	r18
    1e0e:	ba 95       	dec	r27
    1e10:	c9 f7       	brne	.-14     	; 0x1e04 <__ultoa_invert+0xa2>
    1e12:	62 0f       	add	r22, r18
    1e14:	73 1f       	adc	r23, r19
    1e16:	84 1f       	adc	r24, r20
    1e18:	95 1f       	adc	r25, r21
    1e1a:	a0 1d       	adc	r26, r0
    1e1c:	08 95       	ret

00001e1e <_exit>:
    1e1e:	f8 94       	cli

00001e20 <__stop_program>:
    1e20:	ff cf       	rjmp	.-2      	; 0x1e20 <__stop_program>
